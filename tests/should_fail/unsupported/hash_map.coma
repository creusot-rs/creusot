module M_hash_map__qyi5744717520881225036__new [#"hash_map.rs" 19 4 19 24] (* Foo *)
  let%span shash_map = "hash_map.rs" 20 13 20 27
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_RandomState  =
    { t_RandomState__k0: UInt64.t; t_RandomState__k1: UInt64.t }
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_RawTableInner  =
    { t_RawTableInner__bucket_mask: UInt64.t;
      t_RawTableInner__ctrl: t_NonNull;
      t_RawTableInner__growth_left: UInt64.t;
      t_RawTableInner__items: UInt64.t }
  
  type t_RawTable  =
    { t_RawTable__table: t_RawTableInner; t_RawTable__alloc: (); t_RawTable__marker: () }
  
  type t_HashMap  =
    { t_HashMap__hash_builder: t_RandomState; t_HashMap__table: t_RawTable }
  
  type t_HashMap'0  =
    { t_HashMap__base: t_HashMap }
  
  type t_Foo  =
    { t_Foo__0: t_HashMap'0 }
  
  meta "compute_max_steps" 1000000
  
  let rec new[#"hash_map.rs" 19 4 19 24] (return'  (x:t_Foo))= (! bb0 [ bb0 = {[%#shash_map] false} any ] )
    [ & _0: t_Foo = Any.any_l () | & _1: t_HashMap'0 = Any.any_l () ]
     [ return''0 (result:t_Foo)-> (! return' {result}) ] 
end
module M_hash_map__qyi5744717520881225036__add [#"hash_map.rs" 24 4 24 44] (* Foo *)
  let%span shash_map = "hash_map.rs" 25 9 25 26
  let%span shash_map'0 = "hash_map.rs" 23 14 23 45
  let%span shash_map'1 = "hash_map.rs" 11 4 11 12
  let%span sfmap = "../../../creusot-contracts/src/logic/fmap.rs" 133 8 136 9
  let%span sfmap'0 = "../../../creusot-contracts/src/logic/fmap.rs" 144 8 144 26
  let%span sfmap'1 = "../../../creusot-contracts/src/logic/fmap.rs" 59 14 59 86
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use creusot.int.UInt8
  use map.Map
  use creusot.prelude.Any
  
  type t_RandomState  =
    { t_RandomState__k0: UInt64.t; t_RandomState__k1: UInt64.t }
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_RawTableInner  =
    { t_RawTableInner__bucket_mask: UInt64.t;
      t_RawTableInner__ctrl: t_NonNull;
      t_RawTableInner__growth_left: UInt64.t;
      t_RawTableInner__items: UInt64.t }
  
  type t_RawTable  =
    { t_RawTable__table: t_RawTableInner; t_RawTable__alloc: (); t_RawTable__marker: () }
  
  type t_HashMap  =
    { t_HashMap__hash_builder: t_RandomState; t_HashMap__table: t_RawTable }
  
  type t_HashMap'0  =
    { t_HashMap__base: t_HashMap }
  
  type t_Foo  =
    { t_Foo__0: t_HashMap'0 }
  
  type t_FMap
  
  type t_Option  =
    | C_None
    | C_Some UInt8.t
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt8.t
  
  function view (self: t_FMap) : Map.map int t_Option'0
  
  axiom view_spec: forall self: t_FMap. [%#sfmap'1] forall m1: t_FMap, m2: t_FMap. m1 <> m2  -> view m1 <> view m2
  
  function get_unsized [@inline:trivial] (self: t_FMap) (k: int) : t_Option'0 =
    [%#sfmap'0] Map.get (view self) k
  
  function get [@inline:trivial] (self: t_FMap) (k: int) : t_Option =
    [%#sfmap] match get_unsized self k with
      | C_None'0 -> C_None
      | C_Some'0 x -> C_Some x
      end
  
  function view'0 (self: t_HashMap'0) : t_FMap
  
  function view'1 [#"hash_map.rs" 13 4 13 33] (self: t_Foo) : t_FMap =
    [%#shash_map'1] view'0 self.t_Foo__0
  
  meta "compute_max_steps" 1000000
  
  let rec add[#"hash_map.rs" 24 4 24 44] (self:MutBorrow.t t_Foo) (num:UInt64.t) (bar:UInt8.t) (return'  (x:()))= (! bb0
    [ bb0 = {[%#shash_map] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_Foo = self
    | & num'0: UInt64.t = num
    | & bar'0: UInt8.t = bar
    | & _6: MutBorrow.t UInt8.t = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:add ensures] [%#shash_map'0] get (view'1 self.final) (UInt64.t'int num)
      = C_Some bar}
      (! return' {result}) ]

end
