module M_08__Tr__program [#"08.rs" 10 4 10 21]
  let%span s08 = "08.rs" 10 16 10 20
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 91 8 91 18
  
  use creusot.prelude.Any
  
  type t_Self
  
  predicate inv (_0: t_Self)
  
  predicate invariant' (self: t_Self) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0: t_Self)
  
  axiom inv_axiom [@rewrite]: forall x: t_Self [inv'0 x]. inv'0 x = invariant' x
  
  predicate precondition (self: ()) (args: t_Self)
  
  axiom precondition_fndef: forall args: t_Self [precondition () args]. (let self = args in inv'0 self)
   -> precondition () args
  
  predicate postcondition_once (self: ()) (args: t_Self) (result: ())
  
  axiom postcondition_fndef: forall args: t_Self, res: () [postcondition_once () args res]. postcondition_once () args res
   -> (let self = args in true)
  
  meta "compute_max_steps" 1000000
  
  let rec program[#"08.rs" 10 4 10 21] (self:t_Self) (return'  (x:()))= {[@expl:program 'self' type invariant] [%#s08] inv'0 self}
    (! bb0 [ bb0 = return''0 {_0} ] ) [ & _0: () = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
module M_08__test [#"08.rs" 13 0 13 24]
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"08.rs" 13 0 13 24] (_0:t_T) (return'  (x:()))= {[@expl:test '_0' type invariant] inv _0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv _1} s1 | s1 = -{resolve _1}- s2 | s2 = bb1 ] 
    | bb1 = return''0 {_0'0} ]
    ) [ & _0'0: () = Any.any_l () | & _1: t_T = _0 ]  [ return''0 (result:())-> (! return' {result}) ] 
end
