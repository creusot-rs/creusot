module M_100doors__f [#"100doors.rs" 18 0 18 10]
  let%span s100doors = "100doors.rs" 19 40 19 45
  let%span s100doors'0 = "100doors.rs" 19 47 19 50
  let%span s100doors'1 = "100doors.rs" 21 16 21 17
  let%span s100doors'2 = "100doors.rs" 21 19 21 22
  let%span s100doors'3 = "100doors.rs" 21 4 21 7
  let%span s100doors'4 = "100doors.rs" 21 4 21 7
  let%span s100doors'5 = "100doors.rs" 20 16 20 39
  let%span s100doors'6 = "100doors.rs" 21 4 21 7
  let%span s100doors'7 = "100doors.rs" 21 4 21 7
  let%span s100doors'8 = "100doors.rs" 24 20 24 43
  let%span s100doors'9 = "100doors.rs" 23 20 23 54
  let%span s100doors'10 = "100doors.rs" 25 22 25 25
  let%span s100doors'11 = "100doors.rs" 26 52 26 53
  let%span s100doors'12 = "100doors.rs" 26 29 26 30
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 178 22 178 41
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 179 22 179 70
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'8 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span siter = "../../creusot-contracts/src/std/iter.rs" 210 18 210 32
  let%span siter'0 = "../../creusot-contracts/src/std/iter.rs" 94 26 97 17
  let%span srange = "../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span srange'0 = "../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange'1 = "../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange'2 = "../../creusot-contracts/src/std/iter/range.rs" 39 15 39 32
  let%span srange'3 = "../../creusot-contracts/src/std/iter/range.rs" 40 14 40 42
  let%span srange'4 = "../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span snum = "../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 122 20 122 88
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq bool
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  predicate index_logic [@inline:trivial] (self: t_Vec) (ix: int) =
    [%#sindex] Seq.get (view self) ix
  
  let rec from_elem (elem:bool) (n:UInt64.t) (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#svec] Seq.length (view result) = UInt64.t'int n}
      {[%#svec'0] forall i: int. 0 <= i /\ i < UInt64.t'int n  -> index_logic result i = elem}
      (! return' {result}) ]
  
  
  type t_Range  =
    { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  let rec into_iter (self_:t_Range) (return'  (x:t_Range))= any
    [ return''0 (result:t_Range)-> {[%#siter] result = self_} (! return' {result}) ]
  
  
  function deep_model (self: UInt64.t) : int =
    [%#snum] UInt64.t'int self
  
  predicate produces (self: t_Range) (visited: Seq.seq UInt64.t) (o: t_Range) =
    [%#srange] self.t_Range__end = o.t_Range__end
    /\ deep_model self.t_Range__start <= deep_model o.t_Range__start
    /\ (Seq.length visited > 0  -> deep_model o.t_Range__start <= deep_model o.t_Range__end)
    /\ Seq.length visited = deep_model o.t_Range__start - deep_model self.t_Range__start
    /\ (forall i: int. 0 <= i /\ i < Seq.length visited
     -> deep_model (Seq.get visited i) = deep_model self.t_Range__start + i)
  
  function produces_trans (a: t_Range) (ab: Seq.seq UInt64.t) (b: t_Range) (bc: Seq.seq UInt64.t) (c: t_Range) : ()
  
  axiom produces_trans_spec: forall a: t_Range, ab: Seq.seq UInt64.t, b: t_Range, bc: Seq.seq UInt64.t, c: t_Range. ([%#srange'1] produces a ab b)
   -> ([%#srange'2] produces b bc c)  -> ([%#srange'3] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self: t_Range) : ()
  
  axiom produces_refl_spec: forall self: t_Range. [%#srange'0] produces self (Seq.empty: Seq.seq UInt64.t) self
  
  predicate inv (_0: t_Range)
  
  axiom inv_axiom [@rewrite]: forall x: t_Range [inv x]. inv x = true
  
  predicate inv'0 (_0: Seq.seq UInt64.t)
  
  axiom inv_axiom'0 [@rewrite]: forall x: Seq.seq UInt64.t [inv'0 x]. inv'0 x = true
  
  type t_Option  =
    | C_None
    | C_Some UInt64.t
  
  predicate resolve (self: MutBorrow.t t_Range) =
    [%#sresolve] self.final = self.current
  
  predicate completed (self: MutBorrow.t t_Range) =
    [%#srange'4] resolve self /\ deep_model (self.current).t_Range__start >= deep_model (self.current).t_Range__end
  
  let rec next (self_:MutBorrow.t t_Range) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#siter'0] match result with
        | C_None -> completed self_
        | C_Some v -> produces self_.current (Seq.singleton v) self_.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_0: MutBorrow.t t_Range) =
    resolve _0
  
  let rec v_Some (input:t_Option) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0: UInt64.t [C_Some field_0: t_Option]. C_Some field_0 <> input} (! {false} any) ]
  
  
  predicate in_bounds [@inline:trivial] (self: UInt64.t) (seq: Seq.seq bool) =
    [%#sslice] UInt64.t'int self < Seq.length seq
  
  function view'0 (self: t_Vec) : Seq.seq bool =
    [%#smodel] view self
  
  predicate has_value [@inline:trivial] (self: UInt64.t) (seq: Seq.seq bool) (out: bool) =
    [%#sslice'0] Seq.get seq (UInt64.t'int self) = out
  
  let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:bool))= {[@expl:index requires] [%#svec'2] in_bounds ix (view'0 self_)}
    any [ return''0 (result:bool)-> {[%#svec'3] has_value ix (view'0 self_) result} (! return' {result}) ] 
  
  function view'1 (self: MutBorrow.t t_Vec) : Seq.seq bool =
    [%#smodel'0] view self.current
  
  predicate resolve_elswhere [@inline:trivial] (self: UInt64.t) (old': Seq.seq bool) (fin: Seq.seq bool) =
    [%#sslice'1] forall i: int. 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t bool))= {[@expl:index_mut requires] [%#svec'4] in_bounds ix (view'1 self_)}
    any
    [ return''0 (result:MutBorrow.t bool)-> {[%#svec'5] has_value ix (view'1 self_) result.current}
      {[%#svec'6] has_value ix (view self_.final) result.final}
      {[%#svec'7] resolve_elswhere ix (view'1 self_) (view self_.final)}
      {[%#svec'8] Seq.length (view self_.final) = Seq.length (view'1 self_)}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self: MutBorrow.t bool) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t bool) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec f[#"100doors.rs" 18 0 18 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = from_elem {[%#s100doors] false} {[%#s100doors'0] (100: UInt64.t)}
          (fun (_ret:t_Vec) ->  [ &door_open <- _ret ] s1)
      | s1 = bb1 ]
    
    | bb1 = s0
      [ s0 = 
        [ &_3 <- { t_Range__start = ([%#s100doors'1] (1: UInt64.t));
                   t_Range__end = ([%#s100doors'2] (101: UInt64.t)) } ]
        
        s1
      | s1 = into_iter {_3} (fun (_ret:t_Range) ->  [ &iter <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s100doors'3] iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#s100doors'4] Seq.empty: Seq.seq UInt64.t ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5'0
      [ bb5'0 = {[@expl:for invariant] [%#s100doors'6] inv'0 produced}
        {[@expl:for invariant] [%#s100doors'6] inv iter}
        {[@expl:for invariant] [%#s100doors'6] produces iter_old produced iter}
        {[@expl:loop invariant] [%#s100doors'5] Seq.length (view door_open) = 100}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = bb7
        | bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range> {iter}
              (fun (_ret:MutBorrow.t t_Range) ->  [ &_16 <- _ret ]  [ &iter <- _ret.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range> {_16.current} {MutBorrow.get_id _16}
              (fun (_ret:MutBorrow.t t_Range) ->  [ &_15 <- _ret ]  [ &_16 <- { _16 with current = _ret.final } ] s2)
          | s2 = next {_15} (fun (_ret:t_Option) ->  [ &_14 <- _ret ] s3)
          | s3 = bb8 ]
        
        | bb8 = s0
          [ s0 = -{resolve'0 _16}- s1
          | s1 = any [ br0 -> {_14 = C_None} (! bb11) | br1 (x0:UInt64.t)-> {_14 = C_Some x0} (! bb10) ]  ]
        
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some {_14} (fun (r0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0 ] s1)
          | s1 =  [ &_19 <- [%#s100doors'7] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 =  [ &produced <- _19 ] s1
          | s1 =  [ &pass <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &door <- pass ] s3
          | s3 = bb14 ]
        
        | bb14 = bb14'0
          [ bb14'0 = {[@expl:loop invariant #0] [%#s100doors'9] 1 <= UInt64.t'int door
            /\ UInt64.t'int door <= 100 + UInt64.t'int pass}
            {[@expl:loop invariant #1] [%#s100doors'8] Seq.length (view door_open) = 100}
            (! s0) [ s0 = bb15 ] 
            [ bb15 = bb16
            | bb16 = s0
              [ s0 =  [ &_26 <- UInt64.le door ([%#s100doors'10] (100: UInt64.t)) ] s1
              | s1 = any [ br0 -> {_26 = false} (! bb20) | br1 -> {_26} (! bb17) ]  ]
            
            | bb17 = s0
              [ s0 = UInt64.sub {door} {[%#s100doors'11] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_31 <- _ret ] s1)
              | s1 = index {door_open} {_31} (fun (_ret:bool) ->  [ &_29 <- _ret ] s2)
              | s2 = bb18 ]
            
            | bb18 = s0
              [ s0 = MutBorrow.borrow_mut <t_Vec> {door_open}
                  (fun (_ret:MutBorrow.t t_Vec) ->  [ &_34 <- _ret ]  [ &door_open <- _ret.final ] s1)
              | s1 = UInt64.sub {door} {[%#s100doors'12] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &_35 <- _ret ] s2)
              | s2 = index_mut {_34} {_35} (fun (_ret:MutBorrow.t bool) ->  [ &_33 <- _ret ] s3)
              | s3 = bb19 ]
            
            | bb19 = s0
              [ s0 =  [ &_33 <- { _33 with current = not _29 } ] s1
              | s1 = -{resolve'2 _33}- s2
              | s2 = UInt64.add {door} {pass} (fun (_ret:UInt64.t) ->  [ &door <- _ret ] s3)
              | s3 = bb14'0 ]
             ]
           ]
        
        | bb20 = bb5'0 ]
       ]
    
    | bb11 = bb21
    | bb21 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & door_open: t_Vec = Any.any_l ()
    | & iter: t_Range = Any.any_l ()
    | & _3: t_Range = Any.any_l ()
    | & iter_old: t_Range = Any.any_l ()
    | & produced: Seq.seq UInt64.t = Any.any_l ()
    | & _14: t_Option = Any.any_l ()
    | & _15: MutBorrow.t t_Range = Any.any_l ()
    | & _16: MutBorrow.t t_Range = Any.any_l ()
    | & __creusot_proc_iter_elem: UInt64.t = Any.any_l ()
    | & _19: Seq.seq UInt64.t = Any.any_l ()
    | & pass: UInt64.t = Any.any_l ()
    | & door: UInt64.t = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & _33: MutBorrow.t bool = Any.any_l ()
    | & _34: MutBorrow.t t_Vec = Any.any_l ()
    | & _35: UInt64.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
