module M_duration__test_duration [#"duration.rs" 7 0 7 22]
  let%span sduration = "duration.rs" 8 29 8 30
  let%span sduration'0 = "duration.rs" 8 32 8 33
  let%span sduration'1 = "duration.rs" 9 18 9 28
  let%span sduration'2 = "duration.rs" 10 31 10 32
  let%span sduration'3 = "duration.rs" 12 28 12 36
  let%span sduration'4 = "duration.rs" 12 38 12 49
  let%span sduration'5 = "duration.rs" 14 37 14 38
  let%span sduration'6 = "duration.rs" 15 18 15 42
  let%span sduration'7 = "duration.rs" 17 41 17 42
  let%span sduration'8 = "duration.rs" 18 18 18 40
  let%span sduration'9 = "duration.rs" 20 41 20 42
  let%span sduration'10 = "duration.rs" 21 18 21 36
  let%span sduration'11 = "duration.rs" 23 39 23 40
  let%span sduration'12 = "duration.rs" 24 18 24 31
  let%span sduration'13 = "duration.rs" 27 4 27 30
  let%span sduration'14 = "duration.rs" 29 12 29 13
  let%span sduration'15 = "duration.rs" 30 12 30 13
  let%span sduration'16 = "duration.rs" 31 12 31 13
  let%span sduration'17 = "duration.rs" 32 12 32 13
  let%span sduration'18 = "duration.rs" 44 28 44 29
  let%span sduration'19 = "duration.rs" 45 31 45 33
  let%span sduration'20 = "duration.rs" 47 31 47 32
  let%span sduration'21 = "duration.rs" 48 31 48 33
  let%span sduration'22 = "duration.rs" 52 18 52 35
  let%span sduration'23 = "duration.rs" 53 18 53 39
  let%span sduration'24 = "duration.rs" 48 4 48 45
  let%span sduration'25 = "duration.rs" 47 4 47 44
  let%span sduration'26 = "duration.rs" 45 4 45 45
  let%span sduration'27 = "duration.rs" 44 4 44 41
  let%span sduration'28 = "duration.rs" 42 4 42 51
  let%span sduration'29 = "duration.rs" 41 4 41 46
  let%span sduration'30 = "duration.rs" 39 4 39 49
  let%span sduration'31 = "duration.rs" 38 4 38 46
  let%span sduration'32 = "duration.rs" 36 4 36 65
  let%span sduration'33 = "duration.rs" 35 4 35 69
  let%span sduration'34 = "duration.rs" 34 4 34 69
  let%span sduration'35 = "duration.rs" 32 4 32 39
  let%span sduration'36 = "duration.rs" 31 4 31 40
  let%span sduration'37 = "duration.rs" 30 4 30 40
  let%span sduration'38 = "duration.rs" 29 4 29 34
  let%span sduration'39 = "duration.rs" 26 4 26 27
  let%span sduration'40 = "duration.rs" 10 4 10 33
  let%span stime = "../../creusot-contracts/src/std/time.rs" 77 27 77 69
  let%span stime'0 = "../../creusot-contracts/src/std/time.rs" 78 26 78 66
  let%span stime'1 = "../../creusot-contracts/src/std/time.rs" 12 14 12 77
  let%span stime'2 = "../../creusot-contracts/src/std/time.rs" 130 26 130 42
  let%span stime'3 = "../../creusot-contracts/src/std/time.rs" 131 26 131 75
  let%span stime'4 = "../../creusot-contracts/src/std/time.rs" 82 26 82 57
  let%span stime'5 = "../../creusot-contracts/src/std/time.rs" 86 26 86 58
  let%span stime'6 = "../../creusot-contracts/src/std/time.rs" 90 26 90 54
  let%span stime'7 = "../../creusot-contracts/src/std/time.rs" 94 26 94 43
  let%span stime'8 = "../../creusot-contracts/src/std/time.rs" 98 26 98 55
  let%span stime'9 = "../../creusot-contracts/src/std/time.rs" 99 26 99 56
  let%span stime'10 = "../../creusot-contracts/src/std/time.rs" 103 26 103 57
  let%span stime'11 = "../../creusot-contracts/src/std/time.rs" 107 26 107 67
  let%span stime'12 = "../../creusot-contracts/src/std/time.rs" 108 26 108 44
  let%span stime'13 = "../../creusot-contracts/src/std/time.rs" 112 26 112 71
  let%span stime'14 = "../../creusot-contracts/src/std/time.rs" 113 26 113 48
  let%span stime'15 = "../../creusot-contracts/src/std/time.rs" 117 26 117 60
  let%span stime'16 = "../../creusot-contracts/src/std/time.rs" 118 26 118 52
  let%span stime'17 = "../../creusot-contracts/src/std/time.rs" 122 26 122 59
  let%span stime'18 = "../../creusot-contracts/src/std/time.rs" 126 26 126 59
  let%span stime'19 = "../../creusot-contracts/src/std/time.rs" 135 26 135 84
  let%span stime'20 = "../../creusot-contracts/src/std/time.rs" 136 26 136 112
  let%span stime'21 = "../../creusot-contracts/src/std/time.rs" 140 26 140 61
  let%span stime'22 = "../../creusot-contracts/src/std/time.rs" 141 26 141 89
  let%span stime'23 = "../../creusot-contracts/src/std/time.rs" 145 26 145 84
  let%span stime'24 = "../../creusot-contracts/src/std/time.rs" 146 26 146 112
  let%span stime'25 = "../../creusot-contracts/src/std/time.rs" 150 26 150 56
  let%span stime'26 = "../../creusot-contracts/src/std/time.rs" 151 26 151 83
  let%span stime'27 = "../../creusot-contracts/src/std/time.rs" 194 19 194 73
  let%span stime'28 = "../../creusot-contracts/src/std/time.rs" 195 18 195 41
  let%span stime'29 = "../../creusot-contracts/src/std/time.rs" 201 19 201 36
  let%span stime'30 = "../../creusot-contracts/src/std/time.rs" 202 18 202 41
  let%span stime'31 = "../../creusot-contracts/src/std/time.rs" 42 4 42 25
  let%span stime'32 = "../../creusot-contracts/src/std/time.rs" 48 4 48 24
  let%span stime'33 = "../../creusot-contracts/src/std/time.rs" 36 4 36 21
  let%span stime'34 = "../../creusot-contracts/src/std/time.rs" 31 4 31 17
  let%span stime'35 = "../../creusot-contracts/src/std/time.rs" 24 8 24 19
  let%span soption = "../../creusot-contracts/src/std/option.rs" 82 26 82 51
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 58 26 58 51
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 13 8 16 9
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt64
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.int.UInt128
  use creusot.prelude.Any
  
  type t_Nanoseconds  =
    { t_Nanoseconds__0: UInt32.t }
  
  type t_Duration  =
    { t_Duration__secs: UInt64.t; t_Duration__nanos: t_Nanoseconds }
  
  function nanos_to_secs (nanos: int) : int =
    [%#stime'31] Int.div nanos 1000000000
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function secs_to_nanos (secs: int) : int =
    [%#stime'32] secs * 1000000000
  
  function view (self: t_Duration) : int
  
  axiom view_spec: forall self: t_Duration. [%#stime'1] view self >= 0
  /\ view self <= secs_to_nanos (UInt64.t'int (v_MAX: UInt64.t)) + 999999999
  
  let rec new (secs:UInt64.t) (nanos:UInt32.t) (return'  (x:t_Duration))= {[@expl:new requires] [%#stime] UInt64.t'int secs
    + nanos_to_secs (UInt32.t'int nanos)
    <= UInt64.t'int (v_MAX: UInt64.t)}
    any
    [ return''0 (result:t_Duration)-> {[%#stime'0] view result = secs_to_nanos (UInt64.t'int secs) + UInt32.t'int nanos}
      (! return' {result}) ]
  
  
  function view'0 (self: t_Duration) : int =
    [%#smodel] view self
  
  let rec as_nanos (self_:t_Duration) (return'  (x:UInt128.t))= any
    [ return''0 (result:UInt128.t)-> {[%#stime'2] UInt128.t'int result = view'0 self_}
      {[%#stime'3] UInt128.t'int result <= secs_to_nanos (UInt64.t'int (v_MAX: UInt64.t)) + 999999999}
      (! return' {result}) ]
  
  
  let rec from_secs (secs:UInt64.t) (return'  (x:t_Duration))= any
    [ return''0 (result:t_Duration)-> {[%#stime'4] view result = secs_to_nanos (UInt64.t'int secs)}
      (! return' {result}) ]
  
  
  let rec from_millis (millis:UInt64.t) (return'  (x:t_Duration))= any
    [ return''0 (result:t_Duration)-> {[%#stime'5] view result = UInt64.t'int millis * 1000000} (! return' {result}) ]
  
  
  let rec from_micros (micros:UInt64.t) (return'  (x:t_Duration))= any
    [ return''0 (result:t_Duration)-> {[%#stime'6] view result = UInt64.t'int micros * 1000} (! return' {result}) ]
  
  
  let rec from_nanos (nanos:UInt64.t) (return'  (x:t_Duration))= any
    [ return''0 (result:t_Duration)-> {[%#stime'7] view result = UInt64.t'int nanos} (! return' {result}) ]
  
  
  let rec is_zero (self_:t_Duration) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#stime'8] view'0 self_ = 0  -> result = true}
      {[%#stime'9] view'0 self_ <> 0  -> result = false}
      (! return' {result}) ]
  
  
  let rec as_secs (self_:t_Duration) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#stime'10] UInt64.t'int result = nanos_to_secs (view'0 self_)}
      (! return' {result}) ]
  
  
  function nanos_to_millis (nanos: int) : int =
    [%#stime'33] Int.div nanos 1000000
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self: UInt32.t) (o: UInt32.t) : t_Ordering =
    [%#sord'12] if UInt32.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym2_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom antisym1_spec: forall x: UInt32.t, y: UInt32.t. ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt32.t) (y: UInt32.t) (z: UInt32.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt32.t, y: UInt32.t, z: UInt32.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt32.t) : ()
  
  axiom refl_spec: forall x: UInt32.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'2] UInt32.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'1] UInt32.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord'0] UInt32.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt32.t) (y: UInt32.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt32.t, y: UInt32.t. [%#sord] UInt32.le x y = (cmp_log x y <> C_Greater)
  
  let rec subsec_millis (self_:t_Duration) (return'  (x:UInt32.t))= any
    [ return''0 (result:UInt32.t)-> {[%#stime'11] UInt32.t'int result = Int.mod (nanos_to_millis (view'0 self_)) 1000}
      {[%#stime'12] UInt32.lt result (1000: UInt32.t)}
      (! return' {result}) ]
  
  
  function nanos_to_micros (nanos: int) : int =
    [%#stime'34] Int.div nanos 1000
  
  let rec subsec_micros (self_:t_Duration) (return'  (x:UInt32.t))= any
    [ return''0 (result:UInt32.t)-> {[%#stime'13] UInt32.t'int result
      = Int.mod (nanos_to_micros (view'0 self_)) 1000000}
      {[%#stime'14] UInt32.lt result (1000000: UInt32.t)}
      (! return' {result}) ]
  
  
  let rec subsec_nanos (self_:t_Duration) (return'  (x:UInt32.t))= any
    [ return''0 (result:UInt32.t)-> {[%#stime'15] UInt32.t'int result = Int.mod (view'0 self_) 1000000000}
      {[%#stime'16] UInt32.lt result (1000000000: UInt32.t)}
      (! return' {result}) ]
  
  
  let rec as_millis (self_:t_Duration) (return'  (x:UInt128.t))= any
    [ return''0 (result:UInt128.t)-> {[%#stime'17] UInt128.t'int result = nanos_to_millis (view'0 self_)}
      (! return' {result}) ]
  
  
  let rec as_micros (self_:t_Duration) (return'  (x:UInt128.t))= any
    [ return''0 (result:UInt128.t)-> {[%#stime'18] UInt128.t'int result = nanos_to_micros (view'0 self_)}
      (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some t_Duration
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int
  
  function deep_model (self: t_Duration) : int =
    [%#stime'35] view self
  
  function deep_model'0 (self: t_Option) : t_Option'0 =
    [%#soption'1] match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  let rec checked_add (self_:t_Duration) (rhs:t_Duration) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#stime'19] nanos_to_secs (view self_ + view rhs) > UInt64.t'int (v_MAX: UInt64.t)
       -> result = C_None}
      {[%#stime'20] nanos_to_secs (view self_ + view rhs) <= UInt64.t'int (v_MAX: UInt64.t)
       -> deep_model'0 result = C_Some'0 (view self_ + view rhs)}
      (! return' {result}) ]
  
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  
  let rec is_some (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption'0] result = (self_ <> C_None)} (! return' {result}) ]
  
  
  let rec checked_sub (self_:t_Duration) (rhs:t_Duration) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#stime'21] view self_ - view rhs < 0  -> result = C_None}
      {[%#stime'22] view self_ - view rhs >= 0  -> deep_model'0 result = C_Some'0 (view self_ - view rhs)}
      (! return' {result}) ]
  
  
  let rec checked_mul (self_:t_Duration) (rhs:UInt32.t) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#stime'23] nanos_to_secs (view self_ * UInt32.t'int rhs)
      > UInt64.t'int (v_MAX: UInt64.t)  -> result = C_None}
      {[%#stime'24] nanos_to_secs (view self_ * UInt32.t'int rhs) <= UInt64.t'int (v_MAX: UInt64.t)
       -> deep_model'0 result = C_Some'0 (view self_ * UInt32.t'int rhs)}
      (! return' {result}) ]
  
  
  let rec checked_div (self_:t_Duration) (rhs:UInt32.t) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#stime'25] rhs = (0: UInt32.t)  -> result = C_None}
      {[%#stime'26] rhs <> (0: UInt32.t)  -> deep_model'0 result = C_Some'0 (Int.div (view self_) (UInt32.t'int rhs))}
      (! return' {result}) ]
  
  
  let rec add (self_:t_Duration) (rhs:t_Duration) (return'  (x:t_Duration))= {[@expl:add requires] [%#stime'27] view self_
    + view rhs
    <= secs_to_nanos (UInt64.t'int (v_MAX: UInt64.t)) + 999999999}
    any [ return''0 (result:t_Duration)-> {[%#stime'28] view self_ + view rhs = view result} (! return' {result}) ] 
  
  let rec sub (self_:t_Duration) (rhs:t_Duration) (return'  (x:t_Duration))= {[@expl:sub requires] [%#stime'29] view self_
    - view rhs
    >= 0}
    any [ return''0 (result:t_Duration)-> {[%#stime'30] view self_ - view rhs = view result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_duration[#"duration.rs" 7 0 7 22] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = new {[%#sduration] (0: UInt64.t)} {[%#sduration'0] (0: UInt32.t)}
          (fun (_ret:t_Duration) ->  [ &zero <- _ret ] s1)
      | s1 = bb1 ]
    
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sduration'1] view zero = 0} s1
      | s1 = as_nanos {zero} (fun (_ret:UInt128.t) ->  [ &_6 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 =  [ &_5 <- _6 = ([%#sduration'2] (0: UInt128.t)) ] s1
      | s1 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ]  ]
    
    | bb3 = s0
      [ s0 = new {[%#sduration'3] (18446744073709551615: UInt64.t)} {[%#sduration'4] (999999999: UInt32.t)}
          (fun (_ret:t_Duration) ->  [ &max <- _ret ] s1)
      | s1 = bb5 ]
    
    | bb5 = s0
      [ s0 = from_secs {[%#sduration'5] (1: UInt64.t)} (fun (_ret:t_Duration) ->  [ &d_secs <- _ret ] s1) | s1 = bb6 ]
    
    | bb6 = s0
      [ s0 = {[@expl:assertion] [%#sduration'6] view d_secs = 1000000000} s1
      | s1 = from_millis {[%#sduration'7] (1: UInt64.t)} (fun (_ret:t_Duration) ->  [ &d_millis <- _ret ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sduration'8] view d_millis = 1000000} s1
      | s1 = from_micros {[%#sduration'9] (1: UInt64.t)} (fun (_ret:t_Duration) ->  [ &d_micros <- _ret ] s2)
      | s2 = bb8 ]
    
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sduration'10] view d_micros = 1000} s1
      | s1 = from_nanos {[%#sduration'11] (1: UInt64.t)} (fun (_ret:t_Duration) ->  [ &d_nanos <- _ret ] s2)
      | s2 = bb9 ]
    
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#sduration'12] view d_nanos = 1} s1
      | s1 = is_zero {zero} (fun (_ret:bool) ->  [ &_23 <- _ret ] s2)
      | s2 = bb10 ]
    
    | bb10 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb11) ] 
    | bb11 = s0 [ s0 = is_zero {d_secs} (fun (_ret:bool) ->  [ &_27 <- _ret ] s1) | s1 = bb13 ] 
    | bb13 = any [ br0 -> {_27 = false} (! bb15) | br1 -> {_27} (! bb14) ] 
    | bb14 = {[%#sduration'13] false} any
    | bb15 = s0 [ s0 = as_secs {d_secs} (fun (_ret:UInt64.t) ->  [ &_32 <- _ret ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 =  [ &_31 <- ([%#sduration'14] (1: UInt64.t)) = _32 ] s1
      | s1 = any [ br0 -> {_31 = false} (! bb18) | br1 -> {_31} (! bb17) ]  ]
    
    | bb17 = s0 [ s0 = subsec_millis {d_secs} (fun (_ret:UInt32.t) ->  [ &_37 <- _ret ] s1) | s1 = bb19 ] 
    | bb19 = s0
      [ s0 =  [ &_36 <- ([%#sduration'15] (0: UInt32.t)) = _37 ] s1
      | s1 = any [ br0 -> {_36 = false} (! bb21) | br1 -> {_36} (! bb20) ]  ]
    
    | bb20 = s0 [ s0 = subsec_micros {d_secs} (fun (_ret:UInt32.t) ->  [ &_42 <- _ret ] s1) | s1 = bb22 ] 
    | bb22 = s0
      [ s0 =  [ &_41 <- ([%#sduration'16] (0: UInt32.t)) = _42 ] s1
      | s1 = any [ br0 -> {_41 = false} (! bb24) | br1 -> {_41} (! bb23) ]  ]
    
    | bb23 = s0 [ s0 = subsec_nanos {d_secs} (fun (_ret:UInt32.t) ->  [ &_47 <- _ret ] s1) | s1 = bb25 ] 
    | bb25 = s0
      [ s0 =  [ &_46 <- ([%#sduration'17] (0: UInt32.t)) = _47 ] s1
      | s1 = any [ br0 -> {_46 = false} (! bb27) | br1 -> {_46} (! bb26) ]  ]
    
    | bb26 = s0 [ s0 = subsec_millis {d_millis} (fun (_ret:UInt32.t) ->  [ &_53 <- _ret ] s1) | s1 = bb28 ] 
    | bb28 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _53} (fun (_ret_from:UInt128.t) ->  [ &_52 <- _ret_from ] s1)
      | s1 = as_millis {d_millis} (fun (_ret:UInt128.t) ->  [ &_55 <- _ret ] s2)
      | s2 = bb29 ]
    
    | bb29 = s0
      [ s0 =  [ &_51 <- _52 = _55 ] s1 | s1 = any [ br0 -> {_51 = false} (! bb31) | br1 -> {_51} (! bb30) ]  ]
    
    | bb30 = s0 [ s0 = subsec_micros {d_micros} (fun (_ret:UInt32.t) ->  [ &_61 <- _ret ] s1) | s1 = bb32 ] 
    | bb32 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _61} (fun (_ret_from:UInt128.t) ->  [ &_60 <- _ret_from ] s1)
      | s1 = as_micros {d_micros} (fun (_ret:UInt128.t) ->  [ &_63 <- _ret ] s2)
      | s2 = bb33 ]
    
    | bb33 = s0
      [ s0 =  [ &_59 <- _60 = _63 ] s1 | s1 = any [ br0 -> {_59 = false} (! bb35) | br1 -> {_59} (! bb34) ]  ]
    
    | bb34 = s0 [ s0 = subsec_nanos {d_nanos} (fun (_ret:UInt32.t) ->  [ &_69 <- _ret ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 = UInt128.of_int {UInt32.t'int _69} (fun (_ret_from:UInt128.t) ->  [ &_68 <- _ret_from ] s1)
      | s1 = as_nanos {d_nanos} (fun (_ret:UInt128.t) ->  [ &_71 <- _ret ] s2)
      | s2 = bb37 ]
    
    | bb37 = s0
      [ s0 =  [ &_67 <- _68 = _71 ] s1 | s1 = any [ br0 -> {_67 = false} (! bb39) | br1 -> {_67} (! bb38) ]  ]
    
    | bb38 = s0 [ s0 = checked_add {d_secs} {max} (fun (_ret:t_Option) ->  [ &_77 <- _ret ] s1) | s1 = bb40 ] 
    | bb40 = s0 [ s0 = is_none {_77} (fun (_ret:bool) ->  [ &_75 <- _ret ] s1) | s1 = bb41 ] 
    | bb41 = any [ br0 -> {_75 = false} (! bb43) | br1 -> {_75} (! bb42) ] 
    | bb42 = s0 [ s0 = checked_add {d_secs} {d_secs} (fun (_ret:t_Option) ->  [ &_84 <- _ret ] s1) | s1 = bb44 ] 
    | bb44 = s0 [ s0 = is_some {_84} (fun (_ret:bool) ->  [ &_82 <- _ret ] s1) | s1 = bb45 ] 
    | bb45 = any [ br0 -> {_82 = false} (! bb47) | br1 -> {_82} (! bb46) ] 
    | bb46 = s0 [ s0 = checked_sub {d_secs} {max} (fun (_ret:t_Option) ->  [ &_91 <- _ret ] s1) | s1 = bb48 ] 
    | bb48 = s0 [ s0 = is_none {_91} (fun (_ret:bool) ->  [ &_89 <- _ret ] s1) | s1 = bb49 ] 
    | bb49 = any [ br0 -> {_89 = false} (! bb51) | br1 -> {_89} (! bb50) ] 
    | bb50 = s0 [ s0 = checked_sub {d_secs} {d_millis} (fun (_ret:t_Option) ->  [ &_98 <- _ret ] s1) | s1 = bb52 ] 
    | bb52 = s0 [ s0 = is_some {_98} (fun (_ret:bool) ->  [ &_96 <- _ret ] s1) | s1 = bb53 ] 
    | bb53 = any [ br0 -> {_96 = false} (! bb55) | br1 -> {_96} (! bb54) ] 
    | bb54 = s0
      [ s0 = checked_mul {max} {[%#sduration'18] (2: UInt32.t)} (fun (_ret:t_Option) ->  [ &_105 <- _ret ] s1)
      | s1 = bb56 ]
    
    | bb56 = s0 [ s0 = is_none {_105} (fun (_ret:bool) ->  [ &_103 <- _ret ] s1) | s1 = bb57 ] 
    | bb57 = any [ br0 -> {_103 = false} (! bb59) | br1 -> {_103} (! bb58) ] 
    | bb58 = s0
      [ s0 = checked_mul {d_secs} {[%#sduration'19] (10: UInt32.t)} (fun (_ret:t_Option) ->  [ &_111 <- _ret ] s1)
      | s1 = bb60 ]
    
    | bb60 = s0 [ s0 = is_some {_111} (fun (_ret:bool) ->  [ &_109 <- _ret ] s1) | s1 = bb61 ] 
    | bb61 = any [ br0 -> {_109 = false} (! bb63) | br1 -> {_109} (! bb62) ] 
    | bb62 = s0
      [ s0 = checked_div {d_secs} {[%#sduration'20] (0: UInt32.t)} (fun (_ret:t_Option) ->  [ &_117 <- _ret ] s1)
      | s1 = bb64 ]
    
    | bb64 = s0 [ s0 = is_none {_117} (fun (_ret:bool) ->  [ &_115 <- _ret ] s1) | s1 = bb65 ] 
    | bb65 = any [ br0 -> {_115 = false} (! bb67) | br1 -> {_115} (! bb66) ] 
    | bb66 = s0
      [ s0 = checked_div {d_secs} {[%#sduration'21] (10: UInt32.t)} (fun (_ret:t_Option) ->  [ &_123 <- _ret ] s1)
      | s1 = bb68 ]
    
    | bb68 = s0 [ s0 = is_some {_123} (fun (_ret:bool) ->  [ &_121 <- _ret ] s1) | s1 = bb69 ] 
    | bb69 = any [ br0 -> {_121 = false} (! bb71) | br1 -> {_121} (! bb70) ] 
    | bb70 = s0 [ s0 = add {d_millis} {d_micros} (fun (_ret:t_Duration) ->  [ &sum <- _ret ] s1) | s1 = bb72 ] 
    | bb72 = s0 [ s0 = sub {d_millis} {d_micros} (fun (_ret:t_Duration) ->  [ &difference <- _ret ] s1) | s1 = bb73 ] 
    | bb73 = s0
      [ s0 = {[@expl:assertion] [%#sduration'22] view sum = 1001000} s1
      | s1 = {[@expl:assertion] [%#sduration'23] view difference = 999000} s2
      | s2 = return''0 {_0} ]
    
    | bb71 = {[%#sduration'24] false} any
    | bb67 = {[%#sduration'25] false} any
    | bb63 = {[%#sduration'26] false} any
    | bb59 = {[%#sduration'27] false} any
    | bb55 = {[%#sduration'28] false} any
    | bb51 = {[%#sduration'29] false} any
    | bb47 = {[%#sduration'30] false} any
    | bb43 = {[%#sduration'31] false} any
    | bb39 = {[%#sduration'32] false} any
    | bb35 = {[%#sduration'33] false} any
    | bb31 = {[%#sduration'34] false} any
    | bb27 = {[%#sduration'35] false} any
    | bb24 = {[%#sduration'36] false} any
    | bb21 = {[%#sduration'37] false} any
    | bb18 = {[%#sduration'38] false} any
    | bb12 = {[%#sduration'39] false} any
    | bb4 = {[%#sduration'40] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & zero: t_Duration = Any.any_l ()
    | & _5: bool = Any.any_l ()
    | & _6: UInt128.t = Any.any_l ()
    | & max: t_Duration = Any.any_l ()
    | & d_secs: t_Duration = Any.any_l ()
    | & d_millis: t_Duration = Any.any_l ()
    | & d_micros: t_Duration = Any.any_l ()
    | & d_nanos: t_Duration = Any.any_l ()
    | & _23: bool = Any.any_l ()
    | & _27: bool = Any.any_l ()
    | & _31: bool = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & _36: bool = Any.any_l ()
    | & _37: UInt32.t = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: UInt32.t = Any.any_l ()
    | & _46: bool = Any.any_l ()
    | & _47: UInt32.t = Any.any_l ()
    | & _51: bool = Any.any_l ()
    | & _52: UInt128.t = Any.any_l ()
    | & _53: UInt32.t = Any.any_l ()
    | & _55: UInt128.t = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _60: UInt128.t = Any.any_l ()
    | & _61: UInt32.t = Any.any_l ()
    | & _63: UInt128.t = Any.any_l ()
    | & _67: bool = Any.any_l ()
    | & _68: UInt128.t = Any.any_l ()
    | & _69: UInt32.t = Any.any_l ()
    | & _71: UInt128.t = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _77: t_Option = Any.any_l ()
    | & _82: bool = Any.any_l ()
    | & _84: t_Option = Any.any_l ()
    | & _89: bool = Any.any_l ()
    | & _91: t_Option = Any.any_l ()
    | & _96: bool = Any.any_l ()
    | & _98: t_Option = Any.any_l ()
    | & _103: bool = Any.any_l ()
    | & _105: t_Option = Any.any_l ()
    | & _109: bool = Any.any_l ()
    | & _111: t_Option = Any.any_l ()
    | & _115: bool = Any.any_l ()
    | & _117: t_Option = Any.any_l ()
    | & _121: bool = Any.any_l ()
    | & _123: t_Option = Any.any_l ()
    | & sum: t_Duration = Any.any_l ()
    | & difference: t_Duration = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
