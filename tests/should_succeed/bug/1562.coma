module M_1562__qyi17754419174301240535__foo [#"1562.rs" 17 4 17 61] (* List<T> *)
  let%span src = "../../../creusot-contracts/src/std/rc.rs" 42 18 42 37
  let%span src'0 = "../../../creusot-contracts/src/std/rc.rs" 35 26 35 46
  let%span s1562 = "1562.rs" 16 15 16 20
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 80 26 80 51
  let%span soption'0 = "../../../creusot-contracts/src/std/option.rs" 431 26 431 58
  let%span soption'1 = "../../../creusot-contracts/src/std/option.rs" 151 27 151 39
  let%span soption'2 = "../../../creusot-contracts/src/std/option.rs" 152 26 152 46
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 129 14 129 45
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 130 14 130 45
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 107 8 107 23
  let%span spcell = "../../../creusot-contracts/src/pcell.rs" 187 15 187 37
  let%span spcell'0 = "../../../creusot-contracts/src/pcell.rs" 188 14 188 53
  let%span spcell'1 = "../../../creusot-contracts/src/pcell.rs" 189 14 189 47
  let%span spcell'2 = "../../../creusot-contracts/src/pcell.rs" 190 14 190 47
  let%span spcell'3 = "../../../creusot-contracts/src/pcell.rs" 36 8 36 19
  let%span spcell'4 = "../../../creusot-contracts/src/pcell.rs" 44 8 44 28
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span sresolve'0 = "../../../creusot-contracts/src/resolve.rs" 62 8 62 23
  
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Rc  =
    { t_Rc__ptr: t_NonNull; t_Rc__phantom: (); t_Rc__alloc: () }
  
  type t_Node  =
    { t_Node__next: t_Rc }
  
  type t_Option  =
    | C_None
    | C_Some t_Node
  
  type t_List  =
    { t_List__head: t_Option }
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  
  let rec take (self_:MutBorrow.t t_Option) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#soption'0] result = self_.current /\ self_.final = C_None}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_List) =
    resolve _0
  
  let rec unwrap (self_:t_Option) (return'  (x:t_Node))= {[@expl:unwrap requires] [%#soption'1] self_ <> C_None}
    any [ return''0 (result:t_Node)-> {[%#soption'2] C_Some result = self_} (! return' {result}) ] 
  
  type t_UnsafeCell  =
    { t_UnsafeCell__value: t_List }
  
  type t_PCell  =
    { t_PCell__0: t_UnsafeCell }
  
  function view (self: t_Rc) : t_PCell
  
  let rec clone' (self_:t_Rc) (return'  (x:t_Rc))= any
    [ return''0 (result:t_Rc)-> {[%#src] view result = view self_} (! return' {result}) ]
  
  
  let rec as_ref (self_:t_Rc) (return'  (x:t_PCell))= any
    [ return''0 (result:t_PCell)-> {[%#src'0] result = view self_} (! return' {result}) ]
  
  
  type t_PCellOwn  =
    { t_PCellOwn__0: () }
  
  let rec borrow_mut (self:MutBorrow.t ( t_PCellOwn)) (return'  (x: (MutBorrow.t t_PCellOwn)))= any
    [ return''0 (result: (MutBorrow.t t_PCellOwn))-> {[%#sghost] result.current = self.current}
      {[%#sghost'0] result.final = self.final}
      (! return' {result}) ]
  
  
  type t_Id
  
  function id (self: t_PCell) : t_Id
  
  function id'0 (self: t_PCellOwn) : t_Id
  
  function val' (self: t_PCellOwn) : t_List
  
  function view'0 (self: t_PCellOwn) : t_List =
    [%#spcell'3] val' self
  
  let rec borrow_mut'0 (self:t_PCell) (perm: (MutBorrow.t t_PCellOwn)) (return'  (x:MutBorrow.t t_List))= {[@expl:borrow_mut requires] [%#spcell] id self
    = id'0 perm.current}
    any
    [ return''0 (result:MutBorrow.t t_List)-> {[%#spcell'0] id self = id'0 perm.final}
      {[%#spcell'1] result.current = view'0 perm.current}
      {[%#spcell'2] result.final = view'0 perm.final}
      (! return' {result}) ]
  
  
  predicate resolve'1 (_0: t_List) =
    true
  
  predicate resolve'2 (self: t_List) =
    [%#sresolve'0] resolve'1 self
  
  predicate resolve'3 (_0: t_List) =
    resolve'2 _0
  
  predicate resolve'4 (self: t_PCellOwn) =
    [%#spcell'4] resolve'3 (val' self)
  
  predicate resolve'5 (_0: t_PCellOwn) =
    resolve'4 _0
  
  predicate resolve'6 (self:  t_PCellOwn) =
    [%#sghost'1] resolve'5 self
  
  predicate resolve'7 (_0:  t_PCellOwn) =
    resolve'6 _0
  
  meta "compute_max_steps" 1000000
  
  let rec foo[#"1562.rs" 17 4 17 61] (self:MutBorrow.t t_List) (perm: t_PCellOwn) (return'  (x:()))= {[@expl:foo requires] [%#s1562] false}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &p <- self'0 ] s1 | s1 = bb1 ] 
    | bb1 = bb1'0
      [ bb1'0 = (! bb2)
        [ bb2 = s0 [ s0 = is_none {(p.current).t_List__head} (fun (_ret:bool) ->  [ &_7 <- _ret ] s1) | s1 = bb3 ] 
        | bb3 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb4) ] 
        | bb5 = s0
          [ s0 = MutBorrow.borrow_final
              <t_Option>
              {(p.current).t_List__head}
              {MutBorrow.inherit_id (MutBorrow.get_id p) 1}
              (fun (_ret:MutBorrow.t t_Option) ->
                 [ &_11 <- _ret ] 
                 [ &p <- { p with current = { t_List__head = _ret.final } } ] 
                s1)
          | s1 = take {_11} (fun (_ret:t_Option) ->  [ &_10 <- _ret ] s2)
          | s2 = bb6 ]
        
        | bb6 = s0
          [ s0 = -{resolve'0 p}- s1 | s1 = unwrap {_10} (fun (_ret:t_Node) ->  [ &curr <- _ret ] s2) | s2 = bb7 ]
        
        | bb7 = s0 [ s0 = clone' {curr.t_Node__next} (fun (_ret:t_Rc) ->  [ &_12 <- _ret ] s1) | s1 = bb8 ] 
        | bb8 = bb9
        | bb9 = s0 [ s0 =  [ &next <- _12 ] s1 | s1 = bb11 ] 
        | bb11 = s0 [ s0 = as_ref {next} (fun (_ret:t_PCell) ->  [ &_17 <- _ret ] s1) | s1 = bb12 ] 
        | bb12 = s0
          [ s0 = MutBorrow.borrow_mut < t_PCellOwn> {perm'0}
              (fun (_ret:MutBorrow.t ( t_PCellOwn)) ->  [ &_20 <- _ret ]  [ &perm'0 <- _ret.final ] s1)
          | s1 = borrow_mut {_20} (fun (_ret: (MutBorrow.t t_PCellOwn)) ->  [ &_19 <- _ret ] s2)
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 = borrow_mut'0 {_17} {_19} (fun (_ret:MutBorrow.t t_List) ->  [ &_15 <- _ret ] s1) | s1 = bb14 ]
        
        | bb14 = s0
          [ s0 = MutBorrow.borrow_final <t_List> {_15.current} {MutBorrow.get_id _15}
              (fun (_ret:MutBorrow.t t_List) ->  [ &_14 <- _ret ]  [ &_15 <- { _15 with current = _ret.final } ] s1)
          | s1 =  [ &p <- _14 ] s2
          | s2 = -{resolve'0 _15}- s3
          | s3 = bb15 ]
        
        | bb15 = bb21
        | bb21 = bb1'0 ]
       ]
    
    | bb4 = s0 [ s0 = -{resolve'0 p}- s1 | s1 = -{resolve'7 perm'0}- s2 | s2 = bb16 ] 
    | bb16 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & self'0: MutBorrow.t t_List = self
    | & perm'0:  t_PCellOwn = perm
    | & p: MutBorrow.t t_List = Any.any_l ()
    | & next: t_Rc = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & curr: t_Node = Any.any_l ()
    | & _10: t_Option = Any.any_l ()
    | & _11: MutBorrow.t t_Option = Any.any_l ()
    | & _12: t_Rc = Any.any_l ()
    | & _14: MutBorrow.t t_List = Any.any_l ()
    | & _15: MutBorrow.t t_List = Any.any_l ()
    | & _17: t_PCell = Any.any_l ()
    | & _19:  (MutBorrow.t t_PCellOwn) = Any.any_l ()
    | & _20: MutBorrow.t ( t_PCellOwn) = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
