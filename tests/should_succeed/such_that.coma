module M_such_that__foo [#"such_that.rs" 4 0 4 12]
  let%span ssuch_that = "such_that.rs" 5 12 5 54
  let%span ssuch_that'0 = "such_that.rs" 6 18 6 26
  let%span ssuch_that'1 = "such_that.rs" 10 18 10 44
  let%span ssuch_that'2 = "such_that.rs" 11 20 11 59
  let%span ssuch_that'3 = "such_that.rs" 12 4 12 37
  let%span ssuch_that'4 = "such_that.rs" 13 12 13 44
  let%span ssuch_that'5 = "such_that.rs" 14 18 14 34
  let%span ssuch_that'6 = "such_that.rs" 17 10 17 26
  let%span sutil = "../../creusot-contracts/src/util.rs" 11 11 11 28
  let%span sutil'0 = "../../creusot-contracts/src/util.rs" 12 0 12 21
  let%span smapping = "../../creusot-contracts/src/logic/mapping.rs" 60 8 60 19
  
  use map.Map
  use mach.int.Int
  use creusot.int.Int32
  use creusot.prelude.Any
  
  predicate index_logic (self: Map.map int bool) (a: int) =
    [%#smapping] Map.get self a
  
  function such_that (p: Map.map int bool) : int
  
  axiom such_that_spec: forall p: Map.map int bool. ([%#sutil] exists x: int. index_logic p x)
   -> ([%#sutil'0] index_logic p (such_that p))
  
  let rec even (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#ssuch_that'6] Int.mod (Int32.to_int result) 2 = 0} (! return' {result}) ]
  
  
  function index_logic'0 (self: Map.map int int) (a: int) : int =
    [%#smapping] Map.get self a
  
  meta "compute_max_steps" 1000000
  
  let rec foo[#"such_that.rs" 4 0 4 12] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssuch_that] such_that (fun (x'1: int) -> x'1 + 1 = 42) ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssuch_that'0] x = 41} s1
      | s1 = even (fun (_ret:Int32.t) ->  [ &y <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &mapping <- [%#ssuch_that'1] fun (x'1: int) -> x'1 + Int32.to_int y ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &predicate' <- [%#ssuch_that'2] fun (x'1: int) -> index_logic'0 mapping x'1 + 1 = 0 ] s1 | s1 = bb4 ]
    
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#ssuch_that'3] index_logic predicate' (- Int32.to_int y - 1)} s1
      | s1 =  [ &x'0 <- [%#ssuch_that'4] such_that predicate' ] s2
      | s2 = bb5 ]
    
    | bb5 = s0 [ s0 = {[@expl:assertion] [%#ssuch_that'5] x'0 + Int32.to_int y + 1 = 0} s1 | s1 = return''0 {_0} ]  ]
    )
    [ & _0: () = Any.any_l ()
    | & x: int = Any.any_l ()
    | & y: Int32.t = Any.any_l ()
    | & mapping: Map.map int int = Any.any_l ()
    | & predicate': Map.map int bool = Any.any_l ()
    | & x'0: int = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_such_that__even [#"such_that.rs" 18 0 18 16]
  let%span ssuch_that = "such_that.rs" 19 4 19 5
  let%span ssuch_that'0 = "such_that.rs" 17 10 17 26
  
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec even[#"such_that.rs" 18 0 18 16] (return'  (x:Int32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#ssuch_that] (2: Int32.t) ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0: Int32.t = Any.any_l () ] 
    [ return''0 (result:Int32.t)-> {[@expl:even ensures] [%#ssuch_that'0] Int.mod (Int32.to_int result) 2 = 0}
      (! return' {result}) ]

end
