module M_03__prog [#"03.rs" 11 0 11 16]
  let%span s03 = "03.rs" 11 11 11 12
  let%span s03'0 = "03.rs" 10 10 10 16
  let%span s03'1 = "03.rs" 7 4 7 8
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0: t_T)
  
  predicate resolve (_0: t_T)
  
  predicate omg [#"03.rs" 6 0 6 24] (_x: t_T) =
    [%#s03'1] true
  
  meta "compute_max_steps" 1000000
  
  let rec prog[#"03.rs" 11 0 11 16] (x:t_T) (return'  (x'0:()))= {[@expl:prog 'x' type invariant] [%#s03] inv x}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv x'0} s1 | s1 = -{resolve x'0}- s2 | s2 = bb1 ] 
    | bb1 = bb2
    | bb2 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & x'0: t_T = x ] 
    [ return''0 (result:())-> {[@expl:prog ensures] [%#s03'0] omg x} (! return' {result}) ]

end
module M_03__prog2 [#"03.rs" 14 0 14 14]
  let%span s03 = "03.rs" 15 9 15 10
  let%span s03'0 = "03.rs" 13 10 13 16
  let%span s03'1 = "03.rs" 10 10 10 16
  let%span s03'2 = "03.rs" 7 4 7 8
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  predicate omg [#"03.rs" 6 0 6 24] (_x: Int32.t) =
    [%#s03'2] true
  
  let rec prog (x:Int32.t) (return'  (x'0:()))= any [ return''0 (result:())-> {[%#s03'1] omg x} (! return' {result}) ] 
  
  predicate omg'0 [#"03.rs" 6 0 6 24] (_x: int) =
    [%#s03'2] true
  
  meta "compute_max_steps" 1000000
  
  let rec prog2[#"03.rs" 14 0 14 14] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = prog {[%#s03] (0: Int32.t)} (fun (_ret:()) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & _2: () = Any.any_l () ] 
    [ return''0 (result:())-> {[@expl:prog2 ensures] [%#s03'0] omg'0 0} (! return' {result}) ]

end
module M_03__prog3 [#"03.rs" 19 0 19 14]
  let%span s03 = "03.rs" 18 10 18 21
  let%span s03'0 = "03.rs" 7 4 7 8
  
  use creusot.prelude.Any
  
  type tuple  =
    { _p0: int; _p1: int }
  
  predicate omg [#"03.rs" 6 0 6 24] (_x: tuple) =
    [%#s03'0] true
  
  meta "compute_max_steps" 1000000
  
  let rec prog3[#"03.rs" 19 0 19 14] (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] ) [ & _0: () = Any.any_l () ] 
    [ return''0 (result:())-> {[@expl:prog3 ensures] [%#s03] omg { _p0 = 0; _p1 = 0 }} (! return' {result}) ]

end
