module M_vecdeque__test_deque [#"vecdeque.rs" 5 0 5 19]
  let%span svecdeque = "vecdeque.rs" 6 55 6 56
  let%span svecdeque'0 = "vecdeque.rs" 9 27 9 28
  let%span svecdeque'1 = "vecdeque.rs" 14 27 14 28
  let%span svecdeque'2 = "vecdeque.rs" 19 21 19 22
  let%span svecdeque'3 = "vecdeque.rs" 20 21 20 22
  let%span svecdeque'4 = "vecdeque.rs" 21 20 21 21
  let%span svecdeque'5 = "vecdeque.rs" 26 4 26 29
  let%span svecdeque'6 = "vecdeque.rs" 24 4 24 40
  let%span svecdeque'7 = "vecdeque.rs" 23 4 23 41
  let%span svecdeque'8 = "vecdeque.rs" 17 4 17 37
  let%span svecdeque'9 = "vecdeque.rs" 16 4 16 38
  let%span svecdeque'10 = "vecdeque.rs" 14 4 14 29
  let%span svecdeque'11 = "vecdeque.rs" 13 4 13 29
  let%span svecdeque'12 = "vecdeque.rs" 9 4 9 29
  let%span svecdeque'13 = "vecdeque.rs" 8 4 8 29
  let%span svecdeque'14 = "vecdeque.rs" 23 38 23 39
  let%span svecdeque'15 = "vecdeque.rs" 24 37 24 38
  let%span sdeque = "../../creusot-contracts/src/std/deque.rs" 85 26 85 44
  let%span sdeque'0 = "../../creusot-contracts/src/std/deque.rs" 95 26 95 54
  let%span sdeque'1 = "../../creusot-contracts/src/std/deque.rs" 91 26 91 48
  let%span sdeque'2 = "../../creusot-contracts/src/std/deque.rs" 81 26 81 44
  let%span sdeque'3 = "../../creusot-contracts/src/std/deque.rs" 103 26 108 17
  let%span sdeque'4 = "../../creusot-contracts/src/std/deque.rs" 112 26 117 17
  let%span sdeque'5 = "../../creusot-contracts/src/std/deque.rs" 121 26 121 59
  let%span sdeque'6 = "../../creusot-contracts/src/std/deque.rs" 122 26 122 61
  let%span sdeque'7 = "../../creusot-contracts/src/std/deque.rs" 126 26 126 60
  let%span sdeque'8 = "../../creusot-contracts/src/std/deque.rs" 99 26 99 45
  let%span sdeque'9 = "../../creusot-contracts/src/std/deque.rs" 18 14 18 41
  let%span soption = "../../creusot-contracts/src/std/option.rs" 25 26 25 75
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 13 8 16 9
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span smodel'1 = "../../creusot-contracts/src/model.rs" 35 8 35 28
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 247 8 247 27
  let%span snum = "../../creusot-contracts/src/std/num.rs" 24 28 24 33
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_VecDeque  =
    { t_VecDeque__head: UInt64.t; t_VecDeque__len: UInt64.t; t_VecDeque__buf: t_RawVec }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_VecDeque) : Seq.seq UInt32.t
  
  axiom view_spec: forall self: t_VecDeque. [%#sdeque'9] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  let rec with_capacity (capacity:UInt64.t) (return'  (x:t_VecDeque))= any
    [ return''0 (result:t_VecDeque)-> {[%#sdeque] Seq.length (view result) = 0} (! return' {result}) ]
  
  
  function view'0 (self: t_VecDeque) : Seq.seq UInt32.t =
    [%#smodel] view self
  
  let rec is_empty (self_:t_VecDeque) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sdeque'0] result = (Seq.length (view'0 self_) = 0)} (! return' {result}) ]
  
  
  let rec len (self_:t_VecDeque) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sdeque'1] UInt64.t'int result = Seq.length (view'0 self_)}
      (! return' {result}) ]
  
  
  let rec new (return'  (x:t_VecDeque))= any
    [ return''0 (result:t_VecDeque)-> {[%#sdeque'2] Seq.length (view result) = 0} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some UInt32.t
  
  function view'1 (self: MutBorrow.t t_VecDeque) : Seq.seq UInt32.t =
    [%#smodel'0] view self.current
  
  function push_front [@inline:trivial] (self: Seq.seq UInt32.t) (x: UInt32.t) : Seq.seq UInt32.t =
    [%#sseq] Seq.cons x self
  
  let rec pop_front (self_:MutBorrow.t t_VecDeque) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sdeque'3] match result with
        | C_Some t -> view self_.final = Seq.([..]) (view'1 self_) 1 (Seq.length (view'1 self_))
        /\ view'1 self_ = push_front (view self_.final) t
        | C_None -> self_.current = self_.final /\ Seq.length (view'1 self_) = 0
        end}
      (! return' {result}) ]
  
  
  let rec promoted3__test_deque (return'  (x:t_Option))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return''0 {_0} ]  ]
     [ & _0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ] 
    [ return''0 (result:t_Option)-> return' {result} ]
  
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int
  
  function deep_model (self: UInt32.t) : int =
    [%#snum] UInt32.t'int self
  
  function deep_model'0 (self: t_Option) : t_Option'0 =
    [%#soption'0] match self with
      | C_Some t -> C_Some'0 (deep_model t)
      | C_None -> C_None'0
      end
  
  function deep_model'1 (self: t_Option) : t_Option'0 =
    [%#smodel'1] deep_model'0 self
  
  let rec eq (self_:t_Option) (rhs:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (deep_model'1 self_ = deep_model'1 rhs)} (! return' {result}) ]
  
  
  let rec pop_back (self_:MutBorrow.t t_VecDeque) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sdeque'4] match result with
        | C_Some t -> view self_.final = Seq.([..]) (view'1 self_) 0 (Seq.length (view'1 self_) - 1)
        /\ view'1 self_ = Seq.snoc (view self_.final) t
        | C_None -> self_.current = self_.final /\ Seq.length (view'1 self_) = 0
        end}
      (! return' {result}) ]
  
  
  let rec promoted2__test_deque (return'  (x:t_Option))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return''0 {_0} ]  ]
     [ & _0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ] 
    [ return''0 (result:t_Option)-> return' {result} ]
  
  
  let rec push_front'0 (self_:MutBorrow.t t_VecDeque) (value:UInt32.t) (return'  (x:()))= any
    [ return''0 (result:())-> {[%#sdeque'5] Seq.length (view self_.final) = Seq.length (view'1 self_) + 1}
      {[%#sdeque'6] view self_.final = push_front (view'1 self_) value}
      (! return' {result}) ]
  
  
  let rec push_back (self_:MutBorrow.t t_VecDeque) (value:UInt32.t) (return'  (x:()))= any
    [ return''0 (result:())-> {[%#sdeque'7] view self_.final = Seq.snoc (view'1 self_) value} (! return' {result}) ]
  
  
  let rec promoted1__test_deque (return'  (x:t_Option))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some ([%#svecdeque'14] (2: UInt32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return''0 {_0} ]
     ]
     [ & _0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ] 
    [ return''0 (result:t_Option)-> return' {result} ]
  
  
  let rec promoted0__test_deque (return'  (x:t_Option))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some ([%#svecdeque'15] (3: UInt32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return''0 {_0} ]
     ]
     [ & _0: t_Option = Any.any_l () | & _1: t_Option = Any.any_l () ] 
    [ return''0 (result:t_Option)-> return' {result} ]
  
  
  let rec clear (self_:MutBorrow.t t_VecDeque) (return'  (x:()))= any
    [ return''0 (result:())-> {[%#sdeque'8] Seq.length (view self_.final) = 0} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test_deque[#"vecdeque.rs" 5 0 5 19] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = with_capacity {[%#svecdeque] (5: UInt64.t)} (fun (_ret:t_VecDeque) ->  [ &deque <- _ret ] s1) | s1 = bb1 ]
    
    | bb1 = s0 [ s0 = is_empty {deque} (fun (_ret:bool) ->  [ &_3 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb3) ] 
    | bb3 = s0 [ s0 = len {deque} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 =  [ &_7 <- _8 = ([%#svecdeque'0] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb6) ]  ]
    
    | bb6 = s0 [ s0 = new (fun (_ret:t_VecDeque) ->  [ &deque'0 <- _ret ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 = is_empty {deque'0} (fun (_ret:bool) ->  [ &_13 <- _ret ] s1) | s1 = bb9 ] 
    | bb9 = any [ br0 -> {_13 = false} (! bb11) | br1 -> {_13} (! bb10) ] 
    | bb10 = s0 [ s0 = len {deque'0} (fun (_ret:UInt64.t) ->  [ &_18 <- _ret ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 =  [ &_17 <- _18 = ([%#svecdeque'1] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_17 = false} (! bb14) | br1 -> {_17} (! bb13) ]  ]
    
    | bb13 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_25 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = pop_front {_25} (fun (_ret:t_Option) ->  [ &_24 <- _ret ] s2)
      | s2 = bb15 ]
    
    | bb15 = s0
      [ s0 = promoted3__test_deque (fun (pr3:t_Option) ->  [ &_68 <- pr3 ] s1)
      | s1 = eq {_24} {_68} (fun (_ret:bool) ->  [ &_22 <- _ret ] s2)
      | s2 = bb16 ]
    
    | bb16 = any [ br0 -> {_22 = false} (! bb18) | br1 -> {_22} (! bb17) ] 
    | bb17 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_33 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = pop_back {_33} (fun (_ret:t_Option) ->  [ &_32 <- _ret ] s2)
      | s2 = bb19 ]
    
    | bb19 = s0
      [ s0 = promoted2__test_deque (fun (pr2:t_Option) ->  [ &_67 <- pr2 ] s1)
      | s1 = eq {_32} {_67} (fun (_ret:bool) ->  [ &_30 <- _ret ] s2)
      | s2 = bb20 ]
    
    | bb20 = any [ br0 -> {_30 = false} (! bb22) | br1 -> {_30} (! bb21) ] 
    | bb21 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_38 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = push_front'0 {_38} {[%#svecdeque'2] (1: UInt32.t)} (fun (_ret:()) ->  [ &_37 <- _ret ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_40 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = push_front'0 {_40} {[%#svecdeque'3] (2: UInt32.t)} (fun (_ret:()) ->  [ &_39 <- _ret ] s2)
      | s2 = bb24 ]
    
    | bb24 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_42 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = push_back {_42} {[%#svecdeque'4] (3: UInt32.t)} (fun (_ret:()) ->  [ &_41 <- _ret ] s2)
      | s2 = bb25 ]
    
    | bb25 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_47 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = pop_front {_47} (fun (_ret:t_Option) ->  [ &_46 <- _ret ] s2)
      | s2 = bb26 ]
    
    | bb26 = s0
      [ s0 = promoted1__test_deque (fun (pr1:t_Option) ->  [ &_66 <- pr1 ] s1)
      | s1 = eq {_46} {_66} (fun (_ret:bool) ->  [ &_44 <- _ret ] s2)
      | s2 = bb27 ]
    
    | bb27 = any [ br0 -> {_44 = false} (! bb29) | br1 -> {_44} (! bb28) ] 
    | bb28 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_55 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = pop_back {_55} (fun (_ret:t_Option) ->  [ &_54 <- _ret ] s2)
      | s2 = bb30 ]
    
    | bb30 = s0
      [ s0 = promoted0__test_deque (fun (pr0:t_Option) ->  [ &_65 <- pr0 ] s1)
      | s1 = eq {_54} {_65} (fun (_ret:bool) ->  [ &_52 <- _ret ] s2)
      | s2 = bb31 ]
    
    | bb31 = any [ br0 -> {_52 = false} (! bb33) | br1 -> {_52} (! bb32) ] 
    | bb32 = s0
      [ s0 = MutBorrow.borrow_mut <t_VecDeque> {deque'0}
          (fun (_ret:MutBorrow.t t_VecDeque) ->  [ &_60 <- _ret ]  [ &deque'0 <- _ret.final ] s1)
      | s1 = clear {_60} (fun (_ret:()) ->  [ &_59 <- _ret ] s2)
      | s2 = bb34 ]
    
    | bb34 = s0 [ s0 = is_empty {deque'0} (fun (_ret:bool) ->  [ &_62 <- _ret ] s1) | s1 = bb35 ] 
    | bb35 = any [ br0 -> {_62 = false} (! bb37) | br1 -> {_62} (! bb36) ] 
    | bb36 = bb38
    | bb38 = bb39
    | bb39 = return''0 {_0}
    | bb37 = {[%#svecdeque'5] false} any
    | bb33 = {[%#svecdeque'6] false} any
    | bb29 = {[%#svecdeque'7] false} any
    | bb22 = {[%#svecdeque'8] false} any
    | bb18 = {[%#svecdeque'9] false} any
    | bb14 = {[%#svecdeque'10] false} any
    | bb11 = {[%#svecdeque'11] false} any
    | bb7 = {[%#svecdeque'12] false} any
    | bb4 = {[%#svecdeque'13] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & deque: t_VecDeque = Any.any_l ()
    | & _3: bool = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & deque'0: t_VecDeque = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _17: bool = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _25: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _33: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _37: () = Any.any_l ()
    | & _38: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _39: () = Any.any_l ()
    | & _40: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _41: () = Any.any_l ()
    | & _42: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _44: bool = Any.any_l ()
    | & _46: t_Option = Any.any_l ()
    | & _47: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _52: bool = Any.any_l ()
    | & _54: t_Option = Any.any_l ()
    | & _55: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _59: () = Any.any_l ()
    | & _60: MutBorrow.t t_VecDeque = Any.any_l ()
    | & _62: bool = Any.any_l ()
    | & _65: t_Option = Any.any_l ()
    | & _66: t_Option = Any.any_l ()
    | & _67: t_Option = Any.any_l ()
    | & _68: t_Option = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
