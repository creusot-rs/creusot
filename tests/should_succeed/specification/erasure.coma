module M_foo
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_foo2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foo2 (x: Int32.t) (_2: int) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_baz
  use creusot.int.Int32
  use creusot.prelude.Any
  
  constant const_N : Int32.t
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec baz (return (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- const_N ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_impl_Quux_for_i32__quux (* <i32 as Quux> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec quux_i32 (self: Int32.t) (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo {self} (fun (_ret: Int32.t) -> [ &_2 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & self: Int32.t = self | & _2: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_quux2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo2 (x: Int32.t) (_2: int) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec quux2 (x: Int32.t) (y: int) (return (x'0: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo2 {x} {y} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: Int32.t = x | & y: int = y | & _4: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_test_foo
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec baz (return (x: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec quux_i32 (self: Int32.t) (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_foo (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = foo {a} (fun (_ret: Int32.t) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = baz (fun (_ret: Int32.t) -> [ &c <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = quux_i32 {c} (fun (_ret: ()) -> [ &_7 <- _ret ] s1) | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_9 <- Int32.lt (-10: Int32.t) a ] s1 | s1 = any [ br0 -> {_9 = false} (! bb13) | br1 -> {_9} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_11 <- Int32.lt a (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb13) | br1 -> {_11} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_13 <- Int32.lt (-10: Int32.t) b ] s1
      | s1 = any [ br0 -> {_13 = false} (! bb13) | br1 -> {_13} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &_15 <- Int32.lt b (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_15 = false} (! bb13) | br1 -> {_15} (! bb8) ] ]
    | bb8 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb14 ]
    | bb13 = s0 [ s0 = [ &_0 <- c ] s1 | s1 = bb14 ]
    | bb14 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & x: Int32.t = x
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & c: Int32.t = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _9: bool = Any.any_l ()
    | & _11: bool = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & _15: bool = Any.any_l () ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_test_foo2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec foo2 (x: Int32.t) (_2: int) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec baz (return (x: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  let rec quux2 (x: Int32.t) (y: int) (return (x'0: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_foo2 (x: Int32.t) (y: int) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = foo2 {a} {y} (fun (_ret: Int32.t) -> [ &b <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = baz (fun (_ret: Int32.t) -> [ &c <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &_12 <- c ] s1 | s1 = quux2 {_12} {y} (fun (_ret: ()) -> [ &_10 <- _ret ] s2) | s2 = bb4 ]
    | bb4 = s0
      [ s0 = [ &_14 <- Int32.lt (-10: Int32.t) a ] s1
      | s1 = any [ br0 -> {_14 = false} (! bb13) | br1 -> {_14} (! bb5) ] ]
    | bb5 = s0
      [ s0 = [ &_16 <- Int32.lt a (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_16 = false} (! bb13) | br1 -> {_16} (! bb6) ] ]
    | bb6 = s0
      [ s0 = [ &_18 <- Int32.lt (-10: Int32.t) b ] s1
      | s1 = any [ br0 -> {_18 = false} (! bb13) | br1 -> {_18} (! bb7) ] ]
    | bb7 = s0
      [ s0 = [ &_20 <- Int32.lt b (10: Int32.t) ] s1
      | s1 = any [ br0 -> {_20 = false} (! bb13) | br1 -> {_20} (! bb8) ] ]
    | bb8 = s0 [ s0 = Int32.add {a} {b} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb14 ]
    | bb13 = s0 [ s0 = [ &_0 <- c ] s1 | s1 = bb14 ]
    | bb14 = return {_0} ]
    [ & _0: Int32.t = Any.any_l ()
    | & x: Int32.t = x
    | & y: int = y
    | & a: Int32.t = Any.any_l ()
    | & b: Int32.t = Any.any_l ()
    | & c: Int32.t = Any.any_l ()
    | & _10: () = Any.any_l ()
    | & _12: Int32.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _18: bool = Any.any_l ()
    | & _20: bool = Any.any_l () ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_impl_Tr_for_i32__takes_ref (* <i32 as Tr> *)
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_i32 (self: Int32.t) (return (x: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- self ] s1 | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & self: Int32.t = self ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_takes_ref
  use creusot.int.Int32
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_0 <- x ] s1 | s1 = return {_0} ] ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_takes_ref_test
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec takes_ref_i32 (self: Int32.t) (return (x: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_test (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = takes_ref_i32 {x} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_takes_ref_test2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec takes_ref (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec takes_ref_test2 (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = [ &_4 <- x ] s1 | s1 = takes_ref {_4} (fun (_ret: Int32.t) -> [ &_0 <- _ret ] s2) | s2 = bb1 ]
    | bb1 = return {_0} ] [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x | & _4: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_foog
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec new_i32 (x: Int32.t) (return (x'0: Int32.t)) = any
    [ return (result: Int32.t) -> {result = x} (! return {result}) ]
  
  type tup2_i32_Ghost_i32 = { f0: Int32.t; f1: Int32.t }
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec foog (x: Int32.t) (return (x'0: tup2_i32_Ghost_i32)) = (! bb0
    [ bb0 = s0 [ s0 = new_i32 {x} (fun (_ret: Int32.t) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- { f0 = x; f1 = _4 } ] s1 | s1 = return {_0} ] ]
    [ & _0: tup2_i32_Ghost_i32 = Any.any_l () | & x: Int32.t = x | & _4: Int32.t = Any.any_l () ])
    [ return (result: tup2_i32_Ghost_i32) -> (! return {result}) ]
end
module M_test_ghost_fields
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ghost_fields (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foo {x} (fun (_ret: Int32.t) -> [ &a <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- a ] s1 | s1 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l () | & x: Int32.t = x | & a: Int32.t = Any.any_l () ])
    [ return (result: Int32.t) -> (! return {result}) ]
end
module M_test_ghost_fields2
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tup2_i32_Ghost_i32 = { f0: Int32.t; f1: Int32.t }
  
  let rec foog (x: Int32.t) (return (x'0: tup2_i32_Ghost_i32)) = any
    [ return (result: tup2_i32_Ghost_i32) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ghost_fields2 (x: Int32.t) (return (x'0: Int32.t)) = (! bb0
    [ bb0 = s0 [ s0 = foog {x} (fun (_ret: tup2_i32_Ghost_i32) -> [ &_4 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &a <- _4.f0 ] s1 | s1 = [ &_0 <- a ] s2 | s2 = return {_0} ] ]
    [ & _0: Int32.t = Any.any_l ()
    | & x: Int32.t = x
    | & a: Int32.t = Any.any_l ()
    | & _4: tup2_i32_Ghost_i32 = Any.any_l () ]) [ return (result: Int32.t) -> (! return {result}) ]
end
module M_test_ptr2
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_PtrOwn_T
  
  type t_T
  
  predicate is_null_ptr_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr_T (self: t_PtrOwn_T) : Opaque.ptr
  
  predicate metadata_matches_T [@inline:trivial] (_value: t_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches_T
  
  function val_T (self: t_PtrOwn_T) : t_T
  
  function metadata_T (_1: Opaque.ptr) : ()
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate invariant_PtrOwn_T (self: t_PtrOwn_T) =
    not is_null_ptr_T (ptr_T self)
    /\ metadata_matches_T (val_T self) (metadata_T (ptr_T self)) /\ inv_ref_T (val_T self)
  
  predicate inv_PtrOwn_T (_1: t_PtrOwn_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn_T [inv_PtrOwn_T x]. inv_PtrOwn_T x = invariant_PtrOwn_T x
  
  predicate invariant_ref_PtrOwn_T [@inline:trivial] (self: t_PtrOwn_T) = inv_PtrOwn_T self
  
  meta "rewrite_def" predicate invariant_ref_PtrOwn_T
  
  predicate inv_ref_PtrOwn_T [@inline:trivial] (_1: t_PtrOwn_T) = invariant_ref_PtrOwn_T _1
  
  meta "rewrite_def" predicate inv_ref_PtrOwn_T
  
  predicate invariant_Ghost_ref_PtrOwn_T [@inline:trivial] (self: t_PtrOwn_T) = inv_ref_PtrOwn_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PtrOwn_T
  
  predicate inv_Ghost_ref_PtrOwn_T [@inline:trivial] (_1: t_PtrOwn_T) = invariant_Ghost_ref_PtrOwn_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PtrOwn_T
  
  let rec as_ref_T (ptr: Opaque.ptr) (own: t_PtrOwn_T) (return (x: t_T)) =
    {[@expl:as_ref 'own' type invariant] inv_Ghost_ref_PtrOwn_T own}
    {[@expl:as_ref requires] ptr = ptr_T own}
    any [ return (result: t_T) -> {inv_ref_T result} {result = val_T own} (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ptr2_T (x: Opaque.ptr) (own: t_PtrOwn_T) (return (x'0: t_T)) =
    {[@expl:test_ptr2 'own' type invariant] inv_Ghost_ref_PtrOwn_T own}
    {[@expl:test_ptr2 requires] false}
    (! bb0
    [ bb0 = s0 [ s0 = as_ref_T {x} {own} (fun (_ret: t_T) -> [ &_5 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_0 <- _5 ] s1 | s1 = return {_0} ] ]
    [ & _0: t_T = Any.any_l () | & x: Opaque.ptr = x | & own: t_PtrOwn_T = own | & _5: t_T = Any.any_l () ])
    [ return (result: t_T) -> {[@expl:test_ptr2 result type invariant] inv_ref_T result} (! return {result}) ]
end
module M_test_ptr_mut2
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_PtrOwn_T
  
  type t_T
  
  predicate is_null_ptr_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr_T (self: t_PtrOwn_T) : Opaque.ptr
  
  predicate metadata_matches_T [@inline:trivial] (_value: t_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches_T
  
  function val_T (self: t_PtrOwn_T) : t_T
  
  function metadata_T (_1: Opaque.ptr) : ()
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_ref_T [@inline:trivial] (self: t_T) = inv_T self
  
  meta "rewrite_def" predicate invariant_ref_T
  
  predicate inv_ref_T [@inline:trivial] (_1: t_T) = invariant_ref_T _1
  
  meta "rewrite_def" predicate inv_ref_T
  
  predicate invariant_PtrOwn_T (self: t_PtrOwn_T) =
    not is_null_ptr_T (ptr_T self)
    /\ metadata_matches_T (val_T self) (metadata_T (ptr_T self)) /\ inv_ref_T (val_T self)
  
  predicate inv_PtrOwn_T (_1: t_PtrOwn_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn_T [inv_PtrOwn_T x]. inv_PtrOwn_T x = invariant_PtrOwn_T x
  
  predicate invariant_ref_PtrOwn_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_T) =
    inv_PtrOwn_T self.current /\ inv_PtrOwn_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PtrOwn_T
  
  predicate inv_ref_PtrOwn_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_T) = invariant_ref_PtrOwn_T _1
  
  meta "rewrite_def" predicate inv_ref_PtrOwn_T
  
  predicate invariant_Ghost_ref_PtrOwn_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_T) = inv_ref_PtrOwn_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PtrOwn_T
  
  predicate inv_Ghost_ref_PtrOwn_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_T) = invariant_Ghost_ref_PtrOwn_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PtrOwn_T
  
  predicate invariant_ref_T'0 [@inline:trivial] (self: MutBorrow.t t_T) = inv_T self.current /\ inv_T self.final
  
  meta "rewrite_def" predicate invariant_ref_T'0
  
  predicate inv_ref_T'0 [@inline:trivial] (_1: MutBorrow.t t_T) = invariant_ref_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_T'0
  
  function fin_Ghost_ref_PtrOwn_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_T) : t_PtrOwn_T = self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PtrOwn_T
  
  let rec as_mut_T (ptr: Opaque.ptr) (own: MutBorrow.t t_PtrOwn_T) (return (x: MutBorrow.t t_T)) =
    {[@expl:as_mut 'own' type invariant] inv_Ghost_ref_PtrOwn_T own}
    {[@expl:as_mut requires] ptr = ptr_T own.current}
    any
    [ return (result: MutBorrow.t t_T) -> {inv_ref_T'0 result}
      {result.current = val_T own.current}
      {ptr_T (fin_Ghost_ref_PtrOwn_T own) = ptr_T own.current}
      {val_T (fin_Ghost_ref_PtrOwn_T own) = result.final}
      (! return {result}) ]
  
  predicate resolve_ref_T [@inline:trivial] (_1: MutBorrow.t t_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec test_ptr_mut2_T (x: Opaque.ptr) (own: MutBorrow.t t_PtrOwn_T) (return (x'0: MutBorrow.t t_T)) =
    {[@expl:test_ptr_mut2 'own' type invariant] inv_Ghost_ref_PtrOwn_T own}
    {[@expl:test_ptr_mut2 requires] false}
    (! bb0
    [ bb0 = s0 [ s0 = as_mut_T {x} {own} (fun (_ret: MutBorrow.t t_T) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0
      [ s0 = {inv_T _7.current}
        MutBorrow.borrow_final <t_T> {_7.current} {MutBorrow.get_id _7}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_6 <- _ret ] -{inv_T _ret.final}-
            [ &_7 <- { _7 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv_ref_T'0 _7} s2
      | s2 = -{resolve_ref_T _7}- s3
      | s3 = {inv_T _6.current}
        MutBorrow.borrow_final <t_T> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_3 <- _ret ] -{inv_T _ret.final}-
            [ &_6 <- { _6 with current = _ret.final } ] s4)
      | s4 = {[@expl:type invariant] inv_ref_T'0 _6} s5
      | s5 = -{resolve_ref_T _6}- s6
      | s6 = {inv_T _3.current}
        MutBorrow.borrow_final <t_T> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret: MutBorrow.t t_T) ->
            [ &_0 <- _ret ] -{inv_T _ret.final}-
            [ &_3 <- { _3 with current = _ret.final } ] s7)
      | s7 = {[@expl:type invariant] inv_ref_T'0 _3} s8
      | s8 = -{resolve_ref_T _3}- s9
      | s9 = return {_0} ] ]
    [ & _0: MutBorrow.t t_T = Any.any_l ()
    | & x: Opaque.ptr = x
    | & own: MutBorrow.t t_PtrOwn_T = own
    | & _3: MutBorrow.t t_T = Any.any_l ()
    | & _6: MutBorrow.t t_T = Any.any_l ()
    | & _7: MutBorrow.t t_T = Any.any_l () ])
    [ return (result: MutBorrow.t t_T) -> {[@expl:test_ptr_mut2 result type invariant] inv_ref_T'0 result}
      (! return {result}) ]
end
module M_no_specs
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec no_specs (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = foo {(0: Int32.t)} (fun (_ret: Int32.t) -> [ &_1 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = bb3 [ bb3 = (! any [ br0 -> {false = false} (! bb5) | br1 -> {false} (! bb3) ]) ]
    | bb5 = return {_0} ] [ & _0: () = Any.any_l () | & _1: Int32.t = Any.any_l () ])
    [ return (result: ()) -> (! return {result}) ]
end
module M_specs
  use creusot.int.Int32
  use creusot.prelude.Any
  
  let rec foo (x: Int32.t) (return (x'0: Int32.t)) = any [ return (result: Int32.t) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec specs (x: int) (return (x'0: ())) = {[@expl:specs requires] false}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] false} s1
      | s1 = foo {(0: Int32.t)} (fun (_ret: Int32.t) -> [ &_7 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = [ &_8 <- x ] s1 | s1 = bb3 ]
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] false}
        (! s0)
        [ s0 = bb4 ]
        [ bb4 = any [ br0 -> {false = false} (! bb6) | br1 -> {false} (! bb3) ] ] ]
    | bb6 = return {_0} ]
    [ & _0: () = Any.any_l () | & x: int = x | & _7: Int32.t = Any.any_l () | & _8: int = Any.any_l () ])
    [ return (result: ()) -> {[@expl:specs ensures] false} (! return {result}) ]
end
module M_nested
  use creusot.prelude.Any
  
  let rec hidden (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_nested__hidden
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_nested2
  use creusot.prelude.Any
  
  let rec hidden (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested2 (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_nested2__hidden
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_nested3
  use creusot.prelude.Any
  
  let rec hidden (return (x: ())) = any [ return (result: ()) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec nested3 (return (x: ())) = (! bb0
    [ bb0 = s0 [ s0 = hidden (fun (_ret: ()) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_nested3__hidden
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec hidden (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_ghost_split
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_split (return (x: ())) = (! bb0
    [ bb0 = return {_0} ] [ & _0: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_ghost_split2
  use creusot.prelude.Any
  
  type tup2_unit_unit = { f0: (); f1: () }
  
  let rec new_tup2_unit_unit (x: tup2_unit_unit) (return (x'0: tup2_unit_unit)) = any
    [ return (result: tup2_unit_unit) -> {result = x} (! return {result}) ]
  
  type tup2_Ghost_unit_Ghost_unit = { f0'0: (); f1'0: () }
  
  let rec split_unit (self: tup2_unit_unit) (return (x: tup2_Ghost_unit_Ghost_unit)) = any
    [ return (result: tup2_Ghost_unit_Ghost_unit) -> {self.f0 = result.f0'0}
      {self.f1 = result.f1'0}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec ghost_split2 (return (x: ())) = (! bb0
    [ bb0 = s0
      [ s0 = [ &_4 <- { f0 = _5; f1 = _6 } ] s1
      | s1 = new_tup2_unit_unit {_4} (fun (_ret: tup2_unit_unit) -> [ &_3 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0 [ s0 = split_unit {_3} (fun (_ret: tup2_Ghost_unit_Ghost_unit) -> [ &_2 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & _2: tup2_Ghost_unit_Ghost_unit = Any.any_l ()
    | & _3: tup2_unit_unit = Any.any_l ()
    | & _4: tup2_unit_unit = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _6: () = Any.any_l () ]) [ return (result: ()) -> (! return {result}) ]
end
module M_slice_as_ptr
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: Slice64.slice t_T) = inv_slice_T self
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  let rec as_ptr_T (self_: Slice64.slice t_T) (return (x: Opaque.ptr)) =
    {[@expl:as_ptr 'self_' type invariant] inv_ref_slice_T self_}
    any [ return (result: Opaque.ptr) -> (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_ptr_T (s: Slice64.slice t_T) (return (x: Opaque.ptr)) =
    {[@expl:slice_as_ptr 's' type invariant] inv_ref_slice_T s}
    (! bb0
    [ bb0 = s0 [ s0 = as_ptr_T {s} (fun (_ret: Opaque.ptr) -> [ &_0 <- _ret ] s1) | s1 = bb1 ] | bb1 = return {_0} ]
    [ & _0: Opaque.ptr = Any.any_l () | & s: Slice64.slice t_T = s ])
    [ return (result: Opaque.ptr) -> (! return {result}) ]
end
module M_slice_as_ptr_own
  use creusot.slice.Slice64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_T
  
  type t_PtrOwn_slice_T
  
  type tup2_ptr_T_Ghost_ref_PtrOwn_slice_T = { f0: Opaque.ptr; f1: t_PtrOwn_slice_T }
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: Slice64.slice t_T) = inv_slice_T self
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  predicate is_null_ptr_slice_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr_slice_T (self: t_PtrOwn_slice_T) : Opaque.ptr
  
  predicate metadata_matches_slice_T [@inline:trivial] (_value: Slice64.slice t_T) (_metadata: UInt64.t) =
    Seq.length (Slice64.view _value) = UInt64.t'int _metadata
  
  meta "rewrite_def" predicate metadata_matches_slice_T
  
  function val_slice_T (self: t_PtrOwn_slice_T) : Slice64.slice t_T
  
  function metadata_slice_T (_1: Opaque.ptr) : UInt64.t
  
  predicate invariant_PtrOwn_slice_T (self: t_PtrOwn_slice_T) =
    not is_null_ptr_slice_T (ptr_slice_T self)
    /\ metadata_matches_slice_T (val_slice_T self) (metadata_slice_T (ptr_slice_T self))
    /\ inv_ref_slice_T (val_slice_T self)
  
  predicate inv_PtrOwn_slice_T (_1: t_PtrOwn_slice_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn_slice_T [inv_PtrOwn_slice_T x]. inv_PtrOwn_slice_T x
      = invariant_PtrOwn_slice_T x
  
  predicate invariant_ref_PtrOwn_slice_T [@inline:trivial] (self: t_PtrOwn_slice_T) = inv_PtrOwn_slice_T self
  
  meta "rewrite_def" predicate invariant_ref_PtrOwn_slice_T
  
  predicate inv_ref_PtrOwn_slice_T [@inline:trivial] (_1: t_PtrOwn_slice_T) = invariant_ref_PtrOwn_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_PtrOwn_slice_T
  
  predicate invariant_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (self: t_PtrOwn_slice_T) = inv_ref_PtrOwn_slice_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PtrOwn_slice_T
  
  predicate inv_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (_1: t_PtrOwn_slice_T) =
    invariant_Ghost_ref_PtrOwn_slice_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PtrOwn_slice_T
  
  predicate inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (_1: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) =
    inv_Ghost_ref_PtrOwn_slice_T _1.f1
  
  meta "rewrite_def" predicate inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T
  
  let rec as_ptr_own_slice_T (self: Slice64.slice t_T) (return (x: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T)) =
    {[@expl:as_ptr_own 'self' type invariant] inv_ref_slice_T self}
    any
    [ return (result: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) -> {inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T result}
      {result.f0 = Opaque.thin (ptr_slice_T result.f1)}
      {self = val_slice_T result.f1}
      (! return {result}) ]
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_ptr_own_T (s: Slice64.slice t_T) (return (x: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T)) =
    {[@expl:slice_as_ptr_own 's' type invariant] inv_ref_slice_T s}
    (! bb0
    [ bb0 = s0
      [ s0 = as_ptr_own_slice_T {s} (fun (_ret: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) -> [ &_0 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = return {_0} ] [ & _0: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T = Any.any_l () | & s: Slice64.slice t_T = s ])
    [ return (result: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) ->
    {[@expl:slice_as_ptr_own result type invariant] inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T result}
      (! return {result}) ]
end
module M_slice_as_mut_ptr
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Opaque
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  let rec as_mut_ptr_T (self_: MutBorrow.t (Slice64.slice t_T)) (return (x: Opaque.ptr)) =
    {[@expl:as_mut_ptr 'self_' type invariant] inv_ref_slice_T self_}
    any [ return (result: Opaque.ptr) -> (! return {result}) ]
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_mut_ptr_T (s: MutBorrow.t (Slice64.slice t_T)) (return (x: Opaque.ptr)) =
    {[@expl:slice_as_mut_ptr 's' type invariant] inv_ref_slice_T s}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_slice_T s.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {s.current} {MutBorrow.get_id s}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_2 <- _ret ] -{inv_slice_T _ret.final}-
            [ &s <- { s with current = _ret.final } ] s1)
      | s1 = as_mut_ptr_T {_2} (fun (_ret: Opaque.ptr) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv_ref_slice_T s} s1 | s1 = -{resolve_ref_slice_T s}- s2 | s2 = return {_0} ] ]
    [ & _0: Opaque.ptr = Any.any_l ()
    | & s: MutBorrow.t (Slice64.slice t_T) = s
    | & _2: MutBorrow.t (Slice64.slice t_T) = Any.any_l () ]) [ return (result: Opaque.ptr) -> (! return {result}) ]
end
module M_slice_as_mut_ptr_own
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv_T (_1: t_T)
  
  predicate invariant_Box_T_Global (self: t_T) = inv_T self
  
  predicate inv_Box_T_Global [@inline:trivial] (_1: t_T) = invariant_Box_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_T_Global
  
  predicate invariant_Seq_T [@inline:trivial] (self: Seq.seq t_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_T
  
  predicate inv_Seq_T [@inline:trivial] (_1: Seq.seq t_T) = invariant_Seq_T _1
  
  meta "rewrite_def" predicate inv_Seq_T
  
  predicate invariant_slice_T (self: Slice64.slice t_T) = inv_Seq_T (Slice64.view self)
  
  predicate inv_slice_T [@inline:trivial] (_1: Slice64.slice t_T) = invariant_slice_T _1
  
  meta "rewrite_def" predicate inv_slice_T
  
  type t_PtrOwn_slice_T
  
  type tup2_ptr_T_Ghost_ref_PtrOwn_slice_T = { f0: Opaque.ptr; f1: MutBorrow.t t_PtrOwn_slice_T }
  
  predicate invariant_ref_slice_T [@inline:trivial] (self: MutBorrow.t (Slice64.slice t_T)) =
    inv_slice_T self.current /\ inv_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_slice_T
  
  predicate inv_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = invariant_ref_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_slice_T
  
  predicate is_null_ptr_slice_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr_slice_T (self: t_PtrOwn_slice_T) : Opaque.ptr
  
  predicate metadata_matches_slice_T [@inline:trivial] (_value: Slice64.slice t_T) (_metadata: UInt64.t) =
    Seq.length (Slice64.view _value) = UInt64.t'int _metadata
  
  meta "rewrite_def" predicate metadata_matches_slice_T
  
  function val_slice_T (self: t_PtrOwn_slice_T) : Slice64.slice t_T
  
  function metadata_slice_T (_1: Opaque.ptr) : UInt64.t
  
  predicate invariant_ref_slice_T'0 [@inline:trivial] (self: Slice64.slice t_T) = inv_slice_T self
  
  meta "rewrite_def" predicate invariant_ref_slice_T'0
  
  predicate inv_ref_slice_T'0 [@inline:trivial] (_1: Slice64.slice t_T) = invariant_ref_slice_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_slice_T'0
  
  predicate invariant_PtrOwn_slice_T (self: t_PtrOwn_slice_T) =
    not is_null_ptr_slice_T (ptr_slice_T self)
    /\ metadata_matches_slice_T (val_slice_T self) (metadata_slice_T (ptr_slice_T self))
    /\ inv_ref_slice_T'0 (val_slice_T self)
  
  predicate inv_PtrOwn_slice_T (_1: t_PtrOwn_slice_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_PtrOwn_slice_T [inv_PtrOwn_slice_T x]. inv_PtrOwn_slice_T x
      = invariant_PtrOwn_slice_T x
  
  predicate invariant_ref_PtrOwn_slice_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_slice_T) =
    inv_PtrOwn_slice_T self.current /\ inv_PtrOwn_slice_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PtrOwn_slice_T
  
  predicate inv_ref_PtrOwn_slice_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_slice_T) =
    invariant_ref_PtrOwn_slice_T _1
  
  meta "rewrite_def" predicate inv_ref_PtrOwn_slice_T
  
  predicate invariant_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_slice_T) =
    inv_ref_PtrOwn_slice_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PtrOwn_slice_T
  
  predicate inv_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_slice_T) =
    invariant_Ghost_ref_PtrOwn_slice_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PtrOwn_slice_T
  
  predicate inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (_1: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) =
    inv_Ghost_ref_PtrOwn_slice_T _1.f1
  
  meta "rewrite_def" predicate inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T
  
  function fin_Ghost_ref_PtrOwn_slice_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_slice_T) : t_PtrOwn_slice_T =
    self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PtrOwn_slice_T
  
  let rec as_mut_ptr_own_slice_T (self: MutBorrow.t (Slice64.slice t_T))
    (return (x: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T)) =
    {[@expl:as_mut_ptr_own 'self' type invariant] inv_ref_slice_T self}
    any
    [ return (result: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) -> {inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T result}
      {result.f0 = Opaque.thin (ptr_slice_T result.f1.current)}
      {self.current = val_slice_T result.f1.current}
      {self.final = val_slice_T (fin_Ghost_ref_PtrOwn_slice_T result.f1)}
      (! return {result}) ]
  
  predicate resolve_ref_slice_T [@inline:trivial] (_1: MutBorrow.t (Slice64.slice t_T)) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_slice_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec slice_as_mut_ptr_own_T (s: MutBorrow.t (Slice64.slice t_T))
    (return (x: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T)) =
    {[@expl:slice_as_mut_ptr_own 's' type invariant] inv_ref_slice_T s}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv_slice_T s.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {s.current} {MutBorrow.get_id s}
          (fun (_ret: MutBorrow.t (Slice64.slice t_T)) ->
            [ &_3 <- _ret ] -{inv_slice_T _ret.final}-
            [ &s <- { s with current = _ret.final } ] s1)
      | s1 = as_mut_ptr_own_slice_T {_3} (fun (_ret: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) -> [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv_ref_slice_T s} s1 | s1 = -{resolve_ref_slice_T s}- s2 | s2 = return {_0} ] ]
    [ & _0: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T = Any.any_l ()
    | & s: MutBorrow.t (Slice64.slice t_T) = s
    | & _3: MutBorrow.t (Slice64.slice t_T) = Any.any_l () ])
    [ return (result: tup2_ptr_T_Ghost_ref_PtrOwn_slice_T) ->
    {[@expl:slice_as_mut_ptr_own result type invariant] inv_tup2_ptr_T_Ghost_ref_PtrOwn_slice_T result}
      (! return {result}) ]
end
