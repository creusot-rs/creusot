module M_logic_call__dummy [#"logic_call.rs" 11 0 11 21]
  let%span slogic_call = "logic_call.rs" 12 4 12 5
  let%span slogic_call'0 = "logic_call.rs" 10 10 10 27
  let%span slogic_call'1 = "logic_call.rs" 7 16 7 22
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  predicate reflexive [#"logic_call.rs" 6 0 6 40] (x: UInt32.t) =
    [%#slogic_call'1] x = x
  
  meta "compute_max_steps" 1000000
  
  let rec dummy[#"logic_call.rs" 11 0 11 21] (return'  (x:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#slogic_call] (0: UInt32.t) ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0: UInt32.t = Any.any_l () ] 
    [ return''0 (result:UInt32.t)-> {[@expl:dummy ensures] [%#slogic_call'0] reflexive result} (! return' {result}) ]

end
