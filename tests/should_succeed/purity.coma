module M_purity__qyi14899607085053415061__f [#"purity.rs" 12 4 12 10] (* <i32 as Foo> *)
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec f[#"purity.rs" 12 4 12 10] (return'  (x:()))= (! bb0 [ bb0 = return''0 {_0} ] ) [ & _0: () = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_purity__calls_f [#"purity.rs" 16 0 16 16]
  use creusot.prelude.Any
  
  let rec f (return'  (x:()))= any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec calls_f[#"purity.rs" 16 0 16 16] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = f (fun (_ret:()) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ]  | bb1 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
module M_purity__result [#"purity.rs" 39 0 39 15]
  let%span spurity = "purity.rs" 40 18 40 32
  let%span spurity'0 = "purity.rs" 36 4 36 21
  let%span spurity'1 = "purity.rs" 29 8 29 9
  
  use creusot.prelude.Any
  
  constant g: int = [%#spurity'1] 1
  
  constant calls_g: int = [%#spurity'0] g
  
  meta "compute_max_steps" 1000000
  
  let rec result[#"purity.rs" 39 0 39 15] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = {[@expl:assertion] [%#spurity] calls_g = 1} s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0: () = Any.any_l () ]  [ return''0 (result'0:())-> (! return' {result'0}) ] 
end
module M_purity__clone_id [#"purity.rs" 45 0 45 22]
  let%span sid = "../../creusot-contracts/src/logic/id.rs" 19 14 19 29
  
  use creusot.prelude.Any
  
  type t_Id
  
  let rec clone' (self:t_Id) (return'  (x:t_Id))= any
    [ return''0 (result:t_Id)-> {[%#sid] result = self} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec clone_id[#"purity.rs" 45 0 45 22] (i:t_Id) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = clone' {i'0} (fun (_ret:t_Id) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ]  | bb1 = return''0 {_0} ]
    ) [ & _0: () = Any.any_l () | & i'0: t_Id = i | & _2: t_Id = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
