module M_impl_List_T__new (* List<T> *)
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  use map.Map
  
  predicate is_null_ptr_Cell_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  let rec null_Cell_T (return (x: Opaque.ptr)) = any
    [ return (result: Opaque.ptr) -> {is_null_ptr_Cell_T result} (! return {result}) ]
  
  type t_PtrOwn_Cell_T
  
  function ptr_Cell_T (self: t_PtrOwn_Cell_T) : Opaque.ptr
  
  type t_T
  
  type t_Cell_T = { v: t_T; next: Opaque.ptr }
  
  predicate metadata_matches_Cell_T [@inline:trivial] (_value: t_Cell_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches_Cell_T
  
  function val_Cell_T (self: t_PtrOwn_Cell_T) : t_Cell_T
  
  function metadata_Cell_T (_1: Opaque.ptr) : ()
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Cell_T (_1: t_Cell_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cell_T [inv_Cell_T x]. inv_Cell_T x = inv_T x.v
  
  predicate invariant_ref_Cell_T [@inline:trivial] (self: t_Cell_T) = inv_Cell_T self
  
  meta "rewrite_def" predicate invariant_ref_Cell_T
  
  predicate inv_ref_Cell_T [@inline:trivial] (_1: t_Cell_T) = invariant_ref_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Cell_T
  
  predicate invariant_PtrOwn_Cell_T (self: t_PtrOwn_Cell_T) =
    not is_null_ptr_Cell_T (ptr_Cell_T self)
    /\ metadata_matches_Cell_T (val_Cell_T self) (metadata_Cell_T (ptr_Cell_T self)) /\ inv_ref_Cell_T (val_Cell_T self)
  
  predicate inv_PtrOwn_Cell_T (_1: t_PtrOwn_Cell_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn_Cell_T [inv_PtrOwn_Cell_T x]. inv_PtrOwn_Cell_T x
      = invariant_PtrOwn_Cell_T x
  
  predicate invariant_Box_PtrOwn_Cell_T_Global (self: t_PtrOwn_Cell_T) = inv_PtrOwn_Cell_T self
  
  predicate inv_Box_PtrOwn_Cell_T_Global [@inline:trivial] (_1: t_PtrOwn_Cell_T) = invariant_Box_PtrOwn_Cell_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_PtrOwn_Cell_T_Global
  
  predicate invariant_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_PtrOwn_Cell_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_PtrOwn_Cell_T
  
  predicate inv_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) = invariant_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Seq_PtrOwn_Cell_T
  
  predicate invariant_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    inv_Seq_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Seq_PtrOwn_Cell_T
  
  predicate inv_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) =
    invariant_Ghost_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Seq_PtrOwn_Cell_T
  
  let rec new_PtrOwn_Cell_T (return (x: Seq.seq t_PtrOwn_Cell_T)) = any
    [ return (result: Seq.seq t_PtrOwn_Cell_T) -> {inv_Ghost_Seq_PtrOwn_Cell_T result}
      {result = (Seq.empty: Seq.seq t_PtrOwn_Cell_T)}
      (! return {result}) ]
  
  type t_List_T = { first: Opaque.ptr; last: Opaque.ptr; seq: Seq.seq t_PtrOwn_Cell_T }
  
  predicate invariant_List_T (self: t_List_T) =
    self.seq = (Seq.empty: Seq.seq t_PtrOwn_Cell_T) /\ is_null_ptr_Cell_T self.first /\ is_null_ptr_Cell_T self.last
    \/ Seq.length self.seq > 0
    /\ self.first = ptr_Cell_T (Seq.get self.seq 0)
    /\ self.last = ptr_Cell_T (Seq.get self.seq (Seq.length self.seq - 1))
    /\ (forall i: int. 0 <= i /\ i < Seq.length self.seq - 1
        -> (val_Cell_T (Seq.get self.seq i)).next = ptr_Cell_T (Seq.get self.seq (i + 1)))
    /\ is_null_ptr_Cell_T (val_Cell_T (Seq.get self.seq (Seq.length self.seq - 1))).next
  
  predicate inv_List_T (_1: t_List_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List_T [inv_List_T x]. inv_List_T x
      = (invariant_List_T x /\ inv_Ghost_Seq_PtrOwn_Cell_T x.seq)
  
  function seq_map_PtrOwn_Cell_T (s: Seq.seq t_PtrOwn_Cell_T) (f: Map.map t_PtrOwn_Cell_T t_T) : Seq.seq t_T =
    Seq.create (Seq.length s) (fun (i: int) -> Map.get f (Seq.get s i))
  
  function view_List_T (self: t_List_T) : Seq.seq t_T =
    seq_map_PtrOwn_Cell_T self.seq (fun (ptr_own: t_PtrOwn_Cell_T) -> (val_Cell_T ptr_own).v)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec new_T (return (x: t_List_T)) = (! bb0
    [ bb0 = s0 [ s0 = null_Cell_T (fun (_ret: Opaque.ptr) -> [ &_2 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = null_Cell_T (fun (_ret: Opaque.ptr) -> [ &_3 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0 [ s0 = new_PtrOwn_Cell_T (fun (_ret: Seq.seq t_PtrOwn_Cell_T) -> [ &_4 <- _ret ] s1) | s1 = bb3 ]
    | bb3 = s0 [ s0 = [ &_0 <- { first = _2; last = _3; seq = _4 } ] s1 | s1 = return {_0} ] ]
    [ & _0: t_List_T = Any.any_l ()
    | & _2: Opaque.ptr = Any.any_l ()
    | & _3: Opaque.ptr = Any.any_l ()
    | & _4: Seq.seq t_PtrOwn_Cell_T = Any.any_l () ])
    [ return (result: t_List_T) -> {[@expl:new result type invariant] inv_List_T result}
      {[@expl:new ensures] view_List_T result = (Seq.empty: Seq.seq t_T)}
      (! return {result}) ]
end
module M_impl_List_T__push_back (* List<T> *)
  use creusot.prelude.Opaque
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.int.Int128
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use map.Map
  
  predicate is_null_ptr_Cell_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  let rec null_Cell_T (return (x: Opaque.ptr)) = any
    [ return (result: Opaque.ptr) -> {is_null_ptr_Cell_T result} (! return {result}) ]
  
  type t_T
  
  type t_Cell_T = { v: t_T; next: Opaque.ptr }
  
  type t_PtrOwn_Cell_T
  
  type tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T = { f0: Opaque.ptr; f1: t_PtrOwn_Cell_T }
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Cell_T (_1: t_Cell_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cell_T [inv_Cell_T x]. inv_Cell_T x = inv_T x.v
  
  predicate invariant_Box_Cell_T_Global (self: t_Cell_T) = inv_Cell_T self
  
  predicate inv_Box_Cell_T_Global [@inline:trivial] (_1: t_Cell_T) = invariant_Box_Cell_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_Cell_T_Global
  
  function ptr_Cell_T (self: t_PtrOwn_Cell_T) : Opaque.ptr
  
  predicate metadata_matches_Cell_T [@inline:trivial] (_value: t_Cell_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches_Cell_T
  
  function val_Cell_T (self: t_PtrOwn_Cell_T) : t_Cell_T
  
  function metadata_Cell_T (_1: Opaque.ptr) : ()
  
  predicate invariant_ref_Cell_T [@inline:trivial] (self: t_Cell_T) = inv_Cell_T self
  
  meta "rewrite_def" predicate invariant_ref_Cell_T
  
  predicate inv_ref_Cell_T [@inline:trivial] (_1: t_Cell_T) = invariant_ref_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Cell_T
  
  predicate invariant_PtrOwn_Cell_T (self: t_PtrOwn_Cell_T) =
    not is_null_ptr_Cell_T (ptr_Cell_T self)
    /\ metadata_matches_Cell_T (val_Cell_T self) (metadata_Cell_T (ptr_Cell_T self)) /\ inv_ref_Cell_T (val_Cell_T self)
  
  predicate inv_PtrOwn_Cell_T (_1: t_PtrOwn_Cell_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn_Cell_T [inv_PtrOwn_Cell_T x]. inv_PtrOwn_Cell_T x
      = invariant_PtrOwn_Cell_T x
  
  predicate invariant_Ghost_PtrOwn_Cell_T [@inline:trivial] (self: t_PtrOwn_Cell_T) = inv_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PtrOwn_Cell_T
  
  predicate inv_Ghost_PtrOwn_Cell_T [@inline:trivial] (_1: t_PtrOwn_Cell_T) = invariant_Ghost_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PtrOwn_Cell_T
  
  predicate inv_tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T [@inline:trivial] (_1: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T) =
    inv_Ghost_PtrOwn_Cell_T _1.f1
  
  meta "rewrite_def" predicate inv_tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T
  
  let rec from_box_Cell_T (val': t_Cell_T) (return (x: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T)) =
    {[@expl:from_box 'val' type invariant] inv_Box_Cell_T_Global val'}
    any
    [ return (result: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T) -> {inv_tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T result}
      {ptr_Cell_T result.f1 = result.f0 /\ val_Cell_T result.f1 = val'}
      (! return {result}) ]
  
  type t_List_T = { first: Opaque.ptr; last: Opaque.ptr; seq: Seq.seq t_PtrOwn_Cell_T }
  
  let rec is_null_Cell_T (self_: Opaque.ptr) (return (x: bool)) = any
    [ return (result: bool) -> {result = is_null_ptr_Cell_T self_} (! return {result}) ]
  
  predicate invariant_Box_PtrOwn_Cell_T_Global (self: t_PtrOwn_Cell_T) = inv_PtrOwn_Cell_T self
  
  predicate inv_Box_PtrOwn_Cell_T_Global [@inline:trivial] (_1: t_PtrOwn_Cell_T) = invariant_Box_PtrOwn_Cell_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_PtrOwn_Cell_T_Global
  
  predicate invariant_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_PtrOwn_Cell_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_PtrOwn_Cell_T
  
  predicate inv_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) = invariant_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Seq_PtrOwn_Cell_T
  
  predicate invariant_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    inv_Seq_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Seq_PtrOwn_Cell_T
  
  predicate inv_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) =
    invariant_Ghost_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Seq_PtrOwn_Cell_T
  
  predicate invariant_ref_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    inv_Ghost_Seq_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Seq_PtrOwn_Cell_T
  
  predicate inv_ref_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) =
    invariant_ref_Ghost_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Seq_PtrOwn_Cell_T
  
  predicate invariant_ref_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    inv_Seq_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_ref_Seq_PtrOwn_Cell_T
  
  predicate inv_ref_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) =
    invariant_ref_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Seq_PtrOwn_Cell_T
  
  let rec deref_Ghost_Seq_PtrOwn_Cell_T (self: Seq.seq t_PtrOwn_Cell_T) (return (x: Seq.seq t_PtrOwn_Cell_T)) =
    {[@expl:deref 'self' type invariant] inv_ref_Ghost_Seq_PtrOwn_Cell_T self}
    any
    [ return (result: Seq.seq t_PtrOwn_Cell_T) -> {inv_ref_Seq_PtrOwn_Cell_T result}
      {result = self}
      (! return {result}) ]
  
  let rec len_ghost_PtrOwn_Cell_T (self: Seq.seq t_PtrOwn_Cell_T) (return (x: int)) =
    {[@expl:len_ghost 'self' type invariant] inv_ref_Seq_PtrOwn_Cell_T self}
    any [ return (result: int) -> {result = Seq.length self} (! return {result}) ]
  
  let rec new (value: Int128.t) (return (x: int)) = any
    [ return (result: int) -> {result = Int128.to_int value} (! return {result}) ]
  
  let rec into_inner_Int (self: int) (return (x: int)) = any
    [ return (result: int) -> {result = self} (! return {result}) ]
  
  let rec sub_Int (self: int) (other: int) (return (x: int)) = any
    [ return (result: int) -> {result = self - other} (! return {result}) ]
  
  predicate invariant_ref_Ghost_Seq_PtrOwn_Cell_T'0 [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    inv_Ghost_Seq_PtrOwn_Cell_T self.current /\ inv_Ghost_Seq_PtrOwn_Cell_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Seq_PtrOwn_Cell_T'0
  
  predicate inv_ref_Ghost_Seq_PtrOwn_Cell_T'0 [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    invariant_ref_Ghost_Seq_PtrOwn_Cell_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Seq_PtrOwn_Cell_T'0
  
  predicate invariant_ref_Seq_PtrOwn_Cell_T'0 [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    inv_Seq_PtrOwn_Cell_T self.current /\ inv_Seq_PtrOwn_Cell_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Seq_PtrOwn_Cell_T'0
  
  predicate inv_ref_Seq_PtrOwn_Cell_T'0 [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    invariant_ref_Seq_PtrOwn_Cell_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Seq_PtrOwn_Cell_T'0
  
  let rec deref_mut_Ghost_Seq_PtrOwn_Cell_T (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T))
    (return (x: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T))) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_Seq_PtrOwn_Cell_T'0 self}
    any
    [ return (result: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) -> {inv_ref_Seq_PtrOwn_Cell_T'0 result}
      {result = self}
      (! return {result}) ]
  
  type t_Option_ref_PtrOwn_Cell_T = None | Some (MutBorrow.t t_PtrOwn_Cell_T)
  
  predicate invariant_ref_PtrOwn_Cell_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_Cell_T) =
    inv_PtrOwn_Cell_T self.current /\ inv_PtrOwn_Cell_T self.final
  
  meta "rewrite_def" predicate invariant_ref_PtrOwn_Cell_T
  
  predicate inv_ref_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_Cell_T) = invariant_ref_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_PtrOwn_Cell_T
  
  predicate inv_Option_ref_PtrOwn_Cell_T (_1: t_Option_ref_PtrOwn_Cell_T)
  
  axiom inv_axiom'1 [@rewrite]:
    forall x: t_Option_ref_PtrOwn_Cell_T [inv_Option_ref_PtrOwn_Cell_T x]. inv_Option_ref_PtrOwn_Cell_T x
      = match x with
        | None -> true
        | Some f0'0 -> inv_ref_PtrOwn_Cell_T f0'0
        end
  
  type t_Option_PtrOwn_Cell_T = None'0 | Some'0 t_PtrOwn_Cell_T
  
  function get_PtrOwn_Cell_T (self: Seq.seq t_PtrOwn_Cell_T) (ix: int) : t_Option_PtrOwn_Cell_T = if 0 <= ix
    /\ ix < Seq.length self then
      Some'0 (Seq.get self ix)
    else
      None'0
  
  
  let rec get_mut_ghost_PtrOwn_Cell_T (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) (index: int)
    (return (x: t_Option_ref_PtrOwn_Cell_T)) =
    {[@expl:get_mut_ghost 'self' type invariant] inv_ref_Seq_PtrOwn_Cell_T'0 self}
    any
    [ return (result: t_Option_ref_PtrOwn_Cell_T) -> {inv_Option_ref_PtrOwn_Cell_T result}
      {match result with
        | None -> get_PtrOwn_Cell_T self.current index = None'0 /\ self.current = self.final
        | Some r -> get_PtrOwn_Cell_T self.current index = Some'0 (r.current) /\ r.final = Seq.get self.final index
        end}
      {forall i: int. i <> index -> get_PtrOwn_Cell_T self.current i = get_PtrOwn_Cell_T self.final i}
      {Seq.length self.current = Seq.length self.final}
      (! return {result}) ]
  
  let rec unwrap_ref_PtrOwn_Cell_T (self_: t_Option_ref_PtrOwn_Cell_T) (return (x: MutBorrow.t t_PtrOwn_Cell_T)) =
    {[@expl:unwrap 'self_' type invariant] inv_Option_ref_PtrOwn_Cell_T self_}
    {[@expl:unwrap requires] self_ <> None}
    any
    [ return (result: MutBorrow.t t_PtrOwn_Cell_T) -> {inv_ref_PtrOwn_Cell_T result}
      {Some result = self_}
      (! return {result}) ]
  
  predicate resolve_ref_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Seq_PtrOwn_Cell_T
  
  predicate resolve_ref_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_Cell_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_PtrOwn_Cell_T
  
  predicate invariant_Ghost_ref_PtrOwn_Cell_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_Cell_T) =
    inv_ref_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_Ghost_ref_PtrOwn_Cell_T
  
  predicate inv_Ghost_ref_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t t_PtrOwn_Cell_T) =
    invariant_Ghost_ref_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Ghost_ref_PtrOwn_Cell_T
  
  let rec new_ref_PtrOwn_Cell_T (x: MutBorrow.t t_PtrOwn_Cell_T) (return (x'0: MutBorrow.t t_PtrOwn_Cell_T)) =
    {[@expl:new 'x' type invariant] inv_ref_PtrOwn_Cell_T x}
    any
    [ return (result: MutBorrow.t t_PtrOwn_Cell_T) -> {inv_Ghost_ref_PtrOwn_Cell_T result}
      {result = x}
      (! return {result}) ]
  
  predicate invariant_ref_Cell_T'0 [@inline:trivial] (self: MutBorrow.t t_Cell_T) =
    inv_Cell_T self.current /\ inv_Cell_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Cell_T'0
  
  predicate inv_ref_Cell_T'0 [@inline:trivial] (_1: MutBorrow.t t_Cell_T) = invariant_ref_Cell_T'0 _1
  
  meta "rewrite_def" predicate inv_ref_Cell_T'0
  
  function fin_Ghost_ref_PtrOwn_Cell_T [@inline:trivial] (self: MutBorrow.t t_PtrOwn_Cell_T) : t_PtrOwn_Cell_T =
    self.final
  
  meta "rewrite_def" function fin_Ghost_ref_PtrOwn_Cell_T
  
  let rec as_mut_Cell_T (ptr: Opaque.ptr) (own: MutBorrow.t t_PtrOwn_Cell_T) (return (x: MutBorrow.t t_Cell_T)) =
    {[@expl:as_mut 'own' type invariant] inv_Ghost_ref_PtrOwn_Cell_T own}
    {[@expl:as_mut requires] ptr = ptr_Cell_T own.current}
    any
    [ return (result: MutBorrow.t t_Cell_T) -> {inv_ref_Cell_T'0 result}
      {result.current = val_Cell_T own.current}
      {ptr_Cell_T (fin_Ghost_ref_PtrOwn_Cell_T own) = ptr_Cell_T own.current}
      {val_Cell_T (fin_Ghost_ref_PtrOwn_Cell_T own) = result.final}
      (! return {result}) ]
  
  predicate resolve_ref_Cell_T [@inline:trivial] (_1: MutBorrow.t t_Cell_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Cell_T
  
  let rec into_inner_PtrOwn_Cell_T (self: t_PtrOwn_Cell_T) (return (x: t_PtrOwn_Cell_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_PtrOwn_Cell_T self}
    any [ return (result: t_PtrOwn_Cell_T) -> {inv_PtrOwn_Cell_T result} {result = self} (! return {result}) ]
  
  let rec push_back_ghost_PtrOwn_Cell_T (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) (x: t_PtrOwn_Cell_T)
    (return (x'0: ())) = {[@expl:push_back_ghost 'self' type invariant] inv_ref_Seq_PtrOwn_Cell_T'0 self}
    {[@expl:push_back_ghost 'x' type invariant] inv_PtrOwn_Cell_T x}
    any [ return (result: ()) -> {self.final = Seq.snoc self.current x} (! return {result}) ]
  
  predicate invariant_List_T (self: t_List_T) =
    self.seq = (Seq.empty: Seq.seq t_PtrOwn_Cell_T) /\ is_null_ptr_Cell_T self.first /\ is_null_ptr_Cell_T self.last
    \/ Seq.length self.seq > 0
    /\ self.first = ptr_Cell_T (Seq.get self.seq 0)
    /\ self.last = ptr_Cell_T (Seq.get self.seq (Seq.length self.seq - 1))
    /\ (forall i: int. 0 <= i /\ i < Seq.length self.seq - 1
        -> (val_Cell_T (Seq.get self.seq i)).next = ptr_Cell_T (Seq.get self.seq (i + 1)))
    /\ is_null_ptr_Cell_T (val_Cell_T (Seq.get self.seq (Seq.length self.seq - 1))).next
  
  predicate inv_List_T (_1: t_List_T)
  
  axiom inv_axiom'2 [@rewrite]: forall x: t_List_T [inv_List_T x]. inv_List_T x
      = (invariant_List_T x /\ inv_Ghost_Seq_PtrOwn_Cell_T x.seq)
  
  predicate invariant_ref_List_T [@inline:trivial] (self: MutBorrow.t t_List_T) =
    inv_List_T self.current /\ inv_List_T self.final
  
  meta "rewrite_def" predicate invariant_ref_List_T
  
  predicate inv_ref_List_T [@inline:trivial] (_1: MutBorrow.t t_List_T) = invariant_ref_List_T _1
  
  meta "rewrite_def" predicate inv_ref_List_T
  
  predicate resolve_ref_List_T [@inline:trivial] (_1: MutBorrow.t t_List_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_List_T
  
  let rec new_unit (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  function seq_map_PtrOwn_Cell_T (s: Seq.seq t_PtrOwn_Cell_T) (f: Map.map t_PtrOwn_Cell_T t_T) : Seq.seq t_T =
    Seq.create (Seq.length s) (fun (i: int) -> Map.get f (Seq.get s i))
  
  function view_List_T (self: t_List_T) : Seq.seq t_T =
    seq_map_PtrOwn_Cell_T self.seq (fun (ptr_own: t_PtrOwn_Cell_T) -> (val_Cell_T ptr_own).v)
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec push_back_T (self: MutBorrow.t t_List_T) (x: t_T) (return (x'0: ())) =
    {[@expl:push_back 'self' type invariant] inv_ref_List_T self}
    {[@expl:push_back 'x' type invariant] inv_T x}
    (! bb0
    [ bb0 = s0 [ s0 = null_Cell_T (fun (_ret: Opaque.ptr) -> [ &_7 <- _ret ] s1) | s1 = bb1 ]
    | bb1 = s0 [ s0 = [ &_5 <- { v = x; next = _7 } ] s1 | s1 = bb2 ]
    | bb2 = s0 [ s0 = [ &cell <- _5 ] s1 | s1 = bb3 ]
    | bb3 = s0
      [ s0 = from_box_Cell_T {cell} (fun (_ret: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T) -> [ &_10 <- _ret ] s1)
      | s1 = bb4 ]
    | bb4 = s0
      [ s0 = [ &cell_ptr <- _10.f0 ] s1
      | s1 = [ &cell_own <- _10.f1 ] s2
      | s2 = is_null_Cell_T {self.current.last} (fun (_ret: bool) -> [ &_13 <- _ret ] s3)
      | s3 = bb5 ]
    | bb5 = any [ br0 -> {_13 = false} (! bb7) | br1 -> {_13} (! bb6) ]
    | bb6 = s0
      [ s0 = [ &self <- { self with current = { self.current with first = cell_ptr } } ] s1
      | s1 = [ &self <- { self with current = { self.current with last = cell_ptr } } ] s2
      | s2 = bb18 ]
    | bb7 = s0
      [ s0 = [ &_19 <- self.current.last ] s1
      | s1 = deref_Ghost_Seq_PtrOwn_Cell_T {self.current.seq}
          (fun (_ret: Seq.seq t_PtrOwn_Cell_T) -> [ &_27 <- _ret ] s2)
      | s2 = bb8 ]
    | bb8 = s0 [ s0 = len_ghost_PtrOwn_Cell_T {_27} (fun (_ret: int) -> [ &_25 <- _ret ] s1) | s1 = bb9 ]
    | bb9 = s0 [ s0 = new {(1: Int128.t)} (fun (_ret: int) -> [ &_30 <- _ret ] s1) | s1 = bb10 ]
    | bb10 = s0 [ s0 = into_inner_Int {_30} (fun (_ret: int) -> [ &_29 <- _ret ] s1) | s1 = bb11 ]
    | bb11 = s0 [ s0 = sub_Int {_25} {_29} (fun (_ret: int) -> [ &off <- _ret ] s1) | s1 = bb12 ]
    | bb12 = s0
      [ s0 = {inv_Ghost_Seq_PtrOwn_Cell_T self.current.seq}
        MutBorrow.borrow_mut <Seq.seq t_PtrOwn_Cell_T> {self.current.seq}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) ->
            [ &_35 <- _ret ] -{inv_Ghost_Seq_PtrOwn_Cell_T _ret.final}-
            [ &self <- { self with current = { self.current with seq = _ret.final } } ] s1)
      | s1 = deref_mut_Ghost_Seq_PtrOwn_Cell_T {_35}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) -> [ &_34 <- _ret ] s2)
      | s2 = bb13 ]
    | bb13 = s0
      [ s0 = {inv_Seq_PtrOwn_Cell_T _34.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn_Cell_T> {_34.current} {MutBorrow.get_id _34}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) ->
            [ &_33 <- _ret ] -{inv_Seq_PtrOwn_Cell_T _ret.final}-
            [ &_34 <- { _34 with current = _ret.final } ] s1)
      | s1 = get_mut_ghost_PtrOwn_Cell_T {_33} {off} (fun (_ret: t_Option_ref_PtrOwn_Cell_T) -> [ &_32 <- _ret ] s2)
      | s2 = bb14 ]
    | bb14 = s0
      [ s0 = unwrap_ref_PtrOwn_Cell_T {_32} (fun (_ret: MutBorrow.t t_PtrOwn_Cell_T) -> [ &_31 <- _ret ] s1)
      | s1 = bb15 ]
    | bb15 = s0
      [ s0 = {inv_PtrOwn_Cell_T _31.current}
        MutBorrow.borrow_final <t_PtrOwn_Cell_T> {_31.current} {MutBorrow.get_id _31}
          (fun (_ret: MutBorrow.t t_PtrOwn_Cell_T) ->
            [ &_23 <- _ret ] -{inv_PtrOwn_Cell_T _ret.final}-
            [ &_31 <- { _31 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv_ref_Seq_PtrOwn_Cell_T'0 _34} s2
      | s2 = -{resolve_ref_Seq_PtrOwn_Cell_T _34}- s3
      | s3 = {[@expl:type invariant] inv_ref_PtrOwn_Cell_T _31} s4
      | s4 = -{resolve_ref_PtrOwn_Cell_T _31}- s5
      | s5 = {inv_PtrOwn_Cell_T _23.current}
        MutBorrow.borrow_final <t_PtrOwn_Cell_T> {_23.current} {MutBorrow.get_id _23}
          (fun (_ret: MutBorrow.t t_PtrOwn_Cell_T) ->
            [ &_22 <- _ret ] -{inv_PtrOwn_Cell_T _ret.final}-
            [ &_23 <- { _23 with current = _ret.final } ] s6)
      | s6 = new_ref_PtrOwn_Cell_T {_22} (fun (_ret: MutBorrow.t t_PtrOwn_Cell_T) -> [ &_21 <- _ret ] s7)
      | s7 = bb16 ]
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv_ref_PtrOwn_Cell_T _23} s1
      | s1 = -{resolve_ref_PtrOwn_Cell_T _23}- s2
      | s2 = as_mut_Cell_T {_19} {_21} (fun (_ret: MutBorrow.t t_Cell_T) -> [ &_18 <- _ret ] s3)
      | s3 = bb17 ]
    | bb17 = s0
      [ s0 = {inv_Cell_T _18.current}
        MutBorrow.borrow_final <t_Cell_T> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t t_Cell_T) ->
            [ &cell_last <- _ret ] -{inv_Cell_T _ret.final}-
            [ &_18 <- { _18 with current = _ret.final } ] s1)
      | s1 = {[@expl:type invariant] inv_ref_Cell_T'0 _18} s2
      | s2 = -{resolve_ref_Cell_T _18}- s3
      | s3 = [ &cell_last <- { cell_last with current = { cell_last.current with next = cell_ptr } } ] s4
      | s4 = {[@expl:type invariant] inv_ref_Cell_T'0 cell_last} s5
      | s5 = -{resolve_ref_Cell_T cell_last}- s6
      | s6 = [ &self <- { self with current = { self.current with last = cell_ptr } } ] s7
      | s7 = bb18 ]
    | bb18 = s0
      [ s0 = {inv_Ghost_Seq_PtrOwn_Cell_T self.current.seq}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn_Cell_T> {self.current.seq}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) ->
            [ &_43 <- _ret ] -{inv_Ghost_Seq_PtrOwn_Cell_T _ret.final}-
            [ &self <- { self with current = { self.current with seq = _ret.final } } ] s1)
      | s1 = deref_mut_Ghost_Seq_PtrOwn_Cell_T {_43}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) -> [ &_42 <- _ret ] s2)
      | s2 = bb19 ]
    | bb19 = s0
      [ s0 = into_inner_PtrOwn_Cell_T {cell_own} (fun (_ret: t_PtrOwn_Cell_T) -> [ &_44 <- _ret ] s1) | s1 = bb20 ]
    | bb20 = s0
      [ s0 = {inv_Seq_PtrOwn_Cell_T _42.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn_Cell_T> {_42.current} {MutBorrow.get_id _42}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) ->
            [ &_41 <- _ret ] -{inv_Seq_PtrOwn_Cell_T _ret.final}-
            [ &_42 <- { _42 with current = _ret.final } ] s1)
      | s1 = push_back_ghost_PtrOwn_Cell_T {_41} {_44} (fun (_ret: ()) -> [ &_40 <- _ret ] s2)
      | s2 = bb21 ]
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Seq_PtrOwn_Cell_T'0 _42} s1
      | s1 = -{resolve_ref_Seq_PtrOwn_Cell_T _42}- s2
      | s2 = {[@expl:type invariant] inv_ref_List_T self} s3
      | s3 = -{resolve_ref_List_T self}- s4
      | s4 = new_unit {_40} (fun (_ret: ()) -> [ &_39 <- _ret ] s5)
      | s5 = bb24 ]
    | bb24 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_List_T = self
    | & x: t_T = x
    | & cell: t_Cell_T = Any.any_l ()
    | & _5: t_Cell_T = Any.any_l ()
    | & _7: Opaque.ptr = Any.any_l ()
    | & cell_ptr: Opaque.ptr = Any.any_l ()
    | & cell_own: t_PtrOwn_Cell_T = Any.any_l ()
    | & _10: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T = Any.any_l ()
    | & _13: bool = Any.any_l ()
    | & cell_last: MutBorrow.t t_Cell_T = Any.any_l ()
    | & _18: MutBorrow.t t_Cell_T = Any.any_l ()
    | & _19: Opaque.ptr = Any.any_l ()
    | & _21: MutBorrow.t t_PtrOwn_Cell_T = Any.any_l ()
    | & _22: MutBorrow.t t_PtrOwn_Cell_T = Any.any_l ()
    | & _23: MutBorrow.t t_PtrOwn_Cell_T = Any.any_l ()
    | & off: int = Any.any_l ()
    | & _25: int = Any.any_l ()
    | & _27: Seq.seq t_PtrOwn_Cell_T = Any.any_l ()
    | & _29: int = Any.any_l ()
    | & _30: int = Any.any_l ()
    | & _31: MutBorrow.t t_PtrOwn_Cell_T = Any.any_l ()
    | & _32: t_Option_ref_PtrOwn_Cell_T = Any.any_l ()
    | & _33: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _34: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _35: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _39: () = Any.any_l ()
    | & _40: () = Any.any_l ()
    | & _41: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _42: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _43: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _44: t_PtrOwn_Cell_T = Any.any_l () ])
    [ return (result: ()) -> {[@expl:push_back ensures] view_List_T self.final = Seq.snoc (view_List_T self.current) x}
      (! return {result}) ]
end
module M_impl_List_T__push_front (* List<T> *)
  use creusot.prelude.Opaque
  use seq.Seq
  use creusot.prelude.Ptr
  use creusot.int.UInt64
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  use map.Map
  
  type t_PtrOwn_Cell_T
  
  type t_List_T = { first: Opaque.ptr; last: Opaque.ptr; seq: Seq.seq t_PtrOwn_Cell_T }
  
  type t_T
  
  type t_Cell_T = { v: t_T; next: Opaque.ptr }
  
  type tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T = { f0: Opaque.ptr; f1: t_PtrOwn_Cell_T }
  
  predicate inv_T (_1: t_T)
  
  predicate inv_Cell_T (_1: t_Cell_T)
  
  axiom inv_axiom [@rewrite]: forall x: t_Cell_T [inv_Cell_T x]. inv_Cell_T x = inv_T x.v
  
  predicate is_null_ptr_Cell_T (self: Opaque.ptr) = Ptr.addr_logic_u64 self = (0: UInt64.t)
  
  function ptr_Cell_T (self: t_PtrOwn_Cell_T) : Opaque.ptr
  
  predicate metadata_matches_Cell_T [@inline:trivial] (_value: t_Cell_T) (_metadata: ()) = true
  
  meta "rewrite_def" predicate metadata_matches_Cell_T
  
  function val_Cell_T (self: t_PtrOwn_Cell_T) : t_Cell_T
  
  function metadata_Cell_T (_1: Opaque.ptr) : ()
  
  predicate invariant_ref_Cell_T [@inline:trivial] (self: t_Cell_T) = inv_Cell_T self
  
  meta "rewrite_def" predicate invariant_ref_Cell_T
  
  predicate inv_ref_Cell_T [@inline:trivial] (_1: t_Cell_T) = invariant_ref_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Cell_T
  
  predicate invariant_PtrOwn_Cell_T (self: t_PtrOwn_Cell_T) =
    not is_null_ptr_Cell_T (ptr_Cell_T self)
    /\ metadata_matches_Cell_T (val_Cell_T self) (metadata_Cell_T (ptr_Cell_T self)) /\ inv_ref_Cell_T (val_Cell_T self)
  
  predicate inv_PtrOwn_Cell_T (_1: t_PtrOwn_Cell_T)
  
  axiom inv_axiom'0 [@rewrite]: forall x: t_PtrOwn_Cell_T [inv_PtrOwn_Cell_T x]. inv_PtrOwn_Cell_T x
      = invariant_PtrOwn_Cell_T x
  
  predicate invariant_Ghost_PtrOwn_Cell_T [@inline:trivial] (self: t_PtrOwn_Cell_T) = inv_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_Ghost_PtrOwn_Cell_T
  
  predicate inv_Ghost_PtrOwn_Cell_T [@inline:trivial] (_1: t_PtrOwn_Cell_T) = invariant_Ghost_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Ghost_PtrOwn_Cell_T
  
  predicate inv_tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T [@inline:trivial] (_1: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T) =
    inv_Ghost_PtrOwn_Cell_T _1.f1
  
  meta "rewrite_def" predicate inv_tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T
  
  let rec new_Cell_T (v'0: t_Cell_T) (return (x: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T)) =
    {[@expl:new 'v' type invariant] inv_Cell_T v'0}
    any
    [ return (result: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T) -> {inv_tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T result}
      {ptr_Cell_T result.f1 = result.f0 /\ val_Cell_T result.f1 = v'0}
      (! return {result}) ]
  
  let rec is_null_Cell_T (self_: Opaque.ptr) (return (x: bool)) = any
    [ return (result: bool) -> {result = is_null_ptr_Cell_T self_} (! return {result}) ]
  
  predicate invariant_Box_PtrOwn_Cell_T_Global (self: t_PtrOwn_Cell_T) = inv_PtrOwn_Cell_T self
  
  predicate inv_Box_PtrOwn_Cell_T_Global [@inline:trivial] (_1: t_PtrOwn_Cell_T) = invariant_Box_PtrOwn_Cell_T_Global _1
  
  meta "rewrite_def" predicate inv_Box_PtrOwn_Cell_T_Global
  
  predicate invariant_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    forall i: int. 0 <= i /\ i < Seq.length self -> inv_Box_PtrOwn_Cell_T_Global (Seq.get self i)
  
  meta "rewrite_def" predicate invariant_Seq_PtrOwn_Cell_T
  
  predicate inv_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) = invariant_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Seq_PtrOwn_Cell_T
  
  predicate invariant_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) =
    inv_Seq_PtrOwn_Cell_T self
  
  meta "rewrite_def" predicate invariant_Ghost_Seq_PtrOwn_Cell_T
  
  predicate inv_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: Seq.seq t_PtrOwn_Cell_T) =
    invariant_Ghost_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_Ghost_Seq_PtrOwn_Cell_T
  
  predicate invariant_ref_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    inv_Ghost_Seq_PtrOwn_Cell_T self.current /\ inv_Ghost_Seq_PtrOwn_Cell_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Ghost_Seq_PtrOwn_Cell_T
  
  predicate inv_ref_Ghost_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    invariant_ref_Ghost_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Ghost_Seq_PtrOwn_Cell_T
  
  predicate invariant_ref_Seq_PtrOwn_Cell_T [@inline:trivial] (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    inv_Seq_PtrOwn_Cell_T self.current /\ inv_Seq_PtrOwn_Cell_T self.final
  
  meta "rewrite_def" predicate invariant_ref_Seq_PtrOwn_Cell_T
  
  predicate inv_ref_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    invariant_ref_Seq_PtrOwn_Cell_T _1
  
  meta "rewrite_def" predicate inv_ref_Seq_PtrOwn_Cell_T
  
  let rec deref_mut_Ghost_Seq_PtrOwn_Cell_T (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T))
    (return (x: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T))) =
    {[@expl:deref_mut 'self' type invariant] inv_ref_Ghost_Seq_PtrOwn_Cell_T self}
    any
    [ return (result: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) -> {inv_ref_Seq_PtrOwn_Cell_T result}
      {result = self}
      (! return {result}) ]
  
  let rec into_inner_PtrOwn_Cell_T (self: t_PtrOwn_Cell_T) (return (x: t_PtrOwn_Cell_T)) =
    {[@expl:into_inner 'self' type invariant] inv_Ghost_PtrOwn_Cell_T self}
    any [ return (result: t_PtrOwn_Cell_T) -> {inv_PtrOwn_Cell_T result} {result = self} (! return {result}) ]
  
  function push_front_PtrOwn_Cell_T [@inline:trivial] (self: Seq.seq t_PtrOwn_Cell_T) (x: t_PtrOwn_Cell_T) : Seq.seq t_PtrOwn_Cell_T
   = Seq.cons x self
  
  meta "rewrite_def" function push_front_PtrOwn_Cell_T
  
  let rec push_front_ghost_PtrOwn_Cell_T (self: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) (x: t_PtrOwn_Cell_T)
    (return (x'0: ())) = {[@expl:push_front_ghost 'self' type invariant] inv_ref_Seq_PtrOwn_Cell_T self}
    {[@expl:push_front_ghost 'x' type invariant] inv_PtrOwn_Cell_T x}
    any [ return (result: ()) -> {self.final = push_front_PtrOwn_Cell_T self.current x} (! return {result}) ]
  
  predicate resolve_ref_Seq_PtrOwn_Cell_T [@inline:trivial] (_1: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) =
    _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_Seq_PtrOwn_Cell_T
  
  predicate invariant_List_T (self: t_List_T) =
    self.seq = (Seq.empty: Seq.seq t_PtrOwn_Cell_T) /\ is_null_ptr_Cell_T self.first /\ is_null_ptr_Cell_T self.last
    \/ Seq.length self.seq > 0
    /\ self.first = ptr_Cell_T (Seq.get self.seq 0)
    /\ self.last = ptr_Cell_T (Seq.get self.seq (Seq.length self.seq - 1))
    /\ (forall i: int. 0 <= i /\ i < Seq.length self.seq - 1
        -> (val_Cell_T (Seq.get self.seq i)).next = ptr_Cell_T (Seq.get self.seq (i + 1)))
    /\ is_null_ptr_Cell_T (val_Cell_T (Seq.get self.seq (Seq.length self.seq - 1))).next
  
  predicate inv_List_T (_1: t_List_T)
  
  axiom inv_axiom'1 [@rewrite]: forall x: t_List_T [inv_List_T x]. inv_List_T x
      = (invariant_List_T x /\ inv_Ghost_Seq_PtrOwn_Cell_T x.seq)
  
  predicate invariant_ref_List_T [@inline:trivial] (self: MutBorrow.t t_List_T) =
    inv_List_T self.current /\ inv_List_T self.final
  
  meta "rewrite_def" predicate invariant_ref_List_T
  
  predicate inv_ref_List_T [@inline:trivial] (_1: MutBorrow.t t_List_T) = invariant_ref_List_T _1
  
  meta "rewrite_def" predicate inv_ref_List_T
  
  predicate resolve_ref_List_T [@inline:trivial] (_1: MutBorrow.t t_List_T) = _1.final = _1.current
  
  meta "rewrite_def" predicate resolve_ref_List_T
  
  let rec new_unit (x: ()) (return (x'0: ())) = any [ return (result: ()) -> {result = x} (! return {result}) ]
  
  function seq_map_PtrOwn_Cell_T (s: Seq.seq t_PtrOwn_Cell_T) (f: Map.map t_PtrOwn_Cell_T t_T) : Seq.seq t_T =
    Seq.create (Seq.length s) (fun (i: int) -> Map.get f (Seq.get s i))
  
  function view_List_T (self: t_List_T) : Seq.seq t_T =
    seq_map_PtrOwn_Cell_T self.seq (fun (ptr_own: t_PtrOwn_Cell_T) -> (val_Cell_T ptr_own).v)
  
  function push_front_T [@inline:trivial] (self: Seq.seq t_T) (x: t_T) : Seq.seq t_T = Seq.cons x self
  
  meta "rewrite_def" function push_front_T
  
  meta "compute_max_steps" 1000000
  
  meta "select_lsinst" "all"
  
  let rec push_front_T'0 (self: MutBorrow.t t_List_T) (x: t_T) (return (x'0: ())) =
    {[@expl:push_front 'self' type invariant] inv_ref_List_T self}
    {[@expl:push_front 'x' type invariant] inv_T x}
    (! bb0
    [ bb0 = s0 [ s0 = [ &_7 <- { v = x; next = self.current.first } ] s1 | s1 = bb1 ]
    | bb1 = s0
      [ s0 = new_Cell_T {_7} (fun (_ret: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T) -> [ &_6 <- _ret ] s1) | s1 = bb2 ]
    | bb2 = s0
      [ s0 = [ &cell_ptr <- _6.f0 ] s1
      | s1 = [ &cell_own <- _6.f1 ] s2
      | s2 = [ &self <- { self with current = { self.current with first = cell_ptr } } ] s3
      | s3 = is_null_Cell_T {self.current.last} (fun (_ret: bool) -> [ &_12 <- _ret ] s4)
      | s4 = bb3 ]
    | bb3 = any [ br0 -> {_12 = false} (! bb6) | br1 -> {_12} (! bb4) ]
    | bb4 = s0 [ s0 = [ &self <- { self with current = { self.current with last = cell_ptr } } ] s1 | s1 = bb6 ]
    | bb6 = s0
      [ s0 = {inv_Ghost_Seq_PtrOwn_Cell_T self.current.seq}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn_Cell_T> {self.current.seq}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) ->
            [ &_19 <- _ret ] -{inv_Ghost_Seq_PtrOwn_Cell_T _ret.final}-
            [ &self <- { self with current = { self.current with seq = _ret.final } } ] s1)
      | s1 = deref_mut_Ghost_Seq_PtrOwn_Cell_T {_19}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) -> [ &_18 <- _ret ] s2)
      | s2 = bb7 ]
    | bb7 = s0
      [ s0 = into_inner_PtrOwn_Cell_T {cell_own} (fun (_ret: t_PtrOwn_Cell_T) -> [ &_20 <- _ret ] s1) | s1 = bb8 ]
    | bb8 = s0
      [ s0 = {inv_Seq_PtrOwn_Cell_T _18.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn_Cell_T> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T)) ->
            [ &_17 <- _ret ] -{inv_Seq_PtrOwn_Cell_T _ret.final}-
            [ &_18 <- { _18 with current = _ret.final } ] s1)
      | s1 = push_front_ghost_PtrOwn_Cell_T {_17} {_20} (fun (_ret: ()) -> [ &_16 <- _ret ] s2)
      | s2 = bb9 ]
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv_ref_Seq_PtrOwn_Cell_T _18} s1
      | s1 = -{resolve_ref_Seq_PtrOwn_Cell_T _18}- s2
      | s2 = {[@expl:type invariant] inv_ref_List_T self} s3
      | s3 = -{resolve_ref_List_T self}- s4
      | s4 = new_unit {_16} (fun (_ret: ()) -> [ &_15 <- _ret ] s5)
      | s5 = bb11 ]
    | bb11 = return {_0} ]
    [ & _0: () = Any.any_l ()
    | & self: MutBorrow.t t_List_T = self
    | & x: t_T = x
    | & cell_ptr: Opaque.ptr = Any.any_l ()
    | & cell_own: t_PtrOwn_Cell_T = Any.any_l ()
    | & _6: tup2_ptr_Cell_T_Ghost_PtrOwn_Cell_T = Any.any_l ()
    | & _7: t_Cell_T = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _15: () = Any.any_l ()
    | & _16: () = Any.any_l ()
    | & _17: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _18: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _19: MutBorrow.t (Seq.seq t_PtrOwn_Cell_T) = Any.any_l ()
    | & _20: t_PtrOwn_Cell_T = Any.any_l () ])
    [ return (result: ()) -> {[@expl:push_front ensures] view_List_T self.final
      = push_front_T (view_List_T self.current) x}
      (! return {result}) ]
end
