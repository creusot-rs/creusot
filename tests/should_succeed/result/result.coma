module M_result__test_result [#"result.rs" 3 0 3 20]
  let%span sresult = "result.rs" 4 38 4 39
  let%span sresult'0 = "result.rs" 5 40 5 42
  let%span sresult'1 = "result.rs" 13 32 13 33
  let%span sresult'2 = "result.rs" 17 34 17 36
  let%span sresult'3 = "result.rs" 20 37 20 38
  let%span sresult'4 = "result.rs" 21 42 21 44
  let%span sresult'5 = "result.rs" 23 28 23 29
  let%span sresult'6 = "result.rs" 24 27 24 28
  let%span sresult'7 = "result.rs" 25 28 25 29
  let%span sresult'8 = "result.rs" 26 27 26 28
  let%span sresult'9 = "result.rs" 27 33 27 34
  let%span sresult'10 = "result.rs" 28 32 28 33
  let%span sresult'11 = "result.rs" 29 33 29 35
  let%span sresult'12 = "result.rs" 30 32 30 34
  let%span sresult'13 = "result.rs" 33 27 33 28
  let%span sresult'14 = "result.rs" 37 32 37 34
  let%span sresult'15 = "result.rs" 40 25 40 26
  let%span sresult'16 = "result.rs" 40 31 40 32
  let%span sresult'17 = "result.rs" 41 26 41 27
  let%span sresult'18 = "result.rs" 41 32 41 33
  let%span sresult'19 = "result.rs" 43 38 43 39
  let%span sresult'20 = "result.rs" 44 39 44 40
  let%span sresult'21 = "result.rs" 47 30 47 32
  let%span sresult'22 = "result.rs" 47 51 47 53
  let%span sresult'23 = "result.rs" 48 22 48 23
  let%span sresult'24 = "result.rs" 48 38 48 39
  let%span sresult'25 = "result.rs" 49 31 49 33
  let%span sresult'26 = "result.rs" 49 52 49 54
  let%span sresult'27 = "result.rs" 50 23 50 24
  let%span sresult'28 = "result.rs" 50 43 50 45
  let%span sresult'29 = "result.rs" 53 22 53 24
  let%span sresult'30 = "result.rs" 53 39 53 40
  let%span sresult'31 = "result.rs" 54 28 54 29
  let%span sresult'32 = "result.rs" 54 44 54 45
  let%span sresult'33 = "result.rs" 55 23 55 25
  let%span sresult'34 = "result.rs" 55 44 55 46
  let%span sresult'35 = "result.rs" 56 29 56 30
  let%span sresult'36 = "result.rs" 56 45 56 46
  let%span sresult'37 = "result.rs" 59 45 59 46
  let%span sresult'38 = "result.rs" 60 51 60 53
  let%span sresult'39 = "result.rs" 61 45 61 46
  let%span sresult'40 = "result.rs" 62 51 62 53
  let%span sresult'41 = "result.rs" 64 45 64 46
  let%span sresult'42 = "result.rs" 65 51 65 53
  let%span sresult'43 = "result.rs" 66 45 66 46
  let%span sresult'44 = "result.rs" 67 51 67 53
  let%span sresult'45 = "result.rs" 72 48 72 49
  let%span sresult'46 = "result.rs" 73 49 73 50
  let%span sresult'47 = "result.rs" 74 44 74 46
  let%span sresult'48 = "result.rs" 75 53 75 55
  let%span sresult'49 = "result.rs" 75 4 75 56
  let%span sresult'50 = "result.rs" 73 4 73 51
  let%span sresult'51 = "result.rs" 71 4 71 38
  let%span sresult'52 = "result.rs" 67 4 67 54
  let%span sresult'53 = "result.rs" 66 4 66 47
  let%span sresult'54 = "result.rs" 65 4 65 54
  let%span sresult'55 = "result.rs" 64 4 64 47
  let%span sresult'56 = "result.rs" 62 4 62 54
  let%span sresult'57 = "result.rs" 61 4 61 47
  let%span sresult'58 = "result.rs" 60 4 60 54
  let%span sresult'59 = "result.rs" 59 4 59 47
  let%span sresult'60 = "result.rs" 56 4 56 47
  let%span sresult'61 = "result.rs" 55 4 55 47
  let%span sresult'62 = "result.rs" 54 4 54 46
  let%span sresult'63 = "result.rs" 53 4 53 41
  let%span sresult'64 = "result.rs" 50 4 50 46
  let%span sresult'65 = "result.rs" 49 4 49 55
  let%span sresult'66 = "result.rs" 48 4 48 40
  let%span sresult'67 = "result.rs" 47 4 47 54
  let%span sresult'68 = "result.rs" 44 4 44 41
  let%span sresult'69 = "result.rs" 43 4 43 40
  let%span sresult'70 = "result.rs" 41 4 41 34
  let%span sresult'71 = "result.rs" 40 4 40 33
  let%span sresult'72 = "result.rs" 37 4 37 35
  let%span sresult'73 = "result.rs" 33 4 33 29
  let%span sresult'74 = "result.rs" 30 4 30 35
  let%span sresult'75 = "result.rs" 28 4 28 34
  let%span sresult'76 = "result.rs" 26 4 26 29
  let%span sresult'77 = "result.rs" 24 4 24 29
  let%span sresult'78 = "result.rs" 21 4 21 45
  let%span sresult'79 = "result.rs" 20 4 20 39
  let%span sresult'80 = "result.rs" 17 4 17 37
  let%span sresult'81 = "result.rs" 16 4 16 31
  let%span sresult'82 = "result.rs" 14 4 14 31
  let%span sresult'83 = "result.rs" 13 4 13 34
  let%span sresult'84 = "result.rs" 10 4 10 41
  let%span sresult'85 = "result.rs" 8 4 8 39
  let%span sresult'86 = "../../../creusot-contracts/src/std/result.rs" 23 26 23 63
  let%span sresult'87 = "../../../creusot-contracts/src/std/result.rs" 27 26 27 64
  let%span sresult'88 = "../../../creusot-contracts/src/std/result.rs" 31 26 31 74
  let%span sresult'89 = "../../../creusot-contracts/src/std/result.rs" 32 26 32 74
  let%span sresult'90 = "../../../creusot-contracts/src/std/result.rs" 36 26 36 73
  let%span sresult'91 = "../../../creusot-contracts/src/std/result.rs" 37 26 37 75
  let%span sresult'92 = "../../../creusot-contracts/src/std/result.rs" 41 26 41 75
  let%span sresult'93 = "../../../creusot-contracts/src/std/result.rs" 42 26 42 77
  let%span sresult'94 = "../../../creusot-contracts/src/std/result.rs" 53 27 53 53
  let%span sresult'95 = "../../../creusot-contracts/src/std/result.rs" 54 26 54 44
  let%span sresult'96 = "../../../creusot-contracts/src/std/result.rs" 67 27 67 54
  let%span sresult'97 = "../../../creusot-contracts/src/std/result.rs" 68 26 68 45
  let%span sresult'98 = "../../../creusot-contracts/src/std/result.rs" 47 20 48 94
  let%span sresult'99 = "../../../creusot-contracts/src/std/result.rs" 74 26 74 68
  let%span sresult'100 = "../../../creusot-contracts/src/std/result.rs" 75 26 75 77
  let%span sresult'101 = "../../../creusot-contracts/src/std/result.rs" 79 26 79 68
  let%span sresult'102 = "../../../creusot-contracts/src/std/result.rs" 80 26 80 96
  let%span sresult'103 = "../../../creusot-contracts/src/std/result.rs" 86 26 86 72
  let%span sresult'104 = "../../../creusot-contracts/src/std/result.rs" 87 26 87 74
  let%span sresult'105 = "../../../creusot-contracts/src/std/result.rs" 91 26 91 72
  let%span sresult'106 = "../../../creusot-contracts/src/std/result.rs" 92 26 92 73
  let%span sresult'107 = "../../../creusot-contracts/src/std/result.rs" 98 26 98 74
  let%span sresult'108 = "../../../creusot-contracts/src/std/result.rs" 99 26 99 74
  let%span sresult'109 = "../../../creusot-contracts/src/std/result.rs" 113 26 113 93
  let%span sresult'110 = "../../../creusot-contracts/src/std/result.rs" 114 26 114 74
  let%span sresult'111 = "../../../creusot-contracts/src/std/result.rs" 104 26 104 74
  let%span sresult'112 = "../../../creusot-contracts/src/std/result.rs" 105 26 105 74
  let%span sresult'113 = "../../../creusot-contracts/src/std/result.rs" 119 26 119 93
  let%span sresult'114 = "../../../creusot-contracts/src/std/result.rs" 120 26 120 74
  let%span sresult'115 = "../../../creusot-contracts/src/std/result.rs" 128 26 128 61
  let%span sresult'116 = "../../../creusot-contracts/src/std/result.rs" 129 26 129 84
  let%span sresult'117 = "../../../creusot-contracts/src/std/result.rs" 130 26 130 80
  let%span soption = "../../../creusot-contracts/src/std/option.rs" 153 27 153 39
  let%span soption'0 = "../../../creusot-contracts/src/std/option.rs" 154 26 154 46
  let%span soption'1 = "../../../creusot-contracts/src/std/option.rs" 82 26 82 51
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 49 20 49 34
  let%span snum = "../../../creusot-contracts/src/std/num.rs" 30 26 30 41
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 158 14 158 114
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 163 14 163 101
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 168 14 168 61
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 122 15 122 59
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 123 14 123 38
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 33
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 15 133 31
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 134 15 134 28
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 135 14 135 30
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 140 14 141 105
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Result  =
    | C_Ok Int32.t
    | C_Err Int32.t
  
  let rec is_ok (self_:t_Result) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sresult'86] result = (exists t: Int32.t. self_ = C_Ok t)} (! return' {result}) ]
  
  
  let rec is_err (self_:t_Result) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#sresult'87] result = (exists e: Int32.t. self_ = C_Err e)} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some Int32.t
  
  let rec ok (self_:t_Result) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sresult'88] forall t: Int32.t. self_ = C_Ok t  -> result = C_Some t}
      {[%#sresult'89] (exists e: Int32.t. self_ = C_Err e)  -> result = C_None}
      (! return' {result}) ]
  
  
  let rec unwrap (self_:t_Option) (return'  (x:Int32.t))= {[@expl:unwrap requires] [%#soption] self_ <> C_None}
    any [ return''0 (result:Int32.t)-> {[%#soption'0] C_Some result = self_} (! return' {result}) ] 
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption'1] result = (self_ = C_None)} (! return' {result}) ]
  
  
  let rec err (self_:t_Result) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sresult'90] (exists t: Int32.t. self_ = C_Ok t)  -> result = C_None}
      {[%#sresult'91] forall e: Int32.t. self_ = C_Err e  -> result = C_Some e}
      (! return' {result}) ]
  
  
  type t_Result'0  =
    | C_Ok'0 Int32.t
    | C_Err'0 Int32.t
  
  let rec as_ref (self_:t_Result) (return'  (x:t_Result'0))= any
    [ return''0 (result:t_Result'0)-> {[%#sresult'92] forall t: Int32.t. self_ = C_Ok t  -> result = C_Ok'0 t}
      {[%#sresult'93] forall e: Int32.t. self_ = C_Err e  -> result = C_Err'0 e}
      (! return' {result}) ]
  
  
  let rec unwrap'0 (self_:t_Result'0) (return'  (x:Int32.t))= {[@expl:unwrap requires] [%#sresult'94] exists t: Int32.t. self_
    = C_Ok'0 t}
    any [ return''0 (result:Int32.t)-> {[%#sresult'95] C_Ok'0 result = self_} (! return' {result}) ] 
  
  let rec unwrap_err (self_:t_Result'0) (return'  (x:Int32.t))= {[@expl:unwrap_err requires] [%#sresult'96] exists e: Int32.t. self_
    = C_Err'0 e}
    any [ return''0 (result:Int32.t)-> {[%#sresult'97] C_Err'0 result = self_} (! return' {result}) ] 
  
  type t_Result'1  =
    | C_Ok'1 (MutBorrow.t Int32.t)
    | C_Err'1 (MutBorrow.t Int32.t)
  
  let rec as_mut (self_:MutBorrow.t t_Result) (return'  (x:t_Result'1))= any
    [ return''0 (result:t_Result'1)-> {[%#sresult'98] exists t: MutBorrow.t Int32.t. self_.current = C_Ok (t.current)
      /\ self_.final = C_Ok (t.final) /\ result = C_Ok'1 t
      \/ (exists e: MutBorrow.t Int32.t. self_.current = C_Err (e.current)
      /\ self_.final = C_Err (e.final) /\ result = C_Err'1 e)}
      (! return' {result}) ]
  
  
  let rec unwrap'1 (self_:t_Result'1) (return'  (x:MutBorrow.t Int32.t))= {[@expl:unwrap requires] [%#sresult'94] exists t: MutBorrow.t Int32.t. self_
    = C_Ok'1 t}
    any [ return''0 (result:MutBorrow.t Int32.t)-> {[%#sresult'95] C_Ok'1 result = self_} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t Int32.t) =
    resolve _0
  
  let rec unwrap'2 (self_:t_Result) (return'  (x:Int32.t))= {[@expl:unwrap requires] [%#sresult'94] exists t: Int32.t. self_
    = C_Ok t}
    any [ return''0 (result:Int32.t)-> {[%#sresult'95] C_Ok result = self_} (! return' {result}) ] 
  
  let rec unwrap_err'0 (self_:t_Result'1) (return'  (x:MutBorrow.t Int32.t))= {[@expl:unwrap_err requires] [%#sresult'96] exists e: MutBorrow.t Int32.t. self_
    = C_Err'1 e}
    any [ return''0 (result:MutBorrow.t Int32.t)-> {[%#sresult'97] C_Err'1 result = self_} (! return' {result}) ] 
  
  let rec unwrap_err'1 (self_:t_Result) (return'  (x:Int32.t))= {[@expl:unwrap_err requires] [%#sresult'96] exists e: Int32.t. self_
    = C_Err e}
    any [ return''0 (result:Int32.t)-> {[%#sresult'97] C_Err result = self_} (! return' {result}) ] 
  
  let rec unwrap_or (self_:t_Result) (default:Int32.t) (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#sresult'99] forall t: Int32.t. self_ = C_Ok t  -> result = t}
      {[%#sresult'100] (exists e: Int32.t. self_ = C_Err e)  -> result = default}
      (! return' {result}) ]
  
  
  predicate postcondition_once (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  predicate resolve'1 (_0: ()) =
    true
  
  predicate postcondition_mut (self: ()) (args: ()) (result_state: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  function fn_mut_once (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_mut_once_spec: forall self: (), args: (), res: Int32.t. [%#sops'8] postcondition_once self args res
  = (exists res_state: (). postcondition_mut self args res_state res /\ resolve'1 res_state)
  
  predicate hist_inv (self: ()) (result_state: ()) =
    true
  
  function hist_inv_trans (self: ()) (b: ()) (c: ()) : ()
  
  axiom hist_inv_trans_spec: forall self: (), b: (), c: (). ([%#sops'5] hist_inv self b)
   -> ([%#sops'6] hist_inv b c)  -> ([%#sops'7] hist_inv self c)
  
  function hist_inv_refl (self: ()) : ()
  
  axiom hist_inv_refl_spec: forall self: (). [%#sops'4] hist_inv self self
  
  function postcondition_mut_hist_inv (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom postcondition_mut_hist_inv_spec: forall self: (), args: (), res_state: (), res: Int32.t. ([%#sops'2] postcondition_mut self args res_state res)
   -> ([%#sops'3] hist_inv self res_state)
  
  function fn_hist_inv (self: ()) (res_state: ()) : ()
  
  axiom fn_hist_inv_spec: forall self: (), res_state: (). [%#sops'1] hist_inv self res_state = (self = res_state)
  
  predicate postcondition (self: ()) (args: ()) (result: Int32.t) =
    let () = args in result = (0: Int32.t)
  
  function fn_once (self: ()) (args: ()) (res: Int32.t) : ()
  
  axiom fn_once_spec: forall self: (), args: (), res: Int32.t. [%#sops'0] postcondition_once self args res
  = (postcondition self args res /\ resolve'1 self)
  
  function fn_mut (self: ()) (args: ()) (res_state: ()) (res: Int32.t) : ()
  
  axiom fn_mut_spec: forall self: (), args: (), res_state: (), res: Int32.t. [%#sops] postcondition_mut self args res_state res
  = (postcondition self args res /\ self = res_state)
  
  let rec default (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#snum] result = (0: Int32.t)} (! return' {result}) ]
  
  
  let rec unwrap_or_default (self_:t_Result) (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#sresult'101] forall t: Int32.t. self_ = C_Ok t  -> result = t}
      {[%#sresult'102] (exists e: Int32.t. self_ = C_Err e)  -> postcondition () () result}
      (! return' {result}) ]
  
  
  let rec and (self_:t_Result) (res:t_Result) (return'  (x:t_Result))= any
    [ return''0 (result:t_Result)-> {[%#sresult'103] (exists t: Int32.t. self_ = C_Ok t)  -> result = res}
      {[%#sresult'104] forall e: Int32.t. self_ = C_Err e  -> result = C_Err e}
      (! return' {result}) ]
  
  
  let rec or (self_:t_Result) (res:t_Result) (return'  (x:t_Result))= any
    [ return''0 (result:t_Result)-> {[%#sresult'105] forall t: Int32.t. self_ = C_Ok t  -> result = C_Ok t}
      {[%#sresult'106] (exists e: Int32.t. self_ = C_Err e)  -> result = res}
      (! return' {result}) ]
  
  
  type t_Result'2  =
    | C_Ok'2 Int32.t
    | C_Err'2 Int32.t
  
  let rec copied (self_:t_Result'0) (return'  (x:t_Result'2))= any
    [ return''0 (result:t_Result'2)-> {[%#sresult'107] forall t: Int32.t. self_ = C_Ok'0 t  -> result = C_Ok'2 t}
      {[%#sresult'108] forall e: Int32.t. self_ = C_Err'0 e  -> result = C_Err'2 e}
      (! return' {result}) ]
  
  
  let rec unwrap'3 (self_:t_Result'2) (return'  (x:Int32.t))= {[@expl:unwrap requires] [%#sresult'94] exists t: Int32.t. self_
    = C_Ok'2 t}
    any [ return''0 (result:Int32.t)-> {[%#sresult'95] C_Ok'2 result = self_} (! return' {result}) ] 
  
  let rec unwrap_err'2 (self_:t_Result'2) (return'  (x:Int32.t))= {[@expl:unwrap_err requires] [%#sresult'96] exists e: Int32.t. self_
    = C_Err'2 e}
    any [ return''0 (result:Int32.t)-> {[%#sresult'97] C_Err'2 result = self_} (! return' {result}) ] 
  
  type t_Result'3  =
    | C_Ok'3 Int32.t
    | C_Err'3 (MutBorrow.t Int32.t)
  
  let rec copied'0 (self_:t_Result'1) (return'  (x:t_Result'3))= any
    [ return''0 (result:t_Result'3)-> {[%#sresult'109] forall t: MutBorrow.t Int32.t. self_ = C_Ok'1 t
       -> result = C_Ok'3 (t.current) /\ resolve t}
      {[%#sresult'110] forall e: MutBorrow.t Int32.t. self_ = C_Err'1 e  -> result = C_Err'3 e}
      (! return' {result}) ]
  
  
  let rec unwrap'4 (self_:t_Result'3) (return'  (x:Int32.t))= {[@expl:unwrap requires] [%#sresult'94] exists t: Int32.t. self_
    = C_Ok'3 t}
    any [ return''0 (result:Int32.t)-> {[%#sresult'95] C_Ok'3 result = self_} (! return' {result}) ] 
  
  let rec unwrap_err'3 (self_:t_Result'3) (return'  (x:MutBorrow.t Int32.t))= {[@expl:unwrap_err requires] [%#sresult'96] exists e: MutBorrow.t Int32.t. self_
    = C_Err'3 e}
    any [ return''0 (result:MutBorrow.t Int32.t)-> {[%#sresult'97] C_Err'3 result = self_} (! return' {result}) ] 
  
  let rec cloned (self_:t_Result'0) (return'  (x:t_Result'2))= any
    [ return''0 (result:t_Result'2)-> {[%#sresult'111] forall t: Int32.t. self_ = C_Ok'0 t  -> result = C_Ok'2 t}
      {[%#sresult'112] forall e: Int32.t. self_ = C_Err'0 e  -> result = C_Err'2 e}
      (! return' {result}) ]
  
  
  let rec cloned'0 (self_:t_Result'1) (return'  (x:t_Result'3))= any
    [ return''0 (result:t_Result'3)-> {[%#sresult'113] forall t: MutBorrow.t Int32.t. self_ = C_Ok'1 t
       -> result = C_Ok'3 (t.current) /\ resolve t}
      {[%#sresult'114] forall e: MutBorrow.t Int32.t. self_ = C_Err'1 e  -> result = C_Err'3 e}
      (! return' {result}) ]
  
  
  type t_Result'4  =
    | C_Ok'4 t_Option
    | C_Err'4 Int32.t
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_Result
  
  let rec transpose (self_:t_Result'4) (return'  (x:t_Option'0))= any
    [ return''0 (result:t_Option'0)-> {[%#sresult'115] self_ = C_Ok'4 (C_None)  -> result = C_None'0}
      {[%#sresult'116] forall t: Int32.t. self_ = C_Ok'4 (C_Some t)  -> result = C_Some'0 (C_Ok t)}
      {[%#sresult'117] forall e: Int32.t. self_ = C_Err'4 e  -> result = C_Some'0 (C_Err e)}
      (! return' {result}) ]
  
  
  let rec is_none'0 (self_:t_Option'0) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption'1] result = (self_ = C_None'0)} (! return' {result}) ]
  
  
  let rec unwrap'5 (self_:t_Option'0) (return'  (x:t_Result))= {[@expl:unwrap requires] [%#soption] self_ <> C_None'0}
    any [ return''0 (result:t_Result)-> {[%#soption'0] C_Some'0 result = self_} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_result[#"result.rs" 3 0 3 20] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &ok'0 <- C_Ok ([%#sresult] (1: Int32.t)) ] s1
      | s1 =  [ &err'0 <- C_Err ([%#sresult'0] (-1: Int32.t)) ] s2
      | s2 = is_ok {ok'0} (fun (_ret:bool) ->  [ &_4 <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0 [ s0 = is_ok {err'0} (fun (_ret:bool) ->  [ &_6 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ] 
    | bb4 = bb7
    | bb5 = s0 [ s0 = is_err {err'0} (fun (_ret:bool) ->  [ &_10 <- _ret ] s1) | s1 = bb8 ] 
    | bb8 = any [ br0 -> {_10 = false} (! bb13) | br1 -> {_10} (! bb9) ] 
    | bb9 = s0 [ s0 = is_err {ok'0} (fun (_ret:bool) ->  [ &_12 <- _ret ] s1) | s1 = bb10 ] 
    | bb10 = any [ br0 -> {_12 = false} (! bb12) | br1 -> {_12} (! bb11) ] 
    | bb11 = bb14
    | bb12 = s0 [ s0 = ok {ok'0} (fun (_ret:t_Option) ->  [ &_18 <- _ret ] s1) | s1 = bb15 ] 
    | bb15 = s0 [ s0 = unwrap {_18} (fun (_ret:Int32.t) ->  [ &_17 <- _ret ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 =  [ &_16 <- _17 = ([%#sresult'1] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_16 = false} (! bb18) | br1 -> {_16} (! bb17) ]  ]
    
    | bb17 = s0 [ s0 = ok {err'0} (fun (_ret:t_Option) ->  [ &_24 <- _ret ] s1) | s1 = bb19 ] 
    | bb19 = s0 [ s0 = is_none {_24} (fun (_ret:bool) ->  [ &_22 <- _ret ] s1) | s1 = bb20 ] 
    | bb20 = any [ br0 -> {_22 = false} (! bb22) | br1 -> {_22} (! bb21) ] 
    | bb21 = s0 [ s0 = err {ok'0} (fun (_ret:t_Option) ->  [ &_30 <- _ret ] s1) | s1 = bb23 ] 
    | bb23 = s0 [ s0 = is_none {_30} (fun (_ret:bool) ->  [ &_28 <- _ret ] s1) | s1 = bb24 ] 
    | bb24 = any [ br0 -> {_28 = false} (! bb26) | br1 -> {_28} (! bb25) ] 
    | bb25 = s0 [ s0 = err {err'0} (fun (_ret:t_Option) ->  [ &_36 <- _ret ] s1) | s1 = bb27 ] 
    | bb27 = s0 [ s0 = unwrap {_36} (fun (_ret:Int32.t) ->  [ &_35 <- _ret ] s1) | s1 = bb28 ] 
    | bb28 = s0
      [ s0 =  [ &_34 <- _35 = ([%#sresult'2] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_34 = false} (! bb30) | br1 -> {_34} (! bb29) ]  ]
    
    | bb29 = s0 [ s0 = as_ref {ok'0} (fun (_ret:t_Result'0) ->  [ &_43 <- _ret ] s1) | s1 = bb31 ] 
    | bb31 = s0 [ s0 = unwrap'0 {_43} (fun (_ret:Int32.t) ->  [ &_42 <- _ret ] s1) | s1 = bb32 ] 
    | bb32 = s0
      [ s0 =  [ &_40 <- _42 = ([%#sresult'3] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_40 = false} (! bb34) | br1 -> {_40} (! bb33) ]  ]
    
    | bb33 = s0 [ s0 = as_ref {err'0} (fun (_ret:t_Result'0) ->  [ &_50 <- _ret ] s1) | s1 = bb35 ] 
    | bb35 = s0 [ s0 = unwrap_err {_50} (fun (_ret:Int32.t) ->  [ &_49 <- _ret ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 =  [ &_47 <- _49 = ([%#sresult'4] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_47 = false} (! bb38) | br1 -> {_47} (! bb37) ]  ]
    
    | bb37 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_55 <- _ret ]  [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_55} (fun (_ret:t_Result'1) ->  [ &_54 <- _ret ] s2)
      | s2 = bb39 ]
    
    | bb39 = s0 [ s0 = unwrap'1 {_54} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_53 <- _ret ] s1) | s1 = bb40 ] 
    | bb40 = s0
      [ s0 =  [ &_53 <- { _53 with current = ([%#sresult'5] (0: Int32.t)) } ] s1
      | s1 = -{resolve'0 _53}- s2
      | s2 = unwrap'2 {ok'0} (fun (_ret:Int32.t) ->  [ &_58 <- _ret ] s3)
      | s3 = bb41 ]
    
    | bb41 = s0
      [ s0 =  [ &_57 <- _58 = ([%#sresult'6] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_57 = false} (! bb43) | br1 -> {_57} (! bb42) ]  ]
    
    | bb42 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_63 <- _ret ]  [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_63} (fun (_ret:t_Result'1) ->  [ &_62 <- _ret ] s2)
      | s2 = bb44 ]
    
    | bb44 = s0 [ s0 = unwrap'1 {_62} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_61 <- _ret ] s1) | s1 = bb45 ] 
    | bb45 = s0
      [ s0 =  [ &_61 <- { _61 with current = ([%#sresult'7] (1: Int32.t)) } ] s1
      | s1 = -{resolve'0 _61}- s2
      | s2 = unwrap'2 {ok'0} (fun (_ret:Int32.t) ->  [ &_66 <- _ret ] s3)
      | s3 = bb46 ]
    
    | bb46 = s0
      [ s0 =  [ &_65 <- _66 = ([%#sresult'8] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_65 = false} (! bb48) | br1 -> {_65} (! bb47) ]  ]
    
    | bb47 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_71 <- _ret ]  [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_71} (fun (_ret:t_Result'1) ->  [ &_70 <- _ret ] s2)
      | s2 = bb49 ]
    
    | bb49 = s0 [ s0 = unwrap_err'0 {_70} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_69 <- _ret ] s1) | s1 = bb50 ] 
    | bb50 = s0
      [ s0 =  [ &_69 <- { _69 with current = ([%#sresult'9] (0: Int32.t)) } ] s1
      | s1 = -{resolve'0 _69}- s2
      | s2 = unwrap_err'1 {err'0} (fun (_ret:Int32.t) ->  [ &_74 <- _ret ] s3)
      | s3 = bb51 ]
    
    | bb51 = s0
      [ s0 =  [ &_73 <- _74 = ([%#sresult'10] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_73 = false} (! bb53) | br1 -> {_73} (! bb52) ]  ]
    
    | bb52 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_79 <- _ret ]  [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_79} (fun (_ret:t_Result'1) ->  [ &_78 <- _ret ] s2)
      | s2 = bb54 ]
    
    | bb54 = s0 [ s0 = unwrap_err'0 {_78} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_77 <- _ret ] s1) | s1 = bb55 ] 
    | bb55 = s0
      [ s0 =  [ &_77 <- { _77 with current = ([%#sresult'11] (-1: Int32.t)) } ] s1
      | s1 = -{resolve'0 _77}- s2
      | s2 = unwrap_err'1 {err'0} (fun (_ret:Int32.t) ->  [ &_82 <- _ret ] s3)
      | s3 = bb56 ]
    
    | bb56 = s0
      [ s0 =  [ &_81 <- _82 = ([%#sresult'12] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_81 = false} (! bb58) | br1 -> {_81} (! bb57) ]  ]
    
    | bb57 = s0 [ s0 = unwrap'2 {ok'0} (fun (_ret:Int32.t) ->  [ &_87 <- _ret ] s1) | s1 = bb59 ] 
    | bb59 = s0
      [ s0 =  [ &_86 <- _87 = ([%#sresult'13] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_86 = false} (! bb61) | br1 -> {_86} (! bb60) ]  ]
    
    | bb60 = s0 [ s0 = unwrap_err'1 {err'0} (fun (_ret:Int32.t) ->  [ &_92 <- _ret ] s1) | s1 = bb62 ] 
    | bb62 = s0
      [ s0 =  [ &_91 <- _92 = ([%#sresult'14] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_91 = false} (! bb64) | br1 -> {_91} (! bb63) ]  ]
    
    | bb63 = s0
      [ s0 = unwrap_or {ok'0} {[%#sresult'15] (0: Int32.t)} (fun (_ret:Int32.t) ->  [ &_97 <- _ret ] s1) | s1 = bb65 ]
    
    | bb65 = s0
      [ s0 =  [ &_96 <- _97 = ([%#sresult'16] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_96 = false} (! bb67) | br1 -> {_96} (! bb66) ]  ]
    
    | bb66 = s0
      [ s0 = unwrap_or {err'0} {[%#sresult'17] (0: Int32.t)} (fun (_ret:Int32.t) ->  [ &_102 <- _ret ] s1) | s1 = bb68 ]
    
    | bb68 = s0
      [ s0 =  [ &_101 <- _102 = ([%#sresult'18] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_101 = false} (! bb70) | br1 -> {_101} (! bb69) ]  ]
    
    | bb69 = s0 [ s0 = unwrap_or_default {ok'0} (fun (_ret:Int32.t) ->  [ &_107 <- _ret ] s1) | s1 = bb71 ] 
    | bb71 = s0
      [ s0 =  [ &_106 <- _107 = ([%#sresult'19] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_106 = false} (! bb73) | br1 -> {_106} (! bb72) ]  ]
    
    | bb72 = s0 [ s0 = unwrap_or_default {err'0} (fun (_ret:Int32.t) ->  [ &_112 <- _ret ] s1) | s1 = bb74 ] 
    | bb74 = s0
      [ s0 =  [ &_111 <- _112 = ([%#sresult'20] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_111 = false} (! bb76) | br1 -> {_111} (! bb75) ]  ]
    
    | bb75 = s0
      [ s0 =  [ &_120 <- C_Err ([%#sresult'21] (-2: Int32.t)) ] s1
      | s1 = and {ok'0} {_120} (fun (_ret:t_Result) ->  [ &_118 <- _ret ] s2)
      | s2 = bb77 ]
    
    | bb77 = s0 [ s0 = unwrap_err'1 {_118} (fun (_ret:Int32.t) ->  [ &_117 <- _ret ] s1) | s1 = bb78 ] 
    | bb78 = s0
      [ s0 =  [ &_116 <- _117 = ([%#sresult'22] (-2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_116 = false} (! bb80) | br1 -> {_116} (! bb79) ]  ]
    
    | bb79 = s0
      [ s0 =  [ &_127 <- C_Ok ([%#sresult'23] (2: Int32.t)) ] s1
      | s1 = and {ok'0} {_127} (fun (_ret:t_Result) ->  [ &_125 <- _ret ] s2)
      | s2 = bb81 ]
    
    | bb81 = s0 [ s0 = unwrap'2 {_125} (fun (_ret:Int32.t) ->  [ &_124 <- _ret ] s1) | s1 = bb82 ] 
    | bb82 = s0
      [ s0 =  [ &_123 <- _124 = ([%#sresult'24] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_123 = false} (! bb84) | br1 -> {_123} (! bb83) ]  ]
    
    | bb83 = s0
      [ s0 =  [ &_134 <- C_Err ([%#sresult'25] (-2: Int32.t)) ] s1
      | s1 = and {err'0} {_134} (fun (_ret:t_Result) ->  [ &_132 <- _ret ] s2)
      | s2 = bb85 ]
    
    | bb85 = s0 [ s0 = unwrap_err'1 {_132} (fun (_ret:Int32.t) ->  [ &_131 <- _ret ] s1) | s1 = bb86 ] 
    | bb86 = s0
      [ s0 =  [ &_130 <- _131 = ([%#sresult'26] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_130 = false} (! bb88) | br1 -> {_130} (! bb87) ]  ]
    
    | bb87 = s0
      [ s0 =  [ &_141 <- C_Ok ([%#sresult'27] (2: Int32.t)) ] s1
      | s1 = and {err'0} {_141} (fun (_ret:t_Result) ->  [ &_139 <- _ret ] s2)
      | s2 = bb89 ]
    
    | bb89 = s0 [ s0 = unwrap_err'1 {_139} (fun (_ret:Int32.t) ->  [ &_138 <- _ret ] s1) | s1 = bb90 ] 
    | bb90 = s0
      [ s0 =  [ &_137 <- _138 = ([%#sresult'28] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_137 = false} (! bb92) | br1 -> {_137} (! bb91) ]  ]
    
    | bb91 = s0
      [ s0 =  [ &_148 <- C_Err ([%#sresult'29] (-2: Int32.t)) ] s1
      | s1 = or {ok'0} {_148} (fun (_ret:t_Result) ->  [ &_146 <- _ret ] s2)
      | s2 = bb93 ]
    
    | bb93 = s0 [ s0 = unwrap'2 {_146} (fun (_ret:Int32.t) ->  [ &_145 <- _ret ] s1) | s1 = bb94 ] 
    | bb94 = s0
      [ s0 =  [ &_144 <- _145 = ([%#sresult'30] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_144 = false} (! bb96) | br1 -> {_144} (! bb95) ]  ]
    
    | bb95 = s0
      [ s0 =  [ &_155 <- C_Ok ([%#sresult'31] (2: Int32.t)) ] s1
      | s1 = or {ok'0} {_155} (fun (_ret:t_Result) ->  [ &_153 <- _ret ] s2)
      | s2 = bb97 ]
    
    | bb97 = s0 [ s0 = unwrap'2 {_153} (fun (_ret:Int32.t) ->  [ &_152 <- _ret ] s1) | s1 = bb98 ] 
    | bb98 = s0
      [ s0 =  [ &_151 <- _152 = ([%#sresult'32] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_151 = false} (! bb100) | br1 -> {_151} (! bb99) ]  ]
    
    | bb99 = s0
      [ s0 =  [ &_162 <- C_Err ([%#sresult'33] (-2: Int32.t)) ] s1
      | s1 = or {err'0} {_162} (fun (_ret:t_Result) ->  [ &_160 <- _ret ] s2)
      | s2 = bb101 ]
    
    | bb101 = s0 [ s0 = unwrap_err'1 {_160} (fun (_ret:Int32.t) ->  [ &_159 <- _ret ] s1) | s1 = bb102 ] 
    | bb102 = s0
      [ s0 =  [ &_158 <- _159 = ([%#sresult'34] (-2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_158 = false} (! bb104) | br1 -> {_158} (! bb103) ]  ]
    
    | bb103 = s0
      [ s0 =  [ &_169 <- C_Ok ([%#sresult'35] (2: Int32.t)) ] s1
      | s1 = or {err'0} {_169} (fun (_ret:t_Result) ->  [ &_167 <- _ret ] s2)
      | s2 = bb105 ]
    
    | bb105 = s0 [ s0 = unwrap'2 {_167} (fun (_ret:Int32.t) ->  [ &_166 <- _ret ] s1) | s1 = bb106 ] 
    | bb106 = s0
      [ s0 =  [ &_165 <- _166 = ([%#sresult'36] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_165 = false} (! bb108) | br1 -> {_165} (! bb107) ]  ]
    
    | bb107 = s0 [ s0 = as_ref {ok'0} (fun (_ret:t_Result'0) ->  [ &_175 <- _ret ] s1) | s1 = bb109 ] 
    | bb109 = s0 [ s0 = copied {_175} (fun (_ret:t_Result'2) ->  [ &_174 <- _ret ] s1) | s1 = bb110 ] 
    | bb110 = s0 [ s0 = unwrap'3 {_174} (fun (_ret:Int32.t) ->  [ &_173 <- _ret ] s1) | s1 = bb111 ] 
    | bb111 = s0
      [ s0 =  [ &_172 <- _173 = ([%#sresult'37] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_172 = false} (! bb113) | br1 -> {_172} (! bb112) ]  ]
    
    | bb112 = s0 [ s0 = as_ref {err'0} (fun (_ret:t_Result'0) ->  [ &_183 <- _ret ] s1) | s1 = bb114 ] 
    | bb114 = s0 [ s0 = copied {_183} (fun (_ret:t_Result'2) ->  [ &_182 <- _ret ] s1) | s1 = bb115 ] 
    | bb115 = s0 [ s0 = unwrap_err'2 {_182} (fun (_ret:Int32.t) ->  [ &_181 <- _ret ] s1) | s1 = bb116 ] 
    | bb116 = s0
      [ s0 =  [ &_179 <- _181 = ([%#sresult'38] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_179 = false} (! bb118) | br1 -> {_179} (! bb117) ]  ]
    
    | bb117 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_191 <- _ret ]  [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_191} (fun (_ret:t_Result'1) ->  [ &_190 <- _ret ] s2)
      | s2 = bb119 ]
    
    | bb119 = s0 [ s0 = copied'0 {_190} (fun (_ret:t_Result'3) ->  [ &_189 <- _ret ] s1) | s1 = bb120 ] 
    | bb120 = s0 [ s0 = unwrap'4 {_189} (fun (_ret:Int32.t) ->  [ &_188 <- _ret ] s1) | s1 = bb121 ] 
    | bb121 = s0
      [ s0 =  [ &_187 <- _188 = ([%#sresult'39] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_187 = false} (! bb123) | br1 -> {_187} (! bb122) ]  ]
    
    | bb122 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_199 <- _ret ]  [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_199} (fun (_ret:t_Result'1) ->  [ &_198 <- _ret ] s2)
      | s2 = bb124 ]
    
    | bb124 = s0 [ s0 = copied'0 {_198} (fun (_ret:t_Result'3) ->  [ &_197 <- _ret ] s1) | s1 = bb125 ] 
    | bb125 = s0 [ s0 = unwrap_err'3 {_197} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_196 <- _ret ] s1) | s1 = bb126 ] 
    | bb126 = s0
      [ s0 = -{resolve'0 _196}- s1
      | s1 =  [ &_194 <- _196.current = ([%#sresult'40] (-1: Int32.t)) ] s2
      | s2 = any [ br0 -> {_194 = false} (! bb128) | br1 -> {_194} (! bb127) ]  ]
    
    | bb127 = s0 [ s0 = as_ref {ok'0} (fun (_ret:t_Result'0) ->  [ &_205 <- _ret ] s1) | s1 = bb129 ] 
    | bb129 = s0 [ s0 = cloned {_205} (fun (_ret:t_Result'2) ->  [ &_204 <- _ret ] s1) | s1 = bb130 ] 
    | bb130 = s0 [ s0 = unwrap'3 {_204} (fun (_ret:Int32.t) ->  [ &_203 <- _ret ] s1) | s1 = bb131 ] 
    | bb131 = s0
      [ s0 =  [ &_202 <- _203 = ([%#sresult'41] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_202 = false} (! bb133) | br1 -> {_202} (! bb132) ]  ]
    
    | bb132 = s0 [ s0 = as_ref {err'0} (fun (_ret:t_Result'0) ->  [ &_213 <- _ret ] s1) | s1 = bb134 ] 
    | bb134 = s0 [ s0 = cloned {_213} (fun (_ret:t_Result'2) ->  [ &_212 <- _ret ] s1) | s1 = bb135 ] 
    | bb135 = s0 [ s0 = unwrap_err'2 {_212} (fun (_ret:Int32.t) ->  [ &_211 <- _ret ] s1) | s1 = bb136 ] 
    | bb136 = s0
      [ s0 =  [ &_209 <- _211 = ([%#sresult'42] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_209 = false} (! bb138) | br1 -> {_209} (! bb137) ]  ]
    
    | bb137 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {ok'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_221 <- _ret ]  [ &ok'0 <- _ret.final ] s1)
      | s1 = as_mut {_221} (fun (_ret:t_Result'1) ->  [ &_220 <- _ret ] s2)
      | s2 = bb139 ]
    
    | bb139 = s0 [ s0 = cloned'0 {_220} (fun (_ret:t_Result'3) ->  [ &_219 <- _ret ] s1) | s1 = bb140 ] 
    | bb140 = s0 [ s0 = unwrap'4 {_219} (fun (_ret:Int32.t) ->  [ &_218 <- _ret ] s1) | s1 = bb141 ] 
    | bb141 = s0
      [ s0 =  [ &_217 <- _218 = ([%#sresult'43] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_217 = false} (! bb143) | br1 -> {_217} (! bb142) ]  ]
    
    | bb142 = s0
      [ s0 = MutBorrow.borrow_mut <t_Result> {err'0}
          (fun (_ret:MutBorrow.t t_Result) ->  [ &_229 <- _ret ]  [ &err'0 <- _ret.final ] s1)
      | s1 = as_mut {_229} (fun (_ret:t_Result'1) ->  [ &_228 <- _ret ] s2)
      | s2 = bb144 ]
    
    | bb144 = s0 [ s0 = cloned'0 {_228} (fun (_ret:t_Result'3) ->  [ &_227 <- _ret ] s1) | s1 = bb145 ] 
    | bb145 = s0 [ s0 = unwrap_err'3 {_227} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_226 <- _ret ] s1) | s1 = bb146 ] 
    | bb146 = s0
      [ s0 = -{resolve'0 _226}- s1
      | s1 =  [ &_224 <- _226.current = ([%#sresult'44] (-1: Int32.t)) ] s2
      | s2 = any [ br0 -> {_224 = false} (! bb148) | br1 -> {_224} (! bb147) ]  ]
    
    | bb147 = s0
      [ s0 =  [ &_232 <- C_None ] s1
      | s1 =  [ &res <- C_Ok'4 _232 ] s2
      | s2 = transpose {res} (fun (_ret:t_Option'0) ->  [ &_236 <- _ret ] s3)
      | s3 = bb149 ]
    
    | bb149 = s0 [ s0 = is_none'0 {_236} (fun (_ret:bool) ->  [ &_234 <- _ret ] s1) | s1 = bb150 ] 
    | bb150 = any [ br0 -> {_234 = false} (! bb152) | br1 -> {_234} (! bb151) ] 
    | bb151 = s0
      [ s0 =  [ &_240 <- C_Some ([%#sresult'45] (1: Int32.t)) ] s1
      | s1 =  [ &res'0 <- C_Ok'4 _240 ] s2
      | s2 = transpose {res'0} (fun (_ret:t_Option'0) ->  [ &_245 <- _ret ] s3)
      | s3 = bb153 ]
    
    | bb153 = s0 [ s0 = unwrap'5 {_245} (fun (_ret:t_Result) ->  [ &_244 <- _ret ] s1) | s1 = bb154 ] 
    | bb154 = s0 [ s0 = unwrap'2 {_244} (fun (_ret:Int32.t) ->  [ &_243 <- _ret ] s1) | s1 = bb155 ] 
    | bb155 = s0
      [ s0 =  [ &_242 <- _243 = ([%#sresult'46] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_242 = false} (! bb157) | br1 -> {_242} (! bb156) ]  ]
    
    | bb156 = s0
      [ s0 =  [ &res'1 <- C_Err'4 ([%#sresult'47] (-1: Int32.t)) ] s1
      | s1 = transpose {res'1} (fun (_ret:t_Option'0) ->  [ &_253 <- _ret ] s2)
      | s2 = bb158 ]
    
    | bb158 = s0 [ s0 = unwrap'5 {_253} (fun (_ret:t_Result) ->  [ &_252 <- _ret ] s1) | s1 = bb159 ] 
    | bb159 = s0 [ s0 = unwrap_err'1 {_252} (fun (_ret:Int32.t) ->  [ &_251 <- _ret ] s1) | s1 = bb160 ] 
    | bb160 = s0
      [ s0 =  [ &_250 <- _251 = ([%#sresult'48] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_250 = false} (! bb162) | br1 -> {_250} (! bb161) ]  ]
    
    | bb161 = return''0 {_0}
    | bb162 = {[%#sresult'49] false} any
    | bb157 = {[%#sresult'50] false} any
    | bb152 = {[%#sresult'51] false} any
    | bb148 = {[%#sresult'52] false} any
    | bb143 = {[%#sresult'53] false} any
    | bb138 = {[%#sresult'54] false} any
    | bb133 = {[%#sresult'55] false} any
    | bb128 = {[%#sresult'56] false} any
    | bb123 = {[%#sresult'57] false} any
    | bb118 = {[%#sresult'58] false} any
    | bb113 = {[%#sresult'59] false} any
    | bb108 = {[%#sresult'60] false} any
    | bb104 = {[%#sresult'61] false} any
    | bb100 = {[%#sresult'62] false} any
    | bb96 = {[%#sresult'63] false} any
    | bb92 = {[%#sresult'64] false} any
    | bb88 = {[%#sresult'65] false} any
    | bb84 = {[%#sresult'66] false} any
    | bb80 = {[%#sresult'67] false} any
    | bb76 = {[%#sresult'68] false} any
    | bb73 = {[%#sresult'69] false} any
    | bb70 = {[%#sresult'70] false} any
    | bb67 = {[%#sresult'71] false} any
    | bb64 = {[%#sresult'72] false} any
    | bb61 = {[%#sresult'73] false} any
    | bb58 = {[%#sresult'74] false} any
    | bb53 = {[%#sresult'75] false} any
    | bb48 = {[%#sresult'76] false} any
    | bb43 = {[%#sresult'77] false} any
    | bb38 = {[%#sresult'78] false} any
    | bb34 = {[%#sresult'79] false} any
    | bb30 = {[%#sresult'80] false} any
    | bb26 = {[%#sresult'81] false} any
    | bb22 = {[%#sresult'82] false} any
    | bb18 = {[%#sresult'83] false} any
    | bb13 = bb14
    | bb14 = {[%#sresult'84] false} any
    | bb6 = bb7
    | bb7 = {[%#sresult'85] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & ok'0: t_Result = Any.any_l ()
    | & err'0: t_Result = Any.any_l ()
    | & _4: bool = Any.any_l ()
    | & _6: bool = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: bool = Any.any_l ()
    | & _16: bool = Any.any_l ()
    | & _17: Int32.t = Any.any_l ()
    | & _18: t_Option = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _28: bool = Any.any_l ()
    | & _30: t_Option = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & _35: Int32.t = Any.any_l ()
    | & _36: t_Option = Any.any_l ()
    | & _40: bool = Any.any_l ()
    | & _42: Int32.t = Any.any_l ()
    | & _43: t_Result'0 = Any.any_l ()
    | & _47: bool = Any.any_l ()
    | & _49: Int32.t = Any.any_l ()
    | & _50: t_Result'0 = Any.any_l ()
    | & _53: MutBorrow.t Int32.t = Any.any_l ()
    | & _54: t_Result'1 = Any.any_l ()
    | & _55: MutBorrow.t t_Result = Any.any_l ()
    | & _57: bool = Any.any_l ()
    | & _58: Int32.t = Any.any_l ()
    | & _61: MutBorrow.t Int32.t = Any.any_l ()
    | & _62: t_Result'1 = Any.any_l ()
    | & _63: MutBorrow.t t_Result = Any.any_l ()
    | & _65: bool = Any.any_l ()
    | & _66: Int32.t = Any.any_l ()
    | & _69: MutBorrow.t Int32.t = Any.any_l ()
    | & _70: t_Result'1 = Any.any_l ()
    | & _71: MutBorrow.t t_Result = Any.any_l ()
    | & _73: bool = Any.any_l ()
    | & _74: Int32.t = Any.any_l ()
    | & _77: MutBorrow.t Int32.t = Any.any_l ()
    | & _78: t_Result'1 = Any.any_l ()
    | & _79: MutBorrow.t t_Result = Any.any_l ()
    | & _81: bool = Any.any_l ()
    | & _82: Int32.t = Any.any_l ()
    | & _86: bool = Any.any_l ()
    | & _87: Int32.t = Any.any_l ()
    | & _91: bool = Any.any_l ()
    | & _92: Int32.t = Any.any_l ()
    | & _96: bool = Any.any_l ()
    | & _97: Int32.t = Any.any_l ()
    | & _101: bool = Any.any_l ()
    | & _102: Int32.t = Any.any_l ()
    | & _106: bool = Any.any_l ()
    | & _107: Int32.t = Any.any_l ()
    | & _111: bool = Any.any_l ()
    | & _112: Int32.t = Any.any_l ()
    | & _116: bool = Any.any_l ()
    | & _117: Int32.t = Any.any_l ()
    | & _118: t_Result = Any.any_l ()
    | & _120: t_Result = Any.any_l ()
    | & _123: bool = Any.any_l ()
    | & _124: Int32.t = Any.any_l ()
    | & _125: t_Result = Any.any_l ()
    | & _127: t_Result = Any.any_l ()
    | & _130: bool = Any.any_l ()
    | & _131: Int32.t = Any.any_l ()
    | & _132: t_Result = Any.any_l ()
    | & _134: t_Result = Any.any_l ()
    | & _137: bool = Any.any_l ()
    | & _138: Int32.t = Any.any_l ()
    | & _139: t_Result = Any.any_l ()
    | & _141: t_Result = Any.any_l ()
    | & _144: bool = Any.any_l ()
    | & _145: Int32.t = Any.any_l ()
    | & _146: t_Result = Any.any_l ()
    | & _148: t_Result = Any.any_l ()
    | & _151: bool = Any.any_l ()
    | & _152: Int32.t = Any.any_l ()
    | & _153: t_Result = Any.any_l ()
    | & _155: t_Result = Any.any_l ()
    | & _158: bool = Any.any_l ()
    | & _159: Int32.t = Any.any_l ()
    | & _160: t_Result = Any.any_l ()
    | & _162: t_Result = Any.any_l ()
    | & _165: bool = Any.any_l ()
    | & _166: Int32.t = Any.any_l ()
    | & _167: t_Result = Any.any_l ()
    | & _169: t_Result = Any.any_l ()
    | & _172: bool = Any.any_l ()
    | & _173: Int32.t = Any.any_l ()
    | & _174: t_Result'2 = Any.any_l ()
    | & _175: t_Result'0 = Any.any_l ()
    | & _179: bool = Any.any_l ()
    | & _181: Int32.t = Any.any_l ()
    | & _182: t_Result'2 = Any.any_l ()
    | & _183: t_Result'0 = Any.any_l ()
    | & _187: bool = Any.any_l ()
    | & _188: Int32.t = Any.any_l ()
    | & _189: t_Result'3 = Any.any_l ()
    | & _190: t_Result'1 = Any.any_l ()
    | & _191: MutBorrow.t t_Result = Any.any_l ()
    | & _194: bool = Any.any_l ()
    | & _196: MutBorrow.t Int32.t = Any.any_l ()
    | & _197: t_Result'3 = Any.any_l ()
    | & _198: t_Result'1 = Any.any_l ()
    | & _199: MutBorrow.t t_Result = Any.any_l ()
    | & _202: bool = Any.any_l ()
    | & _203: Int32.t = Any.any_l ()
    | & _204: t_Result'2 = Any.any_l ()
    | & _205: t_Result'0 = Any.any_l ()
    | & _209: bool = Any.any_l ()
    | & _211: Int32.t = Any.any_l ()
    | & _212: t_Result'2 = Any.any_l ()
    | & _213: t_Result'0 = Any.any_l ()
    | & _217: bool = Any.any_l ()
    | & _218: Int32.t = Any.any_l ()
    | & _219: t_Result'3 = Any.any_l ()
    | & _220: t_Result'1 = Any.any_l ()
    | & _221: MutBorrow.t t_Result = Any.any_l ()
    | & _224: bool = Any.any_l ()
    | & _226: MutBorrow.t Int32.t = Any.any_l ()
    | & _227: t_Result'3 = Any.any_l ()
    | & _228: t_Result'1 = Any.any_l ()
    | & _229: MutBorrow.t t_Result = Any.any_l ()
    | & res: t_Result'4 = Any.any_l ()
    | & _232: t_Option = Any.any_l ()
    | & _234: bool = Any.any_l ()
    | & _236: t_Option'0 = Any.any_l ()
    | & res'0: t_Result'4 = Any.any_l ()
    | & _240: t_Option = Any.any_l ()
    | & _242: bool = Any.any_l ()
    | & _243: Int32.t = Any.any_l ()
    | & _244: t_Result = Any.any_l ()
    | & _245: t_Option'0 = Any.any_l ()
    | & res'1: t_Result'4 = Any.any_l ()
    | & _250: bool = Any.any_l ()
    | & _251: Int32.t = Any.any_l ()
    | & _252: t_Result = Any.any_l ()
    | & _253: t_Option'0 = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
