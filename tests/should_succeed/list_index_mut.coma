module M_list_index_mut__index_mut [#"list_index_mut.rs" 37 0 37 61]
  let%span slist_index_mut = "list_index_mut.rs" 38 16 38 31
  let%span slist_index_mut'0 = "list_index_mut.rs" 39 17 39 33
  let%span slist_index_mut'1 = "list_index_mut.rs" 45 8 47 48
  let%span slist_index_mut'2 = "list_index_mut.rs" 43 16 43 76
  let%span slist_index_mut'3 = "list_index_mut.rs" 42 16 42 55
  let%span slist_index_mut'4 = "list_index_mut.rs" 41 16 41 52
  let%span slist_index_mut'5 = "list_index_mut.rs" 40 16 40 45
  let%span slist_index_mut'6 = "list_index_mut.rs" 49 15 49 16
  let%span slist_index_mut'7 = "list_index_mut.rs" 52 14 52 15
  let%span slist_index_mut'8 = "list_index_mut.rs" 32 11 32 24
  let%span slist_index_mut'9 = "list_index_mut.rs" 33 10 33 37
  let%span slist_index_mut'10 = "list_index_mut.rs" 34 10 34 40
  let%span slist_index_mut'11 = "list_index_mut.rs" 35 10 35 34
  let%span slist_index_mut'12 = "list_index_mut.rs" 36 10 36 81
  let%span slist_index_mut'13 = "list_index_mut.rs" 9 12 9 35
  let%span slist_index_mut'14 = "list_index_mut.rs" 20 12 20 35
  let%span ssnapshot = "../../creusot-contracts/src/snapshot.rs" 50 20 50 39
  let%span soption = "../../creusot-contracts/src/std/option.rs" 103 26 103 75
  let%span soption'0 = "../../creusot-contracts/src/std/option.rs" 105 20 106 100
  let%span soption'1 = "../../creusot-contracts/src/std/option.rs" 153 27 153 39
  let%span soption'2 = "../../creusot-contracts/src/std/option.rs" 154 26 154 46
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span sord = "../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord'0 = "../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord'1 = "../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord'2 = "../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord'3 = "../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord'4 = "../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord'5 = "../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord'6 = "../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord'7 = "../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord'8 = "../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord'9 = "../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord'10 = "../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord'11 = "../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord'12 = "../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use mach.int.Int
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Option  =
    | C_None
    | C_Some t_List
  with t_List  =
    { t_List__0: UInt32.t; t_List__1: t_Option }
  
  function len [#"list_index_mut.rs" 7 4 7 29] (self: t_List) : int =
    [%#slist_index_mut'13] let {t_List__0 = _ ; t_List__1 = ls} = self in 1
    + match ls with
      | C_Some ls'0 -> len ls'0
      | C_None -> 0
      end
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt32.t
  
  function get [#"list_index_mut.rs" 18 4 18 46] (self: t_List) (ix: int) : t_Option'0 =
    [%#slist_index_mut'14] let {t_List__0 = i ; t_List__1 = ls} = self in if ix > 0 then
      match ls with
        | C_Some ls'0 -> get ls'0 (ix - 1)
        | C_None -> C_None'0
        end
    else
      C_Some'0 i
  
  
  function view (self: UInt64.t) : int =
    [%#smodel] UInt64.t'int self
  
  function view'0 (self: UInt64.t) : int =
    [%#ssnapshot] view self
  
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function cmp_log (self: UInt64.t) (o: UInt64.t) : t_Ordering =
    [%#sord'12] if UInt64.lt self o then C_Less else if self = o then C_Equal else C_Greater
  
  function eq_cmp (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom eq_cmp_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'11] (x = y) = (cmp_log x y = C_Equal)
  
  function antisym2 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym2_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'9] cmp_log x y = C_Greater)
   -> ([%#sord'10] cmp_log y x = C_Less)
  
  function antisym1 (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom antisym1_spec: forall x: UInt64.t, y: UInt64.t. ([%#sord'7] cmp_log x y = C_Less)
   -> ([%#sord'8] cmp_log y x = C_Greater)
  
  function trans (x: UInt64.t) (y: UInt64.t) (z: UInt64.t) (o: t_Ordering) : ()
  
  axiom trans_spec: forall x: UInt64.t, y: UInt64.t, z: UInt64.t, o: t_Ordering. ([%#sord'4] cmp_log x y = o)
   -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)
  
  function refl (x: UInt64.t) : ()
  
  axiom refl_spec: forall x: UInt64.t. [%#sord'3] cmp_log x x = C_Equal
  
  function cmp_gt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_gt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)
  
  function cmp_ge_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_ge_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)
  
  function cmp_lt_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_lt_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)
  
  function cmp_le_log (x: UInt64.t) (y: UInt64.t) : ()
  
  axiom cmp_le_log_spec: forall x: UInt64.t, y: UInt64.t. [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 (MutBorrow.t t_List)
  
  let rec as_mut (self_:MutBorrow.t t_Option) (return'  (x:t_Option'1))= any
    [ return''0 (result:t_Option'1)-> {[%#soption] self_.current = C_None  -> result = C_None'1 /\ self_.final = C_None}
      {[%#soption'0] self_.current = C_None
      \/ (exists r: MutBorrow.t t_List. result = C_Some'1 r
      /\ self_.current = C_Some (r.current) /\ self_.final = C_Some (r.final))}
      (! return' {result}) ]
  
  
  let rec unwrap (self_:t_Option'1) (return'  (x:MutBorrow.t t_List))= {[@expl:unwrap requires] [%#soption'1] self_
    <> C_None'1}
    any [ return''0 (result:MutBorrow.t t_List)-> {[%#soption'2] C_Some'1 result = self_} (! return' {result}) ] 
  
  predicate resolve (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_List) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_List) =
    resolve'1 _0
  
  predicate resolve'3 (self: MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0: MutBorrow.t UInt32.t) =
    resolve'3 _0
  
  meta "compute_max_steps" 1000000
  
  let rec index_mut[#"list_index_mut.rs" 37 0 37 61] (l:MutBorrow.t t_List) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt32.t))= {[@expl:index_mut requires] [%#slist_index_mut'8] UInt64.t'int ix
    < len l.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [%#slist_index_mut] l'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &old_ix <- [%#slist_index_mut'0] ix'0 ] s1 | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = bb3'0
      [ bb3'0 = {[@expl:loop invariant #0] [%#slist_index_mut'5] UInt64.le (0: UInt64.t) ix'0
        /\ UInt64.t'int ix'0 < len l'0.current}
        {[@expl:loop invariant #1] [%#slist_index_mut'4] get l'0.current (UInt64.t'int ix'0)
        = get old_l.current (view'0 old_ix)}
        {[@expl:loop invariant #2] [%#slist_index_mut'3] get l'0.final (UInt64.t'int ix'0)
        = get old_l.final (view'0 old_ix)}
        {[@expl:loop invariant #3] [%#slist_index_mut'2] len l'0.final = len l'0.current
         -> len old_l.final = len old_l.current}
        {[@expl:loop invariant #4] [%#slist_index_mut'1] (forall i: int. 0 <= i
        /\ i < len l'0.current /\ i <> UInt64.t'int ix'0  -> get l'0.final i = get l'0.current i)
         -> (forall i: int. 0 <= i /\ i < len old_l.current /\ i <> view'0 old_ix
         -> get old_l.final i = get old_l.current i)}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 =  [ &_21 <- UInt64.gt ix'0 ([%#slist_index_mut'6] (0: UInt64.t)) ] s1
          | s1 = any [ br0 -> {_21 = false} (! bb8) | br1 -> {_21} (! bb5) ]  ]
        
        | bb5 = s0
          [ s0 = MutBorrow.borrow_final
              <t_Option>
              {(l'0.current).t_List__1}
              {MutBorrow.inherit_id (MutBorrow.get_id l'0) 2}
              (fun (_ret:MutBorrow.t t_Option) ->
                 [ &_26 <- _ret ] 
                 [ &l'0 <- { l'0 with current = { l'0.current with t_List__1 = _ret.final } } ] 
                s1)
          | s1 = as_mut {_26} (fun (_ret:t_Option'1) ->  [ &_25 <- _ret ] s2)
          | s2 = bb6 ]
        
        | bb6 = s0 [ s0 = unwrap {_25} (fun (_ret:MutBorrow.t t_List) ->  [ &_24 <- _ret ] s1) | s1 = bb7 ] 
        | bb7 = s0
          [ s0 = MutBorrow.borrow_final <t_List> {_24.current} {MutBorrow.get_id _24}
              (fun (_ret:MutBorrow.t t_List) ->  [ &_23 <- _ret ]  [ &_24 <- { _24 with current = _ret.final } ] s1)
          | s1 = -{resolve'0 l'0}- s2
          | s2 =  [ &l'0 <- _23 ] s3
          | s3 = -{resolve'2 _24}- s4
          | s4 = UInt64.sub {ix'0} {[%#slist_index_mut'7] (1: UInt64.t)} (fun (_ret:UInt64.t) ->  [ &ix'0 <- _ret ] s5)
          | s5 = bb3'0 ]
         ]
       ]
    
    | bb8 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {(l'0.current).t_List__0} {MutBorrow.inherit_id (MutBorrow.get_id l'0) 1}
          (fun (_ret:MutBorrow.t UInt32.t) ->
             [ &_28 <- _ret ] 
             [ &l'0 <- { l'0 with current = { l'0.current with t_List__0 = _ret.final } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_28.current} {MutBorrow.get_id _28}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_3 <- _ret ]  [ &_28 <- { _28 with current = _ret.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_0 <- _ret ]  [ &_3 <- { _3 with current = _ret.final } ] s3)
      | s3 = -{resolve'4 _28}- s4
      | s4 = -{resolve'4 _3}- s5
      | s5 = -{resolve'0 l'0}- s6
      | s6 = return''0 {_0} ]
     ]
    )
    [ & _0: MutBorrow.t UInt32.t = Any.any_l ()
    | & l'0: MutBorrow.t t_List = l
    | & ix'0: UInt64.t = ix
    | & _3: MutBorrow.t UInt32.t = Any.any_l ()
    | & old_l: MutBorrow.t t_List = Any.any_l ()
    | & old_ix: UInt64.t = Any.any_l ()
    | & _21: bool = Any.any_l ()
    | & _23: MutBorrow.t t_List = Any.any_l ()
    | & _24: MutBorrow.t t_List = Any.any_l ()
    | & _25: t_Option'1 = Any.any_l ()
    | & _26: MutBorrow.t t_Option = Any.any_l ()
    | & _28: MutBorrow.t UInt32.t = Any.any_l () ]
    
    [ return''0 (result:MutBorrow.t UInt32.t)-> {[@expl:index_mut ensures #0] [%#slist_index_mut'9] C_Some'0 (result.current)
      = get l.current (UInt64.t'int ix)}
      {[@expl:index_mut ensures #1] [%#slist_index_mut'10] C_Some'0 (result.final) = get l.final (UInt64.t'int ix)}
      {[@expl:index_mut ensures #2] [%#slist_index_mut'11] len l.final = len l.current}
      {[@expl:index_mut ensures #3] [%#slist_index_mut'12] forall i: int. 0 <= i
      /\ i < len l.current /\ i <> UInt64.t'int ix  -> get l.current i = get l.final i}
      (! return' {result}) ]

end
module M_list_index_mut__write [#"list_index_mut.rs" 63 0 63 45]
  let%span slist_index_mut = "list_index_mut.rs" 59 11 59 24
  let%span slist_index_mut'0 = "list_index_mut.rs" 60 10 60 34
  let%span slist_index_mut'1 = "list_index_mut.rs" 61 10 61 31
  let%span slist_index_mut'2 = "list_index_mut.rs" 62 10 62 81
  let%span slist_index_mut'3 = "list_index_mut.rs" 32 11 32 24
  let%span slist_index_mut'4 = "list_index_mut.rs" 33 10 33 37
  let%span slist_index_mut'5 = "list_index_mut.rs" 34 10 34 40
  let%span slist_index_mut'6 = "list_index_mut.rs" 35 10 35 34
  let%span slist_index_mut'7 = "list_index_mut.rs" 36 10 36 81
  let%span slist_index_mut'8 = "list_index_mut.rs" 9 12 9 35
  let%span slist_index_mut'9 = "list_index_mut.rs" 20 12 20 35
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Option  =
    | C_None
    | C_Some t_List
  with t_List  =
    { t_List__0: UInt32.t; t_List__1: t_Option }
  
  function len [#"list_index_mut.rs" 7 4 7 29] (self: t_List) : int =
    [%#slist_index_mut'8] let {t_List__0 = _ ; t_List__1 = ls} = self in 1
    + match ls with
      | C_Some ls'0 -> len ls'0
      | C_None -> 0
      end
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt32.t
  
  function get [#"list_index_mut.rs" 18 4 18 46] (self: t_List) (ix: int) : t_Option'0 =
    [%#slist_index_mut'9] let {t_List__0 = i ; t_List__1 = ls} = self in if ix > 0 then
      match ls with
        | C_Some ls'0 -> get ls'0 (ix - 1)
        | C_None -> C_None'0
        end
    else
      C_Some'0 i
  
  
  let rec index_mut (l:MutBorrow.t t_List) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt32.t))= {[@expl:index_mut requires] [%#slist_index_mut'3] UInt64.t'int ix
    < len l.current}
    any
    [ return''0 (result:MutBorrow.t UInt32.t)-> {[%#slist_index_mut'4] C_Some'0 (result.current)
      = get l.current (UInt64.t'int ix)}
      {[%#slist_index_mut'5] C_Some'0 (result.final) = get l.final (UInt64.t'int ix)}
      {[%#slist_index_mut'6] len l.final = len l.current}
      {[%#slist_index_mut'7] forall i: int. 0 <= i /\ i < len l.current /\ i <> UInt64.t'int ix
       -> get l.current i = get l.final i}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t UInt32.t) =
    resolve _0
  
  predicate resolve'1 (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0: MutBorrow.t t_List) =
    resolve'1 _0
  
  meta "compute_max_steps" 1000000
  
  let rec write[#"list_index_mut.rs" 63 0 63 45] (l:MutBorrow.t t_List) (ix:UInt64.t) (v:UInt32.t) (return'  (x:()))= {[@expl:write requires] [%#slist_index_mut] UInt64.t'int ix
    < len l.current}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <t_List> {l'0.current} {MutBorrow.get_id l'0}
          (fun (_ret:MutBorrow.t t_List) ->  [ &_10 <- _ret ]  [ &l'0 <- { l'0 with current = _ret.final } ] s1)
      | s1 = index_mut {_10} {ix'0} (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_9 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_9 <- { _9 with current = v'0 } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'2 l'0}- s3
      | s3 = return''0 {_0} ]
     ]
    )
    [ & _0: () = Any.any_l ()
    | & l'0: MutBorrow.t t_List = l
    | & ix'0: UInt64.t = ix
    | & v'0: UInt32.t = v
    | & _9: MutBorrow.t UInt32.t = Any.any_l ()
    | & _10: MutBorrow.t t_List = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:write ensures #0] [%#slist_index_mut'0] C_Some'0 v
      = get l.final (UInt64.t'int ix)}
      {[@expl:write ensures #1] [%#slist_index_mut'1] len l.final = len l.current}
      {[@expl:write ensures #2] [%#slist_index_mut'2] forall i: int. 0 <= i /\ i < len l.current /\ i <> UInt64.t'int ix
       -> get l.current i = get l.final i}
      (! return' {result}) ]

end
module M_list_index_mut__f [#"list_index_mut.rs" 67 0 67 10]
  let%span slist_index_mut = "list_index_mut.rs" 68 43 68 45
  let%span slist_index_mut'0 = "list_index_mut.rs" 68 21 68 22
  let%span slist_index_mut'1 = "list_index_mut.rs" 69 18 69 19
  let%span slist_index_mut'2 = "list_index_mut.rs" 69 21 69 22
  let%span slist_index_mut'3 = "list_index_mut.rs" 59 11 59 24
  let%span slist_index_mut'4 = "list_index_mut.rs" 60 10 60 34
  let%span slist_index_mut'5 = "list_index_mut.rs" 61 10 61 31
  let%span slist_index_mut'6 = "list_index_mut.rs" 62 10 62 81
  let%span slist_index_mut'7 = "list_index_mut.rs" 9 12 9 35
  let%span slist_index_mut'8 = "list_index_mut.rs" 20 12 20 35
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.int.UInt64
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_List  =
    { t_List__0: UInt32.t; t_List__1: t_Option }
  with t_Option  =
    | C_None
    | C_Some t_List
  
  function len [#"list_index_mut.rs" 7 4 7 29] (self: t_List) : int =
    [%#slist_index_mut'7] let {t_List__0 = _ ; t_List__1 = ls} = self in 1
    + match ls with
      | C_Some ls'0 -> len ls'0
      | C_None -> 0
      end
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt32.t
  
  function get [#"list_index_mut.rs" 18 4 18 46] (self: t_List) (ix: int) : t_Option'0 =
    [%#slist_index_mut'8] let {t_List__0 = i ; t_List__1 = ls} = self in if ix > 0 then
      match ls with
        | C_Some ls'0 -> get ls'0 (ix - 1)
        | C_None -> C_None'0
        end
    else
      C_Some'0 i
  
  
  let rec write (l:MutBorrow.t t_List) (ix:UInt64.t) (v:UInt32.t) (return'  (x:()))= {[@expl:write requires] [%#slist_index_mut'3] UInt64.t'int ix
    < len l.current}
    any
    [ return''0 (result:())-> {[%#slist_index_mut'4] C_Some'0 v = get l.final (UInt64.t'int ix)}
      {[%#slist_index_mut'5] len l.final = len l.current}
      {[%#slist_index_mut'6] forall i: int. 0 <= i /\ i < len l.current /\ i <> UInt64.t'int ix
       -> get l.current i = get l.final i}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t t_List) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_List) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec f[#"list_index_mut.rs" 67 0 67 10] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- C_None ] s1
      | s1 =  [ &_4 <- { t_List__0 = ([%#slist_index_mut] (10: UInt32.t)); t_List__1 = _5 } ] s2
      | s2 = bb1 ]
    
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_2 <- C_Some _4 ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &l <- { t_List__0 = ([%#slist_index_mut'0] (1: UInt32.t)); t_List__1 = _2 } ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_List> {l}
          (fun (_ret:MutBorrow.t t_List) ->  [ &_8 <- _ret ]  [ &l <- _ret.final ] s1)
      | s1 = MutBorrow.borrow_final <t_List> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret:MutBorrow.t t_List) ->  [ &_7 <- _ret ]  [ &_8 <- { _8 with current = _ret.final } ] s2)
      | s2 = write {_7} {[%#slist_index_mut'1] (0: UInt64.t)} {[%#slist_index_mut'2] (2: UInt32.t)}
          (fun (_ret:()) ->  [ &_6 <- _ret ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0 [ s0 = -{resolve'0 _8}- s1 | s1 = bb6 ] 
    | bb6 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & l: t_List = Any.any_l ()
    | & _2: t_Option = Any.any_l ()
    | & _4: t_List = Any.any_l ()
    | & _5: t_Option = Any.any_l ()
    | & _6: () = Any.any_l ()
    | & _7: MutBorrow.t t_List = Any.any_l ()
    | & _8: MutBorrow.t t_List = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
