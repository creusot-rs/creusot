module M_index_range__create_arr [#"index_range.rs" 14 0 14 27]
  let%span sindex_range = "index_range.rs" 17 13 17 14
  let%span sindex_range'0 = "index_range.rs" 18 13 18 14
  let%span sindex_range'1 = "index_range.rs" 19 13 19 14
  let%span sindex_range'2 = "index_range.rs" 20 13 20 14
  let%span sindex_range'3 = "index_range.rs" 21 13 21 14
  let%span sindex_range'4 = "index_range.rs" 7 4 12 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 72 26 72 44
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 85 26 85 56
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../creusot-contracts/src/model.rs" 62 8 62 22
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  let rec new (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#svec] Seq.length (view result) = 0} (! return' {result}) ]
  
  
  function view'0 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self.current
  
  let rec push (self_:MutBorrow.t t_Vec) (v:Int32.t) (return'  (x:()))= any
    [ return''0 (result:())-> {[%#svec'0] view self_.final = Seq.snoc (view'0 self_) v} (! return' {result}) ]
  
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec create_arr[#"index_range.rs" 14 0 14 27] (return'  (x:t_Vec))= (! bb0
    [ bb0 = s0 [ s0 = new (fun (_ret:t_Vec) ->  [ &arr <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_4 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 = push {_4} {[%#sindex_range] (0: Int32.t)} (fun (_ret:()) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_6 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 = push {_6} {[%#sindex_range'0] (1: Int32.t)} (fun (_ret:()) ->  [ &_5 <- _ret ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_8 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 = push {_8} {[%#sindex_range'1] (2: Int32.t)} (fun (_ret:()) ->  [ &_7 <- _ret ] s2)
      | s2 = bb4 ]
    
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_10 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 = push {_10} {[%#sindex_range'2] (3: Int32.t)} (fun (_ret:()) ->  [ &_9 <- _ret ] s2)
      | s2 = bb5 ]
    
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_12 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 = push {_12} {[%#sindex_range'3] (4: Int32.t)} (fun (_ret:()) ->  [ &_11 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0 [ s0 =  [ &_0 <- arr ] s1 | s1 = bb7 ] 
    | bb7 = return''0 {_0} ]
    )
    [ & _0: t_Vec = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & _3: () = Any.any_l ()
    | & _4: MutBorrow.t t_Vec = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _6: MutBorrow.t t_Vec = Any.any_l ()
    | & _7: () = Any.any_l ()
    | & _8: MutBorrow.t t_Vec = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & _10: MutBorrow.t t_Vec = Any.any_l ()
    | & _11: () = Any.any_l ()
    | & _12: MutBorrow.t t_Vec = Any.any_l () ]
    
    [ return''0 (result:t_Vec)-> {[@expl:create_arr ensures] [%#sindex_range'4] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return' {result}) ]

end
module M_index_range__test_range [#"index_range.rs" 27 0 27 19]
  let%span sindex_range = "index_range.rs" 34 17 34 18
  let%span sindex_range'0 = "index_range.rs" 34 20 34 21
  let%span sindex_range'1 = "index_range.rs" 35 23 35 24
  let%span sindex_range'2 = "index_range.rs" 35 30 35 31
  let%span sindex_range'3 = "index_range.rs" 35 28 35 32
  let%span sindex_range'4 = "index_range.rs" 35 36 35 37
  let%span sindex_range'5 = "index_range.rs" 35 43 35 44
  let%span sindex_range'6 = "index_range.rs" 35 41 35 45
  let%span sindex_range'7 = "index_range.rs" 35 49 35 50
  let%span sindex_range'8 = "index_range.rs" 37 17 37 18
  let%span sindex_range'9 = "index_range.rs" 37 20 37 21
  let%span sindex_range'10 = "index_range.rs" 38 23 38 24
  let%span sindex_range'11 = "index_range.rs" 38 30 38 31
  let%span sindex_range'12 = "index_range.rs" 38 28 38 32
  let%span sindex_range'13 = "index_range.rs" 38 36 38 37
  let%span sindex_range'14 = "index_range.rs" 38 43 38 44
  let%span sindex_range'15 = "index_range.rs" 38 41 38 45
  let%span sindex_range'16 = "index_range.rs" 38 49 38 50
  let%span sindex_range'17 = "index_range.rs" 43 16 43 17
  let%span sindex_range'18 = "index_range.rs" 43 19 43 20
  let%span sindex_range'19 = "index_range.rs" 43 31 43 32
  let%span sindex_range'20 = "index_range.rs" 45 16 45 17
  let%span sindex_range'21 = "index_range.rs" 45 19 45 20
  let%span sindex_range'22 = "index_range.rs" 45 31 45 32
  let%span sindex_range'23 = "index_range.rs" 50 20 50 21
  let%span sindex_range'24 = "index_range.rs" 50 23 50 24
  let%span sindex_range'25 = "index_range.rs" 52 20 52 21
  let%span sindex_range'26 = "index_range.rs" 52 23 52 24
  let%span sindex_range'27 = "index_range.rs" 54 20 54 21
  let%span sindex_range'28 = "index_range.rs" 54 23 54 24
  let%span sindex_range'29 = "index_range.rs" 56 20 56 22
  let%span sindex_range'30 = "index_range.rs" 56 24 56 26
  let%span sindex_range'31 = "index_range.rs" 59 21 59 22
  let%span sindex_range'32 = "index_range.rs" 59 24 59 25
  let%span sindex_range'33 = "index_range.rs" 60 23 60 24
  let%span sindex_range'34 = "index_range.rs" 61 6 61 7
  let%span sindex_range'35 = "index_range.rs" 61 4 61 8
  let%span sindex_range'36 = "index_range.rs" 61 11 61 13
  let%span sindex_range'37 = "index_range.rs" 62 6 62 7
  let%span sindex_range'38 = "index_range.rs" 62 4 62 8
  let%span sindex_range'39 = "index_range.rs" 62 11 62 13
  let%span sindex_range'40 = "index_range.rs" 67 14 67 15
  let%span sindex_range'41 = "index_range.rs" 67 12 67 16
  let%span sindex_range'42 = "index_range.rs" 67 20 67 21
  let%span sindex_range'43 = "index_range.rs" 69 25 69 26
  let%span sindex_range'44 = "index_range.rs" 70 16 70 17
  let%span sindex_range'45 = "index_range.rs" 70 22 70 23
  let%span sindex_range'46 = "index_range.rs" 71 16 71 17
  let%span sindex_range'47 = "index_range.rs" 71 22 71 24
  let%span sindex_range'48 = "index_range.rs" 72 16 72 17
  let%span sindex_range'49 = "index_range.rs" 72 22 72 24
  let%span sindex_range'50 = "index_range.rs" 73 16 73 17
  let%span sindex_range'51 = "index_range.rs" 73 22 73 23
  let%span sindex_range'52 = "index_range.rs" 74 16 74 17
  let%span sindex_range'53 = "index_range.rs" 74 22 74 23
  let%span sindex_range'54 = "index_range.rs" 74 4 74 24
  let%span sindex_range'55 = "index_range.rs" 73 4 73 24
  let%span sindex_range'56 = "index_range.rs" 72 4 72 25
  let%span sindex_range'57 = "index_range.rs" 71 4 71 25
  let%span sindex_range'58 = "index_range.rs" 70 4 70 24
  let%span sindex_range'59 = "index_range.rs" 69 4 69 27
  let%span sindex_range'60 = "index_range.rs" 67 4 67 22
  let%span sindex_range'61 = "index_range.rs" 60 4 60 25
  let%span sindex_range'62 = "index_range.rs" 56 4 56 38
  let%span sindex_range'63 = "index_range.rs" 54 4 54 36
  let%span sindex_range'64 = "index_range.rs" 52 4 52 36
  let%span sindex_range'65 = "index_range.rs" 50 4 50 36
  let%span sindex_range'66 = "index_range.rs" 45 4 45 33
  let%span sindex_range'67 = "index_range.rs" 43 4 43 33
  let%span sindex_range'68 = "index_range.rs" 38 4 38 51
  let%span sindex_range'69 = "index_range.rs" 35 4 35 51
  let%span sindex_range'70 = "index_range.rs" 7 4 12 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 167 26 167 42
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'8 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 239 18 239 40
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 248 18 248 97
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 249 18 249 55
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 70
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 136 20 136 67
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 143 12 144 32
  let%span sslice'5 = "../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'6 = "../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'7 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'8 = "../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span soption = "../../creusot-contracts/src/std/option.rs" 82 26 82 51
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'8] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view self) ix
  
  let rec create_arr (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sindex_range'70] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return' {result}) ]
  
  
  type t_Range  =
    { t_Range__start: UInt64.t; t_Range__end: UInt64.t }
  
  predicate in_bounds (self: t_Range) (seq: Seq.seq Int32.t) =
    [%#sslice'2] UInt64.t'int self.t_Range__start <= UInt64.t'int self.t_Range__end
    /\ UInt64.t'int self.t_Range__end <= Seq.length seq
  
  function view'0 (self: t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. ([%#sslice'7] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'8] view'1 self = Slice64.id self)
  
  predicate has_value (self: t_Range) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    [%#sslice'3] Seq.([..]) seq (UInt64.t'int self.t_Range__start) (UInt64.t'int self.t_Range__end) = view'1 out
  
  let rec index (self_:t_Vec) (ix:t_Range) (return'  (x:Slice64.slice Int32.t))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  
  function view'2 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel] view'1 self
  
  let rec len (self_:Slice64.slice Int32.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sslice] Seq.length (view'2 self_) = UInt64.t'int result} (! return' {result}) ]
  
  
  let rec deref (self_:t_Vec) (return'  (x:Slice64.slice Int32.t))= any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'1] view'2 result = view'0 self_} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_:Slice64.slice Int32.t) (ix:t_Range) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sslice'0] in_bounds ix (view'2 self_)
       -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (view'2 self_) r)}
      {[%#sslice'1] in_bounds ix (view'2 self_) \/ result = C_None}
      (! return' {result}) ]
  
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  
  function view'3 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view self.current
  
  predicate resolve_elswhere (self: t_Range) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    [%#sslice'4] forall i: int. 0 <= i
    /\ (i < UInt64.t'int self.t_Range__start \/ UInt64.t'int self.t_Range__end <= i) /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:t_Range) (return'  (x:MutBorrow.t (Slice64.slice Int32.t)))= {[@expl:index_mut requires] [%#svec'2] in_bounds ix (view'3 self_)}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice Int32.t))-> {[%#svec'3] has_value ix (view'3 self_) result.current}
      {[%#svec'4] has_value ix (view self_.final) result.final}
      {[%#svec'5] resolve_elswhere ix (view'3 self_) (view self_.final)}
      {[%#svec'6] Seq.length (view self_.final) = Seq.length (view'3 self_)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Slice64.slice Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice Int32.t)) =
    resolve _0
  
  let rec len'0 (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec'7] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    [%#sslice'5] UInt64.t'int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    [%#sslice'6] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self_:t_Vec) (ix:UInt64.t) (return'  (x:Int32.t))= {[@expl:index requires] [%#svec] in_bounds'0 ix (view'0 self_)}
    any [ return''0 (result:Int32.t)-> {[%#svec'0] has_value'0 ix (view'0 self_) result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_range[#"index_range.rs" 27 0 27 19] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret:t_Vec) ->  [ &arr <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = 
        [ &_5 <- { t_Range__start = ([%#sindex_range] (0: UInt64.t));
                   t_Range__end = ([%#sindex_range'0] (2: UInt64.t)) } ]
        
        s1
      | s1 = index {arr} {_5} (fun (_ret:Slice64.slice Int32.t) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s2) | s2 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_7 <- _8 = ([%#sindex_range'1] (2: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb11) | br1 -> {_7} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 =  [ &_12 <- [%#sindex_range'2] (0: UInt64.t) ] s1
      | s1 =  [ &_13 <- Slice64.length s ] s2
      | s2 =  [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'3] _14} s4
      | s4 = bb5 ]
    
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r:Int32.t) ->  [ &_10 <- r = ([%#sindex_range'4] (0: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb10) | br1 -> {_10} (! bb6) ]  ]
    
    | bb6 = s0
      [ s0 =  [ &_17 <- [%#sindex_range'5] (1: UInt64.t) ] s1
      | s1 =  [ &_18 <- Slice64.length s ] s2
      | s2 =  [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'6] _19} s4
      | s4 = bb7 ]
    
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r:Int32.t) ->  [ &_15 <- r = ([%#sindex_range'7] (1: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]  ]
    
    | bb8 = s0
      [ s0 = 
        [ &_24 <- { t_Range__start = ([%#sindex_range'8] (3: UInt64.t));
                    t_Range__end = ([%#sindex_range'9] (5: UInt64.t)) } ]
        
        s1
      | s1 = index {arr} {_24} (fun (_ret:Slice64.slice Int32.t) ->  [ &_22 <- _ret ] s2)
      | s2 = bb13 ]
    
    | bb13 = s0 [ s0 =  [ &s'0 <- _22 ] s1 | s1 = len {s'0} (fun (_ret:UInt64.t) ->  [ &_27 <- _ret ] s2) | s2 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &_26 <- _27 = ([%#sindex_range'10] (2: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_26 = false} (! bb22) | br1 -> {_26} (! bb15) ]  ]
    
    | bb15 = s0
      [ s0 =  [ &_31 <- [%#sindex_range'11] (0: UInt64.t) ] s1
      | s1 =  [ &_32 <- Slice64.length s'0 ] s2
      | s2 =  [ &_33 <- UInt64.lt _31 _32 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'12] _33} s4
      | s4 = bb16 ]
    
    | bb16 = s0
      [ s0 = Slice64.get <Int32.t> {s'0} {_31}
          (fun (r:Int32.t) ->  [ &_29 <- r = ([%#sindex_range'13] (3: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_29 = false} (! bb21) | br1 -> {_29} (! bb17) ]  ]
    
    | bb17 = s0
      [ s0 =  [ &_36 <- [%#sindex_range'14] (1: UInt64.t) ] s1
      | s1 =  [ &_37 <- Slice64.length s'0 ] s2
      | s2 =  [ &_38 <- UInt64.lt _36 _37 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'15] _38} s4
      | s4 = bb18 ]
    
    | bb18 = s0
      [ s0 = Slice64.get <Int32.t> {s'0} {_36}
          (fun (r:Int32.t) ->  [ &_34 <- r = ([%#sindex_range'16] (4: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_34 = false} (! bb20) | br1 -> {_34} (! bb19) ]  ]
    
    | bb19 = s0
      [ s0 = 
        [ &_46 <- { t_Range__start = ([%#sindex_range'17] (2: UInt64.t));
                    t_Range__end = ([%#sindex_range'18] (2: UInt64.t)) } ]
        
        s1
      | s1 = index {arr} {_46} (fun (_ret:Slice64.slice Int32.t) ->  [ &_44 <- _ret ] s2)
      | s2 = bb24 ]
    
    | bb24 = s0 [ s0 = len {_44} (fun (_ret:UInt64.t) ->  [ &_42 <- _ret ] s1) | s1 = bb25 ] 
    | bb25 = s0
      [ s0 =  [ &_41 <- _42 = ([%#sindex_range'19] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_41 = false} (! bb27) | br1 -> {_41} (! bb26) ]  ]
    
    | bb26 = s0
      [ s0 = 
        [ &_54 <- { t_Range__start = ([%#sindex_range'20] (5: UInt64.t));
                    t_Range__end = ([%#sindex_range'21] (5: UInt64.t)) } ]
        
        s1
      | s1 = index {arr} {_54} (fun (_ret:Slice64.slice Int32.t) ->  [ &_52 <- _ret ] s2)
      | s2 = bb28 ]
    
    | bb28 = s0 [ s0 = len {_52} (fun (_ret:UInt64.t) ->  [ &_50 <- _ret ] s1) | s1 = bb29 ] 
    | bb29 = s0
      [ s0 =  [ &_49 <- _50 = ([%#sindex_range'22] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_49 = false} (! bb31) | br1 -> {_49} (! bb30) ]  ]
    
    | bb30 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_61 <- _ret ] s1) | s1 = bb32 ] 
    | bb32 = s0
      [ s0 = 
        [ &_63 <- { t_Range__start = ([%#sindex_range'23] (2: UInt64.t));
                    t_Range__end = ([%#sindex_range'24] (6: UInt64.t)) } ]
        
        s1
      | s1 = get {_61} {_63} (fun (_ret:t_Option) ->  [ &_59 <- _ret ] s2)
      | s2 = bb33 ]
    
    | bb33 = s0 [ s0 = is_none {_59} (fun (_ret:bool) ->  [ &_57 <- _ret ] s1) | s1 = bb34 ] 
    | bb34 = any [ br0 -> {_57 = false} (! bb36) | br1 -> {_57} (! bb35) ] 
    | bb35 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_70 <- _ret ] s1) | s1 = bb37 ] 
    | bb37 = s0
      [ s0 = 
        [ &_72 <- { t_Range__start = ([%#sindex_range'25] (2: UInt64.t));
                    t_Range__end = ([%#sindex_range'26] (1: UInt64.t)) } ]
        
        s1
      | s1 = get {_70} {_72} (fun (_ret:t_Option) ->  [ &_68 <- _ret ] s2)
      | s2 = bb38 ]
    
    | bb38 = s0 [ s0 = is_none {_68} (fun (_ret:bool) ->  [ &_66 <- _ret ] s1) | s1 = bb39 ] 
    | bb39 = any [ br0 -> {_66 = false} (! bb41) | br1 -> {_66} (! bb40) ] 
    | bb40 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_79 <- _ret ] s1) | s1 = bb42 ] 
    | bb42 = s0
      [ s0 = 
        [ &_81 <- { t_Range__start = ([%#sindex_range'27] (6: UInt64.t));
                    t_Range__end = ([%#sindex_range'28] (6: UInt64.t)) } ]
        
        s1
      | s1 = get {_79} {_81} (fun (_ret:t_Option) ->  [ &_77 <- _ret ] s2)
      | s2 = bb43 ]
    
    | bb43 = s0 [ s0 = is_none {_77} (fun (_ret:bool) ->  [ &_75 <- _ret ] s1) | s1 = bb44 ] 
    | bb44 = any [ br0 -> {_75 = false} (! bb46) | br1 -> {_75} (! bb45) ] 
    | bb45 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_88 <- _ret ] s1) | s1 = bb47 ] 
    | bb47 = s0
      [ s0 = 
        [ &_90 <- { t_Range__start = ([%#sindex_range'29] (10: UInt64.t));
                    t_Range__end = ([%#sindex_range'30] (10: UInt64.t)) } ]
        
        s1
      | s1 = get {_88} {_90} (fun (_ret:t_Option) ->  [ &_86 <- _ret ] s2)
      | s2 = bb48 ]
    
    | bb48 = s0 [ s0 = is_none {_86} (fun (_ret:bool) ->  [ &_84 <- _ret ] s1) | s1 = bb49 ] 
    | bb49 = any [ br0 -> {_84 = false} (! bb51) | br1 -> {_84} (! bb50) ] 
    | bb50 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_94 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 = 
        [ &_95 <- { t_Range__start = ([%#sindex_range'31] (1: UInt64.t));
                    t_Range__end = ([%#sindex_range'32] (4: UInt64.t)) } ]
        
        s2
      | s2 = index_mut {_94} {_95} (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->  [ &_93 <- _ret ] s3)
      | s3 = bb52 ]
    
    | bb52 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_93.current} {MutBorrow.get_id _93}
          (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->
             [ &s'1 <- _ret ] 
             [ &_93 <- { _93 with current = _ret.final } ] 
            s1)
      | s1 = len {s'1.current} (fun (_ret:UInt64.t) ->  [ &_98 <- _ret ] s2)
      | s2 = bb53 ]
    
    | bb53 = s0
      [ s0 =  [ &_97 <- _98 = ([%#sindex_range'33] (3: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_97 = false} (! bb55) | br1 -> {_97} (! bb54) ]  ]
    
    | bb54 = s0
      [ s0 =  [ &_101 <- [%#sindex_range'34] (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'1.current}-  [ &_102 <- _ptr ] s2)
      | s2 =  [ &_103 <- Slice64.slice_ptr_len _102 ] s3
      | s3 =  [ &_104 <- UInt64.lt _101 _103 ] s4
      | s4 = {[@expl:index in bounds] [%#sindex_range'35] _104} s5
      | s5 = bb56 ]
    
    | bb56 = s0
      [ s0 = Slice64.set <Int32.t> {s'1.current} {_101} {[%#sindex_range'36] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'1 <- { s'1 with current = r } ] s1)
      | s1 =  [ &_105 <- [%#sindex_range'37] (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'1.current}-  [ &_106 <- _ptr ] s3)
      | s3 =  [ &_107 <- Slice64.slice_ptr_len _106 ] s4
      | s4 =  [ &_108 <- UInt64.lt _105 _107 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'38] _108} s6
      | s6 = bb57 ]
    
    | bb57 = s0
      [ s0 = Slice64.set <Int32.t> {s'1.current} {_105} {[%#sindex_range'39] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'1 <- { s'1 with current = r } ] s1)
      | s1 =  [ &_112 <- [%#sindex_range'40] (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'1.current}-  [ &_113 <- _ptr ] s3)
      | s3 =  [ &_114 <- Slice64.slice_ptr_len _113 ] s4
      | s4 =  [ &_115 <- UInt64.lt _112 _114 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'41] _115} s6
      | s6 = bb58 ]
    
    | bb58 = s0
      [ s0 = -{resolve'0 s'1}- s1
      | s1 = -{resolve'0 _93}- s2
      | s2 = Slice64.get <Int32.t> {s'1.current} {_112}
          (fun (r:Int32.t) ->  [ &_110 <- r = ([%#sindex_range'42] (3: Int32.t)) ] s3)
      | s3 = any [ br0 -> {_110 = false} (! bb60) | br1 -> {_110} (! bb59) ]  ]
    
    | bb59 = s0 [ s0 = len'0 {arr} (fun (_ret:UInt64.t) ->  [ &_119 <- _ret ] s1) | s1 = bb61 ] 
    | bb61 = s0
      [ s0 =  [ &_118 <- _119 = ([%#sindex_range'43] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_118 = false} (! bb63) | br1 -> {_118} (! bb62) ]  ]
    
    | bb62 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'44] (0: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_125 <- _ret ] s1)
      | s1 = bb64 ]
    
    | bb64 = s0
      [ s0 =  [ &_123 <- _125 = ([%#sindex_range'45] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_123 = false} (! bb66) | br1 -> {_123} (! bb65) ]  ]
    
    | bb65 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'46] (1: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_131 <- _ret ] s1)
      | s1 = bb67 ]
    
    | bb67 = s0
      [ s0 =  [ &_129 <- _131 = ([%#sindex_range'47] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_129 = false} (! bb69) | br1 -> {_129} (! bb68) ]  ]
    
    | bb68 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'48] (2: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_137 <- _ret ] s1)
      | s1 = bb70 ]
    
    | bb70 = s0
      [ s0 =  [ &_135 <- _137 = ([%#sindex_range'49] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_135 = false} (! bb72) | br1 -> {_135} (! bb71) ]  ]
    
    | bb71 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'50] (3: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_143 <- _ret ] s1)
      | s1 = bb73 ]
    
    | bb73 = s0
      [ s0 =  [ &_141 <- _143 = ([%#sindex_range'51] (3: Int32.t)) ] s1
      | s1 = any [ br0 -> {_141 = false} (! bb75) | br1 -> {_141} (! bb74) ]  ]
    
    | bb74 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'52] (4: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_149 <- _ret ] s1)
      | s1 = bb76 ]
    
    | bb76 = s0
      [ s0 =  [ &_147 <- _149 = ([%#sindex_range'53] (4: Int32.t)) ] s1
      | s1 = any [ br0 -> {_147 = false} (! bb78) | br1 -> {_147} (! bb77) ]  ]
    
    | bb77 = bb79
    | bb79 = return''0 {_0}
    | bb78 = {[%#sindex_range'54] false} any
    | bb75 = {[%#sindex_range'55] false} any
    | bb72 = {[%#sindex_range'56] false} any
    | bb69 = {[%#sindex_range'57] false} any
    | bb66 = {[%#sindex_range'58] false} any
    | bb63 = {[%#sindex_range'59] false} any
    | bb60 = {[%#sindex_range'60] false} any
    | bb55 = s0 [ s0 = -{resolve'0 s'1}- s1 | s1 = -{resolve'0 _93}- s2 | s2 = {[%#sindex_range'61] false} any ] 
    | bb51 = {[%#sindex_range'62] false} any
    | bb46 = {[%#sindex_range'63] false} any
    | bb41 = {[%#sindex_range'64] false} any
    | bb36 = {[%#sindex_range'65] false} any
    | bb31 = {[%#sindex_range'66] false} any
    | bb27 = {[%#sindex_range'67] false} any
    | bb20 = bb23
    | bb21 = bb23
    | bb22 = bb23
    | bb23 = {[%#sindex_range'68] false} any
    | bb9 = bb12
    | bb10 = bb12
    | bb11 = bb12
    | bb12 = {[%#sindex_range'69] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_Range = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & s'0: Slice64.slice Int32.t = Any.any_l ()
    | & _22: Slice64.slice Int32.t = Any.any_l ()
    | & _24: t_Range = Any.any_l ()
    | & _26: bool = Any.any_l ()
    | & _27: UInt64.t = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _31: UInt64.t = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & _33: bool = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & _36: UInt64.t = Any.any_l ()
    | & _37: UInt64.t = Any.any_l ()
    | & _38: bool = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: UInt64.t = Any.any_l ()
    | & _44: Slice64.slice Int32.t = Any.any_l ()
    | & _46: t_Range = Any.any_l ()
    | & _49: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l ()
    | & _52: Slice64.slice Int32.t = Any.any_l ()
    | & _54: t_Range = Any.any_l ()
    | & _57: bool = Any.any_l ()
    | & _59: t_Option = Any.any_l ()
    | & _61: Slice64.slice Int32.t = Any.any_l ()
    | & _63: t_Range = Any.any_l ()
    | & _66: bool = Any.any_l ()
    | & _68: t_Option = Any.any_l ()
    | & _70: Slice64.slice Int32.t = Any.any_l ()
    | & _72: t_Range = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _77: t_Option = Any.any_l ()
    | & _79: Slice64.slice Int32.t = Any.any_l ()
    | & _81: t_Range = Any.any_l ()
    | & _84: bool = Any.any_l ()
    | & _86: t_Option = Any.any_l ()
    | & _88: Slice64.slice Int32.t = Any.any_l ()
    | & _90: t_Range = Any.any_l ()
    | & s'1: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _93: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _94: MutBorrow.t t_Vec = Any.any_l ()
    | & _95: t_Range = Any.any_l ()
    | & _97: bool = Any.any_l ()
    | & _98: UInt64.t = Any.any_l ()
    | & _101: UInt64.t = Any.any_l ()
    | & _102: Opaque.ptr = Any.any_l ()
    | & _103: UInt64.t = Any.any_l ()
    | & _104: bool = Any.any_l ()
    | & _105: UInt64.t = Any.any_l ()
    | & _106: Opaque.ptr = Any.any_l ()
    | & _107: UInt64.t = Any.any_l ()
    | & _108: bool = Any.any_l ()
    | & _110: bool = Any.any_l ()
    | & _112: UInt64.t = Any.any_l ()
    | & _113: Opaque.ptr = Any.any_l ()
    | & _114: UInt64.t = Any.any_l ()
    | & _115: bool = Any.any_l ()
    | & _118: bool = Any.any_l ()
    | & _119: UInt64.t = Any.any_l ()
    | & _123: bool = Any.any_l ()
    | & _125: Int32.t = Any.any_l ()
    | & _129: bool = Any.any_l ()
    | & _131: Int32.t = Any.any_l ()
    | & _135: bool = Any.any_l ()
    | & _137: Int32.t = Any.any_l ()
    | & _141: bool = Any.any_l ()
    | & _143: Int32.t = Any.any_l ()
    | & _147: bool = Any.any_l ()
    | & _149: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_index_range__test_range_to [#"index_range.rs" 78 0 78 22]
  let%span sindex_range = "index_range.rs" 85 19 85 20
  let%span sindex_range'0 = "index_range.rs" 86 23 86 24
  let%span sindex_range'1 = "index_range.rs" 86 30 86 31
  let%span sindex_range'2 = "index_range.rs" 86 28 86 32
  let%span sindex_range'3 = "index_range.rs" 86 36 86 37
  let%span sindex_range'4 = "index_range.rs" 86 43 86 44
  let%span sindex_range'5 = "index_range.rs" 86 41 86 45
  let%span sindex_range'6 = "index_range.rs" 86 49 86 50
  let%span sindex_range'7 = "index_range.rs" 91 18 91 19
  let%span sindex_range'8 = "index_range.rs" 91 30 91 31
  let%span sindex_range'9 = "index_range.rs" 96 22 96 23
  let%span sindex_range'10 = "index_range.rs" 99 23 99 24
  let%span sindex_range'11 = "index_range.rs" 100 23 100 24
  let%span sindex_range'12 = "index_range.rs" 101 6 101 7
  let%span sindex_range'13 = "index_range.rs" 101 4 101 8
  let%span sindex_range'14 = "index_range.rs" 101 11 101 13
  let%span sindex_range'15 = "index_range.rs" 102 6 102 7
  let%span sindex_range'16 = "index_range.rs" 102 4 102 8
  let%span sindex_range'17 = "index_range.rs" 102 11 102 13
  let%span sindex_range'18 = "index_range.rs" 104 14 104 15
  let%span sindex_range'19 = "index_range.rs" 104 12 104 16
  let%span sindex_range'20 = "index_range.rs" 104 20 104 21
  let%span sindex_range'21 = "index_range.rs" 106 25 106 26
  let%span sindex_range'22 = "index_range.rs" 107 16 107 17
  let%span sindex_range'23 = "index_range.rs" 107 22 107 24
  let%span sindex_range'24 = "index_range.rs" 108 16 108 17
  let%span sindex_range'25 = "index_range.rs" 108 22 108 23
  let%span sindex_range'26 = "index_range.rs" 109 16 109 17
  let%span sindex_range'27 = "index_range.rs" 109 22 109 24
  let%span sindex_range'28 = "index_range.rs" 110 16 110 17
  let%span sindex_range'29 = "index_range.rs" 110 22 110 23
  let%span sindex_range'30 = "index_range.rs" 111 16 111 17
  let%span sindex_range'31 = "index_range.rs" 111 22 111 23
  let%span sindex_range'32 = "index_range.rs" 111 4 111 24
  let%span sindex_range'33 = "index_range.rs" 110 4 110 24
  let%span sindex_range'34 = "index_range.rs" 109 4 109 25
  let%span sindex_range'35 = "index_range.rs" 108 4 108 24
  let%span sindex_range'36 = "index_range.rs" 107 4 107 25
  let%span sindex_range'37 = "index_range.rs" 106 4 106 27
  let%span sindex_range'38 = "index_range.rs" 104 4 104 22
  let%span sindex_range'39 = "index_range.rs" 100 4 100 25
  let%span sindex_range'40 = "index_range.rs" 96 4 96 35
  let%span sindex_range'41 = "index_range.rs" 91 4 91 32
  let%span sindex_range'42 = "index_range.rs" 86 4 86 51
  let%span sindex_range'43 = "index_range.rs" 7 4 12 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 167 26 167 42
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'8 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 239 18 239 40
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 248 18 248 97
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 249 18 249 55
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 153 20 153 42
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 159 20 159 57
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 165 20 165 82
  let%span sslice'5 = "../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'6 = "../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'7 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'8 = "../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span soption = "../../creusot-contracts/src/std/option.rs" 82 26 82 51
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'8] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view self) ix
  
  let rec create_arr (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sindex_range'43] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return' {result}) ]
  
  
  type t_RangeTo  =
    { t_RangeTo__end: UInt64.t }
  
  predicate in_bounds (self: t_RangeTo) (seq: Seq.seq Int32.t) =
    [%#sslice'2] UInt64.t'int self.t_RangeTo__end <= Seq.length seq
  
  function view'0 (self: t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. ([%#sslice'7] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'8] view'1 self = Slice64.id self)
  
  predicate has_value (self: t_RangeTo) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    [%#sslice'3] Seq.([..]) seq 0 (UInt64.t'int self.t_RangeTo__end) = view'1 out
  
  let rec index (self_:t_Vec) (ix:t_RangeTo) (return'  (x:Slice64.slice Int32.t))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  
  function view'2 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel] view'1 self
  
  let rec len (self_:Slice64.slice Int32.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sslice] Seq.length (view'2 self_) = UInt64.t'int result} (! return' {result}) ]
  
  
  let rec deref (self_:t_Vec) (return'  (x:Slice64.slice Int32.t))= any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'1] view'2 result = view'0 self_} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_:Slice64.slice Int32.t) (ix:t_RangeTo) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sslice'0] in_bounds ix (view'2 self_)
       -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (view'2 self_) r)}
      {[%#sslice'1] in_bounds ix (view'2 self_) \/ result = C_None}
      (! return' {result}) ]
  
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  
  function view'3 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view self.current
  
  predicate resolve_elswhere (self: t_RangeTo) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    [%#sslice'4] forall i: int. UInt64.t'int self.t_RangeTo__end <= i /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:t_RangeTo) (return'  (x:MutBorrow.t (Slice64.slice Int32.t)))= {[@expl:index_mut requires] [%#svec'2] in_bounds ix (view'3 self_)}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice Int32.t))-> {[%#svec'3] has_value ix (view'3 self_) result.current}
      {[%#svec'4] has_value ix (view self_.final) result.final}
      {[%#svec'5] resolve_elswhere ix (view'3 self_) (view self_.final)}
      {[%#svec'6] Seq.length (view self_.final) = Seq.length (view'3 self_)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Slice64.slice Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice Int32.t)) =
    resolve _0
  
  let rec len'0 (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec'7] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    [%#sslice'5] UInt64.t'int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    [%#sslice'6] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self_:t_Vec) (ix:UInt64.t) (return'  (x:Int32.t))= {[@expl:index requires] [%#svec] in_bounds'0 ix (view'0 self_)}
    any [ return''0 (result:Int32.t)-> {[%#svec'0] has_value'0 ix (view'0 self_) result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_range_to[#"index_range.rs" 78 0 78 22] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret:t_Vec) ->  [ &arr <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_5 <- { t_RangeTo__end = ([%#sindex_range] (2: UInt64.t)) } ] s1
      | s1 = index {arr} {_5} (fun (_ret:Slice64.slice Int32.t) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s2) | s2 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_7 <- _8 = ([%#sindex_range'0] (2: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb11) | br1 -> {_7} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 =  [ &_12 <- [%#sindex_range'1] (0: UInt64.t) ] s1
      | s1 =  [ &_13 <- Slice64.length s ] s2
      | s2 =  [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'2] _14} s4
      | s4 = bb5 ]
    
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r:Int32.t) ->  [ &_10 <- r = ([%#sindex_range'3] (0: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb10) | br1 -> {_10} (! bb6) ]  ]
    
    | bb6 = s0
      [ s0 =  [ &_17 <- [%#sindex_range'4] (1: UInt64.t) ] s1
      | s1 =  [ &_18 <- Slice64.length s ] s2
      | s2 =  [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'5] _19} s4
      | s4 = bb7 ]
    
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r:Int32.t) ->  [ &_15 <- r = ([%#sindex_range'6] (1: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]  ]
    
    | bb8 = s0
      [ s0 =  [ &_27 <- { t_RangeTo__end = ([%#sindex_range'7] (0: UInt64.t)) } ] s1
      | s1 = index {arr} {_27} (fun (_ret:Slice64.slice Int32.t) ->  [ &_25 <- _ret ] s2)
      | s2 = bb13 ]
    
    | bb13 = s0 [ s0 = len {_25} (fun (_ret:UInt64.t) ->  [ &_23 <- _ret ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &_22 <- _23 = ([%#sindex_range'8] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_22 = false} (! bb16) | br1 -> {_22} (! bb15) ]  ]
    
    | bb15 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_34 <- _ret ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 =  [ &_36 <- { t_RangeTo__end = ([%#sindex_range'9] (6: UInt64.t)) } ] s1
      | s1 = get {_34} {_36} (fun (_ret:t_Option) ->  [ &_32 <- _ret ] s2)
      | s2 = bb18 ]
    
    | bb18 = s0 [ s0 = is_none {_32} (fun (_ret:bool) ->  [ &_30 <- _ret ] s1) | s1 = bb19 ] 
    | bb19 = any [ br0 -> {_30 = false} (! bb21) | br1 -> {_30} (! bb20) ] 
    | bb20 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_40 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 =  [ &_41 <- { t_RangeTo__end = ([%#sindex_range'10] (3: UInt64.t)) } ] s2
      | s2 = index_mut {_40} {_41} (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->  [ &_39 <- _ret ] s3)
      | s3 = bb22 ]
    
    | bb22 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_39.current} {MutBorrow.get_id _39}
          (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->
             [ &s'0 <- _ret ] 
             [ &_39 <- { _39 with current = _ret.final } ] 
            s1)
      | s1 = len {s'0.current} (fun (_ret:UInt64.t) ->  [ &_44 <- _ret ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0
      [ s0 =  [ &_43 <- _44 = ([%#sindex_range'11] (3: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_43 = false} (! bb25) | br1 -> {_43} (! bb24) ]  ]
    
    | bb24 = s0
      [ s0 =  [ &_47 <- [%#sindex_range'12] (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_48 <- _ptr ] s2)
      | s2 =  [ &_49 <- Slice64.slice_ptr_len _48 ] s3
      | s3 =  [ &_50 <- UInt64.lt _47 _49 ] s4
      | s4 = {[@expl:index in bounds] [%#sindex_range'13] _50} s5
      | s5 = bb26 ]
    
    | bb26 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_47} {[%#sindex_range'14] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_51 <- [%#sindex_range'15] (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_52 <- _ptr ] s3)
      | s3 =  [ &_53 <- Slice64.slice_ptr_len _52 ] s4
      | s4 =  [ &_54 <- UInt64.lt _51 _53 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'16] _54} s6
      | s6 = bb27 ]
    
    | bb27 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_51} {[%#sindex_range'17] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_58 <- [%#sindex_range'18] (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_59 <- _ptr ] s3)
      | s3 =  [ &_60 <- Slice64.slice_ptr_len _59 ] s4
      | s4 =  [ &_61 <- UInt64.lt _58 _60 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'19] _61} s6
      | s6 = bb28 ]
    
    | bb28 = s0
      [ s0 = -{resolve'0 s'0}- s1
      | s1 = -{resolve'0 _39}- s2
      | s2 = Slice64.get <Int32.t> {s'0.current} {_58}
          (fun (r:Int32.t) ->  [ &_56 <- r = ([%#sindex_range'20] (1: Int32.t)) ] s3)
      | s3 = any [ br0 -> {_56 = false} (! bb30) | br1 -> {_56} (! bb29) ]  ]
    
    | bb29 = s0 [ s0 = len'0 {arr} (fun (_ret:UInt64.t) ->  [ &_65 <- _ret ] s1) | s1 = bb31 ] 
    | bb31 = s0
      [ s0 =  [ &_64 <- _65 = ([%#sindex_range'21] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_64 = false} (! bb33) | br1 -> {_64} (! bb32) ]  ]
    
    | bb32 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'22] (0: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_71 <- _ret ] s1)
      | s1 = bb34 ]
    
    | bb34 = s0
      [ s0 =  [ &_69 <- _71 = ([%#sindex_range'23] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_69 = false} (! bb36) | br1 -> {_69} (! bb35) ]  ]
    
    | bb35 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'24] (1: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_77 <- _ret ] s1)
      | s1 = bb37 ]
    
    | bb37 = s0
      [ s0 =  [ &_75 <- _77 = ([%#sindex_range'25] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_75 = false} (! bb39) | br1 -> {_75} (! bb38) ]  ]
    
    | bb38 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'26] (2: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_83 <- _ret ] s1)
      | s1 = bb40 ]
    
    | bb40 = s0
      [ s0 =  [ &_81 <- _83 = ([%#sindex_range'27] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_81 = false} (! bb42) | br1 -> {_81} (! bb41) ]  ]
    
    | bb41 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'28] (3: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_89 <- _ret ] s1)
      | s1 = bb43 ]
    
    | bb43 = s0
      [ s0 =  [ &_87 <- _89 = ([%#sindex_range'29] (3: Int32.t)) ] s1
      | s1 = any [ br0 -> {_87 = false} (! bb45) | br1 -> {_87} (! bb44) ]  ]
    
    | bb44 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'30] (4: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_95 <- _ret ] s1)
      | s1 = bb46 ]
    
    | bb46 = s0
      [ s0 =  [ &_93 <- _95 = ([%#sindex_range'31] (4: Int32.t)) ] s1
      | s1 = any [ br0 -> {_93 = false} (! bb48) | br1 -> {_93} (! bb47) ]  ]
    
    | bb47 = bb49
    | bb49 = return''0 {_0}
    | bb48 = {[%#sindex_range'32] false} any
    | bb45 = {[%#sindex_range'33] false} any
    | bb42 = {[%#sindex_range'34] false} any
    | bb39 = {[%#sindex_range'35] false} any
    | bb36 = {[%#sindex_range'36] false} any
    | bb33 = {[%#sindex_range'37] false} any
    | bb30 = {[%#sindex_range'38] false} any
    | bb25 = s0 [ s0 = -{resolve'0 s'0}- s1 | s1 = -{resolve'0 _39}- s2 | s2 = {[%#sindex_range'39] false} any ] 
    | bb21 = {[%#sindex_range'40] false} any
    | bb16 = {[%#sindex_range'41] false} any
    | bb9 = bb12
    | bb10 = bb12
    | bb11 = bb12
    | bb12 = {[%#sindex_range'42] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_RangeTo = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & _25: Slice64.slice Int32.t = Any.any_l ()
    | & _27: t_RangeTo = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _34: Slice64.slice Int32.t = Any.any_l ()
    | & _36: t_RangeTo = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _39: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _40: MutBorrow.t t_Vec = Any.any_l ()
    | & _41: t_RangeTo = Any.any_l ()
    | & _43: bool = Any.any_l ()
    | & _44: UInt64.t = Any.any_l ()
    | & _47: UInt64.t = Any.any_l ()
    | & _48: Opaque.ptr = Any.any_l ()
    | & _49: UInt64.t = Any.any_l ()
    | & _50: bool = Any.any_l ()
    | & _51: UInt64.t = Any.any_l ()
    | & _52: Opaque.ptr = Any.any_l ()
    | & _53: UInt64.t = Any.any_l ()
    | & _54: bool = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _58: UInt64.t = Any.any_l ()
    | & _59: Opaque.ptr = Any.any_l ()
    | & _60: UInt64.t = Any.any_l ()
    | & _61: bool = Any.any_l ()
    | & _64: bool = Any.any_l ()
    | & _65: UInt64.t = Any.any_l ()
    | & _69: bool = Any.any_l ()
    | & _71: Int32.t = Any.any_l ()
    | & _75: bool = Any.any_l ()
    | & _77: Int32.t = Any.any_l ()
    | & _81: bool = Any.any_l ()
    | & _83: Int32.t = Any.any_l ()
    | & _87: bool = Any.any_l ()
    | & _89: Int32.t = Any.any_l ()
    | & _93: bool = Any.any_l ()
    | & _95: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_index_range__test_range_from [#"index_range.rs" 115 0 115 24]
  let%span sindex_range = "index_range.rs" 122 17 122 18
  let%span sindex_range'0 = "index_range.rs" 123 23 123 24
  let%span sindex_range'1 = "index_range.rs" 123 30 123 31
  let%span sindex_range'2 = "index_range.rs" 123 28 123 32
  let%span sindex_range'3 = "index_range.rs" 123 36 123 37
  let%span sindex_range'4 = "index_range.rs" 123 43 123 44
  let%span sindex_range'5 = "index_range.rs" 123 41 123 45
  let%span sindex_range'6 = "index_range.rs" 123 49 123 50
  let%span sindex_range'7 = "index_range.rs" 128 16 128 17
  let%span sindex_range'8 = "index_range.rs" 128 30 128 31
  let%span sindex_range'9 = "index_range.rs" 133 20 133 21
  let%span sindex_range'10 = "index_range.rs" 135 20 135 22
  let%span sindex_range'11 = "index_range.rs" 138 21 138 22
  let%span sindex_range'12 = "index_range.rs" 139 23 139 24
  let%span sindex_range'13 = "index_range.rs" 140 6 140 7
  let%span sindex_range'14 = "index_range.rs" 140 4 140 8
  let%span sindex_range'15 = "index_range.rs" 140 11 140 13
  let%span sindex_range'16 = "index_range.rs" 141 6 141 7
  let%span sindex_range'17 = "index_range.rs" 141 4 141 8
  let%span sindex_range'18 = "index_range.rs" 141 11 141 13
  let%span sindex_range'19 = "index_range.rs" 143 14 143 15
  let%span sindex_range'20 = "index_range.rs" 143 12 143 16
  let%span sindex_range'21 = "index_range.rs" 143 20 143 21
  let%span sindex_range'22 = "index_range.rs" 145 25 145 26
  let%span sindex_range'23 = "index_range.rs" 146 16 146 17
  let%span sindex_range'24 = "index_range.rs" 146 22 146 23
  let%span sindex_range'25 = "index_range.rs" 147 16 147 17
  let%span sindex_range'26 = "index_range.rs" 147 22 147 23
  let%span sindex_range'27 = "index_range.rs" 148 16 148 17
  let%span sindex_range'28 = "index_range.rs" 148 22 148 24
  let%span sindex_range'29 = "index_range.rs" 149 16 149 17
  let%span sindex_range'30 = "index_range.rs" 149 22 149 24
  let%span sindex_range'31 = "index_range.rs" 150 16 150 17
  let%span sindex_range'32 = "index_range.rs" 150 22 150 23
  let%span sindex_range'33 = "index_range.rs" 150 4 150 24
  let%span sindex_range'34 = "index_range.rs" 149 4 149 25
  let%span sindex_range'35 = "index_range.rs" 148 4 148 25
  let%span sindex_range'36 = "index_range.rs" 147 4 147 24
  let%span sindex_range'37 = "index_range.rs" 146 4 146 24
  let%span sindex_range'38 = "index_range.rs" 145 4 145 27
  let%span sindex_range'39 = "index_range.rs" 143 4 143 22
  let%span sindex_range'40 = "index_range.rs" 139 4 139 25
  let%span sindex_range'41 = "index_range.rs" 135 4 135 36
  let%span sindex_range'42 = "index_range.rs" 133 4 133 35
  let%span sindex_range'43 = "index_range.rs" 128 4 128 32
  let%span sindex_range'44 = "index_range.rs" 123 4 123 51
  let%span sindex_range'45 = "index_range.rs" 7 4 12 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 167 26 167 42
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'8 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 239 18 239 40
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 248 18 248 97
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 249 18 249 55
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 173 20 173 44
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 179 20 179 67
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 186 12 186 85
  let%span sslice'5 = "../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'6 = "../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'7 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'8 = "../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span soption = "../../creusot-contracts/src/std/option.rs" 82 26 82 51
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'8] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view self) ix
  
  let rec create_arr (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sindex_range'45] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return' {result}) ]
  
  
  type t_RangeFrom  =
    { t_RangeFrom__start: UInt64.t }
  
  predicate in_bounds (self: t_RangeFrom) (seq: Seq.seq Int32.t) =
    [%#sslice'2] UInt64.t'int self.t_RangeFrom__start <= Seq.length seq
  
  function view'0 (self: t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. ([%#sslice'7] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'8] view'1 self = Slice64.id self)
  
  predicate has_value (self: t_RangeFrom) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    [%#sslice'3] Seq.([..]) seq (UInt64.t'int self.t_RangeFrom__start) (Seq.length seq) = view'1 out
  
  let rec index (self_:t_Vec) (ix:t_RangeFrom) (return'  (x:Slice64.slice Int32.t))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  
  function view'2 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel] view'1 self
  
  let rec len (self_:Slice64.slice Int32.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sslice] Seq.length (view'2 self_) = UInt64.t'int result} (! return' {result}) ]
  
  
  let rec deref (self_:t_Vec) (return'  (x:Slice64.slice Int32.t))= any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'1] view'2 result = view'0 self_} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_:Slice64.slice Int32.t) (ix:t_RangeFrom) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sslice'0] in_bounds ix (view'2 self_)
       -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (view'2 self_) r)}
      {[%#sslice'1] in_bounds ix (view'2 self_) \/ result = C_None}
      (! return' {result}) ]
  
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  
  function view'3 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view self.current
  
  predicate resolve_elswhere (self: t_RangeFrom) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    [%#sslice'4] forall i: int. 0 <= i /\ i < UInt64.t'int self.t_RangeFrom__start /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:t_RangeFrom) (return'  (x:MutBorrow.t (Slice64.slice Int32.t)))= {[@expl:index_mut requires] [%#svec'2] in_bounds ix (view'3 self_)}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice Int32.t))-> {[%#svec'3] has_value ix (view'3 self_) result.current}
      {[%#svec'4] has_value ix (view self_.final) result.final}
      {[%#svec'5] resolve_elswhere ix (view'3 self_) (view self_.final)}
      {[%#svec'6] Seq.length (view self_.final) = Seq.length (view'3 self_)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Slice64.slice Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice Int32.t)) =
    resolve _0
  
  let rec len'0 (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec'7] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    [%#sslice'5] UInt64.t'int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    [%#sslice'6] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self_:t_Vec) (ix:UInt64.t) (return'  (x:Int32.t))= {[@expl:index requires] [%#svec] in_bounds'0 ix (view'0 self_)}
    any [ return''0 (result:Int32.t)-> {[%#svec'0] has_value'0 ix (view'0 self_) result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_range_from[#"index_range.rs" 115 0 115 24] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret:t_Vec) ->  [ &arr <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_5 <- { t_RangeFrom__start = ([%#sindex_range] (3: UInt64.t)) } ] s1
      | s1 = index {arr} {_5} (fun (_ret:Slice64.slice Int32.t) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s2) | s2 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_7 <- _8 = ([%#sindex_range'0] (2: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb11) | br1 -> {_7} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 =  [ &_12 <- [%#sindex_range'1] (0: UInt64.t) ] s1
      | s1 =  [ &_13 <- Slice64.length s ] s2
      | s2 =  [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'2] _14} s4
      | s4 = bb5 ]
    
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r:Int32.t) ->  [ &_10 <- r = ([%#sindex_range'3] (3: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb10) | br1 -> {_10} (! bb6) ]  ]
    
    | bb6 = s0
      [ s0 =  [ &_17 <- [%#sindex_range'4] (1: UInt64.t) ] s1
      | s1 =  [ &_18 <- Slice64.length s ] s2
      | s2 =  [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'5] _19} s4
      | s4 = bb7 ]
    
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r:Int32.t) ->  [ &_15 <- r = ([%#sindex_range'6] (4: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]  ]
    
    | bb8 = s0
      [ s0 =  [ &_27 <- { t_RangeFrom__start = ([%#sindex_range'7] (5: UInt64.t)) } ] s1
      | s1 = index {arr} {_27} (fun (_ret:Slice64.slice Int32.t) ->  [ &_25 <- _ret ] s2)
      | s2 = bb13 ]
    
    | bb13 = s0 [ s0 = len {_25} (fun (_ret:UInt64.t) ->  [ &_23 <- _ret ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &_22 <- _23 = ([%#sindex_range'8] (0: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_22 = false} (! bb16) | br1 -> {_22} (! bb15) ]  ]
    
    | bb15 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_34 <- _ret ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 =  [ &_36 <- { t_RangeFrom__start = ([%#sindex_range'9] (6: UInt64.t)) } ] s1
      | s1 = get {_34} {_36} (fun (_ret:t_Option) ->  [ &_32 <- _ret ] s2)
      | s2 = bb18 ]
    
    | bb18 = s0 [ s0 = is_none {_32} (fun (_ret:bool) ->  [ &_30 <- _ret ] s1) | s1 = bb19 ] 
    | bb19 = any [ br0 -> {_30 = false} (! bb21) | br1 -> {_30} (! bb20) ] 
    | bb20 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_43 <- _ret ] s1) | s1 = bb22 ] 
    | bb22 = s0
      [ s0 =  [ &_45 <- { t_RangeFrom__start = ([%#sindex_range'10] (10: UInt64.t)) } ] s1
      | s1 = get {_43} {_45} (fun (_ret:t_Option) ->  [ &_41 <- _ret ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0 [ s0 = is_none {_41} (fun (_ret:bool) ->  [ &_39 <- _ret ] s1) | s1 = bb24 ] 
    | bb24 = any [ br0 -> {_39 = false} (! bb26) | br1 -> {_39} (! bb25) ] 
    | bb25 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_49 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 =  [ &_50 <- { t_RangeFrom__start = ([%#sindex_range'11] (2: UInt64.t)) } ] s2
      | s2 = index_mut {_49} {_50} (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->  [ &_48 <- _ret ] s3)
      | s3 = bb27 ]
    
    | bb27 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_48.current} {MutBorrow.get_id _48}
          (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->
             [ &s'0 <- _ret ] 
             [ &_48 <- { _48 with current = _ret.final } ] 
            s1)
      | s1 = len {s'0.current} (fun (_ret:UInt64.t) ->  [ &_53 <- _ret ] s2)
      | s2 = bb28 ]
    
    | bb28 = s0
      [ s0 =  [ &_52 <- _53 = ([%#sindex_range'12] (3: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_52 = false} (! bb30) | br1 -> {_52} (! bb29) ]  ]
    
    | bb29 = s0
      [ s0 =  [ &_56 <- [%#sindex_range'13] (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_57 <- _ptr ] s2)
      | s2 =  [ &_58 <- Slice64.slice_ptr_len _57 ] s3
      | s3 =  [ &_59 <- UInt64.lt _56 _58 ] s4
      | s4 = {[@expl:index in bounds] [%#sindex_range'14] _59} s5
      | s5 = bb31 ]
    
    | bb31 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_56} {[%#sindex_range'15] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_60 <- [%#sindex_range'16] (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_61 <- _ptr ] s3)
      | s3 =  [ &_62 <- Slice64.slice_ptr_len _61 ] s4
      | s4 =  [ &_63 <- UInt64.lt _60 _62 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'17] _63} s6
      | s6 = bb32 ]
    
    | bb32 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_60} {[%#sindex_range'18] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_67 <- [%#sindex_range'19] (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_68 <- _ptr ] s3)
      | s3 =  [ &_69 <- Slice64.slice_ptr_len _68 ] s4
      | s4 =  [ &_70 <- UInt64.lt _67 _69 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'20] _70} s6
      | s6 = bb33 ]
    
    | bb33 = s0
      [ s0 = -{resolve'0 s'0}- s1
      | s1 = -{resolve'0 _48}- s2
      | s2 = Slice64.get <Int32.t> {s'0.current} {_67}
          (fun (r:Int32.t) ->  [ &_65 <- r = ([%#sindex_range'21] (4: Int32.t)) ] s3)
      | s3 = any [ br0 -> {_65 = false} (! bb35) | br1 -> {_65} (! bb34) ]  ]
    
    | bb34 = s0 [ s0 = len'0 {arr} (fun (_ret:UInt64.t) ->  [ &_74 <- _ret ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 =  [ &_73 <- _74 = ([%#sindex_range'22] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_73 = false} (! bb38) | br1 -> {_73} (! bb37) ]  ]
    
    | bb37 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'23] (0: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_80 <- _ret ] s1)
      | s1 = bb39 ]
    
    | bb39 = s0
      [ s0 =  [ &_78 <- _80 = ([%#sindex_range'24] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_78 = false} (! bb41) | br1 -> {_78} (! bb40) ]  ]
    
    | bb40 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'25] (1: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_86 <- _ret ] s1)
      | s1 = bb42 ]
    
    | bb42 = s0
      [ s0 =  [ &_84 <- _86 = ([%#sindex_range'26] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_84 = false} (! bb44) | br1 -> {_84} (! bb43) ]  ]
    
    | bb43 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'27] (2: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_92 <- _ret ] s1)
      | s1 = bb45 ]
    
    | bb45 = s0
      [ s0 =  [ &_90 <- _92 = ([%#sindex_range'28] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_90 = false} (! bb47) | br1 -> {_90} (! bb46) ]  ]
    
    | bb46 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'29] (3: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_98 <- _ret ] s1)
      | s1 = bb48 ]
    
    | bb48 = s0
      [ s0 =  [ &_96 <- _98 = ([%#sindex_range'30] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_96 = false} (! bb50) | br1 -> {_96} (! bb49) ]  ]
    
    | bb49 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'31] (4: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_104 <- _ret ] s1)
      | s1 = bb51 ]
    
    | bb51 = s0
      [ s0 =  [ &_102 <- _104 = ([%#sindex_range'32] (4: Int32.t)) ] s1
      | s1 = any [ br0 -> {_102 = false} (! bb53) | br1 -> {_102} (! bb52) ]  ]
    
    | bb52 = bb54
    | bb54 = return''0 {_0}
    | bb53 = {[%#sindex_range'33] false} any
    | bb50 = {[%#sindex_range'34] false} any
    | bb47 = {[%#sindex_range'35] false} any
    | bb44 = {[%#sindex_range'36] false} any
    | bb41 = {[%#sindex_range'37] false} any
    | bb38 = {[%#sindex_range'38] false} any
    | bb35 = {[%#sindex_range'39] false} any
    | bb30 = s0 [ s0 = -{resolve'0 s'0}- s1 | s1 = -{resolve'0 _48}- s2 | s2 = {[%#sindex_range'40] false} any ] 
    | bb26 = {[%#sindex_range'41] false} any
    | bb21 = {[%#sindex_range'42] false} any
    | bb16 = {[%#sindex_range'43] false} any
    | bb9 = bb12
    | bb10 = bb12
    | bb11 = bb12
    | bb12 = {[%#sindex_range'44] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_RangeFrom = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & _25: Slice64.slice Int32.t = Any.any_l ()
    | & _27: t_RangeFrom = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: t_Option = Any.any_l ()
    | & _34: Slice64.slice Int32.t = Any.any_l ()
    | & _36: t_RangeFrom = Any.any_l ()
    | & _39: bool = Any.any_l ()
    | & _41: t_Option = Any.any_l ()
    | & _43: Slice64.slice Int32.t = Any.any_l ()
    | & _45: t_RangeFrom = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _48: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _49: MutBorrow.t t_Vec = Any.any_l ()
    | & _50: t_RangeFrom = Any.any_l ()
    | & _52: bool = Any.any_l ()
    | & _53: UInt64.t = Any.any_l ()
    | & _56: UInt64.t = Any.any_l ()
    | & _57: Opaque.ptr = Any.any_l ()
    | & _58: UInt64.t = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _60: UInt64.t = Any.any_l ()
    | & _61: Opaque.ptr = Any.any_l ()
    | & _62: UInt64.t = Any.any_l ()
    | & _63: bool = Any.any_l ()
    | & _65: bool = Any.any_l ()
    | & _67: UInt64.t = Any.any_l ()
    | & _68: Opaque.ptr = Any.any_l ()
    | & _69: UInt64.t = Any.any_l ()
    | & _70: bool = Any.any_l ()
    | & _73: bool = Any.any_l ()
    | & _74: UInt64.t = Any.any_l ()
    | & _78: bool = Any.any_l ()
    | & _80: Int32.t = Any.any_l ()
    | & _84: bool = Any.any_l ()
    | & _86: Int32.t = Any.any_l ()
    | & _90: bool = Any.any_l ()
    | & _92: Int32.t = Any.any_l ()
    | & _96: bool = Any.any_l ()
    | & _98: Int32.t = Any.any_l ()
    | & _102: bool = Any.any_l ()
    | & _104: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_index_range__test_range_full [#"index_range.rs" 154 0 154 24]
  let%span sindex_range = "index_range.rs" 162 23 162 24
  let%span sindex_range'0 = "index_range.rs" 162 30 162 31
  let%span sindex_range'1 = "index_range.rs" 162 28 162 32
  let%span sindex_range'2 = "index_range.rs" 162 36 162 37
  let%span sindex_range'3 = "index_range.rs" 162 43 162 44
  let%span sindex_range'4 = "index_range.rs" 162 41 162 45
  let%span sindex_range'5 = "index_range.rs" 162 49 162 50
  let%span sindex_range'6 = "index_range.rs" 162 56 162 57
  let%span sindex_range'7 = "index_range.rs" 162 54 162 58
  let%span sindex_range'8 = "index_range.rs" 162 62 162 63
  let%span sindex_range'9 = "index_range.rs" 162 69 162 70
  let%span sindex_range'10 = "index_range.rs" 162 67 162 71
  let%span sindex_range'11 = "index_range.rs" 162 75 162 76
  let%span sindex_range'12 = "index_range.rs" 162 82 162 83
  let%span sindex_range'13 = "index_range.rs" 162 80 162 84
  let%span sindex_range'14 = "index_range.rs" 162 88 162 89
  let%span sindex_range'15 = "index_range.rs" 166 23 166 24
  let%span sindex_range'16 = "index_range.rs" 167 6 167 7
  let%span sindex_range'17 = "index_range.rs" 167 4 167 8
  let%span sindex_range'18 = "index_range.rs" 167 11 167 13
  let%span sindex_range'19 = "index_range.rs" 168 6 168 7
  let%span sindex_range'20 = "index_range.rs" 168 4 168 8
  let%span sindex_range'21 = "index_range.rs" 168 11 168 13
  let%span sindex_range'22 = "index_range.rs" 170 25 170 26
  let%span sindex_range'23 = "index_range.rs" 171 16 171 17
  let%span sindex_range'24 = "index_range.rs" 171 22 171 23
  let%span sindex_range'25 = "index_range.rs" 172 16 172 17
  let%span sindex_range'26 = "index_range.rs" 172 22 172 24
  let%span sindex_range'27 = "index_range.rs" 173 16 173 17
  let%span sindex_range'28 = "index_range.rs" 173 22 173 23
  let%span sindex_range'29 = "index_range.rs" 174 16 174 17
  let%span sindex_range'30 = "index_range.rs" 174 22 174 24
  let%span sindex_range'31 = "index_range.rs" 175 16 175 17
  let%span sindex_range'32 = "index_range.rs" 175 22 175 23
  let%span sindex_range'33 = "index_range.rs" 175 4 175 24
  let%span sindex_range'34 = "index_range.rs" 174 4 174 25
  let%span sindex_range'35 = "index_range.rs" 173 4 173 24
  let%span sindex_range'36 = "index_range.rs" 172 4 172 25
  let%span sindex_range'37 = "index_range.rs" 171 4 171 24
  let%span sindex_range'38 = "index_range.rs" 170 4 170 27
  let%span sindex_range'39 = "index_range.rs" 166 4 166 25
  let%span sindex_range'40 = "index_range.rs" 162 4 162 90
  let%span sindex_range'41 = "index_range.rs" 7 4 12 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 239 18 239 40
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 195 20 195 24
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 201 20 201 31
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 207 20 207 24
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'5 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'6 = "../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'7] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view self) ix
  
  let rec create_arr (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sindex_range'41] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return' {result}) ]
  
  
  predicate in_bounds (self: ()) (_seq: Seq.seq Int32.t) =
    [%#sslice'0] true
  
  function view'0 (self: t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. ([%#sslice'5] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'6] view'1 self = Slice64.id self)
  
  predicate has_value (self: ()) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    [%#sslice'1] seq = view'1 out
  
  let rec index (self_:t_Vec) (ix:()) (return'  (x:Slice64.slice Int32.t))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  
  function view'2 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel] view'1 self
  
  let rec len (self_:Slice64.slice Int32.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sslice] Seq.length (view'2 self_) = UInt64.t'int result} (! return' {result}) ]
  
  
  function view'3 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view self.current
  
  predicate resolve_elswhere (self: ()) (_old: Seq.seq Int32.t) (_fin: Seq.seq Int32.t) =
    [%#sslice'2] true
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:()) (return'  (x:MutBorrow.t (Slice64.slice Int32.t)))= {[@expl:index_mut requires] [%#svec'1] in_bounds ix (view'3 self_)}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice Int32.t))-> {[%#svec'2] has_value ix (view'3 self_) result.current}
      {[%#svec'3] has_value ix (view self_.final) result.final}
      {[%#svec'4] resolve_elswhere ix (view'3 self_) (view self_.final)}
      {[%#svec'5] Seq.length (view self_.final) = Seq.length (view'3 self_)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Slice64.slice Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice Int32.t)) =
    resolve _0
  
  let rec len'0 (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec'6] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    [%#sslice'3] UInt64.t'int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    [%#sslice'4] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self_:t_Vec) (ix:UInt64.t) (return'  (x:Int32.t))= {[@expl:index requires] [%#svec] in_bounds'0 ix (view'0 self_)}
    any [ return''0 (result:Int32.t)-> {[%#svec'0] has_value'0 ix (view'0 self_) result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_range_full[#"index_range.rs" 154 0 154 24] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret:t_Vec) ->  [ &arr <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_5 <- () ] s1
      | s1 = index {arr} {_5} (fun (_ret:Slice64.slice Int32.t) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s2) | s2 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_7 <- _8 = ([%#sindex_range] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb20) | br1 -> {_7} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 =  [ &_12 <- [%#sindex_range'0] (0: UInt64.t) ] s1
      | s1 =  [ &_13 <- Slice64.length s ] s2
      | s2 =  [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'1] _14} s4
      | s4 = bb5 ]
    
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r:Int32.t) ->  [ &_10 <- r = ([%#sindex_range'2] (0: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb19) | br1 -> {_10} (! bb6) ]  ]
    
    | bb6 = s0
      [ s0 =  [ &_17 <- [%#sindex_range'3] (1: UInt64.t) ] s1
      | s1 =  [ &_18 <- Slice64.length s ] s2
      | s2 =  [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'4] _19} s4
      | s4 = bb7 ]
    
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r:Int32.t) ->  [ &_15 <- r = ([%#sindex_range'5] (1: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb18) | br1 -> {_15} (! bb8) ]  ]
    
    | bb8 = s0
      [ s0 =  [ &_22 <- [%#sindex_range'6] (2: UInt64.t) ] s1
      | s1 =  [ &_23 <- Slice64.length s ] s2
      | s2 =  [ &_24 <- UInt64.lt _22 _23 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'7] _24} s4
      | s4 = bb9 ]
    
    | bb9 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_22} (fun (r:Int32.t) ->  [ &_20 <- r = ([%#sindex_range'8] (2: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_20 = false} (! bb17) | br1 -> {_20} (! bb10) ]  ]
    
    | bb10 = s0
      [ s0 =  [ &_27 <- [%#sindex_range'9] (3: UInt64.t) ] s1
      | s1 =  [ &_28 <- Slice64.length s ] s2
      | s2 =  [ &_29 <- UInt64.lt _27 _28 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'10] _29} s4
      | s4 = bb11 ]
    
    | bb11 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_27} (fun (r:Int32.t) ->  [ &_25 <- r = ([%#sindex_range'11] (3: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_25 = false} (! bb16) | br1 -> {_25} (! bb12) ]  ]
    
    | bb12 = s0
      [ s0 =  [ &_32 <- [%#sindex_range'12] (4: UInt64.t) ] s1
      | s1 =  [ &_33 <- Slice64.length s ] s2
      | s2 =  [ &_34 <- UInt64.lt _32 _33 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'13] _34} s4
      | s4 = bb13 ]
    
    | bb13 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_32} (fun (r:Int32.t) ->  [ &_30 <- r = ([%#sindex_range'14] (4: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_30 = false} (! bb15) | br1 -> {_30} (! bb14) ]  ]
    
    | bb14 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_38 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 =  [ &_39 <- () ] s2
      | s2 = index_mut {_38} {_39} (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->  [ &_37 <- _ret ] s3)
      | s3 = bb22 ]
    
    | bb22 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_37.current} {MutBorrow.get_id _37}
          (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->
             [ &s'0 <- _ret ] 
             [ &_37 <- { _37 with current = _ret.final } ] 
            s1)
      | s1 = len {s'0.current} (fun (_ret:UInt64.t) ->  [ &_42 <- _ret ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0
      [ s0 =  [ &_41 <- _42 = ([%#sindex_range'15] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_41 = false} (! bb25) | br1 -> {_41} (! bb24) ]  ]
    
    | bb24 = s0
      [ s0 =  [ &_45 <- [%#sindex_range'16] (1: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_46 <- _ptr ] s2)
      | s2 =  [ &_47 <- Slice64.slice_ptr_len _46 ] s3
      | s3 =  [ &_48 <- UInt64.lt _45 _47 ] s4
      | s4 = {[@expl:index in bounds] [%#sindex_range'17] _48} s5
      | s5 = bb26 ]
    
    | bb26 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_45} {[%#sindex_range'18] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_49 <- [%#sindex_range'19] (3: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_50 <- _ptr ] s3)
      | s3 =  [ &_51 <- Slice64.slice_ptr_len _50 ] s4
      | s4 =  [ &_52 <- UInt64.lt _49 _51 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'20] _52} s6
      | s6 = bb27 ]
    
    | bb27 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_49} {[%#sindex_range'21] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 = -{resolve'0 s'0}- s2
      | s2 = -{resolve'0 _37}- s3
      | s3 = len'0 {arr} (fun (_ret:UInt64.t) ->  [ &_55 <- _ret ] s4)
      | s4 = bb28 ]
    
    | bb28 = s0
      [ s0 =  [ &_54 <- _55 = ([%#sindex_range'22] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_54 = false} (! bb30) | br1 -> {_54} (! bb29) ]  ]
    
    | bb29 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'23] (0: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_61 <- _ret ] s1)
      | s1 = bb31 ]
    
    | bb31 = s0
      [ s0 =  [ &_59 <- _61 = ([%#sindex_range'24] (0: Int32.t)) ] s1
      | s1 = any [ br0 -> {_59 = false} (! bb33) | br1 -> {_59} (! bb32) ]  ]
    
    | bb32 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'25] (1: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_67 <- _ret ] s1)
      | s1 = bb34 ]
    
    | bb34 = s0
      [ s0 =  [ &_65 <- _67 = ([%#sindex_range'26] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_65 = false} (! bb36) | br1 -> {_65} (! bb35) ]  ]
    
    | bb35 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'27] (2: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_73 <- _ret ] s1)
      | s1 = bb37 ]
    
    | bb37 = s0
      [ s0 =  [ &_71 <- _73 = ([%#sindex_range'28] (2: Int32.t)) ] s1
      | s1 = any [ br0 -> {_71 = false} (! bb39) | br1 -> {_71} (! bb38) ]  ]
    
    | bb38 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'29] (3: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_79 <- _ret ] s1)
      | s1 = bb40 ]
    
    | bb40 = s0
      [ s0 =  [ &_77 <- _79 = ([%#sindex_range'30] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_77 = false} (! bb42) | br1 -> {_77} (! bb41) ]  ]
    
    | bb41 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'31] (4: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_85 <- _ret ] s1)
      | s1 = bb43 ]
    
    | bb43 = s0
      [ s0 =  [ &_83 <- _85 = ([%#sindex_range'32] (4: Int32.t)) ] s1
      | s1 = any [ br0 -> {_83 = false} (! bb45) | br1 -> {_83} (! bb44) ]  ]
    
    | bb44 = bb46
    | bb46 = return''0 {_0}
    | bb45 = {[%#sindex_range'33] false} any
    | bb42 = {[%#sindex_range'34] false} any
    | bb39 = {[%#sindex_range'35] false} any
    | bb36 = {[%#sindex_range'36] false} any
    | bb33 = {[%#sindex_range'37] false} any
    | bb30 = {[%#sindex_range'38] false} any
    | bb25 = s0 [ s0 = -{resolve'0 s'0}- s1 | s1 = -{resolve'0 _37}- s2 | s2 = {[%#sindex_range'39] false} any ] 
    | bb15 = bb21
    | bb16 = bb21
    | bb17 = bb21
    | bb18 = bb21
    | bb19 = bb21
    | bb20 = bb21
    | bb21 = {[%#sindex_range'40] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _20: bool = Any.any_l ()
    | & _22: UInt64.t = Any.any_l ()
    | & _23: UInt64.t = Any.any_l ()
    | & _24: bool = Any.any_l ()
    | & _25: bool = Any.any_l ()
    | & _27: UInt64.t = Any.any_l ()
    | & _28: UInt64.t = Any.any_l ()
    | & _29: bool = Any.any_l ()
    | & _30: bool = Any.any_l ()
    | & _32: UInt64.t = Any.any_l ()
    | & _33: UInt64.t = Any.any_l ()
    | & _34: bool = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _37: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _38: MutBorrow.t t_Vec = Any.any_l ()
    | & _39: () = Any.any_l ()
    | & _41: bool = Any.any_l ()
    | & _42: UInt64.t = Any.any_l ()
    | & _45: UInt64.t = Any.any_l ()
    | & _46: Opaque.ptr = Any.any_l ()
    | & _47: UInt64.t = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _49: UInt64.t = Any.any_l ()
    | & _50: Opaque.ptr = Any.any_l ()
    | & _51: UInt64.t = Any.any_l ()
    | & _52: bool = Any.any_l ()
    | & _54: bool = Any.any_l ()
    | & _55: UInt64.t = Any.any_l ()
    | & _59: bool = Any.any_l ()
    | & _61: Int32.t = Any.any_l ()
    | & _65: bool = Any.any_l ()
    | & _67: Int32.t = Any.any_l ()
    | & _71: bool = Any.any_l ()
    | & _73: Int32.t = Any.any_l ()
    | & _77: bool = Any.any_l ()
    | & _79: Int32.t = Any.any_l ()
    | & _83: bool = Any.any_l ()
    | & _85: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_index_range__test_range_to_inclusive [#"index_range.rs" 179 0 179 32]
  let%span sindex_range = "index_range.rs" 186 20 186 21
  let%span sindex_range'0 = "index_range.rs" 187 23 187 24
  let%span sindex_range'1 = "index_range.rs" 187 30 187 31
  let%span sindex_range'2 = "index_range.rs" 187 28 187 32
  let%span sindex_range'3 = "index_range.rs" 187 36 187 37
  let%span sindex_range'4 = "index_range.rs" 187 43 187 44
  let%span sindex_range'5 = "index_range.rs" 187 41 187 45
  let%span sindex_range'6 = "index_range.rs" 187 49 187 50
  let%span sindex_range'7 = "index_range.rs" 192 23 192 24
  let%span sindex_range'8 = "index_range.rs" 195 24 195 25
  let%span sindex_range'9 = "index_range.rs" 196 23 196 24
  let%span sindex_range'10 = "index_range.rs" 197 6 197 7
  let%span sindex_range'11 = "index_range.rs" 197 4 197 8
  let%span sindex_range'12 = "index_range.rs" 197 11 197 13
  let%span sindex_range'13 = "index_range.rs" 198 6 198 7
  let%span sindex_range'14 = "index_range.rs" 198 4 198 8
  let%span sindex_range'15 = "index_range.rs" 198 11 198 13
  let%span sindex_range'16 = "index_range.rs" 200 14 200 15
  let%span sindex_range'17 = "index_range.rs" 200 12 200 16
  let%span sindex_range'18 = "index_range.rs" 200 20 200 21
  let%span sindex_range'19 = "index_range.rs" 202 25 202 26
  let%span sindex_range'20 = "index_range.rs" 203 16 203 17
  let%span sindex_range'21 = "index_range.rs" 203 22 203 24
  let%span sindex_range'22 = "index_range.rs" 204 16 204 17
  let%span sindex_range'23 = "index_range.rs" 204 22 204 23
  let%span sindex_range'24 = "index_range.rs" 205 16 205 17
  let%span sindex_range'25 = "index_range.rs" 205 22 205 24
  let%span sindex_range'26 = "index_range.rs" 206 16 206 17
  let%span sindex_range'27 = "index_range.rs" 206 22 206 23
  let%span sindex_range'28 = "index_range.rs" 207 16 207 17
  let%span sindex_range'29 = "index_range.rs" 207 22 207 23
  let%span sindex_range'30 = "index_range.rs" 207 4 207 24
  let%span sindex_range'31 = "index_range.rs" 206 4 206 24
  let%span sindex_range'32 = "index_range.rs" 205 4 205 25
  let%span sindex_range'33 = "index_range.rs" 204 4 204 24
  let%span sindex_range'34 = "index_range.rs" 203 4 203 25
  let%span sindex_range'35 = "index_range.rs" 202 4 202 27
  let%span sindex_range'36 = "index_range.rs" 200 4 200 22
  let%span sindex_range'37 = "index_range.rs" 196 4 196 25
  let%span sindex_range'38 = "index_range.rs" 192 4 192 36
  let%span sindex_range'39 = "index_range.rs" 187 4 187 51
  let%span sindex_range'40 = "index_range.rs" 7 4 12 22
  let%span svec = "../../creusot-contracts/src/std/vec.rs" 160 27 160 46
  let%span svec'0 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 54
  let%span svec'1 = "../../creusot-contracts/src/std/vec.rs" 167 26 167 42
  let%span svec'2 = "../../creusot-contracts/src/std/vec.rs" 150 27 150 46
  let%span svec'3 = "../../creusot-contracts/src/std/vec.rs" 151 26 151 54
  let%span svec'4 = "../../creusot-contracts/src/std/vec.rs" 152 26 152 57
  let%span svec'5 = "../../creusot-contracts/src/std/vec.rs" 153 26 153 62
  let%span svec'6 = "../../creusot-contracts/src/std/vec.rs" 154 26 154 55
  let%span svec'7 = "../../creusot-contracts/src/std/vec.rs" 81 26 81 48
  let%span svec'8 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../creusot-contracts/src/model.rs" 44 8 44 22
  let%span smodel'0 = "../../creusot-contracts/src/model.rs" 62 8 62 22
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 239 18 239 40
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 248 18 248 97
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 249 18 249 55
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 215 20 215 41
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 221 20 221 61
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 227 20 227 81
  let%span sslice'5 = "../../creusot-contracts/src/std/slice.rs" 108 20 108 37
  let%span sslice'6 = "../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  let%span sslice'7 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice'8 = "../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span soption = "../../creusot-contracts/src/std/option.rs" 82 26 82 51
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.Int32
  use mach.int.Int
  use creusot.slice.Slice64
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX: UInt64.t = (18446744073709551615: UInt64.t)
  
  function view (self: t_Vec) : Seq.seq Int32.t
  
  axiom view_spec: forall self: t_Vec. [%#svec'8] Seq.length (view self) <= UInt64.t'int (v_MAX: UInt64.t)
  
  function index_logic [@inline:trivial] (self: t_Vec) (ix: int) : Int32.t =
    [%#sindex] Seq.get (view self) ix
  
  let rec create_arr (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sindex_range'40] Seq.length (view result) = 5
      /\ Int32.to_int (index_logic result 0) = 0
      /\ Int32.to_int (index_logic result 1) = 1
      /\ Int32.to_int (index_logic result 2) = 2
      /\ Int32.to_int (index_logic result 3) = 3 /\ Int32.to_int (index_logic result 4) = 4}
      (! return' {result}) ]
  
  
  type t_RangeToInclusive  =
    { t_RangeToInclusive__end: UInt64.t }
  
  predicate in_bounds (self: t_RangeToInclusive) (seq: Seq.seq Int32.t) =
    [%#sslice'2] UInt64.t'int self.t_RangeToInclusive__end < Seq.length seq
  
  function view'0 (self: t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self
  
  function view'1 (self: Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0: forall self: Slice64.slice Int32.t. ([%#sslice'7] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX: UInt64.t))
  && ([%#sslice'8] view'1 self = Slice64.id self)
  
  predicate has_value (self: t_RangeToInclusive) (seq: Seq.seq Int32.t) (out: Slice64.slice Int32.t) =
    [%#sslice'3] Seq.([..]) seq 0 (UInt64.t'int self.t_RangeToInclusive__end + 1) = view'1 out
  
  let rec index (self_:t_Vec) (ix:t_RangeToInclusive) (return'  (x:Slice64.slice Int32.t))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
    any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ]
  
  
  function view'2 (self: Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel] view'1 self
  
  let rec len (self_:Slice64.slice Int32.t) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#sslice] Seq.length (view'2 self_) = UInt64.t'int result} (! return' {result}) ]
  
  
  let rec deref (self_:t_Vec) (return'  (x:Slice64.slice Int32.t))= any
    [ return''0 (result:Slice64.slice Int32.t)-> {[%#svec'1] view'2 result = view'0 self_} (! return' {result}) ]
  
  
  type t_Option  =
    | C_None
    | C_Some (Slice64.slice Int32.t)
  
  let rec get (self_:Slice64.slice Int32.t) (ix:t_RangeToInclusive) (return'  (x:t_Option))= any
    [ return''0 (result:t_Option)-> {[%#sslice'0] in_bounds ix (view'2 self_)
       -> (exists r: Slice64.slice Int32.t. result = C_Some r /\ has_value ix (view'2 self_) r)}
      {[%#sslice'1] in_bounds ix (view'2 self_) \/ result = C_None}
      (! return' {result}) ]
  
  
  let rec is_none (self_:t_Option) (return'  (x:bool))= any
    [ return''0 (result:bool)-> {[%#soption] result = (self_ = C_None)} (! return' {result}) ]
  
  
  function view'3 (self: MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel'0] view self.current
  
  predicate resolve_elswhere (self: t_RangeToInclusive) (old': Seq.seq Int32.t) (fin: Seq.seq Int32.t) =
    [%#sslice'4] forall i: int. UInt64.t'int self.t_RangeToInclusive__end < i /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut (self_:MutBorrow.t t_Vec) (ix:t_RangeToInclusive) (return'  (x:MutBorrow.t (Slice64.slice Int32.t)))= {[@expl:index_mut requires] [%#svec'2] in_bounds ix (view'3 self_)}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice Int32.t))-> {[%#svec'3] has_value ix (view'3 self_) result.current}
      {[%#svec'4] has_value ix (view self_.final) result.final}
      {[%#svec'5] resolve_elswhere ix (view'3 self_) (view self_.final)}
      {[%#svec'6] Seq.length (view self_.final) = Seq.length (view'3 self_)}
      (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t (Slice64.slice Int32.t)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t (Slice64.slice Int32.t)) =
    resolve _0
  
  let rec len'0 (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec'7] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  predicate in_bounds'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) =
    [%#sslice'5] UInt64.t'int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self: UInt64.t) (seq: Seq.seq Int32.t) (out: Int32.t) =
    [%#sslice'6] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self_:t_Vec) (ix:UInt64.t) (return'  (x:Int32.t))= {[@expl:index requires] [%#svec] in_bounds'0 ix (view'0 self_)}
    any [ return''0 (result:Int32.t)-> {[%#svec'0] has_value'0 ix (view'0 self_) result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test_range_to_inclusive[#"index_range.rs" 179 0 179 32] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = create_arr (fun (_ret:t_Vec) ->  [ &arr <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_5 <- { t_RangeToInclusive__end = ([%#sindex_range] (1: UInt64.t)) } ] s1
      | s1 = index {arr} {_5} (fun (_ret:Slice64.slice Int32.t) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &s <- _3 ] s1 | s1 = len {s} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s2) | s2 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_7 <- _8 = ([%#sindex_range'0] (2: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb11) | br1 -> {_7} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 =  [ &_12 <- [%#sindex_range'1] (0: UInt64.t) ] s1
      | s1 =  [ &_13 <- Slice64.length s ] s2
      | s2 =  [ &_14 <- UInt64.lt _12 _13 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'2] _14} s4
      | s4 = bb5 ]
    
    | bb5 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_12} (fun (r:Int32.t) ->  [ &_10 <- r = ([%#sindex_range'3] (0: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb10) | br1 -> {_10} (! bb6) ]  ]
    
    | bb6 = s0
      [ s0 =  [ &_17 <- [%#sindex_range'4] (1: UInt64.t) ] s1
      | s1 =  [ &_18 <- Slice64.length s ] s2
      | s2 =  [ &_19 <- UInt64.lt _17 _18 ] s3
      | s3 = {[@expl:index in bounds] [%#sindex_range'5] _19} s4
      | s4 = bb7 ]
    
    | bb7 = s0
      [ s0 = Slice64.get <Int32.t> {s} {_17} (fun (r:Int32.t) ->  [ &_15 <- r = ([%#sindex_range'6] (1: Int32.t)) ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]  ]
    
    | bb8 = s0 [ s0 = deref {arr} (fun (_ret:Slice64.slice Int32.t) ->  [ &_26 <- _ret ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 =  [ &_28 <- { t_RangeToInclusive__end = ([%#sindex_range'7] (5: UInt64.t)) } ] s1
      | s1 = get {_26} {_28} (fun (_ret:t_Option) ->  [ &_24 <- _ret ] s2)
      | s2 = bb14 ]
    
    | bb14 = s0 [ s0 = is_none {_24} (fun (_ret:bool) ->  [ &_22 <- _ret ] s1) | s1 = bb15 ] 
    | bb15 = any [ br0 -> {_22 = false} (! bb17) | br1 -> {_22} (! bb16) ] 
    | bb16 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {arr}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_32 <- _ret ]  [ &arr <- _ret.final ] s1)
      | s1 =  [ &_33 <- { t_RangeToInclusive__end = ([%#sindex_range'8] (2: UInt64.t)) } ] s2
      | s2 = index_mut {_32} {_33} (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->  [ &_31 <- _ret ] s3)
      | s3 = bb18 ]
    
    | bb18 = s0
      [ s0 = MutBorrow.borrow_final <Slice64.slice Int32.t> {_31.current} {MutBorrow.get_id _31}
          (fun (_ret:MutBorrow.t (Slice64.slice Int32.t)) ->
             [ &s'0 <- _ret ] 
             [ &_31 <- { _31 with current = _ret.final } ] 
            s1)
      | s1 = len {s'0.current} (fun (_ret:UInt64.t) ->  [ &_36 <- _ret ] s2)
      | s2 = bb19 ]
    
    | bb19 = s0
      [ s0 =  [ &_35 <- _36 = ([%#sindex_range'9] (3: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_35 = false} (! bb21) | br1 -> {_35} (! bb20) ]  ]
    
    | bb20 = s0
      [ s0 =  [ &_39 <- [%#sindex_range'10] (0: UInt64.t) ] s1
      | s1 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_40 <- _ptr ] s2)
      | s2 =  [ &_41 <- Slice64.slice_ptr_len _40 ] s3
      | s3 =  [ &_42 <- UInt64.lt _39 _41 ] s4
      | s4 = {[@expl:index in bounds] [%#sindex_range'11] _42} s5
      | s5 = bb22 ]
    
    | bb22 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_39} {[%#sindex_range'12] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_43 <- [%#sindex_range'13] (2: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_44 <- _ptr ] s3)
      | s3 =  [ &_45 <- Slice64.slice_ptr_len _44 ] s4
      | s4 =  [ &_46 <- UInt64.lt _43 _45 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'14] _46} s6
      | s6 = bb23 ]
    
    | bb23 = s0
      [ s0 = Slice64.set <Int32.t> {s'0.current} {_43} {[%#sindex_range'15] (-1: Int32.t)}
          (fun (r:Slice64.slice Int32.t) ->  [ &s'0 <- { s'0 with current = r } ] s1)
      | s1 =  [ &_50 <- [%#sindex_range'16] (1: UInt64.t) ] s2
      | s2 = Opaque.fresh_ptr 
          (fun (_ptr:Opaque.ptr) -> -{Slice64.slice_ptr_len _ptr = Slice64.length s'0.current}-  [ &_51 <- _ptr ] s3)
      | s3 =  [ &_52 <- Slice64.slice_ptr_len _51 ] s4
      | s4 =  [ &_53 <- UInt64.lt _50 _52 ] s5
      | s5 = {[@expl:index in bounds] [%#sindex_range'17] _53} s6
      | s6 = bb24 ]
    
    | bb24 = s0
      [ s0 = -{resolve'0 s'0}- s1
      | s1 = -{resolve'0 _31}- s2
      | s2 = Slice64.get <Int32.t> {s'0.current} {_50}
          (fun (r:Int32.t) ->  [ &_48 <- r = ([%#sindex_range'18] (1: Int32.t)) ] s3)
      | s3 = any [ br0 -> {_48 = false} (! bb26) | br1 -> {_48} (! bb25) ]  ]
    
    | bb25 = s0 [ s0 = len'0 {arr} (fun (_ret:UInt64.t) ->  [ &_57 <- _ret ] s1) | s1 = bb27 ] 
    | bb27 = s0
      [ s0 =  [ &_56 <- _57 = ([%#sindex_range'19] (5: UInt64.t)) ] s1
      | s1 = any [ br0 -> {_56 = false} (! bb29) | br1 -> {_56} (! bb28) ]  ]
    
    | bb28 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'20] (0: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_63 <- _ret ] s1)
      | s1 = bb30 ]
    
    | bb30 = s0
      [ s0 =  [ &_61 <- _63 = ([%#sindex_range'21] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_61 = false} (! bb32) | br1 -> {_61} (! bb31) ]  ]
    
    | bb31 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'22] (1: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_69 <- _ret ] s1)
      | s1 = bb33 ]
    
    | bb33 = s0
      [ s0 =  [ &_67 <- _69 = ([%#sindex_range'23] (1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_67 = false} (! bb35) | br1 -> {_67} (! bb34) ]  ]
    
    | bb34 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'24] (2: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_75 <- _ret ] s1)
      | s1 = bb36 ]
    
    | bb36 = s0
      [ s0 =  [ &_73 <- _75 = ([%#sindex_range'25] (-1: Int32.t)) ] s1
      | s1 = any [ br0 -> {_73 = false} (! bb38) | br1 -> {_73} (! bb37) ]  ]
    
    | bb37 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'26] (3: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_81 <- _ret ] s1)
      | s1 = bb39 ]
    
    | bb39 = s0
      [ s0 =  [ &_79 <- _81 = ([%#sindex_range'27] (3: Int32.t)) ] s1
      | s1 = any [ br0 -> {_79 = false} (! bb41) | br1 -> {_79} (! bb40) ]  ]
    
    | bb40 = s0
      [ s0 = index'0 {arr} {[%#sindex_range'28] (4: UInt64.t)} (fun (_ret:Int32.t) ->  [ &_87 <- _ret ] s1)
      | s1 = bb42 ]
    
    | bb42 = s0
      [ s0 =  [ &_85 <- _87 = ([%#sindex_range'29] (4: Int32.t)) ] s1
      | s1 = any [ br0 -> {_85 = false} (! bb44) | br1 -> {_85} (! bb43) ]  ]
    
    | bb43 = bb45
    | bb45 = return''0 {_0}
    | bb44 = {[%#sindex_range'30] false} any
    | bb41 = {[%#sindex_range'31] false} any
    | bb38 = {[%#sindex_range'32] false} any
    | bb35 = {[%#sindex_range'33] false} any
    | bb32 = {[%#sindex_range'34] false} any
    | bb29 = {[%#sindex_range'35] false} any
    | bb26 = {[%#sindex_range'36] false} any
    | bb21 = s0 [ s0 = -{resolve'0 s'0}- s1 | s1 = -{resolve'0 _31}- s2 | s2 = {[%#sindex_range'37] false} any ] 
    | bb17 = {[%#sindex_range'38] false} any
    | bb9 = bb12
    | bb10 = bb12
    | bb11 = bb12
    | bb12 = {[%#sindex_range'39] false} any ]
    )
    [ & _0: () = Any.any_l ()
    | & arr: t_Vec = Any.any_l ()
    | & s: Slice64.slice Int32.t = Any.any_l ()
    | & _3: Slice64.slice Int32.t = Any.any_l ()
    | & _5: t_RangeToInclusive = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _8: UInt64.t = Any.any_l ()
    | & _10: bool = Any.any_l ()
    | & _12: UInt64.t = Any.any_l ()
    | & _13: UInt64.t = Any.any_l ()
    | & _14: bool = Any.any_l ()
    | & _15: bool = Any.any_l ()
    | & _17: UInt64.t = Any.any_l ()
    | & _18: UInt64.t = Any.any_l ()
    | & _19: bool = Any.any_l ()
    | & _22: bool = Any.any_l ()
    | & _24: t_Option = Any.any_l ()
    | & _26: Slice64.slice Int32.t = Any.any_l ()
    | & _28: t_RangeToInclusive = Any.any_l ()
    | & s'0: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _31: MutBorrow.t (Slice64.slice Int32.t) = Any.any_l ()
    | & _32: MutBorrow.t t_Vec = Any.any_l ()
    | & _33: t_RangeToInclusive = Any.any_l ()
    | & _35: bool = Any.any_l ()
    | & _36: UInt64.t = Any.any_l ()
    | & _39: UInt64.t = Any.any_l ()
    | & _40: Opaque.ptr = Any.any_l ()
    | & _41: UInt64.t = Any.any_l ()
    | & _42: bool = Any.any_l ()
    | & _43: UInt64.t = Any.any_l ()
    | & _44: Opaque.ptr = Any.any_l ()
    | & _45: UInt64.t = Any.any_l ()
    | & _46: bool = Any.any_l ()
    | & _48: bool = Any.any_l ()
    | & _50: UInt64.t = Any.any_l ()
    | & _51: Opaque.ptr = Any.any_l ()
    | & _52: UInt64.t = Any.any_l ()
    | & _53: bool = Any.any_l ()
    | & _56: bool = Any.any_l ()
    | & _57: UInt64.t = Any.any_l ()
    | & _61: bool = Any.any_l ()
    | & _63: Int32.t = Any.any_l ()
    | & _67: bool = Any.any_l ()
    | & _69: Int32.t = Any.any_l ()
    | & _73: bool = Any.any_l ()
    | & _75: Int32.t = Any.any_l ()
    | & _79: bool = Any.any_l ()
    | & _81: Int32.t = Any.any_l ()
    | & _85: bool = Any.any_l ()
    | & _87: Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
