module M_mutex__qyi5425553346843331945__call [#"mutex.rs" 100 4 100 23] (* <AddsTwo<'a> as FakeFnOnce> *)
  let%span smutex = "mutex.rs" 103 17 103 23
  let%span smutex'0 = "mutex.rs" 104 24 104 25
  let%span smutex'1 = "mutex.rs" 106 18 106 19
  let%span smutex'2 = "mutex.rs" 36 14 36 33
  let%span smutex'3 = "mutex.rs" 49 4 49 35
  let%span smutex'4 = "mutex.rs" 55 4 55 30
  let%span smutex'5 = "mutex.rs" 67 8 67 25
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MutexInner
  
  type t_Mutex  =
    { t_Mutex__0: t_MutexInner; t_Mutex__1: () }
  
  type t_AddsTwo  =
    { t_AddsTwo__mutex: t_Mutex }
  
  type t_GuardInner
  
  type t_MutexGuard  =
    { t_MutexGuard__0: t_GuardInner; t_MutexGuard__1: () }
  
  let rec lock (self:t_Mutex) (return'  (x:t_MutexGuard))= any
    [ return''0 (result:t_MutexGuard)-> {[%#smutex'2] self.t_Mutex__1 = result.t_MutexGuard__1} (! return' {result}) ]
  
  
  predicate inv [#"mutex.rs" 66 4 66 33] (self: ()) (x: UInt32.t) =
    [%#smutex'5] Int.mod (UInt32.t'int x) 2 = 0
  
  let rec deref (self:t_MutexGuard) (return'  (x:UInt32.t))= any
    [ return''0 (result:UInt32.t)-> {[%#smutex'3] inv self.t_MutexGuard__1 result} (! return' {result}) ]
  
  
  let rec set (self:MutBorrow.t t_MutexGuard) (v:UInt32.t) (return'  (x:()))= {[@expl:set requires] [%#smutex'4] inv (self.current).t_MutexGuard__1 v}
    any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec call[#"mutex.rs" 100 4 100 23] (self:t_AddsTwo) (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 = lock {self'0.t_AddsTwo__mutex} (fun (_ret:t_MutexGuard) ->  [ &v <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = deref {v} (fun (_ret:UInt32.t) ->  [ &_5 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &val' <- _5 ] s1
      | s1 =  [ &_7 <- UInt32.lt val' ([%#smutex] (100000: UInt32.t)) ] s2
      | s2 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb3) ]  ]
    
    | bb3 = s0
      [ s0 = UInt32.add {val'} {[%#smutex'0] (2: UInt32.t)} (fun (_ret:UInt32.t) ->  [ &_11 <- _ret ] s1)
      | s1 = MutBorrow.borrow_mut <t_MutexGuard> {v}
          (fun (_ret:MutBorrow.t t_MutexGuard) ->  [ &_10 <- _ret ]  [ &v <- _ret.final ] s2)
      | s2 = set {_10} {_11} (fun (_ret:()) ->  [ &_9 <- _ret ] s3)
      | s3 = bb4 ]
    
    | bb4 = bb7
    | bb5 = s0
      [ s0 = MutBorrow.borrow_mut <t_MutexGuard> {v}
          (fun (_ret:MutBorrow.t t_MutexGuard) ->  [ &_14 <- _ret ]  [ &v <- _ret.final ] s1)
      | s1 = set {_14} {[%#smutex'1] (0: UInt32.t)} (fun (_ret:()) ->  [ &_13 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & self'0: t_AddsTwo = self
    | & v: t_MutexGuard = Any.any_l ()
    | & val': UInt32.t = Any.any_l ()
    | & _5: UInt32.t = Any.any_l ()
    | & _7: bool = Any.any_l ()
    | & _9: () = Any.any_l ()
    | & _10: MutBorrow.t t_MutexGuard = Any.any_l ()
    | & _11: UInt32.t = Any.any_l ()
    | & _13: () = Any.any_l ()
    | & _14: MutBorrow.t t_MutexGuard = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_mutex__concurrent [#"mutex.rs" 163 0 163 19]
  let%span smutex = "mutex.rs" 164 49 164 50
  let%span smutex'0 = "mutex.rs" 17 15 17 25
  let%span smutex'1 = "mutex.rs" 158 10 158 23
  let%span smutex'2 = "mutex.rs" 130 11 130 27
  let%span smutex'3 = "mutex.rs" 117 14 120 5
  let%span smutex'4 = "mutex.rs" 67 8 67 25
  let%span smutex'5 = "mutex.rs" 92 8 92 12
  let%span smutex'6 = "mutex.rs" 149 4 149 12
  let%span smutex'7 = "mutex.rs" 97 8 97 12
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 49 20 49 34
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_MutexInner
  
  type t_Mutex  =
    { t_Mutex__0: t_MutexInner; t_Mutex__1: () }
  
  predicate inv [#"mutex.rs" 66 4 66 33] (self: ()) (x: UInt32.t) =
    [%#smutex'4] Int.mod (UInt32.t'int x) 2 = 0
  
  let rec new (val':UInt32.t) (i:()) (return'  (x:t_Mutex))= {[@expl:new requires] [%#smutex'0] inv i val'}
    any [ return''0 (result:t_Mutex)-> (! return' {result}) ] 
  
  let rec leak (b:t_Mutex) (return'  (x:MutBorrow.t t_Mutex))= any
    [ return''0 (result:MutBorrow.t t_Mutex)-> {[%#smutex'1] result.current = b} (! return' {result}) ]
  
  
  predicate resolve (self: MutBorrow.t t_Mutex) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0: MutBorrow.t t_Mutex) =
    resolve _0
  
  type t_AddsTwo  =
    { t_AddsTwo__mutex: t_Mutex }
  
  type t_JoinHandleInner
  
  type t_SpawnPostCond  =
    { t_SpawnPostCond__f: t_AddsTwo }
  
  type t_JoinHandle  =
    { t_JoinHandle__0: t_JoinHandleInner; t_JoinHandle__1: t_SpawnPostCond }
  
  predicate precondition [#"mutex.rs" 91 4 91 33] (self: t_AddsTwo) =
    [%#smutex'5] true
  
  let rec spawn (f:t_AddsTwo) (return'  (x:t_JoinHandle))= {[@expl:spawn requires] [%#smutex'2] precondition f}
    any [ return''0 (result:t_JoinHandle)-> (! return' {result}) ] 
  
  type t_Result  =
    | C_Ok ()
    | C_Err ()
  
  predicate postcondition [#"mutex.rs" 96 4 96 41] (self: t_AddsTwo) (_1: ()) =
    [%#smutex'7] true
  
  predicate inv'0 [#"mutex.rs" 150 4 150 39] (self: t_SpawnPostCond) (v: ()) =
    [%#smutex'6] postcondition self.t_SpawnPostCond__f v
  
  let rec join (self:t_JoinHandle) (return'  (x:t_Result))= any
    [ return''0 (result:t_Result)-> {[%#smutex'3] match result with
        | C_Ok v -> inv'0 self.t_JoinHandle__1 v
        | _ -> true
        end}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec concurrent[#"mutex.rs" 163 0 163 19] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- () ] s1
      | s1 = new {[%#smutex] (0: UInt32.t)} {_5} (fun (_ret:t_Mutex) ->  [ &_4 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = bb2
    | bb2 = s0 [ s0 = leak {_4} (fun (_ret:MutBorrow.t t_Mutex) ->  [ &_2 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &m <- _2.current ] s1
      | s1 = -{resolve'0 _2}- s2
      | s2 =  [ &_8 <- m ] s3
      | s3 =  [ &t1 <- { t_AddsTwo__mutex = _8 } ] s4
      | s4 = spawn {t1} (fun (_ret:t_JoinHandle) ->  [ &j1 <- _ret ] s5)
      | s5 = bb4 ]
    
    | bb4 = s0
      [ s0 =  [ &_13 <- m ] s1
      | s1 =  [ &t2 <- { t_AddsTwo__mutex = _13 } ] s2
      | s2 = spawn {t2} (fun (_ret:t_JoinHandle) ->  [ &j2 <- _ret ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0 [ s0 = join {j1} (fun (_ret:t_Result) ->  [ &_16 <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = join {j2} (fun (_ret:t_Result) ->  [ &_18 <- _ret ] s1) | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return''0 {_0} ]
    )
    [ & _0: () = Any.any_l ()
    | & m: t_Mutex = Any.any_l ()
    | & _2: MutBorrow.t t_Mutex = Any.any_l ()
    | & _4: t_Mutex = Any.any_l ()
    | & _5: () = Any.any_l ()
    | & t1: t_AddsTwo = Any.any_l ()
    | & _8: t_Mutex = Any.any_l ()
    | & j1: t_JoinHandle = Any.any_l ()
    | & t2: t_AddsTwo = Any.any_l ()
    | & _13: t_Mutex = Any.any_l ()
    | & j2: t_JoinHandle = Any.any_l ()
    | & _16: t_Result = Any.any_l ()
    | & _18: t_Result = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_mutex__qyi5425553346843331945__call__refines [#"mutex.rs" 100 4 100 23] (* <AddsTwo<'a> as FakeFnOnce> *)
  let%span smutex = "mutex.rs" 100 4 100 23
  let%span smutex'0 = "mutex.rs" 92 8 92 12
  let%span smutex'1 = "mutex.rs" 97 8 97 12
  
  type t_MutexInner
  
  type t_Mutex  =
    { t_Mutex__0: t_MutexInner; t_Mutex__1: () }
  
  type t_AddsTwo  =
    { t_AddsTwo__mutex: t_Mutex }
  
  predicate precondition [#"mutex.rs" 91 4 91 33] (self: t_AddsTwo) =
    [%#smutex'0] true
  
  predicate postcondition [#"mutex.rs" 96 4 96 41] (self: t_AddsTwo) (_1: ()) =
    [%#smutex'1] true
  
  goal refines: [%#smutex] forall self: t_AddsTwo. precondition self  -> (forall result: (). postcondition self result)
end
