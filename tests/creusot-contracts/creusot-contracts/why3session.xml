<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.15.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC5" version="1.3.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.6.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="creusot-contracts.coma"/>
<theory name="M_cell__permcell__impl_PermCell_T_2__take" proved="true">
 <goal name="vc_take_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.009079" steps="28"/></proof>
 </goal>
</theory>
<theory name="M_ghost__fn_ghost__impl_Clone_for_FnGhostWrapper_F__clone" proved="true">
 <goal name="vc_clone_FnGhostWrapper_F" proved="true">
 <proof prover="2"><result status="valid" time="0.017880" steps="705"/></proof>
 </goal>
</theory>
<theory name="M_ghost__fn_ghost__impl_FnGhostWrapper_F__new" proved="true">
 <goal name="vc___new_F" proved="true">
 <proof prover="1"><result status="valid" time="0.032733" steps="226"/></proof>
 </goal>
</theory>
<theory name="M_ghost__local_invariant__impl_LocalInvariantExt_for_Ghost_ref_LocalInvariant_T__open" proved="true">
 <goal name="vc_open_Ghost_ref_LocalInvariant_T" proved="true">
 <proof prover="3"><result status="valid" time="0.035660" steps="54"/></proof>
 </goal>
</theory>
<theory name="M_ghost__local_invariant__impl_LocalInvariantExt_for_Ghost_ref_T__open" proved="true">
 <goal name="vc_open_Ghost_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.030333" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_ghost__local_invariant__impl_LocalInvariantExt_for_ref_Ghost_L__open" proved="true">
 <goal name="vc_open_ref_Ghost_L" proved="true">
 <proof prover="3"><result status="valid" time="0.017207" steps="79"/></proof>
 </goal>
</theory>
<theory name="M_ghost__ptr_own__impl_PtrOwn_T_0__new" proved="true">
 <goal name="vc_new_T" proved="true">
 <proof prover="2"><result status="valid" time="0.016759" steps="2640"/></proof>
 </goal>
</theory>
<theory name="M_ghost__ptr_own__impl_PtrOwn_T_1__drop" proved="true">
 <goal name="vc_drop_T" proved="true">
 <proof prover="2"><result status="valid" time="0.012155" steps="2303"/></proof>
 </goal>
</theory>
<theory name="M_ghost__ptr_own__impl_PtrOwn_slice_T__index_ptr_own_ref_ghost" proved="true">
 <goal name="vc_index_ptr_own_ref_ghost_T" proved="true">
 <proof prover="0"><result status="valid" time="0.019500" steps="66416"/></proof>
 </goal>
</theory>
<theory name="M_ghost__ptr_own__impl_PtrOwn_slice_T__index_ptr_own_mut_ghost" proved="true">
 <goal name="vc_index_ptr_own_mut_ghost_T" proved="true">
 <proof prover="0"><result status="valid" time="0.025549" steps="146758"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__fmap_view__impl_Authority_K_V__new" proved="true">
 <goal name="vc_new_K" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.034935" steps="516"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__fmap_view__impl_Authority_K_V__insert" proved="true">
 <goal name="vc_insert_K&#39;1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_insert_K&#39;1.0" expl="update requires" proved="true">
  <proof prover="3"><result status="valid" time="0.156594" steps="117"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.068353" steps="1136"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.2" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.080230" steps="413"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.3" expl="core requires" proved="true">
  <proof prover="3"><result status="valid" time="0.085707" steps="96"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.4" expl="insert result type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.266222" steps="3519"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.5" expl="insert ensures #0" proved="true">
  <proof prover="3"><result status="valid" time="0.082958" steps="57"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.6" expl="insert ensures #1" proved="true">
  <proof prover="3"><result status="valid" time="0.085765" steps="64"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.7" expl="insert ensures #2" proved="true">
  <proof prover="3"><result status="valid" time="0.086219" steps="65"/></proof>
  </goal>
  <goal name="vc_insert_K&#39;1.8" expl="insert ensures #3" proved="true">
  <proof prover="3"><result status="valid" time="0.037962" steps="70"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_ghost__resource__fmap_view__impl_Authority_K_V__contains" proved="true">
 <goal name="vc_contains_K" proved="true">
 <proof prover="0"><result status="valid" time="0.589430" steps="934557"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__fmap_view__impl_Clone_for_Fragment_K_V__clone" proved="true">
 <goal name="vc_clone_Fragment_K_V" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.078692" steps="1160"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__m__impl_Resource_R__split_off" proved="true">
 <goal name="vc_split_off_R" proved="true">
 <proof prover="3"><result status="valid" time="0.020847" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__m__impl_Resource_R__join_in" proved="true">
 <goal name="vc_join_in_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.049450" steps="18"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__m__impl_Resource_R__weaken" proved="true">
 <goal name="vc_weaken_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.062511" steps="119"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__m__impl_Resource_R__update" proved="true">
 <goal name="vc_update_R" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_update_R.0" expl="type invariant" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.094231" steps="8"/></proof>
  </goal>
  <goal name="vc_update_R.1" expl="assertion" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.040033" steps="23"/></proof>
  </goal>
  <goal name="vc_update_R.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.220364" steps="13700"/></proof>
  </goal>
  <goal name="vc_update_R.3" expl="update_raw requires" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_update_R.3.0" expl="update_raw requires" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.243209" steps="1809"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_update_R.4" expl="update ensures #0" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.039965" steps="18"/></proof>
  </goal>
  <goal name="vc_update_R.5" expl="update ensures #1" proved="true">
  <proof prover="2"><result status="valid" time="0.070516" steps="12843"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_ghost__impl_Clone_for_Ghost_T__clone" proved="true">
 <goal name="vc_clone_Ghost_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.027056" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_invariant__impl_Clone_for_Subset_T__clone" proved="true">
 <goal name="vc_clone_Subset_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020464" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_FMap_K_V__ext_eq" proved="true">
 <goal name="vc_ext_eq_K" proved="true">
 <proof prover="1"><result status="valid" time="0.020341" steps="278"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_FMap_K_V__filter" proved="true">
 <goal name="vc_filter_K" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.053928" steps="49"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_FMap_K_V_0__contains_ghost" proved="true">
 <goal name="vc_contains_ghost_K" proved="true">
 <proof prover="3"><result status="valid" time="0.037972" steps="54"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Index_for_FMap_K_V__index" proved="true">
 <goal name="vc_index_FMap_K_V&#39;0" proved="true">
 <proof prover="3"><result status="valid" time="0.022337" steps="51"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IntoIterator_for_FMap_K_V__into_iter" proved="true">
 <goal name="vc_into_iter_FMap_K_V" proved="true">
 <proof prover="0"><result status="valid" time="0.026322" steps="2363"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Iterator_for_FMapIter_K_V__next" proved="true">
 <goal name="vc_next_FMapIter_K_V" proved="true">
 <proof prover="2"><result status="valid" time="0.279336" steps="19243"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIter_K_V__produces_refl" proved="true">
 <goal name="vc_produces_refl_FMapIter_K_V" proved="true">
 <proof prover="2"><result status="valid" time="0.027806" steps="1939"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIter_K_V__produces_trans" proved="true">
 <goal name="vc_produces_trans_FMapIter_K_V" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_FMapIter_K_V.0" proved="true">
  <proof prover="0"><result status="valid" time="0.031719" steps="102179"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IntoIterator_for_ref_FMap_K_V__into_iter" proved="true">
 <goal name="vc_into_iter_ref_FMap_K_V" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020855" steps="857"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIterRef_K_V__produces_refl" proved="true">
 <goal name="vc_produces_refl_FMapIterRef_K_V" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.023652" steps="36"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIterRef_K_V__produces_trans" proved="true">
 <goal name="vc_produces_trans_FMapIterRef_K_V" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_FMapIterRef_K_V.0" proved="true">
  <proof prover="0"><result status="valid" time="0.403491" steps="1017321"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__ext_eq" proved="true">
 <goal name="vc_ext_eq_T" proved="true">
 <proof prover="3"><result status="valid" time="0.026481" steps="21"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__singleton" proved="true">
 <goal name="vc_singleton_T" proved="true">
 <proof prover="3"><result status="valid" time="0.033985" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__unions" proved="true">
 <goal name="vc_unions_T" proved="true">
 <proof prover="3"><result status="valid" time="0.040470" steps="288"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__cons" proved="true">
 <goal name="vc_cons_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_cons_T.0" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.083150" steps="79"/></proof>
  </goal>
  <goal name="vc_cons_T.1" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.074430" steps="104"/></proof>
  </goal>
  <goal name="vc_cons_T.2" expl="cons ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.074388" steps="79"/></proof>
  </goal>
  <goal name="vc_cons_T.3" expl="cons ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.073638" steps="53"/></proof>
  </goal>
  <goal name="vc_cons_T.4" expl="cons ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.071065" steps="52"/></proof>
  </goal>
  <goal name="vc_cons_T.5" expl="cons ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.062216" steps="60"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__concat" proved="true">
 <goal name="vc_concat_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.090878" steps="154"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__replicate" proved="true">
 <goal name="vc_replicate_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_replicate_T.0" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.036670" steps="17"/></proof>
  </goal>
  <goal name="vc_replicate_T.1" expl="replicate ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.014426" steps="14"/></proof>
  </goal>
  <goal name="vc_replicate_T.2" expl="replicate ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.069185" steps="10933"/></proof>
  </goal>
  <goal name="vc_replicate_T.3" expl="replicate ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.026918" steps="13"/></proof>
  </goal>
  <goal name="vc_replicate_T.4" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.024219" steps="23"/></proof>
  </goal>
  <goal name="vc_replicate_T.5" expl="replicate requires" proved="true">
  <proof prover="0"><result status="valid" time="0.031967" steps="23779"/></proof>
  </goal>
  <goal name="vc_replicate_T.6" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.025738" steps="4"/></proof>
  </goal>
  <goal name="vc_replicate_T.7" expl="replicate ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.095211" steps="24210"/></proof>
  </goal>
  <goal name="vc_replicate_T.8" expl="replicate ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.018224" steps="179"/></proof>
  </goal>
  <goal name="vc_replicate_T.9" expl="replicate ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.012738" steps="231"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fset__impl_FSet_T__replicate_up_to" proved="true">
 <goal name="vc_replicate_up_to_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.044696" steps="390"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__unions_union" proved="true">
 <goal name="vc_unions_union_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_unions_union_T.0" expl="unions_union ensures #0" proved="true">
  <proof prover="3"><result status="valid" time="0.031284" steps="254"/></proof>
  </goal>
  <goal name="vc_unions_union_T.1" expl="unions_union ensures #1" proved="true">
  <proof prover="3"><result status="valid" time="0.136826" steps="298"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fset__map_union" proved="true">
 <goal name="vc_map_union_T" proved="true">
 <proof prover="3"><result status="valid" time="0.049742" steps="357"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__concat_union" proved="true">
 <goal name="vc_concat_union_T" proved="true">
 <proof prover="3"><result status="valid" time="0.105129" steps="989"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__cons_concat" proved="true">
 <goal name="vc_cons_concat_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_cons_concat_T.0" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.052159" steps="151"/></proof>
  </goal>
  <goal name="vc_cons_concat_T.1" proved="true">
  <proof prover="3"><result status="valid" time="0.066614" steps="82"/></proof>
  </goal>
  <goal name="vc_cons_concat_T.2" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.020039" steps="108"/></proof>
  </goal>
  <goal name="vc_cons_concat_T.3" expl="cons_concat ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.026747" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fset__concat_replicate" proved="true">
 <goal name="vc_concat_replicate_T" proved="true">
 <proof prover="1"><result status="valid" time="0.188427" steps="31065"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__concat_empty" proved="true">
 <goal name="vc_concat_empty_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_concat_empty_T.0" proved="true">
  <proof prover="1"><result status="valid" time="0.094656" steps="15522"/></proof>
  </goal>
  <goal name="vc_concat_empty_T.1" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.037990" steps="32"/></proof>
  </goal>
  <goal name="vc_concat_empty_T.2" expl="concat_empty ensures #0" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.084698" steps="176"/></proof>
  </goal>
  <goal name="vc_concat_empty_T.3" expl="concat_empty ensures #1" proved="true">
  <proof prover="2"><result status="valid" time="0.565512" steps="36695"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__fset__concat_replicate_up_to" proved="true">
 <goal name="vc_concat_replicate_up_to_T" proved="true">
 <proof prover="1"><result status="valid" time="0.204143" steps="36834"/></proof>
 </goal>
</theory>
<theory name="M_logic__id__impl_PartialEq_for_Id__ne" proved="true">
 <goal name="vc_ne_Id" proved="true">
 <proof prover="3"><result status="valid" time="0.017295" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.014972" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.011522" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.023869" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.028658" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__refl" proved="true">
 <goal name="vc_refl_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.022233" steps="3"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__trans" proved="true">
 <goal name="vc_trans_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.015417" steps="9"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__antisym1" proved="true">
 <goal name="vc_antisym1_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.013880" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__antisym2" proved="true">
 <goal name="vc_antisym2_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.016229" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_ref_T" proved="true">
 <proof prover="3"><result status="valid" time="0.013231" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.026136" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.023851" steps="12"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.020560" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.024191" steps="12"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__refl" proved="true">
 <goal name="vc_refl_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.012838" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__trans" proved="true">
 <goal name="vc_trans_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.023882" steps="41"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__antisym1" proved="true">
 <goal name="vc_antisym1_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.015245" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__antisym2" proved="true">
 <goal name="vc_antisym2_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.013018" steps="13"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_Int" proved="true">
 <proof prover="3"><result status="valid" time="0.012331" steps="11"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.014725" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.018896" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.024971" steps="24"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.027649" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__refl" proved="true">
 <goal name="vc_refl_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.010456" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__trans" proved="true">
 <goal name="vc_trans_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.015359" steps="56"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__antisym1" proved="true">
 <goal name="vc_antisym1_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.016770" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__antisym2" proved="true">
 <goal name="vc_antisym2_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.019319" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_u8" proved="true">
 <proof prover="3"><result status="valid" time="0.011648" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.011073" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.027943" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.026622" steps="24"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.009824" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__refl" proved="true">
 <goal name="vc_refl_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.016738" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__trans" proved="true">
 <goal name="vc_trans_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.022715" steps="56"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__antisym1" proved="true">
 <goal name="vc_antisym1_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.021826" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__antisym2" proved="true">
 <goal name="vc_antisym2_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.015576" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_u16" proved="true">
 <proof prover="3"><result status="valid" time="0.023255" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.018478" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.017108" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.025920" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.023367" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__refl" proved="true">
 <goal name="vc_refl_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.013891" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__trans" proved="true">
 <goal name="vc_trans_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.027960" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__antisym1" proved="true">
 <goal name="vc_antisym1_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.014844" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__antisym2" proved="true">
 <goal name="vc_antisym2_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.020998" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_u32" proved="true">
 <proof prover="3"><result status="valid" time="0.020074" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.016047" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.014159" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.026254" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.013816" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__refl" proved="true">
 <goal name="vc_refl_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.025374" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__trans" proved="true">
 <goal name="vc_trans_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.018872" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__antisym1" proved="true">
 <goal name="vc_antisym1_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.015085" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__antisym2" proved="true">
 <goal name="vc_antisym2_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.016174" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_u64" proved="true">
 <proof prover="3"><result status="valid" time="0.014972" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.023676" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.010079" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.013985" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.011476" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__refl" proved="true">
 <goal name="vc_refl_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.015582" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__trans" proved="true">
 <goal name="vc_trans_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.012947" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__antisym1" proved="true">
 <goal name="vc_antisym1_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.019404" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__antisym2" proved="true">
 <goal name="vc_antisym2_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.022714" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.013166" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.023882" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.023767" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.013758" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.017283" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__refl" proved="true">
 <goal name="vc_refl_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.010891" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__trans" proved="true">
 <goal name="vc_trans_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.014828" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__antisym1" proved="true">
 <goal name="vc_antisym1_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.024968" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__antisym2" proved="true">
 <goal name="vc_antisym2_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.022463" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_usize" proved="true">
 <proof prover="3"><result status="valid" time="0.021560" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.018047" steps="30"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.011808" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.022263" steps="25"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.024980" steps="30"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__refl" proved="true">
 <goal name="vc_refl_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.013072" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__trans" proved="true">
 <goal name="vc_trans_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.017174" steps="56"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__antisym1" proved="true">
 <goal name="vc_antisym1_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.014123" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__antisym2" proved="true">
 <goal name="vc_antisym2_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.020817" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_i8" proved="true">
 <proof prover="3"><result status="valid" time="0.012296" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.018072" steps="26"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.025045" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.012494" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.024295" steps="26"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__refl" proved="true">
 <goal name="vc_refl_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.013021" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__trans" proved="true">
 <goal name="vc_trans_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.018148" steps="51"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__antisym1" proved="true">
 <goal name="vc_antisym1_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.024501" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__antisym2" proved="true">
 <goal name="vc_antisym2_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.014822" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_i16" proved="true">
 <proof prover="3"><result status="valid" time="0.021345" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.022737" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.019945" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.022363" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.022322" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__refl" proved="true">
 <goal name="vc_refl_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.013492" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__trans" proved="true">
 <goal name="vc_trans_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.013164" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__antisym1" proved="true">
 <goal name="vc_antisym1_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.015989" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__antisym2" proved="true">
 <goal name="vc_antisym2_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.021671" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_i32" proved="true">
 <proof prover="3"><result status="valid" time="0.015098" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.024773" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.017124" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.025376" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.017062" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__refl" proved="true">
 <goal name="vc_refl_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.016699" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__trans" proved="true">
 <goal name="vc_trans_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.016716" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__antisym1" proved="true">
 <goal name="vc_antisym1_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.018850" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__antisym2" proved="true">
 <goal name="vc_antisym2_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.015509" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.021732" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.018285" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.012543" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.021743" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.020208" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__refl" proved="true">
 <goal name="vc_refl_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.019574" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__trans" proved="true">
 <goal name="vc_trans_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.026822" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__antisym1" proved="true">
 <goal name="vc_antisym1_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.012496" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__antisym2" proved="true">
 <goal name="vc_antisym2_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.015074" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.013409" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.013805" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.011861" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.024309" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.015945" steps="23"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__refl" proved="true">
 <goal name="vc_refl_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.011513" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__trans" proved="true">
 <goal name="vc_trans_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.015250" steps="50"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__antisym1" proved="true">
 <goal name="vc_antisym1_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.023488" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__antisym2" proved="true">
 <goal name="vc_antisym2_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.016330" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_isize" proved="true">
 <proof prover="3"><result status="valid" time="0.013910" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_char" proved="true">
 <proof prover="3"><result status="valid" time="0.020809" steps="33"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_char" proved="true">
 <proof prover="3"><result status="valid" time="0.021899" steps="34"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_char" proved="true">
 <proof prover="3"><result status="valid" time="0.019170" steps="33"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_char" proved="true">
 <proof prover="3"><result status="valid" time="0.009520" steps="33"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__refl" proved="true">
 <goal name="vc_refl_char" proved="true">
 <proof prover="3"><result status="valid" time="0.012917" steps="9"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__trans" proved="true">
 <goal name="vc_trans_char" proved="true">
 <proof prover="3"><result status="valid" time="0.026955" steps="61"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__antisym1" proved="true">
 <goal name="vc_antisym1_char" proved="true">
 <proof prover="3"><result status="valid" time="0.022480" steps="25"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__antisym2" proved="true">
 <goal name="vc_antisym2_char" proved="true">
 <proof prover="3"><result status="valid" time="0.016758" steps="32"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_char" proved="true">
 <proof prover="3"><result status="valid" time="0.013126" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.015006" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.017868" steps="15"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.025131" steps="15"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.012792" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__refl" proved="true">
 <goal name="vc_refl_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.011637" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__trans" proved="true">
 <goal name="vc_trans_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.010871" steps="26"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__antisym1" proved="true">
 <goal name="vc_antisym1_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.014191" steps="9"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__antisym2" proved="true">
 <goal name="vc_antisym2_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.014327" steps="9"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_bool" proved="true">
 <proof prover="3"><result status="valid" time="0.013402" steps="16"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.020846" steps="61"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.025123" steps="60"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.021281" steps="61"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.019699" steps="60"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__refl" proved="true">
 <goal name="vc_refl_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.010253" steps="18"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__trans" proved="true">
 <goal name="vc_trans_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.025064" steps="406"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__antisym1" proved="true">
 <goal name="vc_antisym1_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.011687" steps="55"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__antisym2" proved="true">
 <goal name="vc_antisym2_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.012140" steps="76"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_tup2_A_B" proved="true">
 <proof prover="3"><result status="valid" time="0.014025" steps="61"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__factor" proved="true">
 <goal name="vc_factor_Ag_T" proved="true">
 <proof prover="3"><result status="valid" time="0.018904" steps="37"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__commutative" proved="true">
 <goal name="vc_commutative_Ag_T" proved="true">
 <proof prover="3"><result status="valid" time="0.012155" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__associative" proved="true">
 <goal name="vc_associative_Ag_T" proved="true">
 <proof prover="3"><result status="valid" time="0.018473" steps="80"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__core" proved="true">
 <goal name="vc_core_Ag_T" proved="true">
 <proof prover="3"><result status="valid" time="0.015201" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_Ag_T" proved="true">
 <proof prover="3"><result status="valid" time="0.013244" steps="26"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_ViewRel_for_AuthViewRel_T__rel_mono" proved="true">
 <goal name="vc_rel_mono_AuthViewRel_T" proved="true">
 <proof prover="0"><result status="valid" time="0.017279" steps="3488"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_ViewRel_for_AuthViewRel_T__rel_none" proved="true">
 <goal name="vc_rel_none_AuthViewRel_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015196" steps="11"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_ViewRel_for_AuthViewRel_T__rel_unit" proved="true">
 <goal name="vc_rel_unit_AuthViewRel_T" proved="true">
 <proof prover="0"><result status="valid" time="0.018732" steps="5927"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_Update_for_AuthUpdate_U__update" proved="true">
 <goal name="vc_update_AuthUpdate_U" proved="true">
 <proof prover="2"><result status="valid" time="0.018246" steps="3980"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_Update_for_AuthUpdate_U__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_AuthUpdate_U" proved="true">
 <proof prover="2"><result status="valid" time="0.312690" steps="30528"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__factor" proved="true">
 <goal name="vc_factor_Excl_T" proved="true">
 <proof prover="3"><result status="valid" time="0.016953" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__commutative" proved="true">
 <goal name="vc_commutative_Excl_T" proved="true">
 <proof prover="3"><result status="valid" time="0.021014" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__associative" proved="true">
 <goal name="vc_associative_Excl_T" proved="true">
 <proof prover="3"><result status="valid" time="0.013931" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__core" proved="true">
 <goal name="vc_core_Excl_T" proved="true">
 <proof prover="3"><result status="valid" time="0.016780" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_Excl_T" proved="true">
 <proof prover="3"><result status="valid" time="0.052817" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_Update_for_ExclUpdate_T__update" proved="true">
 <goal name="vc_update_ExclUpdate_T" proved="true">
 <proof prover="3"><result status="valid" time="0.027694" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_Update_for_ExclUpdate_T__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_ExclUpdate_T" proved="true">
 <proof prover="3"><result status="valid" time="0.075416" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__factor" proved="true">
 <goal name="vc_factor_FMap_K_V" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_factor_FMap_K_V.0" proved="true">
  <proof prover="0"><result status="valid" time="0.036268" steps="49972"/></proof>
  </goal>
  <goal name="vc_factor_FMap_K_V.1" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="2.217560" steps="11325"/></proof>
  </goal>
  <goal name="vc_factor_FMap_K_V.2" expl="factor ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.060681" steps="8413"/></proof>
  </goal>
  <goal name="vc_factor_FMap_K_V.3" expl="factor ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.023269" steps="9137"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__commutative" proved="true">
 <goal name="vc_commutative_FMap_K_V" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.043606" steps="222"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__associative" proved="true">
 <goal name="vc_associative_FMap_K_V" proved="true">
 <proof prover="0"><result status="valid" time="1.267920" steps="1335621"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="vc_associative_FMap_K_V.0" proved="true">
  <proof prover="1"><result status="valid" time="0.389989" steps="26865"/></proof>
  </goal>
  <goal name="vc_associative_FMap_K_V.1" expl="associative ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.064569" steps="6138"/></proof>
  </goal>
  <goal name="vc_associative_FMap_K_V.2" expl="associative ensures" proved="true">
  <proof prover="1"><result status="valid" time="3.511667" steps="98121"/></proof>
  </goal>
  <goal name="vc_associative_FMap_K_V.3" expl="associative ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.255414" steps="205811"/></proof>
  </goal>
  <goal name="vc_associative_FMap_K_V.4" expl="associative ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.051640" steps="63744"/></proof>
  </goal>
  <goal name="vc_associative_FMap_K_V.5" expl="associative ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.476128" steps="37296"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__core" proved="true">
 <goal name="vc_core_FMap_K_V" proved="true">
 <proof prover="0"><result status="valid" time="0.014450" steps="2621"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_FMap_K_V" proved="true">
 <proof prover="1"><result status="valid" time="0.197534" steps="21654"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_UnitRA_for_FMap_K_V__unit" proved="true">
 <goal name="vc_unit_FMap_K_V" proved="true">
 <proof prover="2"><result status="valid" time="0.960076" steps="15446"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_UnitRA_for_FMap_K_V__core_total" proved="true">
 <goal name="vc_core_total_FMap_K_V" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.966018" steps="4148"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_UnitRA_for_FMap_K_V__core_is_total" proved="true">
 <goal name="vc_core_is_total_FMap_K_V" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.056667" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_FMap_K_V__total_op" proved="true">
 <goal name="vc_total_op_K" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.112088" steps="873"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_LocalUpdate_for_FMapInsertLocalUpdate_K_V__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_FMapInsertLocalUpdate_K_V" proved="true">
 <proof prover="1"><result status="valid" time="0.554603" steps="33031"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__factor" proved="true">
 <goal name="vc_factor_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.027579" steps="3233"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__commutative" proved="true">
 <goal name="vc_commutative_Option_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.021970" steps="75"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__associative" proved="true">
 <goal name="vc_associative_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.192328" steps="7945"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__core" proved="true">
 <goal name="vc_core_Option_T" proved="true">
 <proof prover="1"><result status="valid" time="0.024048" steps="1745"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.049886" steps="4197"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_UnitRA_for_Option_T__unit" proved="true">
 <goal name="vc_unit_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.021425" steps="1350"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_UnitRA_for_Option_T__core_total" proved="true">
 <goal name="vc_core_total_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.024103" steps="2344"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_UnitRA_for_Option_T__core_is_total" proved="true">
 <goal name="vc_core_is_total_Option_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.055124" steps="7"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_Update_for_OptionUpdate_U__update" proved="true">
 <goal name="vc_update_OptionUpdate_U" proved="true">
 <proof prover="3"><result status="valid" time="0.021731" steps="18"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_Update_for_OptionUpdate_U__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_OptionUpdate_U" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.127102" steps="1354"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__factor" proved="true">
 <goal name="vc_factor_tup2_T_U" proved="true">
 <proof prover="0"><result status="valid" time="0.027911" steps="19476"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__commutative" proved="true">
 <goal name="vc_commutative_tup2_T_U" proved="true">
 <proof prover="0"><result status="valid" time="0.039172" steps="47223"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__associative" proved="true">
 <goal name="vc_associative_tup2_T_U" proved="true">
 <proof prover="1"><result status="valid" time="0.362522" steps="20760"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__core" proved="true">
 <goal name="vc_core_tup2_T_U" proved="true">
 <proof prover="0"><result status="valid" time="0.020381" steps="11911"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_tup2_T_U" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.177722" steps="1030"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_UnitRA_for_tup2_T_U__unit" proved="true">
 <goal name="vc_unit_tup2_T_U" proved="true">
 <proof prover="2"><result status="valid" time="0.041126" steps="6373"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_UnitRA_for_tup2_T_U__core_total" proved="true">
 <goal name="vc_core_total_tup2_T_U" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.123347" steps="394"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_UnitRA_for_tup2_T_U__core_is_total" proved="true">
 <goal name="vc_core_is_total_tup2_T_U" proved="true">
 <proof prover="2"><result status="valid" time="0.012113" steps="2973"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_Update_for_ProdUpdate_U1_U2__update" proved="true">
 <goal name="vc_update_ProdUpdate_U1_U2" proved="true">
 <proof prover="3"><result status="valid" time="0.016061" steps="3"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_Update_for_ProdUpdate_U1_U2__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_ProdUpdate_U1_U2" proved="true">
 <proof prover="0"><result status="valid" time="0.033218" steps="71173"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_LocalUpdate_for_ProdLocalUpdate_U1_U2__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_ProdLocalUpdate_U1_U2" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.942957" steps="5462"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__factor" proved="true">
 <goal name="vc_factor_Sum_R1_R2" proved="true">
 <proof prover="2"><result status="valid" time="0.191479" steps="9101"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__commutative" proved="true">
 <goal name="vc_commutative_Sum_R1_R2" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.032054" steps="253"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__associative" proved="true">
 <goal name="vc_associative_Sum_R1_R2" proved="true">
 <proof prover="0"><result status="valid" time="0.056691" steps="76871"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__core" proved="true">
 <goal name="vc_core_Sum_R1_R2" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.142626" steps="603"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_Sum_R1_R2" proved="true">
 <proof prover="0"><result status="valid" time="0.170247" steps="149542"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateL_U__update" proved="true">
 <goal name="vc_update_SumUpdateL_U" proved="true">
 <proof prover="3"><result status="valid" time="0.016876" steps="16"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateL_U__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_SumUpdateL_U" proved="true">
 <proof prover="2"><result status="valid" time="0.028640" steps="4262"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateR_U__update" proved="true">
 <goal name="vc_update_SumUpdateR_U" proved="true">
 <proof prover="3"><result status="valid" time="0.018158" steps="16"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateR_U__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_SumUpdateR_U" proved="true">
 <proof prover="1"><result status="valid" time="0.017818" steps="5690"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_LocalUpdate_for_SumLocalUpdateL_U__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_SumLocalUpdateL_U" proved="true">
 <proof prover="1"><result status="valid" time="0.161729" steps="16259"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_LocalUpdate_for_SumLocalUpdateR_U__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_SumLocalUpdateR_U" proved="true">
 <proof prover="0"><result status="valid" time="0.035742" steps="76935"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_R__update" proved="true">
 <goal name="vc_update_Snapshot_R" proved="true">
 <proof prover="1"><result status="valid" time="0.016054" steps="690"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_R__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_Snapshot_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.026577" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_Mapping_Choice_R__update" proved="true">
 <goal name="vc_update_Snapshot_Mapping_Choice_R" proved="true">
 <proof prover="1"><result status="valid" time="0.020409" steps="690"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_Mapping_Choice_R__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_Snapshot_Mapping_Choice_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.042324" steps="84"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_LocalUpdate_for_Snapshot_tup2_R_R__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_Snapshot_tup2_R_R" proved="true">
 <proof prover="1"><result status="valid" time="0.026268" steps="3521"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_InhabitedInvariant_for_InnerView_R__inhabits" proved="true">
 <goal name="vc_inhabits_InnerView_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018672" steps="18"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_View_R__frag" proved="true">
 <goal name="vc_frag_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.060997" steps="12"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_View_R__ext_eq" proved="true">
 <goal name="vc_ext_eq_R" proved="true">
 <proof prover="2"><result status="valid" time="0.010551" steps="1383"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_View_R__new" proved="true">
 <goal name="vc_new_R" proved="true">
 <proof prover="2"><result status="valid" time="0.010599" steps="1029"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_View_R__new_frag" proved="true">
 <goal name="vc_new_frag_R" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.011351" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__factor" proved="true">
 <goal name="vc_factor_View_R" proved="true">
 <proof prover="1"><result status="valid" time="0.245295" steps="13491"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__commutative" proved="true">
 <goal name="vc_commutative_View_R" proved="true">
 <proof prover="1"><result status="valid" time="0.014855" steps="3022"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__associative" proved="true">
 <goal name="vc_associative_View_R" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_associative_View_R.0" proved="true">
  <proof prover="2"><result status="valid" time="1.096070" steps="47698"/></proof>
  </goal>
  <goal name="vc_associative_View_R.1" expl="associative ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="1.773263" steps="9730"/></proof>
  </goal>
  <goal name="vc_associative_View_R.2" expl="associative ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="3.430330" steps="10756"/></proof>
  </goal>
  <goal name="vc_associative_View_R.3" expl="associative ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="3.512107" steps="8592"/></proof>
  </goal>
  <goal name="vc_associative_View_R.4" expl="associative ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.189145" steps="643"/></proof>
  </goal>
  <goal name="vc_associative_View_R.5" expl="associative ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="3.401777" steps="9654"/></proof>
  </goal>
  <goal name="vc_associative_View_R.6" expl="associative ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.224270" steps="9024"/></proof>
  </goal>
  <goal name="vc_associative_View_R.7" expl="associative ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.135118" steps="8280"/></proof>
  </goal>
  <goal name="vc_associative_View_R.8" expl="associative ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.456472" steps="19019"/></proof>
  </goal>
  <goal name="vc_associative_View_R.9" expl="associative ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.325058" steps="25515"/></proof>
  </goal>
  <goal name="vc_associative_View_R.10" expl="associative ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.583702" steps="21446"/></proof>
  </goal>
  <goal name="vc_associative_View_R.11" expl="associative ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.261027" steps="19833"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__core" proved="true">
 <goal name="vc_core_View_R" proved="true">
 <proof prover="1"><result status="valid" time="0.010627" steps="2811"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__core_is_maximal_idemp" proved="true">
 <goal name="vc_core_is_maximal_idemp_View_R" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_core_is_maximal_idemp_View_R.0" expl="core_is_maximal_idemp requires #0" proved="true">
  <proof prover="1"><result status="valid" time="0.040386" steps="7229"/></proof>
  </goal>
  <goal name="vc_core_is_maximal_idemp_View_R.1" expl="core_is_maximal_idemp requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.057559" steps="5110"/></proof>
  </goal>
  <goal name="vc_core_is_maximal_idemp_View_R.2" proved="true">
  <proof prover="1"><result status="valid" time="1.479160" steps="66672"/></proof>
  </goal>
  <goal name="vc_core_is_maximal_idemp_View_R.3" proved="true">
  <proof prover="1"><result status="valid" time="0.066808" steps="5430"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_UnitRA_for_View_R__unit" proved="true">
 <goal name="vc_unit_View_R" proved="true">
 <proof prover="1"><result status="valid" time="0.201141" steps="12223"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_UnitRA_for_View_R__core_total" proved="true">
 <goal name="vc_core_total_View_R" proved="true">
 <proof prover="2"><result status="valid" time="0.099231" steps="8992"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_UnitRA_for_View_R__core_is_total" proved="true">
 <goal name="vc_core_is_total_View_R" proved="true">
 <proof prover="0"><result status="valid" time="0.009080" steps="3245"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdate_R_Choice__update" proved="true">
 <goal name="vc_update_ViewUpdate_R_Choice" proved="true">
 <proof prover="0"><result status="valid" time="0.012413" steps="8640"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdate_R_Choice__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_ViewUpdate_R_Choice" proved="true">
 <proof prover="2"><result status="valid" time="0.330866" steps="14834"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateInsert_R__update" proved="true">
 <goal name="vc_update_ViewUpdateInsert_R" proved="true">
 <proof prover="2"><result status="valid" time="0.131246" steps="3876"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateInsert_R__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_ViewUpdateInsert_R" proved="true">
 <proof prover="1"><result status="valid" time="0.585687" steps="30589"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateRemove_R__update" proved="true">
 <goal name="vc_update_ViewUpdateRemove_R" proved="true">
 <proof prover="1"><result status="valid" time="0.013564" steps="1813"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateRemove_R__frame_preserving" proved="true">
 <goal name="vc_frame_preserving_ViewUpdateRemove_R" proved="true">
 <proof prover="2"><result status="valid" time="0.162926" steps="13082"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__trait_RA__incl_op" proved="true">
 <goal name="vc_incl_op_Self" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="1153"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__trait_RA__incl_transitive" proved="true">
 <goal name="vc_incl_transitive_Self" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="6664"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__trait_UnitRA__incl_refl" proved="true">
 <goal name="vc_incl_refl_Self" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018404" steps="25"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__trait_UnitRA__unit_core" proved="true">
 <goal name="vc_unit_core_Self" proved="true">
 <proof prover="1"><result status="valid" time="0.017176" steps="944"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__trait_UnitRA__core_total" proved="true">
 <goal name="vc_core_total_Self" proved="true">
 <proof prover="0"><result status="valid" time="0.015946" steps="31079"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_Real" proved="true">
 <proof prover="1"><result status="valid" time="0.024680" steps="235"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_Real" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.008833" steps="12"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_Real" proved="true">
 <proof prover="2"><result status="valid" time="0.024708" steps="234"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_Real" proved="true">
 <proof prover="0"><result status="valid" time="0.010876" steps="240"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__refl" proved="true">
 <goal name="vc_refl_Real" proved="true">
 <proof prover="0"><result status="valid" time="0.008405" steps="58"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__trans" proved="true">
 <goal name="vc_trans_Real" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.022034" steps="40"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__antisym1" proved="true">
 <goal name="vc_antisym1_Real" proved="true">
 <proof prover="0"><result status="valid" time="0.016434" steps="260"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__antisym2" proved="true">
 <goal name="vc_antisym2_Real" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.019695" steps="12"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_Real" proved="true">
 <proof prover="0"><result status="valid" time="0.021540" steps="189"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Seq_T__map" proved="true">
 <goal name="vc_map_T" proved="true">
 <proof prover="2"><result status="valid" time="0.076109" steps="6885"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Seq_T__flat_map" proved="true">
 <goal name="vc_flat_map_T" proved="true">
 <proof prover="3"><result status="valid" time="0.018064" steps="15"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Seq_T__concat_contains" proved="true">
 <goal name="vc_concat_contains_T" proved="true">
 <proof prover="3"><result status="valid" time="0.084695" steps="309"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Seq_Seq_T__flatten" proved="true">
 <goal name="vc_flatten_T" proved="true">
 <proof prover="3"><result status="valid" time="0.012687" steps="15"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Index_for_Seq_T__index" proved="true">
 <goal name="vc_index_Seq_T" proved="true">
 <proof prover="3"><result status="valid" time="0.028474" steps="77"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IndexMut_for_Seq_T__index_mut" proved="true">
 <goal name="vc_index_mut_Seq_T" proved="true">
 <proof prover="3"><result status="valid" time="0.038840" steps="311"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IntoIterator_for_Seq_T__into_iter" proved="true">
 <goal name="vc_into_iter_Seq_T" proved="true">
 <proof prover="0"><result status="valid" time="0.021965" steps="3585"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Iterator_for_SeqIter_T__next" proved="true">
 <goal name="vc_next_SeqIter_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_next_SeqIter_T.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_next_SeqIter_T.0.0" proved="true">
   <proof prover="0"><result status="valid" time="0.000001" steps="16040"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next_SeqIter_T.1" expl="pop_front_ghost &#39;self&#39; type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.018716" steps="2482"/></proof>
  </goal>
  <goal name="vc_next_SeqIter_T.2" expl="type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.017212" steps="21664"/></proof>
  </goal>
  <goal name="vc_next_SeqIter_T.3" expl="next result type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.014567" steps="2134"/></proof>
  </goal>
  <goal name="vc_next_SeqIter_T.4" expl="next ensures" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_next_SeqIter_T.4.0" expl="next ensures" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.034392" steps="26"/></proof>
   </goal>
   <goal name="vc_next_SeqIter_T.4.1" expl="next ensures" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="vc_next_SeqIter_T.4.1.0" expl="next ensures" proved="true">
    <proof prover="0"><result status="valid" time="0.030222" steps="52423"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_SeqIter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_SeqIter_T.0" expl="produces_refl ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.030267" steps="2894"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_SeqIter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_SeqIter_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.011939" steps="20984"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IntoIterator_for_ref_Seq_T__into_iter" proved="true">
 <goal name="vc_into_iter_ref_Seq_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.030589" steps="81"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Iterator_for_SeqIterRef_T__next" proved="true">
 <goal name="vc_next_SeqIterRef_T" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_next_SeqIterRef_T.0" expl="get_ghost &#39;self&#39; type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.015495" steps="24019"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.1" expl="type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.020676" steps="3266"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_next_SeqIterRef_T.2.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="vc_next_SeqIterRef_T.2.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="vc_next_SeqIterRef_T.2.0.0.0" expl="assertion" proved="true">
     <proof prover="0" timelimit="0.5"><result status="valid" time="0.046047" steps="62091"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next_SeqIterRef_T.3" expl="assertion" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.023089" steps="32052"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.4" expl="next result type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.023208" steps="4300"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.5" expl="next ensures" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.022793" steps="28527"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.6" expl="type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.022061" steps="31439"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.7" expl="assertion" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.025418" steps="40623"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.8" expl="next result type invariant" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.023477" steps="29446"/></proof>
  </goal>
  <goal name="vc_next_SeqIterRef_T.9" expl="next ensures" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_next_SeqIterRef_T.9.0" expl="next ensures" proved="true">
   <proof prover="0"><result status="valid" time="0.092465" steps="190362"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next_SeqIterRef_T.10" proved="true">
  <proof prover="0" timelimit="0.5"><result status="valid" time="0.015925" steps="29408"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIterRef_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_SeqIterRef_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_SeqIterRef_T.0" expl="produces_refl ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.019173" steps="7"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIterRef_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_SeqIterRef_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_SeqIterRef_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.049017" steps="7517"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Resolve_for_SeqIter_T__resolve_coherence" proved="true">
 <goal name="vc_resolve_coherence_SeqIter_T" proved="true">
 <proof prover="2"><result status="valid" time="0.016113" steps="595"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__flat_map_singleton" proved="true">
 <goal name="vc_flat_map_singleton_A" proved="true">
 <proof prover="3"><result status="valid" time="0.050702" steps="292"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__flat_map_push_back" proved="true">
 <goal name="vc_flat_map_push_back_A" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_flat_map_push_back_A.0" proved="true">
  <proof prover="3"><result status="valid" time="0.018799" steps="11"/></proof>
  </goal>
  <goal name="vc_flat_map_push_back_A.1" proved="true">
  <proof prover="3"><result status="valid" time="0.035838" steps="174"/></proof>
  </goal>
  <goal name="vc_flat_map_push_back_A.2" expl="flat_map_push_back ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.304472" steps="925"/></proof>
  </goal>
  <goal name="vc_flat_map_push_back_A.3" expl="flat_map_push_back ensures" proved="true">
  <proof prover="3"><result status="valid" time="0.146862" steps="463"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u8__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_u8" proved="true">
 <proof prover="1"><result status="valid" time="0.038038" steps="5823"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u16__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_u16" proved="true">
 <proof prover="1"><result status="valid" time="0.070911" steps="5823"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u32__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_u32" proved="true">
 <proof prover="2"><result status="valid" time="0.009392" steps="4610"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u64__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_u64" proved="true">
 <proof prover="1"><result status="valid" time="0.102154" steps="5823"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u128__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_u128" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.039700" steps="75"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_usize__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_usize" proved="true">
 <proof prover="2"><result status="valid" time="0.024958" steps="4610"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i8__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_i8" proved="true">
 <proof prover="2"><result status="valid" time="0.026297" steps="4769"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i16__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_i16" proved="true">
 <proof prover="1"><result status="valid" time="0.089265" steps="6078"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i32__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_i32" proved="true">
 <proof prover="1" timelimit="1"><result status="valid" time="0.145010" steps="6078"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i64__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.011574" steps="78"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i128__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_i128" proved="true">
 <proof prover="1"><result status="valid" time="0.018849" steps="6078"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_isize__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_isize" proved="true">
 <proof prover="1"><result status="valid" time="0.035697" steps="6078"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_ref_T__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_ref_T" proved="true">
 <proof prover="0"><result status="valid" time="0.010902" steps="84"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_Box_T_Global__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_Box_T_Global" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="84"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_unit__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_unit" proved="true">
 <proof prover="2"><result status="valid" time="0.024199" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup8_T0_T1_T2_T3_T4_T5_T6_T7__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup8_T0_T1_T2_T3_T4_T5_T6_T7" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_no_infinite_decreasing_sequence_tup8_T0_T1_T2_T3_T4_T5_T6_T7.0" expl="such_that requires" proved="true">
  <proof prover="2"><result status="valid" time="0.032407" steps="3356"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup8_T0_T1_T2_T3_T4_T5_T6_T7.1" expl="no_infinite_decreasing_sequence ensures #0" proved="true">
  <proof prover="0"><result status="valid" time="0.016552" steps="35935"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup8_T0_T1_T2_T3_T4_T5_T6_T7.2" expl="no_infinite_decreasing_sequence ensures #1" proved="true">
  <proof prover="2"><result status="valid" time="0.051714" steps="7505"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup8_T0_T1_T2_T3_T4_T5_T6_T7.3" expl="first_component_decr requires" proved="true">
  <proof prover="0"><result status="valid" time="0.064413" steps="117008"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup8_T0_T1_T2_T3_T4_T5_T6_T7.4" proved="true">
  <proof prover="0"><result status="valid" time="0.211726" steps="252203"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup7_T0_T1_T2_T3_T4_T5_T6__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup7_T0_T1_T2_T3_T4_T5_T6" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_no_infinite_decreasing_sequence_tup7_T0_T1_T2_T3_T4_T5_T6.0" expl="such_that requires" proved="true">
  <proof prover="2"><result status="valid" time="0.024438" steps="3010"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup7_T0_T1_T2_T3_T4_T5_T6.1" expl="no_infinite_decreasing_sequence ensures #0" proved="true">
  <proof prover="0"><result status="valid" time="0.008362" steps="31114"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup7_T0_T1_T2_T3_T4_T5_T6.2" expl="no_infinite_decreasing_sequence ensures #1" proved="true">
  <proof prover="2"><result status="valid" time="0.054705" steps="6712"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup7_T0_T1_T2_T3_T4_T5_T6.3" expl="first_component_decr requires" proved="true">
  <proof prover="0"><result status="valid" time="0.036556" steps="88075"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup7_T0_T1_T2_T3_T4_T5_T6.4" proved="true">
  <proof prover="0"><result status="valid" time="0.069939" steps="81087"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup6_T0_T1_T2_T3_T4_T5__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup6_T0_T1_T2_T3_T4_T5" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_no_infinite_decreasing_sequence_tup6_T0_T1_T2_T3_T4_T5.0" expl="such_that requires" proved="true">
  <proof prover="0"><result status="valid" time="0.000001" steps="24127"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup6_T0_T1_T2_T3_T4_T5.1" expl="no_infinite_decreasing_sequence ensures #0" proved="true">
  <proof prover="0"><result status="valid" time="0.014328" steps="27631"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup6_T0_T1_T2_T3_T4_T5.2" expl="no_infinite_decreasing_sequence ensures #1" proved="true">
  <proof prover="0"><result status="valid" time="0.010586" steps="31680"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup6_T0_T1_T2_T3_T4_T5.3" expl="first_component_decr requires" proved="true">
  <proof prover="0"><result status="valid" time="0.037346" steps="64836"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup6_T0_T1_T2_T3_T4_T5.4" proved="true">
  <proof prover="0"><result status="valid" time="0.091805" steps="130227"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup5_T0_T1_T2_T3_T4__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup5_T0_T1_T2_T3_T4" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_no_infinite_decreasing_sequence_tup5_T0_T1_T2_T3_T4.0" expl="such_that requires" proved="true">
  <proof prover="2"><result status="valid" time="0.025390" steps="2384"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup5_T0_T1_T2_T3_T4.1" expl="no_infinite_decreasing_sequence ensures #0" proved="true">
  <proof prover="2"><result status="valid" time="0.032726" steps="4062"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup5_T0_T1_T2_T3_T4.2" expl="no_infinite_decreasing_sequence ensures #1" proved="true">
  <proof prover="0"><result status="valid" time="0.020592" steps="27341"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup5_T0_T1_T2_T3_T4.3" expl="first_component_decr requires" proved="true">
  <proof prover="0"><result status="valid" time="0.016450" steps="46724"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup5_T0_T1_T2_T3_T4.4" proved="true">
  <proof prover="0"><result status="valid" time="0.050936" steps="108513"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup4_T0_T1_T2_T3__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup4_T0_T1_T2_T3" proved="true">
 <proof prover="1"><result status="valid" time="1.639191" steps="101226"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup3_T0_T1_T2__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup3_T0_T1_T2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_no_infinite_decreasing_sequence_tup3_T0_T1_T2.0" expl="such_that requires" proved="true">
  <proof prover="2"><result status="valid" time="0.036750" steps="1846"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup3_T0_T1_T2.1" expl="no_infinite_decreasing_sequence ensures #0" proved="true">
  <proof prover="0"><result status="valid" time="0.000001" steps="17655"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup3_T0_T1_T2.2" expl="no_infinite_decreasing_sequence ensures #1" proved="true">
  <proof prover="0"><result status="valid" time="0.006953" steps="19251"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup3_T0_T1_T2.3" expl="first_component_decr requires" proved="true">
  <proof prover="0"><result status="valid" time="0.010663" steps="23039"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup3_T0_T1_T2.4" proved="true">
  <proof prover="1"><result status="valid" time="0.114991" steps="19445"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup2_T0_T1__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup2_T0_T1" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_no_infinite_decreasing_sequence_tup2_T0_T1.0" expl="such_that requires" proved="true">
  <proof prover="1"><result status="valid" time="0.032617" steps="3333"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup2_T0_T1.1" expl="no_infinite_decreasing_sequence ensures #0" proved="true">
  <proof prover="0"><result status="valid" time="0.000001" steps="13744"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup2_T0_T1.2" expl="no_infinite_decreasing_sequence ensures #1" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.034480" steps="44"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup2_T0_T1.3" expl="first_component_decr requires" proved="true">
  <proof prover="0"><result status="valid" time="0.013823" steps="14763"/></proof>
  </goal>
  <goal name="vc_no_infinite_decreasing_sequence_tup2_T0_T1.4" proved="true">
  <proof prover="0"><result status="valid" time="0.021611" steps="26267"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup1_T0__no_infinite_decreasing_sequence" proved="true">
 <goal name="vc_no_infinite_decreasing_sequence_tup1_T0" proved="true">
 <proof prover="1"><result status="valid" time="0.626144" steps="42600"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__extract_next_decr" proved="true">
 <goal name="vc_extract_next_decr_T1" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.030933" steps="24"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__extract_nth" proved="true">
 <goal name="vc_extract_nth_T1" proved="true">
 <proof prover="2"><result status="valid" time="0.010755" steps="837"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__first_component_decr" proved="true">
 <goal name="vc_first_component_decr_T1" proved="true">
 <proof prover="3"><result status="valid" time="0.146064" steps="204"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_Clone_for_PeanoInt__clone" proved="true">
 <goal name="vc_clone_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.064810" steps="815"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_Default_for_PeanoInt__default" proved="true">
 <goal name="vc_default_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.055131" steps="812"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.099221" steps="2202"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.085602" steps="1998"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.054365" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.058781" steps="9"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__refl" proved="true">
 <goal name="vc_refl_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.037237" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__trans" proved="true">
 <goal name="vc_trans_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.047638" steps="17"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__antisym1" proved="true">
 <goal name="vc_antisym1_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.050914" steps="7"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__antisym2" proved="true">
 <goal name="vc_antisym2_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.079109" steps="2220"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.069299" steps="13"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__lt" proved="true">
 <goal name="vc_lt_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.023799" steps="47"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__le" proved="true">
 <goal name="vc_le_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.022300" steps="3284"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__gt" proved="true">
 <goal name="vc_gt_PeanoInt" proved="true">
 <proof prover="2"><result status="valid" time="0.022646" steps="3288"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__ge" proved="true">
 <goal name="vc_ge_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018592" steps="47"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_Ord_for_PeanoInt__cmp" proved="true">
 <goal name="vc_cmp_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.108429" steps="97"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialEq_for_PeanoInt__eq" proved="true">
 <goal name="vc_eq_PeanoInt" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.029289" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PeanoInt__to_u128" proved="true">
 <goal name="vc_to_u128" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.047984" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PeanoInt__to_i128" proved="true">
 <goal name="vc_to_i128" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.048572" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_From_for_i64__from" proved="true">
 <goal name="vc_from_i64" proved="true">
 <proof prover="3"><result status="valid" time="0.038778" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_From_for_u128__from" proved="true">
 <goal name="vc_from_u128" proved="true">
 <proof prover="3"><result status="valid" time="0.035025" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_From_for_i128__from" proved="true">
 <goal name="vc_from_i128" proved="true">
 <proof prover="3"><result status="valid" time="0.042780" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_resolve__impl_Resolve_for_ref_T__resolve_coherence" proved="true">
 <goal name="vc_resolve_coherence_ref_T" proved="true">
 <proof prover="2"><result status="valid" time="0.010738" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_resolve__impl_Resolve_for_ref_T_0__resolve_coherence" proved="true">
 <goal name="vc_resolve_coherence_ref_T" proved="true">
 <proof prover="0"><result status="valid" time="0.002699" steps="191"/></proof>
 </goal>
</theory>
<theory name="M_std__array__impl_IteratorSpec_for_IntoIter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_IntoIter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_IntoIter_T.0" expl="produces_refl ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.009784" steps="20095"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__array__impl_IteratorSpec_for_IntoIter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_IntoIter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_IntoIter_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.026003" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__clone__extern_spec_T_Clone_ref_T_clone_body" proved="true">
 <goal name="vc_extern_spec_T_Clone__ref_T_clone_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.018785" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IntoIter_K_V__produces_refl" proved="true">
 <goal name="vc_produces_refl_IntoIter_K_V" proved="true">
 <proof prover="0"><result status="valid" time="0.012525" steps="4575"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IntoIter_K_V__produces_trans" proved="true">
 <goal name="vc_produces_trans_IntoIter_K_V" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="vc_produces_trans_IntoIter_K_V.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_IntoIter_K_V.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.074648" steps="3363"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.1" proved="true">
   <proof prover="2"><result status="valid" time="0.050463" steps="3048"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.046765" steps="4106"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.3" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.549076" steps="2027"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.4" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.079636" steps="14"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.5" proved="true">
   <proof prover="2"><result status="valid" time="0.154432" steps="4610"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.6" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.214749" steps="1189"/></proof>
   </goal>
   <goal name="vc_produces_trans_IntoIter_K_V.0.7" proved="true">
   <proof prover="0"><result status="valid" time="0.012414" steps="29675"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_Iter_K_V__produces_refl" proved="true">
 <goal name="vc_produces_refl_Iter_K_V" proved="true">
 <proof prover="0"><result status="valid" time="0.008192" steps="4575"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_Iter_K_V__produces_trans" proved="true">
 <goal name="vc_produces_trans_Iter_K_V" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="vc_produces_trans_Iter_K_V.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_Iter_K_V.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.028765" steps="5563"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.009993" steps="22727"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.2" proved="true">
   <proof prover="0"><result status="valid" time="0.007156" steps="23815"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.3" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.607560" steps="2027"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.4" proved="true">
   <proof prover="0"><result status="valid" time="0.008731" steps="22403"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.5" proved="true">
   <proof prover="1"><result status="valid" time="0.045562" steps="7049"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.6" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.200034" steps="1190"/></proof>
   </goal>
   <goal name="vc_produces_trans_Iter_K_V.0.7" proved="true">
   <proof prover="2"><result status="valid" time="0.155787" steps="5889"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IterMut_K_V__produces_refl" proved="true">
 <goal name="vc_produces_refl_IterMut_K_V" proved="true">
 <proof prover="2"><result status="valid" time="0.035368" steps="1681"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IterMut_K_V__produces_trans" proved="true">
 <goal name="vc_produces_trans_IterMut_K_V" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="vc_produces_trans_IterMut_K_V.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_IterMut_K_V.0.0" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.033528" steps="18"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.1" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.047273" steps="16"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.063719" steps="4284"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.3" proved="true">
   <proof prover="0"><result status="valid" time="0.015762" steps="27213"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.4" proved="true">
   <proof prover="0"><result status="valid" time="0.010916" steps="23826"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.5" proved="true">
   <proof prover="0"><result status="valid" time="0.013312" steps="26469"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.6" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.171657" steps="1190"/></proof>
   </goal>
   <goal name="vc_produces_trans_IterMut_K_V.0.7" proved="true">
   <proof prover="0"><result status="valid" time="0.012456" steps="31097"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__set_produces_trans" proved="true">
 <goal name="vc_set_produces_trans_T" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="vc_set_produces_trans_T.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_set_produces_trans_T.0.0" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.040991" steps="135"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.1" proved="true">
   <proof prover="2"><result status="valid" time="0.038982" steps="8139"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.2" proved="true">
   <proof prover="2"><result status="valid" time="0.052682" steps="8019"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.3" proved="true">
   <proof prover="2"><result status="valid" time="1.792920" steps="61478"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.4" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.052476" steps="51"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.5" proved="true">
   <proof prover="2"><result status="valid" time="0.037895" steps="8218"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.6" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.065395" steps="19"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.7" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.058680" steps="55"/></proof>
   </goal>
   <goal name="vc_set_produces_trans_T.0.8" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.417132" steps="1170"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_IntoIter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_IntoIter_T" proved="true">
 <proof prover="0"><result status="valid" time="0.021430" steps="48301"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_IntoIter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_IntoIter_T" proved="true">
 <proof prover="0"><result status="valid" time="0.006923" steps="7386"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Iter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Iter_T" proved="true">
 <proof prover="2"><result status="valid" time="0.072080" steps="6138"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Iter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Iter_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.032189" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Intersection_T_S__produces_refl" proved="true">
 <goal name="vc_produces_refl_Intersection_T_S" proved="true">
 <proof prover="2"><result status="valid" time="0.064138" steps="6138"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Intersection_T_S__produces_trans" proved="true">
 <goal name="vc_produces_trans_Intersection_T_S" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.026676" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Difference_T_S__produces_refl" proved="true">
 <goal name="vc_produces_refl_Difference_T_S" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.031750" steps="55"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Difference_T_S__produces_trans" proved="true">
 <goal name="vc_produces_trans_Difference_T_S" proved="true">
 <proof prover="0"><result status="valid" time="0.006246" steps="7386"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_PartialEq_Rhs_ne_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_PartialEq_Rhs_ne_body_Self_" proved="true">
 <proof prover="0"><result status="valid" time="0.031105" steps="381"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_PartialOrd_Rhs_lt_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_PartialOrd_Rhs_lt_body_Self_" proved="true">
 <proof prover="3"><result status="valid" time="0.033551" steps="202"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_PartialOrd_Rhs_le_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_PartialOrd_Rhs_le_body_Self_" proved="true">
 <proof prover="3"><result status="valid" time="0.092082" steps="191"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_PartialOrd_Rhs_gt_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_PartialOrd_Rhs_gt_body_Self_" proved="true">
 <proof prover="3"><result status="valid" time="0.087869" steps="201"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_PartialOrd_Rhs_ge_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_PartialOrd_Rhs_ge_body_Self_" proved="true">
 <proof prover="3"><result status="valid" time="0.032252" steps="202"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_Ord_max_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_Ord_max_body_Self_" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016186" steps="69"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_Ord_min_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_Ord_min_body_Self_" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.045695" steps="64"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_Ord_clamp_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_Ord_clamp_body_Self_" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.081284" steps="165"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_max_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_max_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.050623" steps="1169"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_std_cmp_min_body" proved="true">
 <goal name="vc_extern_spec_std_cmp_min_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.036889" steps="1169"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i8_i8_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i8_i8_lt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018468" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i8_i8_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i8_i8_le_body" proved="true">
 <proof prover="1"><result status="valid" time="0.072028" steps="4962"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i8_i8_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i8_i8_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013830" steps="24"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i8_i8_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i8_i8_ge_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014494" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i16_i16_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i16_i16_lt_body" proved="true">
 <proof prover="2"><result status="valid" time="0.064780" steps="2013"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i16_i16_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i16_i16_le_body" proved="true">
 <proof prover="1"><result status="valid" time="0.089572" steps="4962"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i16_i16_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i16_i16_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013964" steps="24"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i16_i16_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i16_i16_ge_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.022998" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i32_i32_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i32_i32_lt_body" proved="true">
 <proof prover="1"><result status="valid" time="0.049597" steps="4800"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i32_i32_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i32_i32_le_body" proved="true">
 <proof prover="2"><result status="valid" time="0.071243" steps="3525"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i32_i32_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i32_i32_gt_body" proved="true">
 <proof prover="1"><result status="valid" time="0.060016" steps="4966"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i32_i32_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i32_i32_ge_body" proved="true">
 <proof prover="1"><result status="valid" time="0.052311" steps="4802"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i64_i64_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i64_i64_lt_body" proved="true">
 <proof prover="2"><result status="valid" time="0.060629" steps="2013"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i64_i64_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i64_i64_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.009903" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i64_i64_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i64_i64_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.024830" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i64_i64_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i64_i64_ge_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.017190" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i128_i128_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i128_i128_lt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013955" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i128_i128_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i128_i128_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016128" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i128_i128_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i128_i128_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013247" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_i128_i128_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_i128_i128_ge_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013929" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_isize_isize_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_isize_isize_lt_body" proved="true">
 <proof prover="1"><result status="valid" time="0.056588" steps="4800"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_isize_isize_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_isize_isize_le_body" proved="true">
 <proof prover="2"><result status="valid" time="0.086646" steps="3525"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_isize_isize_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_isize_isize_gt_body" proved="true">
 <proof prover="2"><result status="valid" time="0.087799" steps="3529"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_isize_isize_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_isize_isize_ge_body" proved="true">
 <proof prover="1"><result status="valid" time="0.047758" steps="4802"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u8_u8_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u8_u8_lt_body" proved="true">
 <proof prover="2"><result status="valid" time="0.034454" steps="2013"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u8_u8_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u8_u8_le_body" proved="true">
 <proof prover="2"><result status="valid" time="0.068993" steps="3525"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u8_u8_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u8_u8_gt_body" proved="true">
 <proof prover="2"><result status="valid" time="0.080042" steps="3529"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u8_u8_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u8_u8_ge_body" proved="true">
 <proof prover="2"><result status="valid" time="0.060856" steps="2009"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u16_u16_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u16_u16_lt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.011924" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u16_u16_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u16_u16_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.012349" steps="24"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u16_u16_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u16_u16_gt_body" proved="true">
 <proof prover="1"><result status="valid" time="0.062868" steps="4955"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u16_u16_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u16_u16_ge_body" proved="true">
 <proof prover="2"><result status="valid" time="0.039350" steps="2009"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u32_u32_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u32_u32_lt_body" proved="true">
 <proof prover="2"><result status="valid" time="0.061607" steps="2013"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u32_u32_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u32_u32_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014880" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u32_u32_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u32_u32_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018509" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u32_u32_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u32_u32_ge_body" proved="true">
 <proof prover="2"><result status="valid" time="0.050680" steps="2009"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u64_u64_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u64_u64_lt_body" proved="true">
 <proof prover="1"><result status="valid" time="0.073258" steps="4789"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u64_u64_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u64_u64_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.021129" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u64_u64_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u64_u64_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018751" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u64_u64_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u64_u64_ge_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018643" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u128_u128_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u128_u128_lt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.023086" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u128_u128_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u128_u128_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018059" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u128_u128_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u128_u128_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015769" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_u128_u128_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_u128_u128_ge_body" proved="true">
 <proof prover="2"><result status="valid" time="0.054445" steps="2009"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_usize_usize_lt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_usize_usize_lt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.010071" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_usize_usize_le_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_usize_usize_le_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014453" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_usize_usize_gt_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_usize_usize_gt_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016263" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__extern_spec_PartialOrd_usize_usize_ge_body" proved="true">
 <goal name="vc_extern_spec_PartialOrd_usize_usize_ge_body" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015984" steps="27"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_Reverse_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.043329" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_Reverse_T" proved="true">
 <proof prover="0"><result status="valid" time="0.037916" steps="471"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_Reverse_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.039944" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_Reverse_T" proved="true">
 <proof prover="2"><result status="valid" time="0.026029" steps="461"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__refl" proved="true">
 <goal name="vc_refl_Reverse_T" proved="true">
 <proof prover="1"><result status="valid" time="0.020379" steps="888"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__trans" proved="true">
 <goal name="vc_trans_Reverse_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.079549" steps="246"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__antisym1" proved="true">
 <goal name="vc_antisym1_Reverse_T" proved="true">
 <proof prover="0"><result status="valid" time="0.049902" steps="3656"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__antisym2" proved="true">
 <goal name="vc_antisym2_Reverse_T" proved="true">
 <proof prover="1"><result status="valid" time="0.066462" steps="1124"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_Reverse_T" proved="true">
 <proof prover="1"><result status="valid" time="0.036777" steps="1036"/></proof>
 </goal>
</theory>
<theory name="M_std__deque__impl_IteratorSpec_for_Iter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Iter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_Iter_T.0" expl="produces_refl ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.009940" steps="37058"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__deque__impl_IteratorSpec_for_Iter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Iter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Iter_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.036566" steps="5241"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__hint__extern_spec_std_hint_black_box_body" proved="true">
 <goal name="vc_extern_spec_std_hint_black_box_body_T" proved="true">
 <proof prover="1"><result status="valid" time="0.045620" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_std__hint__extern_spec_std_hint_must_use_body" proved="true">
 <goal name="vc_extern_spec_std_hint_must_use_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.044070" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__intrinsics__extern_spec_core_intrinsics_assume_body" proved="true">
 <goal name="vc_extern_spec_core_intrinsics_assume_body" proved="true">
 <proof prover="2"><result status="valid" time="0.011092" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__cloned__impl_IteratorSpec_for_Cloned_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Cloned_I" proved="true">
 <proof prover="0"><result status="valid" time="0.014686" steps="15984"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__cloned__impl_IteratorSpec_for_Cloned_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Cloned_I" proved="true">
 <proof prover="1"><result status="valid" time="0.057990" steps="6381"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__copied__impl_IteratorSpec_for_Copied_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Copied_I" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.023289" steps="9"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__copied__impl_IteratorSpec_for_Copied_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Copied_I" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.043982" steps="108"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__empty__impl_IteratorSpec_for_Empty_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Empty_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020768" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__empty__impl_IteratorSpec_for_Empty_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Empty_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Empty_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.028627" steps="5516"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__enumerate__impl_Invariant_for_Enumerate_I__invariant" proved="true">
 <goal name="vc_invariant_Enumerate_I" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.011007" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__enumerate__impl_IteratorSpec_for_Enumerate_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Enumerate_I" proved="true">
 <proof prover="0"><result status="valid" time="0.012489" steps="27702"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__enumerate__impl_IteratorSpec_for_Enumerate_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Enumerate_I" proved="true">
 <proof prover="2"><result status="valid" time="0.293618" steps="46000"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter__impl_Invariant_for_Filter_I_F__invariant" proved="true">
 <goal name="vc_invariant_Filter_I_F" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.011160" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter__impl_IteratorSpec_for_Filter_I_F__produces_refl" proved="true">
 <goal name="vc_produces_refl_Filter_I_F" proved="true">
 <proof prover="0"><result status="valid" time="0.015057" steps="37776"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter__impl_IteratorSpec_for_Filter_I_F__produces_trans" proved="true">
 <goal name="vc_produces_trans_Filter_I_F" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="vc_produces_trans_Filter_I_F.0" expl="produces_trans ensures" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_Filter_I_F.0.0" expl="produces_trans ensures" proved="true">
   <proof prover="0"><result status="valid" time="0.009148" steps="26563"/></proof>
   </goal>
   <goal name="vc_produces_trans_Filter_I_F.0.1" expl="produces_trans ensures" proved="true">
   <transf name="destruct_rec" proved="true" arg1="H3">
    <goal name="vc_produces_trans_Filter_I_F.0.1.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.000001" steps="1983"/></proof>
    </goal>
    <goal name="vc_produces_trans_Filter_I_F.0.1.1" expl="produces_trans ensures" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H1">
     <goal name="vc_produces_trans_Filter_I_F.0.1.1.0" expl="destruct premise" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="0.011338" steps="31"/></proof>
     </goal>
     <goal name="vc_produces_trans_Filter_I_F.0.1.1.1" expl="produces_trans ensures" proved="true">
     <transf name="exists" proved="true" arg1="(s1++s)">
      <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0" proved="true">
      <transf name="exists" proved="true" arg1="(fun i -&gt; if i &lt; length ab then f1 i else (f (i - length ab) + length s1))">
       <goal name="vc_produces_trans_Filter_I_F.0.1.1.1.0.0" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.121168" steps="1160"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__filter_map__impl_IteratorSpec_for_FilterMap_I_F__produces_refl" proved="true">
 <goal name="vc_produces_refl_FilterMap_I_F" proved="true">
 <proof prover="0"><result status="valid" time="0.031295" steps="49541"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter_map__impl_IteratorSpec_for_FilterMap_I_F__produces_trans" proved="true">
 <goal name="vc_produces_trans_FilterMap_I_F" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="vc_produces_trans_FilterMap_I_F.0" expl="produces_trans ensures" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_FilterMap_I_F.0.0" expl="produces_trans ensures" proved="true">
   <proof prover="2"><result status="valid" time="0.033952" steps="4428"/></proof>
   </goal>
   <goal name="vc_produces_trans_FilterMap_I_F.0.1" expl="produces_trans ensures" proved="true">
   <transf name="destruct_rec" proved="true" arg1="H3">
    <goal name="vc_produces_trans_FilterMap_I_F.0.1.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.010611" steps="2633"/></proof>
    </goal>
    <goal name="vc_produces_trans_FilterMap_I_F.0.1.1" expl="produces_trans ensures" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H1">
     <goal name="vc_produces_trans_FilterMap_I_F.0.1.1.0" expl="destruct premise" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="0.042325" steps="45"/></proof>
     </goal>
     <goal name="vc_produces_trans_FilterMap_I_F.0.1.1.1" expl="produces_trans ensures" proved="true">
     <transf name="exists" proved="true" arg1="(s1++s)">
      <goal name="vc_produces_trans_FilterMap_I_F.0.1.1.1.0" proved="true">
      <transf name="exists" proved="true" arg1="(fun i -&gt; if i &lt; length ab then f1 i else (f (i - length ab) + length s1))">
       <goal name="vc_produces_trans_FilterMap_I_F.0.1.1.1.0.0" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.156923" steps="1143"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__fuse__impl_IteratorSpec_for_Fuse_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Fuse_I" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.026152" steps="28"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__fuse__impl_IteratorSpec_for_Fuse_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Fuse_I" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Fuse_I.0" expl="produces_trans ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.033348" steps="3456"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__fuse__impl_FusedIterator_for_Fuse_I__is_fused" proved="true">
 <goal name="vc_is_fused_Fuse_I" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.011259" steps="22"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map__impl_Invariant_for_Map_I_F__invariant" proved="true">
 <goal name="vc_invariant_Map_I_F" proved="true">
 <proof prover="2"><result status="valid" time="0.014304" steps="3027"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map__impl_IteratorSpec_for_Map_I_F__produces_refl" proved="true">
 <goal name="vc_produces_refl_Map_I_F" proved="true">
 <proof prover="0"><result status="valid" time="0.027333" steps="43940"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map__impl_IteratorSpec_for_Map_I_F__produces_trans" proved="true">
 <goal name="vc_produces_trans_Map_I_F" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Map_I_F.0" expl="produces_trans ensures" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_produces_trans_Map_I_F.0.0" expl="produces_trans ensures" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="vc_produces_trans_Map_I_F.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.049658" steps="7499"/></proof>
    </goal>
    <goal name="vc_produces_trans_Map_I_F.0.0.1" proved="true">
    <transf name="exists" proved="true" arg1="(fs1++fs)">
     <goal name="vc_produces_trans_Map_I_F.0.0.1.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="vc_produces_trans_Map_I_F.0.0.1.0.0" proved="true">
      <proof prover="0"><result status="valid" time="0.037110" steps="91679"/></proof>
      </goal>
      <goal name="vc_produces_trans_Map_I_F.0.0.1.0.1" proved="true">
      <transf name="exists" proved="true" arg1="(s1++s)">
       <goal name="vc_produces_trans_Map_I_F.0.0.1.0.1.0" proved="true">
       <proof prover="0"><result status="valid" time="0.301315" steps="440020"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_IteratorSpec_for_MapInv_I_F__produces_refl" proved="true">
 <goal name="vc_produces_refl_MapInv_I_F" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_MapInv_I_F.0" expl="produces_refl ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.027070" steps="81334"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_IteratorSpec_for_MapInv_I_F__produces_trans" proved="true">
 <goal name="vc_produces_trans_MapInv_I_F" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="vc_produces_trans_MapInv_I_F.0" expl="produces_trans ensures" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_trans_MapInv_I_F.0.0" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.030475" steps="6046"/></proof>
   </goal>
   <goal name="vc_produces_trans_MapInv_I_F.0.1" proved="true">
   <transf name="exists" proved="true" arg1="(fs1++fs)">
    <goal name="vc_produces_trans_MapInv_I_F.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="vc_produces_trans_MapInv_I_F.0.1.0.0" proved="true">
     <proof prover="2" timelimit="1"><result status="valid" time="0.065370" steps="7580"/></proof>
     </goal>
     <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1" proved="true">
     <transf name="exists" proved="true" arg1="(s1++s)">
      <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.0" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.039853" steps="7366"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.1" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.050773" steps="5865"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.2" proved="true">
       <proof prover="0" timelimit="1"><result status="valid" time="0.031747" steps="80659"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.3" proved="true">
       <proof prover="0" timelimit="1"><result status="valid" time="0.029772" steps="70142"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.4" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.085463" steps="9085"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.5" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.101476" steps="12006"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.6" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.182705" steps="19487"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.7" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.276337" steps="37620"/></proof>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.8" proved="true">
       <transf name="instantiate" proved="true" arg1="H10" arg2="i">
        <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.8.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
         <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.8.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.8.0.0.0" proved="true">
          <proof prover="3" timelimit="5"><result status="valid" time="0.526575" steps="3570"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.9" proved="true">
       <transf name="instantiate" proved="true" arg1="H10" arg2="i">
        <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.9.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
         <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.9.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="vc_produces_trans_MapInv_I_F.0.1.0.1.0.9.0.0.0" proved="true">
          <proof prover="3" timelimit="5"><result status="valid" time="0.563857" steps="3583"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_Iterator_for_MapInv_I_F__next" proved="true">
 <goal name="vc_next_MapInv_I_F" proved="true">
 <proof prover="1"><result status="valid" time="0.355505" steps="44302"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_MapInv_I_F__preservation_inv" proved="true">
 <goal name="vc_preservation_inv_I" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_preservation_inv_I.0" expl="preservation_inv ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.136227" steps="12873"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_MapInv_I_F__produces_one_invariant" proved="true">
 <goal name="vc_produces_one_invariant_I" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_one_invariant_I.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_one_invariant_I.0.0" proved="true">
   <proof prover="0"><result status="valid" time="0.038076" steps="123721"/></proof>
   </goal>
   <goal name="vc_produces_one_invariant_I.0.1" expl="produces_one_invariant ensures #0" proved="true">
   <proof prover="0"><result status="valid" time="0.040526" steps="113452"/></proof>
   </goal>
   <goal name="vc_produces_one_invariant_I.0.2" expl="produces_one_invariant ensures #1" proved="true">
   <proof prover="2"><result status="valid" time="0.186435" steps="21537"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_MapInv_I_F__produces_one" proved="true">
 <goal name="vc_produces_one_I" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_one_I.0" expl="produces_one ensures" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="vc_produces_one_I.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.612096" steps="75828"/></proof>
   </goal>
   <goal name="vc_produces_one_I.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.124156" steps="264296"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__once__impl_IteratorSpec_for_Once_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Once_T" proved="true">
 <proof prover="2"><result status="valid" time="0.044623" steps="1253"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__once__impl_IteratorSpec_for_Once_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Once_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Once_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.028850" steps="132"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_Range_Idx__produces_refl" proved="true">
 <goal name="vc_produces_refl_Range_Idx" proved="true">
 <proof prover="2"><result status="valid" time="0.043483" steps="1154"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_Range_Idx__produces_trans" proved="true">
 <goal name="vc_produces_trans_Range_Idx" proved="true">
 <proof prover="2"><result status="valid" time="0.087737" steps="6529"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_Range_Idx__produces_back_refl" proved="true">
 <goal name="vc_produces_back_refl_Range_Idx" proved="true">
 <proof prover="0"><result status="valid" time="0.012067" steps="3563"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_Range_Idx__produces_back_trans" proved="true">
 <goal name="vc_produces_back_trans_Range_Idx" proved="true">
 <proof prover="2"><result status="valid" time="0.062238" steps="3408"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__range_inclusive_len" proved="true">
 <goal name="vc_range_inclusive_len_Idx" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020449" steps="3"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_RangeInclusive_Idx__produces_refl" proved="true">
 <goal name="vc_produces_refl_RangeInclusive_Idx" proved="true">
 <proof prover="2"><result status="valid" time="0.043719" steps="698"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_RangeInclusive_Idx__produces_trans" proved="true">
 <goal name="vc_produces_trans_RangeInclusive_Idx" proved="true">
 <proof prover="2"><result status="valid" time="0.059988" steps="4112"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_RangeInclusive_Idx__produces_back_refl" proved="true">
 <goal name="vc_produces_back_refl_RangeInclusive_Idx" proved="true">
 <proof prover="2"><result status="valid" time="0.043626" steps="706"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_RangeInclusive_Idx__produces_back_trans" proved="true">
 <goal name="vc_produces_back_trans_RangeInclusive_Idx" proved="true">
 <proof prover="0"><result status="valid" time="0.018716" steps="20341"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__repeat__impl_IteratorSpec_for_Repeat_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Repeat_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.027403" steps="7"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__repeat__impl_IteratorSpec_for_Repeat_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Repeat_T" proved="true">
 <proof prover="2"><result status="valid" time="0.060342" steps="3288"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__rev__impl_IteratorSpec_for_Rev_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Rev_I" proved="true">
 <proof prover="2"><result status="valid" time="0.044964" steps="1558"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__rev__impl_IteratorSpec_for_Rev_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Rev_I" proved="true">
 <proof prover="0"><result status="valid" time="0.014170" steps="11406"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__skip__impl_IteratorSpec_for_Skip_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Skip_I" proved="true">
 <proof prover="2"><result status="valid" time="0.057293" steps="2948"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__skip__impl_IteratorSpec_for_Skip_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Skip_I" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Skip_I.0" expl="produces_trans ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.072770" steps="12133"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__iter__take__impl_IteratorSpec_for_Take_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_Take_I" proved="true">
 <proof prover="2"><result status="valid" time="0.054011" steps="2696"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__take__impl_IteratorSpec_for_Take_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_Take_I" proved="true">
 <proof prover="2"><result status="valid" time="0.057302" steps="3085"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__zip__impl_IteratorSpec_for_Zip_A_B__produces_refl" proved="true">
 <goal name="vc_produces_refl_Zip_A_B" proved="true">
 <proof prover="2"><result status="valid" time="0.067523" steps="3980"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__zip__impl_IteratorSpec_for_Zip_A_B__produces_trans" proved="true">
 <goal name="vc_produces_trans_Zip_A_B" proved="true">
 <proof prover="2"><result status="valid" time="1.102155" steps="113805"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__trait_IteratorSpec__map_inv" proved="true">
 <goal name="vc_map_inv_Self" proved="true">
 <proof prover="2"><result status="valid" time="0.054891" steps="3589"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__impl_IteratorSpec_for_ref_I__produces_refl" proved="true">
 <goal name="vc_produces_refl_ref_I" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.027588" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__impl_IteratorSpec_for_ref_I__produces_trans" proved="true">
 <goal name="vc_produces_trans_ref_I" proved="true">
 <proof prover="0"><result status="valid" time="0.011664" steps="15147"/></proof>
 </goal>
</theory>
<theory name="M_std__mem__extern_spec_std_mem_replace_body" proved="true">
 <goal name="vc_extern_spec_std_mem_replace_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.065727" steps="48"/></proof>
 </goal>
</theory>
<theory name="M_std__mem__extern_spec_std_mem_take_body" proved="true">
 <goal name="vc_extern_spec_std_mem_take_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.011208" steps="32"/></proof>
 </goal>
</theory>
<theory name="M_std__mem__extern_spec_std_mem_drop_body" proved="true">
 <goal name="vc_extern_spec_std_mem_drop_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.037553" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_std__mem__extern_spec_std_mem_forget_body" proved="true">
 <goal name="vc_extern_spec_std_mem_forget_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.054215" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__extern_spec_core_option_T_Try_Option_T_from_output_body" proved="true">
 <goal name="vc_extern_spec_core_option_T_Try_Option_T_from_output_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020036" steps="16"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__extern_spec_core_option_T_Try_Option_T_branch_body" proved="true">
 <goal name="vc_extern_spec_core_option_T_Try_Option_T_branch_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.018496" steps="1106"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__extern_spec_core_option_T_FromResidual_Option_Infallible_Option_T_from_residual_body" proved="true">
 <goal name="vc_extern_spec_core_option_T_FromResidual_Option_Infallible_Option_T_from_residual_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.015507" steps="302"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__extern_spec_core_result_T_E_Try_Result_T_E_from_output_body" proved="true">
 <goal name="vc_extern_spec_core_result_T_E_Try_Result_T_E_from_output_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.026927" steps="14"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__extern_spec_core_result_T_E_Try_Result_T_E_branch_body" proved="true">
 <goal name="vc_extern_spec_core_result_T_E_Try_Result_T_E_branch_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.043453" steps="131"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__extern_spec_core_result_T_E_F_FromResidual_Result_Infallible_E_Result_T_F_from_residual_body" proved="true">
 <goal name="vc_extern_spec_core_result_T_E_F_FromResidual_Result_Infallible_E_Result_T_F_from_residual_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.035951" steps="86"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_T_PartialEq_Option_T_eq_body" proved="true">
 <goal name="vc_extern_spec_T_PartialEq_Option_T_eq_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.030527" steps="139"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_T_Clone_Option_T_clone_body" proved="true">
 <goal name="vc_extern_spec_T_Clone_Option_T_clone_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.075574" steps="4787"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_is_some_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_is_some_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.054138" steps="12"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_is_some_and_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_is_some_and_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.110505" steps="89"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_is_none_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_is_none_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.012309" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_as_ref_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_as_ref_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.016562" steps="821"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_as_mut_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_as_mut_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.070465" steps="6785"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_as_slice_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_as_slice_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.008634" steps="14928"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_as_mut_slice_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_as_mut_slice_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.041792" steps="11157"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_expect_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_expect_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.070269" steps="33"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_unwrap_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_unwrap_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.020029" steps="591"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_unwrap_or_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_unwrap_or_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.057687" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_unwrap_or_else_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_unwrap_or_else_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.012972" steps="3104"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_unwrap_or_default_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_unwrap_or_default_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.069985" steps="42"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_unwrap_unchecked_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_unwrap_unchecked_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.056083" steps="1421"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_map_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_map_body_T" proved="true">
 <proof prover="3"><result status="valid" time="0.028582" steps="117"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_inspect_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_inspect_body_T" proved="true">
 <proof prover="1"><result status="valid" time="0.022797" steps="1209"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_map_or_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_map_or_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.072083" steps="1160"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_map_or_else_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_map_or_else_body_T" proved="true">
 <proof prover="2" timelimit="1"><result status="valid" time="0.057035" steps="1466"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_ok_or_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_ok_or_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.056978" steps="83"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_ok_or_else_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_ok_or_else_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.027638" steps="1508"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_and_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_and_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.012299" steps="3287"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_and_then_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_and_then_body_T" proved="true">
 <proof prover="3"><result status="valid" time="0.069476" steps="99"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_filter_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_filter_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.072732" steps="121"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_or_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_or_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.036938" steps="2658"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_or_else_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_or_else_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.025402" steps="3183"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_xor_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_xor_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.017720" steps="2555"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_insert_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_insert_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.080263" steps="148"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_get_or_insert_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_get_or_insert_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.024809" steps="9431"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_get_or_insert_with_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_get_or_insert_with_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.059950" steps="6589"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_take_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_take_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.047746" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_take_if_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_take_if_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.073237" steps="4884"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_replace_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_replace_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.047483" steps="1011"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_T_zip_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_T_zip_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.021536" steps="2554"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_U_Option_tuple2_T_U_unzip_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_U_Option__tuple2_T_U_unzip_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="4233"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_ref_T_copied_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option__ref_T_copied_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.033684" steps="943"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_ref_T_cloned_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option__ref_T_cloned_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.008053" steps="5215"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_refmut_T_copied_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option__refmut_T_copied_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.014696" steps="4975"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_refmut_T_cloned_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option__refmut_T_cloned_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.008794" steps="7984"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_E_Option_Result_T_E_transpose_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_E_Option_Result_T_E_transpose_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.045101" steps="6491"/></proof>
 </goal>
</theory>
<theory name="M_std__option__extern_spec_std_option_T_Option_Option_T_flatten_body" proved="true">
 <goal name="vc_extern_spec_std_option_T_Option_Option_T_flatten_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.049384" steps="38"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_le_log" proved="true">
 <goal name="vc_cmp_le_log_Option_T" proved="true">
 <proof prover="0"><result status="valid" time="0.037862" steps="519"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_lt_log" proved="true">
 <goal name="vc_cmp_lt_log_Option_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.062775" steps="7"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_ge_log" proved="true">
 <goal name="vc_cmp_ge_log_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.045658" steps="537"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_gt_log" proved="true">
 <goal name="vc_cmp_gt_log_Option_T" proved="true">
 <proof prover="1"><result status="valid" time="0.012391" steps="709"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__refl" proved="true">
 <goal name="vc_refl_Option_T" proved="true">
 <proof prover="0"><result status="valid" time="0.049844" steps="2913"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__trans" proved="true">
 <goal name="vc_trans_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.030742" steps="1157"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__antisym1" proved="true">
 <goal name="vc_antisym1_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.036303" steps="947"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__antisym2" proved="true">
 <goal name="vc_antisym2_Option_T" proved="true">
 <proof prover="1"><result status="valid" time="0.068619" steps="1238"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__eq_cmp" proved="true">
 <goal name="vc_eq_cmp_Option_T" proved="true">
 <proof prover="2"><result status="valid" time="0.051551" steps="928"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IntoIter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_IntoIter_T" proved="true">
 <proof prover="2"><result status="valid" time="0.041585" steps="1253"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IntoIter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_IntoIter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_IntoIter_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.047269" steps="3996"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_Iter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Iter_T" proved="true">
 <proof prover="2"><result status="valid" time="0.037552" steps="1253"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_Iter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Iter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Iter_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.037859" steps="3996"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IterMut_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_IterMut_T" proved="true">
 <proof prover="0"><result status="valid" time="0.011674" steps="10950"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IterMut_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_IterMut_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_IterMut_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.072640" steps="209585"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__option__impl_OptionExt_for_Option_T__unwrap_logic" proved="true">
 <goal name="vc_unwrap_Option_T" proved="true">
 <proof prover="1"><result status="valid" time="0.012447" steps="280"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__extern_spec_T_ptrconst_T_is_aligned_body" proved="true">
 <goal name="vc_extern_spec_T__ptrconst_T_is_aligned_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.033081" steps="3058"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__extern_spec_T_ptrconst_T_is_aligned_to_body" proved="true">
 <goal name="vc_extern_spec_T__ptrconst_T_is_aligned_to_body_T" proved="true">
 <proof prover="0"><result status="valid" time="0.015311" steps="23728"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__extern_spec_T_ptrmut_T_is_aligned_body" proved="true">
 <goal name="vc_extern_spec_T__ptrmut_T_is_aligned_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.030838" steps="3120"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__extern_spec_T_ptrmut_T_is_aligned_to_body" proved="true">
 <goal name="vc_extern_spec_T__ptrmut_T_is_aligned_to_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.038060" steps="5838"/></proof>
 </goal>
</theory>
<theory name="M_std__range__extern_spec_T_From_Range_T_legacy_Range_T_from_body" proved="true">
 <goal name="vc_extern_spec_T_From_Range_T_legacy_Range_T_from_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.010942" steps="272"/></proof>
 </goal>
</theory>
<theory name="M_std__range__extern_spec_T_From_legacy_Range_T_Range_T_from_body" proved="true">
 <goal name="vc_extern_spec_T_From_legacy_Range_T_Range_T_from_body_T" proved="true">
 <proof prover="2"><result status="valid" time="0.011366" steps="272"/></proof>
 </goal>
</theory>
<theory name="M_std__range__extern_spec_T_From_RangeFrom_T_legacy_RangeFrom_T_from_body" proved="true">
 <goal name="vc_extern_spec_T_From_RangeFrom_T_legacy_RangeFrom_T_from_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014918" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_std__range__extern_spec_T_From_legacy_RangeFrom_T_RangeFrom_T_from_body" proved="true">
 <goal name="vc_extern_spec_T_From_legacy_RangeFrom_T_RangeFrom_T_from_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.010824" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_std__range__extern_spec_T_From_RangeInclusive_T_legacy_RangeInclusive_T_from_body" proved="true">
 <goal name="vc_extern_spec_T_From_RangeInclusive_T_legacy_RangeInclusive_T_from_body_T" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.012771" steps="11"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_SliceExt_for_slice_T__as_ptr_own" proved="true">
 <goal name="vc_as_ptr_own_slice_T" proved="true">
 <proof prover="0"><result status="valid" time="0.003757" steps="24457"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_SliceExt_for_slice_T__as_mut_ptr_own" proved="true">
 <goal name="vc_as_mut_ptr_own_slice_T" proved="true">
 <proof prover="0"><result status="valid" time="0.012200" steps="27484"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_Iter_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_Iter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_Iter_T.0" expl="produces_refl ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.022266" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_Iter_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_Iter_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_Iter_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.048370" steps="5241"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_IterMut_T__produces_refl" proved="true">
 <goal name="vc_produces_refl_IterMut_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_IterMut_T.0" expl="produces_refl ensures" proved="true">
  <proof prover="0"><result status="valid" time="0.014720" steps="56357"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_IterMut_T__produces_trans" proved="true">
 <goal name="vc_produces_trans_IterMut_T" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_IterMut_T.0" expl="produces_trans ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.041574" steps="7225"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__vec__impl_IteratorSpec_for_IntoIter_T_A__produces_refl" proved="true">
 <goal name="vc_produces_refl_IntoIter_T_A" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_refl_IntoIter_T_A.0" expl="produces_refl ensures" proved="true">
  <proof prover="1"><result status="valid" time="0.028933" steps="5572"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_std__vec__impl_IteratorSpec_for_IntoIter_T_A__produces_trans" proved="true">
 <goal name="vc_produces_trans_IntoIter_T_A" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="vc_produces_trans_IntoIter_T_A.0" expl="produces_trans ensures" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.030421" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_cell__permcell__impl_Resolve_for_PermCellOwn_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.009343" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_invariant__impl_Resolve_for_Subset_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.009471" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Resolve_for_FMap_K_V__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.008005" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Resolve_for_FMapIter_K_V__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.009672" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__impl_Resolve_for_FSet_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.010000" steps="4012"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Resolve_for_Seq_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.012501" steps="1279"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Resolve_for_SeqIter_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.005087" steps="467"/></proof>
 </goal>
</theory>
<theory name="M_resolve__impl_Resolve_for_ref_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.012120" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_resolve__impl_Resolve_for_ref_T_0__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.011690" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_std__array__impl_Resolve_for_array_T_n__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014058" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__boxed__impl_Resolve_for_Box_T_A__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.002038" steps="263"/></proof>
 </goal>
</theory>
<theory name="M_std__deque__impl_Resolve_for_VecDeque_T_A__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.010612" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__cloned__impl_Resolve_for_Cloned_I__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014808" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__copied__impl_Resolve_for_Copied_I__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.024827" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__enumerate__impl_Resolve_for_Enumerate_I__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010978" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map__impl_Resolve_for_Map_I_F__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010981" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__skip__impl_Resolve_for_Skip_I__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009872" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__take__impl_Resolve_for_Take_I__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009869" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_Resolve_for_slice_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.028848" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_Resolve_for_IterMut_T__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.014507" steps="1549"/></proof>
 </goal>
</theory>
<theory name="M_std__vec__impl_Resolve_for_Vec_T_A__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.027862" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__vec__impl_Resolve_for_IntoIter_T_A__resolve_coherence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013103" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_ghost__fn_ghost__impl_Clone_for_FnGhostWrapper_F__clone__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.015365" steps="336"/></proof>
 </goal>
</theory>
<theory name="M_ghost__resource__fmap_view__impl_Clone_for_Fragment_K_V__clone__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.039501" steps="8734"/></proof>
 </goal>
</theory>
<theory name="M_ghost__impl_Clone_for_Ghost_T__clone__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.022432" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Clone_for_FMap_K_V__clone__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012050" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__fset__impl_Clone_for_FSet_T__clone__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.035001" steps="15"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Clone_for_Seq_T__clone__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010871" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_ghost__fn_ghost__impl_FnOnce_for_FnGhostWrapper_F__call_once__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.010405" steps="29"/></proof>
 </goal>
</theory>
<theory name="M_ghost__fn_ghost__impl_FnMut_for_FnGhostWrapper_F__call_mut__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.009986" steps="73"/></proof>
 </goal>
</theory>
<theory name="M_ghost__fn_ghost__impl_Fn_for_FnGhostWrapper_F__call__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.014544" steps="32"/></proof>
 </goal>
</theory>
<theory name="M_invariant__impl_PartialEq_for_Subset_T__eq__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015998" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__id__impl_PartialEq_for_Id__ne__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017681" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__id__impl_PartialEq_for_Id__eq__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015190" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__int__impl_PartialEq_for_Int__eq__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020165" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialEq_for_PeanoInt__eq__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.062574" steps="1090"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Iterator_for_FMapIter_K_V__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.029594" steps="138"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_Iterator_for_FMapIterRef_K_V__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.010196" steps="11"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Iterator_for_SeqIter_T__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.025026" steps="1595"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_Iterator_for_SeqIterRef_T__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.017181" steps="2327"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_Iterator_for_MapInv_I_F__next__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.165532" steps="16007"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIter_K_V__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.015861" steps="82"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIter_K_V__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.013992" steps="201"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIterRef_K_V__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.019031" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__fmap__impl_IteratorSpec_for_FMapIterRef_K_V__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.018431" steps="319"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.027902" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.024368" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIterRef_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.022236" steps="163"/></proof>
 </goal>
</theory>
<theory name="M_logic__seq__impl_IteratorSpec_for_SeqIterRef_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.026396" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_std__array__impl_IteratorSpec_for_IntoIter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018446" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__array__impl_IteratorSpec_for_IntoIter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020519" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IntoIter_K_V__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.006659" steps="83"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IntoIter_K_V__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003109" steps="83"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_Iter_K_V__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018288" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_Iter_K_V__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.018414" steps="82"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IterMut_K_V__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.025132" steps="82"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_map__impl_IteratorSpec_for_IterMut_K_V__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.026733" steps="82"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_IntoIter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.016973" steps="2493"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_IntoIter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.005956" steps="1890"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Iter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.020201" steps="2493"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Iter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.021528" steps="2493"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Intersection_T_S__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.020787" steps="2493"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Intersection_T_S__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.030038" steps="5436"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Difference_T_S__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.038177" steps="5436"/></proof>
 </goal>
</theory>
<theory name="M_std__collections__hash_set__impl_IteratorSpec_for_Difference_T_S__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.020473" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__deque__impl_IteratorSpec_for_Iter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.026876" steps="2438"/></proof>
 </goal>
</theory>
<theory name="M_std__deque__impl_IteratorSpec_for_Iter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.023510" steps="1343"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__cloned__impl_IteratorSpec_for_Cloned_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.001987" steps="1181"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__cloned__impl_IteratorSpec_for_Cloned_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.019413" steps="3059"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__copied__impl_IteratorSpec_for_Copied_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.019038" steps="1236"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__copied__impl_IteratorSpec_for_Copied_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.017802" steps="2605"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__empty__impl_IteratorSpec_for_Empty_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.028805" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__empty__impl_IteratorSpec_for_Empty_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.023375" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__enumerate__impl_IteratorSpec_for_Enumerate_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.025800" steps="3843"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__enumerate__impl_IteratorSpec_for_Enumerate_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.002698" steps="1514"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter__impl_IteratorSpec_for_Filter_I_F__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.024813" steps="2873"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter__impl_IteratorSpec_for_Filter_I_F__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.018065" steps="2873"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter_map__impl_IteratorSpec_for_FilterMap_I_F__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003733" steps="1129"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__filter_map__impl_IteratorSpec_for_FilterMap_I_F__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.006033" steps="1129"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__fuse__impl_IteratorSpec_for_Fuse_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.031718" steps="2605"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__fuse__impl_IteratorSpec_for_Fuse_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.005851" steps="1049"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map__impl_IteratorSpec_for_Map_I_F__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.021367" steps="2874"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map__impl_IteratorSpec_for_Map_I_F__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003830" steps="1129"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_IteratorSpec_for_MapInv_I_F__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.051835" steps="1390"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__map_inv__impl_IteratorSpec_for_MapInv_I_F__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.046995" steps="1390"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__once__impl_IteratorSpec_for_Once_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.002968" steps="70"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__once__impl_IteratorSpec_for_Once_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023419" steps="163"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_Range_Idx__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.026213" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_Range_Idx__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014675" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_RangeInclusive_Idx__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.004975" steps="185"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_IteratorSpec_for_RangeInclusive_Idx__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.024935" steps="176"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__repeat__impl_IteratorSpec_for_Repeat_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018379" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__repeat__impl_IteratorSpec_for_Repeat_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.018563" steps="281"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__rev__impl_IteratorSpec_for_Rev_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.005222" steps="1049"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__rev__impl_IteratorSpec_for_Rev_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.024179" steps="1236"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__skip__impl_IteratorSpec_for_Skip_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013964" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__skip__impl_IteratorSpec_for_Skip_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.026878" steps="1987"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__take__impl_IteratorSpec_for_Take_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.038189" steps="3843"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__take__impl_IteratorSpec_for_Take_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.016646" steps="1987"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__zip__impl_IteratorSpec_for_Zip_A_B__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015000" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__zip__impl_IteratorSpec_for_Zip_A_B__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.016473" steps="1755"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__impl_IteratorSpec_for_ref_I__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.024018" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__impl_IteratorSpec_for_ref_I__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016316" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IntoIter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.017899" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IntoIter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.020175" steps="163"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_Iter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.027718" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_Iter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003379" steps="70"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IterMut_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.017346" steps="163"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_IteratorSpec_for_IterMut_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003089" steps="70"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_Iter_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.018380" steps="1343"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_Iter_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014739" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_IterMut_T__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.018707" steps="2056"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_IteratorSpec_for_IterMut_T__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015003" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__vec__impl_IteratorSpec_for_IntoIter_T_A__produces_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023900" steps="163"/></proof>
 </goal>
</theory>
<theory name="M_std__vec__impl_IteratorSpec_for_IntoIter_T_A__produces_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.021600" steps="68"/></proof>
 </goal>
</theory>
<theory name="M_logic__int__impl_PartialOrd_for_Int__gt__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014573" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__int__impl_PartialOrd_for_Int__ge__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015544" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__int__impl_PartialOrd_for_Int__le__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013086" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__int__impl_PartialOrd_for_Int__partial_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021393" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__int__impl_PartialOrd_for_Int__lt__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014908" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__partial_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.072303" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__le__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.012773" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__lt__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.018524" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__gt__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.014369" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_PartialOrd_for_PeanoInt__ge__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.007898" steps="1568"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019357" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011953" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015232" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018250" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012307" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010957" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013261" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010066" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_ref_T__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016665" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020740" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010222" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009138" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011141" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019025" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020157" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012148" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021277" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_Int__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017902" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015915" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021070" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018654" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012326" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021919" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019311" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017090" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009683" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u8__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020340" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018808" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020142" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010196" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019648" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011727" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017988" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009358" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013586" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u16__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010623" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010818" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019043" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011827" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009024" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019085" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020937" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010059" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012266" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u32__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018248" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010175" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009836" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.022637" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.008160" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010347" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011130" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017487" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018969" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u64__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.023027" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011300" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018593" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009624" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012878" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009987" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015890" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017952" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009261" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_u128__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019985" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009133" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.008787" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018304" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020658" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020054" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013313" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010905" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.008910" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_usize__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012775" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009939" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.007019" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010376" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012582" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011225" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013080" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011985" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010338" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i8__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016803" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012491" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016785" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018009" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016389" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017707" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017675" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018246" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015383" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i16__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013316" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021133" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011384" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019829" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018746" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019983" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009351" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012051" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013083" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i32__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017139" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011338" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012708" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015049" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010089" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010035" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010198" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020861" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011894" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i64__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010528" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011712" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016998" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019714" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.022608" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012642" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011454" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018767" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017789" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_i128__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011111" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014031" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011292" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009955" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014975" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.006230" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016823" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011178" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011447" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_isize__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010186" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012738" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009830" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010016" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016666" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017890" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013850" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013161" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009151" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_char__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010980" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020716" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011943" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014851" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011128" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009045" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020077" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.010198" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012047" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_bool__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015131" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016013" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021162" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014721" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.008984" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011033" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016653" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011236" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014048" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ord__impl_OrdLogic_for_tup2_A_B__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017087" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014564" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023045" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.021411" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.017569" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.000001" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.019805" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.018683" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.013551" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__real__impl_OrdLogic_for_Real__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.007142" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.045025" steps="3029"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.038849" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.060150" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.077182" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.046241" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.053153" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.063092" steps="3029"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.039776" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_OrdLogic_for_PeanoInt__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.054410" steps="3029"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019723" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018264" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018707" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.021016" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018311" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011321" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018985" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014758" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__cmp__impl_OrdLogic_for_Reverse_T__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.025545" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__eq_cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012705" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_lt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018194" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__antisym1__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014702" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_ge_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018825" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_gt_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018952" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.013649" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017741" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__cmp_le_log__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011214" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__option__impl_OrdLogic_for_Option_T__antisym2__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012210" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009045" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014849" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.039691" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.012048" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__agree__impl_RA_for_Ag_T__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.011185" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019075" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017789" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.044357" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015829" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_RA_for_Excl_T__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.019755" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.024769" steps="1867"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.017606" steps="1602"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.017919" steps="4772"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.028108" steps="3154"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_RA_for_FMap_K_V__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.023024" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.017464" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.017884" steps="497"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.046013" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.019736" steps="497"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_RA_for_Option_T__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023080" steps="686"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.014874" steps="656"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.017317" steps="656"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.016596" steps="1552"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.025885" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_RA_for_tup2_T_U__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.019299" steps="985"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.019008" steps="656"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.005751" steps="2294"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.020913" steps="985"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.013431" steps="1352"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_RA_for_Sum_R1_R2__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.009914" steps="985"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__commutative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.012435" steps="1405"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__core_is_maximal_idemp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.052722" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__factor__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.011334" steps="1405"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__core__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015859" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_RA_for_View_R__associative__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.055174" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_ViewRel_for_AuthViewRel_T__rel_mono__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.022292" steps="686"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_ViewRel_for_AuthViewRel_T__rel_unit__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.040907" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_ViewRel_for_AuthViewRel_T__rel_none__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.013567" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_Update_for_AuthUpdate_U__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.043488" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__auth__impl_Update_for_AuthUpdate_U__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.022124" steps="3530"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_Update_for_ExclUpdate_T__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.009159" steps="4"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__excl__impl_Update_for_ExclUpdate_T__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.014587" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_Update_for_OptionUpdate_U__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.026408" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_Update_for_OptionUpdate_U__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.020107" steps="1235"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_Update_for_ProdUpdate_U1_U2__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015880" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_Update_for_ProdUpdate_U1_U2__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.058383" steps="7"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateL_U__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015244" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateL_U__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.025427" steps="2998"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateR_U__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.015043" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_Update_for_SumUpdateR_U__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.019371" steps="2001"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_R__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.009298" steps="686"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_R__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.009771" steps="497"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_Mapping_Choice_R__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.025764" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_Update_for_Snapshot_Mapping_Choice_R__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.044031" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdate_R_Choice__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.012713" steps="571"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdate_R_Choice__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.029315" steps="3440"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateInsert_R__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.015536" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateInsert_R__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.017594" steps="2367"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateRemove_R__update__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.017919" steps="753"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_Update_for_ViewUpdateRemove_R__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.016435" steps="3670"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_UnitRA_for_FMap_K_V__core_is_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.031187" steps="7"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_UnitRA_for_FMap_K_V__unit__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023844" steps="4843"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_UnitRA_for_FMap_K_V__core_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.024314" steps="2564"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_UnitRA_for_Option_T__core_is_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023946" steps="3212"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_UnitRA_for_Option_T__core_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.024957" steps="1989"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__option__impl_UnitRA_for_Option_T__unit__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.025742" steps="1989"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_UnitRA_for_tup2_T_U__unit__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.020559" steps="1635"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_UnitRA_for_tup2_T_U__core_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.016448" steps="1220"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_UnitRA_for_tup2_T_U__core_is_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.011216" steps="2365"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_UnitRA_for_View_R__core_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.019357" steps="2162"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_UnitRA_for_View_R__unit__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.033066" steps="10"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_UnitRA_for_View_R__core_is_total__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.011629" steps="2629"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__fmap__impl_LocalUpdate_for_FMapInsertLocalUpdate_K_V__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.017596" steps="4398"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__prod__impl_LocalUpdate_for_ProdLocalUpdate_U1_U2__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.015798" steps="3887"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_LocalUpdate_for_SumLocalUpdateL_U__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.018833" steps="3730"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__sum__impl_LocalUpdate_for_SumLocalUpdateR_U__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.028140" steps="5289"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__update__impl_LocalUpdate_for_Snapshot_tup2_R_R__frame_preserving__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.028617" steps="5"/></proof>
 </goal>
</theory>
<theory name="M_logic__ra__view__impl_InhabitedInvariant_for_InnerView_R__inhabits__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.025795" steps="8"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_Int__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016958" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u8__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.008308" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u16__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.017464" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u32__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.025038" steps="3029"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u64__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.027161" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_u128__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.013876" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_usize__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.015357" steps="1670"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i8__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.009273" steps="3040"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i16__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.023344" steps="3040"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i32__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.010890" steps="1676"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i64__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.013470" steps="3040"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_i128__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.012790" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_isize__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.016793" steps="3040"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_ref_T__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016637" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_Box_T_Global__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.024210" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_unit__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.022544" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup8_T0_T1_T2_T3_T4_T5_T6_T7__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.014075" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup7_T0_T1_T2_T3_T4_T5_T6__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.025070" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup6_T0_T1_T2_T3_T4_T5__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.019125" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup5_T0_T1_T2_T3_T4__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.017797" steps="6"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup4_T0_T1_T2_T3__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.022798" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup3_T0_T1_T2__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.007824" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup2_T0_T1__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.019344" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_logic__well_founded__impl_WellFounded_for_tup1_T0__no_infinite_decreasing_sequence__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.022837" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_peano__impl_Ord_for_PeanoInt__cmp__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.090658" steps="2400"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__fuse__impl_FusedIterator_for_Fuse_I__is_fused__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.035636" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_Range_Idx__produces_back_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.001825" steps="70"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_Range_Idx__produces_back_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.016220" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_RangeInclusive_Idx__produces_back_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.007610" steps="185"/></proof>
 </goal>
</theory>
<theory name="M_std__iter__range__impl_DoubleEndedIteratorSpec_for_RangeInclusive_Idx__produces_back_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.002933" steps="185"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnMutExt_for_F__hist_inv_trans__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018792" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnMutExt_for_F__fn_mut_once__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.020003" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnMutExt_for_F__postcondition_mut_hist_inv__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.016700" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnMutExt_for_F__hist_inv_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.018705" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnExt_for_F__fn_mut__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.025319" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnExt_for_F__fn_once__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017767" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ops__impl_FnExt_for_F__fn_hist_inv__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3"><result status="valid" time="0.017964" steps="0"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__impl_SizedPointerExt_for_ptr_T__sub_offset_logic__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.016485" steps="2178"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__impl_SizedPointerExt_for_ptr_T__offset_logic_zero__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.015128" steps="2178"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__impl_SizedPointerExt_for_ptr_T__offset_logic__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003149" steps="1469"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__impl_SizedPointerExt_for_ptr_T__offset_logic_assoc__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="3" timelimit="5"><result status="valid" time="0.017947" steps="2"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__impl_SizedPointerExt_for_ptr_T__sub_logic_refl__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.009741" steps="20"/></proof>
 </goal>
</theory>
<theory name="M_std__ptr__impl_SlicePointerExt_for_ptr_slice_T__slice_ptr_ext__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="0"><result status="valid" time="0.003733" steps="523"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_SliceExt_for_slice_T__as_mut_ptr_own__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="1"><result status="valid" time="0.011180" steps="7085"/></proof>
 </goal>
</theory>
<theory name="M_std__slice__impl_SliceExt_for_slice_T__as_ptr_own__refines" proved="true">
 <goal name="refines" proved="true">
 <proof prover="2"><result status="valid" time="0.011672" steps="2817"/></proof>
 </goal>
</theory>
</file>
</why3session>
