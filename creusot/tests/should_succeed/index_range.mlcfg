
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IndexRange_CreateArr
  use prelude.Int32
  use seq.Seq
  predicate invariant3 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq int32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq int32)
  val inv3 (_x : Seq.seq int32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq int32 . inv3 x = true
  predicate invariant2 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : int32)
  val inv2 (_x : int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : int32 . inv2 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  predicate invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv1 x = true
  use prelude.UIntSize
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv3 (shallow_model0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv3 (shallow_model0 self)
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use prelude.Int32
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic0 self ix }
    
  use seq.Seq
  function shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model1 self }
    
  val push0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (value : int32) : ()
    requires {inv1 self}
    requires {inv2 value}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 78 26 78 51] shallow_model0 ( ^ self)
    = Seq.snoc (shallow_model1 self) value }
    
  val new0 (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (shallow_model0 result) = 0 }
    ensures { inv0 result }
    
  let rec cfg create_arr [#"../index_range.rs" 14 0 14 27] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../index_range.rs" 7 4 12 22] Seq.length (shallow_model0 result) = 5
    /\ Int32.to_int (index_logic0 result 0) = 0
    /\ Int32.to_int (index_logic0 result 1) = 1
    /\ Int32.to_int (index_logic0 result 2) = 2
    /\ Int32.to_int (index_logic0 result 3) = 3 /\ Int32.to_int (index_logic0 result 4) = 4 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var arr : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var _3 : ();
  var _4 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _5 : ();
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _7 : ();
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _9 : ();
  var _10 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _11 : ();
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../index_range.rs" 15 18 15 28] arr <- ([#"../index_range.rs" 15 18 15 28] new0 ([#"../index_range.rs" 15 18 15 28] ()));
    goto BB1
  }
  BB1 {
    [#"../index_range.rs" 17 4 17 7] _4 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 17 4 17 7] arr <-  ^ _4;
    [#"../index_range.rs" 17 4 17 15] _3 <- ([#"../index_range.rs" 17 4 17 15] push0 _4 ([#"../index_range.rs" 17 13 17 14] (0 : int32)));
    _4 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB2
  }
  BB2 {
    [#"../index_range.rs" 18 4 18 7] _6 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 18 4 18 7] arr <-  ^ _6;
    [#"../index_range.rs" 18 4 18 15] _5 <- ([#"../index_range.rs" 18 4 18 15] push0 _6 ([#"../index_range.rs" 18 13 18 14] (1 : int32)));
    _6 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB3
  }
  BB3 {
    [#"../index_range.rs" 19 4 19 7] _8 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 19 4 19 7] arr <-  ^ _8;
    [#"../index_range.rs" 19 4 19 15] _7 <- ([#"../index_range.rs" 19 4 19 15] push0 _8 ([#"../index_range.rs" 19 13 19 14] (2 : int32)));
    _8 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB4
  }
  BB4 {
    [#"../index_range.rs" 20 4 20 7] _10 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 20 4 20 7] arr <-  ^ _10;
    [#"../index_range.rs" 20 4 20 15] _9 <- ([#"../index_range.rs" 20 4 20 15] push0 _10 ([#"../index_range.rs" 20 13 20 14] (3 : int32)));
    _10 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB5
  }
  BB5 {
    [#"../index_range.rs" 21 4 21 7] _12 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 21 4 21 7] arr <-  ^ _12;
    [#"../index_range.rs" 21 4 21 15] _11 <- ([#"../index_range.rs" 21 4 21 15] push0 _12 ([#"../index_range.rs" 21 13 21 14] (4 : int32)));
    _12 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    goto BB6
  }
  BB6 {
    [#"../index_range.rs" 23 4 23 7] _0 <- arr;
    arr <- any Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module IndexRange_TestRange
  use prelude.Int32
  use prelude.Slice
  predicate invariant11 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : slice int32) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : slice int32)
  val inv11 (_x : slice int32) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : slice int32 . inv11 x = true
  use seq.Seq
  predicate invariant10 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq int32) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq int32)
  val inv10 (_x : Seq.seq int32) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq int32 . inv10 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model0 self)
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv9 x = true
  predicate invariant8 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : int32) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : int32)
  val inv8 (_x : int32) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : int32 . inv8 x = true
  predicate invariant7 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : usize)
  val inv7 (_x : usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : usize . inv7 x = true
  use prelude.Borrow
  predicate invariant6 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (slice int32)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (slice int32))
  val inv6 (_x : borrowed (slice int32)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (slice int32) . inv6 x = true
  predicate invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv4 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv4 x = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv3 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv3 x = true
  predicate invariant2 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : slice int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice int32)
  val inv2 (_x : slice int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice int32 . inv2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv1 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use seq.Seq
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    ensures { result = shallow_model1 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : usize) : int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv7 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model1 self) result }
    ensures { inv8 result }
    
  val len1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model1 self) }
    
  predicate resolve1 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (slice int32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve_elswhere0 (self : Core_Ops_Range_Range_Type.t_range usize) (old' : Seq.seq int32) (fin : Seq.seq int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 149 8 152 9] forall i : int . 0 <= i
    /\ (i < UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self)
    \/ UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self) <= i)
    /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 (self : Core_Ops_Range_Range_Type.t_range usize) (old' : Seq.seq int32) (fin : Seq.seq int32) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  use prelude.Slice
  function shallow_model4 (self : slice int32) : Seq.seq int32
  val shallow_model4 (self : slice int32) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice int32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv10 (shallow_model4 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model4 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max0)
  use seq_ext.SeqExt
  predicate has_value0 (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq int32) (out : slice int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 143 20 143 67] SeqExt.subsequence seq (UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self)) (UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self))
    = shallow_model4 out
  val has_value0 (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq int32) (out : slice int32) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 137 20 137 70] UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self)
    <= UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self)
    /\ UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self) <= Seq.length seq
  val in_bounds0 (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model3 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index : Core_Ops_Range_Range_Type.t_range usize) : borrowed (slice int32)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model3 self)}
    requires {inv5 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model3 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model0 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model3 self) (shallow_model0 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model0 ( ^ self))
    = Seq.length (shallow_model3 self) }
    ensures { inv6 result }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 36 26 36 51] result
    = (self = Core_Option_Option_Type.C_None) }
    
  function shallow_model2 (self : slice int32) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model4 self
  val shallow_model2 (self : slice int32) : Seq.seq int32
    ensures { result = shallow_model2 self }
    
  val get0 (self : slice int32) (index : Core_Ops_Range_Range_Type.t_range usize) : Core_Option_Option_Type.t_option (slice int32)
    requires {inv2 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 252 8 252 102] in_bounds0 index (shallow_model2 self)
     -> (exists r : slice int32 . inv2 r
    /\ result = Core_Option_Option_Type.C_Some r /\ has_value0 index (shallow_model2 self) r) }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 253 18 253 55] in_bounds0 index (shallow_model2 self)
    \/ result = Core_Option_Option_Type.C_None }
    ensures { inv3 result }
    
  val deref0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : slice int32
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 42] shallow_model2 result
    = shallow_model1 self }
    ensures { inv2 result }
    
  predicate resolve2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : int32) : bool
    ensures { result = resolve2 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val len0 (self : slice int32) : usize
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model2 self)
    = UIntSize.to_int result }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : Core_Ops_Range_Range_Type.t_range usize) : slice int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv2 result }
    
  use prelude.Int32
  val create_arr0 [#"../index_range.rs" 14 0 14 27] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../index_range.rs" 7 4 12 22] Seq.length (shallow_model0 result) = 5
    /\ Int32.to_int (index_logic0 result 0) = 0
    /\ Int32.to_int (index_logic0 result 1) = 1
    /\ Int32.to_int (index_logic0 result 2) = 2
    /\ Int32.to_int (index_logic0 result 3) = 3 /\ Int32.to_int (index_logic0 result 4) = 4 }
    
  let rec cfg test_range [#"../index_range.rs" 27 0 27 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var arr : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var s : slice int32;
  var _3 : slice int32;
  var _5 : Core_Ops_Range_Range_Type.t_range usize;
  var _7 : bool;
  var _8 : usize;
  var _10 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : bool;
  var s1 : slice int32;
  var _22 : slice int32;
  var _24 : Core_Ops_Range_Range_Type.t_range usize;
  var _26 : bool;
  var _27 : usize;
  var _29 : bool;
  var _31 : usize;
  var _32 : usize;
  var _33 : bool;
  var _34 : bool;
  var _36 : usize;
  var _37 : usize;
  var _38 : bool;
  var _41 : bool;
  var _42 : usize;
  var _44 : slice int32;
  var _46 : Core_Ops_Range_Range_Type.t_range usize;
  var _49 : bool;
  var _50 : usize;
  var _52 : slice int32;
  var _54 : Core_Ops_Range_Range_Type.t_range usize;
  var _57 : bool;
  var _59 : Core_Option_Option_Type.t_option (slice int32);
  var _61 : slice int32;
  var _63 : Core_Ops_Range_Range_Type.t_range usize;
  var _66 : bool;
  var _68 : Core_Option_Option_Type.t_option (slice int32);
  var _70 : slice int32;
  var _72 : Core_Ops_Range_Range_Type.t_range usize;
  var _75 : bool;
  var _77 : Core_Option_Option_Type.t_option (slice int32);
  var _79 : slice int32;
  var _81 : Core_Ops_Range_Range_Type.t_range usize;
  var _84 : bool;
  var _86 : Core_Option_Option_Type.t_option (slice int32);
  var _88 : slice int32;
  var _90 : Core_Ops_Range_Range_Type.t_range usize;
  var s2 : borrowed (slice int32);
  var _93 : borrowed (slice int32);
  var _94 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _95 : Core_Ops_Range_Range_Type.t_range usize;
  var _97 : bool;
  var _98 : usize;
  var _101 : usize;
  var _102 : usize;
  var _103 : bool;
  var _104 : usize;
  var _105 : usize;
  var _106 : bool;
  var _108 : bool;
  var _110 : usize;
  var _111 : usize;
  var _112 : bool;
  var _115 : bool;
  var _116 : usize;
  var _120 : bool;
  var _122 : int32;
  var _126 : bool;
  var _128 : int32;
  var _132 : bool;
  var _134 : int32;
  var _138 : bool;
  var _140 : int32;
  var _144 : bool;
  var _146 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../index_range.rs" 29 18 29 30] arr <- ([#"../index_range.rs" 29 18 29 30] create_arr0 ([#"../index_range.rs" 29 18 29 30] ()));
    goto BB1
  }
  BB1 {
    [#"../index_range.rs" 34 17 34 21] _5 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 34 17 34 18] (0 : usize)) ([#"../index_range.rs" 34 20 34 21] (2 : usize));
    [#"../index_range.rs" 34 16 34 22] _3 <- ([#"../index_range.rs" 34 16 34 22] index0 arr _5);
    _5 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB2
  }
  BB2 {
    [#"../index_range.rs" 34 12 34 22] s <- _3;
    [#"../index_range.rs" 35 12 35 19] _8 <- ([#"../index_range.rs" 35 12 35 19] len0 s);
    goto BB3
  }
  BB3 {
    [#"../index_range.rs" 35 12 35 24] _7 <- _8 = ([#"../index_range.rs" 35 23 35 24] (2 : usize));
    _8 <- any usize;
    switch (_7)
      | False -> goto BB11
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../index_range.rs" 35 30 35 31] _12 <- ([#"../index_range.rs" 35 30 35 31] (0 : usize));
    [#"../index_range.rs" 35 28 35 32] _13 <- Slice.length s;
    [#"../index_range.rs" 35 28 35 32] _14 <- _12 < _13;
    assert { [@expl:index in bounds] [#"../index_range.rs" 35 28 35 32] _14 };
    goto BB5
  }
  BB5 {
    [#"../index_range.rs" 35 28 35 37] _10 <- Slice.get s _12 = ([#"../index_range.rs" 35 36 35 37] (0 : int32));
    switch (_10)
      | False -> goto BB10
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../index_range.rs" 35 43 35 44] _17 <- ([#"../index_range.rs" 35 43 35 44] (1 : usize));
    [#"../index_range.rs" 35 41 35 45] _18 <- Slice.length s;
    [#"../index_range.rs" 35 41 35 45] _19 <- _17 < _18;
    assert { [@expl:index in bounds] [#"../index_range.rs" 35 41 35 45] _19 };
    goto BB7
  }
  BB7 {
    [#"../index_range.rs" 35 41 35 50] _15 <- Slice.get s _17 = ([#"../index_range.rs" 35 49 35 50] (1 : int32));
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../index_range.rs" 37 17 37 21] _24 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 37 17 37 18] (3 : usize)) ([#"../index_range.rs" 37 20 37 21] (5 : usize));
    [#"../index_range.rs" 37 16 37 22] _22 <- ([#"../index_range.rs" 37 16 37 22] index0 arr _24);
    _24 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB13
  }
  BB9 {
    assume { resolve0 arr };
    goto BB12
  }
  BB10 {
    assume { resolve0 arr };
    goto BB12
  }
  BB11 {
    assume { resolve0 arr };
    goto BB12
  }
  BB12 {
    assert { [#"../index_range.rs" 35 4 35 51] false };
    absurd
  }
  BB13 {
    [#"../index_range.rs" 37 12 37 22] s1 <- _22;
    [#"../index_range.rs" 38 12 38 19] _27 <- ([#"../index_range.rs" 38 12 38 19] len0 s1);
    goto BB14
  }
  BB14 {
    [#"../index_range.rs" 38 12 38 24] _26 <- _27 = ([#"../index_range.rs" 38 23 38 24] (2 : usize));
    _27 <- any usize;
    switch (_26)
      | False -> goto BB22
      | True -> goto BB15
      end
  }
  BB15 {
    [#"../index_range.rs" 38 30 38 31] _31 <- ([#"../index_range.rs" 38 30 38 31] (0 : usize));
    [#"../index_range.rs" 38 28 38 32] _32 <- Slice.length s1;
    [#"../index_range.rs" 38 28 38 32] _33 <- _31 < _32;
    assert { [@expl:index in bounds] [#"../index_range.rs" 38 28 38 32] _33 };
    goto BB16
  }
  BB16 {
    [#"../index_range.rs" 38 28 38 37] _29 <- Slice.get s1 _31 = ([#"../index_range.rs" 38 36 38 37] (3 : int32));
    switch (_29)
      | False -> goto BB21
      | True -> goto BB17
      end
  }
  BB17 {
    [#"../index_range.rs" 38 43 38 44] _36 <- ([#"../index_range.rs" 38 43 38 44] (1 : usize));
    [#"../index_range.rs" 38 41 38 45] _37 <- Slice.length s1;
    [#"../index_range.rs" 38 41 38 45] _38 <- _36 < _37;
    assert { [@expl:index in bounds] [#"../index_range.rs" 38 41 38 45] _38 };
    goto BB18
  }
  BB18 {
    [#"../index_range.rs" 38 41 38 50] _34 <- Slice.get s1 _36 = ([#"../index_range.rs" 38 49 38 50] (4 : int32));
    switch (_34)
      | False -> goto BB20
      | True -> goto BB19
      end
  }
  BB19 {
    [#"../index_range.rs" 43 16 43 20] _46 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 43 16 43 17] (2 : usize)) ([#"../index_range.rs" 43 19 43 20] (2 : usize));
    [#"../index_range.rs" 43 15 43 21] _44 <- ([#"../index_range.rs" 43 15 43 21] index0 arr _46);
    _46 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB24
  }
  BB20 {
    assume { resolve0 arr };
    goto BB23
  }
  BB21 {
    assume { resolve0 arr };
    goto BB23
  }
  BB22 {
    assume { resolve0 arr };
    goto BB23
  }
  BB23 {
    assert { [#"../index_range.rs" 38 4 38 51] false };
    absurd
  }
  BB24 {
    [#"../index_range.rs" 43 12 43 27] _42 <- ([#"../index_range.rs" 43 12 43 27] len0 _44);
    goto BB25
  }
  BB25 {
    [#"../index_range.rs" 43 12 43 32] _41 <- _42 = ([#"../index_range.rs" 43 31 43 32] (0 : usize));
    _42 <- any usize;
    switch (_41)
      | False -> goto BB27
      | True -> goto BB26
      end
  }
  BB26 {
    [#"../index_range.rs" 45 16 45 20] _54 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 45 16 45 17] (5 : usize)) ([#"../index_range.rs" 45 19 45 20] (5 : usize));
    [#"../index_range.rs" 45 15 45 21] _52 <- ([#"../index_range.rs" 45 15 45 21] index0 arr _54);
    _54 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB28
  }
  BB27 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 43 4 43 33] false };
    absurd
  }
  BB28 {
    [#"../index_range.rs" 45 12 45 27] _50 <- ([#"../index_range.rs" 45 12 45 27] len0 _52);
    goto BB29
  }
  BB29 {
    [#"../index_range.rs" 45 12 45 32] _49 <- _50 = ([#"../index_range.rs" 45 31 45 32] (0 : usize));
    _50 <- any usize;
    switch (_49)
      | False -> goto BB31
      | True -> goto BB30
      end
  }
  BB30 {
    [#"../index_range.rs" 50 12 50 25] _61 <- ([#"../index_range.rs" 50 12 50 25] deref0 arr);
    goto BB32
  }
  BB31 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 45 4 45 33] false };
    absurd
  }
  BB32 {
    [#"../index_range.rs" 50 20 50 24] _63 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 50 20 50 21] (2 : usize)) ([#"../index_range.rs" 50 23 50 24] (6 : usize));
    [#"../index_range.rs" 50 12 50 25] _59 <- ([#"../index_range.rs" 50 12 50 25] get0 _61 _63);
    _63 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB33
  }
  BB33 {
    [#"../index_range.rs" 50 12 50 35] _57 <- ([#"../index_range.rs" 50 12 50 35] is_none0 _59);
    goto BB34
  }
  BB34 {
    switch (_57)
      | False -> goto BB36
      | True -> goto BB35
      end
  }
  BB35 {
    [#"../index_range.rs" 52 12 52 25] _70 <- ([#"../index_range.rs" 52 12 52 25] deref0 arr);
    goto BB37
  }
  BB36 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 50 4 50 36] false };
    absurd
  }
  BB37 {
    [#"../index_range.rs" 52 20 52 24] _72 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 52 20 52 21] (2 : usize)) ([#"../index_range.rs" 52 23 52 24] (1 : usize));
    [#"../index_range.rs" 52 12 52 25] _68 <- ([#"../index_range.rs" 52 12 52 25] get0 _70 _72);
    _72 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB38
  }
  BB38 {
    [#"../index_range.rs" 52 12 52 35] _66 <- ([#"../index_range.rs" 52 12 52 35] is_none0 _68);
    goto BB39
  }
  BB39 {
    switch (_66)
      | False -> goto BB41
      | True -> goto BB40
      end
  }
  BB40 {
    [#"../index_range.rs" 54 12 54 25] _79 <- ([#"../index_range.rs" 54 12 54 25] deref0 arr);
    goto BB42
  }
  BB41 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 52 4 52 36] false };
    absurd
  }
  BB42 {
    [#"../index_range.rs" 54 20 54 24] _81 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 54 20 54 21] (6 : usize)) ([#"../index_range.rs" 54 23 54 24] (6 : usize));
    [#"../index_range.rs" 54 12 54 25] _77 <- ([#"../index_range.rs" 54 12 54 25] get0 _79 _81);
    _81 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB43
  }
  BB43 {
    [#"../index_range.rs" 54 12 54 35] _75 <- ([#"../index_range.rs" 54 12 54 35] is_none0 _77);
    goto BB44
  }
  BB44 {
    switch (_75)
      | False -> goto BB46
      | True -> goto BB45
      end
  }
  BB45 {
    [#"../index_range.rs" 56 12 56 27] _88 <- ([#"../index_range.rs" 56 12 56 27] deref0 arr);
    goto BB47
  }
  BB46 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 54 4 54 36] false };
    absurd
  }
  BB47 {
    [#"../index_range.rs" 56 20 56 26] _90 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 56 20 56 22] (10 : usize)) ([#"../index_range.rs" 56 24 56 26] (10 : usize));
    [#"../index_range.rs" 56 12 56 27] _86 <- ([#"../index_range.rs" 56 12 56 27] get0 _88 _90);
    _90 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB48
  }
  BB48 {
    [#"../index_range.rs" 56 12 56 37] _84 <- ([#"../index_range.rs" 56 12 56 37] is_none0 _86);
    goto BB49
  }
  BB49 {
    switch (_84)
      | False -> goto BB51
      | True -> goto BB50
      end
  }
  BB50 {
    [#"../index_range.rs" 59 17 59 20] _94 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 59 17 59 20] arr <-  ^ _94;
    [#"../index_range.rs" 59 21 59 25] _95 <- Core_Ops_Range_Range_Type.C_Range ([#"../index_range.rs" 59 21 59 22] (1 : usize)) ([#"../index_range.rs" 59 24 59 25] (4 : usize));
    [#"../index_range.rs" 59 20 59 26] _93 <- ([#"../index_range.rs" 59 20 59 26] index_mut0 _94 _95);
    _94 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    _95 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB52
  }
  BB51 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 56 4 56 38] false };
    absurd
  }
  BB52 {
    [#"../index_range.rs" 59 12 59 26] s2 <- Borrow.borrow_final ( * _93) (Borrow.get_id _93);
    [#"../index_range.rs" 59 12 59 26] _93 <- { _93 with current = ( ^ s2) ; };
    [#"../index_range.rs" 60 12 60 19] _98 <- ([#"../index_range.rs" 60 12 60 19] len0 ( * s2));
    goto BB53
  }
  BB53 {
    [#"../index_range.rs" 60 12 60 24] _97 <- _98 = ([#"../index_range.rs" 60 23 60 24] (3 : usize));
    _98 <- any usize;
    switch (_97)
      | False -> goto BB55
      | True -> goto BB54
      end
  }
  BB54 {
    [#"../index_range.rs" 61 6 61 7] _101 <- ([#"../index_range.rs" 61 6 61 7] (0 : usize));
    [#"../index_range.rs" 61 4 61 8] _102 <- Slice.length ( * s2);
    [#"../index_range.rs" 61 4 61 8] _103 <- _101 < _102;
    assert { [@expl:index in bounds] [#"../index_range.rs" 61 4 61 8] _103 };
    goto BB56
  }
  BB55 {
    assume { resolve1 s2 };
    assume { resolve1 _93 };
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 60 4 60 25] false };
    absurd
  }
  BB56 {
    [#"../index_range.rs" 61 4 61 13] s2 <- { s2 with current = Slice.set ( * s2) _101 ([#"../index_range.rs" 61 11 61 13] (-1 : int32)) ; };
    [#"../index_range.rs" 62 6 62 7] _104 <- ([#"../index_range.rs" 62 6 62 7] (1 : usize));
    [#"../index_range.rs" 62 4 62 8] _105 <- Slice.length ( * s2);
    [#"../index_range.rs" 62 4 62 8] _106 <- _104 < _105;
    assert { [@expl:index in bounds] [#"../index_range.rs" 62 4 62 8] _106 };
    goto BB57
  }
  BB57 {
    [#"../index_range.rs" 62 4 62 13] s2 <- { s2 with current = Slice.set ( * s2) _104 ([#"../index_range.rs" 62 11 62 13] (-1 : int32)) ; };
    [#"../index_range.rs" 67 14 67 15] _110 <- ([#"../index_range.rs" 67 14 67 15] (2 : usize));
    [#"../index_range.rs" 67 12 67 16] _111 <- Slice.length ( * s2);
    [#"../index_range.rs" 67 12 67 16] _112 <- _110 < _111;
    assert { [@expl:index in bounds] [#"../index_range.rs" 67 12 67 16] _112 };
    goto BB58
  }
  BB58 {
    assume { resolve1 s2 };
    [#"../index_range.rs" 67 12 67 21] _108 <- Slice.get ( * s2) _110
    = ([#"../index_range.rs" 67 20 67 21] (3 : int32));
    assume { resolve1 _93 };
    switch (_108)
      | False -> goto BB60
      | True -> goto BB59
      end
  }
  BB59 {
    [#"../index_range.rs" 69 12 69 21] _116 <- ([#"../index_range.rs" 69 12 69 21] len1 arr);
    goto BB61
  }
  BB60 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 67 4 67 22] false };
    absurd
  }
  BB61 {
    [#"../index_range.rs" 69 12 69 26] _115 <- _116 = ([#"../index_range.rs" 69 25 69 26] (5 : usize));
    _116 <- any usize;
    switch (_115)
      | False -> goto BB63
      | True -> goto BB62
      end
  }
  BB62 {
    [#"../index_range.rs" 70 15 70 18] _122 <- ([#"../index_range.rs" 70 15 70 18] index1 arr ([#"../index_range.rs" 70 16 70 17] (0 : usize)));
    goto BB64
  }
  BB63 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 69 4 69 27] false };
    absurd
  }
  BB64 {
    [#"../index_range.rs" 70 12 70 23] _120 <- _122 = ([#"../index_range.rs" 70 22 70 23] (0 : int32));
    switch (_120)
      | False -> goto BB66
      | True -> goto BB65
      end
  }
  BB65 {
    [#"../index_range.rs" 71 15 71 18] _128 <- ([#"../index_range.rs" 71 15 71 18] index1 arr ([#"../index_range.rs" 71 16 71 17] (1 : usize)));
    goto BB67
  }
  BB66 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 70 4 70 24] false };
    absurd
  }
  BB67 {
    [#"../index_range.rs" 71 12 71 24] _126 <- _128 = ([#"../index_range.rs" 71 22 71 24] (-1 : int32));
    switch (_126)
      | False -> goto BB69
      | True -> goto BB68
      end
  }
  BB68 {
    [#"../index_range.rs" 72 15 72 18] _134 <- ([#"../index_range.rs" 72 15 72 18] index1 arr ([#"../index_range.rs" 72 16 72 17] (2 : usize)));
    goto BB70
  }
  BB69 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 71 4 71 25] false };
    absurd
  }
  BB70 {
    [#"../index_range.rs" 72 12 72 24] _132 <- _134 = ([#"../index_range.rs" 72 22 72 24] (-1 : int32));
    switch (_132)
      | False -> goto BB72
      | True -> goto BB71
      end
  }
  BB71 {
    [#"../index_range.rs" 73 15 73 18] _140 <- ([#"../index_range.rs" 73 15 73 18] index1 arr ([#"../index_range.rs" 73 16 73 17] (3 : usize)));
    goto BB73
  }
  BB72 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 72 4 72 25] false };
    absurd
  }
  BB73 {
    [#"../index_range.rs" 73 12 73 23] _138 <- _140 = ([#"../index_range.rs" 73 22 73 23] (3 : int32));
    switch (_138)
      | False -> goto BB75
      | True -> goto BB74
      end
  }
  BB74 {
    [#"../index_range.rs" 74 15 74 18] _146 <- ([#"../index_range.rs" 74 15 74 18] index1 arr ([#"../index_range.rs" 74 16 74 17] (4 : usize)));
    goto BB76
  }
  BB75 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 73 4 73 24] false };
    absurd
  }
  BB76 {
    assume { resolve0 arr };
    [#"../index_range.rs" 74 12 74 23] _144 <- _146 = ([#"../index_range.rs" 74 22 74 23] (4 : int32));
    switch (_144)
      | False -> goto BB78
      | True -> goto BB77
      end
  }
  BB77 {
    [#"../index_range.rs" 27 20 75 1] _0 <- ([#"../index_range.rs" 27 20 75 1] ());
    goto BB79
  }
  BB78 {
    assert { [#"../index_range.rs" 74 4 74 24] false };
    absurd
  }
  BB79 {
    return _0
  }
  
end
module Core_Ops_Range_RangeTo_Type
  type t_rangeto 'idx =
    | C_RangeTo 'idx
    
  let function rangeto_end (self : t_rangeto 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_RangeTo a -> a
      end
end
module IndexRange_TestRangeTo
  use prelude.Int32
  use prelude.Slice
  predicate invariant11 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : slice int32) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : slice int32)
  val inv11 (_x : slice int32) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : slice int32 . inv11 x = true
  use seq.Seq
  predicate invariant10 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq int32) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq int32)
  val inv10 (_x : Seq.seq int32) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq int32 . inv10 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model0 self)
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv9 x = true
  predicate invariant8 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : int32) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : int32)
  val inv8 (_x : int32) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : int32 . inv8 x = true
  predicate invariant7 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : usize)
  val inv7 (_x : usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : usize . inv7 x = true
  use prelude.Borrow
  predicate invariant6 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (slice int32)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (slice int32))
  val inv6 (_x : borrowed (slice int32)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (slice int32) . inv6 x = true
  predicate invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv4 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv4 x = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv3 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv3 x = true
  predicate invariant2 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : slice int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice int32)
  val inv2 (_x : slice int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice int32 . inv2 x = true
  use Core_Ops_Range_RangeTo_Type as Core_Ops_Range_RangeTo_Type
  predicate invariant1 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Ops_Range_RangeTo_Type.t_rangeto usize)
  val inv1 (_x : Core_Ops_Range_RangeTo_Type.t_rangeto usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Ops_Range_RangeTo_Type.t_rangeto usize . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use seq.Seq
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    ensures { result = shallow_model1 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : usize) : int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv7 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model1 self) result }
    ensures { inv8 result }
    
  val len1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model1 self) }
    
  predicate resolve1 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (slice int32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve_elswhere0 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) (old' : Seq.seq int32) (fin : Seq.seq int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 172 8 172 90] forall i : int . UIntSize.to_int (Core_Ops_Range_RangeTo_Type.rangeto_end self)
    <= i
    /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) (old' : Seq.seq int32) (fin : Seq.seq int32) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  use prelude.Slice
  function shallow_model4 (self : slice int32) : Seq.seq int32
  val shallow_model4 (self : slice int32) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice int32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv10 (shallow_model4 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model4 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max0)
  use seq_ext.SeqExt
  predicate has_value0 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) (seq : Seq.seq int32) (out : slice int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 166 20 166 57] SeqExt.subsequence seq 0 (UIntSize.to_int (Core_Ops_Range_RangeTo_Type.rangeto_end self))
    = shallow_model4 out
  val has_value0 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) (seq : Seq.seq int32) (out : slice int32) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 160 20 160 42] UIntSize.to_int (Core_Ops_Range_RangeTo_Type.rangeto_end self)
    <= Seq.length seq
  val in_bounds0 (self : Core_Ops_Range_RangeTo_Type.t_rangeto usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model3 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index : Core_Ops_Range_RangeTo_Type.t_rangeto usize) : borrowed (slice int32)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model3 self)}
    requires {inv5 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model3 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model0 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model3 self) (shallow_model0 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model0 ( ^ self))
    = Seq.length (shallow_model3 self) }
    ensures { inv6 result }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 36 26 36 51] result
    = (self = Core_Option_Option_Type.C_None) }
    
  function shallow_model2 (self : slice int32) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model4 self
  val shallow_model2 (self : slice int32) : Seq.seq int32
    ensures { result = shallow_model2 self }
    
  val get0 (self : slice int32) (index : Core_Ops_Range_RangeTo_Type.t_rangeto usize) : Core_Option_Option_Type.t_option (slice int32)
    requires {inv2 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 252 8 252 102] in_bounds0 index (shallow_model2 self)
     -> (exists r : slice int32 . inv2 r
    /\ result = Core_Option_Option_Type.C_Some r /\ has_value0 index (shallow_model2 self) r) }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 253 18 253 55] in_bounds0 index (shallow_model2 self)
    \/ result = Core_Option_Option_Type.C_None }
    ensures { inv3 result }
    
  val deref0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : slice int32
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 42] shallow_model2 result
    = shallow_model1 self }
    ensures { inv2 result }
    
  predicate resolve2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : int32) : bool
    ensures { result = resolve2 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val len0 (self : slice int32) : usize
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model2 self)
    = UIntSize.to_int result }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : Core_Ops_Range_RangeTo_Type.t_rangeto usize) : slice int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv2 result }
    
  use prelude.Int32
  val create_arr0 [#"../index_range.rs" 14 0 14 27] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../index_range.rs" 7 4 12 22] Seq.length (shallow_model0 result) = 5
    /\ Int32.to_int (index_logic0 result 0) = 0
    /\ Int32.to_int (index_logic0 result 1) = 1
    /\ Int32.to_int (index_logic0 result 2) = 2
    /\ Int32.to_int (index_logic0 result 3) = 3 /\ Int32.to_int (index_logic0 result 4) = 4 }
    
  let rec cfg test_range_to [#"../index_range.rs" 78 0 78 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var arr : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var s : slice int32;
  var _3 : slice int32;
  var _5 : Core_Ops_Range_RangeTo_Type.t_rangeto usize;
  var _7 : bool;
  var _8 : usize;
  var _10 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : bool;
  var _22 : bool;
  var _23 : usize;
  var _25 : slice int32;
  var _27 : Core_Ops_Range_RangeTo_Type.t_rangeto usize;
  var _30 : bool;
  var _32 : Core_Option_Option_Type.t_option (slice int32);
  var _34 : slice int32;
  var _36 : Core_Ops_Range_RangeTo_Type.t_rangeto usize;
  var s1 : borrowed (slice int32);
  var _39 : borrowed (slice int32);
  var _40 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _41 : Core_Ops_Range_RangeTo_Type.t_rangeto usize;
  var _43 : bool;
  var _44 : usize;
  var _47 : usize;
  var _48 : usize;
  var _49 : bool;
  var _50 : usize;
  var _51 : usize;
  var _52 : bool;
  var _54 : bool;
  var _56 : usize;
  var _57 : usize;
  var _58 : bool;
  var _61 : bool;
  var _62 : usize;
  var _66 : bool;
  var _68 : int32;
  var _72 : bool;
  var _74 : int32;
  var _78 : bool;
  var _80 : int32;
  var _84 : bool;
  var _86 : int32;
  var _90 : bool;
  var _92 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../index_range.rs" 80 18 80 30] arr <- ([#"../index_range.rs" 80 18 80 30] create_arr0 ([#"../index_range.rs" 80 18 80 30] ()));
    goto BB1
  }
  BB1 {
    [#"../index_range.rs" 85 17 85 20] _5 <- Core_Ops_Range_RangeTo_Type.C_RangeTo ([#"../index_range.rs" 85 19 85 20] (2 : usize));
    [#"../index_range.rs" 85 16 85 21] _3 <- ([#"../index_range.rs" 85 16 85 21] index0 arr _5);
    _5 <- any Core_Ops_Range_RangeTo_Type.t_rangeto usize;
    goto BB2
  }
  BB2 {
    [#"../index_range.rs" 85 12 85 21] s <- _3;
    [#"../index_range.rs" 86 12 86 19] _8 <- ([#"../index_range.rs" 86 12 86 19] len0 s);
    goto BB3
  }
  BB3 {
    [#"../index_range.rs" 86 12 86 24] _7 <- _8 = ([#"../index_range.rs" 86 23 86 24] (2 : usize));
    _8 <- any usize;
    switch (_7)
      | False -> goto BB11
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../index_range.rs" 86 30 86 31] _12 <- ([#"../index_range.rs" 86 30 86 31] (0 : usize));
    [#"../index_range.rs" 86 28 86 32] _13 <- Slice.length s;
    [#"../index_range.rs" 86 28 86 32] _14 <- _12 < _13;
    assert { [@expl:index in bounds] [#"../index_range.rs" 86 28 86 32] _14 };
    goto BB5
  }
  BB5 {
    [#"../index_range.rs" 86 28 86 37] _10 <- Slice.get s _12 = ([#"../index_range.rs" 86 36 86 37] (0 : int32));
    switch (_10)
      | False -> goto BB10
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../index_range.rs" 86 43 86 44] _17 <- ([#"../index_range.rs" 86 43 86 44] (1 : usize));
    [#"../index_range.rs" 86 41 86 45] _18 <- Slice.length s;
    [#"../index_range.rs" 86 41 86 45] _19 <- _17 < _18;
    assert { [@expl:index in bounds] [#"../index_range.rs" 86 41 86 45] _19 };
    goto BB7
  }
  BB7 {
    [#"../index_range.rs" 86 41 86 50] _15 <- Slice.get s _17 = ([#"../index_range.rs" 86 49 86 50] (1 : int32));
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../index_range.rs" 91 16 91 19] _27 <- Core_Ops_Range_RangeTo_Type.C_RangeTo ([#"../index_range.rs" 91 18 91 19] (0 : usize));
    [#"../index_range.rs" 91 15 91 20] _25 <- ([#"../index_range.rs" 91 15 91 20] index0 arr _27);
    _27 <- any Core_Ops_Range_RangeTo_Type.t_rangeto usize;
    goto BB13
  }
  BB9 {
    assume { resolve0 arr };
    goto BB12
  }
  BB10 {
    assume { resolve0 arr };
    goto BB12
  }
  BB11 {
    assume { resolve0 arr };
    goto BB12
  }
  BB12 {
    assert { [#"../index_range.rs" 86 4 86 51] false };
    absurd
  }
  BB13 {
    [#"../index_range.rs" 91 12 91 26] _23 <- ([#"../index_range.rs" 91 12 91 26] len0 _25);
    goto BB14
  }
  BB14 {
    [#"../index_range.rs" 91 12 91 31] _22 <- _23 = ([#"../index_range.rs" 91 30 91 31] (0 : usize));
    _23 <- any usize;
    switch (_22)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    [#"../index_range.rs" 96 12 96 24] _34 <- ([#"../index_range.rs" 96 12 96 24] deref0 arr);
    goto BB17
  }
  BB16 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 91 4 91 32] false };
    absurd
  }
  BB17 {
    [#"../index_range.rs" 96 20 96 23] _36 <- Core_Ops_Range_RangeTo_Type.C_RangeTo ([#"../index_range.rs" 96 22 96 23] (6 : usize));
    [#"../index_range.rs" 96 12 96 24] _32 <- ([#"../index_range.rs" 96 12 96 24] get0 _34 _36);
    _36 <- any Core_Ops_Range_RangeTo_Type.t_rangeto usize;
    goto BB18
  }
  BB18 {
    [#"../index_range.rs" 96 12 96 34] _30 <- ([#"../index_range.rs" 96 12 96 34] is_none0 _32);
    goto BB19
  }
  BB19 {
    switch (_30)
      | False -> goto BB21
      | True -> goto BB20
      end
  }
  BB20 {
    [#"../index_range.rs" 99 17 99 20] _40 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 99 17 99 20] arr <-  ^ _40;
    [#"../index_range.rs" 99 21 99 24] _41 <- Core_Ops_Range_RangeTo_Type.C_RangeTo ([#"../index_range.rs" 99 23 99 24] (3 : usize));
    [#"../index_range.rs" 99 20 99 25] _39 <- ([#"../index_range.rs" 99 20 99 25] index_mut0 _40 _41);
    _40 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    _41 <- any Core_Ops_Range_RangeTo_Type.t_rangeto usize;
    goto BB22
  }
  BB21 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 96 4 96 35] false };
    absurd
  }
  BB22 {
    [#"../index_range.rs" 99 12 99 25] s1 <- Borrow.borrow_final ( * _39) (Borrow.get_id _39);
    [#"../index_range.rs" 99 12 99 25] _39 <- { _39 with current = ( ^ s1) ; };
    [#"../index_range.rs" 100 12 100 19] _44 <- ([#"../index_range.rs" 100 12 100 19] len0 ( * s1));
    goto BB23
  }
  BB23 {
    [#"../index_range.rs" 100 12 100 24] _43 <- _44 = ([#"../index_range.rs" 100 23 100 24] (3 : usize));
    _44 <- any usize;
    switch (_43)
      | False -> goto BB25
      | True -> goto BB24
      end
  }
  BB24 {
    [#"../index_range.rs" 101 6 101 7] _47 <- ([#"../index_range.rs" 101 6 101 7] (0 : usize));
    [#"../index_range.rs" 101 4 101 8] _48 <- Slice.length ( * s1);
    [#"../index_range.rs" 101 4 101 8] _49 <- _47 < _48;
    assert { [@expl:index in bounds] [#"../index_range.rs" 101 4 101 8] _49 };
    goto BB26
  }
  BB25 {
    assume { resolve1 s1 };
    assume { resolve1 _39 };
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 100 4 100 25] false };
    absurd
  }
  BB26 {
    [#"../index_range.rs" 101 4 101 13] s1 <- { s1 with current = Slice.set ( * s1) _47 ([#"../index_range.rs" 101 11 101 13] (-1 : int32)) ; };
    [#"../index_range.rs" 102 6 102 7] _50 <- ([#"../index_range.rs" 102 6 102 7] (2 : usize));
    [#"../index_range.rs" 102 4 102 8] _51 <- Slice.length ( * s1);
    [#"../index_range.rs" 102 4 102 8] _52 <- _50 < _51;
    assert { [@expl:index in bounds] [#"../index_range.rs" 102 4 102 8] _52 };
    goto BB27
  }
  BB27 {
    [#"../index_range.rs" 102 4 102 13] s1 <- { s1 with current = Slice.set ( * s1) _50 ([#"../index_range.rs" 102 11 102 13] (-1 : int32)) ; };
    [#"../index_range.rs" 104 14 104 15] _56 <- ([#"../index_range.rs" 104 14 104 15] (1 : usize));
    [#"../index_range.rs" 104 12 104 16] _57 <- Slice.length ( * s1);
    [#"../index_range.rs" 104 12 104 16] _58 <- _56 < _57;
    assert { [@expl:index in bounds] [#"../index_range.rs" 104 12 104 16] _58 };
    goto BB28
  }
  BB28 {
    assume { resolve1 s1 };
    [#"../index_range.rs" 104 12 104 21] _54 <- Slice.get ( * s1) _56
    = ([#"../index_range.rs" 104 20 104 21] (1 : int32));
    assume { resolve1 _39 };
    switch (_54)
      | False -> goto BB30
      | True -> goto BB29
      end
  }
  BB29 {
    [#"../index_range.rs" 106 12 106 21] _62 <- ([#"../index_range.rs" 106 12 106 21] len1 arr);
    goto BB31
  }
  BB30 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 104 4 104 22] false };
    absurd
  }
  BB31 {
    [#"../index_range.rs" 106 12 106 26] _61 <- _62 = ([#"../index_range.rs" 106 25 106 26] (5 : usize));
    _62 <- any usize;
    switch (_61)
      | False -> goto BB33
      | True -> goto BB32
      end
  }
  BB32 {
    [#"../index_range.rs" 107 15 107 18] _68 <- ([#"../index_range.rs" 107 15 107 18] index1 arr ([#"../index_range.rs" 107 16 107 17] (0 : usize)));
    goto BB34
  }
  BB33 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 106 4 106 27] false };
    absurd
  }
  BB34 {
    [#"../index_range.rs" 107 12 107 24] _66 <- _68 = ([#"../index_range.rs" 107 22 107 24] (-1 : int32));
    switch (_66)
      | False -> goto BB36
      | True -> goto BB35
      end
  }
  BB35 {
    [#"../index_range.rs" 108 15 108 18] _74 <- ([#"../index_range.rs" 108 15 108 18] index1 arr ([#"../index_range.rs" 108 16 108 17] (1 : usize)));
    goto BB37
  }
  BB36 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 107 4 107 25] false };
    absurd
  }
  BB37 {
    [#"../index_range.rs" 108 12 108 23] _72 <- _74 = ([#"../index_range.rs" 108 22 108 23] (1 : int32));
    switch (_72)
      | False -> goto BB39
      | True -> goto BB38
      end
  }
  BB38 {
    [#"../index_range.rs" 109 15 109 18] _80 <- ([#"../index_range.rs" 109 15 109 18] index1 arr ([#"../index_range.rs" 109 16 109 17] (2 : usize)));
    goto BB40
  }
  BB39 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 108 4 108 24] false };
    absurd
  }
  BB40 {
    [#"../index_range.rs" 109 12 109 24] _78 <- _80 = ([#"../index_range.rs" 109 22 109 24] (-1 : int32));
    switch (_78)
      | False -> goto BB42
      | True -> goto BB41
      end
  }
  BB41 {
    [#"../index_range.rs" 110 15 110 18] _86 <- ([#"../index_range.rs" 110 15 110 18] index1 arr ([#"../index_range.rs" 110 16 110 17] (3 : usize)));
    goto BB43
  }
  BB42 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 109 4 109 25] false };
    absurd
  }
  BB43 {
    [#"../index_range.rs" 110 12 110 23] _84 <- _86 = ([#"../index_range.rs" 110 22 110 23] (3 : int32));
    switch (_84)
      | False -> goto BB45
      | True -> goto BB44
      end
  }
  BB44 {
    [#"../index_range.rs" 111 15 111 18] _92 <- ([#"../index_range.rs" 111 15 111 18] index1 arr ([#"../index_range.rs" 111 16 111 17] (4 : usize)));
    goto BB46
  }
  BB45 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 110 4 110 24] false };
    absurd
  }
  BB46 {
    assume { resolve0 arr };
    [#"../index_range.rs" 111 12 111 23] _90 <- _92 = ([#"../index_range.rs" 111 22 111 23] (4 : int32));
    switch (_90)
      | False -> goto BB48
      | True -> goto BB47
      end
  }
  BB47 {
    [#"../index_range.rs" 78 23 112 1] _0 <- ([#"../index_range.rs" 78 23 112 1] ());
    goto BB49
  }
  BB48 {
    assert { [#"../index_range.rs" 111 4 111 24] false };
    absurd
  }
  BB49 {
    return _0
  }
  
end
module Core_Ops_Range_RangeFrom_Type
  type t_rangefrom 'idx =
    | C_RangeFrom 'idx
    
  let function rangefrom_start (self : t_rangefrom 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_RangeFrom a -> a
      end
end
module IndexRange_TestRangeFrom
  use prelude.Int32
  use prelude.Slice
  predicate invariant11 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : slice int32) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : slice int32)
  val inv11 (_x : slice int32) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : slice int32 . inv11 x = true
  use seq.Seq
  predicate invariant10 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq int32) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq int32)
  val inv10 (_x : Seq.seq int32) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq int32 . inv10 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model0 self)
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv9 x = true
  predicate invariant8 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : int32) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : int32)
  val inv8 (_x : int32) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : int32 . inv8 x = true
  predicate invariant7 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : usize)
  val inv7 (_x : usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : usize . inv7 x = true
  use prelude.Borrow
  predicate invariant6 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (slice int32)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (slice int32))
  val inv6 (_x : borrowed (slice int32)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (slice int32) . inv6 x = true
  predicate invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv4 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv4 x = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv3 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv3 x = true
  predicate invariant2 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : slice int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice int32)
  val inv2 (_x : slice int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice int32 . inv2 x = true
  use Core_Ops_Range_RangeFrom_Type as Core_Ops_Range_RangeFrom_Type
  predicate invariant1 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize)
  val inv1 (_x : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use seq.Seq
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    ensures { result = shallow_model1 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : usize) : int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv7 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model1 self) result }
    ensures { inv8 result }
    
  val len1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model1 self) }
    
  predicate resolve1 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (slice int32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve_elswhere0 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) (old' : Seq.seq int32) (fin : Seq.seq int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 192 8 194 9] forall i : int . 0 <= i
    /\ i < UIntSize.to_int (Core_Ops_Range_RangeFrom_Type.rangefrom_start self) /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) (old' : Seq.seq int32) (fin : Seq.seq int32) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  use prelude.Slice
  function shallow_model4 (self : slice int32) : Seq.seq int32
  val shallow_model4 (self : slice int32) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice int32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv10 (shallow_model4 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model4 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max0)
  use seq_ext.SeqExt
  predicate has_value0 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) (seq : Seq.seq int32) (out : slice int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 186 20 186 67] SeqExt.subsequence seq (UIntSize.to_int (Core_Ops_Range_RangeFrom_Type.rangefrom_start self)) (Seq.length seq)
    = shallow_model4 out
  val has_value0 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) (seq : Seq.seq int32) (out : slice int32) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 180 20 180 44] UIntSize.to_int (Core_Ops_Range_RangeFrom_Type.rangefrom_start self)
    <= Seq.length seq
  val in_bounds0 (self : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model3 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) : borrowed (slice int32)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model3 self)}
    requires {inv5 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model3 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model0 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model3 self) (shallow_model0 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model0 ( ^ self))
    = Seq.length (shallow_model3 self) }
    ensures { inv6 result }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 36 26 36 51] result
    = (self = Core_Option_Option_Type.C_None) }
    
  function shallow_model2 (self : slice int32) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model4 self
  val shallow_model2 (self : slice int32) : Seq.seq int32
    ensures { result = shallow_model2 self }
    
  val get0 (self : slice int32) (index : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) : Core_Option_Option_Type.t_option (slice int32)
    requires {inv2 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 252 8 252 102] in_bounds0 index (shallow_model2 self)
     -> (exists r : slice int32 . inv2 r
    /\ result = Core_Option_Option_Type.C_Some r /\ has_value0 index (shallow_model2 self) r) }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 253 18 253 55] in_bounds0 index (shallow_model2 self)
    \/ result = Core_Option_Option_Type.C_None }
    ensures { inv3 result }
    
  val deref0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : slice int32
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 42] shallow_model2 result
    = shallow_model1 self }
    ensures { inv2 result }
    
  predicate resolve2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : int32) : bool
    ensures { result = resolve2 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val len0 (self : slice int32) : usize
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model2 self)
    = UIntSize.to_int result }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize) : slice int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv2 result }
    
  use prelude.Int32
  val create_arr0 [#"../index_range.rs" 14 0 14 27] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../index_range.rs" 7 4 12 22] Seq.length (shallow_model0 result) = 5
    /\ Int32.to_int (index_logic0 result 0) = 0
    /\ Int32.to_int (index_logic0 result 1) = 1
    /\ Int32.to_int (index_logic0 result 2) = 2
    /\ Int32.to_int (index_logic0 result 3) = 3 /\ Int32.to_int (index_logic0 result 4) = 4 }
    
  let rec cfg test_range_from [#"../index_range.rs" 115 0 115 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var arr : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var s : slice int32;
  var _3 : slice int32;
  var _5 : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
  var _7 : bool;
  var _8 : usize;
  var _10 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : bool;
  var _22 : bool;
  var _23 : usize;
  var _25 : slice int32;
  var _27 : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
  var _30 : bool;
  var _32 : Core_Option_Option_Type.t_option (slice int32);
  var _34 : slice int32;
  var _36 : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
  var _39 : bool;
  var _41 : Core_Option_Option_Type.t_option (slice int32);
  var _43 : slice int32;
  var _45 : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
  var s1 : borrowed (slice int32);
  var _48 : borrowed (slice int32);
  var _49 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _50 : Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
  var _52 : bool;
  var _53 : usize;
  var _56 : usize;
  var _57 : usize;
  var _58 : bool;
  var _59 : usize;
  var _60 : usize;
  var _61 : bool;
  var _63 : bool;
  var _65 : usize;
  var _66 : usize;
  var _67 : bool;
  var _70 : bool;
  var _71 : usize;
  var _75 : bool;
  var _77 : int32;
  var _81 : bool;
  var _83 : int32;
  var _87 : bool;
  var _89 : int32;
  var _93 : bool;
  var _95 : int32;
  var _99 : bool;
  var _101 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../index_range.rs" 117 18 117 30] arr <- ([#"../index_range.rs" 117 18 117 30] create_arr0 ([#"../index_range.rs" 117 18 117 30] ()));
    goto BB1
  }
  BB1 {
    [#"../index_range.rs" 122 17 122 20] _5 <- Core_Ops_Range_RangeFrom_Type.C_RangeFrom ([#"../index_range.rs" 122 17 122 18] (3 : usize));
    [#"../index_range.rs" 122 16 122 21] _3 <- ([#"../index_range.rs" 122 16 122 21] index0 arr _5);
    _5 <- any Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
    goto BB2
  }
  BB2 {
    [#"../index_range.rs" 122 12 122 21] s <- _3;
    [#"../index_range.rs" 123 12 123 19] _8 <- ([#"../index_range.rs" 123 12 123 19] len0 s);
    goto BB3
  }
  BB3 {
    [#"../index_range.rs" 123 12 123 24] _7 <- _8 = ([#"../index_range.rs" 123 23 123 24] (2 : usize));
    _8 <- any usize;
    switch (_7)
      | False -> goto BB11
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../index_range.rs" 123 30 123 31] _12 <- ([#"../index_range.rs" 123 30 123 31] (0 : usize));
    [#"../index_range.rs" 123 28 123 32] _13 <- Slice.length s;
    [#"../index_range.rs" 123 28 123 32] _14 <- _12 < _13;
    assert { [@expl:index in bounds] [#"../index_range.rs" 123 28 123 32] _14 };
    goto BB5
  }
  BB5 {
    [#"../index_range.rs" 123 28 123 37] _10 <- Slice.get s _12 = ([#"../index_range.rs" 123 36 123 37] (3 : int32));
    switch (_10)
      | False -> goto BB10
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../index_range.rs" 123 43 123 44] _17 <- ([#"../index_range.rs" 123 43 123 44] (1 : usize));
    [#"../index_range.rs" 123 41 123 45] _18 <- Slice.length s;
    [#"../index_range.rs" 123 41 123 45] _19 <- _17 < _18;
    assert { [@expl:index in bounds] [#"../index_range.rs" 123 41 123 45] _19 };
    goto BB7
  }
  BB7 {
    [#"../index_range.rs" 123 41 123 50] _15 <- Slice.get s _17 = ([#"../index_range.rs" 123 49 123 50] (4 : int32));
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../index_range.rs" 128 16 128 19] _27 <- Core_Ops_Range_RangeFrom_Type.C_RangeFrom ([#"../index_range.rs" 128 16 128 17] (5 : usize));
    [#"../index_range.rs" 128 15 128 20] _25 <- ([#"../index_range.rs" 128 15 128 20] index0 arr _27);
    _27 <- any Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
    goto BB13
  }
  BB9 {
    assume { resolve0 arr };
    goto BB12
  }
  BB10 {
    assume { resolve0 arr };
    goto BB12
  }
  BB11 {
    assume { resolve0 arr };
    goto BB12
  }
  BB12 {
    assert { [#"../index_range.rs" 123 4 123 51] false };
    absurd
  }
  BB13 {
    [#"../index_range.rs" 128 12 128 26] _23 <- ([#"../index_range.rs" 128 12 128 26] len0 _25);
    goto BB14
  }
  BB14 {
    [#"../index_range.rs" 128 12 128 31] _22 <- _23 = ([#"../index_range.rs" 128 30 128 31] (0 : usize));
    _23 <- any usize;
    switch (_22)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    [#"../index_range.rs" 133 12 133 24] _34 <- ([#"../index_range.rs" 133 12 133 24] deref0 arr);
    goto BB17
  }
  BB16 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 128 4 128 32] false };
    absurd
  }
  BB17 {
    [#"../index_range.rs" 133 20 133 23] _36 <- Core_Ops_Range_RangeFrom_Type.C_RangeFrom ([#"../index_range.rs" 133 20 133 21] (6 : usize));
    [#"../index_range.rs" 133 12 133 24] _32 <- ([#"../index_range.rs" 133 12 133 24] get0 _34 _36);
    _36 <- any Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
    goto BB18
  }
  BB18 {
    [#"../index_range.rs" 133 12 133 34] _30 <- ([#"../index_range.rs" 133 12 133 34] is_none0 _32);
    goto BB19
  }
  BB19 {
    switch (_30)
      | False -> goto BB21
      | True -> goto BB20
      end
  }
  BB20 {
    [#"../index_range.rs" 135 12 135 25] _43 <- ([#"../index_range.rs" 135 12 135 25] deref0 arr);
    goto BB22
  }
  BB21 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 133 4 133 35] false };
    absurd
  }
  BB22 {
    [#"../index_range.rs" 135 20 135 24] _45 <- Core_Ops_Range_RangeFrom_Type.C_RangeFrom ([#"../index_range.rs" 135 20 135 22] (10 : usize));
    [#"../index_range.rs" 135 12 135 25] _41 <- ([#"../index_range.rs" 135 12 135 25] get0 _43 _45);
    _45 <- any Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
    goto BB23
  }
  BB23 {
    [#"../index_range.rs" 135 12 135 35] _39 <- ([#"../index_range.rs" 135 12 135 35] is_none0 _41);
    goto BB24
  }
  BB24 {
    switch (_39)
      | False -> goto BB26
      | True -> goto BB25
      end
  }
  BB25 {
    [#"../index_range.rs" 138 17 138 20] _49 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 138 17 138 20] arr <-  ^ _49;
    [#"../index_range.rs" 138 21 138 24] _50 <- Core_Ops_Range_RangeFrom_Type.C_RangeFrom ([#"../index_range.rs" 138 21 138 22] (2 : usize));
    [#"../index_range.rs" 138 20 138 25] _48 <- ([#"../index_range.rs" 138 20 138 25] index_mut0 _49 _50);
    _49 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    _50 <- any Core_Ops_Range_RangeFrom_Type.t_rangefrom usize;
    goto BB27
  }
  BB26 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 135 4 135 36] false };
    absurd
  }
  BB27 {
    [#"../index_range.rs" 138 12 138 25] s1 <- Borrow.borrow_final ( * _48) (Borrow.get_id _48);
    [#"../index_range.rs" 138 12 138 25] _48 <- { _48 with current = ( ^ s1) ; };
    [#"../index_range.rs" 139 12 139 19] _53 <- ([#"../index_range.rs" 139 12 139 19] len0 ( * s1));
    goto BB28
  }
  BB28 {
    [#"../index_range.rs" 139 12 139 24] _52 <- _53 = ([#"../index_range.rs" 139 23 139 24] (3 : usize));
    _53 <- any usize;
    switch (_52)
      | False -> goto BB30
      | True -> goto BB29
      end
  }
  BB29 {
    [#"../index_range.rs" 140 6 140 7] _56 <- ([#"../index_range.rs" 140 6 140 7] (0 : usize));
    [#"../index_range.rs" 140 4 140 8] _57 <- Slice.length ( * s1);
    [#"../index_range.rs" 140 4 140 8] _58 <- _56 < _57;
    assert { [@expl:index in bounds] [#"../index_range.rs" 140 4 140 8] _58 };
    goto BB31
  }
  BB30 {
    assume { resolve1 s1 };
    assume { resolve1 _48 };
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 139 4 139 25] false };
    absurd
  }
  BB31 {
    [#"../index_range.rs" 140 4 140 13] s1 <- { s1 with current = Slice.set ( * s1) _56 ([#"../index_range.rs" 140 11 140 13] (-1 : int32)) ; };
    [#"../index_range.rs" 141 6 141 7] _59 <- ([#"../index_range.rs" 141 6 141 7] (1 : usize));
    [#"../index_range.rs" 141 4 141 8] _60 <- Slice.length ( * s1);
    [#"../index_range.rs" 141 4 141 8] _61 <- _59 < _60;
    assert { [@expl:index in bounds] [#"../index_range.rs" 141 4 141 8] _61 };
    goto BB32
  }
  BB32 {
    [#"../index_range.rs" 141 4 141 13] s1 <- { s1 with current = Slice.set ( * s1) _59 ([#"../index_range.rs" 141 11 141 13] (-1 : int32)) ; };
    [#"../index_range.rs" 143 14 143 15] _65 <- ([#"../index_range.rs" 143 14 143 15] (2 : usize));
    [#"../index_range.rs" 143 12 143 16] _66 <- Slice.length ( * s1);
    [#"../index_range.rs" 143 12 143 16] _67 <- _65 < _66;
    assert { [@expl:index in bounds] [#"../index_range.rs" 143 12 143 16] _67 };
    goto BB33
  }
  BB33 {
    assume { resolve1 s1 };
    [#"../index_range.rs" 143 12 143 21] _63 <- Slice.get ( * s1) _65
    = ([#"../index_range.rs" 143 20 143 21] (4 : int32));
    assume { resolve1 _48 };
    switch (_63)
      | False -> goto BB35
      | True -> goto BB34
      end
  }
  BB34 {
    [#"../index_range.rs" 145 12 145 21] _71 <- ([#"../index_range.rs" 145 12 145 21] len1 arr);
    goto BB36
  }
  BB35 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 143 4 143 22] false };
    absurd
  }
  BB36 {
    [#"../index_range.rs" 145 12 145 26] _70 <- _71 = ([#"../index_range.rs" 145 25 145 26] (5 : usize));
    _71 <- any usize;
    switch (_70)
      | False -> goto BB38
      | True -> goto BB37
      end
  }
  BB37 {
    [#"../index_range.rs" 146 15 146 18] _77 <- ([#"../index_range.rs" 146 15 146 18] index1 arr ([#"../index_range.rs" 146 16 146 17] (0 : usize)));
    goto BB39
  }
  BB38 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 145 4 145 27] false };
    absurd
  }
  BB39 {
    [#"../index_range.rs" 146 12 146 23] _75 <- _77 = ([#"../index_range.rs" 146 22 146 23] (0 : int32));
    switch (_75)
      | False -> goto BB41
      | True -> goto BB40
      end
  }
  BB40 {
    [#"../index_range.rs" 147 15 147 18] _83 <- ([#"../index_range.rs" 147 15 147 18] index1 arr ([#"../index_range.rs" 147 16 147 17] (1 : usize)));
    goto BB42
  }
  BB41 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 146 4 146 24] false };
    absurd
  }
  BB42 {
    [#"../index_range.rs" 147 12 147 23] _81 <- _83 = ([#"../index_range.rs" 147 22 147 23] (1 : int32));
    switch (_81)
      | False -> goto BB44
      | True -> goto BB43
      end
  }
  BB43 {
    [#"../index_range.rs" 148 15 148 18] _89 <- ([#"../index_range.rs" 148 15 148 18] index1 arr ([#"../index_range.rs" 148 16 148 17] (2 : usize)));
    goto BB45
  }
  BB44 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 147 4 147 24] false };
    absurd
  }
  BB45 {
    [#"../index_range.rs" 148 12 148 24] _87 <- _89 = ([#"../index_range.rs" 148 22 148 24] (-1 : int32));
    switch (_87)
      | False -> goto BB47
      | True -> goto BB46
      end
  }
  BB46 {
    [#"../index_range.rs" 149 15 149 18] _95 <- ([#"../index_range.rs" 149 15 149 18] index1 arr ([#"../index_range.rs" 149 16 149 17] (3 : usize)));
    goto BB48
  }
  BB47 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 148 4 148 25] false };
    absurd
  }
  BB48 {
    [#"../index_range.rs" 149 12 149 24] _93 <- _95 = ([#"../index_range.rs" 149 22 149 24] (-1 : int32));
    switch (_93)
      | False -> goto BB50
      | True -> goto BB49
      end
  }
  BB49 {
    [#"../index_range.rs" 150 15 150 18] _101 <- ([#"../index_range.rs" 150 15 150 18] index1 arr ([#"../index_range.rs" 150 16 150 17] (4 : usize)));
    goto BB51
  }
  BB50 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 149 4 149 25] false };
    absurd
  }
  BB51 {
    assume { resolve0 arr };
    [#"../index_range.rs" 150 12 150 23] _99 <- _101 = ([#"../index_range.rs" 150 22 150 23] (4 : int32));
    switch (_99)
      | False -> goto BB53
      | True -> goto BB52
      end
  }
  BB52 {
    [#"../index_range.rs" 115 25 151 1] _0 <- ([#"../index_range.rs" 115 25 151 1] ());
    goto BB54
  }
  BB53 {
    assert { [#"../index_range.rs" 150 4 150 24] false };
    absurd
  }
  BB54 {
    return _0
  }
  
end
module Core_Ops_Range_RangeFull_Type
  type t_rangefull  =
    | C_RangeFull
    
end
module IndexRange_TestRangeFull
  use prelude.Int32
  use prelude.Slice
  predicate invariant9 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : slice int32) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : slice int32)
  val inv9 (_x : slice int32) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : slice int32 . inv9 x = true
  use seq.Seq
  predicate invariant8 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Seq.seq int32) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq int32)
  val inv8 (_x : Seq.seq int32) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq int32 . inv8 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv8 (shallow_model0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv8 (shallow_model0 self)
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  predicate invariant6 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : int32) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : int32)
  val inv6 (_x : int32) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : int32 . inv6 x = true
  predicate invariant5 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : usize) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : usize)
  val inv5 (_x : usize) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : usize . inv5 x = true
  use prelude.Borrow
  predicate invariant4 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : borrowed (slice int32)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (slice int32))
  val inv4 (_x : borrowed (slice int32)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (slice int32) . inv4 x = true
  predicate invariant3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv3 x = true
  predicate invariant2 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : slice int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice int32)
  val inv2 (_x : slice int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice int32 . inv2 x = true
  use Core_Ops_Range_RangeFull_Type as Core_Ops_Range_RangeFull_Type
  predicate invariant1 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Ops_Range_RangeFull_Type.t_rangefull)
  val inv1 (_x : Core_Ops_Range_RangeFull_Type.t_rangefull) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Ops_Range_RangeFull_Type.t_rangefull . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use seq.Seq
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    ensures { result = shallow_model1 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : usize) : int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv5 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model1 self) result }
    ensures { inv6 result }
    
  val len1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model1 self) }
    
  predicate resolve1 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (slice int32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve_elswhere0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq int32) (_fin : Seq.seq int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 214 20 214 24] true
  val resolve_elswhere0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_old : Seq.seq int32) (_fin : Seq.seq int32) : bool
    ensures { result = resolve_elswhere0 self _old _fin }
    
  use prelude.Slice
  function shallow_model4 (self : slice int32) : Seq.seq int32
  val shallow_model4 (self : slice int32) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice int32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv8 (shallow_model4 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model4 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max0)
  predicate has_value0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq int32) (out : slice int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 208 20 208 31] seq = shallow_model4 out
  val has_value0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (seq : Seq.seq int32) (out : slice int32) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 202 20 202 24] true
  val in_bounds0 (self : Core_Ops_Range_RangeFull_Type.t_rangefull) (_seq : Seq.seq int32) : bool
    ensures { result = in_bounds0 self _seq }
    
  function shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model3 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index : Core_Ops_Range_RangeFull_Type.t_rangefull) : borrowed (slice int32)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model3 self)}
    requires {inv3 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model3 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model0 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model3 self) (shallow_model0 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model0 ( ^ self))
    = Seq.length (shallow_model3 self) }
    ensures { inv4 result }
    
  predicate resolve2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : int32) : bool
    ensures { result = resolve2 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  function shallow_model2 (self : slice int32) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model4 self
  val shallow_model2 (self : slice int32) : Seq.seq int32
    ensures { result = shallow_model2 self }
    
  val len0 (self : slice int32) : usize
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model2 self)
    = UIntSize.to_int result }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : Core_Ops_Range_RangeFull_Type.t_rangefull) : slice int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv2 result }
    
  use prelude.Int32
  val create_arr0 [#"../index_range.rs" 14 0 14 27] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../index_range.rs" 7 4 12 22] Seq.length (shallow_model0 result) = 5
    /\ Int32.to_int (index_logic0 result 0) = 0
    /\ Int32.to_int (index_logic0 result 1) = 1
    /\ Int32.to_int (index_logic0 result 2) = 2
    /\ Int32.to_int (index_logic0 result 3) = 3 /\ Int32.to_int (index_logic0 result 4) = 4 }
    
  let rec cfg test_range_full [#"../index_range.rs" 154 0 154 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var arr : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var s : slice int32;
  var _3 : slice int32;
  var _5 : Core_Ops_Range_RangeFull_Type.t_rangefull;
  var _7 : bool;
  var _8 : usize;
  var _10 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : bool;
  var _20 : bool;
  var _22 : usize;
  var _23 : usize;
  var _24 : bool;
  var _25 : bool;
  var _27 : usize;
  var _28 : usize;
  var _29 : bool;
  var _30 : bool;
  var _32 : usize;
  var _33 : usize;
  var _34 : bool;
  var s1 : borrowed (slice int32);
  var _37 : borrowed (slice int32);
  var _38 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _39 : Core_Ops_Range_RangeFull_Type.t_rangefull;
  var _41 : bool;
  var _42 : usize;
  var _45 : usize;
  var _46 : usize;
  var _47 : bool;
  var _48 : usize;
  var _49 : usize;
  var _50 : bool;
  var _52 : bool;
  var _53 : usize;
  var _57 : bool;
  var _59 : int32;
  var _63 : bool;
  var _65 : int32;
  var _69 : bool;
  var _71 : int32;
  var _75 : bool;
  var _77 : int32;
  var _81 : bool;
  var _83 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../index_range.rs" 156 18 156 30] arr <- ([#"../index_range.rs" 156 18 156 30] create_arr0 ([#"../index_range.rs" 156 18 156 30] ()));
    goto BB1
  }
  BB1 {
    [#"../index_range.rs" 161 17 161 19] _5 <- Core_Ops_Range_RangeFull_Type.C_RangeFull;
    [#"../index_range.rs" 161 16 161 20] _3 <- ([#"../index_range.rs" 161 16 161 20] index0 arr _5);
    _5 <- any Core_Ops_Range_RangeFull_Type.t_rangefull;
    goto BB2
  }
  BB2 {
    [#"../index_range.rs" 161 12 161 20] s <- _3;
    [#"../index_range.rs" 162 12 162 19] _8 <- ([#"../index_range.rs" 162 12 162 19] len0 s);
    goto BB3
  }
  BB3 {
    [#"../index_range.rs" 162 12 162 24] _7 <- _8 = ([#"../index_range.rs" 162 23 162 24] (5 : usize));
    _8 <- any usize;
    switch (_7)
      | False -> goto BB20
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../index_range.rs" 162 30 162 31] _12 <- ([#"../index_range.rs" 162 30 162 31] (0 : usize));
    [#"../index_range.rs" 162 28 162 32] _13 <- Slice.length s;
    [#"../index_range.rs" 162 28 162 32] _14 <- _12 < _13;
    assert { [@expl:index in bounds] [#"../index_range.rs" 162 28 162 32] _14 };
    goto BB5
  }
  BB5 {
    [#"../index_range.rs" 162 28 162 37] _10 <- Slice.get s _12 = ([#"../index_range.rs" 162 36 162 37] (0 : int32));
    switch (_10)
      | False -> goto BB19
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../index_range.rs" 162 43 162 44] _17 <- ([#"../index_range.rs" 162 43 162 44] (1 : usize));
    [#"../index_range.rs" 162 41 162 45] _18 <- Slice.length s;
    [#"../index_range.rs" 162 41 162 45] _19 <- _17 < _18;
    assert { [@expl:index in bounds] [#"../index_range.rs" 162 41 162 45] _19 };
    goto BB7
  }
  BB7 {
    [#"../index_range.rs" 162 41 162 50] _15 <- Slice.get s _17 = ([#"../index_range.rs" 162 49 162 50] (1 : int32));
    switch (_15)
      | False -> goto BB18
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../index_range.rs" 162 56 162 57] _22 <- ([#"../index_range.rs" 162 56 162 57] (2 : usize));
    [#"../index_range.rs" 162 54 162 58] _23 <- Slice.length s;
    [#"../index_range.rs" 162 54 162 58] _24 <- _22 < _23;
    assert { [@expl:index in bounds] [#"../index_range.rs" 162 54 162 58] _24 };
    goto BB9
  }
  BB9 {
    [#"../index_range.rs" 162 54 162 63] _20 <- Slice.get s _22 = ([#"../index_range.rs" 162 62 162 63] (2 : int32));
    switch (_20)
      | False -> goto BB17
      | True -> goto BB10
      end
  }
  BB10 {
    [#"../index_range.rs" 162 69 162 70] _27 <- ([#"../index_range.rs" 162 69 162 70] (3 : usize));
    [#"../index_range.rs" 162 67 162 71] _28 <- Slice.length s;
    [#"../index_range.rs" 162 67 162 71] _29 <- _27 < _28;
    assert { [@expl:index in bounds] [#"../index_range.rs" 162 67 162 71] _29 };
    goto BB11
  }
  BB11 {
    [#"../index_range.rs" 162 67 162 76] _25 <- Slice.get s _27 = ([#"../index_range.rs" 162 75 162 76] (3 : int32));
    switch (_25)
      | False -> goto BB16
      | True -> goto BB12
      end
  }
  BB12 {
    [#"../index_range.rs" 162 82 162 83] _32 <- ([#"../index_range.rs" 162 82 162 83] (4 : usize));
    [#"../index_range.rs" 162 80 162 84] _33 <- Slice.length s;
    [#"../index_range.rs" 162 80 162 84] _34 <- _32 < _33;
    assert { [@expl:index in bounds] [#"../index_range.rs" 162 80 162 84] _34 };
    goto BB13
  }
  BB13 {
    [#"../index_range.rs" 162 80 162 89] _30 <- Slice.get s _32 = ([#"../index_range.rs" 162 88 162 89] (4 : int32));
    switch (_30)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    [#"../index_range.rs" 165 17 165 20] _38 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 165 17 165 20] arr <-  ^ _38;
    [#"../index_range.rs" 165 21 165 23] _39 <- Core_Ops_Range_RangeFull_Type.C_RangeFull;
    [#"../index_range.rs" 165 20 165 24] _37 <- ([#"../index_range.rs" 165 20 165 24] index_mut0 _38 _39);
    _38 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    _39 <- any Core_Ops_Range_RangeFull_Type.t_rangefull;
    goto BB22
  }
  BB15 {
    assume { resolve0 arr };
    goto BB21
  }
  BB16 {
    assume { resolve0 arr };
    goto BB21
  }
  BB17 {
    assume { resolve0 arr };
    goto BB21
  }
  BB18 {
    assume { resolve0 arr };
    goto BB21
  }
  BB19 {
    assume { resolve0 arr };
    goto BB21
  }
  BB20 {
    assume { resolve0 arr };
    goto BB21
  }
  BB21 {
    assert { [#"../index_range.rs" 162 4 162 90] false };
    absurd
  }
  BB22 {
    [#"../index_range.rs" 165 12 165 24] s1 <- Borrow.borrow_final ( * _37) (Borrow.get_id _37);
    [#"../index_range.rs" 165 12 165 24] _37 <- { _37 with current = ( ^ s1) ; };
    [#"../index_range.rs" 166 12 166 19] _42 <- ([#"../index_range.rs" 166 12 166 19] len0 ( * s1));
    goto BB23
  }
  BB23 {
    [#"../index_range.rs" 166 12 166 24] _41 <- _42 = ([#"../index_range.rs" 166 23 166 24] (5 : usize));
    _42 <- any usize;
    switch (_41)
      | False -> goto BB25
      | True -> goto BB24
      end
  }
  BB24 {
    [#"../index_range.rs" 167 6 167 7] _45 <- ([#"../index_range.rs" 167 6 167 7] (1 : usize));
    [#"../index_range.rs" 167 4 167 8] _46 <- Slice.length ( * s1);
    [#"../index_range.rs" 167 4 167 8] _47 <- _45 < _46;
    assert { [@expl:index in bounds] [#"../index_range.rs" 167 4 167 8] _47 };
    goto BB26
  }
  BB25 {
    assume { resolve1 s1 };
    assume { resolve1 _37 };
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 166 4 166 25] false };
    absurd
  }
  BB26 {
    [#"../index_range.rs" 167 4 167 13] s1 <- { s1 with current = Slice.set ( * s1) _45 ([#"../index_range.rs" 167 11 167 13] (-1 : int32)) ; };
    [#"../index_range.rs" 168 6 168 7] _48 <- ([#"../index_range.rs" 168 6 168 7] (3 : usize));
    [#"../index_range.rs" 168 4 168 8] _49 <- Slice.length ( * s1);
    [#"../index_range.rs" 168 4 168 8] _50 <- _48 < _49;
    assert { [@expl:index in bounds] [#"../index_range.rs" 168 4 168 8] _50 };
    goto BB27
  }
  BB27 {
    [#"../index_range.rs" 168 4 168 13] s1 <- { s1 with current = Slice.set ( * s1) _48 ([#"../index_range.rs" 168 11 168 13] (-1 : int32)) ; };
    assume { resolve1 s1 };
    assume { resolve1 _37 };
    [#"../index_range.rs" 170 12 170 21] _53 <- ([#"../index_range.rs" 170 12 170 21] len1 arr);
    goto BB28
  }
  BB28 {
    [#"../index_range.rs" 170 12 170 26] _52 <- _53 = ([#"../index_range.rs" 170 25 170 26] (5 : usize));
    _53 <- any usize;
    switch (_52)
      | False -> goto BB30
      | True -> goto BB29
      end
  }
  BB29 {
    [#"../index_range.rs" 171 15 171 18] _59 <- ([#"../index_range.rs" 171 15 171 18] index1 arr ([#"../index_range.rs" 171 16 171 17] (0 : usize)));
    goto BB31
  }
  BB30 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 170 4 170 27] false };
    absurd
  }
  BB31 {
    [#"../index_range.rs" 171 12 171 23] _57 <- _59 = ([#"../index_range.rs" 171 22 171 23] (0 : int32));
    switch (_57)
      | False -> goto BB33
      | True -> goto BB32
      end
  }
  BB32 {
    [#"../index_range.rs" 172 15 172 18] _65 <- ([#"../index_range.rs" 172 15 172 18] index1 arr ([#"../index_range.rs" 172 16 172 17] (1 : usize)));
    goto BB34
  }
  BB33 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 171 4 171 24] false };
    absurd
  }
  BB34 {
    [#"../index_range.rs" 172 12 172 24] _63 <- _65 = ([#"../index_range.rs" 172 22 172 24] (-1 : int32));
    switch (_63)
      | False -> goto BB36
      | True -> goto BB35
      end
  }
  BB35 {
    [#"../index_range.rs" 173 15 173 18] _71 <- ([#"../index_range.rs" 173 15 173 18] index1 arr ([#"../index_range.rs" 173 16 173 17] (2 : usize)));
    goto BB37
  }
  BB36 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 172 4 172 25] false };
    absurd
  }
  BB37 {
    [#"../index_range.rs" 173 12 173 23] _69 <- _71 = ([#"../index_range.rs" 173 22 173 23] (2 : int32));
    switch (_69)
      | False -> goto BB39
      | True -> goto BB38
      end
  }
  BB38 {
    [#"../index_range.rs" 174 15 174 18] _77 <- ([#"../index_range.rs" 174 15 174 18] index1 arr ([#"../index_range.rs" 174 16 174 17] (3 : usize)));
    goto BB40
  }
  BB39 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 173 4 173 24] false };
    absurd
  }
  BB40 {
    [#"../index_range.rs" 174 12 174 24] _75 <- _77 = ([#"../index_range.rs" 174 22 174 24] (-1 : int32));
    switch (_75)
      | False -> goto BB42
      | True -> goto BB41
      end
  }
  BB41 {
    [#"../index_range.rs" 175 15 175 18] _83 <- ([#"../index_range.rs" 175 15 175 18] index1 arr ([#"../index_range.rs" 175 16 175 17] (4 : usize)));
    goto BB43
  }
  BB42 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 174 4 174 25] false };
    absurd
  }
  BB43 {
    assume { resolve0 arr };
    [#"../index_range.rs" 175 12 175 23] _81 <- _83 = ([#"../index_range.rs" 175 22 175 23] (4 : int32));
    switch (_81)
      | False -> goto BB45
      | True -> goto BB44
      end
  }
  BB44 {
    [#"../index_range.rs" 154 25 176 1] _0 <- ([#"../index_range.rs" 154 25 176 1] ());
    goto BB46
  }
  BB45 {
    assert { [#"../index_range.rs" 175 4 175 24] false };
    absurd
  }
  BB46 {
    return _0
  }
  
end
module Core_Ops_Range_RangeToInclusive_Type
  type t_rangetoinclusive 'idx =
    | C_RangeToInclusive 'idx
    
  let function rangetoinclusive_end (self : t_rangetoinclusive 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_RangeToInclusive a -> a
      end
end
module IndexRange_TestRangeToInclusive
  use prelude.Int32
  use prelude.Slice
  predicate invariant11 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : slice int32) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : slice int32)
  val inv11 (_x : slice int32) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : slice int32 . inv11 x = true
  use seq.Seq
  predicate invariant10 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq int32) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq int32)
  val inv10 (_x : Seq.seq int32) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq int32 . inv10 x = true
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model0 self)
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv9 x = true
  predicate invariant8 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : int32) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : int32)
  val inv8 (_x : int32) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : int32 . inv8 x = true
  predicate invariant7 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : usize)
  val inv7 (_x : usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : usize . inv7 x = true
  use prelude.Borrow
  predicate invariant6 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (slice int32)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (slice int32))
  val inv6 (_x : borrowed (slice int32)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (slice int32) . inv6 x = true
  predicate invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv4 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv4 x = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (slice int32))
  val inv3 (_x : Core_Option_Option_Type.t_option (slice int32)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (slice int32) . inv3 x = true
  predicate invariant2 (self : slice int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : slice int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : slice int32)
  val inv2 (_x : slice int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : slice int32 . inv2 x = true
  use Core_Ops_Range_RangeToInclusive_Type as Core_Ops_Range_RangeToInclusive_Type
  predicate invariant1 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize)
  val inv1 (_x : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use seq.Seq
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
    ensures { result = shallow_model1 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : usize) : int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv7 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model1 self) result }
    ensures { inv8 result }
    
  val len1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model1 self) }
    
  predicate resolve1 (self : borrowed (slice int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (slice int32)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve_elswhere0 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) (old' : Seq.seq int32) (fin : Seq.seq int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 234 8 234 89] forall i : int . UIntSize.to_int (Core_Ops_Range_RangeToInclusive_Type.rangetoinclusive_end self)
    < i
    /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) (old' : Seq.seq int32) (fin : Seq.seq int32) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  use prelude.Slice
  function shallow_model4 (self : slice int32) : Seq.seq int32
  val shallow_model4 (self : slice int32) : Seq.seq int32
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : slice int32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv11 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv10 (shallow_model4 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model4 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max0)
  use seq_ext.SeqExt
  predicate has_value0 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) (seq : Seq.seq int32) (out : slice int32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 228 20 228 61] SeqExt.subsequence seq 0 (UIntSize.to_int (Core_Ops_Range_RangeToInclusive_Type.rangetoinclusive_end self)
    + 1)
    = shallow_model4 out
  val has_value0 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) (seq : Seq.seq int32) (out : slice int32) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 222 20 222 41] UIntSize.to_int (Core_Ops_Range_RangeToInclusive_Type.rangetoinclusive_end self)
    < Seq.length seq
  val in_bounds0 (self : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) (seq : Seq.seq int32) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    ensures { result = shallow_model3 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) : borrowed (slice int32)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model3 self)}
    requires {inv5 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model3 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model0 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model3 self) (shallow_model0 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model0 ( ^ self))
    = Seq.length (shallow_model3 self) }
    ensures { inv6 result }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (slice int32)) : bool
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 36 26 36 51] result
    = (self = Core_Option_Option_Type.C_None) }
    
  function shallow_model2 (self : slice int32) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model4 self
  val shallow_model2 (self : slice int32) : Seq.seq int32
    ensures { result = shallow_model2 self }
    
  val get0 (self : slice int32) (index : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) : Core_Option_Option_Type.t_option (slice int32)
    requires {inv2 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 252 8 252 102] in_bounds0 index (shallow_model2 self)
     -> (exists r : slice int32 . inv2 r
    /\ result = Core_Option_Option_Type.C_Some r /\ has_value0 index (shallow_model2 self) r) }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 253 18 253 55] in_bounds0 index (shallow_model2 self)
    \/ result = Core_Option_Option_Type.C_None }
    ensures { inv3 result }
    
  val deref0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : slice int32
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 42] shallow_model2 result
    = shallow_model1 self }
    ensures { inv2 result }
    
  predicate resolve2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : int32) : bool
    ensures { result = resolve2 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve2 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val len0 (self : slice int32) : usize
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model2 self)
    = UIntSize.to_int result }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize) : slice int32
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv2 result }
    
  use prelude.Int32
  val create_arr0 [#"../index_range.rs" 14 0 14 27] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../index_range.rs" 7 4 12 22] Seq.length (shallow_model0 result) = 5
    /\ Int32.to_int (index_logic0 result 0) = 0
    /\ Int32.to_int (index_logic0 result 1) = 1
    /\ Int32.to_int (index_logic0 result 2) = 2
    /\ Int32.to_int (index_logic0 result 3) = 3 /\ Int32.to_int (index_logic0 result 4) = 4 }
    
  let rec cfg test_range_to_inclusive [#"../index_range.rs" 179 0 179 32] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var arr : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global);
  var s : slice int32;
  var _3 : slice int32;
  var _5 : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize;
  var _7 : bool;
  var _8 : usize;
  var _10 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : bool;
  var _22 : bool;
  var _24 : Core_Option_Option_Type.t_option (slice int32);
  var _26 : slice int32;
  var _28 : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize;
  var s1 : borrowed (slice int32);
  var _31 : borrowed (slice int32);
  var _32 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
  var _33 : Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize;
  var _35 : bool;
  var _36 : usize;
  var _39 : usize;
  var _40 : usize;
  var _41 : bool;
  var _42 : usize;
  var _43 : usize;
  var _44 : bool;
  var _46 : bool;
  var _48 : usize;
  var _49 : usize;
  var _50 : bool;
  var _53 : bool;
  var _54 : usize;
  var _58 : bool;
  var _60 : int32;
  var _64 : bool;
  var _66 : int32;
  var _70 : bool;
  var _72 : int32;
  var _76 : bool;
  var _78 : int32;
  var _82 : bool;
  var _84 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../index_range.rs" 181 18 181 30] arr <- ([#"../index_range.rs" 181 18 181 30] create_arr0 ([#"../index_range.rs" 181 18 181 30] ()));
    goto BB1
  }
  BB1 {
    [#"../index_range.rs" 186 17 186 21] _5 <- Core_Ops_Range_RangeToInclusive_Type.C_RangeToInclusive ([#"../index_range.rs" 186 20 186 21] (1 : usize));
    [#"../index_range.rs" 186 16 186 22] _3 <- ([#"../index_range.rs" 186 16 186 22] index0 arr _5);
    _5 <- any Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize;
    goto BB2
  }
  BB2 {
    [#"../index_range.rs" 186 12 186 22] s <- _3;
    [#"../index_range.rs" 187 12 187 19] _8 <- ([#"../index_range.rs" 187 12 187 19] len0 s);
    goto BB3
  }
  BB3 {
    [#"../index_range.rs" 187 12 187 24] _7 <- _8 = ([#"../index_range.rs" 187 23 187 24] (2 : usize));
    _8 <- any usize;
    switch (_7)
      | False -> goto BB11
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../index_range.rs" 187 30 187 31] _12 <- ([#"../index_range.rs" 187 30 187 31] (0 : usize));
    [#"../index_range.rs" 187 28 187 32] _13 <- Slice.length s;
    [#"../index_range.rs" 187 28 187 32] _14 <- _12 < _13;
    assert { [@expl:index in bounds] [#"../index_range.rs" 187 28 187 32] _14 };
    goto BB5
  }
  BB5 {
    [#"../index_range.rs" 187 28 187 37] _10 <- Slice.get s _12 = ([#"../index_range.rs" 187 36 187 37] (0 : int32));
    switch (_10)
      | False -> goto BB10
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../index_range.rs" 187 43 187 44] _17 <- ([#"../index_range.rs" 187 43 187 44] (1 : usize));
    [#"../index_range.rs" 187 41 187 45] _18 <- Slice.length s;
    [#"../index_range.rs" 187 41 187 45] _19 <- _17 < _18;
    assert { [@expl:index in bounds] [#"../index_range.rs" 187 41 187 45] _19 };
    goto BB7
  }
  BB7 {
    [#"../index_range.rs" 187 41 187 50] _15 <- Slice.get s _17 = ([#"../index_range.rs" 187 49 187 50] (1 : int32));
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    [#"../index_range.rs" 192 12 192 25] _26 <- ([#"../index_range.rs" 192 12 192 25] deref0 arr);
    goto BB13
  }
  BB9 {
    assume { resolve0 arr };
    goto BB12
  }
  BB10 {
    assume { resolve0 arr };
    goto BB12
  }
  BB11 {
    assume { resolve0 arr };
    goto BB12
  }
  BB12 {
    assert { [#"../index_range.rs" 187 4 187 51] false };
    absurd
  }
  BB13 {
    [#"../index_range.rs" 192 20 192 24] _28 <- Core_Ops_Range_RangeToInclusive_Type.C_RangeToInclusive ([#"../index_range.rs" 192 23 192 24] (5 : usize));
    [#"../index_range.rs" 192 12 192 25] _24 <- ([#"../index_range.rs" 192 12 192 25] get0 _26 _28);
    _28 <- any Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize;
    goto BB14
  }
  BB14 {
    [#"../index_range.rs" 192 12 192 35] _22 <- ([#"../index_range.rs" 192 12 192 35] is_none0 _24);
    goto BB15
  }
  BB15 {
    switch (_22)
      | False -> goto BB17
      | True -> goto BB16
      end
  }
  BB16 {
    [#"../index_range.rs" 195 17 195 20] _32 <- Borrow.borrow_mut arr;
    [#"../index_range.rs" 195 17 195 20] arr <-  ^ _32;
    [#"../index_range.rs" 195 21 195 25] _33 <- Core_Ops_Range_RangeToInclusive_Type.C_RangeToInclusive ([#"../index_range.rs" 195 24 195 25] (2 : usize));
    [#"../index_range.rs" 195 20 195 26] _31 <- ([#"../index_range.rs" 195 20 195 26] index_mut0 _32 _33);
    _32 <- any borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global));
    _33 <- any Core_Ops_Range_RangeToInclusive_Type.t_rangetoinclusive usize;
    goto BB18
  }
  BB17 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 192 4 192 36] false };
    absurd
  }
  BB18 {
    [#"../index_range.rs" 195 12 195 26] s1 <- Borrow.borrow_final ( * _31) (Borrow.get_id _31);
    [#"../index_range.rs" 195 12 195 26] _31 <- { _31 with current = ( ^ s1) ; };
    [#"../index_range.rs" 196 12 196 19] _36 <- ([#"../index_range.rs" 196 12 196 19] len0 ( * s1));
    goto BB19
  }
  BB19 {
    [#"../index_range.rs" 196 12 196 24] _35 <- _36 = ([#"../index_range.rs" 196 23 196 24] (3 : usize));
    _36 <- any usize;
    switch (_35)
      | False -> goto BB21
      | True -> goto BB20
      end
  }
  BB20 {
    [#"../index_range.rs" 197 6 197 7] _39 <- ([#"../index_range.rs" 197 6 197 7] (0 : usize));
    [#"../index_range.rs" 197 4 197 8] _40 <- Slice.length ( * s1);
    [#"../index_range.rs" 197 4 197 8] _41 <- _39 < _40;
    assert { [@expl:index in bounds] [#"../index_range.rs" 197 4 197 8] _41 };
    goto BB22
  }
  BB21 {
    assume { resolve1 s1 };
    assume { resolve1 _31 };
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 196 4 196 25] false };
    absurd
  }
  BB22 {
    [#"../index_range.rs" 197 4 197 13] s1 <- { s1 with current = Slice.set ( * s1) _39 ([#"../index_range.rs" 197 11 197 13] (-1 : int32)) ; };
    [#"../index_range.rs" 198 6 198 7] _42 <- ([#"../index_range.rs" 198 6 198 7] (2 : usize));
    [#"../index_range.rs" 198 4 198 8] _43 <- Slice.length ( * s1);
    [#"../index_range.rs" 198 4 198 8] _44 <- _42 < _43;
    assert { [@expl:index in bounds] [#"../index_range.rs" 198 4 198 8] _44 };
    goto BB23
  }
  BB23 {
    [#"../index_range.rs" 198 4 198 13] s1 <- { s1 with current = Slice.set ( * s1) _42 ([#"../index_range.rs" 198 11 198 13] (-1 : int32)) ; };
    [#"../index_range.rs" 200 14 200 15] _48 <- ([#"../index_range.rs" 200 14 200 15] (1 : usize));
    [#"../index_range.rs" 200 12 200 16] _49 <- Slice.length ( * s1);
    [#"../index_range.rs" 200 12 200 16] _50 <- _48 < _49;
    assert { [@expl:index in bounds] [#"../index_range.rs" 200 12 200 16] _50 };
    goto BB24
  }
  BB24 {
    assume { resolve1 s1 };
    [#"../index_range.rs" 200 12 200 21] _46 <- Slice.get ( * s1) _48
    = ([#"../index_range.rs" 200 20 200 21] (1 : int32));
    assume { resolve1 _31 };
    switch (_46)
      | False -> goto BB26
      | True -> goto BB25
      end
  }
  BB25 {
    [#"../index_range.rs" 202 12 202 21] _54 <- ([#"../index_range.rs" 202 12 202 21] len1 arr);
    goto BB27
  }
  BB26 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 200 4 200 22] false };
    absurd
  }
  BB27 {
    [#"../index_range.rs" 202 12 202 26] _53 <- _54 = ([#"../index_range.rs" 202 25 202 26] (5 : usize));
    _54 <- any usize;
    switch (_53)
      | False -> goto BB29
      | True -> goto BB28
      end
  }
  BB28 {
    [#"../index_range.rs" 203 15 203 18] _60 <- ([#"../index_range.rs" 203 15 203 18] index1 arr ([#"../index_range.rs" 203 16 203 17] (0 : usize)));
    goto BB30
  }
  BB29 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 202 4 202 27] false };
    absurd
  }
  BB30 {
    [#"../index_range.rs" 203 12 203 24] _58 <- _60 = ([#"../index_range.rs" 203 22 203 24] (-1 : int32));
    switch (_58)
      | False -> goto BB32
      | True -> goto BB31
      end
  }
  BB31 {
    [#"../index_range.rs" 204 15 204 18] _66 <- ([#"../index_range.rs" 204 15 204 18] index1 arr ([#"../index_range.rs" 204 16 204 17] (1 : usize)));
    goto BB33
  }
  BB32 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 203 4 203 25] false };
    absurd
  }
  BB33 {
    [#"../index_range.rs" 204 12 204 23] _64 <- _66 = ([#"../index_range.rs" 204 22 204 23] (1 : int32));
    switch (_64)
      | False -> goto BB35
      | True -> goto BB34
      end
  }
  BB34 {
    [#"../index_range.rs" 205 15 205 18] _72 <- ([#"../index_range.rs" 205 15 205 18] index1 arr ([#"../index_range.rs" 205 16 205 17] (2 : usize)));
    goto BB36
  }
  BB35 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 204 4 204 24] false };
    absurd
  }
  BB36 {
    [#"../index_range.rs" 205 12 205 24] _70 <- _72 = ([#"../index_range.rs" 205 22 205 24] (-1 : int32));
    switch (_70)
      | False -> goto BB38
      | True -> goto BB37
      end
  }
  BB37 {
    [#"../index_range.rs" 206 15 206 18] _78 <- ([#"../index_range.rs" 206 15 206 18] index1 arr ([#"../index_range.rs" 206 16 206 17] (3 : usize)));
    goto BB39
  }
  BB38 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 205 4 205 25] false };
    absurd
  }
  BB39 {
    [#"../index_range.rs" 206 12 206 23] _76 <- _78 = ([#"../index_range.rs" 206 22 206 23] (3 : int32));
    switch (_76)
      | False -> goto BB41
      | True -> goto BB40
      end
  }
  BB40 {
    [#"../index_range.rs" 207 15 207 18] _84 <- ([#"../index_range.rs" 207 15 207 18] index1 arr ([#"../index_range.rs" 207 16 207 17] (4 : usize)));
    goto BB42
  }
  BB41 {
    assume { resolve0 arr };
    assert { [#"../index_range.rs" 206 4 206 24] false };
    absurd
  }
  BB42 {
    assume { resolve0 arr };
    [#"../index_range.rs" 207 12 207 23] _82 <- _84 = ([#"../index_range.rs" 207 22 207 23] (4 : int32));
    switch (_82)
      | False -> goto BB44
      | True -> goto BB43
      end
  }
  BB43 {
    [#"../index_range.rs" 179 33 208 1] _0 <- ([#"../index_range.rs" 179 33 208 1] ());
    goto BB45
  }
  BB44 {
    assert { [#"../index_range.rs" 207 4 207 24] false };
    absurd
  }
  BB45 {
    return _0
  }
  
end
