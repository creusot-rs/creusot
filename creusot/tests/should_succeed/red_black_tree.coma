
module RedBlackTree_Color_Type
  type t_color  =
    | C_Red
    | C_Black
  
  function any_l (_ : 'b) : 'a
  
  let rec red (input:t_color) (ret  )= any [ good -> {C_Red  = input} (! ret) | bad -> {C_Red  <> input} {false} any ] 
  
  let rec black (input:t_color) (ret  )= any
    [ good -> {C_Black  = input} (! ret) | bad -> {C_Black  <> input} {false} any ]
    
end
module RedBlackTree_Impl16_Clone
  let%span sred_black_tree0 = "../red_black_tree.rs" 8 9 8 14
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use RedBlackTree_Color_Type as Color'0
  
  let rec clone' (self:Color'0.t_color) (return'  (ret:Color'0.t_color))= (! bb0
    [ bb0 = any [ br0 -> {self = Color'0.C_Red } (! bb2) | br1 -> {self = Color'0.C_Black } (! bb6) ] 
    | bb6 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- Color'0.C_Black ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- Color'0.C_Red ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : Color'0.t_color = any_l () | & self : Color'0.t_color = self ] 
    [ return' (result:Color'0.t_color)-> {[@expl:postcondition] [%#sred_black_tree0] result = self}
      (! return' {result}) ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module RedBlackTree_Node_Type
  use Core_Option_Option_Type as Option'0
  
  use RedBlackTree_Color_Type as Color'0
  
  type t_node 'k 'v =
    | C_Node (t_tree 'k 'v) (Color'0.t_color) 'k 'v (t_tree 'k 'v)
  with t_tree 'k 'v =
    | C_Tree (Option'0.t_option (t_node 'k 'v))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_node < 'k > < 'v > (input:t_node 'k 'v) (ret  (left:t_tree 'k 'v) (color:Color'0.t_color) (key:'k) (val':'v) (right:t_tree 'k 'v))= any
    [ good (left:t_tree 'k 'v) (color:Color'0.t_color) (key:'k) (val':'v) (right:t_tree 'k 'v)-> {C_Node left color key val' right
      = input}
      (! ret {left} {color} {key} {val'} {right})
    | bad (left:t_tree 'k 'v) (color:Color'0.t_color) (key:'k) (val':'v) (right:t_tree 'k 'v)-> {C_Node left color key val' right
      <> input}
      {false}
      any ]
    
  
  let rec t_tree < 'k > < 'v > (input:t_tree 'k 'v) (ret  (node:Option'0.t_option (t_node 'k 'v)))= any
    [ good (node:Option'0.t_option (t_node 'k 'v))-> {C_Tree node = input} (! ret {node})
    | bad (node:Option'0.t_option (t_node 'k 'v))-> {C_Tree node <> input} {false} any ]
    
  
  function node_left (self : t_node 'k 'v) : t_tree 'k 'v =
    match self with
      | C_Node a _ _ _ _ -> a
      end
  
  function node_key (self : t_node 'k 'v) : 'k =
    match self with
      | C_Node _ _ a _ _ -> a
      end
  
  function node_right (self : t_node 'k 'v) : t_tree 'k 'v =
    match self with
      | C_Node _ _ _ _ a -> a
      end
  
  function node_val (self : t_node 'k 'v) : 'v =
    match self with
      | C_Node _ _ _ a _ -> a
      end
  
  function node_color (self : t_node 'k 'v) : Color'0.t_color =
    match self with
      | C_Node _ a _ _ _ -> a
      end
  
  function tree_node (self : t_tree 'k 'v) : Option'0.t_option (t_node 'k 'v) =
    match self with
      | C_Tree a -> a
      end
end
module RedBlackTree_Tree_Type
  use export RedBlackTree_Node_Type
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 69 8 69 12
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 70 8 70 12
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 71 8 71 9
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span6 = "../red_black_tree.rs" 54 12 61 13
  
  predicate invariant'3 (self : v)
  
  predicate inv'3 (_x : v)
  
  axiom inv'3 : forall x : v . inv'3 x = true
  
  type deep_model_ty'0
  
  predicate invariant'2 (self : deep_model_ty'0)
  
  predicate inv'2 (_x : deep_model_ty'0)
  
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use map.Map
  
  predicate invariant'1 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span4] true
  
  predicate inv'1 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'1 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'1 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'0 (self : Tree'0.t_tree k v) =
    [%#span4] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span5] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span6] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  constant self  : Tree'0.t_tree k v
  
  constant accu  : Map.map deep_model_ty'0 (Option'0.t_option v)
  
  constant k  : deep_model_ty'0
  
  function model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
  
  goal vc_model_acc_has_mapping : ([%#sred_black_tree2] inv'2 k)
   -> ([%#sred_black_tree1] inv'1 accu)
   -> ([%#sred_black_tree0] inv'0 self)
   -> match self with
    | Tree'0.C_Tree (Option'0.C_None) -> [%#sred_black_tree3] Map.get (model_acc'0 self accu) k = Map.get accu k
    \/ (exists v : v . inv'3 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
    | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> (([%#sred_black_tree2] inv'2 k)
    && ([%#sred_black_tree1] inv'1 accu) && ([%#sred_black_tree0] inv'0 left))
    /\ (([%#sred_black_tree3] Map.get (model_acc'0 left accu) k = Map.get accu k
    \/ (exists v : v . inv'3 v /\ Map.get (model_acc'0 left accu) k = Option'0.C_Some v /\ has_mapping'0 left k v))
     -> (let _ = model_acc_has_mapping left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in (([%#sred_black_tree2] inv'2 k)
    && ([%#sred_black_tree1] inv'1 accu2) && ([%#sred_black_tree0] inv'0 right))
    /\ (([%#sred_black_tree3] Map.get (model_acc'0 right accu2) k = Map.get accu2 k
    \/ (exists v : v . inv'3 v /\ Map.get (model_acc'0 right accu2) k = Option'0.C_Some v /\ has_mapping'0 right k v))
     -> ([%#sred_black_tree3] Map.get (model_acc'0 self accu) k = Map.get accu k
    \/ (exists v : v . inv'3 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)))))
    end
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 87 15 87 35
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 89 29 89 33
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 89 35 89 39
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 89 81 89 82
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 88 4 88 94
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 69 8 69 12
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 70 8 70 12
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 71 8 71 9
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span40 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span41 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span42 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span43 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span44 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span45 = "../red_black_tree.rs" 206 12 212 13
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'2 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span9] inv'2 x)
   -> ([%#span10] inv'2 y)  -> ([%#span11] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span12] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span13] inv'2 x)  -> ([%#span14] inv'2 y)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span17] inv'2 x)  -> ([%#span18] inv'2 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span20] cmp_log'0 x y
  = o)
   -> ([%#span21] cmp_log'0 y z = o)
   -> ([%#span22] inv'2 x)  -> ([%#span23] inv'2 y)  -> ([%#span24] inv'2 z)  -> ([%#span25] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span26] inv'2 x)
   -> ([%#span27] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span28] inv'2 x)
   -> ([%#span29] inv'2 y)  -> ([%#span30] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'2 x)
   -> ([%#span32] inv'2 y)  -> ([%#span33] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'2 x)
   -> ([%#span35] inv'2 y)  -> ([%#span36] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'2 x)
   -> ([%#span38] inv'2 y)  -> ([%#span39] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'3 (self : v)
  
  predicate inv'3 (_x : v)
  
  axiom inv'3 : forall x : v . inv'3 x = true
  
  predicate invariant'2 (self : deep_model_ty'0)
  
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  use map.Map
  
  predicate invariant'1 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span40] true
  
  predicate inv'1 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'1 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'1 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'0 (self : Tree'0.t_tree k v) =
    [%#span40] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span41] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span42] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span43] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#sred_black_tree5] inv'0 self)
   -> ([%#sred_black_tree6] inv'1 accu)
   -> ([%#sred_black_tree7] inv'2 k)
   -> ([%#sred_black_tree8] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'3 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span44] (forall k : deep_model_ty'0, v : v . inv'2 k /\ inv'3 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'2 k /\ inv'3 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  constant self  : Tree'0.t_tree k v
  
  constant accu  : Map.map deep_model_ty'0 (Option'0.t_option v)
  
  constant k  : deep_model_ty'0
  
  function has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
  
  goal vc_has_mapping_model_acc : ([%#sred_black_tree3] inv'2 k)
   -> ([%#sred_black_tree2] inv'1 accu)
   -> ([%#sred_black_tree1] inv'0 self)
   -> ([%#sred_black_tree0] bst_invariant'0 self)
   -> match self with
    | Tree'0.C_Tree (Option'0.C_None) -> [%#sred_black_tree4] forall v : v . inv'3 v
     -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v
    | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> (([%#sred_black_tree3] inv'2 k)
    && ([%#sred_black_tree2] inv'1 accu)
    && ([%#sred_black_tree1] inv'0 left) && ([%#sred_black_tree0] bst_invariant'0 left))
    /\ (([%#sred_black_tree4] forall v : v . inv'3 v
     -> has_mapping'0 left k v  -> Map.get (model_acc'0 left accu) k = Option'0.C_Some v)
     -> (let _ = has_mapping_model_acc left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in (([%#sred_black_tree3] inv'2 k)
    && ([%#sred_black_tree2] inv'1 accu2)
    && ([%#sred_black_tree1] inv'0 right) && ([%#sred_black_tree0] bst_invariant'0 right))
    /\ (([%#sred_black_tree4] forall v : v . inv'3 v
     -> has_mapping'0 right k v  -> Map.get (model_acc'0 right accu2) k = Option'0.C_Some v)
     -> (let _ = has_mapping_model_acc right accu2 k in (([%#sred_black_tree7] inv'2 k)
    && ([%#sred_black_tree6] inv'1 accu2) && ([%#sred_black_tree5] inv'0 right))
    /\ (([%#sred_black_tree8] Map.get (model_acc'0 right accu2) k = Map.get accu2 k
    \/ (exists v : v . inv'3 v /\ Map.get (model_acc'0 right accu2) k = Option'0.C_Some v /\ has_mapping'0 right k v))
     -> ([%#sred_black_tree4] forall v : v . inv'3 v
     -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v))))))
    end
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 108 15 108 35
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 110 25 110 29
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 110 31 110 32
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 109 4 109 80
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 69 8 69 12
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 70 8 70 12
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 71 8 71 9
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 66 4 67 93
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 87 15 87 35
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 89 29 89 33
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 89 35 89 39
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 89 81 89 82
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span44 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span45 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span46 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span47 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span48 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span49 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span50 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span51 = "../red_black_tree.rs" 173 20 173 54
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'1 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span13] inv'1 x)
   -> ([%#span14] inv'1 y)  -> ([%#span15] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span17] inv'1 x)  -> ([%#span18] inv'1 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span21] inv'1 x)  -> ([%#span22] inv'1 y)  -> ([%#span23] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span24] cmp_log'0 x y
  = o)
   -> ([%#span25] cmp_log'0 y z = o)
   -> ([%#span26] inv'1 x)  -> ([%#span27] inv'1 y)  -> ([%#span28] inv'1 z)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span30] inv'1 x)
   -> ([%#span31] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'1 x)
   -> ([%#span33] inv'1 y)  -> ([%#span34] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'1 x)
   -> ([%#span36] inv'1 y)  -> ([%#span37] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span38] inv'1 x)
   -> ([%#span39] inv'1 y)  -> ([%#span40] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span41] inv'1 x)
   -> ([%#span42] inv'1 y)  -> ([%#span43] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use Core_Option_Option_Type as Option'0
  
  use map.Map
  
  predicate invariant'3 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span44] true
  
  predicate inv'3 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'3 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'3 x = true
  
  predicate invariant'2 (self : v)
  
  predicate inv'2 (_x : v)
  
  axiom inv'2 : forall x : v . inv'2 x = true
  
  predicate invariant'1 (self : deep_model_ty'0)
  
  axiom inv'1 : forall x : deep_model_ty'0 . inv'1 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'0 (self : Tree'0.t_tree k v) =
    [%#span44] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span47] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#sred_black_tree4] inv'0 self)
   -> ([%#sred_black_tree5] inv'3 accu)
   -> ([%#sred_black_tree6] inv'1 k)
   -> ([%#sred_black_tree7] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'2 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span48] (forall k : deep_model_ty'0, v : v . inv'1 k /\ inv'2 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'1 k /\ inv'2 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#sred_black_tree8] bst_invariant'0 self)
   -> ([%#sred_black_tree9] inv'0 self)
   -> ([%#sred_black_tree10] inv'3 accu)
   -> ([%#sred_black_tree11] inv'1 k)
   -> ([%#sred_black_tree12] forall v : v . inv'2 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span51] model_acc'0 self (Const.const (Option'0.C_None))
  
  constant self  : Tree'0.t_tree k v
  
  constant k  : deep_model_ty'0
  
  function has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
  
  goal vc_has_mapping_model : ([%#sred_black_tree2] inv'1 k)
   -> ([%#sred_black_tree1] inv'0 self)
   -> ([%#sred_black_tree0] bst_invariant'0 self)
   -> (([%#sred_black_tree6] inv'1 k)
  && ([%#sred_black_tree5] inv'3 (Const.const (Option'0.C_None))) && ([%#sred_black_tree4] inv'0 self))
  /\ (([%#sred_black_tree7] Map.get (model_acc'0 self (Const.const (Option'0.C_None))) k
  = Map.get (Const.const (Option'0.C_None)) k
  \/ (exists v : v . inv'2 v
  /\ Map.get (model_acc'0 self (Const.const (Option'0.C_None))) k = Option'0.C_Some v /\ has_mapping'0 self k v))
   -> (let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in (([%#sred_black_tree11] inv'1 k)
  && ([%#sred_black_tree10] inv'3 (Const.const (Option'0.C_None)))
  && ([%#sred_black_tree9] inv'0 self) && ([%#sred_black_tree8] bst_invariant'0 self))
  /\ (([%#sred_black_tree12] forall v : v . inv'2 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self (Const.const (Option'0.C_None))) k = Option'0.C_Some v)
   -> ([%#sred_black_tree3] forall v : v . inv'2 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'0 self) k = Option'0.C_Some v)))))
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 121 15 121 35
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 122 15 122 38
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 123 15 123 38
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 125 23 125 27
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 125 29 125 30
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 125 48 125 50
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 125 55 125 57
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 124 14 124 22
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 108 15 108 35
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 110 25 110 29
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 110 31 110 32
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span44 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span45 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span46 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span47 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span48 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span49 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span50 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span51 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span52 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span53 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span54 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span55 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span56 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span57 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span58 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span59 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span60 = "../red_black_tree.rs" 115 12 115 61
  
  use Core_Option_Option_Type as Option'0
  
  type deep_model_ty'0
  
  use map.Map
  
  predicate invariant'3 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span12] true
  
  predicate inv'3 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'3 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'3 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'1 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span13] inv'1 x)
   -> ([%#span14] inv'1 y)  -> ([%#span15] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span17] inv'1 x)  -> ([%#span18] inv'1 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span21] inv'1 x)  -> ([%#span22] inv'1 y)  -> ([%#span23] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span24] cmp_log'0 x y
  = o)
   -> ([%#span25] cmp_log'0 y z = o)
   -> ([%#span26] inv'1 x)  -> ([%#span27] inv'1 y)  -> ([%#span28] inv'1 z)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span30] inv'1 x)
   -> ([%#span31] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'1 x)
   -> ([%#span33] inv'1 y)  -> ([%#span34] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'1 x)
   -> ([%#span36] inv'1 y)  -> ([%#span37] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span38] inv'1 x)
   -> ([%#span39] inv'1 y)  -> ([%#span40] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span41] inv'1 x)
   -> ([%#span42] inv'1 y)  -> ([%#span43] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'2 (self : v)
  
  predicate inv'2 (_x : v)
  
  axiom inv'2 : forall x : v . inv'2 x = true
  
  predicate invariant'1 (self : deep_model_ty'0)
  
  axiom inv'1 : forall x : deep_model_ty'0 . inv'1 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'0 (self : Tree'0.t_tree k v) =
    [%#span12] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use map.Map
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  use RedBlackTree_Node_Type as Node'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span44] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span45] model_acc'0 self (Const.const (Option'0.C_None))
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span51] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span47] inv'0 self)
   -> ([%#span48] inv'3 accu)
   -> ([%#span49] inv'1 k)
   -> ([%#span50] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'2 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span52] (forall k : deep_model_ty'0, v : v . inv'1 k /\ inv'2 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'1 k /\ inv'2 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span53] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span59] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span54] bst_invariant'0 self)
   -> ([%#span55] inv'0 self)
   -> ([%#span56] inv'3 accu)
   -> ([%#span57] inv'1 k)
   -> ([%#span58] forall v : v . inv'2 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span60] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#sred_black_tree8] bst_invariant'0 self)
   -> ([%#sred_black_tree9] inv'0 self)
   -> ([%#sred_black_tree10] inv'1 k)
   -> ([%#sred_black_tree11] forall v : v . inv'2 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
  
  constant self  : Tree'0.t_tree k v
  
  constant k  : deep_model_ty'0
  
  constant v1  : v
  
  constant v2  : v
  
  function has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v1 : v) (v2 : v) : ()
    
  
  goal vc_has_mapping_inj : ([%#sred_black_tree6] inv'2 v2)
   -> ([%#sred_black_tree5] inv'2 v1)
   -> ([%#sred_black_tree4] inv'1 k)
   -> ([%#sred_black_tree3] inv'0 self)
   -> ([%#sred_black_tree2] has_mapping'0 self k v2)
   -> ([%#sred_black_tree1] has_mapping'0 self k v1)
   -> ([%#sred_black_tree0] bst_invariant'0 self)
   -> (([%#sred_black_tree10] inv'1 k)
  && ([%#sred_black_tree9] inv'0 self) && ([%#sred_black_tree8] bst_invariant'0 self))
  /\ (([%#sred_black_tree11] forall v : v . inv'2 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
   -> (let _ = has_mapping_model'0 self k in match Map.get (shallow_model'0 self) k with
    | Option'0.C_None -> [%#sred_black_tree7] v1 = v2
    | Option'0.C_Some _v -> [%#sred_black_tree7] v1 = v2
    end))
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module RedBlackTree_Impl1_HasMapping_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 140 19 140 23
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 140 25 140 26
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 140 44 140 45
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../red_black_tree.rs" 33 12 37 13
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'3 (self : Node'0.t_node k v) =
    [%#span4] true
  
  predicate inv'3 (_x : Node'0.t_node k v)
  
  axiom inv'3 : forall x : Node'0.t_node k v . inv'3 x = true
  
  predicate invariant'2 (self : v)
  
  predicate inv'2 (_x : v)
  
  axiom inv'2 : forall x : v . inv'2 x = true
  
  type deep_model_ty'0
  
  predicate invariant'1 (self : deep_model_ty'0)
  
  predicate inv'1 (_x : deep_model_ty'0)
  
  axiom inv'1 : forall x : deep_model_ty'0 . inv'1 x = true
  
  predicate invariant'0 (self : Node'0.t_node k v) =
    [%#span4] true
  
  predicate inv'0 (_x : Node'0.t_node k v)
  
  axiom inv'0 : forall x : Node'0.t_node k v . inv'0 x = true
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  use Core_Option_Option_Type as Option'0
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span5] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  constant self  : Node'0.t_node k v
  
  constant k  : deep_model_ty'0
  
  constant v  : v
  
  predicate has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
  
  goal vc_has_mapping : ([%#sred_black_tree2] inv'2 v)
   -> ([%#sred_black_tree1] inv'1 k)
   -> ([%#sred_black_tree0] inv'0 self)
   -> (if k = deep_model'0 (RedBlackTree_Node_Type.node_key self) then
    [%#sred_black_tree3] forall node : Node'0.t_node k v . inv'3 node
     -> self = node
     -> ((has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v)
    \/ v = RedBlackTree_Node_Type.node_val self)
    = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  else
    [%#sred_black_tree3] forall node : Node'0.t_node k v . inv'3 node
     -> self = node
     -> ((has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v)
    \/ false)
    = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  )
end
module RedBlackTree_Cp_Type
  use RedBlackTree_Color_Type as Color'0
  
  type t_cp  =
    | C_CPL (Color'0.t_color)
    | C_CPN (Color'0.t_color) (t_cp) (t_cp)
  
  function any_l (_ : 'b) : 'a
  
  let rec cpl (input:t_cp) (ret  (field_0:Color'0.t_color))= any
    [ good (field_0:Color'0.t_color)-> {C_CPL field_0 = input} (! ret {field_0})
    | bad (field_0:Color'0.t_color)-> {C_CPL field_0 <> input} {false} any ]
    
  
  let rec cpn (input:t_cp) (ret  (field_0:Color'0.t_color) (field_1:t_cp) (field_2:t_cp))= any
    [ good (field_0:Color'0.t_color) (field_1:t_cp) (field_2:t_cp)-> {C_CPN field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad (field_0:Color'0.t_color) (field_1:t_cp) (field_2:t_cp)-> {C_CPN field_0 field_1 field_2 <> input}
      {false}
      any ]
    
end
module RedBlackTree_Impl9_Height_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 296 14 296 18
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'0 (self : Tree'0.t_tree k v) =
    [%#span2] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Int
  
  constant self  : Tree'0.t_tree k v
  
  function height [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int
  
  goal vc_height : ([%#sred_black_tree0] inv'0 self)
   -> match self with
    | Tree'0.C_Tree (Option'0.C_None) -> [%#sred_black_tree1] 0 >= 0
    | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
      | Color'0.C_Red -> ([%#sred_black_tree0] inv'0 left)
      /\ (([%#sred_black_tree1] height left >= 0)  -> ([%#sred_black_tree1] height left >= 0))
      | Color'0.C_Black -> ([%#sred_black_tree0] inv'0 left)
      /\ (([%#sred_black_tree1] height left >= 0)  -> ([%#sred_black_tree1] height left + 1 >= 0))
      end
    end
end
module RedBlackTree_Impl10_Height_Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 328 14 328 18
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 326 4 327 77
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 296 14 296 18
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../red_black_tree.rs" 298 12 306 13
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'2 (self : Tree'0.t_tree k v) =
    [%#span4] true
  
  predicate inv'2 (_x : Tree'0.t_tree k v)
  
  axiom inv'2 : forall x : Tree'0.t_tree k v . inv'2 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'1 (self : Node'0.t_node k v) =
    [%#span4] true
  
  predicate inv'1 (_x : Node'0.t_node k v)
  
  axiom inv'1 : forall x : Node'0.t_node k v . inv'1 x = true
  
  predicate invariant'0 (self : Node'0.t_node k v) =
    [%#span4] true
  
  predicate inv'0 (_x : Node'0.t_node k v)
  
  axiom inv'0 : forall x : Node'0.t_node k v . inv'0 x = true
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span5] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#sred_black_tree2] inv'2 self)
   -> ([%#sred_black_tree3] height'0 self >= 0)
  
  constant self  : Node'0.t_node k v
  
  function height [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int
  
  goal vc_height : ([%#sred_black_tree0] inv'0 self)
   -> match RedBlackTree_Node_Type.node_color self with
    | Color'0.C_Red -> ([%#sred_black_tree2] inv'2 (RedBlackTree_Node_Type.node_left self))
    /\ (([%#sred_black_tree3] height'0 (RedBlackTree_Node_Type.node_left self) >= 0)
     -> ([%#sred_black_tree1] forall node : Node'0.t_node k v . inv'1 node
     -> self = node
     -> height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (Tree'0.C_Tree (Option'0.C_Some node))))
    | Color'0.C_Black -> ([%#sred_black_tree2] inv'2 (RedBlackTree_Node_Type.node_left self))
    /\ (([%#sred_black_tree3] height'0 (RedBlackTree_Node_Type.node_left self) >= 0)
     -> ([%#sred_black_tree1] forall node : Node'0.t_node k v . inv'1 node
     -> self = node
     -> height'0 (RedBlackTree_Node_Type.node_left self) + 1 = height'0 (Tree'0.C_Tree (Option'0.C_Some node))))
    end
end
module RedBlackTree_Impl13_IsRed
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 391 17 391 22
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 390 49 390 53
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 388 15 388 19
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span6 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'0 (self : Tree'0.t_tree k v) =
    [%#span4] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span5] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : Tree'0.t_tree k v) =
    [%#span6] true
  
  let rec is_red (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[%#sred_black_tree2] inv'0 self}
    (! bb0
    [ bb0 = Tree'0.t_tree <k> <v> {self}
        (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
          any
          [ br0 -> {rnode'0 = Option'0.C_None } (! bb6)
          | br1 (a:Node'0.t_node k v)-> {rnode'0 = Option'0.C_Some a} (! bb2) ]
          )
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb1 ] 
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = Tree'0.t_tree <k> <v> {self}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Option'0.some <Node'0.t_node k v> {rnode'0}
              (fun (r0'0:Node'0.t_node k v) ->
                Node'0.t_node <k> <v> {r0'0}
                  (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                    any
                    [ br0 -> {rcolor'0 = Color'0.C_Red } (! bb3) | br1 -> {rcolor'0 = Color'0.C_Black } (! bb1) ]
                    ))) ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [%#sred_black_tree0] false ] s1 | s1 = bb5 ] 
    | bb3 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- [%#sred_black_tree1] true ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & self : Tree'0.t_tree k v = self ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sred_black_tree3] result = (color'0 self = Color'0.C_Red)}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl14_RotateRight
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 413 23 413 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 441 8 441 90
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 400 15 400 43
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 401 15 401 42
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 412 25 412 29
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 402 14 402 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 403 14 403 42
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 404 14 404 50
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 405 14 405 65
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 406 14 406 42
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 407 14 407 44
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 408 4 411 36
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span44 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span45 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span46 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span47 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span48 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span49 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span50 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span51 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span52 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span53 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span54 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span55 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span56 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span57 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span58 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span59 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span60 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span61 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span62 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span63 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span64 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span65 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span66 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span70 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span71 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span72 = "" 0 0 0 0
  
  let%span span73 = "" 0 0 0 0
  
  let%span span74 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span77 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span78 = "" 0 0 0 0
  
  predicate invariant'11 (self : v)
  
  predicate inv'11 (_x : v)
  
  axiom inv'11 : forall x : v . inv'11 x = true
  
  type deep_model_ty'0
  
  predicate invariant'10 (self : deep_model_ty'0)
  
  predicate inv'10 (_x : deep_model_ty'0)
  
  axiom inv'10 : forall x : deep_model_ty'0 . inv'10 x = true
  
  use RedBlackTree_Color_Type as Color'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed (Color'0.t_color)) =
    [%#span12] true
  
  predicate inv'9 (_x : borrowed (Color'0.t_color))
  
  axiom inv'9 : forall x : borrowed (Color'0.t_color) . inv'9 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span13] inv'10 x)
   -> ([%#span14] inv'10 y)  -> ([%#span15] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span17] inv'10 x)  -> ([%#span18] inv'10 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span21] inv'10 x)  -> ([%#span22] inv'10 y)  -> ([%#span23] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span24] cmp_log'0 x y
  = o)
   -> ([%#span25] cmp_log'0 y z = o)
   -> ([%#span26] inv'10 x)  -> ([%#span27] inv'10 y)  -> ([%#span28] inv'10 z)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span30] inv'10 x)
   -> ([%#span31] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'10 x)
   -> ([%#span33] inv'10 y)  -> ([%#span34] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'10 x)
   -> ([%#span36] inv'10 y)  -> ([%#span37] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span38] inv'10 x)
   -> ([%#span39] inv'10 y)  -> ([%#span40] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span41] inv'10 x)
   -> ([%#span42] inv'10 y)  -> ([%#span43] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'8 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'8 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'8 : forall x : borrowed (Node'0.t_node k v) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'7 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'7 : forall x : borrowed (Node'0.t_node k v) . inv'7 x = true
  
  predicate invariant'6 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'6 (_x : Node'0.t_node k v)
  
  axiom inv'6 : forall x : Node'0.t_node k v . inv'6 x = true
  
  predicate invariant'5 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'5 (_x : Node'0.t_node k v)
  
  axiom inv'5 : forall x : Node'0.t_node k v . inv'5 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'4 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span12] true
  
  predicate inv'4 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'4 : forall x : borrowed (Tree'0.t_tree k v) . inv'4 x = true
  
  predicate invariant'3 (self : Tree'0.t_tree k v) =
    [%#span12] true
  
  predicate inv'3 (_x : Tree'0.t_tree k v)
  
  axiom inv'3 : forall x : Tree'0.t_tree k v . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'2 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'2 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'2 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'1 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'1 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Node'0.t_node k v)))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Node'0.t_node k v)) . inv'0 x = true
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_tree k v . ([%#span44] inv'3 self)  -> ([%#span45] height'1 self >= 0)
  
  function height'0 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span49] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'1 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_node k v . ([%#span47] inv'5 self)
   -> ([%#span48] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span55] has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span51] inv'5 self)
   -> ([%#span52] inv'10 k)
   -> ([%#span53] inv'11 v)
   -> ([%#span54] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span56] forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'11 v  -> has_mapping'1 self k v = has_mapping'1 o k v
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span57] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span58] height'1 (RedBlackTree_Node_Type.node_left self) = height'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span59] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span60] height_invariant_here'0 self
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span61] (forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'11 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'11 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span62] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span63] bst_invariant_here'0 self
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span64] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : borrowed (Node'0.t_node k v)) =
    [%#span65] self.final = self.current
  
  predicate resolve'5 (self : Tree'0.t_tree k v) =
    [%#span66] true
  
  use prelude.prelude.Snapshot
  
  predicate resolve'4 (self : borrowed (Color'0.t_color)) =
    [%#span65] self.final = self.current
  
  let rec swap'2 (x:borrowed (Color'0.t_color)) (y:borrowed (Color'0.t_color)) (return'  (ret:()))= {[@expl:precondition] [%#span68] inv'9 y}
    {[@expl:precondition] [%#span67] inv'9 x}
    any
    [ return' (result:())-> {[%#span70] y.final = x.current} {[%#span69] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span65] self.final = self.current
  
  let rec swap'1 (x:borrowed (Node'0.t_node k v)) (y:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span68] inv'8 y}
    {[@expl:precondition] [%#span67] inv'8 x}
    any
    [ return' (result:())-> {[%#span70] y.final = x.current} {[%#span69] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span65] self.final = self.current
  
  let rec swap'0 (x:borrowed (Tree'0.t_tree k v)) (y:borrowed (Tree'0.t_tree k v)) (return'  (ret:()))= {[@expl:precondition] [%#span68] inv'4 y}
    {[@expl:precondition] [%#span67] inv'4 x}
    any
    [ return' (result:())-> {[%#span70] y.final = x.current} {[%#span69] x.final = y.current} (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span72] inv'1 self}
    {[@expl:precondition] [%#span71] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span73] inv'6 result}
      {[%#span71] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span65] self.final = self.current
  
  predicate is_default'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span74] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span75] inv'2 dest}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span78] inv'1 result}
      {[%#span77] is_default'0 dest.final}
      {[%#span76] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Node'0.t_node k v))) =
    [%#span66] true
  
  use prelude.prelude.Snapshot
  
  let rec rotate_right (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'8 self}
    {[%#sred_black_tree3] color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red}
    {[%#sred_black_tree2] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#sred_black_tree0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_self} s1
      | s1 = -{resolve'0 old_self}- s2
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_16 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _16.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s3)))))
      | s3 = -{inv'1 _16.final}- s4
      | s4 = Borrow.borrow_final <Option'0.t_option (Node'0.t_node k v)> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
             [ &_15 <- _ret' ] 
             [ &_16 <- { _16 with current = _15.final ; } ] 
            s5)
      | s5 = -{inv'1 _15.final}- s6
      | s6 = take'0 {_15} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_14 <- _ret' ] s7)
      | s7 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'2 _16} s1
      | s1 = -{resolve'1 _16}- s2
      | s2 = unwrap'0 {_14} (fun (_ret':Node'0.t_node k v) ->  [ &x <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_19 <- _ret' ] 
                Node'0.t_node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node _19.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'3 _19.final}- s2
      | s2 = Borrow.borrow_final <Tree'0.t_tree k v> {_19.current} {Borrow.get_id _19}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_18 <- _ret' ] 
             [ &_19 <- { _19 with current = _18.final ; } ] 
            s3)
      | s3 = -{inv'3 _18.final}- s4
      | s4 = Node'0.t_node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'1}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_21 <- _ret' ] 
                Node'0.t_node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                     [ &x <- Node'0.C_Node l_left'1 l_color'1 l_key'1 l_val'1 _21.final ] 
                    s5)))
      | s5 = -{inv'3 _21.final}- s6
      | s6 = Borrow.borrow_final <Tree'0.t_tree k v> {_21.current} {Borrow.get_id _21}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = _20.final ; } ] 
            s7)
      | s7 = -{inv'3 _20.final}- s8
      | s8 = swap'0 {_18} {_20} (fun (_ret':()) ->  [ &_17 <- _ret' ] s9)
      | s9 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'4 _21} s1
      | s1 = -{resolve'2 _21}- s2
      | s2 = {[@expl:type invariant] inv'4 _19} s3
      | s3 = -{resolve'2 _19}- s4
      | s4 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_23 <- _ret' ] 
             [ &self <- { self with current = _23.final ; } ] 
            s5)
      | s5 = -{inv'5 _23.final}- s6
      | s6 = Borrow.borrow_mut <Node'0.t_node k v> {x}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_25 <- _ret' ]  [ &x <- _25.final ] s7)
      | s7 = -{inv'6 _25.final}- s8
      | s8 = Borrow.borrow_mut <Node'0.t_node k v> {_25.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_24 <- _ret' ] 
             [ &_25 <- { _25 with current = _24.final ; } ] 
            s9)
      | s9 = -{inv'5 _24.final}- s10
      | s10 = swap'1 {_23} {_24} (fun (_ret':()) ->  [ &_22 <- _ret' ] s11)
      | s11 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'7 _25} s1
      | s1 = -{resolve'3 _25}- s2
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_final <Color'0.t_color> {rcolor'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Color'0.t_color)) ->
                 [ &_28 <- _ret' ] 
                Node'0.t_node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'0 _28.final l_key'0 l_val'0 l_right'0 ; } ] 
                    s3)))
      | s3 = Borrow.borrow_final <Color'0.t_color> {_28.current} {Borrow.get_id _28}
          (fun (_ret':borrowed (Color'0.t_color)) ->
             [ &_27 <- _ret' ] 
             [ &_28 <- { _28 with current = _27.final ; } ] 
            s4)
      | s4 = Node'0.t_node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Color'0.t_color> {rcolor'1}
              (fun (_ret':borrowed (Color'0.t_color)) ->
                 [ &_30 <- _ret' ] 
                Node'0.t_node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                     [ &x <- Node'0.C_Node l_left'1 _30.final l_key'1 l_val'1 l_right'1 ] 
                    s5)))
      | s5 = Borrow.borrow_final <Color'0.t_color> {_30.current} {Borrow.get_id _30}
          (fun (_ret':borrowed (Color'0.t_color)) ->
             [ &_29 <- _ret' ] 
             [ &_30 <- { _30 with current = _29.final ; } ] 
            s6)
      | s6 = swap'2 {_27} {_29} (fun (_ret':()) ->  [ &_26 <- _ret' ] s7)
      | s7 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'4 _30}- s1
      | s1 = -{resolve'4 _28}- s2
      | s2 = {[@expl:assertion] [%#sred_black_tree1] has_mapping'0 (RedBlackTree_Node_Type.node_left (Snapshot.inner old_self).current) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) (RedBlackTree_Node_Type.node_val self.current)}
        s3
      | s3 =  [ &_34 <- Option'0.C_Some x ] (any [ any_ (_any:Node'0.t_node k v)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &_33 <- Tree'0.C_Tree _34 ] 
        (any [ any_ (_any:Option'0.t_option (Node'0.t_node k v))-> (!  [ &_34 <- _any ] s1) ] )
      | s1 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _33 ; } ] 
            (any [ any_ (_any:Tree'0.t_tree k v)-> (!  [ &_33 <- _any ] s1) ] ))
      | s1 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            {[@expl:type invariant] inv'3 rright'0}
            s2)
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            -{resolve'5 rright'1}-
            s3)
      | s3 = {[@expl:type invariant] inv'8 self} s4
      | s4 = -{resolve'6 self}- s5
      | s5 = bb11 ]
      
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_node k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (Node'0.t_node k v)) = any_l ()
    | & x : Node'0.t_node k v = any_l ()
    | & _14 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _15 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _16 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _17 : () = any_l ()
    | & _18 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _19 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _20 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _21 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _22 : () = any_l ()
    | & _23 : borrowed (Node'0.t_node k v) = any_l ()
    | & _24 : borrowed (Node'0.t_node k v) = any_l ()
    | & _25 : borrowed (Node'0.t_node k v) = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Color'0.t_color) = any_l ()
    | & _28 : borrowed (Color'0.t_color) = any_l ()
    | & _29 : borrowed (Color'0.t_color) = any_l ()
    | & _30 : borrowed (Color'0.t_color) = any_l ()
    | & _33 : Tree'0.t_tree k v = any_l ()
    | & _34 : Option'0.t_option (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree11] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'6 l
      /\ inv'6 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r
      /\ (RedBlackTree_Node_Type.node_left self.final, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.current)
      /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key self.current}
      {[@expl:postcondition] [%#sred_black_tree10] RedBlackTree_Node_Type.node_color self.final
      = RedBlackTree_Node_Type.node_color self.current}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 (RedBlackTree_Node_Type.node_right self.final)
      = Color'0.C_Red}
      {[@expl:postcondition] [%#sred_black_tree8] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.final)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))}
      {[@expl:postcondition] [%#sred_black_tree7] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl14_RotateLeft
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 463 23 463 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 468 8 468 91
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 450 15 450 43
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 451 15 451 43
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 462 24 462 28
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 452 14 452 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 453 14 453 42
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 454 14 454 50
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 455 14 455 65
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 456 14 456 41
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 457 14 457 44
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 458 4 461 36
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span44 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span45 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span46 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span47 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span48 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span49 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span50 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span51 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span52 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span53 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span54 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span55 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span56 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span57 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span58 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span59 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span60 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span61 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span62 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span63 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span64 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span65 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span66 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span70 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span71 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span72 = "" 0 0 0 0
  
  let%span span73 = "" 0 0 0 0
  
  let%span span74 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span77 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span78 = "" 0 0 0 0
  
  predicate invariant'11 (self : v)
  
  predicate inv'11 (_x : v)
  
  axiom inv'11 : forall x : v . inv'11 x = true
  
  type deep_model_ty'0
  
  predicate invariant'10 (self : deep_model_ty'0)
  
  predicate inv'10 (_x : deep_model_ty'0)
  
  axiom inv'10 : forall x : deep_model_ty'0 . inv'10 x = true
  
  use RedBlackTree_Color_Type as Color'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed (Color'0.t_color)) =
    [%#span12] true
  
  predicate inv'9 (_x : borrowed (Color'0.t_color))
  
  axiom inv'9 : forall x : borrowed (Color'0.t_color) . inv'9 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span13] inv'10 x)
   -> ([%#span14] inv'10 y)  -> ([%#span15] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span17] inv'10 x)  -> ([%#span18] inv'10 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span21] inv'10 x)  -> ([%#span22] inv'10 y)  -> ([%#span23] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span24] cmp_log'0 x y
  = o)
   -> ([%#span25] cmp_log'0 y z = o)
   -> ([%#span26] inv'10 x)  -> ([%#span27] inv'10 y)  -> ([%#span28] inv'10 z)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span30] inv'10 x)
   -> ([%#span31] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'10 x)
   -> ([%#span33] inv'10 y)  -> ([%#span34] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'10 x)
   -> ([%#span36] inv'10 y)  -> ([%#span37] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span38] inv'10 x)
   -> ([%#span39] inv'10 y)  -> ([%#span40] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span41] inv'10 x)
   -> ([%#span42] inv'10 y)  -> ([%#span43] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'8 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'8 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'8 : forall x : borrowed (Node'0.t_node k v) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'7 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'7 : forall x : borrowed (Node'0.t_node k v) . inv'7 x = true
  
  predicate invariant'6 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'6 (_x : Node'0.t_node k v)
  
  axiom inv'6 : forall x : Node'0.t_node k v . inv'6 x = true
  
  predicate invariant'5 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'5 (_x : Node'0.t_node k v)
  
  axiom inv'5 : forall x : Node'0.t_node k v . inv'5 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'4 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span12] true
  
  predicate inv'4 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'4 : forall x : borrowed (Tree'0.t_tree k v) . inv'4 x = true
  
  predicate invariant'3 (self : Tree'0.t_tree k v) =
    [%#span12] true
  
  predicate inv'3 (_x : Tree'0.t_tree k v)
  
  axiom inv'3 : forall x : Tree'0.t_tree k v . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'2 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'2 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'2 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'1 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'1 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Node'0.t_node k v)))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Node'0.t_node k v)) . inv'0 x = true
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_tree k v . ([%#span44] inv'3 self)  -> ([%#span45] height'1 self >= 0)
  
  function height'0 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span49] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'1 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_node k v . ([%#span47] inv'5 self)
   -> ([%#span48] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span55] has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span51] inv'5 self)
   -> ([%#span52] inv'10 k)
   -> ([%#span53] inv'11 v)
   -> ([%#span54] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span56] forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'11 v  -> has_mapping'1 self k v = has_mapping'1 o k v
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span57] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span58] height'1 (RedBlackTree_Node_Type.node_left self) = height'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span59] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span60] height_invariant_here'0 self
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span61] (forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'11 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'11 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span62] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span63] bst_invariant_here'0 self
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span64] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : borrowed (Node'0.t_node k v)) =
    [%#span65] self.final = self.current
  
  predicate resolve'5 (self : Tree'0.t_tree k v) =
    [%#span66] true
  
  use prelude.prelude.Snapshot
  
  predicate resolve'4 (self : borrowed (Color'0.t_color)) =
    [%#span65] self.final = self.current
  
  let rec swap'2 (x:borrowed (Color'0.t_color)) (y:borrowed (Color'0.t_color)) (return'  (ret:()))= {[@expl:precondition] [%#span68] inv'9 y}
    {[@expl:precondition] [%#span67] inv'9 x}
    any
    [ return' (result:())-> {[%#span70] y.final = x.current} {[%#span69] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span65] self.final = self.current
  
  let rec swap'1 (x:borrowed (Node'0.t_node k v)) (y:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span68] inv'8 y}
    {[@expl:precondition] [%#span67] inv'8 x}
    any
    [ return' (result:())-> {[%#span70] y.final = x.current} {[%#span69] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span65] self.final = self.current
  
  let rec swap'0 (x:borrowed (Tree'0.t_tree k v)) (y:borrowed (Tree'0.t_tree k v)) (return'  (ret:()))= {[@expl:precondition] [%#span68] inv'4 y}
    {[@expl:precondition] [%#span67] inv'4 x}
    any
    [ return' (result:())-> {[%#span70] y.final = x.current} {[%#span69] x.final = y.current} (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span72] inv'1 self}
    {[@expl:precondition] [%#span71] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span73] inv'6 result}
      {[%#span71] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span65] self.final = self.current
  
  predicate is_default'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span74] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span75] inv'2 dest}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span78] inv'1 result}
      {[%#span77] is_default'0 dest.final}
      {[%#span76] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Node'0.t_node k v))) =
    [%#span66] true
  
  use prelude.prelude.Snapshot
  
  let rec rotate_left (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'8 self}
    {[%#sred_black_tree3] color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red}
    {[%#sred_black_tree2] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#sred_black_tree0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_self} s1
      | s1 = -{resolve'0 old_self}- s2
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_16 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _16.final) ; } ]
                            
                            s3)))))
      | s3 = -{inv'1 _16.final}- s4
      | s4 = Borrow.borrow_final <Option'0.t_option (Node'0.t_node k v)> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
             [ &_15 <- _ret' ] 
             [ &_16 <- { _16 with current = _15.final ; } ] 
            s5)
      | s5 = -{inv'1 _15.final}- s6
      | s6 = take'0 {_15} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_14 <- _ret' ] s7)
      | s7 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'2 _16} s1
      | s1 = -{resolve'1 _16}- s2
      | s2 = unwrap'0 {_14} (fun (_ret':Node'0.t_node k v) ->  [ &x <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_19 <- _ret' ] 
                Node'0.t_node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _19.final ; } ] 
                    s1)))
      | s1 = -{inv'3 _19.final}- s2
      | s2 = Borrow.borrow_final <Tree'0.t_tree k v> {_19.current} {Borrow.get_id _19}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_18 <- _ret' ] 
             [ &_19 <- { _19 with current = _18.final ; } ] 
            s3)
      | s3 = -{inv'3 _18.final}- s4
      | s4 = Node'0.t_node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rleft'1}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_21 <- _ret' ] 
                Node'0.t_node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                     [ &x <- Node'0.C_Node _21.final l_color'1 l_key'1 l_val'1 l_right'1 ] 
                    s5)))
      | s5 = -{inv'3 _21.final}- s6
      | s6 = Borrow.borrow_final <Tree'0.t_tree k v> {_21.current} {Borrow.get_id _21}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = _20.final ; } ] 
            s7)
      | s7 = -{inv'3 _20.final}- s8
      | s8 = swap'0 {_18} {_20} (fun (_ret':()) ->  [ &_17 <- _ret' ] s9)
      | s9 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'4 _21} s1
      | s1 = -{resolve'2 _21}- s2
      | s2 = {[@expl:type invariant] inv'4 _19} s3
      | s3 = -{resolve'2 _19}- s4
      | s4 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_23 <- _ret' ] 
             [ &self <- { self with current = _23.final ; } ] 
            s5)
      | s5 = -{inv'5 _23.final}- s6
      | s6 = Borrow.borrow_mut <Node'0.t_node k v> {x}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_25 <- _ret' ]  [ &x <- _25.final ] s7)
      | s7 = -{inv'6 _25.final}- s8
      | s8 = Borrow.borrow_mut <Node'0.t_node k v> {_25.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_24 <- _ret' ] 
             [ &_25 <- { _25 with current = _24.final ; } ] 
            s9)
      | s9 = -{inv'5 _24.final}- s10
      | s10 = swap'1 {_23} {_24} (fun (_ret':()) ->  [ &_22 <- _ret' ] s11)
      | s11 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'7 _25} s1
      | s1 = -{resolve'3 _25}- s2
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_final <Color'0.t_color> {rcolor'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Color'0.t_color)) ->
                 [ &_28 <- _ret' ] 
                Node'0.t_node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'0 _28.final l_key'0 l_val'0 l_right'0 ; } ] 
                    s3)))
      | s3 = Borrow.borrow_final <Color'0.t_color> {_28.current} {Borrow.get_id _28}
          (fun (_ret':borrowed (Color'0.t_color)) ->
             [ &_27 <- _ret' ] 
             [ &_28 <- { _28 with current = _27.final ; } ] 
            s4)
      | s4 = Node'0.t_node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Color'0.t_color> {rcolor'1}
              (fun (_ret':borrowed (Color'0.t_color)) ->
                 [ &_30 <- _ret' ] 
                Node'0.t_node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                     [ &x <- Node'0.C_Node l_left'1 _30.final l_key'1 l_val'1 l_right'1 ] 
                    s5)))
      | s5 = Borrow.borrow_final <Color'0.t_color> {_30.current} {Borrow.get_id _30}
          (fun (_ret':borrowed (Color'0.t_color)) ->
             [ &_29 <- _ret' ] 
             [ &_30 <- { _30 with current = _29.final ; } ] 
            s6)
      | s6 = swap'2 {_27} {_29} (fun (_ret':()) ->  [ &_26 <- _ret' ] s7)
      | s7 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'4 _30}- s1
      | s1 = -{resolve'4 _28}- s2
      | s2 = {[@expl:assertion] [%#sred_black_tree1] has_mapping'0 (RedBlackTree_Node_Type.node_right (Snapshot.inner old_self).current) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) (RedBlackTree_Node_Type.node_val self.current)}
        s3
      | s3 =  [ &_34 <- Option'0.C_Some x ] (any [ any_ (_any:Node'0.t_node k v)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &_33 <- Tree'0.C_Tree _34 ] 
        (any [ any_ (_any:Option'0.t_option (Node'0.t_node k v))-> (!  [ &_34 <- _any ] s1) ] )
      | s1 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &self <- { self with current = Node'0.C_Node _33 l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Tree'0.t_tree k v)-> (!  [ &_33 <- _any ] s1) ] ))
      | s1 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            {[@expl:type invariant] inv'3 rleft'0}
            s2)
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            -{resolve'5 rleft'1}-
            s3)
      | s3 = {[@expl:type invariant] inv'8 self} s4
      | s4 = -{resolve'6 self}- s5
      | s5 = bb11 ]
      
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_node k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (Node'0.t_node k v)) = any_l ()
    | & x : Node'0.t_node k v = any_l ()
    | & _14 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _15 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _16 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _17 : () = any_l ()
    | & _18 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _19 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _20 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _21 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _22 : () = any_l ()
    | & _23 : borrowed (Node'0.t_node k v) = any_l ()
    | & _24 : borrowed (Node'0.t_node k v) = any_l ()
    | & _25 : borrowed (Node'0.t_node k v) = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Color'0.t_color) = any_l ()
    | & _28 : borrowed (Color'0.t_color) = any_l ()
    | & _29 : borrowed (Color'0.t_color) = any_l ()
    | & _30 : borrowed (Color'0.t_color) = any_l ()
    | & _33 : Tree'0.t_tree k v = any_l ()
    | & _34 : Option'0.t_option (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree11] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'6 l
      /\ inv'6 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l
      /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.final)
      = (RedBlackTree_Node_Type.node_left self.current, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key self.current}
      {[@expl:postcondition] [%#sred_black_tree10] RedBlackTree_Node_Type.node_color self.final
      = RedBlackTree_Node_Type.node_color self.current}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 (RedBlackTree_Node_Type.node_left self.final) = Color'0.C_Red}
      {[@expl:postcondition] [%#sred_black_tree8] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.final))}
      {[@expl:postcondition] [%#sred_black_tree7] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl14_FlipColors
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 472 15 472 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 473 15 473 40
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 474 15 474 41
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 475 15 475 60
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 486 24 486 28
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 476 14 476 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 477 14 477 50
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 478 14 478 42
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 479 14 479 40
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 480 4 482 70
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 483 4 485 90
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span42 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span43 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span44 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span45 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span46 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span47 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span48 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span49 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span50 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span51 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span52 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span53 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span54 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span55 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span56 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span57 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span58 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span59 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span60 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span61 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span62 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span63 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span64 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span65 = "" 0 0 0 0
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span68 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span69 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "" 0 0 0 0
  
  let%span span72 = "" 0 0 0 0
  
  let%span span73 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span74 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span75 = "" 0 0 0 0
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'8 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span11] inv'8 x)
   -> ([%#span12] inv'8 y)  -> ([%#span13] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span15] inv'8 x)  -> ([%#span16] inv'8 y)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span19] inv'8 x)  -> ([%#span20] inv'8 y)  -> ([%#span21] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span22] cmp_log'0 x y
  = o)
   -> ([%#span23] cmp_log'0 y z = o)
   -> ([%#span24] inv'8 x)  -> ([%#span25] inv'8 y)  -> ([%#span26] inv'8 z)  -> ([%#span27] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span28] inv'8 x)
   -> ([%#span29] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span30] inv'8 x)
   -> ([%#span31] inv'8 y)  -> ([%#span32] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span33] inv'8 x)
   -> ([%#span34] inv'8 y)  -> ([%#span35] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span36] inv'8 x)
   -> ([%#span37] inv'8 y)  -> ([%#span38] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span39] inv'8 x)
   -> ([%#span40] inv'8 y)  -> ([%#span41] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'10 (self : Tree'0.t_tree k v) =
    [%#span42] true
  
  predicate inv'10 (_x : Tree'0.t_tree k v)
  
  axiom inv'10 : forall x : Tree'0.t_tree k v . inv'10 x = true
  
  predicate invariant'9 (self : v)
  
  predicate inv'9 (_x : v)
  
  axiom inv'9 : forall x : v . inv'9 x = true
  
  predicate invariant'8 (self : deep_model_ty'0)
  
  axiom inv'8 : forall x : deep_model_ty'0 . inv'8 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'7 (self : Node'0.t_node k v) =
    [%#span42] true
  
  predicate inv'7 (_x : Node'0.t_node k v)
  
  axiom inv'7 : forall x : Node'0.t_node k v . inv'7 x = true
  
  use RedBlackTree_Color_Type as Color'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : borrowed (Color'0.t_color)) =
    [%#span42] true
  
  predicate inv'6 (_x : borrowed (Color'0.t_color))
  
  axiom inv'6 : forall x : borrowed (Color'0.t_color) . inv'6 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span42] true
  
  predicate inv'5 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'5 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'5 x = true
  
  predicate invariant'4 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span42] true
  
  predicate inv'4 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'4 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'4 x = true
  
  predicate invariant'3 (self : Node'0.t_node k v) =
    [%#span42] true
  
  predicate inv'3 (_x : Node'0.t_node k v)
  
  axiom inv'3 : forall x : Node'0.t_node k v . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span42] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Node'0.t_node k v)) =
    [%#span42] true
  
  predicate inv'1 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'1 : forall x : borrowed (Node'0.t_node k v) . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span42] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span43] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span48] has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span44] inv'7 self)
   -> ([%#span45] inv'8 k)
   -> ([%#span46] inv'9 v)
   -> ([%#span47] forall node : Node'0.t_node k v . inv'3 node
   -> self = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span49] forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'9 v  -> has_mapping'0 self k v = has_mapping'0 o k v
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span52] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_tree k v . ([%#span50] inv'10 self)  -> ([%#span51] height'1 self >= 0)
  
  function height'0 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span55] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'1 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_node k v . ([%#span53] inv'7 self)
   -> ([%#span54] forall node : Node'0.t_node k v . inv'3 node
   -> self = node  -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span56] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span57] height'1 (RedBlackTree_Node_Type.node_left self) = height'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span58] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span59] height_invariant_here'0 self
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span60] (forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'9 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'9 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span61] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span62] bst_invariant_here'0 self
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span63] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span64] self.final = self.current
  
  predicate resolve'1 (self : borrowed (Color'0.t_color)) =
    [%#span64] self.final = self.current
  
  let rec swap'0 (x:borrowed (Color'0.t_color)) (y:borrowed (Color'0.t_color)) (return'  (ret:()))= {[@expl:precondition] [%#span66] inv'6 y}
    {[@expl:precondition] [%#span65] inv'6 x}
    any
    [ return' (result:())-> {[%#span68] y.final = x.current} {[%#span67] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span64] self.final = self.current
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span70] inv'5 self}
    {[@expl:precondition] [%#span69] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span71] inv'1 result}
      {[%#span69] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span72] inv'4 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span75] inv'5 result}
      {[%#span74] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'1 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span73] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec flip_colors (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'2 self}
    {[%#sred_black_tree3] color'0 (RedBlackTree_Node_Type.node_left self.current)
    = color'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[%#sred_black_tree2] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    {[%#sred_black_tree1] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_option (Node'0.t_node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_15 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _15.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'0 _15.final}- s2
      | s2 = as_mut'0 {_15} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_13 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Node'0.t_node <k> <v> {_13.current}
              (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                 [ &_13 <- { _13 with current = Node'0.C_Node l_left'0 rcolor'0 l_key'0 l_val'0 l_right'0 ; } ] 
                s1))
      | s1 = {[@expl:type invariant] inv'1 _13} s2
      | s2 = -{resolve'0 _13}- s3
      | s3 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            Borrow.borrow_final <Color'0.t_color> {rcolor'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Color'0.t_color)) ->
                 [ &_18 <- _ret' ] 
                Node'0.t_node <k> <v> {self.current}
                  (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'1 _18.final l_key'1 l_val'1 l_right'1 ; } ] 
                    s4)))
      | s4 = Borrow.borrow_final <Color'0.t_color> {_18.current} {Borrow.get_id _18}
          (fun (_ret':borrowed (Color'0.t_color)) ->
             [ &_17 <- _ret' ] 
             [ &_18 <- { _18 with current = _17.final ; } ] 
            s5)
      | s5 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'2:Tree'0.t_tree k v) (rcolor'2:Color'0.t_color) (rkey'2:k) (rval'2:v) (rright'2:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'2}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_option (Node'0.t_node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 5) 1}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_23 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'2:Tree'0.t_tree k v) (l_color'2:Color'0.t_color) (l_key'2:k) (l_val'2:v) (l_right'2:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_right'2}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'2 l_color'2 l_key'2 l_val'2 (Tree'0.C_Tree _23.final) ; } ]
                            
                            s6)))))
      | s6 = -{inv'0 _23.final}- s7
      | s7 = as_mut'0 {_23} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_22 <- _ret' ] s8)
      | s8 = bb3 ]
      
    | bb3 = s0 [ s0 = unwrap'0 {_22} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_21 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = Node'0.t_node <k> <v> {_21.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Color'0.t_color> {rcolor'0}
              (fun (_ret':borrowed (Color'0.t_color)) ->
                 [ &_20 <- _ret' ] 
                Node'0.t_node <k> <v> {_21.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &_21 <- { _21 with current = Node'0.C_Node l_left'0 _20.final l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = Borrow.borrow_final <Color'0.t_color> {_20.current} {Borrow.get_id _20}
          (fun (_ret':borrowed (Color'0.t_color)) ->
             [ &_19 <- _ret' ] 
             [ &_20 <- { _20 with current = _19.final ; } ] 
            s2)
      | s2 = swap'0 {_17} {_19} (fun (_ret':()) ->  [ &_16 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'1 _21} s1
      | s1 = -{resolve'0 _21}- s2
      | s2 = -{resolve'1 _20}- s3
      | s3 = -{resolve'1 _18}- s4
      | s4 = {[@expl:type invariant] inv'2 self} s5
      | s5 = -{resolve'2 self}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_node k v) = self
    | & _13 : borrowed (Node'0.t_node k v) = any_l ()
    | & _14 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _15 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _16 : () = any_l ()
    | & _17 : borrowed (Color'0.t_color) = any_l ()
    | & _18 : borrowed (Color'0.t_color) = any_l ()
    | & _19 : borrowed (Color'0.t_color) = any_l ()
    | & _20 : borrowed (Color'0.t_color) = any_l ()
    | & _21 : borrowed (Node'0.t_node k v) = any_l ()
    | & _22 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _23 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree10] exists r1 : Node'0.t_node k v, r2 : Node'0.t_node k v . inv'3 r1
      /\ inv'3 r2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r2
      /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2
      /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color r2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color r1
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2}
      {[@expl:postcondition] [%#sred_black_tree9] exists l1 : Node'0.t_node k v, l2 : Node'0.t_node k v . inv'3 l1
      /\ inv'3 l2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l2
      /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2
      /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2
      /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color l2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color l1}
      {[@expl:postcondition] [%#sred_black_tree8] RedBlackTree_Node_Type.node_key self.current
      = RedBlackTree_Node_Type.node_key self.final}
      {[@expl:postcondition] [%#sred_black_tree7] same_mappings'0 self.current self.final}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl14_Balance
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 491 15 491 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 492 4 493 47
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 494 4 495 48
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 496 4 496 110
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 510 20 510 24
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 497 14 497 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 498 14 498 42
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 499 14 499 50
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 500 4 501 34
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 502 4 503 39
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 504 4 505 63
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 506 4 507 61
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 508 4 509 39
  
  let%span span13 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span44 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span45 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span46 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span47 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span48 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span49 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span50 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span51 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span52 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span53 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span54 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span55 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span56 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span57 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span58 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span59 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span60 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span61 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span62 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span63 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span64 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span65 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span66 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span67 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span68 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span69 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span70 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span71 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span72 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span73 = "../red_black_tree.rs" 472 15 472 43
  
  let%span span74 = "../red_black_tree.rs" 473 15 473 40
  
  let%span span75 = "../red_black_tree.rs" 474 15 474 41
  
  let%span span76 = "../red_black_tree.rs" 475 15 475 60
  
  let%span span77 = "../red_black_tree.rs" 486 24 486 28
  
  let%span span78 = "../red_black_tree.rs" 476 14 476 42
  
  let%span span79 = "../red_black_tree.rs" 477 14 477 50
  
  let%span span80 = "../red_black_tree.rs" 478 14 478 42
  
  let%span span81 = "../red_black_tree.rs" 479 14 479 40
  
  let%span span82 = "../red_black_tree.rs" 480 4 482 70
  
  let%span span83 = "../red_black_tree.rs" 483 4 485 90
  
  let%span span84 = "../red_black_tree.rs" 400 15 400 43
  
  let%span span85 = "../red_black_tree.rs" 401 15 401 42
  
  let%span span86 = "../red_black_tree.rs" 412 25 412 29
  
  let%span span87 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span88 = "../red_black_tree.rs" 403 14 403 42
  
  let%span span89 = "../red_black_tree.rs" 404 14 404 50
  
  let%span span90 = "../red_black_tree.rs" 405 14 405 65
  
  let%span span91 = "../red_black_tree.rs" 406 14 406 42
  
  let%span span92 = "../red_black_tree.rs" 407 14 407 44
  
  let%span span93 = "../red_black_tree.rs" 408 4 411 36
  
  let%span span94 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span95 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span96 = "" 0 0 0 0
  
  let%span span97 = "" 0 0 0 0
  
  let%span span98 = "" 0 0 0 0
  
  let%span span99 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span100 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span101 = "" 0 0 0 0
  
  let%span span102 = "../red_black_tree.rs" 450 15 450 43
  
  let%span span103 = "../red_black_tree.rs" 451 15 451 43
  
  let%span span104 = "../red_black_tree.rs" 462 24 462 28
  
  let%span span105 = "../red_black_tree.rs" 452 14 452 42
  
  let%span span106 = "../red_black_tree.rs" 453 14 453 42
  
  let%span span107 = "../red_black_tree.rs" 454 14 454 50
  
  let%span span108 = "../red_black_tree.rs" 455 14 455 65
  
  let%span span109 = "../red_black_tree.rs" 456 14 456 41
  
  let%span span110 = "../red_black_tree.rs" 457 14 457 44
  
  let%span span111 = "../red_black_tree.rs" 458 4 461 36
  
  let%span span112 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span113 = "../red_black_tree.rs" 387 14 387 45
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'9 (self : Tree'0.t_tree k v) =
    [%#span13] true
  
  predicate inv'9 (_x : Tree'0.t_tree k v)
  
  axiom inv'9 : forall x : Tree'0.t_tree k v . inv'9 x = true
  
  predicate invariant'8 (self : v)
  
  predicate inv'8 (_x : v)
  
  axiom inv'8 : forall x : v . inv'8 x = true
  
  type deep_model_ty'0
  
  predicate invariant'7 (self : deep_model_ty'0)
  
  predicate inv'7 (_x : deep_model_ty'0)
  
  axiom inv'7 : forall x : deep_model_ty'0 . inv'7 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'6 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span13] true
  
  predicate inv'6 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'6 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'6 x = true
  
  predicate invariant'5 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span13] true
  
  predicate inv'5 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'5 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'5 x = true
  
  predicate invariant'4 (self : Node'0.t_node k v) =
    [%#span13] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span14] inv'7 x)
   -> ([%#span15] inv'7 y)  -> ([%#span16] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span17] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span18] inv'7 x)  -> ([%#span19] inv'7 y)  -> ([%#span20] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span21] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span22] inv'7 x)  -> ([%#span23] inv'7 y)  -> ([%#span24] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span25] cmp_log'0 x y
  = o)
   -> ([%#span26] cmp_log'0 y z = o)
   -> ([%#span27] inv'7 x)  -> ([%#span28] inv'7 y)  -> ([%#span29] inv'7 z)  -> ([%#span30] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span31] inv'7 x)
   -> ([%#span32] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span33] inv'7 x)
   -> ([%#span34] inv'7 y)  -> ([%#span35] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span36] inv'7 x)
   -> ([%#span37] inv'7 y)  -> ([%#span38] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span39] inv'7 x)
   -> ([%#span40] inv'7 y)  -> ([%#span41] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span42] inv'7 x)
   -> ([%#span43] inv'7 y)  -> ([%#span44] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'3 (self : Tree'0.t_tree k v) =
    [%#span13] true
  
  predicate inv'3 (_x : Tree'0.t_tree k v)
  
  axiom inv'3 : forall x : Tree'0.t_tree k v . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span13] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : Node'0.t_node k v) =
    [%#span13] true
  
  predicate inv'1 (_x : Node'0.t_node k v)
  
  axiom inv'1 : forall x : Node'0.t_node k v . inv'1 x = true
  
  predicate invariant'0 (self : Node'0.t_node k v) =
    [%#span13] true
  
  predicate inv'0 (_x : Node'0.t_node k v)
  
  axiom inv'0 : forall x : Node'0.t_node k v . inv'0 x = true
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span45] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span46] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span47] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use RedBlackTree_Cp_Type as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span48] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'4 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span49] color_invariant_here'0 self
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span50] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span51] CP'0.C_CPN c l r
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span54] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_tree k v . ([%#span52] inv'9 self)  -> ([%#span53] height'1 self >= 0)
  
  function height'0 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span57] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'1 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_node k v . ([%#span55] inv'0 self)
   -> ([%#span56] forall node : Node'0.t_node k v . inv'4 node
   -> self = node  -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span58] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span63] has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span59] inv'0 self)
   -> ([%#span60] inv'7 k)
   -> ([%#span61] inv'8 v)
   -> ([%#span62] forall node : Node'0.t_node k v . inv'4 node
   -> self = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span64] forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'8 v  -> has_mapping'0 self k v = has_mapping'0 o k v
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span65] height'1 (RedBlackTree_Node_Type.node_left self) = height'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span66] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span67] height_invariant_here'0 self
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span68] (forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'8 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'8 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span69] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span70] bst_invariant_here'0 self
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span71] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Node'0.t_node k v)) =
    [%#span72] self.final = self.current
  
  let rec flip_colors'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span77] inv'2 self}
    {[@expl:precondition] [%#span76] color'0 (RedBlackTree_Node_Type.node_left self.current)
    = color'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span75] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span74] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span73] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span83] exists r1 : Node'0.t_node k v, r2 : Node'0.t_node k v . inv'4 r1
      /\ inv'4 r2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r2
      /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2
      /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color r2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color r1
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2}
      {[%#span82] exists l1 : Node'0.t_node k v, l2 : Node'0.t_node k v . inv'4 l1
      /\ inv'4 l2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l2
      /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2
      /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2
      /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color l2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color l1}
      {[%#span81] RedBlackTree_Node_Type.node_key self.current = RedBlackTree_Node_Type.node_key self.final}
      {[%#span80] same_mappings'0 self.current self.final}
      {[%#span79] height'0 self.current = height'0 self.final}
      {[%#span78] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span86] inv'2 self}
    {[@expl:precondition] [%#span85] color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span84] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span93] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'4 l
      /\ inv'4 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r
      /\ (RedBlackTree_Node_Type.node_left self.final, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.current)
      /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key self.current}
      {[%#span92] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span91] color'0 (RedBlackTree_Node_Type.node_right self.final) = Color'0.C_Red}
      {[%#span90] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.final)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))}
      {[%#span89] height'0 self.current = height'0 self.final}
      {[%#span88] internal_invariant'0 self.final}
      {[%#span87] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Node'0.t_node k v) =
    [%#span94] true
  
  let rec unwrap'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span96] inv'6 self}
    {[@expl:precondition] [%#span95] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span97] inv'1 result}
      {[%#span95] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span98] inv'5 self}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span101] inv'6 result}
      {[%#span100] self = Option'0.C_None
      \/ (exists r : Node'0.t_node k v . inv'1 r /\ result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span99] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec rotate_left'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span104] inv'2 self}
    {[@expl:precondition] [%#span103] color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span102] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span111] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'4 l
      /\ inv'4 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l
      /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.final)
      = (RedBlackTree_Node_Type.node_left self.current, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key self.current}
      {[%#span110] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span109] color'0 (RedBlackTree_Node_Type.node_left self.final) = Color'0.C_Red}
      {[%#span108] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.final))}
      {[%#span107] height'0 self.current = height'0 self.final}
      {[%#span106] internal_invariant'0 self.final}
      {[%#span105] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span112] inv'3 self}
    any [ return' (result:bool)-> {[%#span113] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec balance (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'2 self}
    {[%#sred_black_tree3] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red  -> false}
    {[%#sred_black_tree2] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[%#sred_black_tree1] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rright'0} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = any [ br0 -> {_15 = false} (! bb7) | br1 -> {_15} (! bb2) ] 
    | bb2 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s1))
      | s1 = bb3 ]
      
    | bb3 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb4) ] 
    | bb4 = bb8
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_20 <- _ret' ] 
             [ &self <- { self with current = _20.final ; } ] 
            s1)
      | s1 = -{inv'0 _20.final}- s2
      | s2 = rotate_left'0 {_20} (fun (_ret':()) ->  [ &_19 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = bb9
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1))
      | s1 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb18) | br1 -> {_22} (! bb11) ] 
    | bb11 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_27 <- _ret' ] s1)))
      | s1 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_27} (fun (_ret':Node'0.t_node k v) ->  [ &_26 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'1 _26} s1
      | s1 = -{resolve'0 _26}- s2
      | s2 = Node'0.t_node <k> <v> {_26}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s3))
      | s3 = bb14 ]
      
    | bb14 = any [ br0 -> {_24 = false} (! bb17) | br1 -> {_24} (! bb15) ] 
    | bb15 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_30 <- _ret' ] 
             [ &self <- { self with current = _30.final ; } ] 
            s1)
      | s1 = -{inv'0 _30.final}- s2
      | s2 = rotate_right'0 {_30} (fun (_ret':()) ->  [ &_29 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = bb20
    | bb17 = bb19
    | bb18 = bb19
    | bb19 = bb20
    | bb20 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1))
      | s1 = bb21 ]
      
    | bb21 = any [ br0 -> {_31 = false} (! bb27) | br1 -> {_31} (! bb22) ] 
    | bb22 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rright'0} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s1))
      | s1 = bb23 ]
      
    | bb23 = any [ br0 -> {_33 = false} (! bb26) | br1 -> {_33} (! bb24) ] 
    | bb24 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {self.current} {Borrow.get_id self}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_36 <- _ret' ] 
             [ &self <- { self with current = _36.final ; } ] 
            s1)
      | s1 = -{inv'0 _36.final}- s2
      | s2 = flip_colors'0 {_36} (fun (_ret':()) ->  [ &_35 <- _ret' ] s3)
      | s3 = bb25 ]
      
    | bb25 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb29 ] 
    | bb26 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb28 ] 
    | bb27 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb28 ] 
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_node k v) = self
    | & _15 : bool = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : () = any_l ()
    | & _20 : borrowed (Node'0.t_node k v) = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : bool = any_l ()
    | & _26 : Node'0.t_node k v = any_l ()
    | & _27 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _29 : () = any_l ()
    | & _30 : borrowed (Node'0.t_node k v) = any_l ()
    | & _31 : bool = any_l ()
    | & _33 : bool = any_l ()
    | & _35 : () = any_l ()
    | & _36 : borrowed (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree12] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[@expl:postcondition] [%#sred_black_tree11] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[@expl:postcondition] [%#sred_black_tree10] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[@expl:postcondition] [%#sred_black_tree9] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[@expl:postcondition] [%#sred_black_tree8] color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)
      /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[@expl:postcondition] [%#sred_black_tree7] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl14_MoveRedLeft
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 524 15 524 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 525 15 525 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 526 15 526 86
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 542 26 542 30
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 527 14 527 44
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 528 4 530 48
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 531 4 531 97
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 532 14 532 42
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 533 4 533 105
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 534 4 535 47
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 536 4 537 108
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 538 14 539 61
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 540 4 541 45
  
  let%span sred_black_tree13 = "../red_black_tree.rs" 542 35 542 44
  
  let%span span14 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span44 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span45 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span46 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span47 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span48 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span49 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span50 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span51 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span52 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span53 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span54 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span55 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span56 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span57 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span58 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span59 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span60 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span61 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span62 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span63 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span64 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span65 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span66 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span67 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span68 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span69 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span70 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span71 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span72 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span73 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span74 = "../red_black_tree.rs" 450 15 450 43
  
  let%span span75 = "../red_black_tree.rs" 451 15 451 43
  
  let%span span76 = "../red_black_tree.rs" 462 24 462 28
  
  let%span span77 = "../red_black_tree.rs" 452 14 452 42
  
  let%span span78 = "../red_black_tree.rs" 453 14 453 42
  
  let%span span79 = "../red_black_tree.rs" 454 14 454 50
  
  let%span span80 = "../red_black_tree.rs" 455 14 455 65
  
  let%span span81 = "../red_black_tree.rs" 456 14 456 41
  
  let%span span82 = "../red_black_tree.rs" 457 14 457 44
  
  let%span span83 = "../red_black_tree.rs" 458 4 461 36
  
  let%span span84 = "../red_black_tree.rs" 400 15 400 43
  
  let%span span85 = "../red_black_tree.rs" 401 15 401 42
  
  let%span span86 = "../red_black_tree.rs" 412 25 412 29
  
  let%span span87 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span88 = "../red_black_tree.rs" 403 14 403 42
  
  let%span span89 = "../red_black_tree.rs" 404 14 404 50
  
  let%span span90 = "../red_black_tree.rs" 405 14 405 65
  
  let%span span91 = "../red_black_tree.rs" 406 14 406 42
  
  let%span span92 = "../red_black_tree.rs" 407 14 407 44
  
  let%span span93 = "../red_black_tree.rs" 408 4 411 36
  
  let%span span94 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span95 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span96 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span97 = "" 0 0 0 0
  
  let%span span98 = "" 0 0 0 0
  
  let%span span99 = "" 0 0 0 0
  
  let%span span100 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span101 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "../red_black_tree.rs" 472 15 472 43
  
  let%span span104 = "../red_black_tree.rs" 473 15 473 40
  
  let%span span105 = "../red_black_tree.rs" 474 15 474 41
  
  let%span span106 = "../red_black_tree.rs" 475 15 475 60
  
  let%span span107 = "../red_black_tree.rs" 486 24 486 28
  
  let%span span108 = "../red_black_tree.rs" 476 14 476 42
  
  let%span span109 = "../red_black_tree.rs" 477 14 477 50
  
  let%span span110 = "../red_black_tree.rs" 478 14 478 42
  
  let%span span111 = "../red_black_tree.rs" 479 14 479 40
  
  let%span span112 = "../red_black_tree.rs" 480 4 482 70
  
  let%span span113 = "../red_black_tree.rs" 483 4 485 90
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'10 (self : Tree'0.t_tree k v) =
    [%#span14] true
  
  predicate inv'10 (_x : Tree'0.t_tree k v)
  
  axiom inv'10 : forall x : Tree'0.t_tree k v . inv'10 x = true
  
  predicate invariant'9 (self : Tree'0.t_tree k v) =
    [%#span14] true
  
  predicate inv'9 (_x : Tree'0.t_tree k v)
  
  axiom inv'9 : forall x : Tree'0.t_tree k v . inv'9 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  use prelude.prelude.Borrow
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'8 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span14] true
  
  predicate inv'8 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'8 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span14] true
  
  predicate inv'7 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'7 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'7 x = true
  
  predicate invariant'6 (self : Node'0.t_node k v) =
    [%#span14] true
  
  predicate inv'6 (_x : Node'0.t_node k v)
  
  axiom inv'6 : forall x : Node'0.t_node k v . inv'6 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'4 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span15] inv'4 x)
   -> ([%#span16] inv'4 y)  -> ([%#span17] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span19] inv'4 x)  -> ([%#span20] inv'4 y)  -> ([%#span21] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span22] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span23] inv'4 x)  -> ([%#span24] inv'4 y)  -> ([%#span25] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span26] cmp_log'0 x y
  = o)
   -> ([%#span27] cmp_log'0 y z = o)
   -> ([%#span28] inv'4 x)  -> ([%#span29] inv'4 y)  -> ([%#span30] inv'4 z)  -> ([%#span31] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span32] inv'4 x)
   -> ([%#span33] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'4 x)
   -> ([%#span35] inv'4 y)  -> ([%#span36] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'4 x)
   -> ([%#span38] inv'4 y)  -> ([%#span39] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span40] inv'4 x)
   -> ([%#span41] inv'4 y)  -> ([%#span42] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span43] inv'4 x)
   -> ([%#span44] inv'4 y)  -> ([%#span45] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'5 (self : v)
  
  predicate inv'5 (_x : v)
  
  axiom inv'5 : forall x : v . inv'5 x = true
  
  predicate invariant'4 (self : deep_model_ty'0)
  
  axiom inv'4 : forall x : deep_model_ty'0 . inv'4 x = true
  
  predicate invariant'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span14] true
  
  predicate inv'3 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'3 : forall x : borrowed (Node'0.t_node k v) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span14] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span14] true
  
  predicate inv'1 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'1 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'1 x = true
  
  predicate invariant'0 (self : Node'0.t_node k v) =
    [%#span14] true
  
  predicate inv'0 (_x : Node'0.t_node k v)
  
  axiom inv'0 : forall x : Node'0.t_node k v . inv'0 x = true
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span46] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span47] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'1 left /\ color_invariant'1 right
      end
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span49] color_invariant_here'0 self
    /\ color_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span55] has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span51] inv'0 self)
   -> ([%#span52] inv'4 k)
   -> ([%#span53] inv'5 v)
   -> ([%#span54] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span58] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_tree k v . ([%#span56] inv'10 self)  -> ([%#span57] height'1 self >= 0)
  
  function height'0 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span61] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'1 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_node k v . ([%#span59] inv'0 self)
   -> ([%#span60] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  use RedBlackTree_Cp_Type as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span62] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'1 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'6 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span63] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'0 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span64] CP'0.C_CPN c l r
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span65] height'1 (RedBlackTree_Node_Type.node_left self) = height'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span66] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span67] height_invariant_here'0 self
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span68] (forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span69] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span70] bst_invariant_here'0 self
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span71] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Node'0.t_node k v)) =
    [%#span72] self.final = self.current
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span73] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v  -> has_mapping'0 self k v = has_mapping'0 o k v
  
  let rec rotate_left'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span76] inv'3 self}
    {[@expl:precondition] [%#span75] color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span74] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span83] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'6 l
      /\ inv'6 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l
      /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.final)
      = (RedBlackTree_Node_Type.node_left self.current, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key self.current}
      {[%#span82] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span81] color'0 (RedBlackTree_Node_Type.node_left self.final) = Color'0.C_Red}
      {[%#span80] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.final))}
      {[%#span79] height'0 self.current = height'0 self.final}
      {[%#span78] internal_invariant'0 self.final}
      {[%#span77] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span86] inv'3 self}
    {[@expl:precondition] [%#span85] color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span84] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span93] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'6 l
      /\ inv'6 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r
      /\ (RedBlackTree_Node_Type.node_left self.final, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.current)
      /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key self.current}
      {[%#span92] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span91] color'0 (RedBlackTree_Node_Type.node_right self.final) = Color'0.C_Red}
      {[%#span90] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.final)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))}
      {[%#span89] height'0 self.current = height'0 self.final}
      {[%#span88] internal_invariant'0 self.final}
      {[%#span87] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span72] self.final = self.current
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span94] inv'9 self}
    any [ return' (result:bool)-> {[%#span95] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span97] inv'8 self}
    {[@expl:precondition] [%#span96] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span98] inv'2 result}
      {[%#span96] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span99] inv'7 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span102] inv'8 result}
      {[%#span101] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'2 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span100] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec flip_colors'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span107] inv'3 self}
    {[@expl:precondition] [%#span106] color'0 (RedBlackTree_Node_Type.node_left self.current)
    = color'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span105] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span104] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span103] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span113] exists r1 : Node'0.t_node k v, r2 : Node'0.t_node k v . inv'6 r1
      /\ inv'6 r2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r2
      /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2
      /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color r2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color r1
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2}
      {[%#span112] exists l1 : Node'0.t_node k v, l2 : Node'0.t_node k v . inv'6 l1
      /\ inv'6 l2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l2
      /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2
      /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2
      /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color l2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color l1}
      {[%#span111] RedBlackTree_Node_Type.node_key self.current = RedBlackTree_Node_Type.node_key self.final}
      {[%#span110] same_mappings'0 self.current self.final}
      {[%#span109] height'0 self.current = height'0 self.final}
      {[%#span108] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec move_red_left (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[%#sred_black_tree3] inv'3 self}
    {[%#sred_black_tree2] match_n'0 (cpn'0 (Color'0.C_Red) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree1] internal_invariant'0 self.current}
    {[%#sred_black_tree0] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_16 <- _ret' ] 
             [ &self <- { self with current = _16.final ; } ] 
            s1)
      | s1 = -{inv'0 _16.final}- s2
      | s2 = flip_colors'0 {_16} (fun (_ret':()) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_22 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _22.final) ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _22.final}- s2
      | s2 = as_mut'0 {_22} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = unwrap'0 {_21} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_20 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Node'0.t_node <k> <v> {_20.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1))
      | s1 = bb4 ]
      
    | bb4 = any [ br0 -> {_18 = false} (! bb13) | br1 -> {_18} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _20} s1
      | s1 = -{resolve'0 _20}- s2
      | s2 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_28 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _28.final) ; } ]
                            
                            s3)))))
      | s3 = -{inv'1 _28.final}- s4
      | s4 = as_mut'0 {_28} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_27 <- _ret' ] s5)
      | s5 = bb6 ]
      
    | bb6 = s0 [ s0 = unwrap'0 {_27} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_26 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {_26.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_25 <- _ret' ] 
             [ &_26 <- { _26 with current = _25.final ; } ] 
            s1)
      | s1 = -{inv'0 _25.final}- s2
      | s2 = rotate_right'0 {_25} (fun (_ret':()) ->  [ &_24 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'2 _26} s1
      | s1 = -{resolve'0 _26}- s2
      | s2 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_30 <- _ret' ] 
             [ &self <- { self with current = _30.final ; } ] 
            s3)
      | s3 = -{inv'0 _30.final}- s4
      | s4 = rotate_left'0 {_30} (fun (_ret':()) ->  [ &_29 <- _ret' ] s5)
      | s5 = bb9 ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_32 <- _ret' ] 
             [ &self <- { self with current = _32.final ; } ] 
            s1)
      | s1 = -{inv'0 _32.final}- s2
      | s2 = flip_colors'0 {_32} (fun (_ret':()) ->  [ &_31 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_option (Node'0.t_node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_35 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _35.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _35.final}- s2
      | s2 = as_mut'0 {_35} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_34 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = s0 [ s0 = unwrap'0 {_34} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_33 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {_33.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_0 <- _ret' ] 
             [ &_33 <- { _33 with current = _0.final ; } ] 
            s1)
      | s1 = -{inv'0 _0.final}- s2
      | s2 = {[@expl:type invariant] inv'2 _33} s3
      | s3 = -{resolve'0 _33}- s4
      | s4 = bb16 ]
      
    | bb16 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb14 ] 
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'2 _20} s1
      | s1 = -{resolve'0 _20}- s2
      | s2 =  [ &_0 <- self ] (any [ any_ (_any:borrowed (Node'0.t_node k v))-> (!  [ &self <- _any ] s3) ] )
      | s3 = bb14 ]
      
    | bb14 = return' {_0} ]
    )
    [ & _0 : borrowed (Node'0.t_node k v) = any_l ()
    | & self : borrowed (Node'0.t_node k v) = self
    | & _15 : () = any_l ()
    | & _16 : borrowed (Node'0.t_node k v) = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : borrowed (Node'0.t_node k v) = any_l ()
    | & _21 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _24 : () = any_l ()
    | & _25 : borrowed (Node'0.t_node k v) = any_l ()
    | & _26 : borrowed (Node'0.t_node k v) = any_l ()
    | & _27 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _28 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _29 : () = any_l ()
    | & _30 : borrowed (Node'0.t_node k v) = any_l ()
    | & _31 : () = any_l ()
    | & _32 : borrowed (Node'0.t_node k v) = any_l ()
    | & _33 : borrowed (Node'0.t_node k v) = any_l ()
    | & _34 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _35 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l () ]
    
    [ return' (result:borrowed (Node'0.t_node k v))-> {[@expl:postcondition] [%#sred_black_tree13] inv'3 result}
      {[@expl:postcondition] [%#sred_black_tree12] color_invariant'0 result.final
      /\ (color'0 (RedBlackTree_Node_Type.node_right result.current) = Color'0.C_Black
       -> RedBlackTree_Node_Type.node_color result.final = Color'0.C_Black)  -> color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree11] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[@expl:postcondition] [%#sred_black_tree10] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 self.final k v
      = (has_mapping'0 result.final k v \/ has_mapping'0 self.current k v /\ not has_mapping'0 result.current k v)}
      {[@expl:postcondition] [%#sred_black_tree9] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 self.current k v /\ le_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))
       -> has_mapping'0 result.current k v}
      {[@expl:postcondition] [%#sred_black_tree8] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 result.current k v  -> has_mapping'0 self.current k v}
      {[@expl:postcondition] [%#sred_black_tree7] RedBlackTree_Node_Type.node_key self.current
      = RedBlackTree_Node_Type.node_key result.current}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 result.current = height'0 result.final
       -> height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 result.final
      /\ height'0 result.current = height'0 result.final
      /\ (forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 result.final k v  -> has_mapping'0 result.current k v)  -> internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree4] internal_invariant'0 result.current}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl14_MoveRedRight
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 553 15 553 40
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 554 15 554 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 555 15 555 86
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 571 27 571 31
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 556 14 556 44
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 557 4 559 48
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 560 4 560 97
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 561 14 561 42
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 562 4 562 105
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 563 4 564 47
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 565 4 566 108
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 567 14 568 61
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 569 4 570 45
  
  let%span sred_black_tree13 = "../red_black_tree.rs" 571 36 571 45
  
  let%span span14 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span44 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span45 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span46 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span47 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span48 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span49 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span50 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span51 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span52 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span53 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span54 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span55 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span56 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span57 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span58 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span59 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span60 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span61 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span62 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span63 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span64 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span65 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span66 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span67 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span68 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span69 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span70 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span71 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span72 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span73 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span74 = "../red_black_tree.rs" 400 15 400 43
  
  let%span span75 = "../red_black_tree.rs" 401 15 401 42
  
  let%span span76 = "../red_black_tree.rs" 412 25 412 29
  
  let%span span77 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span78 = "../red_black_tree.rs" 403 14 403 42
  
  let%span span79 = "../red_black_tree.rs" 404 14 404 50
  
  let%span span80 = "../red_black_tree.rs" 405 14 405 65
  
  let%span span81 = "../red_black_tree.rs" 406 14 406 42
  
  let%span span82 = "../red_black_tree.rs" 407 14 407 44
  
  let%span span83 = "../red_black_tree.rs" 408 4 411 36
  
  let%span span84 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span85 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span86 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span87 = "" 0 0 0 0
  
  let%span span88 = "" 0 0 0 0
  
  let%span span89 = "" 0 0 0 0
  
  let%span span90 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span91 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "../red_black_tree.rs" 472 15 472 43
  
  let%span span94 = "../red_black_tree.rs" 473 15 473 40
  
  let%span span95 = "../red_black_tree.rs" 474 15 474 41
  
  let%span span96 = "../red_black_tree.rs" 475 15 475 60
  
  let%span span97 = "../red_black_tree.rs" 486 24 486 28
  
  let%span span98 = "../red_black_tree.rs" 476 14 476 42
  
  let%span span99 = "../red_black_tree.rs" 477 14 477 50
  
  let%span span100 = "../red_black_tree.rs" 478 14 478 42
  
  let%span span101 = "../red_black_tree.rs" 479 14 479 40
  
  let%span span102 = "../red_black_tree.rs" 480 4 482 70
  
  let%span span103 = "../red_black_tree.rs" 483 4 485 90
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'10 (self : Tree'0.t_tree k v) =
    [%#span14] true
  
  predicate inv'10 (_x : Tree'0.t_tree k v)
  
  axiom inv'10 : forall x : Tree'0.t_tree k v . inv'10 x = true
  
  predicate invariant'9 (self : Tree'0.t_tree k v) =
    [%#span14] true
  
  predicate inv'9 (_x : Tree'0.t_tree k v)
  
  axiom inv'9 : forall x : Tree'0.t_tree k v . inv'9 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  use prelude.prelude.Borrow
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'8 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span14] true
  
  predicate inv'8 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'8 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span14] true
  
  predicate inv'7 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'7 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'7 x = true
  
  predicate invariant'6 (self : Node'0.t_node k v) =
    [%#span14] true
  
  predicate inv'6 (_x : Node'0.t_node k v)
  
  axiom inv'6 : forall x : Node'0.t_node k v . inv'6 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'4 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span15] inv'4 x)
   -> ([%#span16] inv'4 y)  -> ([%#span17] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span19] inv'4 x)  -> ([%#span20] inv'4 y)  -> ([%#span21] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span22] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span23] inv'4 x)  -> ([%#span24] inv'4 y)  -> ([%#span25] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span26] cmp_log'0 x y
  = o)
   -> ([%#span27] cmp_log'0 y z = o)
   -> ([%#span28] inv'4 x)  -> ([%#span29] inv'4 y)  -> ([%#span30] inv'4 z)  -> ([%#span31] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span32] inv'4 x)
   -> ([%#span33] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'4 x)
   -> ([%#span35] inv'4 y)  -> ([%#span36] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'4 x)
   -> ([%#span38] inv'4 y)  -> ([%#span39] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span40] inv'4 x)
   -> ([%#span41] inv'4 y)  -> ([%#span42] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span43] inv'4 x)
   -> ([%#span44] inv'4 y)  -> ([%#span45] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'5 (self : v)
  
  predicate inv'5 (_x : v)
  
  axiom inv'5 : forall x : v . inv'5 x = true
  
  predicate invariant'4 (self : deep_model_ty'0)
  
  axiom inv'4 : forall x : deep_model_ty'0 . inv'4 x = true
  
  predicate invariant'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span14] true
  
  predicate inv'3 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'3 : forall x : borrowed (Node'0.t_node k v) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span14] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span14] true
  
  predicate inv'1 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'1 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'1 x = true
  
  predicate invariant'0 (self : Node'0.t_node k v) =
    [%#span14] true
  
  predicate inv'0 (_x : Node'0.t_node k v)
  
  axiom inv'0 : forall x : Node'0.t_node k v . inv'0 x = true
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span46] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span47] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'1 left /\ color_invariant'1 right
      end
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span49] color_invariant_here'0 self
    /\ color_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span55] has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span51] inv'0 self)
   -> ([%#span52] inv'4 k)
   -> ([%#span53] inv'5 v)
   -> ([%#span54] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span58] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_tree k v . ([%#span56] inv'10 self)  -> ([%#span57] height'1 self >= 0)
  
  function height'0 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span61] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'1 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_node k v . ([%#span59] inv'0 self)
   -> ([%#span60] forall node : Node'0.t_node k v . inv'6 node
   -> self = node  -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  use RedBlackTree_Cp_Type as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span62] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'1 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'6 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span63] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'0 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span64] CP'0.C_CPN c l r
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span65] height'1 (RedBlackTree_Node_Type.node_left self) = height'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span66] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span67] height_invariant_here'0 self
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span68] (forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
     -> has_mapping'1 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span69] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span70] bst_invariant_here'0 self
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'1 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span71] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Node'0.t_node k v)) =
    [%#span72] self.final = self.current
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span73] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v  -> has_mapping'0 self k v = has_mapping'0 o k v
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span76] inv'3 self}
    {[@expl:precondition] [%#span75] color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span74] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span83] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'6 l
      /\ inv'6 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r
      /\ (RedBlackTree_Node_Type.node_left self.final, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.current)
      /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key self.current}
      {[%#span82] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span81] color'0 (RedBlackTree_Node_Type.node_right self.final) = Color'0.C_Red}
      {[%#span80] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.final)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))}
      {[%#span79] height'0 self.current = height'0 self.final}
      {[%#span78] internal_invariant'0 self.final}
      {[%#span77] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span72] self.final = self.current
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span84] inv'9 self}
    any [ return' (result:bool)-> {[%#span85] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span87] inv'8 self}
    {[@expl:precondition] [%#span86] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span88] inv'2 result}
      {[%#span86] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span89] inv'7 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span92] inv'8 result}
      {[%#span91] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'2 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span90] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec flip_colors'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span97] inv'3 self}
    {[@expl:precondition] [%#span96] color'0 (RedBlackTree_Node_Type.node_left self.current)
    = color'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span95] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span94] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span93] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span103] exists r1 : Node'0.t_node k v, r2 : Node'0.t_node k v . inv'6 r1
      /\ inv'6 r2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current) = Option'0.C_Some r1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r2
      /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2
      /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color r2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color r1
      /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2}
      {[%#span102] exists l1 : Node'0.t_node k v, l2 : Node'0.t_node k v . inv'6 l1
      /\ inv'6 l2
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l1
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.final) = Option'0.C_Some l2
      /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2
      /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2
      /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2
      /\ RedBlackTree_Node_Type.node_color self.current = RedBlackTree_Node_Type.node_color l2
      /\ RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color l1}
      {[%#span101] RedBlackTree_Node_Type.node_key self.current = RedBlackTree_Node_Type.node_key self.final}
      {[%#span100] same_mappings'0 self.current self.final}
      {[%#span99] height'0 self.current = height'0 self.final}
      {[%#span98] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec move_red_right (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[%#sred_black_tree3] inv'3 self}
    {[%#sred_black_tree2] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black)))) self.current}
    {[%#sred_black_tree1] internal_invariant'0 self.current}
    {[%#sred_black_tree0] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_16 <- _ret' ] 
             [ &self <- { self with current = _16.final ; } ] 
            s1)
      | s1 = -{inv'0 _16.final}- s2
      | s2 = flip_colors'0 {_16} (fun (_ret':()) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_22 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _22.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _22.final}- s2
      | s2 = as_mut'0 {_22} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = unwrap'0 {_21} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_20 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Node'0.t_node <k> <v> {_20.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1))
      | s1 = bb4 ]
      
    | bb4 = any [ br0 -> {_18 = false} (! bb10) | br1 -> {_18} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _20} s1
      | s1 = -{resolve'0 _20}- s2
      | s2 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_25 <- _ret' ] 
             [ &self <- { self with current = _25.final ; } ] 
            s3)
      | s3 = -{inv'0 _25.final}- s4
      | s4 = rotate_right'0 {_25} (fun (_ret':()) ->  [ &_24 <- _ret' ] s5)
      | s5 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_27 <- _ret' ] 
             [ &self <- { self with current = _27.final ; } ] 
            s1)
      | s1 = -{inv'0 _27.final}- s2
      | s2 = flip_colors'0 {_27} (fun (_ret':()) ->  [ &_26 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Node'0.t_node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_option (Node'0.t_node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 5) 1}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_30 <- _ret' ] 
                    Node'0.t_node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        Tree'0.t_tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _30.final) ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _30.final}- s2
      | s2 = as_mut'0 {_30} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_29 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = unwrap'0 {_29} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_28 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {_28.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_0 <- _ret' ] 
             [ &_28 <- { _28 with current = _0.final ; } ] 
            s1)
      | s1 = -{inv'0 _0.final}- s2
      | s2 = {[@expl:type invariant] inv'2 _28} s3
      | s3 = -{resolve'0 _28}- s4
      | s4 = bb13 ]
      
    | bb13 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb11 ] 
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'2 _20} s1
      | s1 = -{resolve'0 _20}- s2
      | s2 =  [ &_0 <- self ] (any [ any_ (_any:borrowed (Node'0.t_node k v))-> (!  [ &self <- _any ] s3) ] )
      | s3 = bb11 ]
      
    | bb11 = return' {_0} ]
    )
    [ & _0 : borrowed (Node'0.t_node k v) = any_l ()
    | & self : borrowed (Node'0.t_node k v) = self
    | & _15 : () = any_l ()
    | & _16 : borrowed (Node'0.t_node k v) = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : borrowed (Node'0.t_node k v) = any_l ()
    | & _21 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _24 : () = any_l ()
    | & _25 : borrowed (Node'0.t_node k v) = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Node'0.t_node k v) = any_l ()
    | & _28 : borrowed (Node'0.t_node k v) = any_l ()
    | & _29 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _30 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l () ]
    
    [ return' (result:borrowed (Node'0.t_node k v))-> {[@expl:postcondition] [%#sred_black_tree13] inv'3 result}
      {[@expl:postcondition] [%#sred_black_tree12] color_invariant'0 result.final
      /\ (color'0 (RedBlackTree_Node_Type.node_left result.current) = Color'0.C_Black
       -> RedBlackTree_Node_Type.node_color result.final = Color'0.C_Black)  -> color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree11] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[@expl:postcondition] [%#sred_black_tree10] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 self.final k v
      = (has_mapping'0 result.final k v \/ has_mapping'0 self.current k v /\ not has_mapping'0 result.current k v)}
      {[@expl:postcondition] [%#sred_black_tree9] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 self.current k v /\ le_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) k
       -> has_mapping'0 result.current k v}
      {[@expl:postcondition] [%#sred_black_tree8] forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 result.current k v  -> has_mapping'0 self.current k v}
      {[@expl:postcondition] [%#sred_black_tree7] RedBlackTree_Node_Type.node_key result.current
      = RedBlackTree_Node_Type.node_key self.current}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 result.current = height'0 result.final
       -> height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 result.final
      /\ height'0 result.current = height'0 result.final
      /\ (forall k : deep_model_ty'0, v : v . inv'4 k /\ inv'5 v
       -> has_mapping'0 result.final k v  -> has_mapping'0 result.current k v)  -> internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree4] internal_invariant'0 result.current}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_New
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 586 14 586 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 587 14 587 32
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 588 20 588 30
  
  let%span span3 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span34 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span35 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span36 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span37 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span38 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span39 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span40 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span41 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span42 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span43 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span44 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span45 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span46 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span47 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span48 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span49 = "../red_black_tree.rs" 173 20 173 54
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'1 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span3] inv'1 x)
   -> ([%#span4] inv'1 y)  -> ([%#span5] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span6] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span7] inv'1 x)  -> ([%#span8] inv'1 y)  -> ([%#span9] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span10] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span11] inv'1 x)  -> ([%#span12] inv'1 y)  -> ([%#span13] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span14] cmp_log'0 x y
  = o)
   -> ([%#span15] cmp_log'0 y z = o)
   -> ([%#span16] inv'1 x)  -> ([%#span17] inv'1 y)  -> ([%#span18] inv'1 z)  -> ([%#span19] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span20] inv'1 x)
   -> ([%#span21] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span22] inv'1 x)
   -> ([%#span23] inv'1 y)  -> ([%#span24] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span25] inv'1 x)
   -> ([%#span26] inv'1 y)  -> ([%#span27] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span28] inv'1 x)
   -> ([%#span29] inv'1 y)  -> ([%#span30] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'1 x)
   -> ([%#span32] inv'1 y)  -> ([%#span33] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'3 (self : v)
  
  predicate inv'2 (_x : v)
  
  axiom inv'2 : forall x : v . inv'2 x = true
  
  predicate invariant'2 (self : deep_model_ty'0)
  
  axiom inv'1 : forall x : deep_model_ty'0 . inv'1 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'1 (self : Tree'0.t_tree k v) =
    [%#span34] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span35] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span36] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span37] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span38] inv'0 self)  -> ([%#span39] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span41] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span42] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span43] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span44] (forall k : deep_model_ty'0, v : v . inv'1 k /\ inv'2 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'1 k /\ inv'2 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span46] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span47] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use map.Const
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function shallow_model'0 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span49] model_acc'0 self (Const.const (Option'0.C_None))
  
  use prelude.prelude.Intrinsic
  
  let rec new (_1:()) (return'  (ret:Tree'0.t_tree k v))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- Option'0.C_None ] s1
      | s1 =  [ &_0 <- Tree'0.C_Tree _3 ] 
        (any [ any_ (_any:Option'0.t_option (Node'0.t_node k v))-> (!  [ &_3 <- _any ] s2) ] )
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : Tree'0.t_tree k v = any_l () | & _3 : Option'0.t_option (Node'0.t_node k v) = any_l () ] 
    [ return' (result:Tree'0.t_tree k v)-> {[@expl:postcondition] [%#sred_black_tree2] inv'0 result}
      {[@expl:postcondition] [%#sred_black_tree1] invariant'0 result}
      {[@expl:postcondition] [%#sred_black_tree0] shallow_model'0 result = Const.const (Option'0.C_None)}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_InsertRec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 592 15 592 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 593 15 593 40
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 600 23 600 27
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 600 29 600 32
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 600 37 600 40
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 594 14 594 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 595 14 595 50
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 596 14 597 39
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 598 14 598 56
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 599 4 599 127
  
  let%span span10 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span42 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span43 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span44 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span45 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span46 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span47 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span48 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span49 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span50 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span51 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span52 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span53 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span54 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span55 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span56 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span57 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span58 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span59 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span60 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span61 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span62 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span63 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span64 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span65 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span66 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span67 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span68 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span69 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span70 = "../red_black_tree.rs" 491 15 491 43
  
  let%span span71 = "../red_black_tree.rs" 492 4 493 47
  
  let%span span72 = "../red_black_tree.rs" 494 4 495 48
  
  let%span span73 = "../red_black_tree.rs" 496 4 496 110
  
  let%span span74 = "../red_black_tree.rs" 510 20 510 24
  
  let%span span75 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span76 = "../red_black_tree.rs" 498 14 498 42
  
  let%span span77 = "../red_black_tree.rs" 499 14 499 50
  
  let%span span78 = "../red_black_tree.rs" 500 4 501 34
  
  let%span span79 = "../red_black_tree.rs" 502 4 503 39
  
  let%span span80 = "../red_black_tree.rs" 504 4 505 63
  
  let%span span81 = "../red_black_tree.rs" 506 4 507 61
  
  let%span span82 = "../red_black_tree.rs" 508 4 509 39
  
  let%span span83 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span84 = "" 0 0 0 0
  
  let%span span85 = "" 0 0 0 0
  
  let%span span86 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span87 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use RedBlackTree_Node_Type as Node'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'11 (self : borrowed (Node'0.t_node k v)) =
    [%#span10] true
  
  predicate inv'11 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'11 : forall x : borrowed (Node'0.t_node k v) . inv'11 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'10 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span11] inv'10 x)
   -> ([%#span12] inv'10 y)  -> ([%#span13] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span15] inv'10 x)  -> ([%#span16] inv'10 y)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span19] inv'10 x)  -> ([%#span20] inv'10 y)  -> ([%#span21] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span22] cmp_log'0 x y
  = o)
   -> ([%#span23] cmp_log'0 y z = o)
   -> ([%#span24] inv'10 x)  -> ([%#span25] inv'10 y)  -> ([%#span26] inv'10 z)  -> ([%#span27] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span28] inv'10 x)
   -> ([%#span29] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span30] inv'10 x)
   -> ([%#span31] inv'10 y)  -> ([%#span32] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span33] inv'10 x)
   -> ([%#span34] inv'10 y)  -> ([%#span35] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span36] inv'10 x)
   -> ([%#span37] inv'10 y)  -> ([%#span38] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span39] inv'10 x)
   -> ([%#span40] inv'10 y)  -> ([%#span41] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'10 (self : deep_model_ty'0)
  
  axiom inv'10 : forall x : deep_model_ty'0 . inv'10 x = true
  
  predicate invariant'9 (self : Node'0.t_node k v) =
    [%#span10] true
  
  predicate inv'9 (_x : Node'0.t_node k v)
  
  axiom inv'9 : forall x : Node'0.t_node k v . inv'9 x = true
  
  predicate invariant'8 (self : borrowed (Node'0.t_node k v)) =
    [%#span10] true
  
  predicate inv'8 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'8 : forall x : borrowed (Node'0.t_node k v) . inv'8 x = true
  
  predicate invariant'7 (self : v)
  
  predicate inv'7 (_x : v)
  
  axiom inv'7 : forall x : v . inv'7 x = true
  
  predicate invariant'6 (self : k)
  
  predicate inv'6 (_x : k)
  
  axiom inv'6 : forall x : k . inv'6 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'5 (self : Tree'0.t_tree k v) =
    [%#span10] true
  
  predicate inv'5 (_x : Tree'0.t_tree k v)
  
  axiom inv'5 : forall x : Tree'0.t_tree k v . inv'5 x = true
  
  predicate invariant'4 (self : k)
  
  predicate inv'4 (_x : k)
  
  axiom inv'4 : forall x : k . inv'4 x = true
  
  predicate invariant'3 (self : Node'0.t_node k v) =
    [%#span10] true
  
  predicate inv'3 (_x : Node'0.t_node k v)
  
  axiom inv'3 : forall x : Node'0.t_node k v . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span10] true
  
  predicate inv'2 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'2 : forall x : borrowed (Tree'0.t_tree k v) . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span10] true
  
  predicate inv'1 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'1 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span10] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span42] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span43] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span44] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use RedBlackTree_Cp_Type as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span46] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'3 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span47] CP'0.C_CPN c l r
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span48] inv'5 self)  -> ([%#span49] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span51] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span52] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span53] (forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'7 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'7 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span54] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span55] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span56] color_invariant_here'0 self
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span57] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span60] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'0 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_node k v . ([%#span58] inv'9 self)
   -> ([%#span59] forall node : Node'0.t_node k v . inv'3 node
   -> self = node  -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span65] has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span61] inv'9 self)
   -> ([%#span62] inv'10 k)
   -> ([%#span63] inv'7 v)
   -> ([%#span64] forall node : Node'0.t_node k v . inv'3 node
   -> self = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span66] forall k : deep_model_ty'0, v : v . inv'10 k /\ inv'7 v  -> has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span67] height_invariant_here'0 self
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span68] bst_invariant_here'0 self
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span69] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span74] inv'11 self}
    {[@expl:precondition] [%#span73] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span72] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span71] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)}
    {[@expl:precondition] [%#span70] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span82] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span81] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span80] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span79] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span78] color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)
      /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span77] height'1 self.current = height'1 self.final}
      {[%#span76] internal_invariant'1 self.final}
      {[%#span75] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Node'0.t_node k v)) =
    [%#span83] self.final = self.current
  
  predicate resolve'5 (self : v)
  
  predicate resolve'4 (self : k)
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_ordering))= {[@expl:precondition] [%#span85] inv'4 other}
    {[@expl:precondition] [%#span84] inv'4 self}
    any
    [ return' (result:Ordering'0.t_ordering)-> {[%#span86] result = cmp_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : k)
  
  predicate resolve'2 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span83] self.final = self.current
  
  predicate resolve'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span87] true
  
  predicate resolve'0 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span83] self.final = self.current
  
  let rec insert_rec (self:borrowed (Tree'0.t_tree k v)) (key:k) (val':v) (return'  (ret:()))= {[%#sred_black_tree4] inv'7 val'}
    {[%#sred_black_tree3] inv'6 key}
    {[%#sred_black_tree2] inv'2 self}
    {[%#sred_black_tree1] color_invariant'0 self.current}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_11 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _11.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _11.final}- s2
      | s2 = any
        [ br0 -> {_11.current = Option'0.C_None } (! bb19)
        | br1 (a:Node'0.t_node k v)-> {_11.current = Option'0.C_Some a} (! bb3) ]
         ]
      
    | bb19 = s0
      [ s0 = {[@expl:type invariant] inv'1 _11} s1
      | s1 = -{resolve'0 _11}- s2
      | s2 =  [ &_35 <- Option'0.C_None ] s3
      | s3 =  [ &_34 <- Tree'0.C_Tree _35 ] 
        (any [ any_ (_any:Option'0.t_option (Node'0.t_node k v))-> (!  [ &_35 <- _any ] s4) ] )
      | s4 = bb20 ]
      
    | bb20 = s0
      [ s0 =  [ &_36 <- Color'0.C_Red ] s1
      | s1 =  [ &_40 <- Option'0.C_None ] s2
      | s2 =  [ &_39 <- Tree'0.C_Tree _40 ] 
        (any [ any_ (_any:Option'0.t_option (Node'0.t_node k v))-> (!  [ &_40 <- _any ] s3) ] )
      | s3 = bb21 ]
      
    | bb21 = s0
      [ s0 =  [ &_33 <- Node'0.C_Node _34 _36 key val' _39 ] 
        (any
        [ any_ (_any:Tree'0.t_tree k v)-> (!  [ &_34 <- _any ] 
          (any
          [ any_ (_any:Color'0.t_color)-> (!  [ &_36 <- _any ] 
            (any
            [ any_ (_any:k)-> (!  [ &key <- _any ] 
              (any
              [ any_ (_any:v)-> (!  [ &val' <- _any ] 
                (any [ any_ (_any:Tree'0.t_tree k v)-> (!  [ &_39 <- _any ] s1) ] )) ]
              )) ]
            )) ]
          )) ]
        )
      | s1 = bb22 ]
      
    | bb22 = bb23
    | bb23 = bb24
    | bb24 = bb25
    | bb25 = bb26
    | bb26 = s0
      [ s0 =  [ &_31 <- Option'0.C_Some _33 ] (any [ any_ (_any:Node'0.t_node k v)-> (!  [ &_33 <- _any ] s1) ] )
      | s1 = bb27 ]
      
    | bb27 = bb28
    | bb28 = s0
      [ s0 = Tree'0.t_tree <k> <v> {self.current}
          (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
             [ &self <- { self with current = Tree'0.C_Tree _31 ; } ] 
            (any [ any_ (_any:Option'0.t_option (Node'0.t_node k v))-> (!  [ &_31 <- _any ] s1) ] ))
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) -> {[@expl:type invariant] inv'0 rnode'0} s2)
      | s2 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'1:Option'0.t_option (Node'0.t_node k v)) -> -{resolve'1 rnode'1}- s3)
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb30 ]
      
    | bb30 = bb32
    | bb3 = bb4
    | bb4 = s0
      [ s0 = Option'0.some <Node'0.t_node k v> {_11.current}
          (fun (r0'0:Node'0.t_node k v) ->
            Borrow.borrow_final <Node'0.t_node k v> {r0'0} {Borrow.inherit_id (Borrow.get_id _11) 1}
              (fun (_ret':borrowed (Node'0.t_node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.some <Node'0.t_node k v> {_11.current}
                  (fun (l_0'0:Node'0.t_node k v) ->
                     [ &_11 <- { _11 with current = Option'0.C_Some node.final ; } ] 
                    s1)))
      | s1 = -{inv'3 node.final}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
             [ &_18 <- rkey'0 ] 
            s3)
      | s3 = {[@expl:type invariant] inv'4 _18} s4
      | s4 = -{resolve'3 _18}- s5
      | s5 = cmp'0 {key} {_18} (fun (_ret':Ordering'0.t_ordering) ->  [ &_15 <- _ret' ] s6)
      | s6 = bb5 ]
      
    | bb5 = any
      [ br0 -> {_15 = Ordering'0.C_Less } (! bb7)
      | br1 -> {_15 = Ordering'0.C_Equal } (! bb51)
      | br2 -> {_15 = Ordering'0.C_Greater } (! bb52) ]
      
    | bb52 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_25 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _25.final ; } ] 
                    s1)))
      | s1 = -{inv'5 _25.final}- s2
      | s2 = insert_rec {_25} {key} {val'} (fun (_ret':()) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = bb17
    | bb51 = bb8
    | bb8 = bb12
    | bb12 = s0 [ s0 = {[@expl:type invariant] inv'6 key} s1 | s1 = -{resolve'4 key}- s2 | s2 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 val' l_right'0 ; } ] 
            (any [ any_ (_any:v)-> (!  [ &val' <- _any ] s1) ] ))
      | s1 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            {[@expl:type invariant] inv'7 rval'0}
            s2)
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
            -{resolve'5 rval'1}-
            s3)
      | s3 = {[@expl:type invariant] inv'8 node} s4
      | s4 = -{resolve'6 node}- s5
      | s5 = bb15 ]
      
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'1 _11} s1
      | s1 = -{resolve'0 _11}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 = bb32 ]
      
    | bb32 = bb33
    | bb33 = bb34
    | bb7 = bb10
    | bb10 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_20 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node _20.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'5 _20.final}- s2
      | s2 = insert_rec {_20} {key} {val'} (fun (_ret':()) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = bb17
    | bb17 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {node.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_29 <- _ret' ] 
             [ &node <- { node with current = _29.final ; } ] 
            s1)
      | s1 = -{inv'9 _29.final}- s2
      | s2 = balance'0 {_29} (fun (_ret':()) ->  [ &_28 <- _ret' ] s3)
      | s3 = bb18 ]
      
    | bb18 = s0
      [ s0 = {[@expl:type invariant] inv'8 node} s1
      | s1 = -{resolve'6 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _11} s3
      | s3 = -{resolve'0 _11}- s4
      | s4 = {[@expl:type invariant] inv'2 self} s5
      | s5 = -{resolve'2 self}- s6
      | s6 = bb31 ]
      
    | bb31 = bb34
    | bb34 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & key : k = key
    | & val' : v = val'
    | & _11 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _14 : () = any_l ()
    | & _15 : Ordering'0.t_ordering = any_l ()
    | & _18 : k = any_l ()
    | & _20 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _25 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _28 : () = any_l ()
    | & _29 : borrowed (Node'0.t_node k v) = any_l ()
    | & _31 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _33 : Node'0.t_node k v = any_l ()
    | & _34 : Tree'0.t_tree k v = any_l ()
    | & _35 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _36 : Color'0.t_color = any_l ()
    | & _39 : Tree'0.t_tree k v = any_l ()
    | & _40 : Option'0.t_option (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree9] forall k : deep_model_ty'0, v : v . inv'10 k
      /\ inv'7 v  -> k = deep_model'0 key \/ has_mapping'0 self.current k v = has_mapping'0 self.final k v}
      {[@expl:postcondition] [%#sred_black_tree8] has_mapping'0 self.final (deep_model'0 key) val'}
      {[@expl:postcondition] [%#sred_black_tree7] match_t'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final
      /\ color'0 self.current = Color'0.C_Red
      \/ color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_Insert
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 629 8 629 45
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 623 15 623 34
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 626 23 626 27
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 626 29 626 32
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 626 37 626 40
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 624 14 624 33
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 625 14 625 64
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span38 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span39 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span40 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span41 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span42 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span43 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span44 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span45 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span46 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span47 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span48 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span49 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span50 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span51 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span52 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span53 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span54 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span55 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span56 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span57 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span58 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span59 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span60 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span61 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span62 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span63 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span64 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span65 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span66 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span67 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span68 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span69 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span70 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span71 = "../red_black_tree.rs" 115 12 115 61
  
  let%span span72 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span73 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span74 = "" 0 0 0 0
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "" 0 0 0 0
  
  let%span span77 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span78 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span79 = "" 0 0 0 0
  
  let%span span80 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span81 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span82 = "../red_black_tree.rs" 592 15 592 43
  
  let%span span83 = "../red_black_tree.rs" 593 15 593 40
  
  let%span span84 = "../red_black_tree.rs" 600 23 600 27
  
  let%span span85 = "../red_black_tree.rs" 600 29 600 32
  
  let%span span86 = "../red_black_tree.rs" 600 37 600 40
  
  let%span span87 = "../red_black_tree.rs" 594 14 594 42
  
  let%span span88 = "../red_black_tree.rs" 595 14 595 50
  
  let%span span89 = "../red_black_tree.rs" 596 14 597 39
  
  let%span span90 = "../red_black_tree.rs" 598 14 598 56
  
  let%span span91 = "../red_black_tree.rs" 599 4 599 127
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'6 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span7] inv'6 x)
   -> ([%#span8] inv'6 y)  -> ([%#span9] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span10] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span11] inv'6 x)  -> ([%#span12] inv'6 y)  -> ([%#span13] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span15] inv'6 x)  -> ([%#span16] inv'6 y)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span18] cmp_log'0 x y
  = o)
   -> ([%#span19] cmp_log'0 y z = o)
   -> ([%#span20] inv'6 x)  -> ([%#span21] inv'6 y)  -> ([%#span22] inv'6 z)  -> ([%#span23] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span24] inv'6 x)
   -> ([%#span25] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span26] inv'6 x)
   -> ([%#span27] inv'6 y)  -> ([%#span28] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span29] inv'6 x)
   -> ([%#span30] inv'6 y)  -> ([%#span31] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'6 x)
   -> ([%#span33] inv'6 y)  -> ([%#span34] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'6 x)
   -> ([%#span36] inv'6 y)  -> ([%#span37] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use Core_Option_Option_Type as Option'0
  
  use map.Map
  
  predicate invariant'11 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span38] true
  
  predicate inv'10 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'10 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'10 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'10 (self : Node'0.t_node k v) =
    [%#span38] true
  
  predicate inv'9 (_x : Node'0.t_node k v)
  
  axiom inv'9 : forall x : Node'0.t_node k v . inv'9 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span38] true
  
  predicate inv'8 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'8 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'8 x = true
  
  predicate invariant'8 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span38] true
  
  predicate inv'7 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'7 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'7 x = true
  
  predicate invariant'7 (self : deep_model_ty'0)
  
  axiom inv'6 : forall x : deep_model_ty'0 . inv'6 x = true
  
  predicate invariant'6 (self : v)
  
  predicate inv'5 (_x : v)
  
  axiom inv'5 : forall x : v . inv'5 x = true
  
  predicate invariant'5 (self : k)
  
  predicate inv'4 (_x : k)
  
  axiom inv'4 : forall x : k . inv'4 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'4 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span38] true
  
  predicate inv'3 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'3 : forall x : borrowed (Tree'0.t_tree k v) . inv'3 x = true
  
  predicate invariant'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span38] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'2 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span38] true
  
  predicate inv'1 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'1 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'1 x = true
  
  predicate invariant'1 (self : Tree'0.t_tree k v) =
    [%#span38] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span39] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span40] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'1 (self : borrowed (Tree'0.t_tree k v)) : Map.map deep_model_ty'0 (Option'0.t_option v) =
    [%#span41] shallow_model'0 self.current
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span42] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span43] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span44] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span47] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span45] inv'0 self)  -> ([%#span46] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span48] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span51] (forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'5 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'5 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span52] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span53] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span54] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : Snapshot.snap_ty ()) =
    [%#span55] true
  
  use prelude.prelude.Snapshot
  
  use map.Map
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span60] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span56] inv'0 self)
   -> ([%#span57] inv'10 accu)
   -> ([%#span58] inv'6 k)
   -> ([%#span59] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'5 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span66] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span61] bst_invariant'0 self)
   -> ([%#span62] inv'0 self)
   -> ([%#span63] inv'10 accu)
   -> ([%#span64] inv'6 k)
   -> ([%#span65] forall v : v . inv'5 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span71] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span67] bst_invariant'0 self)
   -> ([%#span68] inv'0 self)
   -> ([%#span69] inv'6 k)
   -> ([%#span70] forall v : v . inv'5 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
  
  predicate resolve'1 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span72] self.final = self.current
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span72] self.final = self.current
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span74] inv'8 self}
    {[@expl:precondition] [%#span73] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span75] inv'2 result}
      {[%#span73] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span76] inv'7 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span79] inv'8 result}
      {[%#span78] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'2 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span77] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use RedBlackTree_Cp_Type as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span80] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'9 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span81] CP'0.C_CPN c l r
  
  let rec insert_rec'0 (self:borrowed (Tree'0.t_tree k v)) (key:k) (val':v) (return'  (ret:()))= {[@expl:precondition] [%#span86] inv'5 val'}
    {[@expl:precondition] [%#span85] inv'4 key}
    {[@expl:precondition] [%#span84] inv'3 self}
    {[@expl:precondition] [%#span83] color_invariant'0 self.current}
    {[@expl:precondition] [%#span82] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span91] forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'5 v
       -> k = deep_model'0 key \/ has_mapping'0 self.current k v = has_mapping'0 self.final k v}
      {[%#span90] has_mapping'0 self.final (deep_model'0 key) val'}
      {[%#span89] match_t'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final
      /\ color'0 self.current = Color'0.C_Red
      \/ color_invariant'0 self.final}
      {[%#span88] height'0 self.current = height'0 self.final}
      {[%#span87] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec insert (self:borrowed (Tree'0.t_tree k v)) (key:k) (val':v) (return'  (ret:()))= {[%#sred_black_tree4] inv'5 val'}
    {[%#sred_black_tree3] inv'4 key}
    {[%#sred_black_tree2] inv'3 self}
    {[%#sred_black_tree1] invariant'0 self.current}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Tree'0.t_tree k v> {self.current}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_8 <- _ret' ] 
             [ &self <- { self with current = _8.final ; } ] 
            s1)
      | s1 = -{inv'0 _8.final}- s2
      | s2 = insert_rec'0 {_8} {key} {val'} (fun (_ret':()) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_11 <- Color'0.C_Black ] s1
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_14 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _14.final ; } ] 
                    s2)))
      | s2 = -{inv'1 _14.final}- s3
      | s3 = as_mut'0 {_14} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_13 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = s0 [ s0 = unwrap'0 {_13} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_12 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = Node'0.t_node <k> <v> {_12.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &_12 <- { _12 with current = Node'0.C_Node l_left'0 _11 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_11 <- _any ] s1) ] ))
      | s1 = {[@expl:type invariant] inv'2 _12} s2
      | s2 = -{resolve'0 _12}- s3
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_15 <- [%#sred_black_tree0] Snapshot.new () ] s6
      | s6 = bb5 ]
      
    | bb5 = s0 [ s0 = -{resolve'2 _15}- s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & key : k = key
    | & val' : v = val'
    | & _7 : () = any_l ()
    | & _8 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _11 : Color'0.t_color = any_l ()
    | & _12 : borrowed (Node'0.t_node k v) = any_l ()
    | & _13 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _14 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _15 : Snapshot.snap_ty () = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree6] shallow_model'0 self.final
      = Map.set (shallow_model'1 self) (deep_model'0 key) (Option'0.C_Some val')}
      {[@expl:postcondition] [%#sred_black_tree5] invariant'0 self.final}
      (! return' {result}) ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module RedBlackTree_Impl15_DeleteMaxRec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 632 15 632 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 633 15 634 62
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 643 27 643 31
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 635 14 635 42
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 636 14 636 50
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 637 14 637 66
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 638 4 638 104
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 639 4 640 73
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 641 14 641 39
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 642 4 642 69
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 643 36 643 42
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span43 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span44 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span45 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span46 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span47 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span48 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span49 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span50 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span51 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span52 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span53 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span54 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span55 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span56 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span57 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span58 = "../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  let%span span59 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span63 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span66 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span69 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span70 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span71 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span72 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span73 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span74 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span75 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span76 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span77 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span78 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span79 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span80 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span81 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span82 = "../red_black_tree.rs" 491 15 491 43
  
  let%span span83 = "../red_black_tree.rs" 492 4 493 47
  
  let%span span84 = "../red_black_tree.rs" 494 4 495 48
  
  let%span span85 = "../red_black_tree.rs" 496 4 496 110
  
  let%span span86 = "../red_black_tree.rs" 510 20 510 24
  
  let%span span87 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span88 = "../red_black_tree.rs" 498 14 498 42
  
  let%span span89 = "../red_black_tree.rs" 499 14 499 50
  
  let%span span90 = "../red_black_tree.rs" 500 4 501 34
  
  let%span span91 = "../red_black_tree.rs" 502 4 503 39
  
  let%span span92 = "../red_black_tree.rs" 504 4 505 63
  
  let%span span93 = "../red_black_tree.rs" 506 4 507 61
  
  let%span span94 = "../red_black_tree.rs" 508 4 509 39
  
  let%span span95 = "../red_black_tree.rs" 553 15 553 40
  
  let%span span96 = "../red_black_tree.rs" 554 15 554 43
  
  let%span span97 = "../red_black_tree.rs" 555 15 555 86
  
  let%span span98 = "../red_black_tree.rs" 571 27 571 31
  
  let%span span99 = "../red_black_tree.rs" 556 14 556 44
  
  let%span span100 = "../red_black_tree.rs" 557 4 559 48
  
  let%span span101 = "../red_black_tree.rs" 560 4 560 97
  
  let%span span102 = "../red_black_tree.rs" 561 14 561 42
  
  let%span span103 = "../red_black_tree.rs" 562 4 562 105
  
  let%span span104 = "../red_black_tree.rs" 563 4 564 47
  
  let%span span105 = "../red_black_tree.rs" 565 4 566 108
  
  let%span span106 = "../red_black_tree.rs" 567 14 568 61
  
  let%span span107 = "../red_black_tree.rs" 569 4 570 45
  
  let%span span108 = "../red_black_tree.rs" 571 36 571 45
  
  let%span span109 = "" 0 0 0 0
  
  let%span span110 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span111 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span112 = "" 0 0 0 0
  
  let%span span113 = "../red_black_tree.rs" 400 15 400 43
  
  let%span span114 = "../red_black_tree.rs" 401 15 401 42
  
  let%span span115 = "../red_black_tree.rs" 412 25 412 29
  
  let%span span116 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span117 = "../red_black_tree.rs" 403 14 403 42
  
  let%span span118 = "../red_black_tree.rs" 404 14 404 50
  
  let%span span119 = "../red_black_tree.rs" 405 14 405 65
  
  let%span span120 = "../red_black_tree.rs" 406 14 406 42
  
  let%span span121 = "../red_black_tree.rs" 407 14 407 44
  
  let%span span122 = "../red_black_tree.rs" 408 4 411 36
  
  let%span span123 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span124 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span125 = "" 0 0 0 0
  
  let%span span126 = "../../../../creusot-contracts/src/std/boxed.rs" 35 26 35 43
  
  let%span span127 = "../../../../creusot-contracts/src/std/boxed.rs" 36 26 36 43
  
  let%span span128 = "" 0 0 0 0
  
  let%span span129 = "" 0 0 0 0
  
  let%span span130 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span131 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span132 = "" 0 0 0 0
  
  use RedBlackTree_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'15 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'15 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'15 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'15 x = true
  
  predicate invariant'14 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'14 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'14 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'14 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'13 (self : Tree'0.t_tree k v) =
    [%#span11] true
  
  predicate inv'13 (_x : Tree'0.t_tree k v)
  
  axiom inv'13 : forall x : Tree'0.t_tree k v . inv'13 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span11] true
  
  predicate inv'12 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'12 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'12 x = true
  
  predicate invariant'11 (self : (k, v)) =
    [%#span11] true
  
  predicate inv'11 (_x : (k, v))
  
  axiom inv'11 : forall x : (k, v) . inv'11 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'9 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span12] inv'9 x)
   -> ([%#span13] inv'9 y)  -> ([%#span14] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span15] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span16] inv'9 x)  -> ([%#span17] inv'9 y)  -> ([%#span18] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span19] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span20] inv'9 x)  -> ([%#span21] inv'9 y)  -> ([%#span22] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span23] cmp_log'0 x y
  = o)
   -> ([%#span24] cmp_log'0 y z = o)
   -> ([%#span25] inv'9 x)  -> ([%#span26] inv'9 y)  -> ([%#span27] inv'9 z)  -> ([%#span28] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span29] inv'9 x)
   -> ([%#span30] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'9 x)
   -> ([%#span32] inv'9 y)  -> ([%#span33] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'9 x)
   -> ([%#span35] inv'9 y)  -> ([%#span36] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'9 x)
   -> ([%#span38] inv'9 y)  -> ([%#span39] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span40] inv'9 x)
   -> ([%#span41] inv'9 y)  -> ([%#span42] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'10 (self : v)
  
  predicate inv'10 (_x : v)
  
  axiom inv'10 : forall x : v . inv'10 x = true
  
  predicate invariant'9 (self : deep_model_ty'0)
  
  axiom inv'9 : forall x : deep_model_ty'0 . inv'9 x = true
  
  predicate invariant'8 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span11] true
  
  predicate inv'8 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'8 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span11] true
  
  predicate inv'7 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'7 : forall x : borrowed (Tree'0.t_tree k v) . inv'7 x = true
  
  predicate invariant'6 (self : Tree'0.t_tree k v) =
    [%#span11] true
  
  predicate inv'6 (_x : Tree'0.t_tree k v)
  
  axiom inv'6 : forall x : Tree'0.t_tree k v . inv'6 x = true
  
  predicate invariant'5 (self : borrowed (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'5 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'5 : forall x : borrowed (Node'0.t_node k v) . inv'5 x = true
  
  predicate invariant'4 (self : Node'0.t_node k v) =
    [%#span11] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'3 (self : Node'0.t_node k v) =
    [%#span11] true
  
  predicate inv'3 (_x : Node'0.t_node k v)
  
  axiom inv'3 : forall x : Node'0.t_node k v . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : Node'0.t_node k v) =
    [%#span11] true
  
  predicate inv'1 (_x : Node'0.t_node k v)
  
  axiom inv'1 : forall x : Node'0.t_node k v . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span43] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span44] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span47] inv'6 self)  -> ([%#span48] height'0 self >= 0)
  
  use RedBlackTree_Cp_Type as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span50] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span51] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'1 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span52] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span53] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span54] (forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span55] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span56] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : Node'0.t_node k v) =
    [%#span57] true
  
  predicate resolve'5 (self : Node'0.t_node k v) =
    [%#span58] resolve'6 self
  
  let rec unwrap'2 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span60] inv'0 self}
    {[@expl:precondition] [%#span59] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span61] inv'1 result}
      {[%#span59] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span62] self.final = self.current
  
  predicate is_default'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span63] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span64] inv'8 dest}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span67] inv'0 result}
      {[%#span66] is_default'0 dest.final}
      {[%#span65] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span62] self.final = self.current
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span68] color_invariant_here'0 self
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span69] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span72] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'0 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_node k v . ([%#span70] inv'3 self)
   -> ([%#span71] forall node : Node'0.t_node k v . inv'1 node
   -> self = node  -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span77] has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span73] inv'3 self)
   -> ([%#span74] inv'9 k)
   -> ([%#span75] inv'10 v)
   -> ([%#span76] forall node : Node'0.t_node k v . inv'1 node
   -> self = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span78] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v  -> has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span79] height_invariant_here'0 self
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span80] bst_invariant_here'0 self
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span81] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span86] inv'5 self}
    {[@expl:precondition] [%#span85] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span84] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span83] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)}
    {[@expl:precondition] [%#span82] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span94] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span93] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span92] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span91] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span90] color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)
      /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span89] height'1 self.current = height'1 self.final}
      {[%#span88] internal_invariant'1 self.final}
      {[%#span87] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span62] self.final = self.current
  
  let rec move_red_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span98] inv'5 self}
    {[@expl:precondition] [%#span97] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black)))) self.current}
    {[@expl:precondition] [%#span96] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span95] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span108] inv'5 result}
      {[%#span107] color_invariant'1 result.final
      /\ (color'0 (RedBlackTree_Node_Type.node_left result.current) = Color'0.C_Black
       -> RedBlackTree_Node_Type.node_color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span106] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span105] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span104] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 self.current k v /\ le_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.current)) k
       -> has_mapping'1 result.current k v}
      {[%#span103] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 result.current k v  -> has_mapping'1 self.current k v}
      {[%#span102] RedBlackTree_Node_Type.node_key result.current = RedBlackTree_Node_Type.node_key self.current}
      {[%#span101] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span100] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)  -> internal_invariant'1 self.final}
      {[%#span99] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : Node'0.t_node k v) =
    [%#span57] true
  
  let rec unwrap'1 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span60] inv'15 self}
    {[@expl:precondition] [%#span59] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span61] inv'4 result}
      {[%#span59] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span109] inv'14 self}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span112] inv'15 result}
      {[%#span111] self = Option'0.C_None
      \/ (exists r : Node'0.t_node k v . inv'4 r /\ result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span110] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span115] inv'5 self}
    {[@expl:precondition] [%#span114] color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span113] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span122] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'1 l
      /\ inv'1 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r
      /\ (RedBlackTree_Node_Type.node_left self.final, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.current)
      /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key self.current}
      {[%#span121] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span120] color'0 (RedBlackTree_Node_Type.node_right self.final) = Color'0.C_Red}
      {[%#span119] lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self.final)) (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))}
      {[%#span118] height'1 self.current = height'1 self.final}
      {[%#span117] internal_invariant'1 self.final}
      {[%#span116] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span123] inv'13 self}
    any [ return' (result:bool)-> {[%#span124] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span62] self.final = self.current
  
  use Alloc_Alloc_Global_Type as Global'0
  
  let rec as_mut'1 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span125] inv'2 self}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span128] inv'5 result}
      {[%#span127] self.final = result.final}
      {[%#span126] self.current = result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span60] inv'12 self}
    {[@expl:precondition] [%#span59] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span61] inv'2 result}
      {[%#span59] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span129] inv'8 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span132] inv'12 result}
      {[%#span131] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'2 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span130] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec delete_max_rec (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:(k, v)))= {[%#sred_black_tree2] inv'7 self}
    {[%#sred_black_tree1] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_15 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _15.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _15.final}- s2
      | s2 = as_mut'0 {_15} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_13 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _12.final ; } ] 
            s1)
      | s1 = -{inv'1 _12.final}- s2
      | s2 = as_mut'1 {_12} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &node <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 _13} s1
      | s1 = -{resolve'0 _13}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb5) ] 
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {node.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_19 <- _ret' ] 
             [ &node <- { node with current = _19.final ; } ] 
            s1)
      | s1 = -{inv'3 _19.final}- s2
      | s2 = rotate_right'0 {_19} (fun (_ret':()) ->  [ &_16 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = bb8
    | bb7 = bb8
    | bb8 = Node'0.t_node <k> <v> {node.current}
        (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
          Tree'0.t_tree <k> <v> {rright'0}
            (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
              any
              [ br0 -> {rnode'0 = Option'0.C_None } (! bb9)
              | br1 (a:Node'0.t_node k v)-> {rnode'0 = Option'0.C_Some a} (! bb15) ]
              ))
    | bb15 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rright'0} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1))
      | s1 = bb16 ]
      
    | bb16 = any [ br0 -> {_30 = false} (! bb18) | br1 -> {_30} (! bb17) ] 
    | bb17 = bb25
    | bb18 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_35 <- _ret' ] s1)))
      | s1 = bb19 ]
      
    | bb19 = s0 [ s0 = unwrap'1 {_35} (fun (_ret':Node'0.t_node k v) ->  [ &_34 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 = {[@expl:type invariant] inv'4 _34} s1
      | s1 = -{resolve'1 _34}- s2
      | s2 = Node'0.t_node <k> <v> {_34}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_32 <- _ret' ] s3))
      | s3 = bb21 ]
      
    | bb21 = any [ br0 -> {_32 = false} (! bb23) | br1 -> {_32} (! bb22) ] 
    | bb22 = bb25
    | bb25 = bb26
    | bb23 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_39 <- _ret' ] 
             [ &node <- { node with current = _39.final ; } ] 
            s1)
      | s1 = -{inv'3 _39.final}- s2
      | s2 = move_red_right'0 {_39} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_38 <- _ret' ] s3)
      | s3 = bb24 ]
      
    | bb24 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_38.current} {Borrow.get_id _38}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_37 <- _ret' ] 
             [ &_38 <- { _38 with current = _37.final ; } ] 
            s1)
      | s1 = -{inv'3 _37.final}- s2
      | s2 = {[@expl:type invariant] inv'5 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 =  [ &node <- _37 ] (any [ any_ (_any:borrowed (Node'0.t_node k v))-> (!  [ &_37 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'5 _38} s6
      | s6 = -{resolve'2 _38}- s7
      | s7 = bb26 ]
      
    | bb26 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_41 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _41.final ; } ] 
                    s1)))
      | s1 = -{inv'6 _41.final}- s2
      | s2 = delete_max_rec {_41} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb27 ]
      
    | bb27 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_43 <- _ret' ] 
             [ &node <- { node with current = _43.final ; } ] 
            s1)
      | s1 = -{inv'3 _43.final}- s2
      | s2 = balance'0 {_43} (fun (_ret':()) ->  [ &_42 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 =  [ &_0 <- r ] (any [ any_ (_any:(k, v))-> (!  [ &r <- _any ] s5) ] )
      | s5 = bb29 ]
      
    | bb29 = bb31
    | bb9 = bb10
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_26 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _26.final ; } ] 
                    s3)))
      | s3 = -{inv'0 _26.final}- s4
      | s4 = Borrow.borrow_final <Option'0.t_option (Node'0.t_node k v)> {_26.current} {Borrow.get_id _26}
          (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
             [ &_25 <- _ret' ] 
             [ &_26 <- { _26 with current = _25.final ; } ] 
            s5)
      | s5 = -{inv'0 _25.final}- s6
      | s6 = take'0 {_25} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_24 <- _ret' ] s7)
      | s7 = bb11 ]
      
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'8 _26} s1
      | s1 = -{resolve'4 _26}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 = unwrap'2 {_24} (fun (_ret':Node'0.t_node k v) ->  [ &node1 <- _ret' ] s5)
      | s5 = bb12 ]
      
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'1 node1} s1
      | s1 = -{resolve'5 node1}- s2
      | s2 = Node'0.t_node <k> <v> {node1}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Node'0.t_node <k> <v> {node1}
              (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
                 [ &_0 <- (rkey'0, rval'1) ] 
                (any
                [ any_ (_any:k)-> (! Node'0.t_node <k> <v> {node1}
                    (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                       [ &node1 <- Node'0.C_Node l_left'0 l_color'0 _any l_val'0 l_right'0 ] 
                      (any
                      [ any_ (_any:v)-> (! Node'0.t_node <k> <v> {node1}
                          (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                             [ &node1 <- Node'0.C_Node l_left'1 l_color'1 l_key'1 _any l_right'1 ] 
                            s3)) ]
                      ))) ]
                )))
      | s3 = bb13 ]
      
    | bb13 = bb14
    | bb14 = bb30
    | bb30 = bb31
    | bb31 = return' {_0} ]
    )
    [ & _0 : (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _12 : borrowed (Node'0.t_node k v) = any_l ()
    | & _13 : borrowed (Node'0.t_node k v) = any_l ()
    | & _14 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _15 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _16 : () = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : borrowed (Node'0.t_node k v) = any_l ()
    | & node1 : Node'0.t_node k v = any_l ()
    | & _24 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _25 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _26 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : bool = any_l ()
    | & _34 : Node'0.t_node k v = any_l ()
    | & _35 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _37 : borrowed (Node'0.t_node k v) = any_l ()
    | & _38 : borrowed (Node'0.t_node k v) = any_l ()
    | & _39 : borrowed (Node'0.t_node k v) = any_l ()
    | & r : (k, v) = any_l ()
    | & _41 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _42 : () = any_l ()
    | & _43 : borrowed (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:(k, v))-> {[@expl:postcondition] [%#sred_black_tree10] inv'11 result}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 self.current = Color'0.C_Black
       -> color'0 self.final = Color'0.C_Black}
      {[@expl:postcondition] [%#sred_black_tree8] color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree7] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[@expl:postcondition] [%#sred_black_tree6] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'0 self.current k v  -> le_log'0 k (deep_model'0 (let (a, _) = result in a))}
      {[@expl:postcondition] [%#sred_black_tree5] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[@expl:postcondition] [%#sred_black_tree4] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree3] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_DeleteMax
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 668 23 668 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 676 24 676 53
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 681 8 681 45
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 660 15 660 34
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 667 27 667 31
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 661 14 661 33
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 662 14 666 65
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 667 36 667 50
  
  let%span span8 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span40 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span41 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span42 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span43 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span44 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span45 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span46 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span47 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span48 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span49 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span50 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span51 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span52 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span53 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span54 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span55 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span56 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span57 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span58 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span59 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span60 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span61 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span62 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span63 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span64 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span65 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span66 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span67 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span68 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span69 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span70 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span71 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span72 = "../red_black_tree.rs" 115 12 115 61
  
  let%span span73 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span74 = "" 0 0 0 0
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "" 0 0 0 0
  
  let%span span77 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span78 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span79 = "" 0 0 0 0
  
  let%span span80 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span81 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span82 = "../red_black_tree.rs" 632 15 632 43
  
  let%span span83 = "../red_black_tree.rs" 633 15 634 62
  
  let%span span84 = "../red_black_tree.rs" 643 27 643 31
  
  let%span span85 = "../red_black_tree.rs" 635 14 635 42
  
  let%span span86 = "../red_black_tree.rs" 636 14 636 50
  
  let%span span87 = "../red_black_tree.rs" 637 14 637 66
  
  let%span span88 = "../red_black_tree.rs" 638 4 638 104
  
  let%span span89 = "../red_black_tree.rs" 639 4 640 73
  
  let%span span90 = "../red_black_tree.rs" 641 14 641 39
  
  let%span span91 = "../red_black_tree.rs" 642 4 642 69
  
  let%span span92 = "../red_black_tree.rs" 643 36 643 42
  
  let%span span93 = "../red_black_tree.rs" 43 8 45 9
  
  let%span span94 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span95 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span96 = "../red_black_tree.rs" 387 14 387 45
  
  use Core_Option_Option_Type as Option'0
  
  type deep_model_ty'0
  
  use map.Map
  
  predicate invariant'14 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span8] true
  
  predicate inv'13 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'13 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'13 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'13 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span8] true
  
  predicate inv'12 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'12 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'12 x = true
  
  predicate invariant'12 (self : (k, v)) =
    [%#span8] true
  
  predicate inv'11 (_x : (k, v))
  
  axiom inv'11 : forall x : (k, v) . inv'11 x = true
  
  predicate invariant'11 (self : v)
  
  predicate inv'10 (_x : v)
  
  axiom inv'10 : forall x : v . inv'10 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'10 (self : Tree'0.t_tree k v) =
    [%#span8] true
  
  predicate inv'9 (_x : Tree'0.t_tree k v)
  
  axiom inv'9 : forall x : Tree'0.t_tree k v . inv'9 x = true
  
  predicate invariant'9 (self : Option'0.t_option (k, v)) =
    [%#span8] true
  
  predicate inv'8 (_x : Option'0.t_option (k, v))
  
  axiom inv'8 : forall x : Option'0.t_option (k, v) . inv'8 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'7 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span9] inv'7 x)
   -> ([%#span10] inv'7 y)  -> ([%#span11] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span12] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span13] inv'7 x)  -> ([%#span14] inv'7 y)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span17] inv'7 x)  -> ([%#span18] inv'7 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span20] cmp_log'0 x y
  = o)
   -> ([%#span21] cmp_log'0 y z = o)
   -> ([%#span22] inv'7 x)  -> ([%#span23] inv'7 y)  -> ([%#span24] inv'7 z)  -> ([%#span25] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span26] inv'7 x)
   -> ([%#span27] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span28] inv'7 x)
   -> ([%#span29] inv'7 y)  -> ([%#span30] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'7 x)
   -> ([%#span32] inv'7 y)  -> ([%#span33] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'7 x)
   -> ([%#span35] inv'7 y)  -> ([%#span36] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'7 x)
   -> ([%#span38] inv'7 y)  -> ([%#span39] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'8 (self : deep_model_ty'0)
  
  axiom inv'7 : forall x : deep_model_ty'0 . inv'7 x = true
  
  predicate invariant'7 (self : Tree'0.t_tree k v) =
    [%#span8] true
  
  predicate inv'6 (_x : Tree'0.t_tree k v)
  
  axiom inv'6 : forall x : Tree'0.t_tree k v . inv'6 x = true
  
  predicate invariant'6 (self : borrowed (Node'0.t_node k v)) =
    [%#span8] true
  
  predicate inv'5 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'5 : forall x : borrowed (Node'0.t_node k v) . inv'5 x = true
  
  predicate invariant'5 (self : Node'0.t_node k v) =
    [%#span8] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'4 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span8] true
  
  predicate inv'3 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'3 : forall x : borrowed (Tree'0.t_tree k v) . inv'3 x = true
  
  predicate invariant'3 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span8] true
  
  predicate inv'2 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'2 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'2 x = true
  
  predicate invariant'2 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span8] true
  
  predicate inv'1 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'1 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'1 (self : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v))) =
    [%#span8] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v)))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v)) . inv'0 x = true
  
  use map.Const
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function shallow_model'1 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span41] model_acc'0 self (Const.const (Option'0.C_None))
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Tree'0.t_tree k v)) : Map.map deep_model_ty'0 (Option'0.t_option v) =
    [%#span42] shallow_model'1 self.current
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span43] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span44] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span46] inv'6 self)  -> ([%#span47] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span49] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span51] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span52] (forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'10 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'10 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span53] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span54] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span55] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'4 (self : Snapshot.snap_ty ()) =
    [%#span56] true
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span61] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span57] inv'6 self)
   -> ([%#span58] inv'13 accu)
   -> ([%#span59] inv'7 k)
   -> ([%#span60] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'10 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span67] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span62] bst_invariant'0 self)
   -> ([%#span63] inv'6 self)
   -> ([%#span64] inv'13 accu)
   -> ([%#span65] inv'7 k)
   -> ([%#span66] forall v : v . inv'10 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span72] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span68] bst_invariant'0 self)
   -> ([%#span69] inv'6 self)
   -> ([%#span70] inv'7 k)
   -> ([%#span71] forall v : v . inv'10 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'1 self) k = Option'0.C_Some v))
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span74] inv'12 self}
    {[@expl:precondition] [%#span73] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span75] inv'5 result}
      {[%#span73] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span76] inv'2 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span79] inv'12 result}
      {[%#span78] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'5 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span77] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use RedBlackTree_Cp_Type as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span80] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span81] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'4 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  let rec delete_max_rec'0 (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:(k, v)))= {[@expl:precondition] [%#span84] inv'3 self}
    {[@expl:precondition] [%#span83] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span82] internal_invariant'0 self.current}
    any
    [ return' (result:(k, v))-> {[%#span92] inv'11 result}
      {[%#span91] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span90] color_invariant'0 self.final}
      {[%#span89] forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'10 v
       -> has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[%#span88] forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'10 v
       -> has_mapping'0 self.current k v  -> le_log'0 k (deep_model'0 (let (a, _) = result in a))}
      {[%#span87] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[%#span86] height'0 self.current = height'0 self.final}
      {[%#span85] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 42 4 42 43] (self : Tree'0.t_tree k v) (o : Tree'0.t_tree k v) =
    [%#span93] forall k : deep_model_ty'0, v : v . inv'7 k /\ inv'10 v  -> has_mapping'0 self k v = has_mapping'0 o k v
  
  use prelude.prelude.Snapshot
  
  predicate resolve'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span94] self.final = self.current
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span95] inv'9 self}
    any [ return' (result:bool)-> {[%#span96] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span94] self.final = self.current
  
  predicate resolve'1 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span94] self.final = self.current
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v))) =
    [%#span56] true
  
  use prelude.prelude.Snapshot
  
  let rec delete_max (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:Option'0.t_option (k, v)))= {[%#sred_black_tree4] inv'3 self}
    {[%#sred_black_tree3] invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#sred_black_tree0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_self} s1
      | s1 = -{resolve'0 old_self}- s2
      | s2 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_8 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _8.final ; } ] 
                    s3)))
      | s3 = -{inv'1 _8.final}- s4
      | s4 = any
        [ br0 -> {_8.current = Option'0.C_None } (! bb8)
        | br1 (a:Node'0.t_node k v)-> {_8.current = Option'0.C_Some a} (! bb2) ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'2 _8} s1
      | s1 = -{resolve'1 _8}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb19 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Option'0.some <Node'0.t_node k v> {_8.current}
          (fun (r0'0:Node'0.t_node k v) ->
            Borrow.borrow_final <Node'0.t_node k v> {r0'0} {Borrow.inherit_id (Borrow.get_id _8) 1}
              (fun (_ret':borrowed (Node'0.t_node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.some <Node'0.t_node k v> {_8.current}
                  (fun (l_0'0:Node'0.t_node k v) ->  [ &_8 <- { _8 with current = Option'0.C_Some node.final ; } ] s1)))
      | s1 = -{inv'4 node.final}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'3 node}- s2
      | s2 = {[@expl:type invariant] inv'2 _8} s3
      | s3 = -{resolve'1 _8}- s4
      | s4 = bb7 ]
      
    | bb6 = s0
      [ s0 =  [ &_13 <- Color'0.C_Red ] s1
      | s1 = Node'0.t_node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 _13 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_13 <- _any ] s2) ] ))
      | s2 = {[@expl:type invariant] inv'5 node} s3
      | s3 = -{resolve'3 node}- s4
      | s4 = {[@expl:type invariant] inv'2 _8} s5
      | s5 = -{resolve'1 _8}- s6
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sred_black_tree1] same_mappings'0 (Snapshot.inner old_self).current self.current} s1
      | s1 = Borrow.borrow_mut <Tree'0.t_tree k v> {self.current}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_18 <- _ret' ] 
             [ &self <- { self with current = _18.final ; } ] 
            s2)
      | s2 = -{inv'6 _18.final}- s3
      | s3 = delete_max_rec'0 {_18} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s4)
      | s4 = bb9 ]
      
    | bb9 = s0 [ s0 = is_red'0 {self.current} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = any [ br0 -> {_20 = false} (! bb14) | br1 -> {_20} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_22 <- Color'0.C_Black ] s1
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_25 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _25.final ; } ] 
                    s2)))
      | s2 = -{inv'1 _25.final}- s3
      | s3 = as_mut'0 {_25} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_24 <- _ret' ] s4)
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_24} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_23 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_node <k> <v> {_23.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &_23 <- { _23 with current = Node'0.C_Node l_left'0 _22 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_22 <- _any ] s1) ] ))
      | s1 = {[@expl:type invariant] inv'5 _23} s2
      | s2 = -{resolve'3 _23}- s3
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb15 ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'2 self}- s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_26 <- [%#sred_black_tree2] Snapshot.new () ] s1 | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = -{resolve'4 _26}- s1
      | s1 =  [ &_0 <- Option'0.C_Some r ] (any [ any_ (_any:(k, v))-> (!  [ &r <- _any ] s2) ] )
      | s2 = bb17 ]
      
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v)) = any_l ()
    | & _8 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : Color'0.t_color = any_l ()
    | & r : (k, v) = any_l ()
    | & _18 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : Color'0.t_color = any_l ()
    | & _23 : borrowed (Node'0.t_node k v) = any_l ()
    | & _24 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _25 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _26 : Snapshot.snap_ty () = any_l () ]
    
    [ return' (result:Option'0.t_option (k, v))-> {[@expl:postcondition] [%#sred_black_tree7] inv'8 result}
      {[@expl:postcondition] [%#sred_black_tree6] match result with
        | Option'0.C_Some (k, v) -> Map.get (shallow_model'0 self) (deep_model'0 k) = Option'0.C_Some v
        /\ (forall k2 : deep_model_ty'0 . inv'7 k2
         -> Map.get (shallow_model'0 self) k2 = Option'0.C_None \/ le_log'0 k2 (deep_model'0 k))
        /\ shallow_model'1 self.final = Map.set (shallow_model'0 self) (deep_model'0 k) (Option'0.C_None)
        | Option'0.C_None -> shallow_model'1 self.final = shallow_model'0 self
        /\ shallow_model'0 self = Const.const (Option'0.C_None)
        end}
      {[@expl:postcondition] [%#sred_black_tree5] invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_DeleteMinRec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 685 15 685 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 686 15 687 62
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 696 27 696 31
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 688 14 688 42
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 689 14 689 50
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 690 14 690 66
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 691 4 691 104
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 692 4 693 73
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 694 14 694 39
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 695 4 695 69
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 696 36 696 42
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span43 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span44 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span45 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span46 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span47 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span48 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span49 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span50 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span51 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span52 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span53 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span54 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span55 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span56 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span57 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span58 = "../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  let%span span59 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span63 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span66 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span69 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span70 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span71 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span72 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span73 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span74 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span75 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span76 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span77 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span78 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span79 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span80 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span81 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span82 = "../red_black_tree.rs" 491 15 491 43
  
  let%span span83 = "../red_black_tree.rs" 492 4 493 47
  
  let%span span84 = "../red_black_tree.rs" 494 4 495 48
  
  let%span span85 = "../red_black_tree.rs" 496 4 496 110
  
  let%span span86 = "../red_black_tree.rs" 510 20 510 24
  
  let%span span87 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span88 = "../red_black_tree.rs" 498 14 498 42
  
  let%span span89 = "../red_black_tree.rs" 499 14 499 50
  
  let%span span90 = "../red_black_tree.rs" 500 4 501 34
  
  let%span span91 = "../red_black_tree.rs" 502 4 503 39
  
  let%span span92 = "../red_black_tree.rs" 504 4 505 63
  
  let%span span93 = "../red_black_tree.rs" 506 4 507 61
  
  let%span span94 = "../red_black_tree.rs" 508 4 509 39
  
  let%span span95 = "../red_black_tree.rs" 524 15 524 41
  
  let%span span96 = "../red_black_tree.rs" 525 15 525 43
  
  let%span span97 = "../red_black_tree.rs" 526 15 526 86
  
  let%span span98 = "../red_black_tree.rs" 542 26 542 30
  
  let%span span99 = "../red_black_tree.rs" 527 14 527 44
  
  let%span span100 = "../red_black_tree.rs" 528 4 530 48
  
  let%span span101 = "../red_black_tree.rs" 531 4 531 97
  
  let%span span102 = "../red_black_tree.rs" 532 14 532 42
  
  let%span span103 = "../red_black_tree.rs" 533 4 533 105
  
  let%span span104 = "../red_black_tree.rs" 534 4 535 47
  
  let%span span105 = "../red_black_tree.rs" 536 4 537 108
  
  let%span span106 = "../red_black_tree.rs" 538 14 539 61
  
  let%span span107 = "../red_black_tree.rs" 540 4 541 45
  
  let%span span108 = "../red_black_tree.rs" 542 35 542 44
  
  let%span span109 = "" 0 0 0 0
  
  let%span span110 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span111 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span112 = "" 0 0 0 0
  
  let%span span113 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span114 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span115 = "" 0 0 0 0
  
  let%span span116 = "../../../../creusot-contracts/src/std/boxed.rs" 35 26 35 43
  
  let%span span117 = "../../../../creusot-contracts/src/std/boxed.rs" 36 26 36 43
  
  let%span span118 = "" 0 0 0 0
  
  let%span span119 = "" 0 0 0 0
  
  let%span span120 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span121 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span122 = "" 0 0 0 0
  
  use RedBlackTree_Node_Type as Node'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'15 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'15 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'15 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'15 x = true
  
  predicate invariant'14 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'14 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'14 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'14 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'13 (self : Tree'0.t_tree k v) =
    [%#span11] true
  
  predicate inv'13 (_x : Tree'0.t_tree k v)
  
  axiom inv'13 : forall x : Tree'0.t_tree k v . inv'13 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span11] true
  
  predicate inv'12 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'12 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'12 x = true
  
  predicate invariant'11 (self : (k, v)) =
    [%#span11] true
  
  predicate inv'11 (_x : (k, v))
  
  axiom inv'11 : forall x : (k, v) . inv'11 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'9 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span12] inv'9 x)
   -> ([%#span13] inv'9 y)  -> ([%#span14] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span15] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span16] inv'9 x)  -> ([%#span17] inv'9 y)  -> ([%#span18] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span19] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span20] inv'9 x)  -> ([%#span21] inv'9 y)  -> ([%#span22] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span23] cmp_log'0 x y
  = o)
   -> ([%#span24] cmp_log'0 y z = o)
   -> ([%#span25] inv'9 x)  -> ([%#span26] inv'9 y)  -> ([%#span27] inv'9 z)  -> ([%#span28] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span29] inv'9 x)
   -> ([%#span30] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'9 x)
   -> ([%#span32] inv'9 y)  -> ([%#span33] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'9 x)
   -> ([%#span35] inv'9 y)  -> ([%#span36] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'9 x)
   -> ([%#span38] inv'9 y)  -> ([%#span39] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span40] inv'9 x)
   -> ([%#span41] inv'9 y)  -> ([%#span42] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'10 (self : v)
  
  predicate inv'10 (_x : v)
  
  axiom inv'10 : forall x : v . inv'10 x = true
  
  predicate invariant'9 (self : deep_model_ty'0)
  
  axiom inv'9 : forall x : deep_model_ty'0 . inv'9 x = true
  
  predicate invariant'8 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span11] true
  
  predicate inv'8 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'8 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span11] true
  
  predicate inv'7 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'7 : forall x : borrowed (Tree'0.t_tree k v) . inv'7 x = true
  
  predicate invariant'6 (self : Tree'0.t_tree k v) =
    [%#span11] true
  
  predicate inv'6 (_x : Tree'0.t_tree k v)
  
  axiom inv'6 : forall x : Tree'0.t_tree k v . inv'6 x = true
  
  predicate invariant'5 (self : borrowed (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'5 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'5 : forall x : borrowed (Node'0.t_node k v) . inv'5 x = true
  
  predicate invariant'4 (self : Node'0.t_node k v) =
    [%#span11] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'3 (self : Node'0.t_node k v) =
    [%#span11] true
  
  predicate inv'3 (_x : Node'0.t_node k v)
  
  axiom inv'3 : forall x : Node'0.t_node k v . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : Node'0.t_node k v) =
    [%#span11] true
  
  predicate inv'1 (_x : Node'0.t_node k v)
  
  axiom inv'1 : forall x : Node'0.t_node k v . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span11] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span43] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span44] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span47] inv'6 self)  -> ([%#span48] height'0 self >= 0)
  
  use RedBlackTree_Cp_Type as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span50] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span51] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'1 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span52] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span53] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span54] (forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span55] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span56] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : Node'0.t_node k v) =
    [%#span57] true
  
  predicate resolve'5 (self : Node'0.t_node k v) =
    [%#span58] resolve'6 self
  
  let rec unwrap'2 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span60] inv'0 self}
    {[@expl:precondition] [%#span59] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span61] inv'1 result}
      {[%#span59] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span62] self.final = self.current
  
  predicate is_default'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span63] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span64] inv'8 dest}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span67] inv'0 result}
      {[%#span66] is_default'0 dest.final}
      {[%#span65] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span62] self.final = self.current
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span68] color_invariant_here'0 self
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span69] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span72] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'0 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_node k v . ([%#span70] inv'4 self)
   -> ([%#span71] forall node : Node'0.t_node k v . inv'1 node
   -> self = node  -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span77] has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span73] inv'4 self)
   -> ([%#span74] inv'9 k)
   -> ([%#span75] inv'10 v)
   -> ([%#span76] forall node : Node'0.t_node k v . inv'1 node
   -> self = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span78] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v  -> has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span79] height_invariant_here'0 self
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span80] bst_invariant_here'0 self
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span81] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span86] inv'5 self}
    {[@expl:precondition] [%#span85] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span84] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span83] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)}
    {[@expl:precondition] [%#span82] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span94] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span93] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span92] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span91] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span90] color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)
      /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span89] height'1 self.current = height'1 self.final}
      {[%#span88] internal_invariant'1 self.final}
      {[%#span87] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span62] self.final = self.current
  
  let rec move_red_left'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span98] inv'5 self}
    {[@expl:precondition] [%#span97] match_n'0 (cpn'0 (Color'0.C_Red) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span96] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span95] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span108] inv'5 result}
      {[%#span107] color_invariant'1 result.final
      /\ (color'0 (RedBlackTree_Node_Type.node_right result.current) = Color'0.C_Black
       -> RedBlackTree_Node_Type.node_color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span106] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span105] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span104] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 self.current k v /\ le_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self.current))
       -> has_mapping'1 result.current k v}
      {[%#span103] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 result.current k v  -> has_mapping'1 self.current k v}
      {[%#span102] RedBlackTree_Node_Type.node_key self.current = RedBlackTree_Node_Type.node_key result.current}
      {[%#span101] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span100] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)  -> internal_invariant'1 self.final}
      {[%#span99] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : Node'0.t_node k v) =
    [%#span57] true
  
  let rec unwrap'1 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span60] inv'15 self}
    {[@expl:precondition] [%#span59] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span61] inv'3 result}
      {[%#span59] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span109] inv'14 self}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span112] inv'15 result}
      {[%#span111] self = Option'0.C_None
      \/ (exists r : Node'0.t_node k v . inv'3 r /\ result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span110] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span113] inv'13 self}
    any [ return' (result:bool)-> {[%#span114] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span62] self.final = self.current
  
  use Alloc_Alloc_Global_Type as Global'0
  
  let rec as_mut'1 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span115] inv'2 self}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span118] inv'5 result}
      {[%#span117] self.final = result.final}
      {[%#span116] self.current = result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span60] inv'12 self}
    {[@expl:precondition] [%#span59] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span61] inv'2 result}
      {[%#span59] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span119] inv'8 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span122] inv'12 result}
      {[%#span121] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'2 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span120] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec delete_min_rec (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:(k, v)))= {[%#sred_black_tree2] inv'7 self}
    {[%#sred_black_tree1] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_15 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _15.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _15.final}- s2
      | s2 = as_mut'0 {_15} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_13 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _12.final ; } ] 
            s1)
      | s1 = -{inv'1 _12.final}- s2
      | s2 = as_mut'1 {_12} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &node <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 _13} s1
      | s1 = -{resolve'0 _13}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                any
                [ br0 -> {rnode'0 = Option'0.C_None } (! bb4)
                | br1 (a:Node'0.t_node k v)-> {rnode'0 = Option'0.C_Some a} (! bb10) ]
                )) ]
      
    | bb10 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1))
      | s1 = bb11 ]
      
    | bb11 = any [ br0 -> {_26 = false} (! bb13) | br1 -> {_26} (! bb12) ] 
    | bb12 = bb20
    | bb13 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_31 <- _ret' ] s1)))
      | s1 = bb14 ]
      
    | bb14 = s0 [ s0 = unwrap'1 {_31} (fun (_ret':Node'0.t_node k v) ->  [ &_30 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'3 _30} s1
      | s1 = -{resolve'1 _30}- s2
      | s2 = Node'0.t_node <k> <v> {_30}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s3))
      | s3 = bb16 ]
      
    | bb16 = any [ br0 -> {_28 = false} (! bb18) | br1 -> {_28} (! bb17) ] 
    | bb17 = bb20
    | bb20 = bb21
    | bb18 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_35 <- _ret' ] 
             [ &node <- { node with current = _35.final ; } ] 
            s1)
      | s1 = -{inv'4 _35.final}- s2
      | s2 = move_red_left'0 {_35} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_34 <- _ret' ] s3)
      | s3 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_34.current} {Borrow.get_id _34}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_33 <- _ret' ] 
             [ &_34 <- { _34 with current = _33.final ; } ] 
            s1)
      | s1 = -{inv'4 _33.final}- s2
      | s2 = {[@expl:type invariant] inv'5 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 =  [ &node <- _33 ] (any [ any_ (_any:borrowed (Node'0.t_node k v))-> (!  [ &_33 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'5 _34} s6
      | s6 = -{resolve'2 _34}- s7
      | s7 = bb21 ]
      
    | bb21 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_37 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node _37.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'6 _37.final}- s2
      | s2 = delete_min_rec {_37} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb22 ]
      
    | bb22 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_39 <- _ret' ] 
             [ &node <- { node with current = _39.final ; } ] 
            s1)
      | s1 = -{inv'4 _39.final}- s2
      | s2 = balance'0 {_39} (fun (_ret':()) ->  [ &_38 <- _ret' ] s3)
      | s3 = bb23 ]
      
    | bb23 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 =  [ &_0 <- r ] (any [ any_ (_any:(k, v))-> (!  [ &r <- _any ] s5) ] )
      | s5 = bb24 ]
      
    | bb24 = bb26
    | bb4 = bb5
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_22 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _22.final ; } ] 
                    s3)))
      | s3 = -{inv'0 _22.final}- s4
      | s4 = Borrow.borrow_final <Option'0.t_option (Node'0.t_node k v)> {_22.current} {Borrow.get_id _22}
          (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
             [ &_21 <- _ret' ] 
             [ &_22 <- { _22 with current = _21.final ; } ] 
            s5)
      | s5 = -{inv'0 _21.final}- s6
      | s6 = take'0 {_21} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_20 <- _ret' ] s7)
      | s7 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'8 _22} s1
      | s1 = -{resolve'4 _22}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 = unwrap'2 {_20} (fun (_ret':Node'0.t_node k v) ->  [ &node1 <- _ret' ] s5)
      | s5 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 node1} s1
      | s1 = -{resolve'5 node1}- s2
      | s2 = Node'0.t_node <k> <v> {node1}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Node'0.t_node <k> <v> {node1}
              (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
                 [ &_0 <- (rkey'0, rval'1) ] 
                (any
                [ any_ (_any:k)-> (! Node'0.t_node <k> <v> {node1}
                    (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                       [ &node1 <- Node'0.C_Node l_left'0 l_color'0 _any l_val'0 l_right'0 ] 
                      (any
                      [ any_ (_any:v)-> (! Node'0.t_node <k> <v> {node1}
                          (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                             [ &node1 <- Node'0.C_Node l_left'1 l_color'1 l_key'1 _any l_right'1 ] 
                            s3)) ]
                      ))) ]
                )))
      | s3 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb25
    | bb25 = bb26
    | bb26 = return' {_0} ]
    )
    [ & _0 : (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _12 : borrowed (Node'0.t_node k v) = any_l ()
    | & _13 : borrowed (Node'0.t_node k v) = any_l ()
    | & _14 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _15 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & node1 : Node'0.t_node k v = any_l ()
    | & _20 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _21 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _26 : bool = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : Node'0.t_node k v = any_l ()
    | & _31 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _33 : borrowed (Node'0.t_node k v) = any_l ()
    | & _34 : borrowed (Node'0.t_node k v) = any_l ()
    | & _35 : borrowed (Node'0.t_node k v) = any_l ()
    | & r : (k, v) = any_l ()
    | & _37 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _38 : () = any_l ()
    | & _39 : borrowed (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:(k, v))-> {[@expl:postcondition] [%#sred_black_tree10] inv'11 result}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 self.current = Color'0.C_Black
       -> color'0 self.final = Color'0.C_Black}
      {[@expl:postcondition] [%#sred_black_tree8] color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree7] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[@expl:postcondition] [%#sred_black_tree6] forall k : deep_model_ty'0, v : v . inv'9 k /\ inv'10 v
       -> has_mapping'0 self.current k v  -> le_log'0 (deep_model'0 (let (a, _) = result in a)) k}
      {[@expl:postcondition] [%#sred_black_tree5] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[@expl:postcondition] [%#sred_black_tree4] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree3] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_DeleteMin
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 720 8 720 45
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 710 15 710 34
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 719 27 719 31
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 711 14 711 33
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 712 14 718 5
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 719 36 719 50
  
  let%span span6 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span38 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span39 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span40 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span41 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span42 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span43 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span44 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span45 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span46 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span47 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span48 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span49 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span50 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span51 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span52 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span53 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span54 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span55 = "" 0 0 0 0
  
  let%span span56 = "" 0 0 0 0
  
  let%span span57 = "" 0 0 0 0
  
  let%span span58 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span59 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span62 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span63 = "../red_black_tree.rs" 685 15 685 43
  
  let%span span64 = "../red_black_tree.rs" 686 15 687 62
  
  let%span span65 = "../red_black_tree.rs" 696 27 696 31
  
  let%span span66 = "../red_black_tree.rs" 688 14 688 42
  
  let%span span67 = "../red_black_tree.rs" 689 14 689 50
  
  let%span span68 = "../red_black_tree.rs" 690 14 690 66
  
  let%span span69 = "../red_black_tree.rs" 691 4 691 104
  
  let%span span70 = "../red_black_tree.rs" 692 4 693 73
  
  let%span span71 = "../red_black_tree.rs" 694 14 694 39
  
  let%span span72 = "../red_black_tree.rs" 695 4 695 69
  
  let%span span73 = "../red_black_tree.rs" 696 36 696 42
  
  let%span span74 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span75 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span76 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span77 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span78 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span79 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span80 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span81 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span82 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span83 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span84 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span85 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span86 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span87 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span88 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span89 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span90 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span91 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span92 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span93 = "../red_black_tree.rs" 115 12 115 61
  
  use Core_Option_Option_Type as Option'0
  
  type deep_model_ty'0
  
  use map.Map
  
  predicate invariant'13 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span6] true
  
  predicate inv'12 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'12 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'12 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span6] true
  
  predicate inv'11 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'11 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'11 x = true
  
  predicate invariant'11 (self : (k, v)) =
    [%#span6] true
  
  predicate inv'10 (_x : (k, v))
  
  axiom inv'10 : forall x : (k, v) . inv'10 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'10 (self : Tree'0.t_tree k v) =
    [%#span6] true
  
  predicate inv'9 (_x : Tree'0.t_tree k v)
  
  axiom inv'9 : forall x : Tree'0.t_tree k v . inv'9 x = true
  
  predicate invariant'9 (self : v)
  
  predicate inv'8 (_x : v)
  
  axiom inv'8 : forall x : v . inv'8 x = true
  
  predicate invariant'8 (self : Option'0.t_option (k, v)) =
    [%#span6] true
  
  predicate inv'7 (_x : Option'0.t_option (k, v))
  
  axiom inv'7 : forall x : Option'0.t_option (k, v) . inv'7 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'6 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span7] inv'6 x)
   -> ([%#span8] inv'6 y)  -> ([%#span9] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span10] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span11] inv'6 x)  -> ([%#span12] inv'6 y)  -> ([%#span13] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span15] inv'6 x)  -> ([%#span16] inv'6 y)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span18] cmp_log'0 x y
  = o)
   -> ([%#span19] cmp_log'0 y z = o)
   -> ([%#span20] inv'6 x)  -> ([%#span21] inv'6 y)  -> ([%#span22] inv'6 z)  -> ([%#span23] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span24] inv'6 x)
   -> ([%#span25] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span26] inv'6 x)
   -> ([%#span27] inv'6 y)  -> ([%#span28] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span29] inv'6 x)
   -> ([%#span30] inv'6 y)  -> ([%#span31] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'6 x)
   -> ([%#span33] inv'6 y)  -> ([%#span34] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'6 x)
   -> ([%#span36] inv'6 y)  -> ([%#span37] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'7 (self : deep_model_ty'0)
  
  axiom inv'6 : forall x : deep_model_ty'0 . inv'6 x = true
  
  predicate invariant'6 (self : Tree'0.t_tree k v) =
    [%#span6] true
  
  predicate inv'5 (_x : Tree'0.t_tree k v)
  
  axiom inv'5 : forall x : Tree'0.t_tree k v . inv'5 x = true
  
  predicate invariant'5 (self : borrowed (Node'0.t_node k v)) =
    [%#span6] true
  
  predicate inv'4 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'4 : forall x : borrowed (Node'0.t_node k v) . inv'4 x = true
  
  predicate invariant'4 (self : Node'0.t_node k v) =
    [%#span6] true
  
  predicate inv'3 (_x : Node'0.t_node k v)
  
  axiom inv'3 : forall x : Node'0.t_node k v . inv'3 x = true
  
  predicate invariant'3 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span6] true
  
  predicate inv'2 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'2 : forall x : borrowed (Tree'0.t_tree k v) . inv'2 x = true
  
  predicate invariant'2 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span6] true
  
  predicate inv'1 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'1 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'1 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span6] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  use map.Const
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span38] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function shallow_model'1 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span39] model_acc'0 self (Const.const (Option'0.C_None))
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Tree'0.t_tree k v)) : Map.map deep_model_ty'0 (Option'0.t_option v) =
    [%#span40] shallow_model'1 self.current
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span41] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span42] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span43] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span44] inv'5 self)  -> ([%#span45] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span47] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span50] (forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'8 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'8 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span51] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span52] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span53] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span55] inv'11 self}
    {[@expl:precondition] [%#span54] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span56] inv'4 result}
      {[%#span54] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span57] inv'1 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span60] inv'11 result}
      {[%#span59] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'4 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span58] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use RedBlackTree_Cp_Type as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span61] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span62] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'3 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  let rec delete_min_rec'0 (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:(k, v)))= {[@expl:precondition] [%#span65] inv'2 self}
    {[@expl:precondition] [%#span64] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span63] internal_invariant'0 self.current}
    any
    [ return' (result:(k, v))-> {[%#span73] inv'10 result}
      {[%#span72] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span71] color_invariant'0 self.final}
      {[%#span70] forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'8 v
       -> has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[%#span69] forall k : deep_model_ty'0, v : v . inv'6 k /\ inv'8 v
       -> has_mapping'0 self.current k v  -> le_log'0 (deep_model'0 (let (a, _) = result in a)) k}
      {[%#span68] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[%#span67] height'0 self.current = height'0 self.final}
      {[%#span66] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Node'0.t_node k v)) =
    [%#span74] self.final = self.current
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span75] inv'9 self}
    any [ return' (result:bool)-> {[%#span76] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'2 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span74] self.final = self.current
  
  predicate resolve'1 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span74] self.final = self.current
  
  predicate resolve'0 (self : Snapshot.snap_ty ()) =
    [%#span77] true
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span82] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span78] inv'5 self)
   -> ([%#span79] inv'12 accu)
   -> ([%#span80] inv'6 k)
   -> ([%#span81] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'8 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span88] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span83] bst_invariant'0 self)
   -> ([%#span84] inv'5 self)
   -> ([%#span85] inv'12 accu)
   -> ([%#span86] inv'6 k)
   -> ([%#span87] forall v : v . inv'8 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span93] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span89] bst_invariant'0 self)
   -> ([%#span90] inv'5 self)
   -> ([%#span91] inv'6 k)
   -> ([%#span92] forall v : v . inv'8 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'1 self) k = Option'0.C_Some v))
  
  let rec delete_min (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:Option'0.t_option (k, v)))= {[%#sred_black_tree2] inv'2 self}
    {[%#sred_black_tree1] invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_8 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _8.final ; } ] 
                    s2)))
      | s2 = -{inv'0 _8.final}- s3
      | s3 = any
        [ br0 -> {_8.current = Option'0.C_None } (! bb8)
        | br1 (a:Node'0.t_node k v)-> {_8.current = Option'0.C_Some a} (! bb2) ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 _8} s1
      | s1 = -{resolve'1 _8}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb18 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Option'0.some <Node'0.t_node k v> {_8.current}
          (fun (r0'0:Node'0.t_node k v) ->
            Borrow.borrow_final <Node'0.t_node k v> {r0'0} {Borrow.inherit_id (Borrow.get_id _8) 1}
              (fun (_ret':borrowed (Node'0.t_node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.some <Node'0.t_node k v> {_8.current}
                  (fun (l_0'0:Node'0.t_node k v) ->  [ &_8 <- { _8 with current = Option'0.C_Some node.final ; } ] s1)))
      | s1 = -{inv'3 node.final}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 node} s1
      | s1 = -{resolve'3 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _8} s3
      | s3 = -{resolve'1 _8}- s4
      | s4 = bb7 ]
      
    | bb6 = s0
      [ s0 =  [ &_13 <- Color'0.C_Red ] s1
      | s1 = Node'0.t_node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 _13 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_13 <- _any ] s2) ] ))
      | s2 = {[@expl:type invariant] inv'4 node} s3
      | s3 = -{resolve'3 node}- s4
      | s4 = {[@expl:type invariant] inv'1 _8} s5
      | s5 = -{resolve'1 _8}- s6
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_mut <Tree'0.t_tree k v> {self.current}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_16 <- _ret' ] 
             [ &self <- { self with current = _16.final ; } ] 
            s1)
      | s1 = -{inv'5 _16.final}- s2
      | s2 = delete_min_rec'0 {_16} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0 [ s0 = is_red'0 {self.current} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = any [ br0 -> {_18 = false} (! bb14) | br1 -> {_18} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_20 <- Color'0.C_Black ] s1
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_23 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _23.final ; } ] 
                    s2)))
      | s2 = -{inv'0 _23.final}- s3
      | s3 = as_mut'0 {_23} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_22 <- _ret' ] s4)
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_22} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_21 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_node <k> <v> {_21.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &_21 <- { _21 with current = Node'0.C_Node l_left'0 _20 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_20 <- _any ] s1) ] ))
      | s1 = {[@expl:type invariant] inv'4 _21} s2
      | s2 = -{resolve'3 _21}- s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb15 ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'2 self}- s2 | s2 = bb15 ] 
    | bb15 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some r ] (any [ any_ (_any:(k, v))-> (!  [ &r <- _any ] s1) ] ) | s1 = bb16 ]
      
    | bb16 = bb17
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & _5 : Snapshot.snap_ty () = any_l ()
    | & _8 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : Color'0.t_color = any_l ()
    | & r : (k, v) = any_l ()
    | & _16 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : Color'0.t_color = any_l ()
    | & _21 : borrowed (Node'0.t_node k v) = any_l ()
    | & _22 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _23 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l () ]
    
    [ return' (result:Option'0.t_option (k, v))-> {[@expl:postcondition] [%#sred_black_tree5] inv'7 result}
      {[@expl:postcondition] [%#sred_black_tree4] match result with
        | Option'0.C_Some (k, v) -> Map.get (shallow_model'0 self) (deep_model'0 k) = Option'0.C_Some v
        /\ (forall k2 : deep_model_ty'0 . inv'6 k2
         -> Map.get (shallow_model'0 self) k2 = Option'0.C_None \/ le_log'0 (deep_model'0 k) k2)
        /\ shallow_model'1 self.final = Map.set (shallow_model'0 self) (deep_model'0 k) (Option'0.C_None)
        | Option'0.C_None -> shallow_model'1 self.final = shallow_model'0 self
        /\ shallow_model'0 self = Const.const (Option'0.C_None)
        end}
      {[@expl:postcondition] [%#sred_black_tree3] invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_DeleteRec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 778 24 778 59
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 736 15 736 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 737 15 738 62
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 748 23 748 27
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 748 29 748 32
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 739 14 739 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 740 14 740 50
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 741 14 744 5
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 745 4 745 129
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 746 14 746 39
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 747 4 747 69
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 748 41 748 55
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span44 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span45 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span46 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span47 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span48 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span49 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span50 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span51 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span52 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span53 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span54 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span55 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span56 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span57 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span58 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span59 = "../red_black_tree.rs" 287 8 287 112
  
  let%span span60 = "../red_black_tree.rs" 246 12 249 13
  
  let%span span61 = "../red_black_tree.rs" 328 14 328 18
  
  let%span span62 = "../red_black_tree.rs" 326 4 327 77
  
  let%span span63 = "../red_black_tree.rs" 330 12 333 13
  
  let%span span64 = "../red_black_tree.rs" 140 19 140 23
  
  let%span span65 = "../red_black_tree.rs" 140 25 140 26
  
  let%span span66 = "../red_black_tree.rs" 140 44 140 45
  
  let%span span67 = "../red_black_tree.rs" 138 4 139 86
  
  let%span span68 = "../red_black_tree.rs" 141 8 144 9
  
  let%span span69 = "../red_black_tree.rs" 149 8 151 9
  
  let%span span70 = "../red_black_tree.rs" 344 8 344 115
  
  let%span span71 = "../red_black_tree.rs" 193 8 195 9
  
  let%span span72 = "../red_black_tree.rs" 379 12 379 59
  
  let%span span73 = "../red_black_tree.rs" 491 15 491 43
  
  let%span span74 = "../red_black_tree.rs" 492 4 493 47
  
  let%span span75 = "../red_black_tree.rs" 494 4 495 48
  
  let%span span76 = "../red_black_tree.rs" 496 4 496 110
  
  let%span span77 = "../red_black_tree.rs" 510 20 510 24
  
  let%span span78 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span79 = "../red_black_tree.rs" 498 14 498 42
  
  let%span span80 = "../red_black_tree.rs" 499 14 499 50
  
  let%span span81 = "../red_black_tree.rs" 500 4 501 34
  
  let%span span82 = "../red_black_tree.rs" 502 4 503 39
  
  let%span span83 = "../red_black_tree.rs" 504 4 505 63
  
  let%span span84 = "../red_black_tree.rs" 506 4 507 61
  
  let%span span85 = "../red_black_tree.rs" 508 4 509 39
  
  let%span span86 = "../red_black_tree.rs" 524 15 524 41
  
  let%span span87 = "../red_black_tree.rs" 525 15 525 43
  
  let%span span88 = "../red_black_tree.rs" 526 15 526 86
  
  let%span span89 = "../red_black_tree.rs" 542 26 542 30
  
  let%span span90 = "../red_black_tree.rs" 527 14 527 44
  
  let%span span91 = "../red_black_tree.rs" 528 4 530 48
  
  let%span span92 = "../red_black_tree.rs" 531 4 531 97
  
  let%span span93 = "../red_black_tree.rs" 532 14 532 42
  
  let%span span94 = "../red_black_tree.rs" 533 4 533 105
  
  let%span span95 = "../red_black_tree.rs" 534 4 535 47
  
  let%span span96 = "../red_black_tree.rs" 536 4 537 108
  
  let%span span97 = "../red_black_tree.rs" 538 14 539 61
  
  let%span span98 = "../red_black_tree.rs" 540 4 541 45
  
  let%span span99 = "../red_black_tree.rs" 542 35 542 44
  
  let%span span100 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span101 = "" 0 0 0 0
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span104 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span105 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span106 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span107 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span108 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span109 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span110 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span111 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span112 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span113 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span114 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span115 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span116 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span117 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span118 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span119 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span120 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span121 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span122 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span123 = "../red_black_tree.rs" 115 12 115 61
  
  let%span span124 = "../red_black_tree.rs" 121 15 121 35
  
  let%span span125 = "../red_black_tree.rs" 122 15 122 38
  
  let%span span126 = "../red_black_tree.rs" 123 15 123 38
  
  let%span span127 = "../red_black_tree.rs" 125 23 125 27
  
  let%span span128 = "../red_black_tree.rs" 125 29 125 30
  
  let%span span129 = "../red_black_tree.rs" 125 48 125 50
  
  let%span span130 = "../red_black_tree.rs" 125 55 125 57
  
  let%span span131 = "../red_black_tree.rs" 124 14 124 22
  
  let%span span132 = "../red_black_tree.rs" 130 12 130 37
  
  let%span span133 = "../red_black_tree.rs" 685 15 685 43
  
  let%span span134 = "../red_black_tree.rs" 686 15 687 62
  
  let%span span135 = "../red_black_tree.rs" 696 27 696 31
  
  let%span span136 = "../red_black_tree.rs" 688 14 688 42
  
  let%span span137 = "../red_black_tree.rs" 689 14 689 50
  
  let%span span138 = "../red_black_tree.rs" 690 14 690 66
  
  let%span span139 = "../red_black_tree.rs" 691 4 691 104
  
  let%span span140 = "../red_black_tree.rs" 692 4 693 73
  
  let%span span141 = "../red_black_tree.rs" 694 14 694 39
  
  let%span span142 = "../red_black_tree.rs" 695 4 695 69
  
  let%span span143 = "../red_black_tree.rs" 696 36 696 42
  
  let%span span144 = "../red_black_tree.rs" 553 15 553 40
  
  let%span span145 = "../red_black_tree.rs" 554 15 554 43
  
  let%span span146 = "../red_black_tree.rs" 555 15 555 86
  
  let%span span147 = "../red_black_tree.rs" 571 27 571 31
  
  let%span span148 = "../red_black_tree.rs" 556 14 556 44
  
  let%span span149 = "../red_black_tree.rs" 557 4 559 48
  
  let%span span150 = "../red_black_tree.rs" 560 4 560 97
  
  let%span span151 = "../red_black_tree.rs" 561 14 561 42
  
  let%span span152 = "../red_black_tree.rs" 562 4 562 105
  
  let%span span153 = "../red_black_tree.rs" 563 4 564 47
  
  let%span span154 = "../red_black_tree.rs" 565 4 566 108
  
  let%span span155 = "../red_black_tree.rs" 567 14 568 61
  
  let%span span156 = "../red_black_tree.rs" 569 4 570 45
  
  let%span span157 = "../red_black_tree.rs" 571 36 571 45
  
  let%span span158 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span159 = "" 0 0 0 0
  
  let%span span160 = "" 0 0 0 0
  
  let%span span161 = "" 0 0 0 0
  
  let%span span162 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span163 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span164 = "" 0 0 0 0
  
  let%span span165 = "../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  let%span span166 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span167 = "" 0 0 0 0
  
  let%span span168 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span169 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span170 = "" 0 0 0 0
  
  let%span span171 = "" 0 0 0 0
  
  let%span span172 = "../../../../creusot-contracts/src/std/option.rs" 39 26 39 51
  
  let%span span173 = "../red_black_tree.rs" 400 15 400 43
  
  let%span span174 = "../red_black_tree.rs" 401 15 401 42
  
  let%span span175 = "../red_black_tree.rs" 412 25 412 29
  
  let%span span176 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span177 = "../red_black_tree.rs" 403 14 403 42
  
  let%span span178 = "../red_black_tree.rs" 404 14 404 50
  
  let%span span179 = "../red_black_tree.rs" 405 14 405 65
  
  let%span span180 = "../red_black_tree.rs" 406 14 406 42
  
  let%span span181 = "../red_black_tree.rs" 407 14 407 44
  
  let%span span182 = "../red_black_tree.rs" 408 4 411 36
  
  let%span span183 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span184 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span185 = "" 0 0 0 0
  
  let%span span186 = "" 0 0 0 0
  
  let%span span187 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span188 = "" 0 0 0 0
  
  let%span span189 = "../../../../creusot-contracts/src/std/boxed.rs" 35 26 35 43
  
  let%span span190 = "../../../../creusot-contracts/src/std/boxed.rs" 36 26 36 43
  
  let%span span191 = "" 0 0 0 0
  
  let%span span192 = "" 0 0 0 0
  
  let%span span193 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span194 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span195 = "" 0 0 0 0
  
  use Core_Option_Option_Type as Option'0
  
  type deep_model_ty'0
  
  use map.Map
  
  predicate invariant'21 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span12] true
  
  predicate inv'21 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'21 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'21 x = true
  
  predicate invariant'20 (self : (k, v)) =
    [%#span12] true
  
  predicate inv'20 (_x : (k, v))
  
  axiom inv'20 : forall x : (k, v) . inv'20 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'19 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'19 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'19 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'19 x = true
  
  predicate invariant'18 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'18 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'18 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'18 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'17 (self : Tree'0.t_tree k v) =
    [%#span12] true
  
  predicate inv'17 (_x : Tree'0.t_tree k v)
  
  axiom inv'17 : forall x : Tree'0.t_tree k v . inv'17 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'14 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span13] inv'14 x)
   -> ([%#span14] inv'14 y)  -> ([%#span15] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span17] inv'14 x)  -> ([%#span18] inv'14 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span21] inv'14 x)  -> ([%#span22] inv'14 y)  -> ([%#span23] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span24] cmp_log'0 x y
  = o)
   -> ([%#span25] cmp_log'0 y z = o)
   -> ([%#span26] inv'14 x)  -> ([%#span27] inv'14 y)  -> ([%#span28] inv'14 z)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span30] inv'14 x)
   -> ([%#span31] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'14 x)
   -> ([%#span33] inv'14 y)  -> ([%#span34] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'14 x)
   -> ([%#span36] inv'14 y)  -> ([%#span37] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span38] inv'14 x)
   -> ([%#span39] inv'14 y)  -> ([%#span40] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span41] inv'14 x)
   -> ([%#span42] inv'14 y)  -> ([%#span43] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use prelude.prelude.Borrow
  
  predicate invariant'16 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'16 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'16 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'16 x = true
  
  predicate invariant'15 (self : Option'0.t_option (k, v)) =
    [%#span12] true
  
  predicate inv'15 (_x : Option'0.t_option (k, v))
  
  axiom inv'15 : forall x : Option'0.t_option (k, v) . inv'15 x = true
  
  predicate invariant'14 (self : deep_model_ty'0)
  
  axiom inv'14 : forall x : deep_model_ty'0 . inv'14 x = true
  
  predicate invariant'13 (self : borrowed v)
  
  predicate inv'13 (_x : borrowed v)
  
  axiom inv'13 : forall x : borrowed v . inv'13 x = true
  
  predicate invariant'12 (self : v)
  
  predicate inv'12 (_x : v)
  
  axiom inv'12 : forall x : v . inv'12 x = true
  
  predicate invariant'11 (self : borrowed k)
  
  predicate inv'11 (_x : borrowed k)
  
  axiom inv'11 : forall x : borrowed k . inv'11 x = true
  
  predicate invariant'10 (self : k)
  
  predicate inv'10 (_x : k)
  
  axiom inv'10 : forall x : k . inv'10 x = true
  
  predicate invariant'9 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'9 (_x : Node'0.t_node k v)
  
  axiom inv'9 : forall x : Node'0.t_node k v . inv'9 x = true
  
  predicate invariant'8 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span12] true
  
  predicate inv'8 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'8 : forall x : borrowed (Tree'0.t_tree k v) . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'7 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'7 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'7 x = true
  
  predicate invariant'6 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'6 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'6 : forall x : borrowed (Node'0.t_node k v) . inv'6 x = true
  
  predicate invariant'5 (self : Tree'0.t_tree k v) =
    [%#span12] true
  
  predicate inv'5 (_x : Tree'0.t_tree k v)
  
  axiom inv'5 : forall x : Tree'0.t_tree k v . inv'5 x = true
  
  predicate invariant'4 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'3 (self : k)
  
  predicate inv'3 (_x : k)
  
  axiom inv'3 : forall x : k . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'2 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'2 : forall x : borrowed (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'1 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'1 (_x : Node'0.t_node k v)
  
  axiom inv'1 : forall x : Node'0.t_node k v . inv'1 x = true
  
  predicate invariant'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  use RedBlackTree_Color_Type as Color'0
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span44] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span45] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  function deep_model'1 (self : k) : deep_model_ty'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span47] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'1 key /\ v = val'
      end
  
  function deep_model'0 (self : k) : deep_model_ty'0 =
    [%#span48] deep_model'1 self
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span51] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span49] inv'5 self)  -> ([%#span50] height'0 self >= 0)
  
  use RedBlackTree_Cp_Type as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span52] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span53] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'1 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span54] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span55] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span56] (forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'1 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'1 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span57] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span58] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 286 4 286 36] (self : Node'0.t_node k v) =
    [%#span59] color_invariant_here'0 self
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ color_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 244 4 244 52] (self : CP'0.t_cp) (node : Node'0.t_node k v) =
    [%#span60] match self with
      | CP'0.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 328 4 328 26] (self : Node'0.t_node k v) : int =
    [%#span63] match RedBlackTree_Node_Type.node_color self with
      | Color'0.C_Red -> height'0 (RedBlackTree_Node_Type.node_left self)
      | Color'0.C_Black -> height'0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_node k v . ([%#span61] inv'4 self)
   -> ([%#span62] forall node : Node'0.t_node k v . inv'1 node
   -> self = node  -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node)))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 140 4 140 57] (self : Node'0.t_node k v) (k : deep_model_ty'0) (v : v)
    
   =
    [%#span68] has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
    \/ has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
    \/ k = deep_model'1 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_node k v, k : deep_model_ty'0, v : v . ([%#span64] inv'4 self)
   -> ([%#span65] inv'14 k)
   -> ([%#span66] inv'12 v)
   -> ([%#span67] forall node : Node'0.t_node k v . inv'1 node
   -> self = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v)
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 148 4 148 43] (self : Node'0.t_node k v) (o : Node'0.t_node k v) =
    [%#span69] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v  -> has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 343 4 343 37] (self : Node'0.t_node k v) =
    [%#span70] height_invariant_here'0 self
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ height_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 192 4 192 34] (self : Node'0.t_node k v) =
    [%#span71] bst_invariant_here'0 self
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_left self)
    /\ bst_invariant'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 377 4 377 43] (self : Node'0.t_node k v) =
    [%#span72] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span77] inv'6 self}
    {[@expl:precondition] [%#span76] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span75] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_right self.current)}
    {[@expl:precondition] [%#span74] RedBlackTree_Node_Type.node_color self.current = Color'0.C_Red
    /\ color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red
     -> color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)}
    {[@expl:precondition] [%#span73] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span85] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span84] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span83] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span82] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span81] color_invariant'0 (RedBlackTree_Node_Type.node_left self.current)
      /\ color'0 (RedBlackTree_Node_Type.node_right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span80] height'1 self.current = height'1 self.final}
      {[%#span79] internal_invariant'1 self.final}
      {[%#span78] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec move_red_left'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span89] inv'6 self}
    {[@expl:precondition] [%#span88] match_n'0 (cpn'0 (Color'0.C_Red) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span87] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span86] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span99] inv'6 result}
      {[%#span98] color_invariant'1 result.final
      /\ (color'0 (RedBlackTree_Node_Type.node_right result.current) = Color'0.C_Black
       -> RedBlackTree_Node_Type.node_color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span97] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span96] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span95] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 self.current k v /\ le_log'0 k (deep_model'1 (RedBlackTree_Node_Type.node_key self.current))
       -> has_mapping'1 result.current k v}
      {[%#span94] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 result.current k v  -> has_mapping'1 self.current k v}
      {[%#span93] RedBlackTree_Node_Type.node_key self.current = RedBlackTree_Node_Type.node_key result.current}
      {[%#span92] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span91] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)  -> internal_invariant'1 self.final}
      {[%#span90] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  predicate resolve'9 (self : borrowed v) =
    [%#span100] self.final = self.current
  
  let rec swap'1 (x:borrowed v) (y:borrowed v) (return'  (ret:()))= {[@expl:precondition] [%#span102] inv'13 y}
    {[@expl:precondition] [%#span101] inv'13 x}
    any
    [ return' (result:())-> {[%#span104] y.final = x.current} {[%#span103] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'8 (self : borrowed k) =
    [%#span100] self.final = self.current
  
  let rec swap'0 (x:borrowed k) (y:borrowed k) (return'  (ret:()))= {[@expl:precondition] [%#span102] inv'11 y}
    {[@expl:precondition] [%#span101] inv'11 x}
    any
    [ return' (result:())-> {[%#span104] y.final = x.current} {[%#span103] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'7 (self : Snapshot.snap_ty ()) =
    [%#span105] true
  
  use prelude.prelude.Snapshot
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span106] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span107] model_acc'0 self (Const.const (Option'0.C_None))
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span112] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span108] inv'5 self)
   -> ([%#span109] inv'21 accu)
   -> ([%#span110] inv'14 k)
   -> ([%#span111] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'12 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span118] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span113] bst_invariant'0 self)
   -> ([%#span114] inv'5 self)
   -> ([%#span115] inv'21 accu)
   -> ([%#span116] inv'14 k)
   -> ([%#span117] forall v : v . inv'12 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span123] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span119] bst_invariant'0 self)
   -> ([%#span120] inv'5 self)
   -> ([%#span121] inv'14 k)
   -> ([%#span122] forall v : v . inv'12 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
  
  function has_mapping_inj'0 [#"../red_black_tree.rs" 125 4 127 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v1 : v) (v2 : v) : ()
    
   =
    [%#span132] let _ = has_mapping_model'0 self k in match Map.get (shallow_model'0 self) k with
      | Option'0.C_None -> ()
      | Option'0.C_Some _v -> ()
      end
  
  axiom has_mapping_inj'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0, v1 : v, v2 : v . ([%#span124] bst_invariant'0 self)
   -> ([%#span125] has_mapping'0 self k v1)
   -> ([%#span126] has_mapping'0 self k v2)
   -> ([%#span127] inv'5 self)
   -> ([%#span128] inv'14 k)  -> ([%#span129] inv'12 v1)  -> ([%#span130] inv'12 v2)  -> ([%#span131] v1 = v2)
  
  let rec delete_min_rec'0 (self:borrowed (Tree'0.t_tree k v)) (return'  (ret:(k, v)))= {[@expl:precondition] [%#span135] inv'8 self}
    {[@expl:precondition] [%#span134] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span133] internal_invariant'0 self.current}
    any
    [ return' (result:(k, v))-> {[%#span143] inv'20 result}
      {[%#span142] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span141] color_invariant'0 self.final}
      {[%#span140] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'0 self.final k v
      = (deep_model'1 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[%#span139] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'0 self.current k v  -> le_log'0 (deep_model'1 (let (a, _) = result in a)) k}
      {[%#span138] has_mapping'0 self.current (deep_model'1 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[%#span137] height'0 self.current = height'0 self.final}
      {[%#span136] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec move_red_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span147] inv'6 self}
    {[@expl:precondition] [%#span146] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black)))) self.current}
    {[@expl:precondition] [%#span145] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span144] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span157] inv'6 result}
      {[%#span156] color_invariant'1 result.final
      /\ (color'0 (RedBlackTree_Node_Type.node_left result.current) = Color'0.C_Black
       -> RedBlackTree_Node_Type.node_color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span155] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span154] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span153] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 self.current k v /\ le_log'0 (deep_model'1 (RedBlackTree_Node_Type.node_key self.current)) k
       -> has_mapping'1 result.current k v}
      {[%#span152] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 result.current k v  -> has_mapping'1 self.current k v}
      {[%#span151] RedBlackTree_Node_Type.node_key result.current = RedBlackTree_Node_Type.node_key self.current}
      {[%#span150] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span149] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)  -> internal_invariant'1 self.final}
      {[%#span148] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : Node'0.t_node k v) =
    [%#span105] true
  
  let rec unwrap'2 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span159] inv'19 self}
    {[@expl:precondition] [%#span158] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span160] inv'9 result}
      {[%#span158] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span161] inv'18 self}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span164] inv'19 result}
      {[%#span163] self = Option'0.C_None
      \/ (exists r : Node'0.t_node k v . inv'9 r /\ result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span162] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  predicate resolve'10 (self : Node'0.t_node k v) =
    [%#span105] true
  
  predicate resolve'5 (self : Node'0.t_node k v) =
    [%#span165] resolve'10 self
  
  let rec unwrap'1 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:Node'0.t_node k v))= {[@expl:precondition] [%#span159] inv'0 self}
    {[@expl:precondition] [%#span158] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_node k v)-> {[%#span160] inv'1 result}
      {[%#span158] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span100] self.final = self.current
  
  predicate resolve'3 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span100] self.final = self.current
  
  predicate is_default'0 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span166] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (Node'0.t_node k v)))= {[@expl:precondition] [%#span167] inv'7 dest}
    any
    [ return' (result:Option'0.t_option (Node'0.t_node k v))-> {[%#span170] inv'0 result}
      {[%#span169] is_default'0 dest.final}
      {[%#span168] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Node'0.t_node k v)) =
    [%#span100] self.final = self.current
  
  let rec is_none'0 (self:Option'0.t_option (Node'0.t_node k v)) (return'  (ret:bool))= {[@expl:precondition] [%#span171] inv'18 self}
    any [ return' (result:bool)-> {[%#span172] result = (self = Option'0.C_None)} (! return' {result}) ] 
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span175] inv'6 self}
    {[@expl:precondition] [%#span174] color'0 (RedBlackTree_Node_Type.node_left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span173] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span182] exists l : Node'0.t_node k v, r : Node'0.t_node k v . inv'1 l
      /\ inv'1 r
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left self.current) = Option'0.C_Some l
      /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right self.final) = Option'0.C_Some r
      /\ (RedBlackTree_Node_Type.node_left self.final, RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r)
      = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right self.current)
      /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key self.current}
      {[%#span181] RedBlackTree_Node_Type.node_color self.final = RedBlackTree_Node_Type.node_color self.current}
      {[%#span180] color'0 (RedBlackTree_Node_Type.node_right self.final) = Color'0.C_Red}
      {[%#span179] lt_log'0 (deep_model'1 (RedBlackTree_Node_Type.node_key self.final)) (deep_model'1 (RedBlackTree_Node_Type.node_key self.current))}
      {[%#span178] height'1 self.current = height'1 self.final}
      {[%#span177] internal_invariant'1 self.final}
      {[%#span176] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span183] inv'17 self}
    any [ return' (result:bool)-> {[%#span184] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_ordering))= {[@expl:precondition] [%#span186] inv'3 other}
    {[@expl:precondition] [%#span185] inv'3 self}
    any
    [ return' (result:Ordering'0.t_ordering)-> {[%#span187] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : k)
  
  predicate resolve'0 (self : borrowed (Node'0.t_node k v)) =
    [%#span100] self.final = self.current
  
  use Alloc_Alloc_Global_Type as Global'0
  
  let rec as_mut'1 (self:borrowed (Node'0.t_node k v)) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span188] inv'2 self}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span191] inv'6 result}
      {[%#span190] self.final = result.final}
      {[%#span189] self.current = result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span159] inv'16 self}
    {[@expl:precondition] [%#span158] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span160] inv'2 result}
      {[%#span158] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span192] inv'7 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span195] inv'16 result}
      {[%#span194] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'2 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span193] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec delete_rec (self:borrowed (Tree'0.t_tree k v)) (key:k) (return'  (ret:Option'0.t_option (k, v)))= {[%#sred_black_tree4] inv'3 key}
    {[%#sred_black_tree3] inv'8 self}
    {[%#sred_black_tree2] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree1] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_16 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _16.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _16.final}- s2
      | s2 = as_mut'0 {_16} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_15} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_14.current} {Borrow.get_id _14}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_13 <- _ret' ] 
             [ &_14 <- { _14 with current = _13.final ; } ] 
            s1)
      | s1 = -{inv'1 _13.final}- s2
      | s2 = as_mut'1 {_13} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &node <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 _14} s1
      | s1 = -{resolve'0 _14}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
             [ &_21 <- rkey'0 ] 
            s3)
      | s3 = {[@expl:type invariant] inv'3 _21} s4
      | s4 = -{resolve'1 _21}- s5
      | s5 = cmp'0 {key} {_21} (fun (_ret':Ordering'0.t_ordering) ->  [ &_18 <- _ret' ] s6)
      | s6 = bb4 ]
      
    | bb4 = any
      [ br0 -> {_18 = Ordering'0.C_Less } (! bb6)
      | br1 -> {_18 = Ordering'0.C_Equal } (! bb5)
      | br2 -> {_18 = Ordering'0.C_Greater } (! bb5) ]
      
    | bb5 = s0
      [ s0 =  [ &ord <- _18 ] s1
      | s1 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_42 <- _ret' ] s2))
      | s2 = bb26 ]
      
    | bb26 = any [ br0 -> {_42 = false} (! bb33) | br1 -> {_42} (! bb27) ] 
    | bb27 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_node k v> {node.current}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_45 <- _ret' ] 
             [ &node <- { node with current = _45.final ; } ] 
            s1)
      | s1 = -{inv'4 _45.final}- s2
      | s2 = rotate_right'0 {_45} (fun (_ret':()) ->  [ &_44 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_47 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _47.final ; } ] 
                    s1)))
      | s1 = -{inv'5 _47.final}- s2
      | s2 = {[@expl:type invariant] inv'3 key} s3
      | s3 = -{resolve'1 key}- s4
      | s4 = delete_rec {_47} {key} (fun (_ret':Option'0.t_option (k, v)) ->  [ &_46 <- _ret' ] s5)
      | s5 = bb29 ]
      
    | bb29 = bb30
    | bb30 = s0
      [ s0 =  [ &r <- _46 ] (any [ any_ (_any:Option'0.t_option (k, v))-> (!  [ &_46 <- _any ] s1) ] ) | s1 = bb32 ]
      
    | bb32 = bb68
    | bb33 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                is_none'0 {rnode'0} (fun (_ret':bool) ->  [ &_50 <- _ret' ] s1)))
      | s1 = bb34 ]
      
    | bb34 = any [ br0 -> {_50 = false} (! bb44) | br1 -> {_50} (! bb35) ] 
    | bb35 = s0
      [ s0 = {[@expl:type invariant] inv'6 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'3 key} s3
      | s3 = -{resolve'1 key}- s4
      | s4 = any
        [ br0 -> {ord = Ordering'0.C_Less } (! bb38)
        | br1 -> {ord = Ordering'0.C_Equal } (! bb38)
        | br2 -> {ord = Ordering'0.C_Greater } (! bb36) ]
         ]
      
    | bb38 = s0
      [ s0 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_59 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _59.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _59.final}- s2
      | s2 = Borrow.borrow_final <Option'0.t_option (Node'0.t_node k v)> {_59.current} {Borrow.get_id _59}
          (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
             [ &_58 <- _ret' ] 
             [ &_59 <- { _59 with current = _58.final ; } ] 
            s3)
      | s3 = -{inv'0 _58.final}- s4
      | s4 = take'0 {_58} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_57 <- _ret' ] s5)
      | s5 = bb39 ]
      
    | bb39 = s0
      [ s0 = {[@expl:type invariant] inv'7 _59} s1
      | s1 = -{resolve'3 _59}- s2
      | s2 = {[@expl:type invariant] inv'8 self} s3
      | s3 = -{resolve'4 self}- s4
      | s4 = unwrap'1 {_57} (fun (_ret':Node'0.t_node k v) ->  [ &node1 <- _ret' ] s5)
      | s5 = bb40 ]
      
    | bb40 = s0
      [ s0 = {[@expl:type invariant] inv'1 node1} s1
      | s1 = -{resolve'5 node1}- s2
      | s2 = Node'0.t_node <k> <v> {node1}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Node'0.t_node <k> <v> {node1}
              (fun (rleft'1:Tree'0.t_tree k v) (rcolor'1:Color'0.t_color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_tree k v) ->
                 [ &_60 <- (rkey'0, rval'1) ] 
                (any
                [ any_ (_any:k)-> (! Node'0.t_node <k> <v> {node1}
                    (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                       [ &node1 <- Node'0.C_Node l_left'0 l_color'0 _any l_val'0 l_right'0 ] 
                      (any
                      [ any_ (_any:v)-> (! Node'0.t_node <k> <v> {node1}
                          (fun (l_left'1:Tree'0.t_tree k v) (l_color'1:Color'0.t_color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_tree k v) ->
                             [ &node1 <- Node'0.C_Node l_left'1 l_color'1 l_key'1 _any l_right'1 ] 
                            s3)) ]
                      ))) ]
                )))
      | s3 = bb41 ]
      
    | bb41 = bb42
    | bb42 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some _60 ] (any [ any_ (_any:(k, v))-> (!  [ &_60 <- _any ] s1) ] ) | s1 = bb43 ]
      
    | bb43 = bb72
    | bb72 = bb73
    | bb36 = bb37
    | bb37 = s0
      [ s0 = {[@expl:type invariant] inv'8 self} s1
      | s1 = -{resolve'4 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb73 ]
      
    | bb73 = bb74
    | bb44 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_67 <- _ret' ] s1)))
      | s1 = bb45 ]
      
    | bb45 = s0 [ s0 = unwrap'2 {_67} (fun (_ret':Node'0.t_node k v) ->  [ &_66 <- _ret' ] s1) | s1 = bb46 ] 
    | bb46 = s0
      [ s0 = {[@expl:type invariant] inv'9 _66} s1
      | s1 = -{resolve'6 _66}- s2
      | s2 = Node'0.t_node <k> <v> {_66}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_64 <- _ret' ] s3))
      | s3 = bb47 ]
      
    | bb47 = any [ br0 -> {_64 = false} (! bb49) | br1 -> {_64} (! bb48) ] 
    | bb48 = bb51
    | bb49 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_71 <- _ret' ] 
             [ &node <- { node with current = _71.final ; } ] 
            s1)
      | s1 = -{inv'4 _71.final}- s2
      | s2 = move_red_right'0 {_71} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb50 ]
      
    | bb50 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _69.final ; } ] 
            s1)
      | s1 = -{inv'4 _69.final}- s2
      | s2 = {[@expl:type invariant] inv'6 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 =  [ &node <- _69 ] (any [ any_ (_any:borrowed (Node'0.t_node k v))-> (!  [ &_69 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'6 _70} s6
      | s6 = -{resolve'2 _70}- s7
      | s7 = bb51 ]
      
    | bb51 = any
      [ br0 -> {ord = Ordering'0.C_Less } (! bb63)
      | br1 -> {ord = Ordering'0.C_Equal } (! bb52)
      | br2 -> {ord = Ordering'0.C_Greater } (! bb63) ]
      
    | bb63 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_90 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _90.final ; } ] 
                    s1)))
      | s1 = -{inv'5 _90.final}- s2
      | s2 = {[@expl:type invariant] inv'3 key} s3
      | s3 = -{resolve'1 key}- s4
      | s4 = delete_rec {_90} {key} (fun (_ret':Option'0.t_option (k, v)) ->  [ &_89 <- _ret' ] s5)
      | s5 = bb64 ]
      
    | bb64 = bb65
    | bb65 = s0
      [ s0 =  [ &r <- _89 ] (any [ any_ (_any:Option'0.t_option (k, v))-> (!  [ &_89 <- _any ] s1) ] ) | s1 = bb67 ]
      
    | bb67 = bb68
    | bb52 = bb53
    | bb53 = s0
      [ s0 = {[@expl:type invariant] inv'3 key} s1
      | s1 = -{resolve'1 key}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_74 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _74.final ; } ] 
                    s3)))
      | s3 = -{inv'5 _74.final}- s4
      | s4 = delete_min_rec'0 {_74} (fun (_ret':(k, v)) ->  [ &kv <- _ret' ] s5)
      | s5 = bb54 ]
      
    | bb54 = s0 [ s0 =  [ &_75 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb55 ] 
    | bb55 = s0
      [ s0 = -{resolve'7 _75}- s1
      | s1 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <k> {rkey'0}
              (fun (_ret':borrowed k) ->
                 [ &_79 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                    
                    [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 _79.final l_val'0 l_right'0 ; } ]
                    
                    s2)))
      | s2 = -{inv'10 _79.final}- s3
      | s3 = Borrow.borrow_final <k> {_79.current} {Borrow.get_id _79}
          (fun (_ret':borrowed k) ->  [ &_78 <- _ret' ]  [ &_79 <- { _79 with current = _78.final ; } ] s4)
      | s4 = -{inv'10 _78.final}- s5
      | s5 = Borrow.borrow_mut <k> {let (r'0, _) = kv in r'0}
          (fun (_ret':borrowed k) ->  [ &_81 <- _ret' ]  [ &kv <- let (_, l'2) = kv in (_81.final, l'2) ] s6)
      | s6 = -{inv'10 _81.final}- s7
      | s7 = Borrow.borrow_final <k> {_81.current} {Borrow.get_id _81}
          (fun (_ret':borrowed k) ->  [ &_80 <- _ret' ]  [ &_81 <- { _81 with current = _80.final ; } ] s8)
      | s8 = -{inv'10 _80.final}- s9
      | s9 = swap'0 {_78} {_80} (fun (_ret':()) ->  [ &_77 <- _ret' ] s10)
      | s10 = bb56 ]
      
    | bb56 = s0
      [ s0 = {[@expl:type invariant] inv'11 _81} s1
      | s1 = -{resolve'8 _81}- s2
      | s2 = {[@expl:type invariant] inv'11 _79} s3
      | s3 = -{resolve'8 _79}- s4
      | s4 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <v> {rval'0}
              (fun (_ret':borrowed v) ->
                 [ &_84 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                    
                    [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 _84.final l_right'0 ; } ]
                    
                    s5)))
      | s5 = -{inv'12 _84.final}- s6
      | s6 = Borrow.borrow_final <v> {_84.current} {Borrow.get_id _84}
          (fun (_ret':borrowed v) ->  [ &_83 <- _ret' ]  [ &_84 <- { _84 with current = _83.final ; } ] s7)
      | s7 = -{inv'12 _83.final}- s8
      | s8 = Borrow.borrow_mut <v> {let (_, r'0) = kv in r'0}
          (fun (_ret':borrowed v) ->  [ &_86 <- _ret' ]  [ &kv <- let (l'1, _) = kv in (l'1, _86.final) ] s9)
      | s9 = -{inv'12 _86.final}- s10
      | s10 = Borrow.borrow_final <v> {_86.current} {Borrow.get_id _86}
          (fun (_ret':borrowed v) ->  [ &_85 <- _ret' ]  [ &_86 <- { _86 with current = _85.final ; } ] s11)
      | s11 = -{inv'12 _85.final}- s12
      | s12 = swap'1 {_83} {_85} (fun (_ret':()) ->  [ &_82 <- _ret' ] s13)
      | s13 = bb57 ]
      
    | bb57 = s0
      [ s0 = {[@expl:type invariant] inv'13 _86} s1
      | s1 = -{resolve'9 _86}- s2
      | s2 = {[@expl:type invariant] inv'13 _84} s3
      | s3 = -{resolve'9 _84}- s4
      | s4 =  [ &_87 <- Option'0.C_Some kv ] (any [ any_ (_any:(k, v))-> (!  [ &kv <- _any ] s5) ] )
      | s5 = bb58 ]
      
    | bb58 = bb59
    | bb59 = s0
      [ s0 =  [ &r <- _87 ] (any [ any_ (_any:Option'0.t_option (k, v))-> (!  [ &_87 <- _any ] s1) ] ) | s1 = bb61 ]
      
    | bb61 = bb62
    | bb62 = bb68
    | bb68 = bb69
    | bb6 = bb7
    | bb7 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                is_none'0 {rnode'0} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s1)))
      | s1 = bb8 ]
      
    | bb8 = any [ br0 -> {_24 = false} (! bb10) | br1 -> {_24} (! bb9) ] 
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'6 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'3 key} s3
      | s3 = -{resolve'1 key}- s4
      | s4 = {[@expl:type invariant] inv'8 self} s5
      | s5 = -{resolve'4 self}- s6
      | s6 =  [ &_0 <- Option'0.C_None ] s7
      | s7 = bb74 ]
      
    | bb74 = bb75
    | bb75 = bb76
    | bb10 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s1))
      | s1 = bb11 ]
      
    | bb11 = any [ br0 -> {_28 = false} (! bb13) | br1 -> {_28} (! bb12) ] 
    | bb12 = bb20
    | bb13 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Tree'0.t_tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_option (Node'0.t_node k v)) ->  [ &_33 <- _ret' ] s1)))
      | s1 = bb14 ]
      
    | bb14 = s0 [ s0 = unwrap'2 {_33} (fun (_ret':Node'0.t_node k v) ->  [ &_32 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'9 _32} s1
      | s1 = -{resolve'6 _32}- s2
      | s2 = Node'0.t_node <k> <v> {_32}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s3))
      | s3 = bb16 ]
      
    | bb16 = any [ br0 -> {_30 = false} (! bb18) | br1 -> {_30} (! bb17) ] 
    | bb17 = bb20
    | bb20 = bb21
    | bb18 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_37 <- _ret' ] 
             [ &node <- { node with current = _37.final ; } ] 
            s1)
      | s1 = -{inv'4 _37.final}- s2
      | s2 = move_red_left'0 {_37} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_36 <- _ret' ] s3)
      | s3 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {_36.current} {Borrow.get_id _36}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_35 <- _ret' ] 
             [ &_36 <- { _36 with current = _35.final ; } ] 
            s1)
      | s1 = -{inv'4 _35.final}- s2
      | s2 = {[@expl:type invariant] inv'6 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 =  [ &node <- _35 ] (any [ any_ (_any:borrowed (Node'0.t_node k v))-> (!  [ &_35 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'6 _36} s6
      | s6 = -{resolve'2 _36}- s7
      | s7 = bb21 ]
      
    | bb21 = s0
      [ s0 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <Tree'0.t_tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_39 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node _39.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'5 _39.final}- s2
      | s2 = {[@expl:type invariant] inv'3 key} s3
      | s3 = -{resolve'1 key}- s4
      | s4 = delete_rec {_39} {key} (fun (_ret':Option'0.t_option (k, v)) ->  [ &_38 <- _ret' ] s5)
      | s5 = bb22 ]
      
    | bb22 = bb23
    | bb23 = s0
      [ s0 =  [ &r <- _38 ] (any [ any_ (_any:Option'0.t_option (k, v))-> (!  [ &_38 <- _any ] s1) ] ) | s1 = bb25 ]
      
    | bb25 = bb69
    | bb69 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_node k v)) ->
             [ &_93 <- _ret' ] 
             [ &node <- { node with current = _93.final ; } ] 
            s1)
      | s1 = -{inv'4 _93.final}- s2
      | s2 = balance'0 {_93} (fun (_ret':()) ->  [ &_92 <- _ret' ] s3)
      | s3 = bb70 ]
      
    | bb70 = s0
      [ s0 = {[@expl:type invariant] inv'6 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'8 self} s3
      | s3 = -{resolve'4 self}- s4
      | s4 =  [ &_0 <- r ] (any [ any_ (_any:Option'0.t_option (k, v))-> (!  [ &r <- _any ] s5) ] )
      | s5 = bb71 ]
      
    | bb71 = bb76
    | bb76 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & key : k = key
    | & r : Option'0.t_option (k, v) = any_l ()
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _13 : borrowed (Node'0.t_node k v) = any_l ()
    | & _14 : borrowed (Node'0.t_node k v) = any_l ()
    | & _15 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _16 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _18 : Ordering'0.t_ordering = any_l ()
    | & _21 : k = any_l ()
    | & _24 : bool = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : Node'0.t_node k v = any_l ()
    | & _33 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _35 : borrowed (Node'0.t_node k v) = any_l ()
    | & _36 : borrowed (Node'0.t_node k v) = any_l ()
    | & _37 : borrowed (Node'0.t_node k v) = any_l ()
    | & _38 : Option'0.t_option (k, v) = any_l ()
    | & _39 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & ord : Ordering'0.t_ordering = any_l ()
    | & _42 : bool = any_l ()
    | & _44 : () = any_l ()
    | & _45 : borrowed (Node'0.t_node k v) = any_l ()
    | & _46 : Option'0.t_option (k, v) = any_l ()
    | & _47 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _50 : bool = any_l ()
    | & node1 : Node'0.t_node k v = any_l ()
    | & _57 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _58 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _59 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & _60 : (k, v) = any_l ()
    | & _64 : bool = any_l ()
    | & _66 : Node'0.t_node k v = any_l ()
    | & _67 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & _69 : borrowed (Node'0.t_node k v) = any_l ()
    | & _70 : borrowed (Node'0.t_node k v) = any_l ()
    | & _71 : borrowed (Node'0.t_node k v) = any_l ()
    | & kv : (k, v) = any_l ()
    | & _74 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _75 : Snapshot.snap_ty () = any_l ()
    | & _77 : () = any_l ()
    | & _78 : borrowed k = any_l ()
    | & _79 : borrowed k = any_l ()
    | & _80 : borrowed k = any_l ()
    | & _81 : borrowed k = any_l ()
    | & _82 : () = any_l ()
    | & _83 : borrowed v = any_l ()
    | & _84 : borrowed v = any_l ()
    | & _85 : borrowed v = any_l ()
    | & _86 : borrowed v = any_l ()
    | & _87 : Option'0.t_option (k, v) = any_l ()
    | & _89 : Option'0.t_option (k, v) = any_l ()
    | & _90 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _92 : () = any_l ()
    | & _93 : borrowed (Node'0.t_node k v) = any_l () ]
    
    [ return' (result:Option'0.t_option (k, v))-> {[@expl:postcondition] [%#sred_black_tree11] inv'15 result}
      {[@expl:postcondition] [%#sred_black_tree10] color'0 self.current = Color'0.C_Black
       -> color'0 self.final = Color'0.C_Black}
      {[@expl:postcondition] [%#sred_black_tree9] color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree8] forall k : deep_model_ty'0, v : v . inv'14 k /\ inv'12 v
       -> has_mapping'0 self.final k v = (deep_model'0 key <> k /\ has_mapping'0 self.current k v)}
      {[@expl:postcondition] [%#sred_black_tree7] match result with
        | Option'0.C_None -> forall v : v . inv'12 v  -> not has_mapping'0 self.current (deep_model'0 key) v
        | Option'0.C_Some (k, v) -> deep_model'0 key = deep_model'1 k /\ has_mapping'0 self.current (deep_model'1 k) v
        end}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_Delete
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 801 8 801 45
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 792 15 792 34
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 800 23 800 27
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 800 29 800 32
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 793 14 793 33
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 794 14 798 5
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 799 14 799 59
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 800 41 800 55
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span39 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span40 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span41 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span42 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span43 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span44 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span45 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span46 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span47 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span48 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span49 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span50 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span51 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span52 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span53 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span54 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span55 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span56 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span57 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span58 = "" 0 0 0 0
  
  let%span span59 = "" 0 0 0 0
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span62 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span63 = "" 0 0 0 0
  
  let%span span64 = "../red_black_tree.rs" 227 16 227 48
  
  let%span span65 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span66 = "../red_black_tree.rs" 736 15 736 43
  
  let%span span67 = "../red_black_tree.rs" 737 15 738 62
  
  let%span span68 = "../red_black_tree.rs" 748 23 748 27
  
  let%span span69 = "../red_black_tree.rs" 748 29 748 32
  
  let%span span70 = "../red_black_tree.rs" 739 14 739 42
  
  let%span span71 = "../red_black_tree.rs" 740 14 740 50
  
  let%span span72 = "../red_black_tree.rs" 741 14 744 5
  
  let%span span73 = "../red_black_tree.rs" 745 4 745 129
  
  let%span span74 = "../red_black_tree.rs" 746 14 746 39
  
  let%span span75 = "../red_black_tree.rs" 747 4 747 69
  
  let%span span76 = "../red_black_tree.rs" 748 41 748 55
  
  let%span span77 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span78 = "../red_black_tree.rs" 388 15 388 19
  
  let%span span79 = "../red_black_tree.rs" 387 14 387 45
  
  let%span span80 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span81 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span82 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span83 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span84 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span85 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span86 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span87 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span88 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span89 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span90 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span91 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span92 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span93 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span94 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span95 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span96 = "../red_black_tree.rs" 115 12 115 61
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  type deep_model_ty'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'8 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span8] inv'8 x)
   -> ([%#span9] inv'8 y)  -> ([%#span10] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span11] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span12] inv'8 x)  -> ([%#span13] inv'8 y)  -> ([%#span14] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span15] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span16] inv'8 x)  -> ([%#span17] inv'8 y)  -> ([%#span18] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span19] cmp_log'0 x y
  = o)
   -> ([%#span20] cmp_log'0 y z = o)
   -> ([%#span21] inv'8 x)  -> ([%#span22] inv'8 y)  -> ([%#span23] inv'8 z)  -> ([%#span24] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span25] inv'8 x)
   -> ([%#span26] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span27] inv'8 x)
   -> ([%#span28] inv'8 y)  -> ([%#span29] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span30] inv'8 x)
   -> ([%#span31] inv'8 y)  -> ([%#span32] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span33] inv'8 x)
   -> ([%#span34] inv'8 y)  -> ([%#span35] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span36] inv'8 x)
   -> ([%#span37] inv'8 y)  -> ([%#span38] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use Core_Option_Option_Type as Option'0
  
  use map.Map
  
  predicate invariant'13 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span39] true
  
  predicate inv'12 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'12 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'12 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : Option'0.t_option (borrowed (Node'0.t_node k v))) =
    [%#span39] true
  
  predicate inv'11 (_x : Option'0.t_option (borrowed (Node'0.t_node k v)))
  
  axiom inv'11 : forall x : Option'0.t_option (borrowed (Node'0.t_node k v)) . inv'11 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'11 (self : Tree'0.t_tree k v) =
    [%#span39] true
  
  predicate inv'10 (_x : Tree'0.t_tree k v)
  
  axiom inv'10 : forall x : Tree'0.t_tree k v . inv'10 x = true
  
  predicate invariant'10 (self : v)
  
  predicate inv'9 (_x : v)
  
  axiom inv'9 : forall x : v . inv'9 x = true
  
  predicate invariant'9 (self : deep_model_ty'0)
  
  axiom inv'8 : forall x : deep_model_ty'0 . inv'8 x = true
  
  predicate invariant'8 (self : Option'0.t_option (k, v)) =
    [%#span39] true
  
  predicate inv'7 (_x : Option'0.t_option (k, v))
  
  axiom inv'7 : forall x : Option'0.t_option (k, v) . inv'7 x = true
  
  predicate invariant'7 (self : Tree'0.t_tree k v) =
    [%#span39] true
  
  predicate inv'6 (_x : Tree'0.t_tree k v)
  
  axiom inv'6 : forall x : Tree'0.t_tree k v . inv'6 x = true
  
  predicate invariant'6 (self : borrowed (Node'0.t_node k v)) =
    [%#span39] true
  
  predicate inv'5 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'5 : forall x : borrowed (Node'0.t_node k v) . inv'5 x = true
  
  predicate invariant'5 (self : Node'0.t_node k v) =
    [%#span39] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'4 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span39] true
  
  predicate inv'3 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'3 : forall x : borrowed (Tree'0.t_tree k v) . inv'3 x = true
  
  predicate invariant'3 (self : k)
  
  predicate inv'2 (_x : k)
  
  axiom inv'2 : forall x : k . inv'2 x = true
  
  predicate invariant'2 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span39] true
  
  predicate inv'1 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'1 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'1 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span39] true
  
  predicate inv'0 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'0 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'0 x = true
  
  use map.Map
  
  function deep_model'0 (self : k) : deep_model_ty'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'1 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span41] model_acc'0 self (Const.const (Option'0.C_None))
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Tree'0.t_tree k v)) : Map.map deep_model_ty'0 (Option'0.t_option v) =
    [%#span42] shallow_model'1 self.current
  
  function deep_model'1 (self : k) : deep_model_ty'0 =
    [%#span43] deep_model'0 self
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span44] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span45] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span46] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span47] inv'6 self)  -> ([%#span48] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span50] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span51] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span52] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span53] (forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'9 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'0 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'9 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'0 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span54] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span55] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span56] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (Node'0.t_node k v))) (return'  (ret:borrowed (Node'0.t_node k v)))= {[@expl:precondition] [%#span58] inv'11 self}
    {[@expl:precondition] [%#span57] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_node k v))-> {[%#span59] inv'5 result}
      {[%#span57] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (Node'0.t_node k v))) (return'  (ret:Option'0.t_option (borrowed (Node'0.t_node k v))))= {[@expl:precondition] [%#span60] inv'1 self}
    any
    [ return' (result:Option'0.t_option (borrowed (Node'0.t_node k v)))-> {[%#span63] inv'11 result}
      {[%#span62] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_node k v) . inv'5 r
      /\ result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span61] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use RedBlackTree_Cp_Type as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 226 0 226 36] (c : Color'0.t_color) (l : CP'0.t_cp) (r : CP'0.t_cp) : CP'0.t_cp
    
   =
    [%#span64] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span65] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'4 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  let rec delete_rec'0 (self:borrowed (Tree'0.t_tree k v)) (key:k) (return'  (ret:Option'0.t_option (k, v)))= {[@expl:precondition] [%#span69] inv'2 key}
    {[@expl:precondition] [%#span68] inv'3 self}
    {[@expl:precondition] [%#span67] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span66] internal_invariant'0 self.current}
    any
    [ return' (result:Option'0.t_option (k, v))-> {[%#span76] inv'7 result}
      {[%#span75] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span74] color_invariant'0 self.final}
      {[%#span73] forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'9 v
       -> has_mapping'0 self.final k v = (deep_model'1 key <> k /\ has_mapping'0 self.current k v)}
      {[%#span72] match result with
        | Option'0.C_None -> forall v : v . inv'9 v  -> not has_mapping'0 self.current (deep_model'1 key) v
        | Option'0.C_Some (k, v) -> deep_model'1 key = deep_model'0 k /\ has_mapping'0 self.current (deep_model'0 k) v
        end}
      {[%#span71] height'0 self.current = height'0 self.final}
      {[%#span70] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (Node'0.t_node k v)) =
    [%#span77] self.final = self.current
  
  let rec is_red'0 (self:Tree'0.t_tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span78] inv'10 self}
    any [ return' (result:bool)-> {[%#span79] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'3 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span77] self.final = self.current
  
  predicate resolve'2 (self : k)
  
  predicate resolve'1 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span77] self.final = self.current
  
  predicate resolve'0 (self : Snapshot.snap_ty ()) =
    [%#span80] true
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span85] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span81] inv'6 self)
   -> ([%#span82] inv'12 accu)
   -> ([%#span83] inv'8 k)
   -> ([%#span84] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'9 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span91] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span86] bst_invariant'0 self)
   -> ([%#span87] inv'6 self)
   -> ([%#span88] inv'12 accu)
   -> ([%#span89] inv'8 k)
   -> ([%#span90] forall v : v . inv'9 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span96] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span92] bst_invariant'0 self)
   -> ([%#span93] inv'6 self)
   -> ([%#span94] inv'8 k)
   -> ([%#span95] forall v : v . inv'9 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'1 self) k = Option'0.C_Some v))
  
  let rec delete (self:borrowed (Tree'0.t_tree k v)) (key:k) (return'  (ret:Option'0.t_option (k, v)))= {[%#sred_black_tree3] inv'2 key}
    {[%#sred_black_tree2] inv'3 self}
    {[%#sred_black_tree1] invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_7 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_mut <Option'0.t_option (Node'0.t_node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_10 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _10.final ; } ] 
                    s2)))
      | s2 = -{inv'0 _10.final}- s3
      | s3 = any
        [ br0 -> {_10.current = Option'0.C_None } (! bb8)
        | br1 (a:Node'0.t_node k v)-> {_10.current = Option'0.C_Some a} (! bb2) ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 _10} s1
      | s1 = -{resolve'1 _10}- s2
      | s2 = {[@expl:type invariant] inv'2 key} s3
      | s3 = -{resolve'2 key}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = {[@expl:type invariant] inv'3 self} s6
      | s6 = -{resolve'3 self}- s7
      | s7 = bb17 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Option'0.some <Node'0.t_node k v> {_10.current}
          (fun (r0'0:Node'0.t_node k v) ->
            Borrow.borrow_final <Node'0.t_node k v> {r0'0} {Borrow.inherit_id (Borrow.get_id _10) 1}
              (fun (_ret':borrowed (Node'0.t_node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.some <Node'0.t_node k v> {_10.current}
                  (fun (l_0'0:Node'0.t_node k v) ->
                     [ &_10 <- { _10 with current = Option'0.C_Some node.final ; } ] 
                    s1)))
      | s1 = -{inv'4 node.final}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_13 = false} (! bb6) | br1 -> {_13} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'4 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _10} s3
      | s3 = -{resolve'1 _10}- s4
      | s4 = bb7 ]
      
    | bb6 = s0
      [ s0 =  [ &_15 <- Color'0.C_Red ] s1
      | s1 = Node'0.t_node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 _15 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_15 <- _any ] s2) ] ))
      | s2 = {[@expl:type invariant] inv'5 node} s3
      | s3 = -{resolve'4 node}- s4
      | s4 = {[@expl:type invariant] inv'1 _10} s5
      | s5 = -{resolve'1 _10}- s6
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_mut <Tree'0.t_tree k v> {self.current}
          (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
             [ &_18 <- _ret' ] 
             [ &self <- { self with current = _18.final ; } ] 
            s1)
      | s1 = -{inv'6 _18.final}- s2
      | s2 = {[@expl:type invariant] inv'2 key} s3
      | s3 = -{resolve'2 key}- s4
      | s4 = delete_rec'0 {_18} {key} (fun (_ret':Option'0.t_option (k, v)) ->  [ &r <- _ret' ] s5)
      | s5 = bb9 ]
      
    | bb9 = s0 [ s0 = is_red'0 {self.current} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = any [ br0 -> {_21 = false} (! bb14) | br1 -> {_21} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_23 <- Color'0.C_Black ] s1
      | s1 = Tree'0.t_tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
            Borrow.borrow_final
              <Option'0.t_option (Node'0.t_node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                 [ &_26 <- _ret' ] 
                Tree'0.t_tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _26.final ; } ] 
                    s2)))
      | s2 = -{inv'0 _26.final}- s3
      | s3 = as_mut'0 {_26} (fun (_ret':Option'0.t_option (borrowed (Node'0.t_node k v))) ->  [ &_25 <- _ret' ] s4)
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_25} (fun (_ret':borrowed (Node'0.t_node k v)) ->  [ &_24 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_node <k> <v> {_24.current}
          (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
             [ &_24 <- { _24 with current = Node'0.C_Node l_left'0 _23 l_key'0 l_val'0 l_right'0 ; } ] 
            (any [ any_ (_any:Color'0.t_color)-> (!  [ &_23 <- _any ] s1) ] ))
      | s1 = {[@expl:type invariant] inv'5 _24} s2
      | s2 = -{resolve'4 _24}- s3
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'3 self}- s5
      | s5 = bb15 ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'3 self}- s2 | s2 = bb15 ] 
    | bb15 = s0
      [ s0 =  [ &_0 <- r ] (any [ any_ (_any:Option'0.t_option (k, v))-> (!  [ &r <- _any ] s1) ] ) | s1 = bb16 ]
      
    | bb16 = bb17
    | bb17 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & key : k = key
    | & _7 : Snapshot.snap_ty () = any_l ()
    | & _10 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : Color'0.t_color = any_l ()
    | & r : Option'0.t_option (k, v) = any_l ()
    | & _18 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _21 : bool = any_l ()
    | & _23 : Color'0.t_color = any_l ()
    | & _24 : borrowed (Node'0.t_node k v) = any_l ()
    | & _25 : Option'0.t_option (borrowed (Node'0.t_node k v)) = any_l ()
    | & _26 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l () ]
    
    [ return' (result:Option'0.t_option (k, v))-> {[@expl:postcondition] [%#sred_black_tree7] inv'7 result}
      {[@expl:postcondition] [%#sred_black_tree6] shallow_model'1 self.final
      = Map.set (shallow_model'0 self) (deep_model'1 key) (Option'0.C_None)}
      {[@expl:postcondition] [%#sred_black_tree5] match result with
        | Option'0.C_Some (k, v) -> deep_model'0 k = deep_model'1 key
        /\ Map.get (shallow_model'0 self) (deep_model'1 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'1 key) = Option'0.C_None
        end}
      {[@expl:postcondition] [%#sred_black_tree4] invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_Get
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 823 8 823 45
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 826 20 826 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 826 8 826 45
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 817 15 817 34
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 822 16 822 20
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 822 22 822 25
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 818 14 821 5
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 822 34 822 44
  
  let%span span8 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span40 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span41 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span42 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span43 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span44 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span45 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span46 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span47 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span48 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span49 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span50 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span51 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span52 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span53 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span54 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span55 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span56 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span57 = "" 0 0 0 0
  
  let%span span58 = "" 0 0 0 0
  
  let%span span59 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span60 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span61 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span62 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span63 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span64 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span65 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span66 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span67 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span68 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span69 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span70 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span71 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span72 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span73 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span74 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span75 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span76 = "../red_black_tree.rs" 115 12 115 61
  
  use Core_Option_Option_Type as Option'0
  
  type deep_model_ty'0
  
  use map.Map
  
  predicate invariant'10 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span8] true
  
  predicate inv'9 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'9 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'9 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'8 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span9] inv'8 x)
   -> ([%#span10] inv'8 y)  -> ([%#span11] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span12] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span13] inv'8 x)  -> ([%#span14] inv'8 y)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span17] inv'8 x)  -> ([%#span18] inv'8 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span20] cmp_log'0 x y
  = o)
   -> ([%#span21] cmp_log'0 y z = o)
   -> ([%#span22] inv'8 x)  -> ([%#span23] inv'8 y)  -> ([%#span24] inv'8 z)  -> ([%#span25] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span26] inv'8 x)
   -> ([%#span27] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span28] inv'8 x)
   -> ([%#span29] inv'8 y)  -> ([%#span30] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] inv'8 x)
   -> ([%#span32] inv'8 y)  -> ([%#span33] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span34] inv'8 x)
   -> ([%#span35] inv'8 y)  -> ([%#span36] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span37] inv'8 x)
   -> ([%#span38] inv'8 y)  -> ([%#span39] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'9 (self : deep_model_ty'0)
  
  axiom inv'8 : forall x : deep_model_ty'0 . inv'8 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'8 (self : Tree'0.t_tree k v) =
    [%#span8] true
  
  predicate inv'7 (_x : Tree'0.t_tree k v)
  
  axiom inv'7 : forall x : Tree'0.t_tree k v . inv'7 x = true
  
  predicate invariant'7 (self : Option'0.t_option v) =
    [%#span8] true
  
  predicate inv'6 (_x : Option'0.t_option v)
  
  axiom inv'6 : forall x : Option'0.t_option v . inv'6 x = true
  
  predicate invariant'6 (self : v)
  
  predicate inv'5 (_x : v)
  
  axiom inv'5 : forall x : v . inv'5 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'5 (self : Node'0.t_node k v) =
    [%#span8] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'4 (self : k)
  
  predicate inv'3 (_x : k)
  
  axiom inv'3 : forall x : k . inv'3 x = true
  
  predicate invariant'3 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span8] true
  
  predicate inv'2 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'2 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'2 x = true
  
  predicate invariant'2 (self : v)
  
  predicate inv'1 (_x : v)
  
  axiom inv'1 : forall x : v . inv'1 x = true
  
  predicate invariant'1 (self : Tree'0.t_tree k v) =
    [%#span8] true
  
  predicate inv'0 (_x : Tree'0.t_tree k v)
  
  axiom inv'0 : forall x : Tree'0.t_tree k v . inv'0 x = true
  
  use map.Map
  
  use map.Map
  
  function deep_model'1 (self : k) : deep_model_ty'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'1 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span41] model_acc'0 self (Const.const (Option'0.C_None))
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v) =
    [%#span42] shallow_model'1 self
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span43] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span44] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span46] inv'7 self)  -> ([%#span47] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span49] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span51] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'1 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span52] (forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'1 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'1 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'8 k /\ inv'1 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'1 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span53] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span54] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span55] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : v)
  
  predicate resolve'4 (self : Node'0.t_node k v) =
    [%#span56] true
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_ordering))= {[@expl:precondition] [%#span58] inv'3 other}
    {[@expl:precondition] [%#span57] inv'3 self}
    any
    [ return' (result:Ordering'0.t_ordering)-> {[%#span59] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : k)
  
  predicate resolve'2 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span56] true
  
  function deep_model'0 (self : k) : deep_model_ty'0 =
    [%#span60] deep_model'1 self
  
  predicate resolve'1 (self : Tree'0.t_tree k v) =
    [%#span56] true
  
  predicate resolve'0 (self : Snapshot.snap_ty ()) =
    [%#span56] true
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span65] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span61] inv'7 self)
   -> ([%#span62] inv'9 accu)
   -> ([%#span63] inv'8 k)
   -> ([%#span64] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'1 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span71] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span66] bst_invariant'0 self)
   -> ([%#span67] inv'7 self)
   -> ([%#span68] inv'9 accu)
   -> ([%#span69] inv'8 k)
   -> ([%#span70] forall v : v . inv'1 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span76] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span72] bst_invariant'0 self)
   -> ([%#span73] inv'7 self)
   -> ([%#span74] inv'8 k)
   -> ([%#span75] forall v : v . inv'1 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'1 self) k = Option'0.C_Some v))
  
  let rec get (self:Tree'0.t_tree k v) (key:k) (return'  (ret:Option'0.t_option v))= {[%#sred_black_tree5] inv'3 key}
    {[%#sred_black_tree4] inv'0 self}
    {[%#sred_black_tree3] invariant'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_6 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 =  [ &tree <- self ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb2 ]
      
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [%#sred_black_tree2] forall v : v . inv'1 v
         -> has_mapping'0 self (deep_model'0 key) v = has_mapping'0 tree (deep_model'0 key) v}
        {[@expl:loop invariant] [%#sred_black_tree1] bst_invariant'0 tree}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = Tree'0.t_tree <k> <v> {tree}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->  [ &_13 <- rnode'0 ] s1)
          | s1 = {[@expl:type invariant] inv'0 tree} s2
          | s2 = -{resolve'1 tree}- s3
          | s3 = any
            [ br0 -> {_13 = Option'0.C_None } (! bb14) | br1 (a:Node'0.t_node k v)-> {_13 = Option'0.C_Some a} (! bb4) ]
             ]
          
        | bb4 = bb5
        | bb5 = s0
          [ s0 = Option'0.some <Node'0.t_node k v> {_13} (fun (r0'0:Node'0.t_node k v) ->  [ &node <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'2 _13} s2
          | s2 = -{resolve'2 _13}- s3
          | s3 = Node'0.t_node <k> <v> {node}
              (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                 [ &_19 <- rkey'0 ] 
                s4)
          | s4 = {[@expl:type invariant] inv'3 _19} s5
          | s5 = -{resolve'3 _19}- s6
          | s6 = cmp'0 {key} {_19} (fun (_ret':Ordering'0.t_ordering) ->  [ &_16 <- _ret' ] s7)
          | s7 = bb6 ]
          
        | bb6 = any
          [ br0 -> {_16 = Ordering'0.C_Less } (! bb8)
          | br1 -> {_16 = Ordering'0.C_Equal } (! bb17)
          | br2 -> {_16 = Ordering'0.C_Greater } (! bb18) ]
          
        | bb18 = bb10
        | bb10 = s0
          [ s0 = Node'0.t_node <k> <v> {node}
              (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                 [ &_27 <- rright'0 ] 
                s1)
          | s1 = {[@expl:type invariant] inv'4 node} s2
          | s2 = -{resolve'4 node}- s3
          | s3 = {[@expl:type invariant] inv'0 _27} s4
          | s4 = -{resolve'1 _27}- s5
          | s5 =  [ &tree <- _27 ] s6
          | s6 = bb13 ]
          
        | bb8 = bb11
        | bb11 = s0
          [ s0 = Node'0.t_node <k> <v> {node}
              (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                 [ &_22 <- rleft'0 ] 
                s1)
          | s1 = {[@expl:type invariant] inv'4 node} s2
          | s2 = -{resolve'4 node}- s3
          | s3 = {[@expl:type invariant] inv'0 _22} s4
          | s4 = -{resolve'1 _22}- s5
          | s5 =  [ &tree <- _22 ] s6
          | s6 = bb13 ]
          
        | bb13 = bb2 ]
         ]
      
    | bb14 = s0
      [ s0 = {[@expl:type invariant] inv'2 _13} s1
      | s1 = -{resolve'2 _13}- s2
      | s2 = {[@expl:type invariant] inv'3 key} s3
      | s3 = -{resolve'3 key}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb15 ]
      
    | bb17 = bb9
    | bb9 = bb12
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'3 key} s1
      | s1 = -{resolve'3 key}- s2
      | s2 = Node'0.t_node <k> <v> {node}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
             [ &_25 <- rval'0 ] 
            s3)
      | s3 = {[@expl:type invariant] inv'4 node} s4
      | s4 = -{resolve'4 node}- s5
      | s5 = {[@expl:type invariant] inv'5 _25} s6
      | s6 = -{resolve'5 _25}- s7
      | s7 =  [ &_0 <- Option'0.C_Some _25 ] s8
      | s8 = bb15 ]
      
    | bb15 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option v = any_l ()
    | & self : Tree'0.t_tree k v = self
    | & key : k = key
    | & _6 : Snapshot.snap_ty () = any_l ()
    | & tree : Tree'0.t_tree k v = any_l ()
    | & _13 : Option'0.t_option (Node'0.t_node k v) = any_l ()
    | & node : Node'0.t_node k v = any_l ()
    | & _16 : Ordering'0.t_ordering = any_l ()
    | & _19 : k = any_l ()
    | & _22 : Tree'0.t_tree k v = any_l ()
    | & _25 : v = any_l ()
    | & _27 : Tree'0.t_tree k v = any_l () ]
    
    [ return' (result:Option'0.t_option v)-> {[@expl:postcondition] [%#sred_black_tree7] inv'6 result}
      {[@expl:postcondition] [%#sred_black_tree6] match result with
        | Option'0.C_Some v -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl15_GetMut
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 845 8 845 45
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 847 23 847 41
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 850 20 850 43
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 851 20 851 46
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 852 20 852 45
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 850 8 850 45
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 838 15 838 34
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 844 24 844 28
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 844 30 844 33
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 839 14 839 33
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 840 14 843 5
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 844 42 844 56
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span44 = "../red_black_tree.rs" 54 12 61 13
  
  let%span span45 = "../red_black_tree.rs" 173 20 173 54
  
  let%span span46 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span47 = "../red_black_tree.rs" 258 12 261 13
  
  let%span span48 = "../red_black_tree.rs" 282 20 282 102
  
  let%span span49 = "../red_black_tree.rs" 268 12 274 13
  
  let%span span50 = "../red_black_tree.rs" 296 14 296 18
  
  let%span span51 = "../red_black_tree.rs" 295 14 295 25
  
  let%span span52 = "../red_black_tree.rs" 298 12 306 13
  
  let%span span53 = "../red_black_tree.rs" 339 20 339 61
  
  let%span span54 = "../red_black_tree.rs" 313 12 319 13
  
  let%span span55 = "../red_black_tree.rs" 33 12 37 13
  
  let%span span56 = "../red_black_tree.rs" 186 12 187 104
  
  let%span span57 = "../red_black_tree.rs" 206 12 212 13
  
  let%span span58 = "../red_black_tree.rs" 358 12 358 59
  
  let%span span59 = "../red_black_tree.rs" 366 12 366 88
  
  let%span span60 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "" 0 0 0 0
  
  let%span span63 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span64 = "../red_black_tree.rs" 234 12 239 13
  
  let%span span65 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span66 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span67 = "../red_black_tree.rs" 69 8 69 12
  
  let%span span68 = "../red_black_tree.rs" 70 8 70 12
  
  let%span span69 = "../red_black_tree.rs" 71 8 71 9
  
  let%span span70 = "../red_black_tree.rs" 66 4 67 93
  
  let%span span71 = "../red_black_tree.rs" 74 12 82 13
  
  let%span span72 = "../red_black_tree.rs" 87 15 87 35
  
  let%span span73 = "../red_black_tree.rs" 89 29 89 33
  
  let%span span74 = "../red_black_tree.rs" 89 35 89 39
  
  let%span span75 = "../red_black_tree.rs" 89 81 89 82
  
  let%span span76 = "../red_black_tree.rs" 88 4 88 94
  
  let%span span77 = "../red_black_tree.rs" 94 12 103 13
  
  let%span span78 = "../red_black_tree.rs" 108 15 108 35
  
  let%span span79 = "../red_black_tree.rs" 110 25 110 29
  
  let%span span80 = "../red_black_tree.rs" 110 31 110 32
  
  let%span span81 = "../red_black_tree.rs" 109 4 109 80
  
  let%span span82 = "../red_black_tree.rs" 115 12 115 61
  
  use Core_Option_Option_Type as Option'0
  
  type deep_model_ty'0
  
  use map.Map
  
  predicate invariant'13 (self : Map.map deep_model_ty'0 (Option'0.t_option v)) =
    [%#span12] true
  
  predicate inv'12 (_x : Map.map deep_model_ty'0 (Option'0.t_option v))
  
  axiom inv'12 : forall x : Map.map deep_model_ty'0 (Option'0.t_option v) . inv'12 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'2 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span13] inv'2 x)
   -> ([%#span14] inv'2 y)  -> ([%#span15] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span17] inv'2 x)  -> ([%#span18] inv'2 y)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span21] inv'2 x)  -> ([%#span22] inv'2 y)  -> ([%#span23] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span24] cmp_log'0 x y
  = o)
   -> ([%#span25] cmp_log'0 y z = o)
   -> ([%#span26] inv'2 x)  -> ([%#span27] inv'2 y)  -> ([%#span28] inv'2 z)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span30] inv'2 x)
   -> ([%#span31] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] inv'2 x)
   -> ([%#span33] inv'2 y)  -> ([%#span34] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span35] inv'2 x)
   -> ([%#span36] inv'2 y)  -> ([%#span37] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span38] inv'2 x)
   -> ([%#span39] inv'2 y)  -> ([%#span40] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span41] inv'2 x)
   -> ([%#span42] inv'2 y)  -> ([%#span43] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : Option'0.t_option (borrowed v)) =
    [%#span12] true
  
  predicate inv'11 (_x : Option'0.t_option (borrowed v))
  
  axiom inv'11 : forall x : Option'0.t_option (borrowed v) . inv'11 x = true
  
  predicate invariant'11 (self : borrowed v)
  
  predicate inv'10 (_x : borrowed v)
  
  axiom inv'10 : forall x : borrowed v . inv'10 x = true
  
  use RedBlackTree_Node_Type as Node'0
  
  predicate invariant'10 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span12] true
  
  predicate inv'9 (_x : borrowed (Option'0.t_option (Node'0.t_node k v)))
  
  axiom inv'9 : forall x : borrowed (Option'0.t_option (Node'0.t_node k v)) . inv'9 x = true
  
  predicate invariant'9 (self : borrowed (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'8 (_x : borrowed (Node'0.t_node k v))
  
  axiom inv'8 : forall x : borrowed (Node'0.t_node k v) . inv'8 x = true
  
  use RedBlackTree_Tree_Type as Tree'0
  
  predicate invariant'8 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span12] true
  
  predicate inv'7 (_x : borrowed (Tree'0.t_tree k v))
  
  axiom inv'7 : forall x : borrowed (Tree'0.t_tree k v) . inv'7 x = true
  
  predicate invariant'7 (self : Tree'0.t_tree k v) =
    [%#span12] true
  
  predicate inv'6 (_x : Tree'0.t_tree k v)
  
  axiom inv'6 : forall x : Tree'0.t_tree k v . inv'6 x = true
  
  predicate invariant'6 (self : k)
  
  predicate inv'5 (_x : k)
  
  axiom inv'5 : forall x : k . inv'5 x = true
  
  predicate invariant'5 (self : Node'0.t_node k v) =
    [%#span12] true
  
  predicate inv'4 (_x : Node'0.t_node k v)
  
  axiom inv'4 : forall x : Node'0.t_node k v . inv'4 x = true
  
  predicate invariant'4 (self : Option'0.t_option (Node'0.t_node k v)) =
    [%#span12] true
  
  predicate inv'3 (_x : Option'0.t_option (Node'0.t_node k v))
  
  axiom inv'3 : forall x : Option'0.t_option (Node'0.t_node k v) . inv'3 x = true
  
  predicate invariant'3 (self : deep_model_ty'0)
  
  axiom inv'2 : forall x : deep_model_ty'0 . inv'2 x = true
  
  predicate invariant'2 (self : v)
  
  predicate inv'1 (_x : v)
  
  axiom inv'1 : forall x : v . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'1 (self : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v))) =
    [%#span12] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v)))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v)) . inv'0 x = true
  
  use map.Map
  
  function deep_model'1 (self : k) : deep_model_ty'0
  
  function model_acc'0 [#"../red_black_tree.rs" 49 4 52 47] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span44] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'1 [#"../red_black_tree.rs" 172 4 172 50] (self : Tree'0.t_tree k v) : Map.map deep_model_ty'0 (Option'0.t_option v)
    
   =
    [%#span45] model_acc'0 self (Const.const (Option'0.C_None))
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Tree'0.t_tree k v)) : Map.map deep_model_ty'0 (Option'0.t_option v) =
    [%#span46] shallow_model'1 self.current
  
  use RedBlackTree_Color_Type as Color'0
  
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  
  function color'0 [#"../red_black_tree.rs" 256 4 256 27] (self : Tree'0.t_tree k v) : Color'0.t_color =
    [%#span47] match RedBlackTree_Tree_Type.tree_node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 281 4 281 41] (self : Node'0.t_node k v) =
    [%#span48] color'0 (RedBlackTree_Node_Type.node_right self) = Color'0.C_Black
    /\ (RedBlackTree_Node_Type.node_color self = Color'0.C_Black
    \/ color'0 (RedBlackTree_Node_Type.node_left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 266 4 266 36] (self : Tree'0.t_tree k v) =
    [%#span49] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 296 4 296 26] (self : Tree'0.t_tree k v) : int =
    [%#span52] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_tree k v . ([%#span50] inv'6 self)  -> ([%#span51] height'0 self >= 0)
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 338 4 338 42] (self : Node'0.t_node k v) =
    [%#span53] height'0 (RedBlackTree_Node_Type.node_left self) = height'0 (RedBlackTree_Node_Type.node_right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 311 4 311 37] (self : Tree'0.t_tree k v) =
    [%#span54] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 31 4 31 57] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) (v : v)
   =
    [%#span55] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'1 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 184 4 184 39] (self : Node'0.t_node k v) =
    [%#span56] (forall k : deep_model_ty'0, v : v . inv'2 k /\ inv'1 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_left self) k v
     -> lt_log'0 k (deep_model'1 (RedBlackTree_Node_Type.node_key self)))
    /\ (forall k : deep_model_ty'0, v : v . inv'2 k /\ inv'1 v
     -> has_mapping'0 (RedBlackTree_Node_Type.node_right self) k v
     -> lt_log'0 (deep_model'1 (RedBlackTree_Node_Type.node_key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 204 4 204 34] (self : Tree'0.t_tree k v) =
    [%#span57] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 356 4 356 43] (self : Tree'0.t_tree k v) =
    [%#span58] bst_invariant'0 self /\ height_invariant'0 self
  
  predicate invariant'0 [#"../red_black_tree.rs" 364 4 364 34] (self : Tree'0.t_tree k v) =
    [%#span59] internal_invariant'0 self /\ color_invariant'0 self /\ color'0 self = Color'0.C_Black
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : borrowed v) =
    [%#span60] self.final = self.current
  
  predicate resolve'5 (self : borrowed (Option'0.t_option (Node'0.t_node k v))) =
    [%#span60] self.final = self.current
  
  predicate resolve'4 (self : borrowed (Node'0.t_node k v)) =
    [%#span60] self.final = self.current
  
  predicate resolve'3 (self : borrowed (Tree'0.t_tree k v)) =
    [%#span60] self.final = self.current
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_ordering))= {[@expl:precondition] [%#span62] inv'5 other}
    {[@expl:precondition] [%#span61] inv'5 self}
    any
    [ return' (result:Ordering'0.t_ordering)-> {[%#span63] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : k)
  
  use RedBlackTree_Cp_Type as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 232 4 232 52] (self : CP'0.t_cp) (tree : Tree'0.t_tree k v) =
    [%#span64] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_node k v . inv'4 node
      /\ RedBlackTree_Tree_Type.tree_node tree = Option'0.C_Some node
      /\ RedBlackTree_Node_Type.node_color node = color
      /\ match_t'0 l (RedBlackTree_Node_Type.node_left node) /\ match_t'0 r (RedBlackTree_Node_Type.node_right node)
      end
  
  use prelude.prelude.Snapshot
  
  function deep_model'0 (self : k) : deep_model_ty'0 =
    [%#span65] deep_model'1 self
  
  predicate resolve'1 (self : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v))) =
    [%#span66] true
  
  use prelude.prelude.Snapshot
  
  predicate resolve'0 (self : Snapshot.snap_ty ()) =
    [%#span66] true
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 68 4 72 5] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span71] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span67] inv'6 self)
   -> ([%#span68] inv'12 accu)
   -> ([%#span69] inv'2 k)
   -> ([%#span70] Map.get (model_acc'0 self accu) k = Map.get accu k
  \/ (exists v : v . inv'1 v /\ Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v))
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 89 4 91 33] (self : Tree'0.t_tree k v) (accu : Map.map deep_model_ty'0 (Option'0.t_option v)) (k : deep_model_ty'0) : ()
    
   =
    [%#span77] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_tree k v, accu : Map.map deep_model_ty'0 (Option'0.t_option v), k : deep_model_ty'0 . ([%#span72] bst_invariant'0 self)
   -> ([%#span73] inv'6 self)
   -> ([%#span74] inv'12 accu)
   -> ([%#span75] inv'2 k)
   -> ([%#span76] forall v : v . inv'1 v
   -> has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 110 4 112 33] (self : Tree'0.t_tree k v) (k : deep_model_ty'0) : ()
    
   =
    [%#span82] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_tree k v, k : deep_model_ty'0 . ([%#span78] bst_invariant'0 self)
   -> ([%#span79] inv'6 self)
   -> ([%#span80] inv'2 k)
   -> ([%#span81] forall v : v . inv'1 v
   -> has_mapping'0 self k v = (Map.get (shallow_model'1 self) k = Option'0.C_Some v))
  
  let rec get_mut (self:borrowed (Tree'0.t_tree k v)) (key:k) (return'  (ret:Option'0.t_option (borrowed v)))= {[%#sred_black_tree8] inv'5 key}
    {[%#sred_black_tree7] inv'7 self}
    {[%#sred_black_tree6] invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_7 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1 | s1 =  [ &old_self <- [%#sred_black_tree1] Snapshot.new self ] s2 | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_self} s1
      | s1 = -{resolve'1 old_self}- s2
      | s2 =  [ &tree <- self ] (any [ any_ (_any:borrowed (Tree'0.t_tree k v))-> (!  [ &self <- _any ] s3) ] )
      | s3 = bb3 ]
      
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] [%#sred_black_tree5] forall k : deep_model_ty'0, v : v . inv'2 k /\ inv'1 v
         -> has_mapping'0 tree.current k v = has_mapping'0 tree.final k v
         -> has_mapping'0 (Snapshot.inner old_self).current k v = has_mapping'0 (Snapshot.inner old_self).final k v}
        {[@expl:loop invariant] [%#sred_black_tree5] match_t'0 (CP'0.C_CPL (color'0 tree.current)) tree.final
         -> match_t'0 (CP'0.C_CPL (Color'0.C_Black)) (Snapshot.inner old_self).final}
        {[@expl:loop invariant] [%#sred_black_tree5] height'0 tree.current = height'0 tree.final
        /\ height_invariant'0 tree.final  -> height_invariant'0 (Snapshot.inner old_self).final}
        {[@expl:loop invariant] [%#sred_black_tree5] (forall k : deep_model_ty'0, v : v . inv'2 k /\ inv'1 v
         -> k = deep_model'0 key \/ has_mapping'0 tree.current k v = has_mapping'0 tree.final k v)
         -> bst_invariant'0 tree.final  -> bst_invariant'0 (Snapshot.inner old_self).final}
        {[@expl:loop invariant] [%#sred_black_tree5] forall v : v . inv'1 v
         -> has_mapping'0 tree.current (deep_model'0 key) v
        = has_mapping'0 (Snapshot.inner old_self).current (deep_model'0 key) v}
        {[@expl:loop invariant] [%#sred_black_tree5] forall v : v . inv'1 v
         -> has_mapping'0 tree.final (deep_model'0 key) v
        = has_mapping'0 (Snapshot.inner old_self).final (deep_model'0 key) v}
        {[@expl:loop invariant] [%#sred_black_tree4] color_invariant'0 tree.current}
        {[@expl:loop invariant] [%#sred_black_tree3] height_invariant'0 tree.current}
        {[@expl:loop invariant] [%#sred_black_tree2] bst_invariant'0 tree.current}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 = Tree'0.t_tree <k> <v> {tree.current}
              (fun (rnode'0:Option'0.t_option (Node'0.t_node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_option (Node'0.t_node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.get_id tree) 1}
                  (fun (_ret':borrowed (Option'0.t_option (Node'0.t_node k v))) ->
                     [ &_23 <- _ret' ] 
                    Tree'0.t_tree <k> <v> {tree.current}
                      (fun (l_node'0:Option'0.t_option (Node'0.t_node k v)) ->
                         [ &tree <- { tree with current = Tree'0.C_Tree _23.final ; } ] 
                        s1)))
          | s1 = -{inv'3 _23.final}- s2
          | s2 = any
            [ br0 -> {_23.current = Option'0.C_None } (! bb15)
            | br1 (a:Node'0.t_node k v)-> {_23.current = Option'0.C_Some a} (! bb5) ]
             ]
          
        | bb5 = bb6
        | bb6 = s0
          [ s0 = Option'0.some <Node'0.t_node k v> {_23.current}
              (fun (r0'0:Node'0.t_node k v) ->
                Borrow.borrow_final <Node'0.t_node k v> {r0'0} {Borrow.inherit_id (Borrow.get_id _23) 1}
                  (fun (_ret':borrowed (Node'0.t_node k v)) ->
                     [ &node <- _ret' ] 
                    Option'0.some <Node'0.t_node k v> {_23.current}
                      (fun (l_0'0:Node'0.t_node k v) ->
                         [ &_23 <- { _23 with current = Option'0.C_Some node.final ; } ] 
                        s1)))
          | s1 = -{inv'4 node.final}- s2
          | s2 = Node'0.t_node <k> <v> {node.current}
              (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                 [ &_29 <- rkey'0 ] 
                s3)
          | s3 = {[@expl:type invariant] inv'5 _29} s4
          | s4 = -{resolve'2 _29}- s5
          | s5 = cmp'0 {key} {_29} (fun (_ret':Ordering'0.t_ordering) ->  [ &_26 <- _ret' ] s6)
          | s6 = bb7 ]
          
        | bb7 = any
          [ br0 -> {_26 = Ordering'0.C_Less } (! bb9)
          | br1 -> {_26 = Ordering'0.C_Equal } (! bb18)
          | br2 -> {_26 = Ordering'0.C_Greater } (! bb19) ]
          
        | bb19 = bb11
        | bb11 = s0
          [ s0 = Node'0.t_node <k> <v> {node.current}
              (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                Borrow.borrow_mut <Tree'0.t_tree k v> {rright'0}
                  (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                     [ &_37 <- _ret' ] 
                    Node'0.t_node <k> <v> {node.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        
                        [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _37.final ; } ]
                        
                        s1)))
          | s1 = -{inv'6 _37.final}- s2
          | s2 = Borrow.borrow_final <Tree'0.t_tree k v> {_37.current} {Borrow.get_id _37}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_36 <- _ret' ] 
                 [ &_37 <- { _37 with current = _36.final ; } ] 
                s3)
          | s3 = -{inv'6 _36.final}- s4
          | s4 = {[@expl:type invariant] inv'7 tree} s5
          | s5 = -{resolve'3 tree}- s6
          | s6 =  [ &tree <- _36 ] (any [ any_ (_any:borrowed (Tree'0.t_tree k v))-> (!  [ &_36 <- _any ] s7) ] )
          | s7 = {[@expl:type invariant] inv'7 _37} s8
          | s8 = -{resolve'3 _37}- s9
          | s9 = bb14 ]
          
        | bb9 = bb12
        | bb12 = s0
          [ s0 = Node'0.t_node <k> <v> {node.current}
              (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
                Borrow.borrow_mut <Tree'0.t_tree k v> {rleft'0}
                  (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                     [ &_32 <- _ret' ] 
                    Node'0.t_node <k> <v> {node.current}
                      (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                        
                        [ &node <- { node with current = Node'0.C_Node _32.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                        
                        s1)))
          | s1 = -{inv'6 _32.final}- s2
          | s2 = Borrow.borrow_final <Tree'0.t_tree k v> {_32.current} {Borrow.get_id _32}
              (fun (_ret':borrowed (Tree'0.t_tree k v)) ->
                 [ &_31 <- _ret' ] 
                 [ &_32 <- { _32 with current = _31.final ; } ] 
                s3)
          | s3 = -{inv'6 _31.final}- s4
          | s4 = {[@expl:type invariant] inv'7 tree} s5
          | s5 = -{resolve'3 tree}- s6
          | s6 =  [ &tree <- _31 ] (any [ any_ (_any:borrowed (Tree'0.t_tree k v))-> (!  [ &_31 <- _any ] s7) ] )
          | s7 = {[@expl:type invariant] inv'7 _32} s8
          | s8 = -{resolve'3 _32}- s9
          | s9 = bb14 ]
          
        | bb14 = s0
          [ s0 = {[@expl:type invariant] inv'8 node} s1
          | s1 = -{resolve'4 node}- s2
          | s2 = {[@expl:type invariant] inv'9 _23} s3
          | s3 = -{resolve'5 _23}- s4
          | s4 = bb3 ]
           ]
         ]
      
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'9 _23} s1
      | s1 = -{resolve'5 _23}- s2
      | s2 = {[@expl:type invariant] inv'5 key} s3
      | s3 = -{resolve'2 key}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb16 ]
      
    | bb18 = bb10
    | bb10 = bb13
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'5 key} s1
      | s1 = -{resolve'2 key}- s2
      | s2 = Node'0.t_node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_tree k v) (rcolor'0:Color'0.t_color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_tree k v) ->
            Borrow.borrow_mut <v> {rval'0}
              (fun (_ret':borrowed v) ->
                 [ &_35 <- _ret' ] 
                Node'0.t_node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_tree k v) (l_color'0:Color'0.t_color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_tree k v) ->
                    
                    [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 _35.final l_right'0 ; } ]
                    
                    s3)))
      | s3 = -{inv'1 _35.final}- s4
      | s4 = Borrow.borrow_final <v> {_35.current} {Borrow.get_id _35}
          (fun (_ret':borrowed v) ->  [ &_34 <- _ret' ]  [ &_35 <- { _35 with current = _34.final ; } ] s5)
      | s5 = -{inv'1 _34.final}- s6
      | s6 =  [ &_0 <- Option'0.C_Some _34 ] (any [ any_ (_any:borrowed v)-> (!  [ &_34 <- _any ] s7) ] )
      | s7 = {[@expl:type invariant] inv'10 _35} s8
      | s8 = -{resolve'6 _35}- s9
      | s9 = {[@expl:type invariant] inv'8 node} s10
      | s10 = -{resolve'4 node}- s11
      | s11 = {[@expl:type invariant] inv'9 _23} s12
      | s12 = -{resolve'5 _23}- s13
      | s13 = bb16 ]
      
    | bb16 = s0 [ s0 = {[@expl:type invariant] inv'7 tree} s1 | s1 = -{resolve'3 tree}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_option (borrowed v) = any_l ()
    | & self : borrowed (Tree'0.t_tree k v) = self
    | & key : k = key
    | & _7 : Snapshot.snap_ty () = any_l ()
    | & old_self : Snapshot.snap_ty (borrowed (Tree'0.t_tree k v)) = any_l ()
    | & tree : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _23 : borrowed (Option'0.t_option (Node'0.t_node k v)) = any_l ()
    | & node : borrowed (Node'0.t_node k v) = any_l ()
    | & _26 : Ordering'0.t_ordering = any_l ()
    | & _29 : k = any_l ()
    | & _31 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _32 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _34 : borrowed v = any_l ()
    | & _35 : borrowed v = any_l ()
    | & _36 : borrowed (Tree'0.t_tree k v) = any_l ()
    | & _37 : borrowed (Tree'0.t_tree k v) = any_l () ]
    
    [ return' (result:Option'0.t_option (borrowed v))-> {[@expl:postcondition] [%#sred_black_tree11] inv'11 result}
      {[@expl:postcondition] [%#sred_black_tree10] match result with
        | Option'0.C_Some v -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_Some (v.current)
        /\ shallow_model'1 self.final = Map.set (shallow_model'0 self) (deep_model'0 key) (Option'0.C_Some (v.final))
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_None
        /\ shallow_model'1 self.final = shallow_model'0 self
        end}
      {[@expl:postcondition] [%#sred_black_tree9] invariant'0 self.final}
      (! return' {result}) ]
    
end
module RedBlackTree_Impl16
  let%span sred_black_tree0 = "../red_black_tree.rs" 8 9 8 14
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use RedBlackTree_Color_Type as Color'0
  
  predicate invariant'1 (self : Color'0.t_color) =
    [%#span1] true
  
  predicate inv'1 (_x : Color'0.t_color)
  
  axiom inv'1 : forall x : Color'0.t_color . inv'1 x = true
  
  predicate invariant'0 (self : Color'0.t_color) =
    [%#span1] true
  
  predicate inv'0 (_x : Color'0.t_color)
  
  axiom inv'0 : forall x : Color'0.t_color . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  goal clone'_refn : [%#sred_black_tree0] forall self : Color'0.t_color . inv'0 self
   -> (forall result : Color'0.t_color . result = self  -> inv'1 result /\ result = self)
end
module RedBlackTree_Impl17
  
end
module RedBlackTree_Impl2
  type k
  
  type v
end
module RedBlackTree_Impl3
  type k
  
  type v
end
