module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type twomodules_mod1_t  = 
    | TwoModules_Mod1_T_A
    | TwoModules_Mod1_T_B
    | TwoModules_Mod1_T_C
    
end
module TwoModules_Mod2_X_Interface
  use Type
  val x (t : Type.twomodules_mod1_t) : bool
end
module TwoModules_Mod2_X
  use Type
  let rec cfg x (t : Type.twomodules_mod1_t) : bool = 
  var _0 : bool;
  var t_1 : Type.twomodules_mod1_t;
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    _0 <- true;
    assume { (fun x -> true) t_1 };
    return _0
  }
  
end
module TwoModules_Main_Interface
  val main () : ()
end
module TwoModules_Main
  use Type
  clone TwoModules_Mod2_X_Interface as X0
  let rec cfg main () : () = 
  var _0 : ();
  var _1 : bool;
  var _2 : Type.twomodules_mod1_t;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.TwoModules_Mod1_T_B;
    _1 <- X0.x _2;
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
