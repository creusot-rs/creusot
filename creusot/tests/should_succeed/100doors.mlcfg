
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  let rec ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)}
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {Seq.get seq (UInt64.to_int self) = out}
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i}
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module C100doors_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module C100doors_F
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = bool
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = bool
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = bool
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = bool
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = bool
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = bool, val Model0.model = Model0.model,
    val Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = bool
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = bool, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model0.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = bool, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model0.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = bool, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = bool, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model0.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = bool, val Model0.model = Model0.model
  let rec cfg f [@cfg:stackify] [#"../100doors.rs" 18 0 18 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var door_open_1 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var i_2 : usize;
  var _3 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : ();
  var _10 : borrowed (Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global));
  var _11 : ();
  var _12 : ();
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _17 : usize;
  var _18 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var _19 : ();
  var pass_20 : usize;
  var _23 : bool;
  var _24 : usize;
  var door_25 : usize;
  var _26 : ();
  var _29 : bool;
  var _30 : usize;
  var _31 : bool;
  var _32 : bool;
  var _33 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var _34 : usize;
  var _35 : usize;
  var _36 : borrowed bool;
  var _37 : borrowed (Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global));
  var _38 : usize;
  var _39 : usize;
  var _40 : usize;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  var _46 : ();
  {
    goto BB0
  }
  BB0 {
    door_open_1 <- ([#"../100doors.rs" 19 35 19 58] WithCapacity0.with_capacity (100 : usize));
    goto BB1
  }
  BB1 {
    i_2 <- (1 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_bounds { [#"../100doors.rs" 21 28 21 48] 1 <= UInt64.to_int i_2 /\ UInt64.to_int i_2 <= 101 };
    invariant door_size { [#"../100doors.rs" 22 27 22 55] Seq.length (Model0.model door_open_1) = UInt64.to_int i_2 - 1 };
    _8 <- i_2;
    _7 <- ([#"../100doors.rs" 23 10 23 17] _8 < (101 : usize));
    switch (_7)
      | False -> goto BB6
      | True -> goto BB4
      end
  }
  BB4 {
    _10 <- borrow_mut door_open_1;
    door_open_1 <-  ^ _10;
    _9 <- ([#"../100doors.rs" 24 8 24 29] Push0.push _10 false);
    goto BB5
  }
  BB5 {
    i_2 <- ([#"../100doors.rs" 25 8 25 14] i_2 + (1 : usize));
    _6 <- ();
    goto BB3
  }
  BB6 {
    _3 <- ();
    _18 <- door_open_1;
    _17 <- ([#"../100doors.rs" 32 12 32 27] Len0.len _18);
    goto BB7
  }
  BB7 {
    _16 <- ([#"../100doors.rs" 32 12 32 34] _17 = (100 : usize));
    _15 <- not _16;
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _14 <- ();
    pass_20 <- (1 : usize);
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    invariant loop_bounds { [#"../100doors.rs" 34 28 34 54] 1 <= UInt64.to_int pass_20 /\ UInt64.to_int pass_20 <= 101 };
    invariant door_size { [#"../100doors.rs" 35 27 35 52] Seq.length (Model0.model door_open_1) = 100 };
    _24 <- pass_20;
    _23 <- ([#"../100doors.rs" 36 10 36 20] _24 < (101 : usize));
    switch (_23)
      | False -> goto BB19
      | True -> goto BB12
      end
  }
  BB12 {
    door_25 <- pass_20;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    invariant loop_bounds { [#"../100doors.rs" 38 32 38 66] 1 <= UInt64.to_int door_25 /\ UInt64.to_int door_25 <= 100 + UInt64.to_int pass_20 };
    invariant door_size { [#"../100doors.rs" 39 31 39 56] Seq.length (Model0.model door_open_1) = 100 };
    _30 <- door_25;
    _29 <- ([#"../100doors.rs" 40 14 40 25] _30 <= (100 : usize));
    switch (_29)
      | False -> goto BB18
      | True -> goto BB15
      end
  }
  BB15 {
    _33 <- door_open_1;
    _35 <- door_25;
    _34 <- ([#"../100doors.rs" 41 45 41 53] _35 - (1 : usize));
    _32 <- ([#"../100doors.rs" 41 35 41 54] Index0.index _33 _34);
    goto BB16
  }
  BB16 {
    _31 <- _32;
    _37 <- borrow_mut door_open_1;
    door_open_1 <-  ^ _37;
    _39 <- door_25;
    _38 <- ([#"../100doors.rs" 41 22 41 30] _39 - (1 : usize));
    _36 <- ([#"../100doors.rs" 41 12 41 31] IndexMut0.index_mut _37 _38);
    goto BB17
  }
  BB17 {
    _36 <- { _36 with current = (not _31) };
    assume { Resolve0.resolve _36 };
    _40 <- pass_20;
    door_25 <- ([#"../100doors.rs" 42 12 42 24] door_25 + _40);
    _6 <- ();
    goto BB14
  }
  BB18 {
    _26 <- ();
    pass_20 <- ([#"../100doors.rs" 44 8 44 17] pass_20 + (1 : usize));
    _6 <- ();
    goto BB11
  }
  BB19 {
    _0 <- ();
    goto BB20
  }
  BB20 {
    assume { Resolve1.resolve door_open_1 };
    return _0
  }
  
end
