module M_filter_positive__num_of_pos [#"filter_positive.rs" 37 0 37 49]
  let%span sfilter_positive0 = "filter_positive.rs" 36 10 36 13
  let%span sfilter_positive1 = "filter_positive.rs" 38 4 46 5
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  constant i  : int
  
  constant j  : int
  
  constant t  : Seq.seq int32
  
  function num_of_pos'0 [#"filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  
  goal vc_num_of_pos'0 : if i >= j then
    true
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then
      0 <= ([%#sfilter_positive0] j - i) /\ ([%#sfilter_positive0] j - 1 - i) < ([%#sfilter_positive0] j - i)
    else
      0 <= ([%#sfilter_positive0] j - i) /\ ([%#sfilter_positive0] j - 1 - i) < ([%#sfilter_positive0] j - i)
    
  
end
module M_filter_positive__lemma_num_of_pos_increasing [#"filter_positive.rs" 65 0 65 67]
  let%span sfilter_positive0 = "filter_positive.rs" 62 11 62 17
  let%span sfilter_positive1 = "filter_positive.rs" 63 10 63 48
  let%span sfilter_positive2 = "filter_positive.rs" 64 10 64 13
  let%span sfilter_positive3 = "filter_positive.rs" 67 8 69 9
  let%span sfilter_positive4 = "filter_positive.rs" 36 10 36 13
  let%span sfilter_positive5 = "filter_positive.rs" 38 4 46 5
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  function num_of_pos'0 [#"filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos'0 i j t
  = ([%#sfilter_positive5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  
  constant i  : int
  
  constant j  : int
  
  constant k  : int
  
  constant t  : Seq.seq int32
  
  function lemma_num_of_pos_increasing'0 [#"filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  
  goal vc_lemma_num_of_pos_increasing'0 : ([%#sfilter_positive0] j <= k)
   -> (if j < k then
    (([@expl:lemma_num_of_pos_increasing requires] [%#sfilter_positive0] j + 1 <= k)
    /\ 0 <= ([%#sfilter_positive2] k - j) /\ ([%#sfilter_positive2] k - (j + 1)) < ([%#sfilter_positive2] k - j))
    /\ (([%#sfilter_positive1] num_of_pos'0 i (j + 1) t <= num_of_pos'0 i k t)
     -> ([%#sfilter_positive1] num_of_pos'0 i j t <= num_of_pos'0 i k t))
  else
    [%#sfilter_positive1] num_of_pos'0 i j t <= num_of_pos'0 i k t
  )
end
module M_filter_positive__lemma_num_of_pos_strictly_increasing [#"filter_positive.rs" 79 0 79 60]
  let%span sfilter_positive0 = "filter_positive.rs" 76 11 76 32
  let%span sfilter_positive1 = "filter_positive.rs" 77 11 77 20
  let%span sfilter_positive2 = "filter_positive.rs" 78 10 78 49
  let%span sfilter_positive3 = "filter_positive.rs" 75 0 75 8
  let%span sfilter_positive4 = "filter_positive.rs" 36 10 36 13
  let%span sfilter_positive5 = "filter_positive.rs" 38 4 46 5
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  function num_of_pos'0 [#"filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos'0 i j t
  = ([%#sfilter_positive5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  
  constant i  : int
  
  constant t  : Seq.seq int32
  
  function lemma_num_of_pos_strictly_increasing'0 [#"filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
  
  goal vc_lemma_num_of_pos_strictly_increasing'0 : ([%#sfilter_positive1] Int32.to_int (Seq.get t i) > 0)
   -> ([%#sfilter_positive0] 0 <= i /\ i < Seq.length t)
   -> ([%#sfilter_positive2] num_of_pos'0 0 i t < num_of_pos'0 0 (i + 1) t)
end
module M_filter_positive__m [#"filter_positive.rs" 82 0 82 33]
  let%span sfilter_positive0 = "filter_positive.rs" 83 27 83 28
  let%span sfilter_positive1 = "filter_positive.rs" 84 23 84 24
  let%span sfilter_positive2 = "filter_positive.rs" 87 16 87 45
  let%span sfilter_positive3 = "filter_positive.rs" 86 16 86 28
  let%span sfilter_positive4 = "filter_positive.rs" 85 16 85 30
  let%span sfilter_positive5 = "filter_positive.rs" 90 18 90 19
  let%span sfilter_positive6 = "filter_positive.rs" 91 21 91 22
  let%span sfilter_positive7 = "filter_positive.rs" 93 13 93 14
  let%span sfilter_positive8 = "filter_positive.rs" 95 31 95 32
  let%span sfilter_positive9 = "filter_positive.rs" 96 12 96 13
  let%span sfilter_positive10 = "filter_positive.rs" 98 8 98 9
  let%span sfilter_positive11 = "filter_positive.rs" 100 16 100 53
  let%span sfilter_positive12 = "filter_positive.rs" 99 16 99 45
  let%span sfilter_positive13 = "filter_positive.rs" 103 18 103 19
  let%span sfilter_positive14 = "filter_positive.rs" 106 16 106 59
  let%span sfilter_positive15 = "filter_positive.rs" 110 16 110 63
  let%span sfilter_positive16 = "filter_positive.rs" 114 21 114 22
  let%span sfilter_positive17 = "filter_positive.rs" 116 13 116 14
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sfilter_positive19 = "filter_positive.rs" 36 10 36 13
  let%span sfilter_positive20 = "filter_positive.rs" 38 4 46 5
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec23 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 180 22 180 41
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 181 22 181 76
  let%span sfilter_positive26 = "filter_positive.rs" 76 11 76 32
  let%span sfilter_positive27 = "filter_positive.rs" 77 11 77 20
  let%span sfilter_positive28 = "filter_positive.rs" 78 10 78 49
  let%span sfilter_positive29 = "filter_positive.rs" 75 0 75 8
  let%span sfilter_positive30 = "filter_positive.rs" 62 11 62 17
  let%span sfilter_positive31 = "filter_positive.rs" 63 10 63 48
  let%span sfilter_positive32 = "filter_positive.rs" 64 10 64 13
  let%span sfilter_positive33 = "filter_positive.rs" 67 8 69 9
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec36 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec37 = "../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span smodel39 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice40 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sindex42 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span smodel43 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice44 = "../../../creusot-contracts/src/std/slice.rs" 136 20 136 94
  let%span sresolve45 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Int
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq int32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec18] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  function num_of_pos'0 [#"filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos'0 i j t
  = ([%#sfilter_positive20] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  function view'1 (self : t_Vec'0) : Seq.seq int32 =
    [%#smodel39] view'0 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'0 self}
    any
    [ return' (result:usize)-> {[%#svec21] UIntSize.to_int result = Seq.length (view'1 self)} (! return' {result}) ]
    
  
  predicate inv'1 (_1 : usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [%#sslice40] UIntSize.to_int self < Seq.length seq
  
  predicate inv'2 (_1 : int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [%#sslice41] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:int32))= {[@expl:index 'self' type invariant] inv'0 self}
    {[@expl:index 'index' type invariant] inv'1 index}
    {[@expl:index requires] [%#svec22] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:int32)-> {inv'2 result} {[%#svec23] has_value'0 index (view'1 self) result} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = true
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : int32 =
    [%#sindex42] Seq.get (view'0 self) ix
  
  let rec from_elem'0 (elem:int32) (n:usize) (return'  (ret:t_Vec'0))= {[@expl:from_elem 'elem' type invariant] inv'3 elem}
    any
    [ return' (result:t_Vec'0)-> {inv'4 result}
      {[%#svec24] Seq.length (view'0 result) = UIntSize.to_int n}
      {[%#svec25] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
    
  
  function lemma_num_of_pos_strictly_increasing'0 [#"filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
   =
    [%#sfilter_positive29] ()
  
  axiom lemma_num_of_pos_strictly_increasing'0_spec : forall i : int, t : Seq.seq int32 . ([%#sfilter_positive26] 0 <= i
  /\ i < Seq.length t)
   -> ([%#sfilter_positive27] Int32.to_int (Seq.get t i) > 0)
   -> ([%#sfilter_positive28] num_of_pos'0 0 i t < num_of_pos'0 0 (i + 1) t)
  
  function lemma_num_of_pos_increasing'0 [#"filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  
  axiom lemma_num_of_pos_increasing'0_def : forall i : int, j : int, k : int, t : Seq.seq int32 . ([%#sfilter_positive30] j
  <= k)
   -> lemma_num_of_pos_increasing'0 i j k t
  = ([%#sfilter_positive33] if j < k then lemma_num_of_pos_increasing'0 i (j + 1) k t else ())
  
  axiom lemma_num_of_pos_increasing'0_spec : forall i : int, j : int, k : int, t : Seq.seq int32 . ([%#sfilter_positive30] j
  <= k)  -> ([%#sfilter_positive31] num_of_pos'0 i j t <= num_of_pos'0 i k t)
  
  predicate inv'5 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'5 x] . inv'5 x = true
  
  function view'2 (self : borrowed (t_Vec'0)) : Seq.seq int32 =
    [%#smodel43] view'0 self.current
  
  predicate inv'6 (_1 : borrowed int32)
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed int32 [inv'6 x] . inv'6 x = true
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq int32) (fin : Seq.seq int32) =
    [%#sslice44] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed int32))= {[@expl:index_mut 'self' type invariant] inv'5 self}
    {[@expl:index_mut 'index' type invariant] inv'1 index}
    {[@expl:index_mut requires] [%#svec34] in_bounds'0 index (view'2 self)}
    any
    [ return' (result:borrowed int32)-> {inv'6 result}
      {[%#svec35] has_value'0 index (view'2 self) result.current}
      {[%#svec36] has_value'0 index (view'0 self.final) result.final}
      {[%#svec37] resolve_elswhere'0 index (view'2 self) (view'0 self.final)}
      {[%#svec38] Seq.length (view'0 self.final) = Seq.length (view'2 self)}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve45] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec m'0 (t:t_Vec'0) (return'  (ret:t_Vec'0))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [%#sfilter_positive0] (0 : usize) ] s1
      | s1 =  [ &i <- [%#sfilter_positive1] (0 : usize) ] s2
      | s2 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant #0] [%#sfilter_positive4] UIntSize.to_int i <= Seq.length (view'0 t)}
        {[@expl:loop invariant #1] [%#sfilter_positive3] UIntSize.to_int count <= UIntSize.to_int i}
        {[@expl:loop invariant #2] [%#sfilter_positive2] UIntSize.to_int count
        = num_of_pos'0 0 (UIntSize.to_int i) (view'0 t)}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = bb3
        | bb3 = bb4
        | bb4 = s0 [ s0 = len'0 {t} (fun (_ret':usize) ->  [ &_13 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {i} {_13} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1)
          | s1 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb6) ]  ]
          
        | bb6 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_18 <- _ret' ] s1) | s1 = bb7 ] 
        | bb7 = s0
          [ s0 = Int32.gt {_18} {[%#sfilter_positive5] (0 : int32)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
          | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb8) ]  ]
          
        | bb8 = s0
          [ s0 = UIntSize.add {count} {[%#sfilter_positive6] (1 : usize)} (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 = bb10 ]
          
        | bb9 = bb10
        | bb10 = s0
          [ s0 = UIntSize.add {i} {[%#sfilter_positive7] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = bb1 ]
           ]
         ]
      
    | bb11 = s0
      [ s0 = from_elem'0 {[%#sfilter_positive8] (0 : int32)} {count} (fun (_ret':t_Vec'0) ->  [ &u <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &count <- [%#sfilter_positive9] (0 : usize) ] s1
      | s1 =  [ &i <- [%#sfilter_positive10] (0 : usize) ] s2
      | s2 = bb13 ]
      
    | bb13 = bb13
      [ bb13 = {[@expl:loop invariant #0] [%#sfilter_positive12] UIntSize.to_int count
        = num_of_pos'0 0 (UIntSize.to_int i) (view'0 t)}
        {[@expl:loop invariant #1] [%#sfilter_positive11] Seq.length (view'0 u)
        = num_of_pos'0 0 (Seq.length (view'0 t)) (view'0 t)}
        (! s0) [ s0 = bb14 ] 
        [ bb14 = bb15
        | bb15 = bb16
        | bb16 = s0 [ s0 = len'0 {t} (fun (_ret':usize) ->  [ &_30 <- _ret' ] s1) | s1 = bb17 ] 
        | bb17 = s0
          [ s0 = UIntSize.lt {i} {_30} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s1)
          | s1 = any [ br0 -> {_28 = false} (! bb27) | br1 -> {_28} (! bb18) ]  ]
          
        | bb18 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_35 <- _ret' ] s1) | s1 = bb19 ] 
        | bb19 = s0
          [ s0 = Int32.gt {_35} {[%#sfilter_positive13] (0 : int32)} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s1)
          | s1 = any [ br0 -> {_33 = false} (! bb25) | br1 -> {_33} (! bb20) ]  ]
          
        | bb20 = s0
          [ s0 = {[@expl:assertion] [%#sfilter_positive14] let _ = lemma_num_of_pos_strictly_increasing'0 (UIntSize.to_int i) (view'0 u) in num_of_pos'0 0 (UIntSize.to_int i) (view'0 t)
            < num_of_pos'0 0 (UIntSize.to_int i + 1) (view'0 t)}
            s1
          | s1 = bb21 ]
          
        | bb21 = s0
          [ s0 = {[@expl:assertion] [%#sfilter_positive15] let _ = lemma_num_of_pos_increasing'0 0 (UIntSize.to_int i
            + 1) (Seq.length (view'0 t)) (view'0 t) in UIntSize.to_int count < Seq.length (view'0 u)}
            s1
          | s1 = bb22 ]
          
        | bb22 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_43 <- _ret' ] s1) | s1 = bb23 ] 
        | bb23 = s0
          [ s0 = Borrow.borrow_mut <t_Vec'0> {u}
              (fun (_ret':borrowed (t_Vec'0)) ->  [ &_47 <- _ret' ]  [ &u <- _ret'.final ] s1)
          | s1 = index_mut'0 {_47} {count} (fun (_ret':borrowed int32) ->  [ &_46 <- _ret' ] s2)
          | s2 = bb24 ]
          
        | bb24 = s0
          [ s0 =  [ &_46 <- { _46 with current = _43 } ] s1
          | s1 = -{resolve'0 _46}- s2
          | s2 = UIntSize.add {count} {[%#sfilter_positive16] (1 : usize)}
              (fun (_ret':usize) ->  [ &count <- _ret' ] s3)
          | s3 = bb26 ]
          
        | bb25 = bb26
        | bb26 = s0
          [ s0 = UIntSize.add {i} {[%#sfilter_positive17] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = bb13 ]
           ]
         ]
      
    | bb27 = s0 [ s0 =  [ &_0 <- u ] s1 | s1 = bb28 ] 
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : t_Vec'0 = any_l ()
    | & t : t_Vec'0 = t
    | & count : usize = any_l ()
    | & i : usize = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : usize = any_l ()
    | & _16 : bool = any_l ()
    | & _18 : int32 = any_l ()
    | & u : t_Vec'0 = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : usize = any_l ()
    | & _33 : bool = any_l ()
    | & _35 : int32 = any_l ()
    | & _43 : int32 = any_l ()
    | & _46 : borrowed int32 = any_l ()
    | & _47 : borrowed (t_Vec'0) = any_l () ]
     [ return' (result:t_Vec'0)-> (! return' {result}) ] 
end
