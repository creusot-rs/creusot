
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module FilterPositive_NumOfPos_Impl
  let%span sfilter_positive0 = "../filter_positive.rs" 36 10 36 13
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use prelude.prelude.Int
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function index_logic'0 (self : Seq'0.t_seq int32) (x : int) : int32
  
  constant i  : int
  
  constant j  : int
  
  constant t  : Seq'0.t_seq int32
  
  function num_of_pos [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq'0.t_seq int32) : int
  
  goal vc_num_of_pos : match i >= j with
    | True -> true
    | False -> match Int32.to_int (index_logic'0 t (j - 1)) > 0 with
      | True -> 0 <= ([%#sfilter_positive0] j - i) /\ ([%#sfilter_positive0] j - 1 - i) < ([%#sfilter_positive0] j - i)
      | False -> 0 <= ([%#sfilter_positive0] j - i) /\ ([%#sfilter_positive0] j - 1 - i) < ([%#sfilter_positive0] j - i)
      end
    end
end
module FilterPositive_LemmaNumOfPosIncreasing_Impl
  let%span sfilter_positive0 = "../filter_positive.rs" 62 11 62 17
  
  let%span sfilter_positive1 = "../filter_positive.rs" 63 10 63 48
  
  let%span sfilter_positive2 = "../filter_positive.rs" 64 10 64 13
  
  let%span span3 = "../filter_positive.rs" 36 10 36 13
  
  let%span span4 = "../filter_positive.rs" 38 4 46 5
  
  use prelude.prelude.Int32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  use prelude.prelude.Int
  
  function index_logic'0 (self : Seq'0.t_seq int32) (x : int) : int32
  
  function num_of_pos'0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq'0.t_seq int32) : int
  
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq'0.t_seq int32 . num_of_pos'0 i j t
  = ([%#span4] if i >= j then
    0
  else
    if Int32.to_int (index_logic'0 t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  
  constant i  : int
  
  constant j  : int
  
  constant k  : int
  
  constant t  : Seq'0.t_seq int32
  
  function lemma_num_of_pos_increasing [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq'0.t_seq int32) : ()
    
  
  goal vc_lemma_num_of_pos_increasing : ([%#sfilter_positive0] j <= k)
   -> match j < k with
    | True -> (([%#sfilter_positive0] j + 1 <= k)
    /\ 0 <= ([%#sfilter_positive2] k - j) /\ ([%#sfilter_positive2] k - (j + 1)) < ([%#sfilter_positive2] k - j))
    /\ (([%#sfilter_positive1] num_of_pos'0 i (j + 1) t <= num_of_pos'0 i k t)
     -> ([%#sfilter_positive1] num_of_pos'0 i j t <= num_of_pos'0 i k t))
    | False -> [%#sfilter_positive1] num_of_pos'0 i j t <= num_of_pos'0 i k t
    end
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Impl
  let%span sfilter_positive0 = "../filter_positive.rs" 76 11 76 32
  
  let%span sfilter_positive1 = "../filter_positive.rs" 77 11 77 20
  
  let%span sfilter_positive2 = "../filter_positive.rs" 78 10 78 49
  
  let%span span3 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span5 = "../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span6 = "../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span7 = "../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span8 = "../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span9 = "../filter_positive.rs" 36 10 36 13
  
  let%span span10 = "../filter_positive.rs" 38 4 46 5
  
  use prelude.prelude.Int32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'0 (self : Seq'0.t_seq int32) =
    [%#span3] true
  
  predicate inv'0 (_x : Seq'0.t_seq int32)
  
  axiom inv'0 : forall x : Seq'0.t_seq int32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq int32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq int32 . ([%#span4] inv'0 self)  -> ([%#span5] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq int32 = [%#span6] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span8] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span7] len'0 (empty'0 : Seq'0.t_seq int32) = 0
  
  use prelude.prelude.Int32
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq int32) (x : int) : int32
  
  function num_of_pos'0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq'0.t_seq int32) : int
  
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq'0.t_seq int32 . num_of_pos'0 i j t
  = ([%#span10] if i >= j then
    0
  else
    if Int32.to_int (index_logic'0 t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  
  constant i  : int
  
  constant t  : Seq'0.t_seq int32
  
  function lemma_num_of_pos_strictly_increasing [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq'0.t_seq int32) : ()
    
  
  goal vc_lemma_num_of_pos_strictly_increasing : ([%#sfilter_positive1] Int32.to_int (index_logic'0 t i) > 0)
   -> ([%#sfilter_positive0] 0 <= i /\ i < len'0 t)
   -> ([%#sfilter_positive2] num_of_pos'0 0 i t < num_of_pos'0 0 (i + 1) t)
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module FilterPositive_M
  let%span sfilter_positive0 = "../filter_positive.rs" 83 27 83 28
  
  let%span sfilter_positive1 = "../filter_positive.rs" 84 23 84 24
  
  let%span sfilter_positive2 = "../filter_positive.rs" 85 16 85 30
  
  let%span sfilter_positive3 = "../filter_positive.rs" 86 16 86 28
  
  let%span sfilter_positive4 = "../filter_positive.rs" 87 16 87 45
  
  let%span sfilter_positive5 = "../filter_positive.rs" 90 18 90 19
  
  let%span sfilter_positive6 = "../filter_positive.rs" 91 21 91 22
  
  let%span sfilter_positive7 = "../filter_positive.rs" 93 13 93 14
  
  let%span sfilter_positive8 = "../filter_positive.rs" 95 31 95 32
  
  let%span sfilter_positive9 = "../filter_positive.rs" 96 12 96 13
  
  let%span sfilter_positive10 = "../filter_positive.rs" 98 8 98 9
  
  let%span sfilter_positive11 = "../filter_positive.rs" 99 16 99 45
  
  let%span sfilter_positive12 = "../filter_positive.rs" 100 16 100 53
  
  let%span sfilter_positive13 = "../filter_positive.rs" 103 18 103 19
  
  let%span sfilter_positive14 = "../filter_positive.rs" 106 16 106 59
  
  let%span sfilter_positive15 = "../filter_positive.rs" 110 16 110 63
  
  let%span sfilter_positive16 = "../filter_positive.rs" 114 21 114 22
  
  let%span sfilter_positive17 = "../filter_positive.rs" 116 13 116 14
  
  let%span span18 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span21 = "../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span22 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span24 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span25 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span26 = "../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span27 = "../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span28 = "../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span29 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span31 = "../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span32 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span33 = "../../../../creusot-contracts/src/std/slice.rs" 114 8 114 96
  
  let%span span34 = "../../../../creusot-contracts/src/std/slice.rs" 107 20 107 37
  
  let%span span35 = "../../../../creusot-contracts/src/std/slice.rs" 100 20 100 37
  
  let%span span36 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span37 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span38 = "" 0 0 0 0
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span41 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span42 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span43 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span44 = "" 0 0 0 0
  
  let%span span45 = "../filter_positive.rs" 36 10 36 13
  
  let%span span46 = "../filter_positive.rs" 38 4 46 5
  
  let%span span47 = "../filter_positive.rs" 62 11 62 17
  
  let%span span48 = "../filter_positive.rs" 63 10 63 48
  
  let%span span49 = "../filter_positive.rs" 64 10 64 13
  
  let%span span50 = "../filter_positive.rs" 67 8 69 9
  
  let%span span51 = "../filter_positive.rs" 76 11 76 32
  
  let%span span52 = "../filter_positive.rs" 77 11 77 20
  
  let%span span53 = "../filter_positive.rs" 78 10 78 49
  
  let%span span54 = "../filter_positive.rs" 75 0 75 8
  
  let%span span55 = "" 0 0 0 0
  
  let%span span56 = "../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span57 = "../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span58 = "" 0 0 0 0
  
  let%span span59 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span60 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "" 0 0 0 0
  
  let%span span63 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "" 0 0 0 0
  
  let%span span66 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed int32) =
    [%#span18] true
  
  predicate inv'7 (_x : borrowed int32)
  
  axiom inv'7 : forall x : borrowed int32 . inv'7 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'6 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) =
    [%#span18] true
  
  predicate inv'6 (_x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)))
  
  axiom inv'6 : forall x : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) . inv'6 x = true
  
  predicate invariant'5 (self : int32) =
    [%#span18] true
  
  predicate inv'5 (_x : int32)
  
  axiom inv'5 : forall x : int32 . inv'5 x = true
  
  predicate invariant'4 (self : int32) =
    [%#span18] true
  
  predicate inv'4 (_x : int32)
  
  axiom inv'4 : forall x : int32 . inv'4 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'3 (self : usize) =
    [%#span18] true
  
  predicate inv'3 (_x : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  predicate invariant'2 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span18] true
  
  predicate inv'2 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  axiom inv'2 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'2 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'1 (self : Seq'0.t_seq int32) =
    [%#span18] true
  
  predicate inv'1 (_x : Seq'0.t_seq int32)
  
  axiom inv'1 : forall x : Seq'0.t_seq int32 . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span19] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'0 (self : Seq'0.t_seq int32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq int32 . ([%#span20] inv'1 self)  -> ([%#span21] len'0 self >= 0)
  
  predicate inv'0 (_x : Vec'0.t_vec int32 (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq'0.t_seq int32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec int32 (Global'0.t_global) . ([%#span22] inv'0 self)
   -> ([%#span24] inv'1 (shallow_model'0 self))
  && ([%#span23] len'0 (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span25] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec int32 (Global'0.t_global) . inv'0 x = true
  
  constant empty'0 : Seq'0.t_seq int32 = [%#span26] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span28] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span27] len'0 (empty'0 : Seq'0.t_seq int32) = 0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : int32) =
    [%#span29] true
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq int32) (x : int) : int32
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec int32 (Global'0.t_global)) (ix : int) : int32 =
    [%#span30] index_logic'0 (shallow_model'0 self) ix
  
  predicate resolve'1 (self : Vec'0.t_vec int32 (Global'0.t_global)) =
    [%#span31] forall i : int . 0 <= i /\ i < len'0 (shallow_model'0 self)  -> resolve'2 (index_logic'1 self i)
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span32]  ^ self =  * self
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq'0.t_seq int32) (fin : Seq'0.t_seq int32) =
    [%#span33] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < len'0 old'
     -> index_logic'0 old' i = index_logic'0 fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq'0.t_seq int32) (out : int32) =
    [%#span34] index_logic'0 seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq'0.t_seq int32) =
    [%#span35] UIntSize.to_int self < len'0 seq
  
  function shallow_model'2 (self : borrowed (Vec'0.t_vec int32 (Global'0.t_global))) : Seq'0.t_seq int32 =
    [%#span36] shallow_model'0 ( * self)
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec int32 (Global'0.t_global))) (index:usize) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span39] inv'3 index}
    {[@expl:precondition] [%#span38] inv'6 self}
    {[@expl:precondition] [%#span37] in_bounds'0 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed int32)-> {[%#span44] inv'7 result}
      {[%#span43] len'0 (shallow_model'0 ( ^ self)) = len'0 (shallow_model'2 self)}
      {[%#span42] resolve_elswhere'0 index (shallow_model'2 self) (shallow_model'0 ( ^ self))}
      {[%#span41] has_value'0 index (shallow_model'0 ( ^ self)) ( ^ result)}
      {[%#span40] has_value'0 index (shallow_model'2 self) ( * result)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  function num_of_pos'0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq'0.t_seq int32) : int
  
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq'0.t_seq int32 . num_of_pos'0 i j t
  = ([%#span46] if i >= j then
    0
  else
    if Int32.to_int (index_logic'0 t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  
  function lemma_num_of_pos_increasing'0 [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq'0.t_seq int32) : ()
    
  
  axiom lemma_num_of_pos_increasing'0_def : forall i : int, j : int, k : int, t : Seq'0.t_seq int32 . lemma_num_of_pos_increasing'0 i j k t
  = ([%#span50] if j < k then lemma_num_of_pos_increasing'0 i (j + 1) k t else ())
  
  axiom lemma_num_of_pos_increasing'0_spec : forall i : int, j : int, k : int, t : Seq'0.t_seq int32 . ([%#span47] j
  <= k)  -> ([%#span48] num_of_pos'0 i j t <= num_of_pos'0 i k t)
  
  function lemma_num_of_pos_strictly_increasing'0 [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq'0.t_seq int32) : ()
    
   =
    [%#span54] ()
  
  axiom lemma_num_of_pos_strictly_increasing'0_spec : forall i : int, t : Seq'0.t_seq int32 . ([%#span51] 0 <= i
  /\ i < len'0 t)
   -> ([%#span52] Int32.to_int (index_logic'0 t i) > 0)  -> ([%#span53] num_of_pos'0 0 i t < num_of_pos'0 0 (i + 1) t)
  
  let rec from_elem'0 (elem:int32) (n:usize) (return'  (ret:Vec'0.t_vec int32 (Global'0.t_global)))= {[@expl:precondition] [%#span55] inv'5 elem}
    any
    [ return' (result:Vec'0.t_vec int32 (Global'0.t_global))-> {[%#span58] inv'0 result}
      {[%#span57] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'1 result i = elem}
      {[%#span56] len'0 (shallow_model'0 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  function shallow_model'1 (self : Vec'0.t_vec int32 (Global'0.t_global)) : Seq'0.t_seq int32 =
    [%#span59] shallow_model'0 self
  
  let rec index'0 (self:Vec'0.t_vec int32 (Global'0.t_global)) (index:usize) (return'  (ret:int32))= {[@expl:precondition] [%#span62] inv'3 index}
    {[@expl:precondition] [%#span61] inv'2 self}
    {[@expl:precondition] [%#span60] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:int32)-> {[%#span64] inv'4 result}
      {[%#span63] has_value'0 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  
  let rec len'1 (self:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span65] inv'2 self}
    any
    [ return' (result:usize)-> {[%#span66] UIntSize.to_int result = len'0 (shallow_model'1 self)} (! return' {result}) ]
    
  
  let rec m (t:Vec'0.t_vec int32 (Global'0.t_global)) (return'  (ret:Vec'0.t_vec int32 (Global'0.t_global)))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [%#sfilter_positive0] (0 : usize) ] s1
      | s1 =  [ &i <- [%#sfilter_positive1] (0 : usize) ] s2
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] [%#sfilter_positive4] UIntSize.to_int count
        = num_of_pos'0 0 (UIntSize.to_int i) (shallow_model'0 t)}
        {[@expl:loop invariant] [%#sfilter_positive3] UIntSize.to_int count <= UIntSize.to_int i}
        {[@expl:loop invariant] [%#sfilter_positive2] UIntSize.to_int i <= len'0 (shallow_model'0 t)}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0 [ s0 = len'1 {t} (fun (_ret':usize) ->  [ &_12 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {i} {_12}
              (fun (_ret':bool) ->  [ &_10 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_12 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_10 = false} (! bb11) | br1 -> {_10} (! bb6) ]  ]
          
        | bb6 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_17 <- _ret' ] s1) | s1 = bb7 ] 
        | bb7 = s0
          [ s0 = Int32.gt {_17} {[%#sfilter_positive5] (0 : int32)} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s1)
          | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]  ]
          
        | bb8 = s0
          [ s0 = UIntSize.add {count} {[%#sfilter_positive6] (1 : usize)} (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 = bb10 ]
          
        | bb9 = bb10
        | bb10 = s0
          [ s0 = UIntSize.add {i} {[%#sfilter_positive7] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = bb3 ]
           ]
         ]
      
    | bb11 = s0
      [ s0 = from_elem'0 {[%#sfilter_positive8] (0 : int32)} {count}
          (fun (_ret':Vec'0.t_vec int32 (Global'0.t_global)) ->  [ &u <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &count <- [%#sfilter_positive9] (0 : usize) ] s1
      | s1 =  [ &i <- [%#sfilter_positive10] (0 : usize) ] s2
      | s2 = bb13 ]
      
    | bb13 = bb14
    | bb14 = bb15
    | bb15 = bb15
      [ bb15 = {[@expl:loop invariant] [%#sfilter_positive12] len'0 (shallow_model'0 u)
        = num_of_pos'0 0 (len'0 (shallow_model'0 t)) (shallow_model'0 t)}
        {[@expl:loop invariant] [%#sfilter_positive11] UIntSize.to_int count
        = num_of_pos'0 0 (UIntSize.to_int i) (shallow_model'0 t)}
        (! s0) [ s0 = bb16 ] 
        [ bb16 = s0 [ s0 = len'1 {t} (fun (_ret':usize) ->  [ &_30 <- _ret' ] s1) | s1 = bb17 ] 
        | bb17 = s0
          [ s0 = UIntSize.lt {i} {_30}
              (fun (_ret':bool) ->  [ &_28 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_30 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_28 = false} (! bb27) | br1 -> {_28} (! bb18) ]  ]
          
        | bb18 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_35 <- _ret' ] s1) | s1 = bb19 ] 
        | bb19 = s0
          [ s0 = Int32.gt {_35} {[%#sfilter_positive13] (0 : int32)} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s1)
          | s1 = any [ br0 -> {_33 = false} (! bb25) | br1 -> {_33} (! bb20) ]  ]
          
        | bb20 = s0
          [ s0 = {[@expl:assertion] [%#sfilter_positive14] let _ = lemma_num_of_pos_strictly_increasing'0 (UIntSize.to_int i) (shallow_model'0 u) in num_of_pos'0 0 (UIntSize.to_int i) (shallow_model'0 t)
            < num_of_pos'0 0 (UIntSize.to_int i + 1) (shallow_model'0 t)}
            s1
          | s1 = bb21 ]
          
        | bb21 = s0
          [ s0 = {[@expl:assertion] [%#sfilter_positive15] let _ = lemma_num_of_pos_increasing'0 0 (UIntSize.to_int i
            + 1) (len'0 (shallow_model'0 t)) (shallow_model'0 t) in UIntSize.to_int count < len'0 (shallow_model'0 u)}
            s1
          | s1 = bb22 ]
          
        | bb22 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_43 <- _ret' ] s1) | s1 = bb23 ] 
        | bb23 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec int32 (Global'0.t_global)> {u}
              (fun (_ret':borrowed (Vec'0.t_vec int32 (Global'0.t_global))) ->  [ &_47 <- _ret' ]  [ &u <-  ^ _47 ] s1)
          | s1 = index_mut'0 {_47} {count} (fun (_ret':borrowed int32) ->  [ &_46 <- _ret' ] s2)
          | s2 = bb24 ]
          
        | bb24 = s0
          [ s0 =  [ &_46 <- { _46 with current = _43 ; } ] s1
          | s1 = -{resolve'0 _46}- s2
          | s2 = UIntSize.add {count} {[%#sfilter_positive16] (1 : usize)}
              (fun (_ret':usize) ->  [ &count <- _ret' ] s3)
          | s3 = bb26 ]
          
        | bb25 = bb26
        | bb26 = s0
          [ s0 = UIntSize.add {i} {[%#sfilter_positive17] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 = bb15 ]
           ]
         ]
      
    | bb27 = s0
      [ s0 = -{resolve'1 t}- s1
      | s1 =  [ &_0 <- u ] (any [ any_ (_any:Vec'0.t_vec int32 (Global'0.t_global))-> (!  [ &u <- _any ] s2) ] )
      | s2 = bb28 ]
      
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & t : Vec'0.t_vec int32 (Global'0.t_global) = t
    | & count : usize = any_l ()
    | & i : usize = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : usize = any_l ()
    | & _15 : bool = any_l ()
    | & _17 : int32 = any_l ()
    | & u : Vec'0.t_vec int32 (Global'0.t_global) = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : usize = any_l ()
    | & _33 : bool = any_l ()
    | & _35 : int32 = any_l ()
    | & _43 : int32 = any_l ()
    | & _46 : borrowed int32 = any_l ()
    | & _47 : borrowed (Vec'0.t_vec int32 (Global'0.t_global)) = any_l () ]
     [ return' (result:Vec'0.t_vec int32 (Global'0.t_global))-> (! return' {result}) ] 
end
