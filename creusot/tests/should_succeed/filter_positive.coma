
module FilterPositive_NumOfPos_Impl
  use prelude.Int32
  use seq.Seq
  use prelude.Int32
  use seq.Seq
  use prelude.Int
  constant i  : int
  constant j  : int
  constant t  : Seq.seq int32
  function num_of_pos [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  goal vc_num_of_pos : match i >= j with
    | True -> true
    | False -> match Int32.to_int (Seq.get t (j - 1)) > 0 with
      | True -> 0 <= ([#"../filter_positive.rs" 36 10 36 13] j - i)
      /\ ([#"../filter_positive.rs" 36 10 36 13] j - 1 - i) < ([#"../filter_positive.rs" 36 10 36 13] j - i)
      | False -> 0 <= ([#"../filter_positive.rs" 36 10 36 13] j - i)
      /\ ([#"../filter_positive.rs" 36 10 36 13] j - 1 - i) < ([#"../filter_positive.rs" 36 10 36 13] j - i)
      end
    end
end
module FilterPositive_LemmaNumOfPosIncreasing_Impl
  use prelude.Int32
  use seq.Seq
  use prelude.Int32
  use seq.Seq
  use prelude.Int
  function num_of_pos'0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos'0 i j t
  = ([#"../filter_positive.rs" 38 4 46 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  let rec num_of_pos'0 (i:int) (j:int) (t:Seq.seq int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = num_of_pos'0 i j t} (! return' {result}) ]
    
  constant i  : int
  constant j  : int
  constant k  : int
  constant t  : Seq.seq int32
  function lemma_num_of_pos_increasing [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  goal vc_lemma_num_of_pos_increasing : ([#"../filter_positive.rs" 62 11 62 17] j <= k)
   -> match j < k with
    | True -> (([#"../filter_positive.rs" 62 11 62 17] j + 1 <= k)
    /\ 0 <= ([#"../filter_positive.rs" 64 10 64 13] k - j)
    /\ ([#"../filter_positive.rs" 64 10 64 13] k - (j + 1)) < ([#"../filter_positive.rs" 64 10 64 13] k - j))
    /\ (([#"../filter_positive.rs" 63 10 63 48] num_of_pos'0 i (j + 1) t <= num_of_pos'0 i k t)
     -> ([#"../filter_positive.rs" 63 10 63 48] num_of_pos'0 i j t <= num_of_pos'0 i k t))
    | False -> [#"../filter_positive.rs" 63 10 63 48] num_of_pos'0 i j t <= num_of_pos'0 i k t
    end
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Impl
  use prelude.Int32
  use seq.Seq
  use prelude.Int32
  use seq.Seq
  use prelude.Int
  function num_of_pos'0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos'0 i j t
  = ([#"../filter_positive.rs" 38 4 46 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  let rec num_of_pos'0 (i:int) (j:int) (t:Seq.seq int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = num_of_pos'0 i j t} (! return' {result}) ]
    
  use seq.Seq
  constant i  : int
  constant t  : Seq.seq int32
  function lemma_num_of_pos_strictly_increasing [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
  goal vc_lemma_num_of_pos_strictly_increasing : ([#"../filter_positive.rs" 77 11 77 20] Int32.to_int (Seq.get t i) > 0)
   -> ([#"../filter_positive.rs" 76 11 76 32] 0 <= i /\ i < Seq.length t)
   -> ([#"../filter_positive.rs" 78 10 78 49] num_of_pos'0 0 i t < num_of_pos'0 0 (i + 1) t)
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module FilterPositive_M
  use prelude.Int32
  use prelude.Borrow
  predicate invariant'7 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed int32)
  let rec inv'7 (_x:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed int32 . inv'7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'6 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) . inv'6 x = true
  predicate invariant'5 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : int32)
  let rec inv'5 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : int32 . inv'5 x = true
  predicate invariant'4 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : int32)
  let rec inv'4 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : int32 . inv'4 x = true
  use prelude.UIntSize
  predicate invariant'3 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : usize)
  let rec inv'3 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : usize . inv'3 x = true
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use seq.Seq
  predicate invariant'1 (self : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Seq.seq int32)
  let rec inv'1 (_x:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Seq.seq int32 . inv'1 x = true
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self}
    any [ return' (result:Seq.seq int32)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'1 (shallow_model'0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'1 (shallow_model'0 self)
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  predicate resolve'1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'0 self)  -> resolve'2 (index_logic'0 self i)
  let rec resolve'1 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Slice
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq int32) (fin : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  let rec resolve_elswhere'0 (self:usize) (old':Seq.seq int32) (fin:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve_elswhere'0 self old' fin} (! return' {result}) ]
    
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) (out : int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'0 (self:usize) (seq:Seq.seq int32) (out:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq int32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'0 (self:usize) (seq:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self seq} (! return' {result}) ]
    
  function shallow_model'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  let rec index_mut'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) (index:usize) (return'  (ret:borrowed int32))= {[@expl:precondition] inv'3 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46] in_bounds'0 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed int32)-> {inv'7 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55] Seq.length (shallow_model'0 ( ^ self))
      = Seq.length (shallow_model'2 self)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62] resolve_elswhere'0 index (shallow_model'2 self) (shallow_model'0 ( ^ self))}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57] has_value'0 index (shallow_model'0 ( ^ self)) ( ^ result)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54] has_value'0 index (shallow_model'2 self) ( * result)}
      (! return' {result}) ]
    
  use prelude.Int32
  function num_of_pos'0 [#"../filter_positive.rs" 37 0 37 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom num_of_pos'0_def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos'0 i j t
  = ([#"../filter_positive.rs" 38 4 46 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos'0 i (j - 1) t + 1 else num_of_pos'0 i (j - 1) t
  )
  let rec num_of_pos'0 (i:int) (j:int) (t:Seq.seq int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = num_of_pos'0 i j t} (! return' {result}) ]
    
  function lemma_num_of_pos_increasing'0 [#"../filter_positive.rs" 65 0 65 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  axiom lemma_num_of_pos_increasing'0_def : forall i : int, j : int, k : int, t : Seq.seq int32 . lemma_num_of_pos_increasing'0 i j k t
  = ([#"../filter_positive.rs" 67 8 69 9] if j < k then lemma_num_of_pos_increasing'0 i (j + 1) k t else ())
  let rec lemma_num_of_pos_increasing'0 (i:int) (j:int) (k:int) (t:Seq.seq int32) (return'  (ret:()))= {[@expl:precondition] [#"../filter_positive.rs" 62 11 62 17] j
    <= k}
    any [ return' (result:())-> {result = lemma_num_of_pos_increasing'0 i j k t} (! return' {result}) ] 
  axiom lemma_num_of_pos_increasing'0_spec : forall i : int, j : int, k : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 62 11 62 17] j
  <= k)  -> ([#"../filter_positive.rs" 63 10 63 48] num_of_pos'0 i j t <= num_of_pos'0 i k t)
  function lemma_num_of_pos_strictly_increasing'0 [#"../filter_positive.rs" 79 0 79 60] (i : int) (t : Seq.seq int32) : ()
    
   =
    [#"../filter_positive.rs" 75 0 75 8] ()
  let rec lemma_num_of_pos_strictly_increasing'0 (i:int) (t:Seq.seq int32) (return'  (ret:()))= {[@expl:precondition] [#"../filter_positive.rs" 77 11 77 20] Int32.to_int (Seq.get t i)
    > 0}
    {[@expl:precondition] [#"../filter_positive.rs" 76 11 76 32] 0 <= i /\ i < Seq.length t}
    any [ return' (result:())-> {result = lemma_num_of_pos_strictly_increasing'0 i t} (! return' {result}) ] 
  axiom lemma_num_of_pos_strictly_increasing'0_spec : forall i : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 76 11 76 32] 0
  <= i
  /\ i < Seq.length t)
   -> ([#"../filter_positive.rs" 77 11 77 20] Int32.to_int (Seq.get t i) > 0)
   -> ([#"../filter_positive.rs" 78 10 78 49] num_of_pos'0 0 i t < num_of_pos'0 0 (i + 1) t)
  let rec from_elem'0 (elem:int32) (n:usize) (return'  (ret:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'5 elem}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))-> {inv'0 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n
       -> index_logic'0 result i = elem}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41] Seq.length (shallow_model'0 result)
      = UIntSize.to_int n}
      (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq int32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec index'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:int32))= {[@expl:precondition] inv'3 index}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:int32)-> {inv'4 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'0 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  let rec len'0 (self:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:usize)-> {[#"../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48] UIntSize.to_int result
      = Seq.length (shallow_model'1 self)}
      (! return' {result}) ]
    
  let rec m (t:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [#"../filter_positive.rs" 83 27 83 28] (0 : usize) ] s1
      | s1 =  [ &i <- [#"../filter_positive.rs" 84 23 84 24] (0 : usize) ] s2
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] [#"../filter_positive.rs" 87 16 87 45] UIntSize.to_int count
        = num_of_pos'0 0 (UIntSize.to_int i) (shallow_model'0 t)}
        {[@expl:loop invariant] [#"../filter_positive.rs" 86 16 86 28] UIntSize.to_int count <= UIntSize.to_int i}
        {[@expl:loop invariant] [#"../filter_positive.rs" 85 16 85 30] UIntSize.to_int i
        <= Seq.length (shallow_model'0 t)}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0 [ s0 = len'0 {t} (fun (_ret':usize) ->  [ &_12 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {i} {_12}
              (fun (_ret':bool) ->  [ &_10 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_12 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_10 = false} (! bb11) | br1 -> {_10} (! bb6) ]  ]
          
        | bb6 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_17 <- _ret' ] s1) | s1 = bb7 ] 
        | bb7 = s0
          [ s0 = Int32.gt {_17} {[#"../filter_positive.rs" 90 18 90 19] (0 : int32)}
              (fun (_ret':bool) ->  [ &_15 <- _ret' ] s1)
          | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ]  ]
          
        | bb8 = s0
          [ s0 = UIntSize.add {count} {[#"../filter_positive.rs" 91 21 91 22] (1 : usize)}
              (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 =  [ &_14 <- [#"../filter_positive.rs" 91 12 91 22] () ] s2
          | s2 = bb10 ]
          
        | bb9 = s0 [ s0 =  [ &_14 <- [#"../filter_positive.rs" 92 9 92 9] () ] s1 | s1 = bb10 ] 
        | bb10 = s0
          [ s0 = UIntSize.add {i} {[#"../filter_positive.rs" 93 13 93 14] (1 : usize)}
              (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 =  [ &_9 <- [#"../filter_positive.rs" 89 22 94 5] () ] s2
          | s2 = bb3 ]
           ]
         ]
      
    | bb11 = s0
      [ s0 = from_elem'0 {[#"../filter_positive.rs" 95 31 95 32] (0 : int32)} {count}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) ->  [ &u <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &count <- [#"../filter_positive.rs" 96 12 96 13] (0 : usize) ] s1
      | s1 =  [ &i <- [#"../filter_positive.rs" 98 8 98 9] (0 : usize) ] s2
      | s2 = bb13 ]
      
    | bb13 = s0 [ s0 = bb14 ] 
    | bb14 = s0 [ s0 = bb15 ] 
    | bb15 = bb15
      [ bb15 = {[@expl:loop invariant] [#"../filter_positive.rs" 100 16 100 53] Seq.length (shallow_model'0 u)
        = num_of_pos'0 0 (Seq.length (shallow_model'0 t)) (shallow_model'0 t)}
        {[@expl:loop invariant] [#"../filter_positive.rs" 99 16 99 45] UIntSize.to_int count
        = num_of_pos'0 0 (UIntSize.to_int i) (shallow_model'0 t)}
        (! s0) [ s0 = bb16 ] 
        [ bb16 = s0 [ s0 = len'0 {t} (fun (_ret':usize) ->  [ &_30 <- _ret' ] s1) | s1 = bb17 ] 
        | bb17 = s0
          [ s0 = UIntSize.lt {i} {_30}
              (fun (_ret':bool) ->  [ &_28 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_30 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_28 = false} (! bb27) | br1 -> {_28} (! bb18) ]  ]
          
        | bb18 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_35 <- _ret' ] s1) | s1 = bb19 ] 
        | bb19 = s0
          [ s0 = Int32.gt {_35} {[#"../filter_positive.rs" 103 18 103 19] (0 : int32)}
              (fun (_ret':bool) ->  [ &_33 <- _ret' ] s1)
          | s1 = any [ br0 -> {_33 = false} (! bb25) | br1 -> {_33} (! bb20) ]  ]
          
        | bb20 = s0
          [ s0 = {[@expl:assertion] [#"../filter_positive.rs" 106 16 106 59] let _ = lemma_num_of_pos_strictly_increasing'0 (UIntSize.to_int i) (shallow_model'0 u) in num_of_pos'0 0 (UIntSize.to_int i) (shallow_model'0 t)
            < num_of_pos'0 0 (UIntSize.to_int i + 1) (shallow_model'0 t)}
            s1
          | s1 = bb21 ]
          
        | bb21 = s0
          [ s0 = {[@expl:assertion] [#"../filter_positive.rs" 110 16 110 63] let _ = lemma_num_of_pos_increasing'0 0 (UIntSize.to_int i
            + 1) (Seq.length (shallow_model'0 t)) (shallow_model'0 t) in UIntSize.to_int count
            < Seq.length (shallow_model'0 u)}
            s1
          | s1 = bb22 ]
          
        | bb22 = s0 [ s0 = index'0 {t} {i} (fun (_ret':int32) ->  [ &_43 <- _ret' ] s1) | s1 = bb23 ] 
        | bb23 = s0
          [ s0 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)> {u}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_47 <- _ret' ] 
                 [ &u <-  ^ _47 ] 
                s1)
          | s1 = index_mut'0 {_47} {count} (fun (_ret':borrowed int32) ->  [ &_46 <- _ret' ] s2)
          | s2 = bb24 ]
          
        | bb24 = s0
          [ s0 =  [ &_46 <- { _46 with current = _43 ; } ] s1
          | s1 = -{resolve'0 _46}- s2
          | s2 = UIntSize.add {count} {[#"../filter_positive.rs" 114 21 114 22] (1 : usize)}
              (fun (_ret':usize) ->  [ &count <- _ret' ] s3)
          | s3 =  [ &_32 <- [#"../filter_positive.rs" 103 20 115 9] () ] s4
          | s4 = bb26 ]
          
        | bb25 = s0 [ s0 =  [ &_32 <- [#"../filter_positive.rs" 115 9 115 9] () ] s1 | s1 = bb26 ] 
        | bb26 = s0
          [ s0 = UIntSize.add {i} {[#"../filter_positive.rs" 116 13 116 14] (1 : usize)}
              (fun (_ret':usize) ->  [ &i <- _ret' ] s1)
          | s1 =  [ &_9 <- [#"../filter_positive.rs" 102 22 117 5] () ] s2
          | s2 = bb15 ]
           ]
         ]
      
    | bb27 = s0
      [ s0 = -{resolve'1 t}- s1
      | s1 =  [ &_0 <- u ] 
        (any
        [ any_ (_any:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))-> (!  [ &u <- _any ] s2) ]
        )
      | s2 = bb28 ]
      
    | bb28 = s0 [ s0 = bb29 ] 
    | bb29 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    | & t : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = t
    | & count : usize = any_l () : usize
    | & i : usize = any_l () : usize
    | & _9 : () = any_l () : ()
    | & _10 : bool = any_l () : bool
    | & _12 : usize = any_l () : usize
    | & _14 : () = any_l () : ()
    | & _15 : bool = any_l () : bool
    | & _17 : int32 = any_l () : int32
    | & u : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
    | & _28 : bool = any_l () : bool
    | & _30 : usize = any_l () : usize
    | & _32 : () = any_l () : ()
    | & _33 : bool = any_l () : bool
    | & _35 : int32 = any_l () : int32
    | & _43 : int32 = any_l () : int32
    | & _46 : borrowed int32 = any_l () : borrowed int32
    | & _47 : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)) ]
     [ return' (result:Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global))-> (! return' {result}) ] 
end
