
module SplitMove_MyInt_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
  let function myint_0 (self : t_myint) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyInt a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t1
  let rec ghost predicate resolve (self : (t1, t2)) = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module SplitMove_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module SplitMove_F
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use SplitMove_MyInt_Type as SplitMove_MyInt_Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = SplitMove_MyInt_Type.t_myint
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = SplitMove_MyInt_Type.t_myint,
    type t2 = SplitMove_MyInt_Type.t_myint, val Resolve0.resolve = Resolve3.resolve,
    val Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = (SplitMove_MyInt_Type.t_myint, SplitMove_MyInt_Type.t_myint)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = SplitMove_MyInt_Type.t_myint
  let rec cfg f [@cfg:stackify] [#"../split_move.rs" 5 0 5 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : (SplitMove_MyInt_Type.t_myint, SplitMove_MyInt_Type.t_myint);
  var _2 : SplitMove_MyInt_Type.t_myint;
  var _3 : SplitMove_MyInt_Type.t_myint;
  var x_4 : borrowed (SplitMove_MyInt_Type.t_myint, SplitMove_MyInt_Type.t_myint);
  var _z_5 : borrowed (SplitMove_MyInt_Type.t_myint);
  var _6 : SplitMove_MyInt_Type.t_myint;
  var _7 : bool;
  var _8 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- SplitMove_MyInt_Type.C_MyInt (1 : usize);
    _3 <- SplitMove_MyInt_Type.C_MyInt (2 : usize);
    a_1 <- (_2, _3);
    x_4 <- borrow_mut a_1;
    a_1 <-  ^ x_4;
    _z_5 <- borrow_mut (let (_, a) =  * x_4 in a);
    x_4 <- { x_4 with current = (let (a, b) =  * x_4 in (a,  ^ _z_5)) };
    assume { Resolve0.resolve _z_5 };
    _6 <- SplitMove_MyInt_Type.C_MyInt (3 : usize);
    x_4 <- { x_4 with current = (let (a, b) =  * x_4 in (_6, b)) };
    _6 <- any SplitMove_MyInt_Type.t_myint;
    assume { Resolve1.resolve x_4 };
    _8 <- SplitMove_MyInt_Type.myint_0 (let (a, _) = a_1 in a);
    assume { Resolve2.resolve a_1 };
    _7 <- ([#"../split_move.rs" 13 12 13 24] _8 = (3 : usize));
    _0 <- ();
    return _0
  }
  
end
