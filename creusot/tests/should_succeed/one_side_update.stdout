module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type onesideupdate_myint  = 
    | OneSideUpdate_MyInt(usize)
    
end
module OneSideUpdate_Main_Interface
  val main () : ()
end
module OneSideUpdate_Main
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  let rec cfg main () : () = 
  var _0 : ();
  var a_1 : Type.onesideupdate_myint;
  var b_2 : borrowed (Type.onesideupdate_myint);
  var _3 : bool;
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.onesideupdate_myint;
  {
    goto BB0
  }
  BB0 {
    a_1 <- Type.OneSideUpdate_MyInt((10 : usize));
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    _3 <- true;
    switch (_3)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { (fun x -> true) b_2 };
    assume { (fun x -> true) _3 };
    assume { (fun x -> true) _5 };
    _5 <- (let Type.OneSideUpdate_MyInt(a) = a_1 in a);
    assume { (fun x -> true) a_1 };
    _4 <- _5 = (10 : usize);
    assume { (fun x -> true) _4 };
    _0 <- ();
    goto BB3
  }
  BB2 {
    assume { (fun x -> true) a_1 };
    assume { (fun x -> true) _3 };
    _6 <- Type.OneSideUpdate_MyInt((5 : usize));
    assume { (fun x -> true) ( * b_2) };
    b_2 <- { b_2 with current = _6 };
    assume { (fun x -> true) b_2 };
    assume { (fun x -> true) _6 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
