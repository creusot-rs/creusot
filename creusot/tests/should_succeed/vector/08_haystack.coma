
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rangeinclusive < 'idx > (input:t_rangeinclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted})
    | bad (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted <> input} {false} any ]
    
end
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module C08Haystack_Search
  let%span s08_haystack0 = "../08_haystack.rs" 23 17 23 18
  
  let%span s08_haystack1 = "../08_haystack.rs" 22 4 22 112
  
  let%span s08_haystack2 = "../08_haystack.rs" 22 4 22 112
  
  let%span s08_haystack3 = "../08_haystack.rs" 22 4 22 112
  
  let%span s08_haystack4 = "../08_haystack.rs" 22 4 22 112
  
  let%span s08_haystack5 = "../08_haystack.rs" 25 17 25 18
  
  let%span s08_haystack6 = "../08_haystack.rs" 24 8 24 68
  
  let%span s08_haystack7 = "../08_haystack.rs" 24 8 24 68
  
  let%span s08_haystack8 = "../08_haystack.rs" 24 8 24 68
  
  let%span s08_haystack9 = "../08_haystack.rs" 24 20 24 66
  
  let%span s08_haystack10 = "../08_haystack.rs" 24 8 24 68
  
  let%span s08_haystack11 = "../08_haystack.rs" 15 11 15 65
  
  let%span s08_haystack12 = "../08_haystack.rs" 16 10 16 85
  
  let%span s08_haystack13 = "../08_haystack.rs" 17 0 19 108
  
  let%span s08_haystack14 = "../08_haystack.rs" 20 0 20 139
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span22 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span28 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span38 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span41 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span42 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span43 = "../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24
  
  let%span span44 = "../../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5
  
  let%span span48 = "../../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9
  
  let%span span49 = "../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32
  
  let%span span51 = "../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23
  
  let%span span52 = "../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33
  
  let%span span53 = "../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53
  
  let%span span54 = "../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63
  
  let%span span55 = "../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83
  
  let%span span56 = "../../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  
  let%span span58 = "../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45
  
  let%span span60 = "../../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10
  
  let%span span61 = "../../../../../creusot-contracts/src/std/slice.rs" 107 20 107 37
  
  let%span span62 = "../../../../../creusot-contracts/src/std/slice.rs" 100 20 100 37
  
  let%span span63 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span64 = "../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span65 = "" 0 0 0 0
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span70 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span71 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span72 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span73 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span74 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span77 = "" 0 0 0 0
  
  let%span span78 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span79 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span80 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span81 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span82 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span83 = "" 0 0 0 0
  
  let%span span84 = "" 0 0 0 0
  
  let%span span85 = "../../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57
  
  let%span span86 = "" 0 0 0 0
  
  let%span span87 = "" 0 0 0 0
  
  let%span span88 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span89 = "../08_haystack.rs" 8 4 12 5
  
  let%span span90 = "" 0 0 0 0
  
  let%span span91 = "" 0 0 0 0
  
  let%span span92 = "../../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53
  
  let%span span93 = "../../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49
  
  let%span span94 = "../../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93
  
  let%span span95 = "" 0 0 0 0
  
  let%span span96 = "" 0 0 0 0
  
  let%span span97 = "../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use prelude.prelude.UInt8
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'5 (_x : Seq'0.t_seq uint8)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span15] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'2 (self : Seq'0.t_seq uint8) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq uint8 . ([%#span16] inv'5 self)  -> ([%#span17] len'2 self >= 0)
  
  predicate inv'10 (_x : Vec'0.t_vec uint8 (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec uint8 (Global'0.t_global)) : Seq'0.t_seq uint8
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec uint8 (Global'0.t_global) . ([%#span18] inv'10 self)
   -> ([%#span20] inv'5 (shallow_model'1 self))
  && ([%#span19] len'2 (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'10 (self : Vec'0.t_vec uint8 (Global'0.t_global)) =
    [%#span21] inv'5 (shallow_model'1 self)
  
  axiom inv'10 : forall x : Vec'0.t_vec uint8 (Global'0.t_global) . inv'10 x = true
  
  predicate invariant'9 (self : uint8) =
    [%#span22] true
  
  predicate inv'9 (_x : uint8)
  
  axiom inv'9 : forall x : uint8 . inv'9 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed (Range'0.t_range usize)) =
    [%#span22] true
  
  predicate inv'8 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'8 : forall x : borrowed (Range'0.t_range usize) . inv'8 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'7 (self : Option'0.t_option usize) =
    [%#span22] true
  
  predicate inv'7 (_x : Option'0.t_option usize)
  
  axiom inv'7 : forall x : Option'0.t_option usize . inv'7 x = true
  
  use Core_Ops_Range_RangeInclusive_Type as RangeInclusive'0
  
  predicate invariant'6 (self : borrowed (RangeInclusive'0.t_rangeinclusive usize)) =
    [%#span22] true
  
  predicate inv'6 (_x : borrowed (RangeInclusive'0.t_rangeinclusive usize))
  
  axiom inv'6 : forall x : borrowed (RangeInclusive'0.t_rangeinclusive usize) . inv'6 x = true
  
  predicate invariant'5 (self : Seq'0.t_seq uint8) =
    [%#span22] true
  
  axiom inv'5 : forall x : Seq'0.t_seq uint8 . inv'5 x = true
  
  predicate invariant'4 (self : Seq'0.t_seq usize) =
    [%#span22] true
  
  predicate inv'4 (_x : Seq'0.t_seq usize)
  
  axiom inv'4 : forall x : Seq'0.t_seq usize . inv'4 x = true
  
  predicate invariant'3 (self : usize) =
    [%#span22] true
  
  predicate inv'3 (_x : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  predicate invariant'2 (self : Vec'0.t_vec uint8 (Global'0.t_global)) =
    [%#span22] true
  
  predicate inv'2 (_x : Vec'0.t_vec uint8 (Global'0.t_global))
  
  axiom inv'2 : forall x : Vec'0.t_vec uint8 (Global'0.t_global) . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 (self : Seq'0.t_seq usize) (x : int) : usize
  
  use seq.Seq
  
  function len'1 (self : Seq'0.t_seq usize) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq usize . ([%#span16] inv'4 self)  -> ([%#span17] len'1 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq usize) (other : Seq'0.t_seq usize) : Seq'0.t_seq usize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq usize, other : Seq'0.t_seq usize . ([%#span23] inv'4 self)
   -> ([%#span24] inv'4 other)
   -> ([%#span27] inv'4 (concat'0 self other))
  && ([%#span26] forall i : int . 0 <= i /\ i < len'1 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'1 self then index_logic'0 self i else index_logic'0 other (i - len'1 self)))
  && ([%#span25] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  predicate inv'1 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : usize) : int =
    [%#span28] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'1 (self : Range'0.t_range usize) (visited : Seq'0.t_seq usize) (o : Range'0.t_range usize) =
    [%#span29] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'1 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'1 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> deep_model'0 (index_logic'0 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'1 (a : Range'0.t_range usize) (ab : Seq'0.t_seq usize) (b : Range'0.t_range usize) (bc : Seq'0.t_seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_range usize, ab : Seq'0.t_seq usize, b : Range'0.t_range usize, bc : Seq'0.t_seq usize, c : Range'0.t_range usize . ([%#span30] produces'1 a ab b)
   -> ([%#span31] produces'1 b bc c)
   -> ([%#span32] inv'1 a)
   -> ([%#span33] inv'4 ab)
   -> ([%#span34] inv'1 b)
   -> ([%#span35] inv'4 bc)  -> ([%#span36] inv'1 c)  -> ([%#span37] produces'1 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq usize = [%#span38] ()
  
  function produces_refl'1 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_range usize . ([%#span39] inv'1 self)
   -> ([%#span40] produces'1 self (empty'0 : Seq'0.t_seq usize) self)
  
  predicate invariant'1 (self : Range'0.t_range usize) =
    [%#span22] true
  
  axiom inv'1 : forall x : Range'0.t_range usize . inv'1 x = true
  
  constant empty'1 : Seq'0.t_seq uint8 = [%#span38] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span42] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span41] len'2 (empty'1 : Seq'0.t_seq uint8) = 0
  
  predicate inv'0 (_x : RangeInclusive'0.t_rangeinclusive usize)
  
  function start_log'0 (self : RangeInclusive'0.t_rangeinclusive usize) : usize
  
  function end_log'0 (self : RangeInclusive'0.t_rangeinclusive usize) : usize
  
  use int.Int
  
  function is_empty_log'0 (self : RangeInclusive'0.t_rangeinclusive usize) : bool
  
  axiom is_empty_log'0_spec : forall self : RangeInclusive'0.t_rangeinclusive usize . ([%#span43] inv'0 self)
   -> ([%#span44] not is_empty_log'0 self  -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self))
  
  function range_inclusive_len'0 (r : RangeInclusive'0.t_rangeinclusive usize) : int =
    [%#span47] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : RangeInclusive'0.t_rangeinclusive usize . ([%#span45] inv'0 r)
   -> ([%#span46] is_empty_log'0 r = (range_inclusive_len'0 r = 0))
  
  predicate produces'0 (self : RangeInclusive'0.t_rangeinclusive usize) (visited : Seq'0.t_seq usize) (o : RangeInclusive'0.t_rangeinclusive usize)
    
   =
    [%#span48] len'1 visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> deep_model'0 (index_logic'0 visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'0 (a : RangeInclusive'0.t_rangeinclusive usize) (ab : Seq'0.t_seq usize) (b : RangeInclusive'0.t_rangeinclusive usize) (bc : Seq'0.t_seq usize) (c : RangeInclusive'0.t_rangeinclusive usize) : ()
    
   =
    [%#span57] ()
  
  axiom produces_trans'0_spec : forall a : RangeInclusive'0.t_rangeinclusive usize, ab : Seq'0.t_seq usize, b : RangeInclusive'0.t_rangeinclusive usize, bc : Seq'0.t_seq usize, c : RangeInclusive'0.t_rangeinclusive usize . ([%#span49] produces'0 a ab b)
   -> ([%#span50] produces'0 b bc c)
   -> ([%#span51] inv'0 a)
   -> ([%#span52] inv'4 ab)
   -> ([%#span53] inv'0 b)
   -> ([%#span54] inv'4 bc)  -> ([%#span55] inv'0 c)  -> ([%#span56] produces'0 a (concat'0 ab bc) c)
  
  function produces_refl'0 (self : RangeInclusive'0.t_rangeinclusive usize) : () =
    [%#span60] ()
  
  axiom produces_refl'0_spec : forall self : RangeInclusive'0.t_rangeinclusive usize . ([%#span58] inv'0 self)
   -> ([%#span59] produces'0 self (empty'0 : Seq'0.t_seq usize) self)
  
  predicate invariant'0 (self : RangeInclusive'0.t_rangeinclusive usize) =
    [%#span22] true
  
  axiom inv'0 : forall x : RangeInclusive'0.t_rangeinclusive usize . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span42] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span41] len'1 (empty'0 : Seq'0.t_seq usize) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq uint8) (x : int) : uint8
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq'0.t_seq uint8) (out : uint8) =
    [%#span61] index_logic'2 seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq'0.t_seq uint8) =
    [%#span62] UIntSize.to_int self < len'2 seq
  
  function shallow_model'0 (self : Vec'0.t_vec uint8 (Global'0.t_global)) : Seq'0.t_seq uint8 =
    [%#span63] shallow_model'1 self
  
  let rec index'0 (self:Vec'0.t_vec uint8 (Global'0.t_global)) (index:usize) (return'  (ret:uint8))= {[@expl:precondition] [%#span66] inv'3 index}
    {[@expl:precondition] [%#span65] inv'2 self}
    {[@expl:precondition] [%#span64] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:uint8)-> {[%#span68] inv'9 result}
      {[%#span67] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span69]  ^ self =  * self
  
  use seq.Seq
  
  function singleton'0 (v : usize) : Seq'0.t_seq usize
  
  axiom singleton'0_spec : forall v : usize . ([%#span70] inv'3 v)
   -> ([%#span73] inv'4 (singleton'0 v))
  && ([%#span72] index_logic'0 (singleton'0 v) 0 = v) && ([%#span71] len'1 (singleton'0 v) = 1)
  
  predicate completed'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span74] resolve'1 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  let rec next'1 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span75] inv'8 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span77] inv'7 result}
      {[%#span76] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'2 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function inner'2 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function new'3 (x : Range'0.t_range usize) : Snapshot'0.t_snapshot (Range'0.t_range usize)
  
  axiom new'3_spec : forall x : Range'0.t_range usize . ([%#span78] inv'1 x)  -> ([%#span79] deref'2 (new'3 x) = x)
  
  predicate into_iter_post'1 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span80] self = res
  
  predicate into_iter_pre'1 (self : Range'0.t_range usize) =
    [%#span81] true
  
  let rec into_iter'1 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span83] inv'1 self}
    {[@expl:precondition] [%#span82] into_iter_pre'1 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span84] inv'1 result}
      {[%#span82] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (RangeInclusive'0.t_rangeinclusive usize)) =
    [%#span69]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (RangeInclusive'0.t_rangeinclusive usize)) =
    [%#span85] is_empty_log'0 ( * self) /\ is_empty_log'0 ( ^ self)
  
  let rec next'0 (self:borrowed (RangeInclusive'0.t_rangeinclusive usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span86] inv'6 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span87] inv'7 result}
      {[%#span76] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec uint8 (Global'0.t_global)) (ix : int) : uint8 =
    [%#span88] index_logic'2 (shallow_model'1 self) ix
  
  predicate match_at'0 [#"../08_haystack.rs" 7 0 7 77] (needle : Vec'0.t_vec uint8 (Global'0.t_global)) (haystack : Vec'0.t_vec uint8 (Global'0.t_global)) (pos : int) (len : int)
    
   =
    [%#span89] len <= len'2 (shallow_model'0 needle)
    /\ pos <= len'2 (shallow_model'0 haystack) - len
    /\ (forall i : int . 0 <= i /\ i < len  -> index_logic'1 needle i = index_logic'1 haystack (pos + i))
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function deref'1 (self : Snapshot'0.t_snapshot (RangeInclusive'0.t_rangeinclusive usize)) : RangeInclusive'0.t_rangeinclusive usize
    
  
  function inner'0 (self : Snapshot'0.t_snapshot (RangeInclusive'0.t_rangeinclusive usize)) : RangeInclusive'0.t_rangeinclusive usize
    
  
  function new'2 (x : Seq'0.t_seq usize) : Snapshot'0.t_snapshot (Seq'0.t_seq usize)
  
  axiom new'2_spec : forall x : Seq'0.t_seq usize . ([%#span78] inv'4 x)  -> ([%#span79] deref'0 (new'2 x) = x)
  
  function new'1 (x : RangeInclusive'0.t_rangeinclusive usize) : Snapshot'0.t_snapshot (RangeInclusive'0.t_rangeinclusive usize)
    
  
  axiom new'1_spec : forall x : RangeInclusive'0.t_rangeinclusive usize . ([%#span78] inv'0 x)
   -> ([%#span79] deref'1 (new'1 x) = x)
  
  predicate into_iter_post'0 (self : RangeInclusive'0.t_rangeinclusive usize) (res : RangeInclusive'0.t_rangeinclusive usize)
    
   =
    [%#span80] self = res
  
  predicate into_iter_pre'0 (self : RangeInclusive'0.t_rangeinclusive usize) =
    [%#span81] true
  
  let rec into_iter'0 (self:RangeInclusive'0.t_rangeinclusive usize) (return'  (ret:RangeInclusive'0.t_rangeinclusive usize))= {[@expl:precondition] [%#span83] inv'0 self}
    {[@expl:precondition] [%#span82] into_iter_pre'0 self}
    any
    [ return' (result:RangeInclusive'0.t_rangeinclusive usize)-> {[%#span84] inv'0 result}
      {[%#span82] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec new'0 (start:usize) (end':usize) (return'  (ret:RangeInclusive'0.t_rangeinclusive usize))= {[@expl:precondition] [%#span91] inv'3 end'}
    {[@expl:precondition] [%#span90] inv'3 start}
    any
    [ return' (result:RangeInclusive'0.t_rangeinclusive usize)-> {[%#span95] inv'0 result}
      {[%#span94] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#span93] end_log'0 result = end'}
      {[%#span92] start_log'0 result = start}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_vec uint8 (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span96] inv'2 self}
    any
    [ return' (result:usize)-> {[%#span97] UIntSize.to_int result = len'2 (shallow_model'0 self)} (! return' {result}) ]
    
  
  let rec search (needle:Vec'0.t_vec uint8 (Global'0.t_global)) (haystack:Vec'0.t_vec uint8 (Global'0.t_global)) (return'  (ret:usize))= {[%#s08_haystack11] len'2 (shallow_model'0 needle)
    >= 1
    /\ len'2 (shallow_model'0 needle) <= len'2 (shallow_model'0 haystack)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {haystack} (fun (_ret':usize) ->  [ &_12 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {needle} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.sub {_12} {_14}
          (fun (_ret':usize) ->
             [ &_11 <- _ret' ] 
            (any
            [ any_ (_any:usize)-> (!  [ &_12 <- _any ] (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s1) ] )) ]
            ))
      | s1 = new'0 {[%#s08_haystack0] (0 : usize)} {_11}
          (fun (_ret':RangeInclusive'0.t_rangeinclusive usize) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = into_iter'0 {_10} (fun (_ret':RangeInclusive'0.t_rangeinclusive usize) ->  [ &iter <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s08_haystack1] new'1 iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s08_haystack2] new'2 (empty'0 : Seq'0.t_seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#s08_haystack3] forall k : int . 0 <= k /\ k < len'1 (deref'0 produced)
         -> not match_at'0 needle haystack k (len'2 (shallow_model'0 needle))}
        {[@expl:loop invariant] [%#s08_haystack3] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s08_haystack3] inv'0 iter}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut <RangeInclusive'0.t_rangeinclusive usize> {iter}
              (fun (_ret':borrowed (RangeInclusive'0.t_rangeinclusive usize)) ->
                 [ &_26 <- _ret' ] 
                 [ &iter <-  ^ _26 ] 
                s1)
          | s1 = Borrow.borrow_final <RangeInclusive'0.t_rangeinclusive usize> { * _26} {Borrow.get_id _26}
              (fun (_ret':borrowed (RangeInclusive'0.t_rangeinclusive usize)) ->
                 [ &_25 <- _ret' ] 
                 [ &_26 <- { _26 with current = ( ^ _25) ; } ] 
                s2)
          | s2 = next'0 {_25} (fun (_ret':Option'0.t_option usize) ->  [ &_24 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _26}- s1
          | s1 = any
            [ br0 -> {_24 = Option'0.C_None } (! bb12) | br1 (a:usize)-> {_24 = Option'0.C_Some a} (! bb11) ]
             ]
          
        | bb11 = bb13
        | bb13 = s0
          [ s0 = Option'0.some <usize> {_24} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_29 <- [%#s08_haystack4] new'2 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _29 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq usize))-> (!  [ &_29 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {needle} (fun (_ret':usize) ->  [ &_36 <- _ret' ] s3)
          | s3 = bb15 ]
          
        | bb15 = s0
          [ s0 =  [ &_35 <- Range'0.C_Range ([%#s08_haystack5] (0 : usize)) _36 ] 
            (any [ any_ (_any:usize)-> (!  [ &_36 <- _any ] s1) ] )
          | s1 = into_iter'1 {_35} (fun (_ret':Range'0.t_range usize) ->  [ &iter1 <- _ret' ] s2)
          | s2 = bb16 ]
          
        | bb16 = s0 [ s0 =  [ &iter_old1 <- [%#s08_haystack6] new'3 iter1 ] s1 | s1 = bb17 ] 
        | bb17 = s0 [ s0 =  [ &produced1 <- [%#s08_haystack7] new'2 (empty'0 : Seq'0.t_seq usize) ] s1 | s1 = bb18 ] 
        | bb18 = bb19
        | bb19 = bb19
          [ bb19 = {[@expl:loop invariant] [%#s08_haystack9] match_at'0 needle haystack (UIntSize.to_int i) (len'1 (deref'0 produced1))}
            {[@expl:loop invariant] [%#s08_haystack8] produces'1 (inner'2 iter_old1) (inner'1 produced1) iter1}
            {[@expl:loop invariant] [%#s08_haystack8] inv'1 iter1}
            (! s0) [ s0 = bb20 ] 
            [ bb20 = s0
              [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter1}
                  (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_47 <- _ret' ]  [ &iter1 <-  ^ _47 ] s1)
              | s1 = Borrow.borrow_final <Range'0.t_range usize> { * _47} {Borrow.get_id _47}
                  (fun (_ret':borrowed (Range'0.t_range usize)) ->
                     [ &_46 <- _ret' ] 
                     [ &_47 <- { _47 with current = ( ^ _46) ; } ] 
                    s2)
              | s2 = next'1 {_46} (fun (_ret':Option'0.t_option usize) ->  [ &_45 <- _ret' ] s3)
              | s3 = bb21 ]
              
            | bb21 = s0
              [ s0 = -{resolve'1 _47}- s1
              | s1 = any
                [ br0 -> {_45 = Option'0.C_None } (! bb24) | br1 (a:usize)-> {_45 = Option'0.C_Some a} (! bb23) ]
                 ]
              
            | bb23 = bb25
            | bb25 = s0
              [ s0 = Option'0.some <usize> {_45} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_50 <- [%#s08_haystack10] new'2 (concat'0 (inner'1 produced1) (singleton'0 __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb26 ]
              
            | bb26 = s0
              [ s0 =  [ &produced1 <- _50 ] 
                (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq usize))-> (!  [ &_50 <- _any ] s1) ] )
              | s1 =  [ &j <- __creusot_proc_iter_elem1 ] s2
              | s2 = index'0 {needle} {j} (fun (_ret':uint8) ->  [ &_55 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = UIntSize.add {i} {j} (fun (_ret':usize) ->  [ &_61 <- _ret' ] s1)
              | s1 = index'0 {haystack} {_61} (fun (_ret':uint8) ->  [ &_59 <- _ret' ] s2)
              | s2 = bb28 ]
              
            | bb28 = s0
              [ s0 = UInt8.ne {_55} {_59} (fun (_ret':bool) ->  [ &_53 <- _ret' ] s1)
              | s1 = any [ br0 -> {_53 = false} (! bb30) | br1 -> {_53} (! bb29) ]  ]
              
            | bb30 = bb19 ]
             ]
          
        | bb29 = bb7 ]
         ]
      
    | bb10 = {[%#s08_haystack3] false} any
    | bb22 = {[%#s08_haystack8] false} any
    | bb24 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = bb32 ] 
    | bb12 = s0 [ s0 = len'0 {haystack} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = bb31 ] 
    | bb31 = bb32
    | bb32 = return' {_0} ]
    )
    [ & _0 : usize = any_l ()
    | & needle : Vec'0.t_vec uint8 (Global'0.t_global) = needle
    | & haystack : Vec'0.t_vec uint8 (Global'0.t_global) = haystack
    | & iter : RangeInclusive'0.t_rangeinclusive usize = any_l ()
    | & _10 : RangeInclusive'0.t_rangeinclusive usize = any_l ()
    | & _11 : usize = any_l ()
    | & _12 : usize = any_l ()
    | & _14 : usize = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (RangeInclusive'0.t_rangeinclusive usize) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & _24 : Option'0.t_option usize = any_l ()
    | & _25 : borrowed (RangeInclusive'0.t_rangeinclusive usize) = any_l ()
    | & _26 : borrowed (RangeInclusive'0.t_rangeinclusive usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _29 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & i : usize = any_l ()
    | & iter1 : Range'0.t_range usize = any_l ()
    | & _35 : Range'0.t_range usize = any_l ()
    | & _36 : usize = any_l ()
    | & iter_old1 : Snapshot'0.t_snapshot (Range'0.t_range usize) = any_l ()
    | & produced1 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & _45 : Option'0.t_option usize = any_l ()
    | & _46 : borrowed (Range'0.t_range usize) = any_l ()
    | & _47 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _50 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & j : usize = any_l ()
    | & _53 : bool = any_l ()
    | & _55 : uint8 = any_l ()
    | & _59 : uint8 = any_l ()
    | & _61 : usize = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#s08_haystack14] UIntSize.to_int result
      = len'2 (shallow_model'0 haystack)
       -> (forall i : int . 0 <= i /\ i < len'2 (shallow_model'0 haystack)
       -> not match_at'0 needle haystack i (len'2 (shallow_model'0 needle)))}
      {[@expl:postcondition] [%#s08_haystack13] UIntSize.to_int result < len'2 (shallow_model'0 haystack)
       -> match_at'0 needle haystack (UIntSize.to_int result) (len'2 (shallow_model'0 needle))
      /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int result
       -> not match_at'0 needle haystack i (len'2 (shallow_model'0 needle)))}
      {[@expl:postcondition] [%#s08_haystack12] UIntSize.to_int result = len'2 (shallow_model'0 haystack)
      \/ UIntSize.to_int result < len'2 (shallow_model'0 haystack) - len'2 (shallow_model'0 needle) + 1}
      (! return' {result}) ]
    
end
