
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
  function any_l (_ : 'b) : 'a
  let rec t_rangeinclusive < 'idx > (input:t_rangeinclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted})
    | bad (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module C08Haystack_Search
  use prelude.UInt8
  use seq.Seq
  predicate invariant'10 (self : Seq.seq uint8) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:Seq.seq uint8) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : Seq.seq uint8)
  let rec inv'10 (_x:Seq.seq uint8) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : Seq.seq uint8 . inv'10 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'9 (_x : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'9 (_x:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint8
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq uint8))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'9 self}
    any [ return' (result:Seq.seq uint8)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'10 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'9 (self : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'10 (shallow_model'1 self)
  let rec invariant'9 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  axiom inv'9 : forall x : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) . inv'9 x = true
  predicate invariant'8 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq usize)
  let rec inv'8 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq usize . inv'8 x = true
  predicate invariant'7 (self : uint8) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:uint8) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : uint8)
  let rec inv'7 (_x:uint8) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : uint8 . inv'7 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'6 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'6 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'5 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Option_Option_Type.t_option usize)
  let rec inv'5 (_x:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Option_Option_Type.t_option usize . inv'5 x = true
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant'4 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize))
  let rec inv'4 (_x:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) . inv'4 x = true
  predicate invariant'3 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : usize)
  let rec inv'3 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : usize . inv'3 x = true
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'1 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  function deep_model'0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'1 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'1 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'8 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'8 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'8 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'8 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'1 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'1 x = true
  predicate inv'0 (_x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
  let rec inv'0 (_x:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  function start_log'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : usize
  let rec start_log'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = start_log'0 self} (! return' {result}) ]
    
  function end_log'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : usize
  let rec end_log'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = end_log'0 self} (! return' {result}) ]
    
  use int.Int
  function is_empty_log'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
  let rec is_empty_log'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:bool))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv'0 self}
    any [ return' (result:bool)-> {result = is_empty_log'0 self} (! return' {result}) ] 
  axiom is_empty_log'0_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self))
  function range_inclusive_len'0 (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : int =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5] if is_empty_log'0 r then
      0
    else
      deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
    
  let rec range_inclusive_len'0 (r:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:int))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv'0 r}
    any [ return' (result:int)-> {result = range_inclusive_len'0 r} (! return' {result}) ] 
  axiom range_inclusive_len'0_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv'0 r)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0))
  predicate produces'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (visited : Seq.seq usize) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9] Seq.length visited
    = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  let rec produces'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (visited:Seq.seq usize) (o:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (ab : Seq.seq usize) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (bc : Seq.seq usize) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10] ()
  let rec produces_trans'0 (a:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (ab:Seq.seq usize) (b:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (bc:Seq.seq usize) (c:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv'8 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv'8 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize, ab : Seq.seq usize, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize, bc : Seq.seq usize, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv'8 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv'8 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : () =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10] ()
  let rec produces_refl'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45] produces'0 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Slice
  use seq.Seq
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint8) (out : uint8) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'0 (self:usize) (seq:Seq.seq uint8) (out:uint8) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint8) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'0 (self:usize) (seq:Seq.seq uint8) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self seq} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint8 =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'1 self
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq uint8))= any
    [ return' (result:Seq.seq uint8)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec index'0 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:uint8))= {[@expl:precondition] inv'3 index}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:uint8)-> {inv'7 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  predicate completed'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'1 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  let rec next'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Option_Option_Type.t_option usize))= {[@expl:precondition] inv'6 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option usize)-> {inv'5 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'1 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'1 (self:Core_Ops_Range_Range_Type.t_range usize) (res:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'1 self res} (! return' {result}) ]
    
  predicate into_iter_pre'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'1 self} (! return' {result}) ]
    
  let rec into_iter'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'1 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'1 self result}
      (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57] is_empty_log'0 ( * self)
    /\ is_empty_log'0 ( ^ self)
  let rec completed'0 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) (return'  (ret:Core_Option_Option_Type.t_option usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option usize)-> {inv'5 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint8
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:uint8))= any
    [ return' (result:uint8)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  predicate match_at'0 [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
   =
    [#"../08_haystack.rs" 8 4 12 5] len <= Seq.length (shallow_model'0 needle)
    /\ pos <= Seq.length (shallow_model'0 haystack) - len
    /\ (forall i : int . 0 <= i /\ i < len  -> index_logic'0 needle i = index_logic'0 haystack (pos + i))
  let rec match_at'0 (needle:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos:int) (len:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = match_at'0 needle haystack pos len} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (res : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (res:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (return'  (ret:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec new'0 (start:usize) (end':usize) (return'  (ret:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize))= {[@expl:precondition] inv'3 end'}
    {[@expl:precondition] inv'3 start}
    any
    [ return' (result:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93] deep_model'0 start <= deep_model'0 end'
       -> not is_empty_log'0 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49] end_log'0 result = end'}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53] start_log'0 result = start}
      (! return' {result}) ]
    
  let rec len'0 (self:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:usize)-> {[#"../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48] UIntSize.to_int result
      = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
  let rec search (needle:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[#"../08_haystack.rs" 15 11 15 65] Seq.length (shallow_model'0 needle)
    >= 1
    /\ Seq.length (shallow_model'0 needle) <= Seq.length (shallow_model'0 haystack)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {haystack} (fun (_ret':usize) ->  [ &_12 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {needle} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.sub {_12} {_14}
          (fun (_ret':usize) ->
             [ &_11 <- _ret' ] 
            (any
            [ any_ (_any:usize)-> (!  [ &_12 <- _any ] (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s1) ] )) ]
            ))
      | s1 = new'0 {[#"../08_haystack.rs" 23 17 23 18] (0 : usize)} {_11}
          (fun (_ret':Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = into_iter'0 {_10}
          (fun (_ret':Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) ->  [ &iter <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = 
        [ &iter_old <- ([#"../08_haystack.rs" 22 4 22 112] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) ]
        
        s1
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = 
        [ &produced <- ([#"../08_haystack.rs" 22 4 22 112] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
        
        s1
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [#"../08_haystack.rs" 22 4 22 112] forall k : int . 0 <= k
        /\ k < Seq.length (Snapshot.inner produced)
         -> not match_at'0 needle haystack k (Seq.length (shallow_model'0 needle))}
        {[@expl:loop invariant] [#"../08_haystack.rs" 22 4 22 112] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../08_haystack.rs" 22 4 22 112] inv'0 iter}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) ->
                 [ &_26 <- _ret' ] 
                 [ &iter <-  ^ _26 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize>
              { * _26}
              {Borrow.get_id _26}
              (fun (_ret':borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) ->
                 [ &_25 <- _ret' ] 
                 [ &_26 <- { _26 with current = ( ^ _25) ; } ] 
                s2)
          | s2 = next'0 {_25} (fun (_ret':Core_Option_Option_Type.t_option usize) ->  [ &_24 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _26}- s1
          | s1 = any
            [ br0 -> {_24 = Core_Option_Option_Type.C_None } (! bb12)
            | br1 (a:usize)-> {_24 = Core_Option_Option_Type.C_Some a} (! bb11) ]
             ]
          
        | bb11 = s0 [ s0 = bb13 ] 
        | bb13 = s0
          [ s0 = Core_Option_Option_Type.some <usize> {_24}
              (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_29 <- ([#"../08_haystack.rs" 22 4 22 112] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _29 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_29 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {needle} (fun (_ret':usize) ->  [ &_36 <- _ret' ] s3)
          | s3 = bb15 ]
          
        | bb15 = s0
          [ s0 = 
            [ &_35 <- Core_Ops_Range_Range_Type.C_Range ([#"../08_haystack.rs" 25 17 25 18] (0 : usize)) _36 : Core_Ops_Range_Range_Type.t_range usize ]
            
            (any [ any_ (_any:usize)-> (!  [ &_36 <- _any ] s1) ] )
          | s1 = into_iter'1 {_35} (fun (_ret':Core_Ops_Range_Range_Type.t_range usize) ->  [ &iter1 <- _ret' ] s2)
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 = 
            [ &iter_old1 <- ([#"../08_haystack.rs" 24 8 24 68] Snapshot.new iter1) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) ]
            
            s1
          | s1 = bb17 ]
          
        | bb17 = s0
          [ s0 = 
            [ &produced1 <- ([#"../08_haystack.rs" 24 8 24 68] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s1
          | s1 = bb18 ]
          
        | bb18 = s0 [ s0 = bb19 ] 
        | bb19 = bb19
          [ bb19 = {[@expl:loop invariant] [#"../08_haystack.rs" 24 20 24 66] match_at'0 needle haystack (UIntSize.to_int i) (Seq.length (Snapshot.inner produced1))}
            {[@expl:loop invariant] [#"../08_haystack.rs" 24 8 24 68] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [#"../08_haystack.rs" 24 8 24 68] inv'1 iter1}
            (! s0) [ s0 = bb20 ] 
            [ bb20 = s0
              [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range usize> {iter1}
                  (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                     [ &_47 <- _ret' ] 
                     [ &iter1 <-  ^ _47 ] 
                    s1)
              | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range usize> { * _47} {Borrow.get_id _47}
                  (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                     [ &_46 <- _ret' ] 
                     [ &_47 <- { _47 with current = ( ^ _46) ; } ] 
                    s2)
              | s2 = next'1 {_46} (fun (_ret':Core_Option_Option_Type.t_option usize) ->  [ &_45 <- _ret' ] s3)
              | s3 = bb21 ]
              
            | bb21 = s0
              [ s0 = -{resolve'1 _47}- s1
              | s1 = any
                [ br0 -> {_45 = Core_Option_Option_Type.C_None } (! bb24)
                | br1 (a:usize)-> {_45 = Core_Option_Option_Type.C_Some a} (! bb23) ]
                 ]
              
            | bb23 = s0 [ s0 = bb25 ] 
            | bb25 = s0
              [ s0 = Core_Option_Option_Type.some <usize> {_45}
                  (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_50 <- ([#"../08_haystack.rs" 24 8 24 68] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1))) : Snapshot.snap_ty (Seq.seq usize) ]
                
                s2
              | s2 = bb26 ]
              
            | bb26 = s0
              [ s0 =  [ &produced1 <- _50 ] 
                (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_50 <- _any ] s1) ] )
              | s1 =  [ &j <- __creusot_proc_iter_elem1 ] s2
              | s2 = index'0 {needle} {j} (fun (_ret':uint8) ->  [ &_55 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = UIntSize.add {i} {j} (fun (_ret':usize) ->  [ &_61 <- _ret' ] s1)
              | s1 = index'0 {haystack} {_61} (fun (_ret':uint8) ->  [ &_59 <- _ret' ] s2)
              | s2 = bb28 ]
              
            | bb28 = s0
              [ s0 = UInt8.ne {_55} {_59} (fun (_ret':bool) ->  [ &_53 <- _ret' ] s1)
              | s1 = any [ br0 -> {_53 = false} (! bb30) | br1 -> {_53} (! bb29) ]  ]
              
            | bb30 = s0 [ s0 = bb19 ]  ]
             ]
          
        | bb29 = s0 [ s0 = bb7 ]  ]
         ]
      
    | bb10 = s0 [ s0 = {[#"../08_haystack.rs" 22 4 22 112] false} any ] 
    | bb22 = s0 [ s0 = {[#"../08_haystack.rs" 24 8 24 68] false} any ] 
    | bb24 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = bb32 ] 
    | bb12 = s0 [ s0 = len'0 {haystack} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = bb31 ] 
    | bb31 = s0 [ s0 = bb32 ] 
    | bb32 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l () : usize
    | & needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) = needle
    | & haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) = haystack
    | & iter : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize = any_l () : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
    | & _10 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize = any_l () : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
    | & _11 : usize = any_l () : usize
    | & _12 : usize = any_l () : usize
    | & _14 : usize = any_l () : usize
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _24 : Core_Option_Option_Type.t_option usize = any_l () : Core_Option_Option_Type.t_option usize
    | & _25 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) = any_l () : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    | & _26 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) = any_l () : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    | & __creusot_proc_iter_elem : usize = any_l () : usize
    | & _29 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & i : usize = any_l () : usize
    | & iter1 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _35 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _36 : usize = any_l () : usize
    | & iter_old1 : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize)
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _45 : Core_Option_Option_Type.t_option usize = any_l () : Core_Option_Option_Type.t_option usize
    | & _46 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & _47 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & __creusot_proc_iter_elem1 : usize = any_l () : usize
    | & _50 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & j : usize = any_l () : usize
    | & _53 : bool = any_l () : bool
    | & _55 : uint8 = any_l () : uint8
    | & _59 : uint8 = any_l () : uint8
    | & _61 : usize = any_l () : usize ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [#"../08_haystack.rs" 20 0 20 139] UIntSize.to_int result
      = Seq.length (shallow_model'0 haystack)
       -> (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 haystack)
       -> not match_at'0 needle haystack i (Seq.length (shallow_model'0 needle)))}
      {[@expl:postcondition] [#"../08_haystack.rs" 17 0 19 108] UIntSize.to_int result
      < Seq.length (shallow_model'0 haystack)
       -> match_at'0 needle haystack (UIntSize.to_int result) (Seq.length (shallow_model'0 needle))
      /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int result
       -> not match_at'0 needle haystack i (Seq.length (shallow_model'0 needle)))}
      {[@expl:postcondition] [#"../08_haystack.rs" 16 10 16 85] UIntSize.to_int result
      = Seq.length (shallow_model'0 haystack)
      \/ UIntSize.to_int result < Seq.length (shallow_model'0 haystack) - Seq.length (shallow_model'0 needle) + 1}
      (! return' {result}) ]
    
end
