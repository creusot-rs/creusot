module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't = 
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't = 
    ()
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module C03KnuthShuffle_RandInRange_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  val rand_in_range [@cfg:stackify] (l : usize) (u : usize) : usize
    requires {[#"../03_knuth_shuffle.rs" 8 0 21] UInt64.to_int l <= UInt64.to_int u}
    ensures { [#"../03_knuth_shuffle.rs" 9 0 42] UInt64.to_int l <= UInt64.to_int result && UInt64.to_int result < UInt64.to_int u }
    
end
module C03KnuthShuffle_RandInRange
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  val rand_in_range [@cfg:stackify] (l : usize) (u : usize) : usize
    requires {[#"../03_knuth_shuffle.rs" 8 0 21] UInt64.to_int l <= UInt64.to_int u}
    ensures { [#"../03_knuth_shuffle.rs" 9 0 42] UInt64.to_int l <= UInt64.to_int result && UInt64.to_int result < UInt64.to_int u }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Deref_Deref_Target
  type self
  type target
end
module Core_Ops_Deref_DerefMut_DerefMut_Interface
  type self
  use prelude.Prelude
  clone Core_Ops_Deref_Deref_Target as Target0 with type self = self
  val deref_mut [@cfg:stackify] (self : borrowed self) : borrowed Target0.target
    requires {false}
    
end
module Core_Ops_Deref_DerefMut_DerefMut
  type self
  use prelude.Prelude
  clone Core_Ops_Deref_Deref_Target as Target0 with type self = self
  val deref_mut [@cfg:stackify] (self : borrowed self) : borrowed Target0.target
    requires {false}
    
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Prelude.id ( ^ result) = Model0.model ( ^ self) }
    ensures { Prelude.id ( * result) = Model0.model ( * self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Prelude.id ( ^ result) = Model0.model ( ^ self) }
    ensures { Prelude.id ( * result) = Model0.model ( * self) }
    
end
module CreusotContracts_Logic_Model_Impl2_ModelTy
  type t
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use seq.Permut
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Prelude.id ( ^ self)) (Prelude.id ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use seq.Permut
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Prelude.id ( ^ self)) (Prelude.id ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Alloc_Vec_Impl10_Target
  type t
  type a
  use prelude.Prelude
  use seq.Seq
  type target  = 
    seq t
end
module Alloc_Vec_Impl11
  type t
  type a
  use Type
  clone Alloc_Vec_Impl10_Target as Target0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = a,
  function Model0.model = Model0.model
  clone Core_Ops_Deref_DerefMut_DerefMut_Interface as DerefMut1 with type self = Type.alloc_vec_vec t a,
  val deref_mut = DerefMut0.deref_mut, type Target0.target = Target0.target
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = seq t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module C03KnuthShuffle_KnuthShuffle_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val knuth_shuffle [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) : ()
    ensures { [#"../03_knuth_shuffle.rs" 15 0 36] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
end
module C03KnuthShuffle_KnuthShuffle
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model4 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq t,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t, function Model0.model = Model3.model
  clone C03KnuthShuffle_RandInRange_Interface as RandInRange0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global)))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global)),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg knuth_shuffle [@cfg:stackify] [#"../03_knuth_shuffle.rs" 16 0 35] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) : ()
    ensures { [#"../03_knuth_shuffle.rs" 15 0 36] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var old_v_2 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global)));
  var _3 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _4 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var n_5 : usize;
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var upper_11 : usize;
  var _12 : usize;
  var _13 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _14 : usize;
  var i_15 : usize;
  var _16 : usize;
  var _17 : ();
  var _18 : borrowed (seq t);
  var _19 : borrowed (seq t);
  var _20 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _21 : usize;
  var _22 : usize;
  var _23 : usize;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_v_2 <- ([#"../03_knuth_shuffle.rs" 17 16 33] Record0.record _3);
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_2 };
    n_5 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant permutation { [#"../03_knuth_shuffle.rs" 20 4 59] PermutationOf0.permutation_of (Model1.model v_1) (Model1.model (Model2.model old_v_2)) };
    invariant proph_const { [#"../03_knuth_shuffle.rs" 21 4 44]  ^ v_1 =  ^ Model2.model old_v_2 };
    _8 <- n_5;
    _10 <-  * v_1;
    _9 <- ([#"../03_knuth_shuffle.rs" 22 14 21] Len0.len _10);
    goto BB3
  }
  BB3 {
    _7 <- ([#"../03_knuth_shuffle.rs" 22 10 21] _8 < _9);
    switch (_7)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _13 <-  * v_1;
    _12 <- ([#"../03_knuth_shuffle.rs" 25 20 27] Len0.len _13);
    goto BB5
  }
  BB5 {
    _14 <- n_5;
    upper_11 <- ([#"../03_knuth_shuffle.rs" 25 20 31] _12 - _14);
    _16 <- upper_11;
    i_15 <- ([#"../03_knuth_shuffle.rs" 26 16 39] RandInRange0.rand_in_range (0 : usize) _16);
    goto BB6
  }
  BB6 {
    _20 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _20) };
    _19 <- ([#"../03_knuth_shuffle.rs" 27 8 28] DerefMut0.deref_mut _20);
    goto BB7
  }
  BB7 {
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _21 <- i_15;
    _23 <- upper_11;
    _22 <- ([#"../03_knuth_shuffle.rs" 27 18 27] _23 - (1 : usize));
    _17 <- ([#"../03_knuth_shuffle.rs" 27 8 28] Swap0.swap _18 _21 _22);
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _19 };
    n_5 <- ([#"../03_knuth_shuffle.rs" 28 8 14] n_5 + (1 : usize));
    _6 <- ();
    goto BB2
  }
  BB9 {
    assume { Resolve3.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
