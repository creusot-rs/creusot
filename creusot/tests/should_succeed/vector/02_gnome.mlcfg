
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C02Gnome_GnomeSort
  type t
  type deep_model_ty0
  predicate invariant10 (self : deep_model_ty0)
  val invariant10 (self : deep_model_ty0) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : deep_model_ty0)
  val inv10 (_x : deep_model_ty0) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : deep_model_ty0 . inv10 x = true
  use seq.Seq
  predicate invariant9 (self : Seq.seq t)
  val invariant9 (self : Seq.seq t) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq t)
  val inv9 (_x : Seq.seq t) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq t . inv9 x = true
  predicate invariant8 (self : Seq.seq deep_model_ty0)
  val invariant8 (self : Seq.seq deep_model_ty0) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq deep_model_ty0)
  val inv8 (_x : Seq.seq deep_model_ty0) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq deep_model_ty0 . inv8 x = true
  use prelude.UIntSize
  predicate invariant7 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : usize)
  val inv7 (_x : usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : usize . inv7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv6 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y) -> ([#"../../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use prelude.Slice
  use prelude.Borrow
  predicate invariant5 (self : borrowed (slice t))
  val invariant5 (self : borrowed (slice t)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (slice t))
  val inv5 (_x : borrowed (slice t)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (slice t) . inv5 x = true
  predicate invariant4 (self : slice t)
  val invariant4 (self : slice t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : slice t)
  val inv4 (_x : slice t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : slice t . inv4 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv9 (shallow_model3 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max0)
  predicate invariant3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv9 (shallow_model3 self)
  val invariant3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  predicate invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv1 x = true
  use prelude.Ghost
  predicate invariant0 (self : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val invariant0 (self : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  val inv0 (_x : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv0 x = true
  use seq.Seq
  predicate sorted_range0 [#"../02_gnome.rs" 9 0 9 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int) =
    [#"../02_gnome.rs" 10 4 12 5] forall j : int . forall i : int . l <= i /\ i < j /\ j < u -> le_log0 (Seq.get s i) (Seq.get s j)
  val sorted_range0 [#"../02_gnome.rs" 9 0 9 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int) : bool
    ensures { result = sorted_range0 s l u }
    
  use seq.Seq
  predicate sorted0 [#"../02_gnome.rs" 16 0 16 41] (s : Seq.seq deep_model_ty0) =
    [#"../02_gnome.rs" 17 4 17 31] sorted_range0 s 0 (Seq.length s)
  val sorted0 [#"../02_gnome.rs" 16 0 16 41] (s : Seq.seq deep_model_ty0) : bool
    ensures { result = sorted0 s }
    
  function deep_model3 (self : t) : deep_model_ty0
  val deep_model3 (self : t) : deep_model_ty0
    ensures { result = deep_model3 self }
    
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    ensures { result = index_logic1 self ix }
    
  function deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
  val deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv3 self}
    ensures { result = deep_model1 self }
    
  axiom deep_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44] inv8 (deep_model1 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (shallow_model3 self) -> Seq.get (deep_model1 self) i = deep_model3 (index_logic1 self i)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (shallow_model3 self) = Seq.length (deep_model1 self))
  predicate resolve3 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (slice t)) : bool
    ensures { result = resolve3 self }
    
  use seq.Permut
  use prelude.Slice
  function shallow_model7 (self : slice t) : Seq.seq t
  val shallow_model7 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model7 self }
    
  axiom shallow_model7_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv9 (shallow_model7 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model7 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model7 self) <= UIntSize.to_int max0)
  function shallow_model6 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model7 ( * self)
  val shallow_model6 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model6 self }
    
  val swap0 (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 247 19 247 35] UIntSize.to_int a < Seq.length (shallow_model6 self)}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 248 19 248 35] UIntSize.to_int b < Seq.length (shallow_model6 self)}
    requires {inv5 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 249 8 249 52] Permut.exchange (shallow_model7 ( ^ self)) (shallow_model6 self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
  function shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model3 ( * self)
  val shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  val deref_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : borrowed (slice t)
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] shallow_model6 result = shallow_model1 self }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] shallow_model7 ( ^ result) = shallow_model3 ( ^ self) }
    ensures { inv5 result }
    
  function deep_model2 (self : t) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model3 self
  val deep_model2 (self : t) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  val le0 (self : t) (other : t) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77] result = le_log0 (deep_model2 self) (deep_model2 other) }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model3 self
  val shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model5 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (index : usize) : t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model5 self)}
    requires {inv6 self}
    requires {inv7 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model5 self) result }
    ensures { inv2 result }
    
  predicate resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve1 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv6 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model5 self) }
    
  use seq.Permut
  predicate permutation_of0 (self : Seq.seq t) (o : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37] Permut.permut self o 0 (Seq.length self)
  val permutation_of0 (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of0 self o }
    
  function shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model1 self
  val shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model4 self }
    
  use prelude.Ghost
  function shallow_model2 (self : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../../creusot-contracts/src/ghost.rs" 27 20 27 48] shallow_model4 (Ghost.inner self)
  val shallow_model2 (self : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    ensures { result = shallow_model2 self }
    
  function deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 92 8 92 28] deep_model1 ( * self)
  val deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate resolve0 (self : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  val resolve0 (self : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  let rec cfg gnome_sort [#"../02_gnome.rs" 22 0 24 29] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    requires {[#"../02_gnome.rs" 22 38 22 39] inv1 v}
    ensures { [#"../02_gnome.rs" 20 10 20 35] sorted0 (deep_model1 ( ^ v)) }
    ensures { [#"../02_gnome.rs" 21 0 21 36] permutation_of0 (shallow_model3 ( ^ v)) (shallow_model1 v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v;
  var old_v : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var i : usize;
  var _9 : ();
  var _12 : usize;
  var _14 : bool;
  var _17 : bool;
  var _19 : t;
  var _24 : t;
  var _25 : t;
  var _28 : ();
  var _29 : borrowed (slice t);
  var _30 : borrowed (slice t);
  var _31 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../02_gnome.rs" 26 16 26 25] old_v <- ([#"../02_gnome.rs" 26 16 26 25] Ghost.new v);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_v };
    assume { resolve0 old_v };
    [#"../02_gnome.rs" 27 16 27 17] i <- ([#"../02_gnome.rs" 27 16 27 17] [#"../02_gnome.rs" 27 16 27 17] (0 : usize));
    goto BB2
  }
  BB2 {
    invariant { [#"../02_gnome.rs" 28 16 28 51] sorted_range0 (deep_model0 v) 0 (UIntSize.to_int i) };
    invariant { [#"../02_gnome.rs" 28 4 28 53] permutation_of0 (shallow_model1 v) (shallow_model2 old_v) };
    goto BB3
  }
  BB3 {
    [#"../02_gnome.rs" 30 14 30 21] _12 <- ([#"../02_gnome.rs" 30 14 30 21] len0 ([#"../02_gnome.rs" 30 14 30 21]  * v));
    goto BB4
  }
  BB4 {
    switch ([#"../02_gnome.rs" 30 10 30 21] ([#"../02_gnome.rs" 30 10 30 11] i) < _12)
      | False -> goto BB17
      | True -> goto BB5
      end
  }
  BB5 {
    switch ([#"../02_gnome.rs" 31 11 31 17] ([#"../02_gnome.rs" 31 11 31 12] i) = ([#"../02_gnome.rs" 31 16 31 17] [#"../02_gnome.rs" 31 16 31 17] (0 : usize)))
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../02_gnome.rs" 31 11 31 39] _14 <- ([#"../02_gnome.rs" 31 11 31 39] [#"../02_gnome.rs" 31 11 31 39] true);
    goto BB8
  }
  BB7 {
    [#"../02_gnome.rs" 31 21 31 29] _19 <- ([#"../02_gnome.rs" 31 21 31 29] index0 ([#"../02_gnome.rs" 31 21 31 22]  * v) ([#"../02_gnome.rs" 31 23 31 28] ([#"../02_gnome.rs" 31 23 31 24] i) - ([#"../02_gnome.rs" 31 27 31 28] [#"../02_gnome.rs" 31 27 31 28] (1 : usize))));
    goto BB9
  }
  BB8 {
    switch (_14)
      | False -> goto BB13
      | True -> goto BB12
      end
  }
  BB9 {
    assert { [@expl:type invariant] inv2 _19 };
    assume { resolve2 _19 };
    [#"../02_gnome.rs" 31 34 31 38] _25 <- ([#"../02_gnome.rs" 31 34 31 38] index0 ([#"../02_gnome.rs" 31 34 31 35]  * v) ([#"../02_gnome.rs" 31 36 31 37] i));
    goto BB10
  }
  BB10 {
    [#"../02_gnome.rs" 31 33 31 38] _24 <- ([#"../02_gnome.rs" 31 33 31 38] _25);
    assert { [@expl:type invariant] inv2 _25 };
    assume { resolve2 _25 };
    assert { [@expl:type invariant] inv2 _24 };
    assume { resolve2 _24 };
    [#"../02_gnome.rs" 31 21 31 39] _17 <- ([#"../02_gnome.rs" 31 21 31 39] le0 ([#"../02_gnome.rs" 31 21 31 39] _19) ([#"../02_gnome.rs" 31 33 31 38] _24));
    goto BB11
  }
  BB11 {
    [#"../02_gnome.rs" 31 11 31 39] _14 <- ([#"../02_gnome.rs" 31 11 31 39] _17);
    [#"../02_gnome.rs" 31 11 31 39] _17 <- any bool;
    goto BB8
  }
  BB12 {
    [#"../02_gnome.rs" 32 12 32 18] i <- ([#"../02_gnome.rs" 32 12 32 18] i + ([#"../02_gnome.rs" 32 17 32 18] [#"../02_gnome.rs" 32 17 32 18] (1 : usize)));
    [#"../02_gnome.rs" 31 40 33 9] _9 <- ([#"../02_gnome.rs" 31 40 33 9] ());
    goto BB16
  }
  BB13 {
    [#"../02_gnome.rs" 34 12 34 28] _31 <- Borrow.borrow_mut ( * v);
    [#"../02_gnome.rs" 34 12 34 28] v <- { v with current =  ^ _31 };
    assume { inv3 ( ^ _31) };
    [#"../02_gnome.rs" 34 12 34 28] _30 <- ([#"../02_gnome.rs" 34 12 34 28] deref_mut0 _31);
    _31 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB14
  }
  BB14 {
    [#"../02_gnome.rs" 34 12 34 28] _29 <- Borrow.borrow_mut ( * _30);
    [#"../02_gnome.rs" 34 12 34 28] _30 <- { _30 with current =  ^ _29 };
    assume { inv4 ( ^ _29) };
    [#"../02_gnome.rs" 34 12 34 28] _28 <- ([#"../02_gnome.rs" 34 12 34 28] swap0 _29 ([#"../02_gnome.rs" 34 19 34 24] ([#"../02_gnome.rs" 34 19 34 20] i) - ([#"../02_gnome.rs" 34 23 34 24] [#"../02_gnome.rs" 34 23 34 24] (1 : usize))) ([#"../02_gnome.rs" 34 26 34 27] i));
    _29 <- any borrowed (slice t);
    goto BB15
  }
  BB15 {
    assert { [@expl:type invariant] inv5 _30 };
    assume { resolve3 _30 };
    [#"../02_gnome.rs" 35 12 35 18] i <- ([#"../02_gnome.rs" 35 12 35 18] i - ([#"../02_gnome.rs" 35 17 35 18] [#"../02_gnome.rs" 35 17 35 18] (1 : usize)));
    [#"../02_gnome.rs" 33 15 36 9] _9 <- ([#"../02_gnome.rs" 33 15 36 9] ());
    goto BB16
  }
  BB16 {
    goto BB2
  }
  BB17 {
    assert { [@expl:type invariant] inv1 v };
    assume { resolve1 v };
    [#"../02_gnome.rs" 30 4 37 5] _0 <- ([#"../02_gnome.rs" 30 4 37 5] ());
    return _0
  }
  
end
