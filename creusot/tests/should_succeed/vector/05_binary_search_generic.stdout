module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module C05BinarySearchGeneric_Ord_CmpLog_Interface
  type self   
  use Type
  function cmp_log (self : self) (_2 : self) : Type.core_cmp_ordering
end
module C05BinarySearchGeneric_Ord_CmpLog
  type self   
  use Type
  function cmp_log (self : self) (_2 : self) : Type.core_cmp_ordering
end
module C05BinarySearchGeneric_Ord_Cmp_Interface
  type self   
  use prelude.Prelude
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  val cmp (self : self) (o : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log self o }
    
end
module C05BinarySearchGeneric_Ord_Cmp
  type self   
  use prelude.Prelude
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog as CmpLog0 with type self = self
  val cmp (self : self) (o : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log self o }
    
end
module C05BinarySearchGeneric_Ord_LeLog_Interface
  type self   
  predicate le_log (self : self) (o : self)
end
module C05BinarySearchGeneric_Ord_LeLog
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C05BinarySearchGeneric_Ord_Le_Interface
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_LeLog_Interface as LeLog0 with type self = self
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module C05BinarySearchGeneric_Ord_Le
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_CmpLog as CmpLog0 with type self = self
  clone C05BinarySearchGeneric_Ord_LeLog as LeLog0 with type self = self, function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Type
  use mach.int.Int
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_cmp_ordering
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = self
  clone C05BinarySearchGeneric_Ord_Cmp_Interface as Cmp0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  let rec cfg le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
   = 
  var _0 : bool;
  var self_1 : self;
  var o_2 : self;
  var _3 : Type.core_cmp_ordering;
  var _4 : self;
  var _5 : self;
  var _6 : int8;
  {
    self_1 <- self;
    o_2 <- o;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    _5 <- o_2;
    assume { Resolve0.resolve o_2 };
    _3 <- Cmp0.cmp _4 _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _3 };
    switch (_3)
      | Type.Core_Cmp_Ordering_Greater -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- true;
    goto BB5
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _0 <- false;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C05BinarySearchGeneric_Ord_GeLog_Interface
  type self   
  predicate ge_log (self : self) (o : self)
end
module C05BinarySearchGeneric_Ord_GeLog
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) = 
    match (CmpLog0.cmp_log self o) with
      | Type.Core_Cmp_Ordering_Less -> false
      | _ -> true
      end
end
module C05BinarySearchGeneric_Ord_Ge_Interface
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_GeLog_Interface as GeLog0 with type self = self
  val ge (self : self) (o : self) : bool
    ensures { result = GeLog0.ge_log self o }
    
end
module C05BinarySearchGeneric_Ord_Ge
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_CmpLog as CmpLog0 with type self = self
  clone C05BinarySearchGeneric_Ord_GeLog as GeLog0 with type self = self, function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Type
  use mach.int.Int
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_cmp_ordering
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = self
  clone C05BinarySearchGeneric_Ord_Cmp_Interface as Cmp0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  let rec cfg ge (self : self) (o : self) : bool
    ensures { result = GeLog0.ge_log self o }
    
   = 
  var _0 : bool;
  var self_1 : self;
  var o_2 : self;
  var _3 : Type.core_cmp_ordering;
  var _4 : self;
  var _5 : self;
  var _6 : int8;
  {
    self_1 <- self;
    o_2 <- o;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    _5 <- o_2;
    assume { Resolve0.resolve o_2 };
    _3 <- Cmp0.cmp _4 _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _3 };
    switch (_3)
      | Type.Core_Cmp_Ordering_Less -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB4
  }
  BB3 {
    _0 <- true;
    goto BB5
  }
  BB4 {
    _0 <- false;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C05BinarySearchGeneric_Ord_GtLog_Interface
  type self   
  predicate gt_log (self : self) (o : self)
end
module C05BinarySearchGeneric_Ord_GtLog
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) = 
    match (CmpLog0.cmp_log self o) with
      | Type.Core_Cmp_Ordering_Greater -> true
      | _ -> false
      end
end
module C05BinarySearchGeneric_Ord_Gt_Interface
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_GtLog_Interface as GtLog0 with type self = self
  val gt (self : self) (o : self) : bool
    ensures { result = GtLog0.gt_log self o }
    
end
module C05BinarySearchGeneric_Ord_Gt
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_CmpLog as CmpLog0 with type self = self
  clone C05BinarySearchGeneric_Ord_GtLog as GtLog0 with type self = self, function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Type
  use mach.int.Int
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_cmp_ordering
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = self
  clone C05BinarySearchGeneric_Ord_Cmp_Interface as Cmp0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  let rec cfg gt (self : self) (o : self) : bool
    ensures { result = GtLog0.gt_log self o }
    
   = 
  var _0 : bool;
  var self_1 : self;
  var o_2 : self;
  var _3 : Type.core_cmp_ordering;
  var _4 : self;
  var _5 : self;
  var _6 : int8;
  {
    self_1 <- self;
    o_2 <- o;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    _5 <- o_2;
    assume { Resolve0.resolve o_2 };
    _3 <- Cmp0.cmp _4 _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _3 };
    switch (_3)
      | Type.Core_Cmp_Ordering_Greater -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- false;
    goto BB5
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _0 <- true;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C05BinarySearchGeneric_Ord_LtLog_Interface
  type self   
  predicate lt_log (self : self) (o : self)
end
module C05BinarySearchGeneric_Ord_LtLog
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) = 
    match (CmpLog0.cmp_log self o) with
      | Type.Core_Cmp_Ordering_Less -> true
      | _ -> false
      end
end
module C05BinarySearchGeneric_Ord_Lt_Interface
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_LtLog_Interface as LtLog0 with type self = self
  val lt (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module C05BinarySearchGeneric_Ord_Lt
  type self   
  use prelude.Prelude
  clone C05BinarySearchGeneric_Ord_CmpLog as CmpLog0 with type self = self
  clone C05BinarySearchGeneric_Ord_LtLog as LtLog0 with type self = self, function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Type
  use mach.int.Int
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_cmp_ordering
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = self
  clone C05BinarySearchGeneric_Ord_Cmp_Interface as Cmp0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  let rec cfg lt (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
   = 
  var _0 : bool;
  var self_1 : self;
  var o_2 : self;
  var _3 : Type.core_cmp_ordering;
  var _4 : self;
  var _5 : self;
  var _6 : int8;
  {
    self_1 <- self;
    o_2 <- o;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    _5 <- o_2;
    assume { Resolve0.resolve o_2 };
    _3 <- Cmp0.cmp _4 _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _3 };
    switch (_3)
      | Type.Core_Cmp_Ordering_Less -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB4
  }
  BB3 {
    _0 <- false;
    goto BB5
  }
  BB4 {
    _0 <- true;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C05BinarySearchGeneric_Ord_EqIsEq_Interface
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function eq_is_eq (x : self) (y : self) : ()
end
module C05BinarySearchGeneric_Ord_EqIsEq
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function eq_is_eq (x : self) (y : self) : ()
  axiom eq_is_eq_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal -> x = y
end
module C05BinarySearchGeneric_Ord_Refl_Interface
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module C05BinarySearchGeneric_Ord_Refl
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module C05BinarySearchGeneric_Ord_Trans_Interface
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module C05BinarySearchGeneric_Ord_Trans
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module C05BinarySearchGeneric_Ord_Antisym1_Interface
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module C05BinarySearchGeneric_Ord_Antisym1
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module C05BinarySearchGeneric_Ord_Antisym2_Interface
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module C05BinarySearchGeneric_Ord_Antisym2
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module C05BinarySearchGeneric_Ord_Symmetry_Interface
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function symmetry (x : self) (y : self) : ()
end
module C05BinarySearchGeneric_Ord_Symmetry
  type self   
  use Type
  clone C05BinarySearchGeneric_Ord_CmpLog_Interface as CmpLog0 with type self = self
  function symmetry (x : self) (y : self) : ()
  axiom symmetry_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Equal
end
module C05BinarySearchGeneric_SortedRange_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module C05BinarySearchGeneric_SortedRange
  type t   
  use seq.Seq
  use mach.int.Int
  clone C05BinarySearchGeneric_Ord_LeLog_Interface as LeLog0 with type self = t
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i <= j && j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
end
module C05BinarySearchGeneric_Sorted_Interface
  type t   
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module C05BinarySearchGeneric_Sorted
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone C05BinarySearchGeneric_SortedRange_Interface as SortedRange0 with type t = t
  predicate sorted (s : Seq.seq t) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module C05BinarySearchGeneric_BinarySearch_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone C05BinarySearchGeneric_Ord_LeLog_Interface as LeLog0 with type self = t
  clone C05BinarySearchGeneric_Ord_LtLog_Interface as LtLog0 with type self = t
  clone C05BinarySearchGeneric_Sorted_Interface as Sorted0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val binary_search (arr : Type.creusotcontracts_std1_vec_vec t) (elem : t) : Type.core_result_result usize usize
    requires {Sorted0.sorted (Model0.model arr)}
    requires {Seq.length (Model0.model arr) <= 18446744073709551615}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x <= i && UInt64.to_int i < Seq.length (Model0.model arr) -> LtLog0.lt_log elem (Seq.get (Model0.model arr) (UInt64.to_int i))) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> LeLog0.le_log (Seq.get (Model0.model arr) (UInt64.to_int i)) elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Seq.get (Model0.model arr) (UInt64.to_int x) = elem }
    
end
module C05BinarySearchGeneric_BinarySearch
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone C05BinarySearchGeneric_Ord_CmpLog as CmpLog0 with type self = t
  clone C05BinarySearchGeneric_Ord_LtLog as LtLog0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone C05BinarySearchGeneric_Ord_LeLog as LeLog0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone C05BinarySearchGeneric_SortedRange as SortedRange0 with type t = t, predicate LeLog0.le_log = LeLog0.le_log
  clone C05BinarySearchGeneric_Sorted as Sorted0 with type t = t,
  predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone C05BinarySearchGeneric_Ord_EqIsEq as EqIsEq0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  axiom .
  clone C05BinarySearchGeneric_Ord_Symmetry as Symmetry0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  axiom .
  clone C05BinarySearchGeneric_Ord_Antisym2 as Antisym20 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  axiom .
  clone C05BinarySearchGeneric_Ord_Antisym1 as Antisym10 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  axiom .
  clone C05BinarySearchGeneric_Ord_Trans as Trans0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  axiom .
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_cmp_ordering
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = t, function Model0.model = Model0.model
  clone C05BinarySearchGeneric_Ord_GtLog as GtLog0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone C05BinarySearchGeneric_Ord_Gt_Interface as Gt0 with type self = t, predicate GtLog0.gt_log = GtLog0.gt_log
  clone C05BinarySearchGeneric_Ord_Cmp_Interface as Cmp0 with type self = t, function CmpLog0.cmp_log = CmpLog0.cmp_log
  let rec cfg binary_search (arr : Type.creusotcontracts_std1_vec_vec t) (elem : t) : Type.core_result_result usize usize
    requires {Sorted0.sorted (Model0.model arr)}
    requires {Seq.length (Model0.model arr) <= 18446744073709551615}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x <= i && UInt64.to_int i < Seq.length (Model0.model arr) -> LtLog0.lt_log elem (Seq.get (Model0.model arr) (UInt64.to_int i))) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> LeLog0.le_log (Seq.get (Model0.model arr) (UInt64.to_int i)) elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Seq.get (Model0.model arr) (UInt64.to_int x) = elem }
    
   = 
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.creusotcontracts_std1_vec_vec t;
  var elem_2 : t;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec t;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec t;
  var base_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : ();
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var half_20 : usize;
  var _21 : usize;
  var _22 : bool;
  var mid_23 : usize;
  var _24 : usize;
  var _25 : usize;
  var x_26 : t;
  var _27 : t;
  var _28 : Type.creusotcontracts_std1_vec_vec t;
  var _29 : usize;
  var _30 : usize;
  var _31 : bool;
  var _32 : t;
  var _33 : t;
  var _34 : t;
  var _35 : usize;
  var _36 : ();
  var _37 : ();
  var _38 : ();
  var cmp_39 : t;
  var _40 : t;
  var _41 : Type.creusotcontracts_std1_vec_vec t;
  var _42 : usize;
  var _43 : Type.core_cmp_ordering;
  var _44 : t;
  var _45 : t;
  var _46 : t;
  var _47 : int8;
  var _48 : usize;
  var _49 : usize;
  var _50 : usize;
  var _51 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _6 <- arr_1;
    _5 <- Len0.len _6;
    goto BB4
  }
  BB4 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve0.resolve arr_1 };
    _0 <- Type.Core_Result_Result_Err (0 : usize);
    goto BB34
  }
  BB6 {
    _3 <- ();
    assume { Resolve2.resolve _3 };
    _9 <- arr_1;
    size_8 <- Len0.len _9;
    goto BB7
  }
  BB7 {
    base_10 <- (0 : usize);
    assert { let _ = Trans0.trans elem_2 elem_2 elem_2 (Type.Core_Cmp_Ordering_Equal) in true };
    goto BB8
  }
  BB8 {
    _11 <- ();
    assume { Resolve2.resolve _11 };
    assert { let _ = Antisym10.antisym1 elem_2 elem_2 in true };
    goto BB9
  }
  BB9 {
    _12 <- ();
    assume { Resolve2.resolve _12 };
    assert { let _ = Antisym20.antisym2 elem_2 elem_2 in true };
    goto BB10
  }
  BB10 {
    _13 <- ();
    assume { Resolve2.resolve _13 };
    assert { let _ = Symmetry0.symmetry elem_2 elem_2 in true };
    goto BB11
  }
  BB11 {
    _14 <- ();
    assume { Resolve2.resolve _14 };
    assert { let _ = EqIsEq0.eq_is_eq elem_2 elem_2 in true };
    goto BB12
  }
  BB12 {
    _15 <- ();
    assume { Resolve2.resolve _15 };
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    invariant size_valid { 0 < UInt64.to_int size_8 && UInt64.to_int size_8 + UInt64.to_int base_10 <= Seq.length (Model0.model arr_1) };
    invariant lower_b { forall i : (usize) . i < base_10 -> LeLog0.le_log (Seq.get (Model0.model arr_1) (UInt64.to_int i)) elem_2 };
    invariant lower_b { forall i : (usize) . UInt64.to_int base_10 + UInt64.to_int size_8 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model arr_1) -> LtLog0.lt_log elem_2 (Seq.get (Model0.model arr_1) (UInt64.to_int i)) };
    goto BB16
  }
  BB16 {
    assume { Resolve3.resolve _19 };
    _19 <- size_8;
    _18 <- _19 > (1 : usize);
    switch (_18)
      | False -> goto BB24
      | _ -> goto BB17
      end
  }
  BB17 {
    assume { Resolve3.resolve _21 };
    _21 <- size_8;
    _22 <- (2 : usize) = (0 : usize);
    assert { not _22 };
    goto BB18
  }
  BB18 {
    half_20 <- _21 / (2 : usize);
    assume { Resolve3.resolve _24 };
    _24 <- base_10;
    assume { Resolve3.resolve _25 };
    _25 <- half_20;
    mid_23 <- _24 + _25;
    _28 <- arr_1;
    assume { Resolve3.resolve _29 };
    _29 <- mid_23;
    _27 <- Index0.index _28 _29;
    goto BB19
  }
  BB19 {
    x_26 <- _27;
    assume { Resolve4.resolve _27 };
    _32 <- x_26;
    assume { Resolve4.resolve x_26 };
    _34 <- elem_2;
    _33 <- _34;
    assume { Resolve4.resolve _34 };
    _31 <- Gt0.gt _32 _33;
    goto BB20
  }
  BB20 {
    switch (_31)
      | False -> goto BB22
      | _ -> goto BB21
      end
  }
  BB21 {
    assume { Resolve3.resolve mid_23 };
    assume { Resolve3.resolve _30 };
    _30 <- base_10;
    assume { Resolve3.resolve base_10 };
    goto BB23
  }
  BB22 {
    assume { Resolve3.resolve base_10 };
    assume { Resolve3.resolve _30 };
    _30 <- mid_23;
    assume { Resolve3.resolve mid_23 };
    goto BB23
  }
  BB23 {
    assume { Resolve3.resolve base_10 };
    base_10 <- _30;
    assume { Resolve3.resolve _35 };
    _35 <- half_20;
    assume { Resolve3.resolve half_20 };
    size_8 <- size_8 - _35;
    _17 <- ();
    assume { Resolve2.resolve _17 };
    goto BB15
  }
  BB24 {
    assume { Resolve3.resolve size_8 };
    _16 <- ();
    assume { Resolve2.resolve _16 };
    _41 <- arr_1;
    assume { Resolve0.resolve arr_1 };
    assume { Resolve3.resolve _42 };
    _42 <- base_10;
    _40 <- Index0.index _41 _42;
    goto BB25
  }
  BB25 {
    cmp_39 <- _40;
    assume { Resolve4.resolve _40 };
    _44 <- cmp_39;
    assume { Resolve4.resolve cmp_39 };
    _46 <- elem_2;
    _45 <- _46;
    assume { Resolve4.resolve _46 };
    _43 <- Cmp0.cmp _44 _45;
    goto BB26
  }
  BB26 {
    assume { Resolve5.resolve _43 };
    switch (_43)
      | Type.Core_Cmp_Ordering_Less -> goto BB27
      | Type.Core_Cmp_Ordering_Equal -> goto BB28
      | Type.Core_Cmp_Ordering_Greater -> goto BB29
      end
  }
  BB27 {
    goto BB32
  }
  BB28 {
    goto BB31
  }
  BB29 {
    assume { Resolve3.resolve _51 };
    _51 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Err _51;
    goto BB33
  }
  BB30 {
    assume { Resolve1.resolve elem_2 };
    assume { Resolve3.resolve base_10 };
    absurd
  }
  BB31 {
    assume { Resolve3.resolve _48 };
    _48 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Ok _48;
    goto BB33
  }
  BB32 {
    assume { Resolve3.resolve _50 };
    _50 <- base_10;
    assume { Resolve3.resolve base_10 };
    _49 <- _50 + (1 : usize);
    _0 <- Type.Core_Result_Result_Err _49;
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    assume { Resolve1.resolve elem_2 };
    return _0
  }
  
end
