module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  type creusotcontracts_std1_vec_vec 't  
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self   
  use Type
  function cmp_log (self : self) (_2 : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self   
  use Type
  function cmp_log (self : self) (_2 : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self   
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = not (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self   
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self   
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = not (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self   
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface
  type self   
  predicate log_eq (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq
  type self   
  predicate log_eq (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface
  type self   
  predicate log_ne (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe
  type self   
  predicate log_ne (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
  axiom eq_ne_spec : forall a : self, b : self . not (LogEq0.log_eq a b = LogNe0.log_ne a b)
end
module CreusotContracts_Logic_Eq_EqLogic_Refl_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Refl
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . LogEq0.log_eq x x
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
  axiom symmetry_spec : forall x : self, y : self . LogEq0.log_eq x y -> LogEq0.log_eq y x
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
  axiom transitivity_spec : forall x : self, y : self, z : self . LogEq0.log_eq y z -> LogEq0.log_eq x y -> LogEq0.log_eq x z
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self   
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (LogEq0.log_eq x y -> CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal) && (CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Equal -> LogEq0.log_eq x y)
end
module C05BinarySearchGeneric_SortedRange_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module C05BinarySearchGeneric_SortedRange
  type t   
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i <= j && j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
end
module C05BinarySearchGeneric_Sorted_Interface
  type t   
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module C05BinarySearchGeneric_Sorted
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone C05BinarySearchGeneric_SortedRange_Interface as SortedRange0 with type t = t
  predicate sorted (s : Seq.seq t) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Std1_Ord_Ord_Cmp_Interface
  type self   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  val cmp (self : self) (o : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Cmp
  type self   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  val cmp (self : self) (o : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Le_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Le
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Ge_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  val ge (self : self) (o : self) : bool
    ensures { result = GeLog0.ge_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Ge
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val ge (self : self) (o : self) : bool
    ensures { result = GeLog0.ge_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Gt_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  val gt (self : self) (o : self) : bool
    ensures { result = GtLog0.gt_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Gt
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val gt (self : self) (o : self) : bool
    ensures { result = GtLog0.gt_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Lt_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  val lt (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Lt
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val lt (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module C05BinarySearchGeneric_BinarySearch_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = t
  clone C05BinarySearchGeneric_Sorted_Interface as Sorted0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val binary_search (arr : Type.creusotcontracts_std1_vec_vec t) (elem : t) : Type.core_result_result usize usize
    requires {Sorted0.sorted (Model0.model arr)}
    requires {Seq.length (Model0.model arr) <= 18446744073709551615}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x <= i && UInt64.to_int i < Seq.length (Model0.model arr) -> LtLog0.lt_log elem (Seq.get (Model0.model arr) (UInt64.to_int i))) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> LeLog0.le_log (Seq.get (Model0.model arr) (UInt64.to_int i)) elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> LogEq0.log_eq (Seq.get (Model0.model arr) (UInt64.to_int x)) elem }
    
end
module C05BinarySearchGeneric_BinarySearch
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone C05BinarySearchGeneric_SortedRange as SortedRange0 with type t = t, predicate LeLog0.le_log = LeLog0.le_log
  clone C05BinarySearchGeneric_Sorted as Sorted0 with type t = t,
  predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_cmp_ordering
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Std1_Ord_Ord_Cmp_Interface as Cmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Std1_Ord_Ord_Gt_Interface as Gt0 with type self = t, predicate GtLog0.gt_log = GtLog0.gt_log
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = t, function Model0.model = Model0.model
  let rec cfg binary_search (arr : Type.creusotcontracts_std1_vec_vec t) (elem : t) : Type.core_result_result usize usize
    requires {Sorted0.sorted (Model0.model arr)}
    requires {Seq.length (Model0.model arr) <= 18446744073709551615}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x <= i && UInt64.to_int i < Seq.length (Model0.model arr) -> LtLog0.lt_log elem (Seq.get (Model0.model arr) (UInt64.to_int i))) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> LeLog0.le_log (Seq.get (Model0.model arr) (UInt64.to_int i)) elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> LogEq0.log_eq (Seq.get (Model0.model arr) (UInt64.to_int x)) elem }
    
   = 
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.creusotcontracts_std1_vec_vec t;
  var elem_2 : t;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec t;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec t;
  var base_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var half_15 : usize;
  var _16 : usize;
  var _17 : bool;
  var mid_18 : usize;
  var _19 : usize;
  var _20 : usize;
  var x_21 : t;
  var _22 : t;
  var _23 : Type.creusotcontracts_std1_vec_vec t;
  var _24 : usize;
  var _25 : usize;
  var _26 : bool;
  var _27 : t;
  var _28 : t;
  var _29 : t;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var cmp_34 : t;
  var _35 : t;
  var _36 : Type.creusotcontracts_std1_vec_vec t;
  var _37 : usize;
  var _38 : Type.core_cmp_ordering;
  var _39 : t;
  var _40 : t;
  var _41 : t;
  var _42 : int8;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  var _46 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _6 <- arr_1;
    _5 <- Len0.len _6;
    goto BB4
  }
  BB4 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve0.resolve arr_1 };
    _0 <- Type.Core_Result_Result_Err (0 : usize);
    goto BB29
  }
  BB6 {
    _3 <- ();
    assume { Resolve2.resolve _3 };
    _9 <- arr_1;
    size_8 <- Len0.len _9;
    goto BB7
  }
  BB7 {
    base_10 <- (0 : usize);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant size_valid { 0 < UInt64.to_int size_8 && UInt64.to_int size_8 + UInt64.to_int base_10 <= Seq.length (Model0.model arr_1) };
    invariant lower_b { forall i : (usize) . i < base_10 -> LeLog0.le_log (Seq.get (Model0.model arr_1) (UInt64.to_int i)) elem_2 };
    invariant lower_b { forall i : (usize) . UInt64.to_int base_10 + UInt64.to_int size_8 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model arr_1) -> LtLog0.lt_log elem_2 (Seq.get (Model0.model arr_1) (UInt64.to_int i)) };
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve _14 };
    _14 <- size_8;
    _13 <- _14 > (1 : usize);
    switch (_13)
      | False -> goto BB19
      | _ -> goto BB12
      end
  }
  BB12 {
    assume { Resolve3.resolve _16 };
    _16 <- size_8;
    _17 <- (2 : usize) = (0 : usize);
    assert { not _17 };
    goto BB13
  }
  BB13 {
    half_15 <- _16 / (2 : usize);
    assume { Resolve3.resolve _19 };
    _19 <- base_10;
    assume { Resolve3.resolve _20 };
    _20 <- half_15;
    mid_18 <- _19 + _20;
    _23 <- arr_1;
    assume { Resolve3.resolve _24 };
    _24 <- mid_18;
    _22 <- Index0.index _23 _24;
    goto BB14
  }
  BB14 {
    x_21 <- _22;
    assume { Resolve4.resolve _22 };
    _27 <- x_21;
    assume { Resolve4.resolve x_21 };
    _29 <- elem_2;
    _28 <- _29;
    assume { Resolve4.resolve _29 };
    _26 <- Gt0.gt _27 _28;
    goto BB15
  }
  BB15 {
    switch (_26)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve3.resolve mid_18 };
    assume { Resolve3.resolve _25 };
    _25 <- base_10;
    assume { Resolve3.resolve base_10 };
    goto BB18
  }
  BB17 {
    assume { Resolve3.resolve base_10 };
    assume { Resolve3.resolve _25 };
    _25 <- mid_18;
    assume { Resolve3.resolve mid_18 };
    goto BB18
  }
  BB18 {
    assume { Resolve3.resolve base_10 };
    base_10 <- _25;
    assume { Resolve3.resolve _30 };
    _30 <- half_15;
    assume { Resolve3.resolve half_15 };
    size_8 <- size_8 - _30;
    _12 <- ();
    assume { Resolve2.resolve _12 };
    goto BB10
  }
  BB19 {
    assume { Resolve3.resolve size_8 };
    _11 <- ();
    assume { Resolve2.resolve _11 };
    _36 <- arr_1;
    assume { Resolve0.resolve arr_1 };
    assume { Resolve3.resolve _37 };
    _37 <- base_10;
    _35 <- Index0.index _36 _37;
    goto BB20
  }
  BB20 {
    cmp_34 <- _35;
    assume { Resolve4.resolve _35 };
    _39 <- cmp_34;
    assume { Resolve4.resolve cmp_34 };
    _41 <- elem_2;
    _40 <- _41;
    assume { Resolve4.resolve _41 };
    _38 <- Cmp0.cmp _39 _40;
    goto BB21
  }
  BB21 {
    assume { Resolve5.resolve _38 };
    switch (_38)
      | Type.Core_Cmp_Ordering_Less -> goto BB22
      | Type.Core_Cmp_Ordering_Equal -> goto BB23
      | Type.Core_Cmp_Ordering_Greater -> goto BB24
      end
  }
  BB22 {
    goto BB27
  }
  BB23 {
    goto BB26
  }
  BB24 {
    assume { Resolve3.resolve _46 };
    _46 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Err _46;
    goto BB28
  }
  BB25 {
    assume { Resolve1.resolve elem_2 };
    assume { Resolve3.resolve base_10 };
    absurd
  }
  BB26 {
    assume { Resolve3.resolve _43 };
    _43 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Ok _43;
    goto BB28
  }
  BB27 {
    assume { Resolve3.resolve _45 };
    _45 <- base_10;
    assume { Resolve3.resolve base_10 };
    _44 <- _45 + (1 : usize);
    _0 <- Type.Core_Result_Result_Err _44;
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    assume { Resolve1.resolve elem_2 };
    return _0
  }
  
end
