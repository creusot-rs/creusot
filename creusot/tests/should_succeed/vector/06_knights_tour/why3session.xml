<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.11.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_knights_tour.mlcfg"/>
<theory name="C06KnightsTour_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="14"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl0_Mov" proved="true">
 <goal name="mov&#39;vc" expl="VC for mov" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="401"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New_Closure3" proved="true">
 <goal name="c06KnightsTour_Impl1_New_Closure3&#39;vc" expl="VC for c06KnightsTour_Impl1_New_Closure3" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="33"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="349591"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Available" proved="true">
 <goal name="available&#39;vc" expl="VC for available" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="536"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_CountDegree" proved="true">
 <goal name="count_degree&#39;vc" expl="VC for count_degree" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="count_degree&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="16"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="22"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="32"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="122"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="141"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.7" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="3224"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.8" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.26" steps="3324"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="79"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="682"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.12.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="138"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.13.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="1"><result status="valid" time="0.24" steps="2125"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Min" proved="true">
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="min&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
  <goal name="min&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="min&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="min&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="min&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="min&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="90"/></proof>
  </goal>
  <goal name="min&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="16"/></proof>
  </goal>
  <goal name="min&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.7.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="52"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="min&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.7.1.0" expl="loop invariant preservation" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="min&#39;vc.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.8.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.8.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.8.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="min&#39;vc.8.0.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="1"><result status="valid" time="0.37" steps="12034"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="min&#39;vc.8.1" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.8.1.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.8.1.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.8.1.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="min&#39;vc.8.1.0.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="248"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="min&#39;vc.8.1.0.0.1" expl="loop invariant preservation" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="min&#39;vc.8.1.0.0.1.0" expl="loop invariant preservation" proved="true">
       <proof prover="1"><result status="valid" time="0.69" steps="20452"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_DumbNonlinearArith_Impl" proved="true">
 <goal name="dumb_nonlinear_arith&#39;vc" expl="VC for dumb_nonlinear_arith" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_KnightsTour" proved="true">
 <goal name="knights_tour&#39;vc" expl="VC for knights_tour" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="knights_tour&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="18"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="50"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="67"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="50"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="783"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="56"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="118"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="110"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="125"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="401"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="131"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="134"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.28" steps="4260"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="171"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="246"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.15" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="263"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.16" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="616"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="269"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.01" steps="297"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="384"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="2311"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="409"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.04" steps="942"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="416"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="420"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.53" steps="1264448"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.26" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="1146"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.27" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="1209"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.28" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.63" steps="16481"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.29" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.65" steps="16717"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="453"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="478"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.32" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="482"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.33" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="307"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.34" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.34.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.11" steps="1360"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.35" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.35.0" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.32" steps="6774"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl3" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
</file>
</why3session>
