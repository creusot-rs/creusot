<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.3" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.4" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_knights_tour.mlcfg"/>
<theory name="C06KnightsTour_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="0"><result status="valid" time="0.007358" steps="12"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl0_Mov" proved="true">
 <goal name="mov&#39;vc" expl="VC for mov" proved="true">
 <proof prover="0"><result status="valid" time="0.027338" steps="179"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New_Closure3" proved="true">
 <goal name="c06knightstour_impl1_new_closure3&#39;vc" expl="VC for c06knightstour_impl1_new_closure3" proved="true">
 <proof prover="0"><result status="valid" time="0.017609" steps="44"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="new&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.022329" steps="22"/></proof>
  </goal>
  <goal name="new&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.029865" steps="188"/></proof>
  </goal>
  <goal name="new&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020583" steps="65"/></proof>
  </goal>
  <goal name="new&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.017173" steps="18"/></proof>
  </goal>
  <goal name="new&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020334" steps="19"/></proof>
  </goal>
  <goal name="new&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.022748" steps="14"/></proof>
  </goal>
  <goal name="new&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.035396" steps="58"/></proof>
  </goal>
  <goal name="new&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.100977" steps="681175"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Available" proved="true">
 <goal name="available&#39;vc" expl="VC for available" proved="true">
 <proof prover="0"><result status="valid" time="0.056441" steps="699"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_CountDegree" proved="true">
 <goal name="count_degree&#39;vc" expl="VC for count_degree" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="count_degree&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.013080" steps="12"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.013479" steps="20"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.017593" steps="20"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.022473" steps="27"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.016815" steps="32"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.013460" steps="37"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.023150" steps="118"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.025839" steps="126"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.8" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.8.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="count_degree&#39;vc.8.0.0" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.8.0.0.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.8.0.0.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.8.0.0.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="0.993041" steps="17068"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="count_degree&#39;vc.8.0.1" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.8.0.1.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.8.0.1.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.8.0.1.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="1.009525" steps="17075"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.9" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.9.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="count_degree&#39;vc.9.0.0" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.9.0.0.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.9.0.0.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.9.0.0.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="1.077376" steps="17362"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="count_degree&#39;vc.9.0.1" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.9.0.1.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.9.0.1.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.9.0.1.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="1.099985" steps="17365"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.019615" steps="67"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.090568" steps="787"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.020861" steps="42"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.13.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.079623" steps="867"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.034585" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="0"><result status="valid" time="0.361302" steps="4763"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Min" proved="true">
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="min&#39;vc.0" expl="VC for min" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.012637" steps="4"/></proof>
   </goal>
   <goal name="min&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.024712" steps="8"/></proof>
   </goal>
   <goal name="min&#39;vc.0.2" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.016609" steps="12"/></proof>
   </goal>
   <goal name="min&#39;vc.0.3" expl="loop invariant init" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.020000" steps="63504"/></proof>
   </goal>
   <goal name="min&#39;vc.0.4" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.016803" steps="20"/></proof>
   </goal>
   <goal name="min&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.025971" steps="100"/></proof>
   </goal>
   <goal name="min&#39;vc.0.6" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.018028" steps="17"/></proof>
   </goal>
   <goal name="min&#39;vc.0.7" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.188149" steps="26847"/></proof>
   </goal>
   <goal name="min&#39;vc.0.8" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.0.8.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.0.8.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.0.8.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="0"><result status="valid" time="0.758494" steps="13506"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="min&#39;vc.0.8.1" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.0.8.1.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.0.8.1.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="min&#39;vc.0.8.1.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="0"><result status="valid" time="0.030465" steps="261"/></proof>
       </goal>
       <goal name="min&#39;vc.0.8.1.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="1.464433" steps="22952"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_DumbNonlinearArith_Impl" proved="true">
 <goal name="vc_dumb_nonlinear_arith" proved="true">
 <proof prover="0"><result status="valid" time="0.007049" steps="8"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_KnightsTour" proved="true">
 <goal name="knights_tour&#39;vc" expl="VC for knights_tour" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="knights_tour&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.017689" steps="10"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.019765" steps="34"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.016786" steps="41"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.018927" steps="25"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.064023" steps="754"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020255" steps="30"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.025367" steps="56"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.012759" steps="49"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.026911" steps="175"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.012789" steps="69"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.023032" steps="252"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.018751" steps="75"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.019997" steps="79"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.445868" steps="8855"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.025413" steps="299"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.017405" steps="194"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.033314" steps="414"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.021623" steps="214"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.18" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.035759" steps="556"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.19" expl="loop invariant init" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.020699" steps="221"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.039488" steps="501"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.027311" steps="301"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.124954" steps="2159"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.23" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.23.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.042207" steps="610"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.24" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.24.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.828969" steps="13227"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.027411" steps="324"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.130000" steps="21222"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.327326" steps="39630"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.047777" steps="997"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.29" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.054955" steps="1112"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.30" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.30.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="knights_tour&#39;vc.30.0.0" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.30.0.0.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.30.0.0.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.30.0.0.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="3.481430" steps="5103441"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="knights_tour&#39;vc.30.0.1" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.30.0.1.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.30.0.1.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.30.0.1.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="2"><result status="valid" time="3.296675" steps="5102933"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.31" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.31.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="knights_tour&#39;vc.31.0.0" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.31.0.0.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.31.0.0.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.31.0.0.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="2"><result status="valid" time="3.272936" steps="5103886"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="knights_tour&#39;vc.31.0.1" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.31.0.1.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.31.0.1.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.31.0.1.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="2"><result status="valid" time="3.286272" steps="5103745"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020171" steps="352"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.020942" steps="365"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.021640" steps="365"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.030545" steps="852"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.030440" steps="860"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.37" expl="loop invariant preservation" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.026221" steps="526"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.38" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.281893" steps="35788"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.39" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.659574" steps="78693"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl3" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.006577" steps="6"/></proof>
 </goal>
</theory>
</file>
</why3session>
