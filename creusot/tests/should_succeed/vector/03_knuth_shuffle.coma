
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C03KnuthShuffle_KnuthShuffle
  type t
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'10 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : Seq.seq usize)
  let rec inv'10 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : Seq.seq usize . inv'10 x = true
  predicate invariant'9 (self : Seq.seq t)
  let rec invariant'9 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq t)
  let rec inv'9 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq t . inv'9 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'8 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Core_Option_Option_Type.t_option usize)
  let rec inv'8 (_x:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Core_Option_Option_Type.t_option usize . inv'8 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'7 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'7 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec invariant'6 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'6 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'6 x = true
  predicate invariant'5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'5 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'5 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'5 x = true
  use prelude.Slice
  predicate invariant'4 (self : borrowed (slice t))
  let rec invariant'4 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (slice t))
  let rec inv'4 (_x:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (slice t) . inv'4 x = true
  predicate invariant'3 (self : slice t)
  let rec invariant'3 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : slice t)
  let rec inv'3 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : slice t . inv'3 x = true
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'9 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'9 (shallow_model'2 self)
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'1 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  function deep_model'0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'10 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'10 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'10 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'10 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'1 x = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv'0 x
  = true
  use prelude.Intrinsic
  predicate resolve'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (slice t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Permut
  use prelude.Slice
  function shallow_model'6 (self : slice t) : Seq.seq t
  let rec shallow_model'6 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'6 self} (! return' {result}) ] 
  axiom shallow_model'6_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'9 (shallow_model'6 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'6 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'6 self)
  <= UIntSize.to_int (max'0 : usize))
  function shallow_model'5 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'6 ( * self)
  let rec shallow_model'5 (self:borrowed (slice t)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'5 self} (! return' {result}) ]
    
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] inv'4 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 251 19 251 35] UIntSize.to_int b
    < Seq.length (shallow_model'5 self)}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 250 19 250 35] UIntSize.to_int a
    < Seq.length (shallow_model'5 self)}
    any
    [ return' (result:())-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 252 8 252 52] Permut.exchange (shallow_model'6 ( ^ self)) (shallow_model'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  function shallow_model'0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'2 ( * self)
  let rec shallow_model'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec deref_mut'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:borrowed (slice t))-> {inv'4 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 170 26 170 48] shallow_model'6 ( ^ result)
      = shallow_model'2 ( ^ self)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 169 26 169 42] shallow_model'5 result = shallow_model'0 self}
      (! return' {result}) ]
    
  let rec rand_in_range'0 (l:usize) (u:usize) (return'  (ret:usize))= {[@expl:precondition] [#"../03_knuth_shuffle.rs" 6 11 6 19] UIntSize.to_int l
    <= UIntSize.to_int u}
    any
    [ return' (result:usize)-> {[#"../03_knuth_shuffle.rs" 7 10 7 40] UIntSize.to_int l <= UIntSize.to_int result
      /\ UIntSize.to_int result < UIntSize.to_int u}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'1 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Option_Option_Type.t_option usize))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option usize)-> {inv'8 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use seq.Permut
  predicate permutation_of'0 (self : Seq.seq t) (o : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37] Permut.permut self o 0 (Seq.length self)
  let rec permutation_of'0 (self:Seq.seq t) (o:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = permutation_of'0 self o} (! return' {result}) ]
    
  function shallow_model'4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'4 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model'4 (Snapshot.inner self)
  let rec shallow_model'1 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range usize) (res:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  let rec len'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[@expl:precondition] inv'6 self}
    any
    [ return' (result:usize)-> {[#"../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48] UIntSize.to_int result
      = Seq.length (shallow_model'3 self)}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec resolve'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec knuth_shuffle (v:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:()))= {[#"../03_knuth_shuffle.rs" 13 24 13 25] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [#"../03_knuth_shuffle.rs" 14 16 14 31] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_v} s1
      | s1 = -{resolve'0 old_v}- s2
      | s2 = len'0 { * v} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &_6 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_knuth_shuffle.rs" 18 13 18 14] (0 : usize)) _7 : Core_Ops_Range_Range_Type.t_range usize ]
        
        (any [ any_ (_any:usize)-> (!  [ &_7 <- _any ] s1) ] )
      | s1 = into_iter'0 {_6} (fun (_ret':Core_Ops_Range_Range_Type.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &iter_old <- ([#"../03_knuth_shuffle.rs" 16 4 16 31] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) ]
        
        s1
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = 
        [ &produced <- ([#"../03_knuth_shuffle.rs" 16 4 16 31] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
        
        s1
      | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] [#"../03_knuth_shuffle.rs" 16 4 16 31] permutation_of'0 (shallow_model'0 v) (shallow_model'1 old_v)}
        {[@expl:loop invariant] [#"../03_knuth_shuffle.rs" 16 16 16 29]  ^ v =  ^ Snapshot.inner old_v}
        {[@expl:loop invariant] [#"../03_knuth_shuffle.rs" 16 4 16 31] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../03_knuth_shuffle.rs" 16 4 16 31] inv'1 iter}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range usize> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_20 <- _ret' ] 
                 [ &iter <-  ^ _20 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range usize> { * _20} {Borrow.get_id _20}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = ( ^ _19) ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Core_Option_Option_Type.t_option usize) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'1 _20}- s1
          | s1 = any
            [ br0 -> {_18 = Core_Option_Option_Type.C_None } (! bb11)
            | br1 (a:usize)-> {_18 = Core_Option_Option_Type.C_Some a} (! bb10) ]
             ]
          
        | bb10 = s0 [ s0 = bb12 ] 
        | bb12 = s0
          [ s0 = Core_Option_Option_Type.some <usize> {_18}
              (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- ([#"../03_knuth_shuffle.rs" 16 4 16 31] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _23 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_23 <- _any ] s1) ] )
          | s1 =  [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 { * v} (fun (_ret':usize) ->  [ &_27 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = UIntSize.sub {_27} {n}
              (fun (_ret':usize) ->  [ &upper <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_27 <- _any ] s1) ] ))
          | s1 = rand_in_range'0 {[#"../03_knuth_shuffle.rs" 22 30 22 31] (0 : usize)} {upper}
              (fun (_ret':usize) ->  [ &i <- _ret' ] s2)
          | s2 = bb15 ]
          
        | bb15 = s0
          [ s0 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)> { * v}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_35 <- _ret' ] 
                 [ &v <- { v with current = ( ^ _35) ; } ] 
                s1)
          | s1 = -{inv'2 ( ^ _35)}- s2
          | s2 = deref_mut'0 {_35} (fun (_ret':borrowed (slice t)) ->  [ &_34 <- _ret' ] s3)
          | s3 = bb16 ]
          
        | bb16 = s0
          [ s0 = Borrow.borrow_final <slice t> { * _34} {Borrow.get_id _34}
              (fun (_ret':borrowed (slice t)) ->  [ &_33 <- _ret' ]  [ &_34 <- { _34 with current = ( ^ _33) ; } ] s1)
          | s1 = -{inv'3 ( ^ _33)}- s2
          | s2 = UIntSize.sub {upper} {[#"../03_knuth_shuffle.rs" 23 26 23 27] (1 : usize)}
              (fun (_ret':usize) ->  [ &_37 <- _ret' ] s3)
          | s3 = swap'0 {_33} {i} {_37} (fun (_ret':()) ->  [ &_32 <- _ret' ] s4)
          | s4 = bb17 ]
          
        | bb17 = s0 [ s0 = {[@expl:type invariant] inv'4 _34} s1 | s1 = -{resolve'2 _34}- s2 | s2 = bb6 ]  ]
         ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'5 v} s1
      | s1 = -{resolve'3 v}- s2
      | s2 = {[#"../03_knuth_shuffle.rs" 16 4 16 31] false} any ]
      
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'5 v} s1
      | s1 = -{resolve'3 v}- s2
      | s2 =  [ &_0 <- [#"../03_knuth_shuffle.rs" 16 4 16 31] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) = any_l () : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
    | & iter : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _6 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _7 : usize = any_l () : usize
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize)
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _18 : Core_Option_Option_Type.t_option usize = any_l () : Core_Option_Option_Type.t_option usize
    | & _19 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & _20 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & __creusot_proc_iter_elem : usize = any_l () : usize
    | & _23 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & n : usize = any_l () : usize
    | & upper : usize = any_l () : usize
    | & _27 : usize = any_l () : usize
    | & i : usize = any_l () : usize
    | & _32 : () = any_l () : ()
    | & _33 : borrowed (slice t) = any_l () : borrowed (slice t)
    | & _34 : borrowed (slice t) = any_l () : borrowed (slice t)
    | & _35 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
    | & _37 : usize = any_l () : usize ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../03_knuth_shuffle.rs" 12 0 12 36] permutation_of'0 (shallow_model'2 ( ^ v)) (shallow_model'0 v)}
      (! return' {result}) ]
    
end
