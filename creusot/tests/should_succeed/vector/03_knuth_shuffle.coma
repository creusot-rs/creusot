
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C03KnuthShuffle_KnuthShuffle
  type t
  
  let%span s03_knuth_shuffle0 = "../03_knuth_shuffle.rs" 14 16 14 31
  
  let%span s03_knuth_shuffle1 = "../03_knuth_shuffle.rs" 18 13 18 14
  
  let%span s03_knuth_shuffle2 = "../03_knuth_shuffle.rs" 16 4 16 31
  
  let%span s03_knuth_shuffle3 = "../03_knuth_shuffle.rs" 16 4 16 31
  
  let%span s03_knuth_shuffle4 = "../03_knuth_shuffle.rs" 16 4 16 31
  
  let%span s03_knuth_shuffle5 = "../03_knuth_shuffle.rs" 16 16 16 29
  
  let%span s03_knuth_shuffle6 = "../03_knuth_shuffle.rs" 16 4 16 31
  
  let%span s03_knuth_shuffle7 = "../03_knuth_shuffle.rs" 22 30 22 31
  
  let%span s03_knuth_shuffle8 = "../03_knuth_shuffle.rs" 23 26 23 27
  
  let%span s03_knuth_shuffle9 = "../03_knuth_shuffle.rs" 13 24 13 25
  
  let%span s03_knuth_shuffle10 = "../03_knuth_shuffle.rs" 12 0 12 36
  
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span17 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span29 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span30 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span31 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span33 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span34 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span35 = "../../../../../creusot-contracts/src/std/slice.rs" 250 19 250 35
  
  let%span span36 = "../../../../../creusot-contracts/src/std/slice.rs" 251 19 251 35
  
  let%span span37 = "" 0 0 0 0
  
  let%span span38 = "../../../../../creusot-contracts/src/std/slice.rs" 252 8 252 52
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../../creusot-contracts/src/std/vec.rs" 169 26 169 42
  
  let%span span41 = "../../../../../creusot-contracts/src/std/vec.rs" 170 26 170 48
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../03_knuth_shuffle.rs" 6 11 6 19
  
  let%span span44 = "../03_knuth_shuffle.rs" 7 10 7 40
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span46 = "" 0 0 0 0
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37
  
  let%span span50 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span51 = "../../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span52 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span53 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span54 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span55 = "" 0 0 0 0
  
  let%span span56 = "" 0 0 0 0
  
  let%span span57 = "" 0 0 0 0
  
  let%span span58 = "../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span59 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq usize) =
    [%#span11] true
  
  predicate inv'10 (_x : Seq.seq usize)
  
  axiom inv'10 : forall x : Seq.seq usize . inv'10 x = true
  
  predicate invariant'9 (self : Seq.seq t) =
    [%#span11] true
  
  predicate inv'9 (_x : Seq.seq t)
  
  axiom inv'9 : forall x : Seq.seq t . inv'9 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'8 (self : Option'0.t_option usize) =
    [%#span11] true
  
  predicate inv'8 (_x : Option'0.t_option usize)
  
  axiom inv'8 : forall x : Option'0.t_option usize . inv'8 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Range'0.t_range usize)) =
    [%#span11] true
  
  predicate inv'7 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'7 : forall x : borrowed (Range'0.t_range usize) . inv'7 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'6 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span11] true
  
  predicate inv'6 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'6 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'6 x = true
  
  predicate invariant'5 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span11] true
  
  predicate inv'5 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'5 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'5 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'4 (self : borrowed (slice t)) =
    [%#span11] true
  
  predicate inv'4 (_x : borrowed (slice t))
  
  axiom inv'4 : forall x : borrowed (slice t) . inv'4 x = true
  
  predicate invariant'3 (self : slice t) =
    [%#span11] true
  
  predicate inv'3 (_x : slice t)
  
  axiom inv'3 : forall x : slice t . inv'3 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span12] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'2 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span13] inv'2 self)
   -> ([%#span15] inv'9 (shallow_model'2 self))
  && ([%#span14] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'2 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span16] inv'9 (shallow_model'2 self)
  
  axiom inv'2 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'2 x = true
  
  use seq.Seq
  
  predicate inv'1 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#span17] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq.seq usize) (o : Range'0.t_range usize) =
    [%#span18] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq.seq usize) (b : Range'0.t_range usize) (bc : Seq.seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq.seq usize, b : Range'0.t_range usize, bc : Seq.seq usize, c : Range'0.t_range usize . ([%#span19] produces'0 a ab b)
   -> ([%#span20] produces'0 b bc c)
   -> ([%#span21] inv'1 a)
   -> ([%#span22] inv'10 ab)
   -> ([%#span23] inv'1 b)
   -> ([%#span24] inv'10 bc)  -> ([%#span25] inv'1 c)  -> ([%#span26] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span27] inv'1 self)
   -> ([%#span28] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'1 (self : Range'0.t_range usize) =
    [%#span11] true
  
  axiom inv'1 : forall x : Range'0.t_range usize . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span11] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span29] self.final = self.current
  
  predicate resolve'2 (self : borrowed (slice t)) =
    [%#span29] self.final = self.current
  
  use seq.Permut
  
  use prelude.prelude.Slice
  
  function shallow_model'6 (self : slice t) : Seq.seq t
  
  axiom shallow_model'6_spec : forall self : slice t . ([%#span30] inv'3 self)
   -> ([%#span33] inv'9 (shallow_model'6 self))
  && ([%#span32] shallow_model'6 self = Slice.id self)
  && ([%#span31] Seq.length (shallow_model'6 self) <= UIntSize.to_int (max'0 : usize))
  
  function shallow_model'5 (self : borrowed (slice t)) : Seq.seq t =
    [%#span34] shallow_model'6 self.current
  
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span37] inv'4 self}
    {[@expl:precondition] [%#span36] UIntSize.to_int b < Seq.length (shallow_model'5 self)}
    {[@expl:precondition] [%#span35] UIntSize.to_int a < Seq.length (shallow_model'5 self)}
    any
    [ return' (result:())-> {[%#span38] Permut.exchange (shallow_model'6 self.final) (shallow_model'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span34] shallow_model'2 self.current
  
  let rec deref_mut'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span39] inv'5 self}
    any
    [ return' (result:borrowed (slice t))-> {[%#span42] inv'4 result}
      {[%#span41] shallow_model'6 result.final = shallow_model'2 self.final}
      {[%#span40] shallow_model'5 result = shallow_model'0 self}
      (! return' {result}) ]
    
  
  let rec rand_in_range'0 (l:usize) (u:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span43] UIntSize.to_int l
    <= UIntSize.to_int u}
    any
    [ return' (result:usize)-> {[%#span44] UIntSize.to_int l <= UIntSize.to_int result
      /\ UIntSize.to_int result < UIntSize.to_int u}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span29] self.final = self.current
  
  predicate completed'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span45] resolve'1 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self.current)
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span46] inv'7 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span48] inv'8 result}
      {[%#span47] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t) (o : Seq.seq t) =
    [%#span49] Permut.permut self o 0 (Seq.length self)
  
  function shallow_model'4 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span50] shallow_model'0 self
  
  use prelude.prelude.Snapshot
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : Seq.seq t =
    [%#span51] shallow_model'4 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span52] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span53] true
  
  let rec into_iter'0 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span55] inv'1 self}
    {[@expl:precondition] [%#span54] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span56] inv'1 result}
      {[%#span54] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  function shallow_model'3 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t =
    [%#span50] shallow_model'2 self
  
  let rec len'0 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span57] inv'6 self}
    any
    [ return' (result:usize)-> {[%#span58] UIntSize.to_int result = Seq.length (shallow_model'3 self)}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span59] true
  
  use prelude.prelude.Snapshot
  
  let rec knuth_shuffle (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:()))= {[%#s03_knuth_shuffle9] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s03_knuth_shuffle0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_v} s1
      | s1 = -{resolve'0 old_v}- s2
      | s2 = len'0 {v.current} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- Range'0.C_Range ([%#s03_knuth_shuffle1] (0 : usize)) _7 ] 
        (any [ any_ (_any:usize)-> (!  [ &_7 <- _any ] s1) ] )
      | s1 = into_iter'0 {_6} (fun (_ret':Range'0.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s03_knuth_shuffle2] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s03_knuth_shuffle3] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] (Snapshot.inner old_6_0).final = v.final}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] permutation_of'0 (shallow_model'0 v) (shallow_model'1 old_v)}
        {[@expl:loop invariant] [%#s03_knuth_shuffle5] v.final = (Snapshot.inner old_v).final}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] inv'1 iter}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_20 <- _ret' ]  [ &iter <- _20.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = _19.final ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_option usize) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'1 _20}- s1
          | s1 = any
            [ br0 -> {_18 = Option'0.C_None } (! bb11) | br1 (a:usize)-> {_18 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = Option'0.some <usize> {_18} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#s03_knuth_shuffle6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _23 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_23 <- _any ] s1) ] )
          | s1 =  [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {v.current} (fun (_ret':usize) ->  [ &_27 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = UIntSize.sub {_27} {n}
              (fun (_ret':usize) ->  [ &upper <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_27 <- _any ] s1) ] ))
          | s1 = rand_in_range'0 {[%#s03_knuth_shuffle7] (0 : usize)} {upper} (fun (_ret':usize) ->  [ &i <- _ret' ] s2)
          | s2 = bb15 ]
          
        | bb15 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_35 <- _ret' ] 
                 [ &v <- { v with current = _35.final ; } ] 
                s1)
          | s1 = -{inv'2 _35.final}- s2
          | s2 = deref_mut'0 {_35} (fun (_ret':borrowed (slice t)) ->  [ &_34 <- _ret' ] s3)
          | s3 = bb16 ]
          
        | bb16 = s0
          [ s0 = Borrow.borrow_final <slice t> {_34.current} {Borrow.get_id _34}
              (fun (_ret':borrowed (slice t)) ->  [ &_33 <- _ret' ]  [ &_34 <- { _34 with current = _33.final ; } ] s1)
          | s1 = -{inv'3 _33.final}- s2
          | s2 = UIntSize.sub {upper} {[%#s03_knuth_shuffle8] (1 : usize)} (fun (_ret':usize) ->  [ &_37 <- _ret' ] s3)
          | s3 = swap'0 {_33} {i} {_37} (fun (_ret':()) ->  [ &_32 <- _ret' ] s4)
          | s4 = bb17 ]
          
        | bb17 = s0 [ s0 = {[@expl:type invariant] inv'4 _34} s1 | s1 = -{resolve'2 _34}- s2 | s2 = bb6 ]  ]
         ]
      
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'5 v} s1 | s1 = -{resolve'3 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec t (Global'0.t_global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & iter : Range'0.t_range usize = any_l ()
    | & _6 : Range'0.t_range usize = any_l ()
    | & _7 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _18 : Option'0.t_option usize = any_l ()
    | & _19 : borrowed (Range'0.t_range usize) = any_l ()
    | & _20 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & n : usize = any_l ()
    | & upper : usize = any_l ()
    | & _27 : usize = any_l ()
    | & i : usize = any_l ()
    | & _32 : () = any_l ()
    | & _33 : borrowed (slice t) = any_l ()
    | & _34 : borrowed (slice t) = any_l ()
    | & _35 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _37 : usize = any_l ()
    | & old_6_0 : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s03_knuth_shuffle10] permutation_of'0 (shallow_model'2 v.final) (shallow_model'0 v)}
      (! return' {result}) ]
    
end
