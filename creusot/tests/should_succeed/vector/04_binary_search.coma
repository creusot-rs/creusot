module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_core__result__Result
  type t_Result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  let rec v_Ok < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Ok field_0 : t_Result 't 'e] . C_Ok field_0 <> input} (! {false} any) ]
    
  
  let rec v_Err < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'e [C_Err field_0 : t_Result 't 'e] . C_Err field_0 <> input} (! {false} any) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_04_binary_search__binary_search [#"04_binary_search.rs" 26 0 26 71]
  let%span s04_binary_search0 = "04_binary_search.rs" 27 20 27 21
  let%span s04_binary_search1 = "04_binary_search.rs" 28 19 28 20
  let%span s04_binary_search2 = "04_binary_search.rs" 31 19 31 20
  let%span s04_binary_search3 = "04_binary_search.rs" 33 16 33 56
  let%span s04_binary_search4 = "04_binary_search.rs" 33 4 33 58
  let%span s04_binary_search5 = "04_binary_search.rs" 36 17 36 18
  let%span s04_binary_search6 = "04_binary_search.rs" 37 26 37 27
  let%span s04_binary_search7 = "04_binary_search.rs" 37 19 37 27
  let%span s04_binary_search8 = "04_binary_search.rs" 48 19 48 20
  let%span s04_binary_search9 = "04_binary_search.rs" 19 11 19 36
  let%span s04_binary_search10 = "04_binary_search.rs" 20 11 20 23
  let%span s04_binary_search11 = "04_binary_search.rs" 21 0 21 63
  let%span s04_binary_search12 = "04_binary_search.rs" 22 0 23 48
  let%span s04_binary_search13 = "04_binary_search.rs" 24 0 25 65
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span smodel15 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sops16 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec17 = "../../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span s04_binary_search19 = "04_binary_search.rs" 16 4 16 31
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sslice21 = "../../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice22 = "../../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span s04_binary_search23 = "04_binary_search.rs" 9 4 11 5
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : uint32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : uint32 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.UIntSize
  
  predicate inv'1 (_1 : usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec uint32 (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate sorted_range'0 [#"04_binary_search.rs" 8 0 8 52] (s : Seq.seq uint32) (l : int) (u : int) =
    [%#s04_binary_search23] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> Seq.get s i <= Seq.get s j
  
  use seq.Seq
  
  predicate sorted'0 [#"04_binary_search.rs" 15 0 15 30] (s : Seq.seq uint32) =
    [%#s04_binary_search19] sorted_range'0 s 0 (Seq.length s)
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) (out : uint32) =
    [%#sslice22] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) =
    [%#sslice21] UIntSize.to_int self < Seq.length seq
  
  function view'1 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom view'1_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#svec20] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32 =
    [%#smodel15] view'1 self
  
  let rec index'0 (self:Vec'0.t_Vec uint32 (Global'0.t_Global)) (index:usize) (return'  (ret:uint32))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#svec17] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:uint32)-> {inv'2 result}
      {[%#svec18] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) (ix : int) : uint32 =
    [%#sops16] Seq.get (view'1 self) ix
  
  use T_core__result__Result as Result'0
  
  let rec len'0 (self:Vec'0.t_Vec uint32 (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:usize)-> {[%#svec14] UIntSize.to_int result = Seq.length (view'0 self)} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search (arr:Vec'0.t_Vec uint32 (Global'0.t_Global)) (elem:uint32) (return'  (ret:Result'0.t_Result usize usize))= {[%#s04_binary_search10] sorted'0 (view'0 arr)}
    {[%#s04_binary_search9] Seq.length (view'0 arr) <= UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[%#s04_binary_search0] (0 : usize)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Result'0.C_Err ([%#s04_binary_search1] (0 : usize)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#s04_binary_search2] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#s04_binary_search4] forall i : usize . UIntSize.to_int base
        + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < Seq.length (view'0 arr)  -> elem < index_logic'0 arr (UIntSize.to_int i)}
        {[@expl:loop invariant] [%#s04_binary_search4] forall i : usize . i < base
         -> index_logic'0 arr (UIntSize.to_int i) <= elem}
        {[@expl:loop invariant] [%#s04_binary_search3] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= Seq.length (view'0 arr)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[%#s04_binary_search5] (1 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq {[%#s04_binary_search6] (2 : usize)} {[%#s04_binary_search7] (0 : usize)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#s04_binary_search7] not _25} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[%#s04_binary_search6] (2 : usize)} (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = any [ br0 -> {_30 = false} (! bb11) | br1 -> {_30} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _29 ] s1
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_41 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb16) | br1 -> {_44} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- Result'0.C_Ok base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb18) | br1 -> {_48} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[%#s04_binary_search8] (1 : usize)} (fun (_ret':usize) ->  [ &_51 <- _ret' ] s1)
      | s1 =  [ &_0 <- Result'0.C_Err _51 ] s2
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- Result'0.C_Err base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : Result'0.t_Result usize usize = any_l ()
    | & arr : Vec'0.t_Vec uint32 (Global'0.t_Global) = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _21 : bool = any_l ()
    | & half : usize = any_l ()
    | & _25 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _29 : usize = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : uint32 = any_l ()
    | & cmp : uint32 = any_l ()
    | & _41 : uint32 = any_l ()
    | & _44 : bool = any_l ()
    | & _48 : bool = any_l ()
    | & _51 : usize = any_l () ]
    
    [ return' (result:Result'0.t_Result usize usize)-> {[@expl:postcondition] [%#s04_binary_search13] forall x : usize . result
      = Result'0.C_Err x
       -> (forall i : usize . x < i /\ UIntSize.to_int i < Seq.length (view'0 arr)
       -> elem < index_logic'0 arr (UIntSize.to_int i))}
      {[@expl:postcondition] [%#s04_binary_search12] forall x : usize . result = Result'0.C_Err x
       -> (forall i : usize . i < x  -> index_logic'0 arr (UIntSize.to_int i) <= elem)}
      {[@expl:postcondition] [%#s04_binary_search11] forall x : usize . result = Result'0.C_Ok x
       -> index_logic'0 arr (UIntSize.to_int x) = elem}
      (! return' {result}) ]
    
end
