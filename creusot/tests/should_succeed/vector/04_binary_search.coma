
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C04BinarySearch_BinarySearch
  let%span s04_binary_search0 = "../04_binary_search.rs" 27 20 27 21
  
  let%span s04_binary_search1 = "../04_binary_search.rs" 28 19 28 20
  
  let%span s04_binary_search2 = "../04_binary_search.rs" 31 19 31 20
  
  let%span s04_binary_search3 = "../04_binary_search.rs" 33 16 33 56
  
  let%span s04_binary_search4 = "../04_binary_search.rs" 33 4 33 58
  
  let%span s04_binary_search5 = "../04_binary_search.rs" 36 17 36 18
  
  let%span s04_binary_search6 = "../04_binary_search.rs" 37 26 37 27
  
  let%span s04_binary_search7 = "../04_binary_search.rs" 37 19 37 27
  
  let%span s04_binary_search8 = "../04_binary_search.rs" 48 19 48 20
  
  let%span s04_binary_search9 = "../04_binary_search.rs" 19 11 19 36
  
  let%span s04_binary_search10 = "../04_binary_search.rs" 20 11 20 23
  
  let%span s04_binary_search11 = "../04_binary_search.rs" 21 0 21 63
  
  let%span s04_binary_search12 = "../04_binary_search.rs" 22 0 23 48
  
  let%span s04_binary_search13 = "../04_binary_search.rs" 24 0 25 65
  
  let%span span14 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span17 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span20 = "../04_binary_search.rs" 9 4 11 5
  
  let%span span21 = "../04_binary_search.rs" 16 4 16 31
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span24 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span26 = "" 0 0 0 0
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span29 = "" 0 0 0 0
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq uint32) =
    [%#span14] true
  
  predicate inv'4 (_x : Seq.seq uint32)
  
  axiom inv'4 : forall x : Seq.seq uint32 . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span15] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq.seq uint32
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span16] inv'3 self)
   -> ([%#span18] inv'4 (shallow_model'1 self))
  && ([%#span17] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span19] inv'4 (shallow_model'1 self)
  
  axiom inv'3 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'3 x = true
  
  predicate invariant'2 (self : uint32) =
    [%#span14] true
  
  predicate inv'2 (_x : uint32)
  
  axiom inv'2 : forall x : uint32 . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span14] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span14] true
  
  predicate inv'0 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  axiom inv'0 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'0 x = true
  
  use seq.Seq
  
  predicate sorted_range'0 [#"../04_binary_search.rs" 8 0 8 52] (s : Seq.seq uint32) (l : int) (u : int) =
    [%#span20] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> Seq.get s i <= Seq.get s j
  
  predicate sorted'0 [#"../04_binary_search.rs" 15 0 15 30] (s : Seq.seq uint32) =
    [%#span21] sorted_range'0 s 0 (Seq.length s)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Slice
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) (out : uint32) =
    [%#span22] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) =
    [%#span23] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq.seq uint32 =
    [%#span24] shallow_model'1 self
  
  let rec index'0 (self:Vec'0.t_vec uint32 (Global'0.t_global)) (index:usize) (return'  (ret:uint32))= {[@expl:precondition] [%#span27] inv'1 index}
    {[@expl:precondition] [%#span26] inv'0 self}
    {[@expl:precondition] [%#span25] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:uint32)-> {[%#span29] inv'2 result}
      {[%#span28] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span30] Seq.get (shallow_model'1 self) ix
  
  use Core_Result_Result_Type as Result'0
  
  let rec len'0 (self:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span31] inv'0 self}
    any
    [ return' (result:usize)-> {[%#span32] UIntSize.to_int result = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
  
  let rec binary_search (arr:Vec'0.t_vec uint32 (Global'0.t_global)) (elem:uint32) (return'  (ret:Result'0.t_result usize usize))= {[%#s04_binary_search10] sorted'0 (shallow_model'0 arr)}
    {[%#s04_binary_search9] Seq.length (shallow_model'0 arr) <= UIntSize.to_int (max'0 : usize)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[%#s04_binary_search0] (0 : usize)}
          (fun (_ret':bool) ->  [ &_9 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_10 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Result'0.C_Err ([%#s04_binary_search1] (0 : usize)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#s04_binary_search2] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#s04_binary_search4] forall i : usize . UIntSize.to_int base
        + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < Seq.length (shallow_model'0 arr)  -> elem < index_logic'0 arr (UIntSize.to_int i)}
        {[@expl:loop invariant] [%#s04_binary_search4] forall i : usize . i < base
         -> index_logic'0 arr (UIntSize.to_int i) <= elem}
        {[@expl:loop invariant] [%#s04_binary_search3] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= Seq.length (shallow_model'0 arr)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[%#s04_binary_search5] (1 : usize)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq {[%#s04_binary_search6] (2 : usize)} {[%#s04_binary_search7] (0 : usize)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#s04_binary_search7] not _25} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[%#s04_binary_search6] (2 : usize)} (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = any [ br0 -> {_30 = false} (! bb11) | br1 -> {_30} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _29 ] (any [ any_ (_any:usize)-> (!  [ &_29 <- _any ] s1) ] )
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_41 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb16) | br1 -> {_44} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- Result'0.C_Ok base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb18) | br1 -> {_48} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[%#s04_binary_search8] (1 : usize)} (fun (_ret':usize) ->  [ &_51 <- _ret' ] s1)
      | s1 =  [ &_0 <- Result'0.C_Err _51 ] (any [ any_ (_any:usize)-> (!  [ &_51 <- _any ] s2) ] )
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- Result'0.C_Err base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : Result'0.t_result usize usize = any_l ()
    | & arr : Vec'0.t_vec uint32 (Global'0.t_global) = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _21 : bool = any_l ()
    | & half : usize = any_l ()
    | & _25 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _29 : usize = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : uint32 = any_l ()
    | & cmp : uint32 = any_l ()
    | & _41 : uint32 = any_l ()
    | & _44 : bool = any_l ()
    | & _48 : bool = any_l ()
    | & _51 : usize = any_l () ]
    
    [ return' (result:Result'0.t_result usize usize)-> {[@expl:postcondition] [%#s04_binary_search13] forall x : usize . result
      = Result'0.C_Err x
       -> (forall i : usize . x < i /\ UIntSize.to_int i < Seq.length (shallow_model'0 arr)
       -> elem < index_logic'0 arr (UIntSize.to_int i))}
      {[@expl:postcondition] [%#s04_binary_search12] forall x : usize . result = Result'0.C_Err x
       -> (forall i : usize . i < x  -> index_logic'0 arr (UIntSize.to_int i) <= elem)}
      {[@expl:postcondition] [%#s04_binary_search11] forall x : usize . result = Result'0.C_Ok x
       -> index_logic'0 arr (UIntSize.to_int x) = elem}
      (! return' {result}) ]
    
end
