module M_04_binary_search__binary_search [#"04_binary_search.rs" 26 0 26 71]
  let%span s04_binary_search0 = "04_binary_search.rs" 27 20 27 21
  let%span s04_binary_search1 = "04_binary_search.rs" 28 19 28 20
  let%span s04_binary_search2 = "04_binary_search.rs" 31 19 31 20
  let%span s04_binary_search3 = "04_binary_search.rs" 35 16 35 90
  let%span s04_binary_search4 = "04_binary_search.rs" 34 16 34 62
  let%span s04_binary_search5 = "04_binary_search.rs" 33 16 33 56
  let%span s04_binary_search6 = "04_binary_search.rs" 36 17 36 18
  let%span s04_binary_search7 = "04_binary_search.rs" 37 26 37 27
  let%span s04_binary_search8 = "04_binary_search.rs" 37 19 37 27
  let%span s04_binary_search9 = "04_binary_search.rs" 48 19 48 20
  let%span s04_binary_search10 = "04_binary_search.rs" 19 11 19 36
  let%span s04_binary_search11 = "04_binary_search.rs" 20 11 20 23
  let%span s04_binary_search12 = "04_binary_search.rs" 21 10 21 61
  let%span s04_binary_search13 = "04_binary_search.rs" 22 10 23 46
  let%span s04_binary_search14 = "04_binary_search.rs" 24 10 25 63
  let%span svec15 = "../../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span smodel16 = "../../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span sindex17 = "../../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span s04_binary_search20 = "04_binary_search.rs" 16 4 16 31
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sslice22 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice23 = "../../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span s04_binary_search24 = "04_binary_search.rs" 10 8 10 74
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Int
  
  function view'1 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec21] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32 =
    [%#smodel16] view'1 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'0 self}
    any
    [ return' (result:usize)-> {[%#svec15] UIntSize.to_int result = Seq.length (view'0 self)} (! return' {result}) ]
    
  
  type t_Result'0  =
    | C_Ok'0 usize
    | C_Err'0 usize
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : uint32 =
    [%#sindex17] Seq.get (view'1 self) ix
  
  predicate inv'1 (_1 : usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) =
    [%#sslice22] UIntSize.to_int self < Seq.length seq
  
  predicate inv'2 (_1 : uint32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : uint32 [inv'2 x] . inv'2 x = true
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) (out : uint32) =
    [%#sslice23] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:uint32))= {[@expl:index 'self' type invariant] inv'0 self}
    {[@expl:index 'index' type invariant] inv'1 index}
    {[@expl:index requires] [%#svec18] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:uint32)-> {inv'2 result}
      {[%#svec19] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate sorted_range'0 [#"04_binary_search.rs" 8 0 8 52] (s : Seq.seq uint32) (l : int) (u : int) =
    [%#s04_binary_search24] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> Seq.get s i <= Seq.get s j
  
  predicate sorted'0 [#"04_binary_search.rs" 15 0 15 30] (s : Seq.seq uint32) =
    [%#s04_binary_search20] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0 (arr:t_Vec'0) (elem:uint32) (return'  (ret:t_Result'0))= {[@expl:binary_search requires #0] [%#s04_binary_search10] Seq.length (view'0 arr)
    <= UIntSize.to_int (v_MAX'0 : usize)}
    {[@expl:binary_search requires #1] [%#s04_binary_search11] sorted'0 (view'0 arr)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.eq {_10} {[%#s04_binary_search0] (0 : usize)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- C_Err'0 ([%#s04_binary_search1] (0 : usize)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#s04_binary_search2] (0 : usize) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] [%#s04_binary_search5] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= Seq.length (view'0 arr)}
        {[@expl:loop invariant #1] [%#s04_binary_search4] forall i : usize . i < base
         -> index_logic'0 arr (UIntSize.to_int i) <= elem}
        {[@expl:loop invariant #2] [%#s04_binary_search3] forall i : usize . UIntSize.to_int base + UIntSize.to_int size
        < UIntSize.to_int i
        /\ UIntSize.to_int i < Seq.length (view'0 arr)  -> elem < index_logic'0 arr (UIntSize.to_int i)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = UIntSize.gt {size} {[%#s04_binary_search6] (1 : usize)} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1)
          | s1 = any [ br0 -> {_22 = false} (! bb13) | br1 -> {_22} (! bb7) ]  ]
          
        | bb7 = s0
          [ s0 = UIntSize.eq {[%#s04_binary_search7] (2 : usize)} {[%#s04_binary_search8] (0 : usize)}
              (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#s04_binary_search8] not _26} s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 = UIntSize.div {size} {[%#s04_binary_search7] (2 : usize)} (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':uint32) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = UInt32.gt {_33} {elem} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1)
          | s1 = any [ br0 -> {_31 = false} (! bb11) | br1 -> {_31} (! bb10) ]  ]
          
        | bb10 = s0 [ s0 =  [ &_30 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_30 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _30 ] s1
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
           ]
         ]
      
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':uint32) ->  [ &_40 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _40 ] s1
      | s1 = UInt32.eq {cmp} {elem} (fun (_ret':bool) ->  [ &_43 <- _ret' ] s2)
      | s2 = any [ br0 -> {_43 = false} (! bb16) | br1 -> {_43} (! bb15) ]  ]
      
    | bb15 = s0 [ s0 =  [ &_0 <- C_Ok'0 base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 = UInt32.lt {cmp} {elem} (fun (_ret':bool) ->  [ &_47 <- _ret' ] s1)
      | s1 = any [ br0 -> {_47 = false} (! bb18) | br1 -> {_47} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 = UIntSize.add {base} {[%#s04_binary_search9] (1 : usize)} (fun (_ret':usize) ->  [ &_50 <- _ret' ] s1)
      | s1 =  [ &_0 <- C_Err'0 _50 ] s2
      | s2 = bb19 ]
      
    | bb18 = s0 [ s0 =  [ &_0 <- C_Err'0 base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : t_Result'0 = any_l ()
    | & arr : t_Vec'0 = arr
    | & elem : uint32 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _22 : bool = any_l ()
    | & half : usize = any_l ()
    | & _26 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _30 : usize = any_l ()
    | & _31 : bool = any_l ()
    | & _33 : uint32 = any_l ()
    | & cmp : uint32 = any_l ()
    | & _40 : uint32 = any_l ()
    | & _43 : bool = any_l ()
    | & _47 : bool = any_l ()
    | & _50 : usize = any_l () ]
    
    [ return' (result:t_Result'0)-> {[@expl:binary_search ensures #0] [%#s04_binary_search12] forall x : usize . result
      = C_Ok'0 x  -> index_logic'0 arr (UIntSize.to_int x) = elem}
      {[@expl:binary_search ensures #1] [%#s04_binary_search13] forall x : usize . result = C_Err'0 x
       -> (forall i : usize . i < x  -> index_logic'0 arr (UIntSize.to_int i) <= elem)}
      {[@expl:binary_search ensures #2] [%#s04_binary_search14] forall x : usize . result = C_Err'0 x
       -> (forall i : usize . x < i /\ UIntSize.to_int i < Seq.length (view'0 arr)
       -> elem < index_logic'0 arr (UIntSize.to_int i))}
      (! return' {result}) ]
    
end
