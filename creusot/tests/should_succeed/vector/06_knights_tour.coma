
module C06KnightsTour_Point_Type
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  type t_point  =
    | C_Point isize isize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_point (input:t_point) (ret  (x:isize) (y:isize))= any
    [ good (x:isize) (y:isize)-> {C_Point x y = input} (! ret {x} {y})
    | bad (x:isize) (y:isize)-> {C_Point x y <> input} {false} any ]
    
  
  function point_x (self : t_point) : isize =
    match self with
      | C_Point a _ -> a
      end
  
  function point_y (self : t_point) : isize =
    match self with
      | C_Point _ a -> a
      end
end
module C06KnightsTour_Impl3_Clone
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 4 15 4 20
  
  let%span span1 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  let rec clone'0 (self:isize) (return'  (ret:isize))= any
    [ return' (result:isize)-> {[%#span1] result = self} (! return' {result}) ]
    
  
  use C06KnightsTour_Point_Type as Point'0
  
  let rec clone' (self:Point'0.t_point) (return'  (ret:Point'0.t_point))= (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_5 <- rx'0 ] s1)
      | s1 = clone'0 {_5} (fun (_ret':isize) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Point'0.t_point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_8 <- ry'0 ] s1)
      | s1 = clone'0 {_8} (fun (_ret':isize) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_0 <- Point'0.C_Point _3 _6 ] 
        (any [ any_ (_any:isize)-> (!  [ &_3 <- _any ] (any [ any_ (_any:isize)-> (!  [ &_6 <- _any ] s1) ] )) ] )
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : Point'0.t_point = any_l ()
    | & self : Point'0.t_point = self
    | & _3 : isize = any_l ()
    | & _5 : isize = any_l ()
    | & _6 : isize = any_l ()
    | & _8 : isize = any_l () ]
    
    [ return' (result:Point'0.t_point)-> {[@expl:postcondition] [%#s06_knights_tour0] result = self}
      (! return' {result}) ]
    
end
module C06KnightsTour_Impl0_Mov
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 12 15 12 52
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 13 15 13 52
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 14 15 14 46
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 15 15 15 46
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 16 14 16 41
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 17 14 17 41
  
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use C06KnightsTour_Point_Type as Point'0
  
  use prelude.prelude.IntSize
  
  let rec mov (self:Point'0.t_point) (p:(isize, isize)) (return'  (ret:Point'0.t_point))= {[%#s06_knights_tour3] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[%#s06_knights_tour2] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[%#s06_knights_tour1] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    {[%#s06_knights_tour0] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_point {self}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.add {rx'0} {let (r'0, _) = p in r'0} (fun (_ret':isize) ->  [ &_9 <- _ret' ] s1))
      | s1 = Point'0.t_point {self}
          (fun (rx'1:isize) (ry'1:isize) ->
            IntSize.add {ry'1} {let (_, r'1) = p in r'1} (fun (_ret':isize) ->  [ &_12 <- _ret' ] s2))
      | s2 =  [ &_0 <- Point'0.C_Point _9 _12 ] 
        (any [ any_ (_any:isize)-> (!  [ &_9 <- _any ] (any [ any_ (_any:isize)-> (!  [ &_12 <- _any ] s3) ] )) ] )
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : Point'0.t_point = any_l ()
    | & self : Point'0.t_point = self
    | & p : (isize, isize) = p
    | & _9 : isize = any_l ()
    | & _12 : isize = any_l () ]
    
    [ return' (result:Point'0.t_point)-> {[@expl:postcondition] [%#s06_knights_tour5] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a)}
      {[@expl:postcondition] [%#s06_knights_tour4] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C06KnightsTour_Board_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.Int
  
  type t_board  =
    | C_Board usize (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_board (input:t_board) (ret  (size:usize) (field:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)))= any
    [ good (size:usize) (field:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))-> {C_Board size field
      = input}
      (! ret {size} {field})
    | bad (size:usize) (field:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))-> {C_Board size field
      <> input}
      {false}
      any ]
    
  
  function board_size (self : t_board) : usize =
    match self with
      | C_Board a _ -> a
      end
  
  function board_field (self : t_board) : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) =
    match self with
      | C_Board _ a -> a
      end
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_mapinv < 'i > < 'b > < 'f > (input:t_mapinv 'i 'b 'f) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced <> input}
      {false}
      any ]
    
  
  function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i =
    match self with
      | C_MapInv a _ _ -> a
      end
  
  function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f =
    match self with
      | C_MapInv _ a _ -> a
      end
  
  function mapinv_produced (self : t_mapinv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b) =
    match self with
      | C_MapInv _ _ a -> a
      end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module C06KnightsTour_Impl1_New_Closure3_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type c06knightstour_impl1_new_closure3  =
    | C06knightstour_impl1_new_closure3 usize
  
  let rec c06knightstour_impl1_new_closure3 (input:c06knightstour_impl1_new_closure3) (ret  (size:usize))= any
    [ good (size:usize)-> {C06knightstour_impl1_new_closure3 size = input} (! ret {size})
    | bad (size:usize)-> {C06knightstour_impl1_new_closure3 size <> input} {false} any ]
    
end
module C06KnightsTour_Impl1_New_Closure3
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 44 28 44 29
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 43 26 43 48
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq usize) =
    [%#span2] true
  
  predicate inv'2 (_x : Seq.seq usize)
  
  axiom inv'2 : forall x : Seq.seq usize . inv'2 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'1 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span4] inv'1 self)
   -> ([%#span6] inv'2 (shallow_model'0 self))
  && ([%#span5] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'1 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span7] inv'2 (shallow_model'0 self)
  
  axiom inv'1 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'1 x = true
  
  predicate invariant'0 (self : usize) =
    [%#span2] true
  
  predicate inv'0 (_x : usize)
  
  axiom inv'0 : forall x : usize . inv'0 x = true
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use C06KnightsTour_Impl1_New_Closure3_Type as Closure'0
  
  function field_0'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.c06knightstour_impl1_new_closure3) : usize
   =
    let Closure'0.C06knightstour_impl1_new_closure3 a = self in a
  
  predicate unnest'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.c06knightstour_impl1_new_closure3) (_2 : Closure'0.c06knightstour_impl1_new_closure3)
    
   =
    field_0'0 _2 = field_0'0 self
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span8] Seq.get (shallow_model'0 self) ix
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_vec usize (Global'0.t_global)))= {[@expl:precondition] [%#span9] inv'0 elem}
    any
    [ return' (result:Vec'0.t_vec usize (Global'0.t_global))-> {[%#span12] inv'1 result}
      {[%#span11] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span10] Seq.length (shallow_model'0 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed Closure'0.c06knightstour_impl1_new_closure3) =
    [%#span13] self.final = self.current
  
  let rec c06knightstour_impl1_new_closure3 (_1:borrowed Closure'0.c06knightstour_impl1_new_closure3) (_2:usize) (_3:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:Vec'0.t_vec usize (Global'0.t_global)))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = Closure'0.c06knightstour_impl1_new_closure3 {_1.current}
          (fun (r'0:usize) ->
            from_elem'0 {[%#s06_knights_tour0] (0 : usize)} {r'0}
              (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &res <- _ret' ] s2))
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_0 <- res ] (any [ any_ (_any:Vec'0.t_vec usize (Global'0.t_global))-> (!  [ &res <- _any ] s1) ] )
      | s1 = bb3 ]
      
    | bb3 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _1 : borrowed Closure'0.c06knightstour_impl1_new_closure3 = _1
    | & res : Vec'0.t_vec usize (Global'0.t_global) = any_l () ]
    
    [ return' (result:Vec'0.t_vec usize (Global'0.t_global))-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_knights_tour1] Seq.length (shallow_model'0 result)
      = UIntSize.to_int (field_0'0 _1.final)}
      (! return' {result}) ]
    
end
module C06KnightsTour_Impl1_New
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 41 20 41 21
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 37 15 37 28
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 38 14 38 33
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 39 14 39 25
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span10 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span11 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span12 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9
  
  let%span span13 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32
  
  let%span span14 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32
  
  let%span span15 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23
  
  let%span span16 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33
  
  let%span span17 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9
  
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 120 4 120 83
  
  let%span span29 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span42 = "../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63
  
  let%span span48 = "../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83
  
  let%span span49 = "../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42
  
  let%span span50 = "../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25
  
  let%span span51 = "../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45
  
  let%span span52 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span53 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span54 = "../../../../../creusot-contracts/src/std/vec.rs" 275 20 275 32
  
  let%span span55 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9
  
  let%span span56 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 27
  
  let%span span58 = "" 0 0 0 0
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter.rs" 136 16 137 83
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 141
  
  let%span span62 = "../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51
  
  let%span span63 = "../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70
  
  let%span span64 = "../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25
  
  let%span span65 = "../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31
  
  let%span span66 = "../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 88
  
  let%span span67 = "../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 61
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'12 (self : Snapshot.snap_ty (Seq.seq usize)) =
    [%#span4] true
  
  predicate inv'12 (_x : Snapshot.snap_ty (Seq.seq usize))
  
  axiom inv'12 : forall x : Snapshot.snap_ty (Seq.seq usize) . inv'12 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.Int16
  
  use C06KnightsTour_Impl1_New_Closure3_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'11 (self : Seq.seq (borrowed Closure'0.c06knightstour_impl1_new_closure3)) =
    [%#span4] true
  
  predicate inv'11 (_x : Seq.seq (borrowed Closure'0.c06knightstour_impl1_new_closure3))
  
  axiom inv'11 : forall x : Seq.seq (borrowed Closure'0.c06knightstour_impl1_new_closure3) . inv'11 x = true
  
  predicate inv'7 (_x : Seq.seq usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'10 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span6] inv'10 self)
   -> ([%#span8] inv'7 (shallow_model'1 self))
  && ([%#span7] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'10 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span9] inv'7 (shallow_model'1 self)
  
  axiom inv'10 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'10 x = true
  
  predicate invariant'9 (self : borrowed Closure'0.c06knightstour_impl1_new_closure3) =
    [%#span4] true
  
  predicate inv'9 (_x : borrowed Closure'0.c06knightstour_impl1_new_closure3)
  
  axiom inv'9 : forall x : borrowed Closure'0.c06knightstour_impl1_new_closure3 . inv'9 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  predicate invariant'8 (self : borrowed (Range'0.t_range usize)) =
    [%#span4] true
  
  predicate inv'8 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'8 : forall x : borrowed (Range'0.t_range usize) . inv'8 x = true
  
  predicate invariant'7 (self : Seq.seq usize) =
    [%#span4] true
  
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  
  predicate inv'5 (_x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
  
  use seq.Seq
  
  predicate inv'6 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . ([%#span6] inv'6 self)
   -> ([%#span8] inv'5 (shallow_model'0 self))
  && ([%#span7] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'6 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span9] inv'5 (shallow_model'0 self)
  
  axiom inv'6 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'6 x = true
  
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as MapInv'0
  
  use seq.Seq
  
  predicate inv'3 (_x : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3)
  
  function field_0'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.c06knightstour_impl1_new_closure3) : usize
   =
    let Closure'0.C06knightstour_impl1_new_closure3 a = self in a
  
  predicate unnest'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.c06knightstour_impl1_new_closure3) (_2 : Closure'0.c06knightstour_impl1_new_closure3)
    
   =
    field_0'0 _2 = field_0'0 self
  
  predicate postcondition_mut'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : borrowed Closure'0.c06knightstour_impl1_new_closure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize))) (result : Vec'0.t_vec usize (Global'0.t_global))
    
   =
    (let (_2, _3) = args in Seq.length (shallow_model'1 result) = UIntSize.to_int (field_0'0 self.final))
    /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  predicate precondition'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.c06knightstour_impl1_new_closure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize)))
    
   =
    let (_2, _3) = args in true
  
  use prelude.prelude.Snapshot
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : usize) : int =
    [%#span10] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq.seq usize) (o : Range'0.t_range usize) =
    [%#span11] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  predicate produces'1 [@inline:trivial] (self : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) (visited : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (succ : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3)
    
   =
    [%#span12] unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ)
    /\ (exists s : Seq.seq usize . inv'7 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ)
    /\ Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ)
    = Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s
    /\ (exists fs : Seq.seq (borrowed Closure'0.c06knightstour_impl1_new_closure3) . inv'11 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
      (Seq.get fs 0).current = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  function produces_trans'2 (a : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) (ab : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (b : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) (bc : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (c : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) : ()
    
  
  axiom produces_trans'2_spec : forall a : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3, ab : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)), b : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3, bc : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)), c : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3 . ([%#span13] produces'1 a ab b)
   -> ([%#span14] produces'1 b bc c)
   -> ([%#span15] inv'3 a)
   -> ([%#span16] inv'5 ab)
   -> ([%#span17] inv'3 b)
   -> ([%#span18] inv'5 bc)  -> ([%#span19] inv'3 c)  -> ([%#span20] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'2 (self : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) : ()
    
  
  axiom produces_refl'2_spec : forall self : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3 . ([%#span21] inv'3 self)
   -> ([%#span22] produces'1 self (Seq.empty  : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) self)
  
  predicate invariant'5 (self : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span4] true
  
  axiom inv'5 : forall x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'5 x = true
  
  predicate invariant'4 (self : borrowed (MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3))
    
   =
    [%#span4] true
  
  predicate inv'4 (_x : borrowed (MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3))
    
  
  axiom inv'4 : forall x : borrowed (MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) . inv'4 x
  = (inv'3 x.current /\ inv'3 x.final)
  
  use seq.Seq
  
  predicate inv'1 (_x : Range'0.t_range usize)
  
  predicate inv'0 (_x : usize)
  
  predicate next_precondition'0 (iter : Range'0.t_range usize) (func : Closure'0.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize)
    
   =
    [%#span23] forall e : usize, i : Range'0.t_range usize . inv'0 e /\ inv'1 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 (iter : Range'0.t_range usize) (func : Closure'0.c06knightstour_impl1_new_closure3) =
    [%#span24] forall s : Seq.seq usize, e1 : usize, e2 : usize, f : borrowed Closure'0.c06knightstour_impl1_new_closure3, b : Vec'0.t_vec usize (Global'0.t_global), i : Range'0.t_range usize . inv'7 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'9 f /\ inv'10 b /\ inv'1 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate inv'2 (_x : Closure'0.c06knightstour_impl1_new_closure3)
  
  predicate preservation_inv'0 (iter : Range'0.t_range usize) (func : Closure'0.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize)
    
  
  axiom preservation_inv'0_spec : forall iter : Range'0.t_range usize, func : Closure'0.c06knightstour_impl1_new_closure3, produced : Seq.seq usize . ([%#span25] inv'1 iter)
   -> ([%#span26] inv'2 func)
   -> ([%#span27] inv'7 produced)
   -> ([%#span28] produced = (Seq.empty  : Seq.seq usize)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  predicate resolve'3 (self : borrowed (Range'0.t_range usize)) =
    [%#span29] self.final = self.current
  
  predicate completed'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span30] resolve'3 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self.current)
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end self.current)
  
  predicate reinitialize'0 (_1 : ()) =
    [%#span31] forall iter : borrowed (Range'0.t_range usize), func : Closure'0.c06knightstour_impl1_new_closure3 . inv'8 iter
    /\ inv'2 func
     -> completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq usize) /\ preservation'0 iter.final func
  
  predicate invariant'3 (self : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3)
    
  
  axiom inv'3 : forall x : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3 . inv'3 x
  = (invariant'3 x
  /\ match x with
    | MapInv'0.C_MapInv iter func produced -> true
    end)
  
  predicate invariant'2 (self : Closure'0.c06knightstour_impl1_new_closure3) =
    [%#span4] true
  
  axiom inv'2 : forall x : Closure'0.c06knightstour_impl1_new_closure3 . inv'2 x = true
  
  function produces_trans'1 (a : Range'0.t_range usize) (ab : Seq.seq usize) (b : Range'0.t_range usize) (bc : Seq.seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_range usize, ab : Seq.seq usize, b : Range'0.t_range usize, bc : Seq.seq usize, c : Range'0.t_range usize . ([%#span32] produces'0 a ab b)
   -> ([%#span33] produces'0 b bc c)
   -> ([%#span34] inv'1 a)
   -> ([%#span35] inv'7 ab)
   -> ([%#span36] inv'1 b)
   -> ([%#span37] inv'7 bc)  -> ([%#span38] inv'1 c)  -> ([%#span39] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_range usize . ([%#span40] inv'1 self)
   -> ([%#span41] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'1 (self : Range'0.t_range usize) =
    [%#span4] true
  
  axiom inv'1 : forall x : Range'0.t_range usize . inv'1 x = true
  
  predicate invariant'0 (self : usize) =
    [%#span4] true
  
  axiom inv'0 : forall x : usize . inv'0 x = true
  
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq.seq usize) (b : Range'0.t_range usize) (bc : Seq.seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq.seq usize, b : Range'0.t_range usize, bc : Seq.seq usize, c : Range'0.t_range usize . ([%#span42] produces'0 a ab b)
   -> ([%#span43] produces'0 b bc c)
   -> ([%#span44] inv'1 a)
   -> ([%#span45] inv'7 ab)
   -> ([%#span46] inv'1 b)
   -> ([%#span47] inv'7 bc)  -> ([%#span48] inv'1 c)  -> ([%#span49] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span50] inv'1 self)
   -> ([%#span51] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (ix : int) : Vec'0.t_vec usize (Global'0.t_global)
    
   =
    [%#span52] Seq.get (shallow_model'0 self) ix
  
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  
  use C06KnightsTour_Board_Type as Board'0
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_board) =
    [%#span53] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'0 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'1 (index_logic'0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  
  use prelude.prelude.Intrinsic
  
  predicate from_iter_post'0 (prod : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (res : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
    
   =
    [%#span54] prod = shallow_model'0 res
  
  predicate completed'0 (self : borrowed (MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3))
    
   =
    [%#span55] Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self.final)
    = (Seq.empty  : Seq.seq usize)
    /\ completed'1 (Borrow.borrow_logic (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self.current) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self.current
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self.final
  
  predicate resolve'2 [#"../06_knights_tour.rs" 43 16 43 50] (_1 : Closure'0.c06knightstour_impl1_new_closure3) =
    true
  
  predicate resolve'1 (self : Range'0.t_range usize) =
    [%#span56] true
  
  predicate resolve'0 (self : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3)
    
   =
    [%#span57] resolve'1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self)
    /\ resolve'2 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  
  let rec collect'0 (self:MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) (return'  (ret:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)))= {[@expl:precondition] [%#span58] inv'3 self}
    any
    [ return' (result:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))-> {[%#span60] inv'6 result}
      {[%#span59] exists done' : borrowed (MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3), prod : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'4 done'
      /\ inv'5 prod
      /\ resolve'0 done'.final
      /\ completed'0 done' /\ produces'1 self prod done'.current /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  
  let rec map_inv'0 (self:Range'0.t_range usize) (func:Closure'0.c06knightstour_impl1_new_closure3) (return'  (ret:MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3))= {[@expl:precondition] [%#span65] inv'2 func}
    {[@expl:precondition] [%#span64] inv'1 self}
    {[@expl:precondition] [%#span63] preservation'0 self func}
    {[@expl:precondition] [%#span62] reinitialize'0 ()}
    {[@expl:precondition] [%#span61] forall e : usize, i2 : Range'0.t_range usize . inv'0 e /\ inv'1 i2
     -> produces'0 self (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq usize))}
    any
    [ return' (result:MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3)-> {[%#span67] inv'3 result}
      {[%#span66] result = MapInv'0.C_MapInv self func (Snapshot.new (Seq.empty  : Seq.seq usize))}
      (! return' {result}) ]
    
  
  let rec new (size:usize) (return'  (ret:Board'0.t_board))= {[%#s06_knights_tour1] UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#s06_knights_tour0] (0 : usize)) size ] s1
      | s1 =  [ &_9 <- Closure'0.C06knightstour_impl1_new_closure3 size ] s2
      | s2 = map_inv'0 {_7} {_9}
          (fun (_ret':MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3) ->
             [ &_6 <- _ret' ] 
            s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = collect'0 {_6}
          (fun (_ret':Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
             [ &rows <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_0 <- Board'0.C_Board size rows ] 
        (any
        [ any_ (_any:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))-> (!  [ &rows <- _any ] 
          s1) ]
        )
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : Board'0.t_board = any_l ()
    | & size : usize = size
    | & rows : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) = any_l ()
    | & _6 : MapInv'0.t_mapinv (Range'0.t_range usize) usize Closure'0.c06knightstour_impl1_new_closure3 = any_l ()
    | & _7 : Range'0.t_range usize = any_l ()
    | & _9 : Closure'0.c06knightstour_impl1_new_closure3 = any_l () ]
    
    [ return' (result:Board'0.t_board)-> {[@expl:postcondition] [%#s06_knights_tour3] wf'0 result}
      {[@expl:postcondition] [%#s06_knights_tour2] C06KnightsTour_Board_Type.board_size result = size}
      (! return' {result}) ]
    
end
module C06KnightsTour_Impl1_Available
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 53 8 53 9
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 55 15 55 16
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 57 57 57 58
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 53 8 57 58
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 50 15 50 24
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 51 4 51 44
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span12 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span14 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span17 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span22 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq usize) =
    [%#span6] true
  
  predicate inv'7 (_x : Seq.seq usize)
  
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span7] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'6 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span8] inv'6 self)
   -> ([%#span10] inv'7 (shallow_model'3 self))
  && ([%#span9] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'6 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span11] inv'7 (shallow_model'3 self)
  
  axiom inv'6 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'6 x = true
  
  predicate invariant'5 (self : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span6] true
  
  predicate inv'5 (_x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'5 : forall x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'5 x = true
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . ([%#span8] inv'4 self)
   -> ([%#span10] inv'5 (shallow_model'2 self))
  && ([%#span9] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span11] inv'5 (shallow_model'2 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'4 x = true
  
  predicate invariant'3 (self : usize) =
    [%#span6] true
  
  predicate inv'3 (_x : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  predicate invariant'2 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span6] true
  
  predicate inv'2 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  axiom inv'2 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span6] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span6] true
  
  predicate inv'0 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  axiom inv'0 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'0 x = true
  
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  
  use prelude.prelude.IntSize
  
  use C06KnightsTour_Point_Type as Point'0
  
  use C06KnightsTour_Board_Type as Board'0
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_board) (p : Point'0.t_point) =
    [%#span12] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (ix : int) : Vec'0.t_vec usize (Global'0.t_global)
    
   =
    [%#span13] Seq.get (shallow_model'2 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_board) =
    [%#span14] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'2 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'3 (index_logic'0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span15] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span16] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize =
    [%#span17] shallow_model'3 self
  
  let rec index'1 (self:Vec'0.t_vec usize (Global'0.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span20] inv'1 index}
    {[@expl:precondition] [%#span19] inv'2 self}
    {[@expl:precondition] [%#span18] in_bounds'2 index (shallow_model'1 self)}
    any
    [ return' (result:usize)-> {[%#span22] inv'3 result}
      {[%#span21] has_value'1 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (out : Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span15] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span16] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span17] shallow_model'2 self
  
  let rec index'0 (self:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (index:usize) (return'  (ret:Vec'0.t_vec usize (Global'0.t_global)))= {[@expl:precondition] [%#span20] inv'1 index}
    {[@expl:precondition] [%#span19] inv'0 self}
    {[@expl:precondition] [%#span18] in_bounds'1 index (shallow_model'0 self)}
    any
    [ return' (result:Vec'0.t_vec usize (Global'0.t_global))-> {[%#span22] inv'2 result}
      {[%#span21] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  use prelude.prelude.IntSize
  
  let rec available (self:Board'0.t_board) (p:Point'0.t_point) (return'  (ret:bool))= {[%#s06_knights_tour4] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[%#s06_knights_tour0] (0 : isize)} {rx'0} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1))
      | s1 = any [ br0 -> {_5 = false} (! bb8) | br1 -> {_5} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_8 <- _res ] s1))
      | s1 = Board'0.t_board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
            UIntSize.lt {_8} {rsize'0}
              (fun (_ret':bool) ->  [ &_7 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_8 <- _any ] s2) ] )))
      | s2 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[%#s06_knights_tour1] (0 : isize)} {ry'0} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1))
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_14 <- _res ] s1))
      | s1 = Board'0.t_board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
            UIntSize.lt {_14} {rsize'0}
              (fun (_ret':bool) ->  [ &_13 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s2) ] )))
      | s2 = any [ br0 -> {_13 = false} (! bb5) | br1 -> {_13} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_22 <- _res ] s1))
      | s1 = Board'0.t_board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
            index'0 {rfield'0} {_22} (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_20 <- _ret' ] s2))
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_24 <- _res ] s1))
      | s1 = index'1 {_20} {_24} (fun (_ret':usize) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 = UIntSize.eq {_18} {[%#s06_knights_tour2] (0 : usize)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb5 = bb9
    | bb6 = bb9
    | bb7 = bb9
    | bb8 = bb9
    | bb9 = s0 [ s0 =  [ &_0 <- [%#s06_knights_tour3] false ] s1 | s1 = bb12 ] 
    | bb12 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Board'0.t_board = self
    | & p : Point'0.t_point = p
    | & _5 : bool = any_l ()
    | & _7 : bool = any_l ()
    | & _8 : usize = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : bool = any_l ()
    | & _14 : usize = any_l ()
    | & _18 : usize = any_l ()
    | & _20 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _22 : usize = any_l ()
    | & _24 : usize = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#s06_knights_tour5] result  -> in_bounds'0 self p}
      (! return' {result}) ]
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_manuallydrop < 't > (input:t_manuallydrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value})
    | bad (value:'t)-> {C_ManuallyDrop value <> input} {false} any ]
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.prelude.Opaque
  
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_intoiter 't 'a =
    | C_IntoIter (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't) usize (ManuallyDrop'0.t_manuallydrop 'a) (NonNull'0.t_nonnull 't) opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_intoiter < 't > < 'a > (input:t_intoiter 't 'a) (ret  (buf:NonNull'0.t_nonnull 't) (phantom:PhantomData'0.t_phantomdata 't) (cap:usize) (alloc:ManuallyDrop'0.t_manuallydrop 'a) (ptr:NonNull'0.t_nonnull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_nonnull 't) (phantom:PhantomData'0.t_phantomdata 't) (cap:usize) (alloc:ManuallyDrop'0.t_manuallydrop 'a) (ptr:NonNull'0.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'})
    | bad (buf:NonNull'0.t_nonnull 't) (phantom:PhantomData'0.t_phantomdata 't) (cap:usize) (alloc:ManuallyDrop'0.t_manuallydrop 'a) (ptr:NonNull'0.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      <> input}
      {false}
      any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C06KnightsTour_Impl1_CountDegree
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 71 24 71 25
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 74 17 74 24
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 73 20 73 44
  
  let%span s06_knights_tour6 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour7 = "../06_knights_tour.rs" 77 25 77 26
  
  let%span s06_knights_tour8 = "../06_knights_tour.rs" 68 15 68 24
  
  let%span s06_knights_tour9 = "../06_knights_tour.rs" 69 15 69 32
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "" 0 0 0 0
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41
  
  let%span span17 = "../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25
  
  let%span span27 = "../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45
  
  let%span span28 = "../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10
  
  let%span span29 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span31 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span32 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span33 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span34 = "../../../../../creusot-contracts/src/std/vec.rs" 239 8 239 85
  
  let%span span35 = "../06_knights_tour.rs" 50 15 50 24
  
  let%span span36 = "../06_knights_tour.rs" 51 4 51 44
  
  let%span span37 = "../06_knights_tour.rs" 12 15 12 52
  
  let%span span38 = "../06_knights_tour.rs" 13 15 13 52
  
  let%span span39 = "../06_knights_tour.rs" 14 15 14 46
  
  let%span span40 = "../06_knights_tour.rs" 15 15 15 46
  
  let%span span41 = "../06_knights_tour.rs" 16 14 16 41
  
  let%span span42 = "../06_knights_tour.rs" 17 14 17 41
  
  let%span span43 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span44 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span45 = "../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57
  
  let%span span46 = "" 0 0 0 0
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33
  
  let%span span50 = "../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24
  
  let%span span51 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "" 0 0 0 0
  
  let%span span54 = "../06_knights_tour.rs" 93 10 93 28
  
  let%span span55 = "../06_knights_tour.rs" 94 0 94 130
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq usize) =
    [%#span10] true
  
  predicate inv'8 (_x : Seq.seq usize)
  
  axiom inv'8 : forall x : Seq.seq usize . inv'8 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span11] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'7 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span12] inv'7 self)
   -> ([%#span14] inv'8 (shallow_model'3 self))
  && ([%#span13] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'7 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span15] inv'8 (shallow_model'3 self)
  
  axiom inv'7 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'7 x = true
  
  predicate invariant'6 (self : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span10] true
  
  predicate inv'6 (_x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'6 : forall x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'6 x = true
  
  use seq.Seq
  
  predicate inv'5 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . ([%#span12] inv'5 self)
   -> ([%#span14] inv'6 (shallow_model'2 self))
  && ([%#span13] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'5 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span15] inv'6 (shallow_model'2 self)
  
  axiom inv'5 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'5 x = true
  
  use prelude.prelude.IntSize
  
  predicate invariant'4 (self : Seq.seq (isize, isize)) =
    [%#span10] true
  
  predicate inv'4 (_x : Seq.seq (isize, isize))
  
  axiom inv'4 : forall x : Seq.seq (isize, isize) . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option (isize, isize)) =
    [%#span10] true
  
  predicate inv'3 (_x : Option'0.t_option (isize, isize))
  
  axiom inv'3 : forall x : Option'0.t_option (isize, isize) . inv'3 x = true
  
  use Alloc_Vec_IntoIter_IntoIter_Type as IntoIter'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) =
    [%#span10] true
  
  predicate inv'2 (_x : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) . inv'2 x = true
  
  use seq.Seq
  
  predicate inv'1 (_x : Vec'0.t_vec (isize, isize) (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) : Seq.seq (isize, isize)
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec (isize, isize) (Global'0.t_global) . ([%#span12] inv'1 self)
   -> ([%#span14] inv'4 (shallow_model'0 self))
  && ([%#span13] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'1 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) =
    [%#span15] inv'4 (shallow_model'0 self)
  
  axiom inv'1 : forall x : Vec'0.t_vec (isize, isize) (Global'0.t_global) . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))
  
  function shallow_model'1 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) : Seq.seq (isize, isize)
  
  predicate produces'0 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) (visited : Seq.seq (isize, isize)) (rhs : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))
    
   =
    [%#span16] shallow_model'1 self = Seq.(++) visited (shallow_model'1 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) (ab : Seq.seq (isize, isize)) (b : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) (bc : Seq.seq (isize, isize)) (c : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) : ()
    
   =
    [%#span25] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global), ab : Seq.seq (isize, isize), b : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global), bc : Seq.seq (isize, isize), c : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) . ([%#span17] produces'0 a ab b)
   -> ([%#span18] produces'0 b bc c)
   -> ([%#span19] inv'0 a)
   -> ([%#span20] inv'4 ab)
   -> ([%#span21] inv'0 b)
   -> ([%#span22] inv'4 bc)  -> ([%#span23] inv'0 c)  -> ([%#span24] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) : () =
    [%#span28] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) . ([%#span26] inv'0 self)
   -> ([%#span27] produces'0 self (Seq.empty  : Seq.seq (isize, isize)) self)
  
  predicate invariant'0 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) =
    [%#span10] true
  
  axiom inv'0 : forall x : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) . inv'0 x = true
  
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  
  use prelude.prelude.IntSize
  
  use C06KnightsTour_Point_Type as Point'0
  
  use C06KnightsTour_Board_Type as Board'0
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_board) (p : Point'0.t_point) =
    [%#span29] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (ix : int) : Vec'0.t_vec usize (Global'0.t_global)
    
   =
    [%#span30] Seq.get (shallow_model'2 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_board) =
    [%#span31] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'2 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'3 (index_logic'1 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : isize) =
    [%#span32] true
  
  predicate resolve'1 (self : (isize, isize)) =
    [%#span33] resolve'3 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  use seq.Seq
  
  predicate resolve'2 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) =
    [%#span34] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 self)
     -> resolve'1 (Seq.get (shallow_model'1 self) i)
  
  let rec available'0 (self:Board'0.t_board) (p:Point'0.t_point) (return'  (ret:bool))= {[@expl:precondition] [%#span35] wf'0 self}
    any [ return' (result:bool)-> {[%#span36] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec mov'0 (self:Point'0.t_point) (p:(isize, isize)) (return'  (ret:Point'0.t_point))= {[@expl:precondition] [%#span40] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [%#span39] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [%#span38] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    {[@expl:precondition] [%#span37] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    any
    [ return' (result:Point'0.t_point)-> {[%#span42] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a)}
      {[%#span41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) =
    [%#span43] self.final = self.current
  
  function shallow_model'4 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) : Seq.seq (isize, isize)
    
   =
    [%#span44] shallow_model'1 self.current
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) =
    [%#span45] resolve'0 self /\ shallow_model'4 self = (Seq.empty  : Seq.seq (isize, isize))
  
  let rec next'0 (self:borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) (return'  (ret:Option'0.t_option (isize, isize)))= {[@expl:precondition] [%#span46] inv'2 self}
    any
    [ return' (result:Option'0.t_option (isize, isize))-> {[%#span48] inv'3 result}
      {[%#span47] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) (res : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))
    
   =
    [%#span49] shallow_model'0 self = shallow_model'1 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) =
    [%#span50] true
  
  let rec into_iter'0 (self:Vec'0.t_vec (isize, isize) (Global'0.t_global)) (return'  (ret:IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)))= {[@expl:precondition] [%#span52] inv'1 self}
    {[@expl:precondition] [%#span51] into_iter_pre'0 self}
    any
    [ return' (result:IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))-> {[%#span53] inv'0 result}
      {[%#span51] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) (ix : int) : (isize, isize)
    
   =
    [%#span30] Seq.get (shallow_model'0 self) ix
  
  let rec moves'0 (_1:()) (return'  (ret:Vec'0.t_vec (isize, isize) (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec (isize, isize) (Global'0.t_global))-> {[%#span55] forall i : int . 0 <= i /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'0 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'0 result i in a) <= 2}
      {[%#span54] Seq.length (shallow_model'0 result) = 8}
      (! return' {result}) ]
    
  
  let rec count_degree (self:Board'0.t_board) (p:Point'0.t_point) (return'  (ret:usize))= {[%#s06_knights_tour9] in_bounds'0 self p}
    {[%#s06_knights_tour8] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [%#s06_knights_tour0] (0 : usize) ] s1
      | s1 = moves'0 {[%#s06_knights_tour1] ()}
          (fun (_ret':Vec'0.t_vec (isize, isize) (Global'0.t_global)) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_8}
          (fun (_ret':IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour2] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &produced <- [%#s06_knights_tour3] Snapshot.new (Seq.empty  : Seq.seq (isize, isize)) ] s1 | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#s06_knights_tour5] UIntSize.to_int count
        <= Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#s06_knights_tour4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour4] inv'0 iter}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut <IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)> {iter}
              (fun (_ret':borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <- _19.final ] 
                s1)
          | s1 = Borrow.borrow_final
              <IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)>
              {_19.current}
              {Borrow.get_id _19}
              (fun (_ret':borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = _18.final ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_option (isize, isize)) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Option'0.C_None } (! bb12) | br1 (a:(isize, isize))-> {_17 = Option'0.C_Some a} (! bb11) ]
             ]
          
        | bb11 = bb13
        | bb13 = s0
          [ s0 = Option'0.some <(isize, isize)> {_17}
              (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- [%#s06_knights_tour6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (isize, isize)))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 =  [ &m <- __creusot_proc_iter_elem ] s2
          | s2 = -{resolve'1 __creusot_proc_iter_elem}- s3
          | s3 =  [ &_28 <- m ] s4
          | s4 = mov'0 {p} {_28} (fun (_ret':Point'0.t_point) ->  [ &next <- _ret' ] s5)
          | s5 = bb15 ]
          
        | bb15 = s0
          [ s0 = -{resolve'1 m}- s1
          | s1 = available'0 {self} {next} (fun (_ret':bool) ->  [ &_29 <- _ret' ] s2)
          | s2 = bb16 ]
          
        | bb16 = any [ br0 -> {_29 = false} (! bb18) | br1 -> {_29} (! bb17) ] 
        | bb17 = s0
          [ s0 = UIntSize.add {count} {[%#s06_knights_tour7] (1 : usize)} (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 = bb19 ]
          
        | bb18 = bb19
        | bb19 = bb7 ]
         ]
      
    | bb12 = s0 [ s0 = -{resolve'2 iter}- s1 | s1 = bb20 ] 
    | bb20 = s0 [ s0 =  [ &_0 <- count ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : Board'0.t_board = self
    | & p : Point'0.t_point = p
    | & count : usize = any_l ()
    | & iter : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) = any_l ()
    | & _8 : Vec'0.t_vec (isize, isize) (Global'0.t_global) = any_l ()
    | & iter_old : Snapshot.snap_ty (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & _17 : Option'0.t_option (isize, isize) = any_l ()
    | & _18 : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) = any_l ()
    | & _19 : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) = any_l ()
    | & __creusot_proc_iter_elem : (isize, isize) = any_l ()
    | & _22 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & m : (isize, isize) = any_l ()
    | & next : Point'0.t_point = any_l ()
    | & _28 : (isize, isize) = any_l ()
    | & _29 : bool = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C06KnightsTour_Impl1_Set
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 83 15 83 24
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 84 15 84 32
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 85 14 85 26
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 86 14 86 42
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span10 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span12 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span13 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span14 = "../../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span17 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span25 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq usize) =
    [%#span4] true
  
  predicate inv'7 (_x : Seq.seq usize)
  
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'6 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span6] inv'6 self)
   -> ([%#span8] inv'7 (shallow_model'3 self))
  && ([%#span7] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'6 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span9] inv'7 (shallow_model'3 self)
  
  axiom inv'6 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'6 x = true
  
  predicate invariant'5 (self : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span4] true
  
  predicate inv'5 (_x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'5 : forall x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'5 x = true
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . ([%#span6] inv'4 self)
   -> ([%#span8] inv'5 (shallow_model'1 self))
  && ([%#span7] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span9] inv'5 (shallow_model'1 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed usize) =
    [%#span4] true
  
  predicate inv'3 (_x : borrowed usize)
  
  axiom inv'3 : forall x : borrowed usize . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span4] true
  
  predicate inv'2 (_x : borrowed (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec usize (Global'0.t_global)) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span4] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) =
    [%#span4] true
  
  predicate inv'0 (_x : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)))
  
  axiom inv'0 : forall x : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) . inv'0 x
  = true
  
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  
  use prelude.prelude.IntSize
  
  use C06KnightsTour_Point_Type as Point'0
  
  use C06KnightsTour_Board_Type as Board'0
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_board) (p : Point'0.t_point) =
    [%#span10] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (ix : int) : Vec'0.t_vec usize (Global'0.t_global)
    
   =
    [%#span11] Seq.get (shallow_model'1 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_board) =
    [%#span12] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'1 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'3 (index_logic'0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Board'0.t_board)) =
    [%#span13] self.final = self.current
  
  predicate resolve'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span13] self.final = self.current
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span13] self.final = self.current
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span14] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span15] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span16] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'2 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) : Seq.seq usize =
    [%#span17] shallow_model'3 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span20] inv'1 index}
    {[@expl:precondition] [%#span19] inv'2 self}
    {[@expl:precondition] [%#span18] in_bounds'2 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span25] inv'3 result}
      {[%#span24] Seq.length (shallow_model'3 self.final) = Seq.length (shallow_model'2 self)}
      {[%#span23] resolve_elswhere'1 index (shallow_model'2 self) (shallow_model'3 self.final)}
      {[%#span22] has_value'1 index (shallow_model'3 self.final) result.final}
      {[%#span21] has_value'1 index (shallow_model'2 self) result.current}
      (! return' {result}) ]
    
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (fin : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
    
   =
    [%#span14] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (out : Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span15] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span16] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span17] shallow_model'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_vec usize (Global'0.t_global))))= {[@expl:precondition] [%#span20] inv'1 index}
    {[@expl:precondition] [%#span19] inv'0 self}
    {[@expl:precondition] [%#span18] in_bounds'1 index (shallow_model'0 self)}
    any
    [ return' (result:borrowed (Vec'0.t_vec usize (Global'0.t_global)))-> {[%#span25] inv'2 result}
      {[%#span24] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'0 self)}
      {[%#span23] resolve_elswhere'0 index (shallow_model'0 self) (shallow_model'1 self.final)}
      {[%#span22] has_value'0 index (shallow_model'1 self.final) result.final}
      {[%#span21] has_value'0 index (shallow_model'0 self) result.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.IntSize
  
  let rec set (self:borrowed (Board'0.t_board)) (p:Point'0.t_point) (v:usize) (return'  (ret:()))= {[%#s06_knights_tour1] in_bounds'0 self.current p}
    {[%#s06_knights_tour0] wf'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Board'0.t_board {self.current}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
            Borrow.borrow_final
              <Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)>
              {rfield'0}
              {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) ->
                 [ &_12 <- _ret' ] 
                Board'0.t_board {self.current}
                  (fun (l_size'0:usize) (l_field'0:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
                     [ &self <- { self with current = Board'0.C_Board l_size'0 _12.final ; } ] 
                    s1)))
      | s1 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_13 <- _res ] s2))
      | s2 = index_mut'0 {_12} {_13}
          (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec usize (Global'0.t_global)> {_11.current} {Borrow.get_id _11}
          (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
             [ &_10 <- _ret' ] 
             [ &_11 <- { _11 with current = _10.final ; } ] 
            s1)
      | s1 = Point'0.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_15 <- _res ] s2))
      | s2 = index_mut'1 {_10} {_15} (fun (_ret':borrowed usize) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'1 _11}- s3
      | s3 = -{resolve'2 self}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Board'0.t_board) = self
    | & p : Point'0.t_point = p
    | & v : usize = v
    | & _9 : borrowed usize = any_l ()
    | & _10 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & _11 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & _12 : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) = any_l ()
    | & _13 : usize = any_l ()
    | & _15 : usize = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s06_knights_tour3] C06KnightsTour_Board_Type.board_size self.final
      = C06KnightsTour_Board_Type.board_size self.current}
      {[@expl:postcondition] [%#s06_knights_tour2] wf'0 self.final}
      (! return' {result}) ]
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.prelude.Borrow
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_iter 't =
    | C_Iter (NonNull'0.t_nonnull 't) opaque_ptr (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_iter < 't > (input:t_iter 't) (ret  (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module C06KnightsTour_Min
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 109 0 110 62
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span14 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span15 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span16 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41
  
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82
  
  let%span span20 = "../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35
  
  let%span span21 = "../../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32
  
  let%span span24 = "../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33
  
  let%span span25 = "../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63
  
  let%span span26 = "../../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42
  
  let%span span27 = "../../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10
  
  let%span span28 = "../../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45
  
  let%span span29 = "../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10
  
  let%span span30 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span31 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span36 = "../../../../../creusot-contracts/src/std/vec.rs" 205 20 205 34
  
  let%span span37 = "../../../../../creusot-contracts/src/std/vec.rs" 199 20 199 24
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span39 = "" 0 0 0 0
  
  use C06KnightsTour_Point_Type as Point'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Slice
  
  predicate invariant'7 (self : slice (usize, Point'0.t_point)) =
    [%#span5] true
  
  predicate inv'7 (_x : slice (usize, Point'0.t_point))
  
  axiom inv'7 : forall x : slice (usize, Point'0.t_point) . inv'7 x = true
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq (usize, Point'0.t_point)) =
    [%#span5] true
  
  predicate inv'6 (_x : Seq.seq (usize, Point'0.t_point))
  
  axiom inv'6 : forall x : Seq.seq (usize, Point'0.t_point) . inv'6 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'5 (_x : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) : Seq.seq (usize, Point'0.t_point)
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) . ([%#span7] inv'5 self)
   -> ([%#span9] inv'6 (shallow_model'2 self))
  && ([%#span8] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'5 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) =
    [%#span10] inv'6 (shallow_model'2 self)
  
  axiom inv'5 : forall x : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) . inv'5 x = true
  
  predicate invariant'4 (self : slice (usize, Point'0.t_point)) =
    [%#span5] true
  
  predicate inv'4 (_x : slice (usize, Point'0.t_point))
  
  axiom inv'4 : forall x : slice (usize, Point'0.t_point) . inv'4 x = true
  
  predicate invariant'3 (self : Seq.seq (usize, Point'0.t_point)) =
    [%#span5] true
  
  predicate inv'3 (_x : Seq.seq (usize, Point'0.t_point))
  
  axiom inv'3 : forall x : Seq.seq (usize, Point'0.t_point) . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option (usize, Point'0.t_point)) =
    [%#span5] true
  
  predicate inv'2 (_x : Option'0.t_option (usize, Point'0.t_point))
  
  axiom inv'2 : forall x : Option'0.t_option (usize, Point'0.t_point) . inv'2 x = true
  
  predicate invariant'1 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) =
    [%#span5] true
  
  predicate inv'1 (_x : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))
  
  axiom inv'1 : forall x : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  use Core_Slice_Iter_Iter_Type as Iter'0
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  function shallow_model'5 (self : slice (usize, Point'0.t_point)) : Seq.seq (usize, Point'0.t_point)
  
  axiom shallow_model'5_spec : forall self : slice (usize, Point'0.t_point) . ([%#span11] inv'7 self)
   -> ([%#span14] inv'6 (shallow_model'5 self))
  && ([%#span13] shallow_model'5 self = Slice.id self)
  && ([%#span12] Seq.length (shallow_model'5 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice (usize, Point'0.t_point)) (ix : int) : (usize, Point'0.t_point)
   =
    [%#span15] Seq.get (shallow_model'5 self) ix
  
  use seq.Seq
  
  function shallow_model'3 (self : slice (usize, Point'0.t_point)) : Seq.seq (usize, Point'0.t_point) =
    [%#span16] shallow_model'5 self
  
  use seq.Seq
  
  function to_ref_seq'0 (self : slice (usize, Point'0.t_point)) : Seq.seq (usize, Point'0.t_point)
  
  axiom to_ref_seq'0_spec : forall self : slice (usize, Point'0.t_point) . ([%#span17] inv'4 self)
   -> ([%#span20] inv'3 (to_ref_seq'0 self))
  && ([%#span19] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([%#span18] Seq.length (to_ref_seq'0 self) = Seq.length (shallow_model'3 self))
  
  function shallow_model'1 (self : Iter'0.t_iter (usize, Point'0.t_point)) : slice (usize, Point'0.t_point)
  
  predicate produces'0 (self : Iter'0.t_iter (usize, Point'0.t_point)) (visited : Seq.seq (usize, Point'0.t_point)) (tl : Iter'0.t_iter (usize, Point'0.t_point))
    
   =
    [%#span21] to_ref_seq'0 (shallow_model'1 self) = Seq.(++) visited (to_ref_seq'0 (shallow_model'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_iter (usize, Point'0.t_point)) (ab : Seq.seq (usize, Point'0.t_point)) (b : Iter'0.t_iter (usize, Point'0.t_point)) (bc : Seq.seq (usize, Point'0.t_point)) (c : Iter'0.t_iter (usize, Point'0.t_point)) : ()
    
   =
    [%#span27] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_iter (usize, Point'0.t_point), ab : Seq.seq (usize, Point'0.t_point), b : Iter'0.t_iter (usize, Point'0.t_point), bc : Seq.seq (usize, Point'0.t_point), c : Iter'0.t_iter (usize, Point'0.t_point) . ([%#span22] produces'0 a ab b)
   -> ([%#span23] produces'0 b bc c)
   -> ([%#span24] inv'3 ab)  -> ([%#span25] inv'3 bc)  -> ([%#span26] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Iter'0.t_iter (usize, Point'0.t_point)) : () =
    [%#span29] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_iter (usize, Point'0.t_point) . [%#span28] produces'0 self (Seq.empty  : Seq.seq (usize, Point'0.t_point)) self
  
  predicate invariant'0 (self : Iter'0.t_iter (usize, Point'0.t_point)) =
    [%#span5] true
  
  predicate inv'0 (_x : Iter'0.t_iter (usize, Point'0.t_point))
  
  axiom inv'0 : forall x : Iter'0.t_iter (usize, Point'0.t_point) . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (Iter'0.t_iter (usize, Point'0.t_point))) =
    [%#span30] self.final = self.current
  
  use seq.Seq
  
  function shallow_model'4 (self : borrowed (Iter'0.t_iter (usize, Point'0.t_point))) : slice (usize, Point'0.t_point) =
    [%#span31] shallow_model'1 self.current
  
  predicate completed'0 (self : borrowed (Iter'0.t_iter (usize, Point'0.t_point))) =
    [%#span32] resolve'0 self
    /\ shallow_model'5 (shallow_model'4 self) = (Seq.empty  : Seq.seq (usize, Point'0.t_point))
  
  let rec next'0 (self:borrowed (Iter'0.t_iter (usize, Point'0.t_point))) (return'  (ret:Option'0.t_option (usize, Point'0.t_point)))= any
    [ return' (result:Option'0.t_option (usize, Point'0.t_point))-> {[%#span34] inv'2 result}
      {[%#span33] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) (ix : int) : (usize, Point'0.t_point)
    
   =
    [%#span35] Seq.get (shallow_model'2 self) ix
  
  function shallow_model'0 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) : Seq.seq (usize, Point'0.t_point)
    
   =
    [%#span16] shallow_model'2 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) (res : Iter'0.t_iter (usize, Point'0.t_point))
    
   =
    [%#span36] shallow_model'0 self = shallow_model'3 (shallow_model'1 res)
  
  predicate into_iter_pre'0 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) =
    [%#span37] true
  
  let rec into_iter'0 (self:Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) (return'  (ret:Iter'0.t_iter (usize, Point'0.t_point)))= {[@expl:precondition] [%#span39] inv'1 self}
    {[@expl:precondition] [%#span38] into_iter_pre'0 self}
    any
    [ return' (result:Iter'0.t_iter (usize, Point'0.t_point))-> {[%#span38] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec min (v:Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) (return'  (ret:Option'0.t_option (usize, Point'0.t_point)))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &min <- Option'0.C_None ] s1
      | s1 = into_iter'0 {v} (fun (_ret':Iter'0.t_iter (usize, Point'0.t_point)) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour0] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &produced <- [%#s06_knights_tour1] Snapshot.new (Seq.empty  : Seq.seq (usize, Point'0.t_point)) ] s1
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#s06_knights_tour2] forall r : (usize, Point'0.t_point) . min
        = Option'0.C_Some r
         -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v) /\ index_logic'0 v i = r)}
        {[@expl:loop invariant] [%#s06_knights_tour2] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour2] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_iter (usize, Point'0.t_point)> {iter}
              (fun (_ret':borrowed (Iter'0.t_iter (usize, Point'0.t_point))) ->
                 [ &_17 <- _ret' ] 
                 [ &iter <- _17.final ] 
                s1)
          | s1 = Borrow.borrow_final <Iter'0.t_iter (usize, Point'0.t_point)> {_17.current} {Borrow.get_id _17}
              (fun (_ret':borrowed (Iter'0.t_iter (usize, Point'0.t_point))) ->
                 [ &_16 <- _ret' ] 
                 [ &_17 <- { _17 with current = _16.final ; } ] 
                s2)
          | s2 = next'0 {_16} (fun (_ret':Option'0.t_option (usize, Point'0.t_point)) ->  [ &_15 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _17}- s1
          | s1 = any
            [ br0 -> {_15 = Option'0.C_None } (! bb9)
            | br1 (a:(usize, Point'0.t_point))-> {_15 = Option'0.C_Some a} (! bb8) ]
             ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <(usize, Point'0.t_point)> {_15}
              (fun (r0'0:(usize, Point'0.t_point)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_20 <- [%#s06_knights_tour3] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _20 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (usize, Point'0.t_point)))-> (!  [ &_20 <- _any ] s1) ] )
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = any
            [ br0 -> {min = Option'0.C_None } (! bb13)
            | br1 (a:(usize, Point'0.t_point))-> {min = Option'0.C_Some a} (! bb14) ]
             ]
          
        | bb14 = s0
          [ s0 = Option'0.some <(usize, Point'0.t_point)> {min}
              (fun (r0'0:(usize, Point'0.t_point)) ->  [ &m <- r0'0 ] s1)
          | s1 = UIntSize.lt {let (r'0, _) = x in r'0} {let (r'1, _) = m in r'1}
              (fun (_ret':bool) ->  [ &_28 <- _ret' ] s2)
          | s2 = any [ br0 -> {_28 = false} (! bb17) | br1 -> {_28} (! bb16) ]  ]
          
        | bb16 = s0
          [ s0 =  [ &_31 <- Option'0.C_Some x ] s1
          | s1 =  [ &min <- _31 ] 
            (any [ any_ (_any:Option'0.t_option (usize, Point'0.t_point))-> (!  [ &_31 <- _any ] s2) ] )
          | s2 = bb18 ]
          
        | bb17 = bb18
        | bb18 = bb19
        | bb13 = bb15
        | bb15 = s0
          [ s0 =  [ &_25 <- Option'0.C_Some x ] s1
          | s1 =  [ &min <- _25 ] 
            (any [ any_ (_any:Option'0.t_option (usize, Point'0.t_point))-> (!  [ &_25 <- _any ] s2) ] )
          | s2 = bb19 ]
          
        | bb19 = bb4 ]
         ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- min ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_option (usize, Point'0.t_point) = any_l ()
    | & v : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) = v
    | & min : Option'0.t_option (usize, Point'0.t_point) = any_l ()
    | & iter : Iter'0.t_iter (usize, Point'0.t_point) = any_l ()
    | & iter_old : Snapshot.snap_ty (Iter'0.t_iter (usize, Point'0.t_point)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (usize, Point'0.t_point)) = any_l ()
    | & _15 : Option'0.t_option (usize, Point'0.t_point) = any_l ()
    | & _16 : borrowed (Iter'0.t_iter (usize, Point'0.t_point)) = any_l ()
    | & _17 : borrowed (Iter'0.t_iter (usize, Point'0.t_point)) = any_l ()
    | & __creusot_proc_iter_elem : (usize, Point'0.t_point) = any_l ()
    | & _20 : Snapshot.snap_ty (Seq.seq (usize, Point'0.t_point)) = any_l ()
    | & x : (usize, Point'0.t_point) = any_l ()
    | & _25 : Option'0.t_option (usize, Point'0.t_point) = any_l ()
    | & m : (usize, Point'0.t_point) = any_l ()
    | & _28 : bool = any_l ()
    | & _31 : Option'0.t_option (usize, Point'0.t_point) = any_l () ]
    
    [ return' (result:Option'0.t_option (usize, Point'0.t_point))-> {[@expl:postcondition] [%#s06_knights_tour4] forall r : (usize, Point'0.t_point) . result
      = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
end
module C06KnightsTour_DumbNonlinearArith_Impl
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 129 11 129 22
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 130 10 130 30
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  constant a  : usize
  
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
  
  goal vc_dumb_nonlinear_arith : ([%#s06_knights_tour0] UIntSize.to_int a <= 1000)
   -> ([%#s06_knights_tour1] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module C06KnightsTour_KnightsTour
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 139 17 139 18
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 141 4 141 44
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 145 16 145 17
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour6 = "../06_knights_tour.rs" 142 16 142 34
  
  let%span s06_knights_tour7 = "../06_knights_tour.rs" 143 16 143 26
  
  let%span s06_knights_tour8 = "../06_knights_tour.rs" 144 16 144 34
  
  let%span s06_knights_tour9 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour10 = "../06_knights_tour.rs" 147 50 147 60
  
  let%span s06_knights_tour11 = "../06_knights_tour.rs" 150 17 150 24
  
  let%span s06_knights_tour12 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour13 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour14 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour15 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour16 = "../06_knights_tour.rs" 133 11 133 37
  
  let%span s06_knights_tour17 = "../06_knights_tour.rs" 134 11 134 19
  
  let%span s06_knights_tour18 = "../06_knights_tour.rs" 135 11 135 19
  
  let%span span19 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32
  
  let%span span27 = "../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32
  
  let%span span28 = "../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33
  
  let%span span30 = "../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44
  
  let%span span31 = "../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54
  
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65
  
  let%span span33 = "../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42
  
  let%span span34 = "../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10
  
  let%span span35 = "../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25
  
  let%span span36 = "../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45
  
  let%span span37 = "../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10
  
  let%span span38 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span42 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span44 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span45 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span46 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span48 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span49 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span50 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span51 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span52 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span53 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span54 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span55 = "../06_knights_tour.rs" 109 0 110 62
  
  let%span span56 = "../../../../../creusot-contracts/src/std/vec.rs" 239 8 239 85
  
  let%span span57 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span58 = "" 0 0 0 0
  
  let%span span59 = "" 0 0 0 0
  
  let%span span60 = "../../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span61 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span62 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span63 = "../06_knights_tour.rs" 68 15 68 24
  
  let%span span64 = "../06_knights_tour.rs" 69 15 69 32
  
  let%span span65 = "../06_knights_tour.rs" 50 15 50 24
  
  let%span span66 = "../06_knights_tour.rs" 51 4 51 44
  
  let%span span67 = "../06_knights_tour.rs" 12 15 12 52
  
  let%span span68 = "../06_knights_tour.rs" 13 15 13 52
  
  let%span span69 = "../06_knights_tour.rs" 14 15 14 46
  
  let%span span70 = "../06_knights_tour.rs" 15 15 15 46
  
  let%span span71 = "../06_knights_tour.rs" 16 14 16 41
  
  let%span span72 = "../06_knights_tour.rs" 17 14 17 41
  
  let%span span73 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span74 = "../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span77 = "" 0 0 0 0
  
  let%span span78 = "../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33
  
  let%span span79 = "../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24
  
  let%span span80 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "" 0 0 0 0
  
  let%span span83 = "../06_knights_tour.rs" 93 10 93 28
  
  let%span span84 = "../06_knights_tour.rs" 94 0 94 130
  
  let%span span85 = "../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span86 = "" 0 0 0 0
  
  let%span span87 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span88 = "" 0 0 0 0
  
  let%span span89 = "" 0 0 0 0
  
  let%span span90 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span91 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "" 0 0 0 0
  
  let%span span94 = "../06_knights_tour.rs" 129 11 129 22
  
  let%span span95 = "../06_knights_tour.rs" 130 10 130 30
  
  let%span span96 = "../06_knights_tour.rs" 128 0 128 8
  
  let%span span97 = "../06_knights_tour.rs" 83 15 83 24
  
  let%span span98 = "../06_knights_tour.rs" 84 15 84 32
  
  let%span span99 = "../06_knights_tour.rs" 85 14 85 26
  
  let%span span100 = "../06_knights_tour.rs" 86 14 86 42
  
  let%span span101 = "../06_knights_tour.rs" 37 15 37 28
  
  let%span span102 = "../06_knights_tour.rs" 38 14 38 33
  
  let%span span103 = "../06_knights_tour.rs" 39 14 39 25
  
  use prelude.prelude.IntSize
  
  use seq.Seq
  
  predicate invariant'15 (self : Seq.seq (isize, isize)) =
    [%#span19] true
  
  predicate inv'15 (_x : Seq.seq (isize, isize))
  
  axiom inv'15 : forall x : Seq.seq (isize, isize) . inv'15 x = true
  
  use prelude.prelude.UIntSize
  
  predicate inv'11 (_x : Seq.seq usize)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span20] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'14 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span21] inv'14 self)
   -> ([%#span23] inv'11 (shallow_model'2 self))
  && ([%#span22] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'14 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span24] inv'11 (shallow_model'2 self)
  
  axiom inv'14 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'14 x = true
  
  predicate invariant'13 (self : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span19] true
  
  predicate inv'13 (_x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'13 : forall x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'13 x = true
  
  use seq.Seq
  
  predicate inv'12 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . ([%#span21] inv'12 self)
   -> ([%#span23] inv'13 (shallow_model'1 self))
  && ([%#span22] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'12 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span24] inv'13 (shallow_model'1 self)
  
  axiom inv'12 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'12 x = true
  
  predicate invariant'11 (self : Seq.seq usize) =
    [%#span19] true
  
  axiom inv'11 : forall x : Seq.seq usize . inv'11 x = true
  
  use C06KnightsTour_Point_Type as Point'0
  
  predicate invariant'10 (self : (usize, Point'0.t_point)) =
    [%#span19] true
  
  predicate inv'10 (_x : (usize, Point'0.t_point))
  
  axiom inv'10 : forall x : (usize, Point'0.t_point) . inv'10 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))) =
    [%#span19] true
  
  predicate inv'9 (_x : borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)))
  
  axiom inv'9 : forall x : borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) . inv'9 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'8 (self : Option'0.t_option (isize, isize)) =
    [%#span19] true
  
  predicate inv'8 (_x : Option'0.t_option (isize, isize))
  
  axiom inv'8 : forall x : Option'0.t_option (isize, isize) . inv'8 x = true
  
  use Alloc_Vec_IntoIter_IntoIter_Type as IntoIter'0
  
  predicate invariant'7 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) =
    [%#span19] true
  
  predicate inv'7 (_x : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)))
  
  axiom inv'7 : forall x : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) . inv'7 x = true
  
  predicate invariant'6 (self : Seq.seq (usize, Point'0.t_point)) =
    [%#span19] true
  
  predicate inv'6 (_x : Seq.seq (usize, Point'0.t_point))
  
  axiom inv'6 : forall x : Seq.seq (usize, Point'0.t_point) . inv'6 x = true
  
  use seq.Seq
  
  predicate inv'5 (_x : Vec'0.t_vec (isize, isize) (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) : Seq.seq (isize, isize)
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec (isize, isize) (Global'0.t_global) . ([%#span21] inv'5 self)
   -> ([%#span23] inv'15 (shallow_model'3 self))
  && ([%#span22] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'5 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) =
    [%#span24] inv'15 (shallow_model'3 self)
  
  axiom inv'5 : forall x : Vec'0.t_vec (isize, isize) (Global'0.t_global) . inv'5 x = true
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) : Seq.seq (usize, Point'0.t_point)
    
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) . ([%#span21] inv'4 self)
   -> ([%#span23] inv'6 (shallow_model'0 self))
  && ([%#span22] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) =
    [%#span24] inv'6 (shallow_model'0 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) . inv'4 x = true
  
  predicate invariant'3 (self : Option'0.t_option usize) =
    [%#span19] true
  
  predicate inv'3 (_x : Option'0.t_option usize)
  
  axiom inv'3 : forall x : Option'0.t_option usize . inv'3 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  predicate invariant'2 (self : borrowed (Range'0.t_range usize)) =
    [%#span19] true
  
  predicate inv'2 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'2 : forall x : borrowed (Range'0.t_range usize) . inv'2 x = true
  
  use seq.Seq
  
  predicate inv'1 (_x : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))
  
  function shallow_model'4 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) : Seq.seq (isize, isize)
  
  predicate produces'1 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) (visited : Seq.seq (isize, isize)) (rhs : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))
    
   =
    [%#span25] shallow_model'4 self = Seq.(++) visited (shallow_model'4 rhs)
  
  function produces_trans'1 (a : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) (ab : Seq.seq (isize, isize)) (b : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) (bc : Seq.seq (isize, isize)) (c : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) : ()
    
   =
    [%#span34] ()
  
  axiom produces_trans'1_spec : forall a : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global), ab : Seq.seq (isize, isize), b : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global), bc : Seq.seq (isize, isize), c : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) . ([%#span26] produces'1 a ab b)
   -> ([%#span27] produces'1 b bc c)
   -> ([%#span28] inv'1 a)
   -> ([%#span29] inv'15 ab)
   -> ([%#span30] inv'1 b)
   -> ([%#span31] inv'15 bc)  -> ([%#span32] inv'1 c)  -> ([%#span33] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) : () =
    [%#span37] ()
  
  axiom produces_refl'1_spec : forall self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) . ([%#span35] inv'1 self)
   -> ([%#span36] produces'1 self (Seq.empty  : Seq.seq (isize, isize)) self)
  
  predicate invariant'1 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) =
    [%#span19] true
  
  axiom inv'1 : forall x : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#span38] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq.seq usize) (o : Range'0.t_range usize) =
    [%#span39] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq.seq usize) (b : Range'0.t_range usize) (bc : Seq.seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq.seq usize, b : Range'0.t_range usize, bc : Seq.seq usize, c : Range'0.t_range usize . ([%#span40] produces'0 a ab b)
   -> ([%#span41] produces'0 b bc c)
   -> ([%#span42] inv'0 a)
   -> ([%#span43] inv'11 ab)
   -> ([%#span44] inv'0 b)
   -> ([%#span45] inv'11 bc)  -> ([%#span46] inv'0 c)  -> ([%#span47] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span48] inv'0 self)
   -> ([%#span49] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'0 (self : Range'0.t_range usize) =
    [%#span19] true
  
  axiom inv'0 : forall x : Range'0.t_range usize . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use C06KnightsTour_Board_Type as Board'0
  
  predicate resolve'8 (self : Point'0.t_point) =
    [%#span50] true
  
  predicate resolve'7 (self : usize) =
    [%#span50] true
  
  predicate resolve'6 (self : (usize, Point'0.t_point)) =
    [%#span51] resolve'7 (let (a, _) = self in a) /\ resolve'8 (let (_, a) = self in a)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) (ix : int) : (usize, Point'0.t_point)
    
   =
    [%#span52] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'4 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) =
    [%#span53] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'6 (index_logic'0 self i)
  
  function shallow_model'6 (self : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) : Seq.seq (usize, Point'0.t_point)
    
   =
    [%#span54] shallow_model'0 self
  
  let rec min'0 (v:Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) (return'  (ret:Option'0.t_option (usize, Point'0.t_point)))= any
    [ return' (result:Option'0.t_option (usize, Point'0.t_point))-> {[%#span55] forall r : (usize, Point'0.t_point) . result
      = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'6 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : isize) =
    [%#span50] true
  
  predicate resolve'2 (self : (isize, isize)) =
    [%#span51] resolve'5 (let (a, _) = self in a) /\ resolve'5 (let (_, a) = self in a)
  
  use seq.Seq
  
  predicate resolve'3 (self : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) =
    [%#span56] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'4 self)
     -> resolve'2 (Seq.get (shallow_model'4 self) i)
  
  use seq.Seq
  
  function shallow_model'5 (self : borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))) : Seq.seq (usize, Point'0.t_point)
    
   =
    [%#span57] shallow_model'0 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))) (value:(usize, Point'0.t_point)) (return'  (ret:()))= {[@expl:precondition] [%#span59] inv'10 value}
    {[@expl:precondition] [%#span58] inv'9 self}
    any
    [ return' (result:())-> {[%#span60] shallow_model'0 self.final = Seq.snoc (shallow_model'5 self) value}
      (! return' {result}) ]
    
  
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  
  use prelude.prelude.IntSize
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_board) (p : Point'0.t_point) =
    [%#span61] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (ix : int) : Vec'0.t_vec usize (Global'0.t_global)
    
   =
    [%#span52] Seq.get (shallow_model'1 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_board) =
    [%#span62] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'1 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'2 (index_logic'1 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  
  let rec count_degree'0 (self:Board'0.t_board) (p:Point'0.t_point) (return'  (ret:usize))= {[@expl:precondition] [%#span64] in_bounds'0 self p}
    {[@expl:precondition] [%#span63] wf'0 self}
    any [ return' (result:usize)-> (! return' {result}) ] 
  
  let rec available'0 (self:Board'0.t_board) (p:Point'0.t_point) (return'  (ret:bool))= {[@expl:precondition] [%#span65] wf'0 self}
    any [ return' (result:bool)-> {[%#span66] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec mov'0 (self:Point'0.t_point) (p:(isize, isize)) (return'  (ret:Point'0.t_point))= {[@expl:precondition] [%#span70] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [%#span69] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [%#span68] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    {[@expl:precondition] [%#span67] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    any
    [ return' (result:Point'0.t_point)-> {[%#span72] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a)}
      {[%#span71] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) =
    [%#span73] self.final = self.current
  
  function shallow_model'7 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) : Seq.seq (isize, isize)
    
   =
    [%#span57] shallow_model'4 self.current
  
  predicate completed'1 (self : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) =
    [%#span74] resolve'1 self /\ shallow_model'7 self = (Seq.empty  : Seq.seq (isize, isize))
  
  let rec next'1 (self:borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) (return'  (ret:Option'0.t_option (isize, isize)))= {[@expl:precondition] [%#span75] inv'7 self}
    any
    [ return' (result:Option'0.t_option (isize, isize))-> {[%#span77] inv'8 result}
      {[%#span76] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'1 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) (res : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))
    
   =
    [%#span78] shallow_model'3 self = shallow_model'4 res
  
  predicate into_iter_pre'1 (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) =
    [%#span79] true
  
  let rec into_iter'1 (self:Vec'0.t_vec (isize, isize) (Global'0.t_global)) (return'  (ret:IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)))= {[@expl:precondition] [%#span81] inv'5 self}
    {[@expl:precondition] [%#span80] into_iter_pre'1 self}
    any
    [ return' (result:IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))-> {[%#span82] inv'1 result}
      {[%#span80] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_vec (isize, isize) (Global'0.t_global)) (ix : int) : (isize, isize)
    
   =
    [%#span52] Seq.get (shallow_model'3 self) ix
  
  let rec moves'0 (_1:()) (return'  (ret:Vec'0.t_vec (isize, isize) (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec (isize, isize) (Global'0.t_global))-> {[%#span84] forall i : int . 0 <= i /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'2 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'2 result i in a) <= 2}
      {[%#span83] Seq.length (shallow_model'3 result) = 8}
      (! return' {result}) ]
    
  
  let rec new'1 (_1:()) (return'  (ret:Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))-> {[%#span86] inv'4 result}
      {[%#span85] Seq.length (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span73] self.final = self.current
  
  predicate completed'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span87] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self.current)
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span88] inv'2 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span89] inv'3 result}
      {[%#span76] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span90] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span91] true
  
  let rec into_iter'0 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span92] inv'0 self}
    {[@expl:precondition] [%#span80] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span93] inv'0 result}
      {[%#span80] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function dumb_nonlinear_arith'0 [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : () =
    [%#span96] ()
  
  axiom dumb_nonlinear_arith'0_spec : forall a : usize . ([%#span94] UIntSize.to_int a <= 1000)
   -> ([%#span95] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
  
  let rec set'0 (self:borrowed (Board'0.t_board)) (p:Point'0.t_point) (v:usize) (return'  (ret:()))= {[@expl:precondition] [%#span98] in_bounds'0 self.current p}
    {[@expl:precondition] [%#span97] wf'0 self.current}
    any
    [ return' (result:())-> {[%#span100] C06KnightsTour_Board_Type.board_size self.final
      = C06KnightsTour_Board_Type.board_size self.current}
      {[%#span99] wf'0 self.final}
      (! return' {result}) ]
    
  
  let rec new'0 (size:usize) (return'  (ret:Board'0.t_board))= {[@expl:precondition] [%#span101] UIntSize.to_int size
    <= 1000}
    any
    [ return' (result:Board'0.t_board)-> {[%#span103] wf'0 result}
      {[%#span102] C06KnightsTour_Board_Type.board_size result = size}
      (! return' {result}) ]
    
  
  let rec knights_tour (size:usize) (x:usize) (y:usize) (return'  (ret:Option'0.t_option (Board'0.t_board)))= {[%#s06_knights_tour18] y
    < size}
    {[%#s06_knights_tour17] x < size}
    {[%#s06_knights_tour16] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0 [ s0 = new'0 {size} (fun (_ret':Board'0.t_board) ->  [ &board <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = IntSize.of_int {UIntSize.to_int x} (fun (_res:isize) ->  [ &_10 <- _res ] s1)
      | s1 = IntSize.of_int {UIntSize.to_int y} (fun (_res:isize) ->  [ &_12 <- _res ] s2)
      | s2 =  [ &p <- Point'0.C_Point _10 _12 ] 
        (any [ any_ (_any:isize)-> (!  [ &_10 <- _any ] (any [ any_ (_any:isize)-> (!  [ &_12 <- _any ] s3) ] )) ] )
      | s3 = Borrow.borrow_mut <Board'0.t_board> {board}
          (fun (_ret':borrowed (Board'0.t_board)) ->  [ &_15 <- _ret' ]  [ &board <- _15.final ] s4)
      | s4 = set'0 {_15} {p} {[%#s06_knights_tour0] (1 : usize)} (fun (_ret':()) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_17 <- [%#s06_knights_tour1] Snapshot.new (dumb_nonlinear_arith'0 size) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UIntSize.mul {size} {size} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1)
      | s1 =  [ &_21 <- Range'0.C_Range ([%#s06_knights_tour2] (2 : usize)) _22 ] 
        (any [ any_ (_any:usize)-> (!  [ &_22 <- _any ] s2) ] )
      | s2 = into_iter'0 {_21} (fun (_ret':Range'0.t_range usize) ->  [ &iter <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour3] Snapshot.new iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s06_knights_tour4] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant] [%#s06_knights_tour8] in_bounds'0 board p}
        {[@expl:loop invariant] [%#s06_knights_tour7] wf'0 board}
        {[@expl:loop invariant] [%#s06_knights_tour6] C06KnightsTour_Board_Type.board_size board = size}
        {[@expl:loop invariant] [%#s06_knights_tour5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour5] inv'0 iter}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_37 <- _ret' ]  [ &iter <- _37.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> {_37.current} {Borrow.get_id _37}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_36 <- _ret' ] 
                 [ &_37 <- { _37 with current = _36.final ; } ] 
                s2)
          | s2 = next'0 {_36} (fun (_ret':Option'0.t_option usize) ->  [ &_35 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = -{resolve'0 _37}- s1
          | s1 = any
            [ br0 -> {_35 = Option'0.C_None } (! bb14) | br1 (a:usize)-> {_35 = Option'0.C_Some a} (! bb13) ]
             ]
          
        | bb13 = bb15
        | bb15 = s0
          [ s0 = Option'0.some <usize> {_35} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_40 <- [%#s06_knights_tour9] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _40 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_40 <- _any ] s1) ] )
          | s1 =  [ &step <- __creusot_proc_iter_elem ] s2
          | s2 = new'1 {[%#s06_knights_tour10] ()}
              (fun (_ret':Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) ->  [ &candidates <- _ret' ] s3)
          | s3 = bb17 ]
          
        | bb17 = s0
          [ s0 = moves'0 {[%#s06_knights_tour11] ()}
              (fun (_ret':Vec'0.t_vec (isize, isize) (Global'0.t_global)) ->  [ &_46 <- _ret' ] s1)
          | s1 = bb18 ]
          
        | bb18 = s0
          [ s0 = into_iter'1 {_46}
              (fun (_ret':IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) ->  [ &iter1 <- _ret' ] s1)
          | s1 = bb19 ]
          
        | bb19 = s0 [ s0 =  [ &iter_old1 <- [%#s06_knights_tour12] Snapshot.new iter1 ] s1 | s1 = bb20 ] 
        | bb20 = s0
          [ s0 =  [ &produced1 <- [%#s06_knights_tour13] Snapshot.new (Seq.empty  : Seq.seq (isize, isize)) ] s1
          | s1 = bb21 ]
          
        | bb21 = bb22
        | bb22 = bb23
        | bb23 = bb24
        | bb24 = bb25
        | bb25 = bb25
          [ bb25 = {[@expl:loop invariant] [%#s06_knights_tour14] forall i : int . 0 <= i
            /\ i < Seq.length (shallow_model'0 candidates)
             -> in_bounds'0 board (let (_, a) = index_logic'0 candidates i in a)}
            {[@expl:loop invariant] [%#s06_knights_tour14] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#s06_knights_tour14] inv'1 iter1}
            (! s0) [ s0 = bb26 ] 
            [ bb26 = s0
              [ s0 = Borrow.borrow_mut <IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)> {iter1}
                  (fun (_ret':borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) ->
                     [ &_56 <- _ret' ] 
                     [ &iter1 <- _56.final ] 
                    s1)
              | s1 = Borrow.borrow_final
                  <IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)>
                  {_56.current}
                  {Borrow.get_id _56}
                  (fun (_ret':borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global))) ->
                     [ &_55 <- _ret' ] 
                     [ &_56 <- { _56 with current = _55.final ; } ] 
                    s2)
              | s2 = next'1 {_55} (fun (_ret':Option'0.t_option (isize, isize)) ->  [ &_54 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = -{resolve'1 _56}- s1
              | s1 = any
                [ br0 -> {_54 = Option'0.C_None } (! bb30)
                | br1 (a:(isize, isize))-> {_54 = Option'0.C_Some a} (! bb29) ]
                 ]
              
            | bb29 = bb31
            | bb31 = s0
              [ s0 = Option'0.some <(isize, isize)> {_54}
                  (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_59 <- [%#s06_knights_tour15] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb32 ]
              
            | bb32 = s0
              [ s0 =  [ &produced1 <- _59 ] 
                (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (isize, isize)))-> (!  [ &_59 <- _any ] s1) ] )
              | s1 =  [ &m <- __creusot_proc_iter_elem1 ] s2
              | s2 = -{resolve'2 __creusot_proc_iter_elem1}- s3
              | s3 =  [ &_65 <- m ] s4
              | s4 = mov'0 {p} {_65} (fun (_ret':Point'0.t_point) ->  [ &adj <- _ret' ] s5)
              | s5 = bb33 ]
              
            | bb33 = s0
              [ s0 = -{resolve'2 m}- s1
              | s1 = available'0 {board} {adj} (fun (_ret':bool) ->  [ &_66 <- _ret' ] s2)
              | s2 = bb34 ]
              
            | bb34 = any [ br0 -> {_66 = false} (! bb38) | br1 -> {_66} (! bb35) ] 
            | bb35 = s0
              [ s0 = count_degree'0 {board} {adj} (fun (_ret':usize) ->  [ &degree <- _ret' ] s1) | s1 = bb36 ]
              
            | bb36 = s0
              [ s0 = Borrow.borrow_mut <Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)> {candidates}
                  (fun (_ret':borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global))) ->
                     [ &_73 <- _ret' ] 
                     [ &candidates <- _73.final ] 
                    s1)
              | s1 =  [ &_74 <- (degree, adj) ] s2
              | s2 = push'0 {_73} {_74} (fun (_ret':()) ->  [ &_72 <- _ret' ] s3)
              | s3 = bb37 ]
              
            | bb37 = bb39
            | bb38 = bb39
            | bb39 = bb25 ]
             ]
          
        | bb30 = s0 [ s0 = -{resolve'3 iter1}- s1 | s1 = bb40 ] 
        | bb40 = s0
          [ s0 =  [ &_81 <- candidates ] s1
          | s1 = min'0 {_81} (fun (_ret':Option'0.t_option (usize, Point'0.t_point)) ->  [ &_79 <- _ret' ] s2)
          | s2 = bb41 ]
          
        | bb41 = any
          [ br0 -> {_79 = Option'0.C_None } (! bb44)
          | br1 (a:(usize, Point'0.t_point))-> {_79 = Option'0.C_Some a} (! bb43) ]
          
        | bb43 = bb45
        | bb45 = s0
          [ s0 = Option'0.some <(usize, Point'0.t_point)> {_79}
              (fun (r0'0:(usize, Point'0.t_point)) ->  [ &adj1 <- let (_, r'0) = r0'0 in r'0 ] s1)
          | s1 = -{resolve'4 candidates}- s2
          | s2 =  [ &p <- adj1 ] s3
          | s3 = Borrow.borrow_mut <Board'0.t_board> {board}
              (fun (_ret':borrowed (Board'0.t_board)) ->  [ &_87 <- _ret' ]  [ &board <- _87.final ] s4)
          | s4 = set'0 {_87} {p} {step} (fun (_ret':()) ->  [ &_86 <- _ret' ] s5)
          | s5 = bb46 ]
          
        | bb46 = bb47
        | bb47 = bb9 ]
         ]
      
    | bb44 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = -{resolve'4 candidates}- s2 | s2 = bb50 ] 
    | bb50 = bb51
    | bb51 = bb52
    | bb14 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some board ] (any [ any_ (_any:Board'0.t_board)-> (!  [ &board <- _any ] s1) ] )
      | s1 = bb48 ]
      
    | bb48 = bb49
    | bb49 = bb52
    | bb52 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (Board'0.t_board) = any_l ()
    | & size : usize = size
    | & x : usize = x
    | & y : usize = y
    | & board : Board'0.t_board = any_l ()
    | & p : Point'0.t_point = any_l ()
    | & _10 : isize = any_l ()
    | & _12 : isize = any_l ()
    | & _14 : () = any_l ()
    | & _15 : borrowed (Board'0.t_board) = any_l ()
    | & _17 : Snapshot.snap_ty () = any_l ()
    | & iter : Range'0.t_range usize = any_l ()
    | & _21 : Range'0.t_range usize = any_l ()
    | & _22 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _35 : Option'0.t_option usize = any_l ()
    | & _36 : borrowed (Range'0.t_range usize) = any_l ()
    | & _37 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _40 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & step : usize = any_l ()
    | & candidates : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) = any_l ()
    | & iter1 : IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global) = any_l ()
    | & _46 : Vec'0.t_vec (isize, isize) (Global'0.t_global) = any_l ()
    | & iter_old1 : Snapshot.snap_ty (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & _54 : Option'0.t_option (isize, isize) = any_l ()
    | & _55 : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) = any_l ()
    | & _56 : borrowed (IntoIter'0.t_intoiter (isize, isize) (Global'0.t_global)) = any_l ()
    | & __creusot_proc_iter_elem1 : (isize, isize) = any_l ()
    | & _59 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & m : (isize, isize) = any_l ()
    | & adj : Point'0.t_point = any_l ()
    | & _65 : (isize, isize) = any_l ()
    | & _66 : bool = any_l ()
    | & degree : usize = any_l ()
    | & _72 : () = any_l ()
    | & _73 : borrowed (Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global)) = any_l ()
    | & _74 : (usize, Point'0.t_point) = any_l ()
    | & _79 : Option'0.t_option (usize, Point'0.t_point) = any_l ()
    | & _81 : Vec'0.t_vec (usize, Point'0.t_point) (Global'0.t_global) = any_l ()
    | & adj1 : Point'0.t_point = any_l ()
    | & _86 : () = any_l ()
    | & _87 : borrowed (Board'0.t_board) = any_l () ]
     [ return' (result:Option'0.t_option (Board'0.t_board))-> (! return' {result}) ] 
end
module C06KnightsTour_Impl2
  
end
module C06KnightsTour_Impl3
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 4 15 4 20
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use C06KnightsTour_Point_Type as Point'0
  
  predicate invariant'1 (self : Point'0.t_point) =
    [%#span1] true
  
  predicate inv'1 (_x : Point'0.t_point)
  
  axiom inv'1 : forall x : Point'0.t_point . inv'1 x = true
  
  predicate invariant'0 (self : Point'0.t_point) =
    [%#span1] true
  
  predicate inv'0 (_x : Point'0.t_point)
  
  axiom inv'0 : forall x : Point'0.t_point . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  goal clone'_refn : [%#s06_knights_tour0] forall self : Point'0.t_point . inv'0 self
   -> (forall result : Point'0.t_point . result = self  -> inv'1 result /\ result = self)
end
