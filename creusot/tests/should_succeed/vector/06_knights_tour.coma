
module C06KnightsTour_Point_Type
  use prelude.IntSize
  use prelude.Int
  type t_point  =
    | C_Point isize isize
    
  function any_l (_ : 'b) : 'a
  let rec t_point (input:t_point) (ret  (x:isize) (y:isize))= any
    [ good (x:isize) (y:isize)-> {C_Point x y = input} (! ret {x} {y})
    | bad (x:isize) (y:isize)-> {C_Point x y <> input} {false} any ]
    
  function point_x (self : t_point) : isize =
    match self with
      | C_Point a _ -> a
      end
  function point_y (self : t_point) : isize =
    match self with
      | C_Point _ a -> a
      end
end
module C06KnightsTour_Impl3_Clone
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.IntSize
  use prelude.Int
  let rec clone'0 (self:isize) (return'  (ret:isize))= any
    [ return' (result:isize)-> {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  let rec clone' (self:C06KnightsTour_Point_Type.t_point) (return'  (ret:C06KnightsTour_Point_Type.t_point))= (! bb0
    [ bb0 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_5 <- rx'0 ] s1)
      | s1 = clone'0 {_5} (fun (_ret':isize) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_8 <- ry'0 ] s1)
      | s1 = clone'0 {_8} (fun (_ret':isize) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_0 <- C06KnightsTour_Point_Type.C_Point _3 _6 ] 
        (any [ any_ (_any:isize)-> (!  [ &_3 <- _any ] (any [ any_ (_any:isize)-> (!  [ &_6 <- _any ] s1) ] )) ] )
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : C06KnightsTour_Point_Type.t_point = any_l () : C06KnightsTour_Point_Type.t_point
    | & self : C06KnightsTour_Point_Type.t_point = self
    | & _3 : isize = any_l () : isize
    | & _5 : isize = any_l () : isize
    | & _6 : isize = any_l () : isize
    | & _8 : isize = any_l () : isize ]
    
    [ return' (result:C06KnightsTour_Point_Type.t_point)-> {[@expl:postcondition] [#"../06_knights_tour.rs" 4 15 4 20] result
      = self}
      (! return' {result}) ]
    
end
module C06KnightsTour_Impl0_Mov
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use prelude.IntSize
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.Int
  use prelude.IntSize
  let rec mov (self:C06KnightsTour_Point_Type.t_point) (p:(isize, isize)) (return'  (ret:C06KnightsTour_Point_Type.t_point))= {[#"../06_knights_tour.rs" 15 15 15 46] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    (! bb0
    [ bb0 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {self}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.add {rx'0} {let (r'0, _) = p in r'0} (fun (_ret':isize) ->  [ &_9 <- _ret' ] s1))
      | s1 = C06KnightsTour_Point_Type.t_point {self}
          (fun (rx'1:isize) (ry'1:isize) ->
            IntSize.add {ry'1} {let (_, r'1) = p in r'1} (fun (_ret':isize) ->  [ &_12 <- _ret' ] s2))
      | s2 =  [ &_0 <- C06KnightsTour_Point_Type.C_Point _9 _12 ] 
        (any [ any_ (_any:isize)-> (!  [ &_9 <- _any ] (any [ any_ (_any:isize)-> (!  [ &_12 <- _any ] s3) ] )) ] )
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : C06KnightsTour_Point_Type.t_point = any_l () : C06KnightsTour_Point_Type.t_point
    | & self : C06KnightsTour_Point_Type.t_point = self
    | & p : (isize, isize) = p
    | & _9 : isize = any_l () : isize
    | & _12 : isize = any_l () : isize ]
    
    [ return' (result:C06KnightsTour_Point_Type.t_point)-> {[@expl:postcondition] [#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a)}
      {[@expl:postcondition] [#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C06KnightsTour_Board_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  type t_board  =
    | C_Board usize (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  function any_l (_ : 'b) : 'a
  let rec t_board (input:t_board) (ret  (size:usize) (field:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))= any
    [ good (size:usize) (field:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))-> {C_Board size field
      = input}
      (! ret {size} {field})
    | bad (size:usize) (field:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))-> {C_Board size field
      <> input}
      {false}
      any ]
    
  function board_size (self : t_board) : usize =
    match self with
      | C_Board a _ -> a
      end
  function board_field (self : t_board) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   =
    match self with
      | C_Board _ a -> a
      end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module C06KnightsTour_Impl1_New_Closure3_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  use prelude.Int
  use prelude.Borrow
  type c06knightstour_impl1_new_closure3  =
    | C06knightstour_impl1_new_closure3 usize
    
  let rec c06knightstour_impl1_new_closure3 (input:c06knightstour_impl1_new_closure3) (ret  (size:usize))= any
    [ good (size:usize)-> {C06knightstour_impl1_new_closure3 size = input} (! ret {size})
    | bad (size:usize)-> {C06knightstour_impl1_new_closure3 size <> input} {false} any ]
    
end
module C06KnightsTour_Impl1_New_Closure3
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'2 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Seq.seq usize)
  let rec inv'2 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Seq.seq usize . inv'2 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'2 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'2 (shallow_model'0 self)
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'1 x = true
  predicate invariant'0 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : usize)
  let rec inv'0 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : usize . inv'0 x = true
  use prelude.Int16
  use prelude.Snapshot
  use prelude.Borrow
  use C06KnightsTour_Impl1_New_Closure3_Type as C06KnightsTour_Impl1_New_Closure3_Type
  function field_0'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : usize
    
   =
    let C06KnightsTour_Impl1_New_Closure3_Type.C06knightstour_impl1_new_closure3 a = self in a
  let rec field_0'0 (self:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate unnest'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (_2 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    field_0'0 _2 = field_0'0 self
  use prelude.Intrinsic
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'0 elem}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78] forall i : int . 0 <= i
      /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41] Seq.length (shallow_model'0 result)
      = UIntSize.to_int n}
      (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c06knightstour_impl1_new_closure3 (_1:borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (_2:usize) (_3:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 { * _1}
          (fun (r'0:usize) ->
            from_elem'0 {[#"../06_knights_tour.rs" 44 28 44 29] (0 : usize)} {r'0}
              (fun (_ret':Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->  [ &res <- _ret' ] s2))
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_0 <- res ] 
        (any
        [ any_ (_any:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> (!  [ &res <- _any ] s1) ]
        )
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    | & _1 : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 = _1
    | & res : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) ]
    
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)}
      {[@expl:postcondition] [#"../06_knights_tour.rs" 43 26 43 48] Seq.length (shallow_model'0 result)
      = UIntSize.to_int (field_0'0 ( ^ _1))}
      (! return' {result}) ]
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  use prelude.Snapshot
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
    
  function any_l (_ : 'b) : 'a
  let rec t_mapinv < 'i > < 'b > < 'f > (input:t_mapinv 'i 'b 'f) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced <> input}
      {false}
      any ]
    
  function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i =
    match self with
      | C_MapInv a _ _ -> a
      end
  function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f =
    match self with
      | C_MapInv _ a _ -> a
      end
  function mapinv_produced (self : t_mapinv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b) =
    match self with
      | C_MapInv _ _ a -> a
      end
end
module C06KnightsTour_Impl1_New
  use prelude.UIntSize
  use seq.Seq
  use prelude.Snapshot
  predicate invariant'12 (self : Snapshot.snap_ty (Seq.seq usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'12 (self:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : Snapshot.snap_ty (Seq.seq usize))
  let rec inv'12 (_x:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : Snapshot.snap_ty (Seq.seq usize) . inv'12 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int16
  use C06KnightsTour_Impl1_New_Closure3_Type as C06KnightsTour_Impl1_New_Closure3_Type
  use prelude.Borrow
  predicate invariant'11 (self : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'11 (self:Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
  let rec inv'11 (_x:Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv'11 x
  = true
  predicate invariant'10 (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
  let rec inv'10 (_x:borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . inv'10 x
  = true
  predicate inv'7 (_x : Seq.seq usize)
  let rec inv'7 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'9 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'9 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'9 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'7 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'9 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'7 (shallow_model'1 self)
  let rec invariant'9 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  axiom inv'9 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'9 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant'8 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'8 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'8 x = true
  predicate invariant'7 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  predicate inv'4 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'4 (_x:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'6 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'6 (_x:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'6 self}
    any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'0 self}
      (! return' {result}) ]
    
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'4 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'6 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'4 (shallow_model'0 self)
  let rec invariant'6 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv'6 x
  = true
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  predicate inv'3 (_x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
  let rec inv'3 (_x:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  function field_0'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : usize
    
   =
    let C06KnightsTour_Impl1_New_Closure3_Type.C06knightstour_impl1_new_closure3 a = self in a
  let rec field_0'0 (self:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:usize))= any
    [ return' (result:usize)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate unnest'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (_2 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    field_0'0 _2 = field_0'0 self
  predicate postcondition_mut'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    (let (_2, _3) = args in Seq.length (shallow_model'1 result) = UIntSize.to_int (field_0'0 ( ^ self)))
    /\ unnest'0 ( * self) ( ^ self)
  use seq.Seq
  predicate precondition'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize)))
    
   =
    let (_2, _3) = args in true
  use prelude.Snapshot
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Int
  function deep_model'0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  predicate produces'1 [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (visited : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9] unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ)
    /\ (exists s : Seq.seq usize . inv'7 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ)
    /\ Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ)
    = Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s
    /\ (exists fs : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv'11 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i)
    /\ precondition'0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  let rec produces'1 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (visited:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (succ:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited succ} (! return' {result}) ]
    
  function produces_trans'2 (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (ab : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (bc : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : ()
    
  let rec produces_trans'2 (a:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (ab:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (b:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (bc:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (c:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv'3 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv'4 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv'3 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv'4 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv'3 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'2 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'2_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3, ab : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)), b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3, bc : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)), c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv'3 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv'4 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv'3 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv'4 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv'3 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'2 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : ()
    
  let rec produces_refl'2 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv'3 self}
    any [ return' (result:())-> {result = produces_refl'2 self} (! return' {result}) ] 
  axiom produces_refl'2_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45] produces'1 self (Seq.empty  : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) self)
  predicate invariant'5 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
  let rec inv'5 (_x:borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv'5 x
  = (inv'3 ( * x) /\ inv'3 ( ^ x))
  predicate invariant'4 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'4 x = true
  use seq.Seq
  predicate inv'1 (_x : usize)
  let rec inv'1 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'0 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate next_precondition'0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9] forall i : Core_Ops_Range_Range_Type.t_range usize . forall e : usize . inv'0 i
     -> inv'1 e  -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  let rec next_precondition'0 (iter:Core_Ops_Range_Range_Type.t_range usize) (func:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = next_precondition'0 iter func produced} (! return' {result}) ]
    
  use seq.Seq
  predicate preservation'0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9] forall i : Core_Ops_Range_Range_Type.t_range usize . forall b : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . forall f : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . forall e2 : usize . forall e1 : usize . forall s : Seq.seq usize . inv'0 i
     -> inv'9 b
     -> inv'10 f
     -> inv'1 e2
     -> inv'1 e1
     -> inv'7 s
     -> unnest'0 func ( * f)
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  let rec preservation'0 (iter:Core_Ops_Range_Range_Type.t_range usize) (func:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = preservation'0 iter func} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'2 (_x : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
  let rec inv'2 (_x:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate preservation_inv'0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize)
    
  let rec preservation_inv'0 (iter:Core_Ops_Range_Range_Type.t_range usize) (func:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced:Seq.seq usize) (return'  (ret:bool))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv'7 produced}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv'2 func}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv'0 iter}
    any [ return' (result:bool)-> {result = preservation_inv'0 iter func produced} (! return' {result}) ] 
  axiom preservation_inv'0_spec : forall iter : Core_Ops_Range_Range_Type.t_range usize, func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3, produced : Seq.seq usize . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv'0 iter)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv'2 func)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv'7 produced)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 120 4 120 83] produced
  = (Seq.empty  : Seq.seq usize)  -> preservation_inv'0 iter func produced = preservation'0 iter func)
  predicate resolve'3 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'3 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  predicate reinitialize'0 (_1 : ()) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9] forall func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . forall iter : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'2 func
     -> inv'8 iter
     -> completed'1 iter
     -> next_precondition'0 ( ^ iter) func (Seq.empty  : Seq.seq usize) /\ preservation'0 ( ^ iter) func
  let rec reinitialize'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reinitialize'0 _1} (! return' {result}) ]
    
  predicate invariant'3 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
  let rec invariant'3 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . inv'3 x
  = (invariant'3 x
  /\ match x with
    | CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv iter func produced -> true
    end)
  predicate invariant'2 (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . inv'2 x = true
  function produces_trans'1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'1 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'7 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'7 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'7 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'7 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : usize . inv'1 x = true
  predicate invariant'0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'0 x = true
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv'7 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv'7 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv'7 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv'7 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] produces'0 a (Seq.(++) ab bc) c)
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45] produces'0 self (Seq.empty  : Seq.seq usize) self)
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {result
      = index_logic'0 self ix}
      (! return' {result}) ]
    
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'0 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'1 (index_logic'0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  let rec wf'0 (self:C06KnightsTour_Board_Type.t_board) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = wf'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate from_iter_post'0 (prod : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (res : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 275 20 275 32] prod = shallow_model'0 res
  let rec from_iter_post'0 (prod:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (res:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = from_iter_post'0 prod res} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9] Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self))
    = (Seq.empty  : Seq.seq usize)
    /\ completed'1 (Borrow.borrow_logic (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self)
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  let rec completed'0 (self:borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  predicate resolve'2 [#"../06_knights_tour.rs" 43 16 43 50] (_1 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    true
  predicate resolve'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 27] resolve'1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self)
    /\ resolve'2 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  let rec resolve'0 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec collect'0 (self:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))-> {inv'6 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 136 16 137 83] exists prod : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . exists done' : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv'4 prod
      /\ inv'5 done'
      /\ resolve'0 ( ^ done') /\ completed'0 done' /\ produces'1 self prod ( * done') /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  let rec map_inv'0 (self:Core_Ops_Range_Range_Type.t_range usize) (func:C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (return'  (ret:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31] inv'2 func}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70] preservation'0 self func}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51] reinitialize'0 ()}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 141] forall i2 : Core_Ops_Range_Range_Type.t_range usize . forall e : usize . inv'0 i2
     -> inv'1 e
     -> produces'0 self (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq usize))}
    any
    [ return' (result:CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)-> {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 61] inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 88] result
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Snapshot.new (Seq.empty  : Seq.seq usize))}
      (! return' {result}) ]
    
  let rec new (size:usize) (return'  (ret:C06KnightsTour_Board_Type.t_board))= {[#"../06_knights_tour.rs" 37 15 37 28] UIntSize.to_int size
    <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_7 <- Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 41 20 41 21] (0 : usize)) size : Core_Ops_Range_Range_Type.t_range usize ]
        
        s1
      | s1 = 
        [ &_9 <- C06KnightsTour_Impl1_New_Closure3_Type.C06knightstour_impl1_new_closure3 size : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 ]
        
        s2
      | s2 = map_inv'0 {_7} {_9}
          (fun (_ret':CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) ->
             [ &_6 <- _ret' ] 
            s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = collect'0 {_6}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) ->
             [ &rows <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_0 <- C06KnightsTour_Board_Type.C_Board size rows ] 
        (any
        [ any_ (_any:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))-> (! 
          [ &rows <- _any ]
          
          s1) ]
        )
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : C06KnightsTour_Board_Type.t_board = any_l () : C06KnightsTour_Board_Type.t_board
    | & size : usize = size
    | & rows : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    | & _6 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 = any_l () : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3
    | & _7 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _9 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 = any_l () : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 ]
    
    [ return' (result:C06KnightsTour_Board_Type.t_board)-> {[@expl:postcondition] [#"../06_knights_tour.rs" 39 14 39 25] wf'0 result}
      {[@expl:postcondition] [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size}
      (! return' {result}) ]
    
end
module C06KnightsTour_Impl1_Available
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'7 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq usize)
  let rec inv'7 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'6 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'6 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'7 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'7 (shallow_model'3 self)
  let rec invariant'6 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'6 x = true
  predicate invariant'5 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'5 (_x:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'5 x = true
  use seq.Seq
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self}
    any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'2 self}
      (! return' {result}) ]
    
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'2 self)
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv'4 x
  = true
  predicate invariant'3 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : usize)
  let rec inv'3 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : usize . inv'3 x = true
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  predicate invariant'1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : usize)
  let rec inv'1 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : usize . inv'1 x = true
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv'0 x
  = true
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use prelude.IntSize
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  let rec in_bounds'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self p} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {result
      = index_logic'0 self ix}
      (! return' {result}) ]
    
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'2 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'3 (index_logic'0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  let rec wf'0 (self:C06KnightsTour_Board_Type.t_board) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = wf'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Slice
  use prelude.Borrow
  use seq.Seq
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'1 (self:usize) (seq:Seq.seq usize) (out:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'1 self seq out} (! return' {result}) ]
    
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'2 (self:usize) (seq:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'2 self seq} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'3 self
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec index'1 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'2 index (shallow_model'1 self)}
    any
    [ return' (result:usize)-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'1 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'0 (self:usize) (seq:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'1 (self:usize) (seq:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'1 self seq} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'0 self}
      (! return' {result}) ]
    
  let rec index'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (index:usize) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46] in_bounds'1 index (shallow_model'0 self)}
    any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  use prelude.IntSize
  let rec available (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= {[#"../06_knights_tour.rs" 50 15 50 24] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[#"../06_knights_tour.rs" 53 8 53 9] (0 : isize)} {rx'0}
              (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1))
      | s1 = any [ br0 -> {_5 = false} (! bb8) | br1 -> {_5} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_8 <- _res ] s1))
      | s1 = C06KnightsTour_Board_Type.t_board {self}
          (fun (rsize'0:usize) (rfield'0:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) ->
            UIntSize.lt {_8} {rsize'0}
              (fun (_ret':bool) ->  [ &_7 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_8 <- _any ] s2) ] )))
      | s2 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[#"../06_knights_tour.rs" 55 15 55 16] (0 : isize)} {ry'0}
              (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1))
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_14 <- _res ] s1))
      | s1 = C06KnightsTour_Board_Type.t_board {self}
          (fun (rsize'0:usize) (rfield'0:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) ->
            UIntSize.lt {_14} {rsize'0}
              (fun (_ret':bool) ->  [ &_13 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s2) ] )))
      | s2 = any [ br0 -> {_13 = false} (! bb5) | br1 -> {_13} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_22 <- _res ] s1))
      | s1 = C06KnightsTour_Board_Type.t_board {self}
          (fun (rsize'0:usize) (rfield'0:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) ->
            index'0 {rfield'0} {_22}
              (fun (_ret':Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) ->  [ &_20 <- _ret' ] s2))
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_24 <- _res ] s1))
      | s1 = index'1 {_20} {_24} (fun (_ret':usize) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 = UIntSize.eq {_18} {[#"../06_knights_tour.rs" 57 57 57 58] (0 : usize)}
          (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb5 = s0 [ s0 = bb9 ] 
    | bb6 = s0 [ s0 = bb9 ] 
    | bb7 = s0 [ s0 = bb9 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- [#"../06_knights_tour.rs" 53 8 57 58] false ] s1 | s1 = bb12 ] 
    | bb12 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool
    | & self : C06KnightsTour_Board_Type.t_board = self
    | & p : C06KnightsTour_Point_Type.t_point = p
    | & _5 : bool = any_l () : bool
    | & _7 : bool = any_l () : bool
    | & _8 : usize = any_l () : usize
    | & _11 : bool = any_l () : bool
    | & _13 : bool = any_l () : bool
    | & _14 : usize = any_l () : usize
    | & _18 : usize = any_l () : usize
    | & _20 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    | & _22 : usize = any_l () : usize
    | & _24 : usize = any_l () : usize ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../06_knights_tour.rs" 51 4 51 44] result
       -> in_bounds'0 self p}
      (! return' {result}) ]
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
  function any_l (_ : 'b) : 'a
  let rec t_manuallydrop < 't > (input:t_manuallydrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value})
    | bad (value:'t)-> {C_ManuallyDrop value <> input} {false} any ]
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_intoiter < 't > < 'a > (input:t_intoiter 't 'a) (ret  (buf:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (phantom:Core_Marker_PhantomData_Type.t_phantomdata 't) (cap:usize) (alloc:Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end':opaque_ptr))= any
    [ good (buf:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (phantom:Core_Marker_PhantomData_Type.t_phantomdata 't) (cap:usize) (alloc:Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'})
    | bad (buf:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (phantom:Core_Marker_PhantomData_Type.t_phantomdata 't) (cap:usize) (alloc:Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      <> input}
      {false}
      any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C06KnightsTour_Impl1_CountDegree
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'8 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq usize)
  let rec inv'8 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq usize . inv'8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'7 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'7 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'7 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'8 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'8 (shallow_model'3 self)
  let rec invariant'7 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  axiom inv'7 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'7 x = true
  predicate invariant'6 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'6 (_x:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'6 x = true
  use seq.Seq
  predicate inv'5 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'5 (_x:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self}
    any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'2 self}
      (! return' {result}) ]
    
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'2 self)
  let rec invariant'5 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv'5 x
  = true
  use prelude.IntSize
  predicate invariant'4 (self : Seq.seq (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:Seq.seq (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq (isize, isize))
  let rec inv'4 (_x:Seq.seq (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq (isize, isize) . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (isize, isize))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (isize, isize) . inv'3 x = true
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
  let rec inv'2 (_x:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) . inv'2 x
  = true
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (isize, isize)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq (isize, isize))-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'4 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'4 (shallow_model'0 self)
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  let rec inv'0 (_x:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  let rec shallow_model'1 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (isize, isize)))= any
    [ return' (result:Seq.seq (isize, isize))-> {result = shallow_model'1 self} (! return' {result}) ]
    
  predicate produces'0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq (isize, isize)) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41] shallow_model'1 self
    = Seq.(++) visited (shallow_model'1 rhs)
  let rec produces'0 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited:Seq.seq (isize, isize)) (rhs:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited rhs} (! return' {result}) ]
    
  function produces_trans'0 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq (isize, isize)) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq (isize, isize)) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10] ()
  let rec produces_trans'0 (a:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab:Seq.seq (isize, isize)) (b:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc:Seq.seq (isize, isize)) (c:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54] inv'4 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33] inv'4 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), ab : Seq.seq (isize, isize), b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), bc : Seq.seq (isize, isize), c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33] inv'4 ab)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54] inv'4 bc)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10] ()
  let rec produces_refl'0 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45] produces'0 self (Seq.empty  : Seq.seq (isize, isize)) self)
  predicate invariant'0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv'0 x
  = true
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use prelude.IntSize
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  let rec in_bounds'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self p} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {result
      = index_logic'1 self ix}
      (! return' {result}) ]
    
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'2 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'3 (index_logic'1 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  let rec wf'0 (self:C06KnightsTour_Board_Type.t_board) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = wf'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'3 (self : isize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (isize, isize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'1 (self:(isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'2 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 239 8 239 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'1 self)  -> resolve'1 (Seq.get (shallow_model'1 self) i)
  let rec resolve'2 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec available'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= {[@expl:precondition] [#"../06_knights_tour.rs" 50 15 50 24] wf'0 self}
    any
    [ return' (result:bool)-> {[#"../06_knights_tour.rs" 51 4 51 44] result  -> in_bounds'0 self p}
      (! return' {result}) ]
    
  let rec mov'0 (self:C06KnightsTour_Point_Type.t_point) (p:(isize, isize)) (return'  (ret:C06KnightsTour_Point_Type.t_point))= {[@expl:precondition] [#"../06_knights_tour.rs" 15 15 15 46] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [#"../06_knights_tour.rs" 13 15 13 52] - 10000
    <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    {[@expl:precondition] [#"../06_knights_tour.rs" 12 15 12 52] - 10000
    <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    any
    [ return' (result:C06KnightsTour_Point_Type.t_point)-> {[#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a)}
      {[#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  function shallow_model'4 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'4 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq (isize, isize)))= any
    [ return' (result:Seq.seq (isize, isize))-> {result = shallow_model'4 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57] resolve'0 self
    /\ shallow_model'4 self = (Seq.empty  : Seq.seq (isize, isize))
  let rec completed'0 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Core_Option_Option_Type.t_option (isize, isize)))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option (isize, isize))-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33] shallow_model'0 self = shallow_model'1 res
  let rec into_iter_post'0 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24] true
  let rec into_iter_pre'0 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:(isize, isize)))= any
    [ return' (result:(isize, isize))-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  let rec moves'0 (_1:()) (return'  (ret:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global))-> {[#"../06_knights_tour.rs" 94 0 94 130] forall i : int . 0
      <= i
      /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'0 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'0 result i in a) <= 2}
      {[#"../06_knights_tour.rs" 93 10 93 28] Seq.length (shallow_model'0 result) = 8}
      (! return' {result}) ]
    
  let rec count_degree (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:usize))= {[#"../06_knights_tour.rs" 69 15 69 32] in_bounds'0 self p}
    {[#"../06_knights_tour.rs" 68 15 68 24] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [#"../06_knights_tour.rs" 71 24 71 25] (0 : usize) ] s1
      | s1 = moves'0 {[#"../06_knights_tour.rs" 74 17 74 24] ()}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) ->
             [ &_8 <- _ret' ] 
            s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_8}
          (fun (_ret':Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) ->
             [ &iter <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &iter_old <- ([#"../06_knights_tour.rs" 73 8 73 46] Snapshot.new iter) : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &produced <- ([#"../06_knights_tour.rs" 73 8 73 46] Snapshot.new (Seq.empty  : Seq.seq (isize, isize))) : Snapshot.snap_ty (Seq.seq (isize, isize)) ]
        
        s1
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [#"../06_knights_tour.rs" 73 20 73 44] UIntSize.to_int count
        <= Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 73 8 73 46] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 73 8 73 46] inv'0 iter}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut
              <Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)>
              {iter}
              (fun (_ret':borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <-  ^ _19 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)>
              { * _19}
              {Borrow.get_id _19}
              (fun (_ret':borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Core_Option_Option_Type.t_option (isize, isize)) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Core_Option_Option_Type.C_None } (! bb12)
            | br1 (a:(isize, isize))-> {_17 = Core_Option_Option_Type.C_Some a} (! bb11) ]
             ]
          
        | bb11 = s0 [ s0 = bb13 ] 
        | bb13 = s0
          [ s0 = Core_Option_Option_Type.some <(isize, isize)> {_17}
              (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- ([#"../06_knights_tour.rs" 73 8 73 46] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq (isize, isize)) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (isize, isize)))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 =  [ &m <- __creusot_proc_iter_elem ] s2
          | s2 = -{resolve'1 __creusot_proc_iter_elem}- s3
          | s3 =  [ &_28 <- m ] s4
          | s4 = mov'0 {p} {_28} (fun (_ret':C06KnightsTour_Point_Type.t_point) ->  [ &next <- _ret' ] s5)
          | s5 = bb15 ]
          
        | bb15 = s0
          [ s0 = -{resolve'1 m}- s1
          | s1 = available'0 {self} {next} (fun (_ret':bool) ->  [ &_29 <- _ret' ] s2)
          | s2 = bb16 ]
          
        | bb16 = s0 [ s0 = any [ br0 -> {_29 = false} (! bb18) | br1 -> {_29} (! bb17) ]  ] 
        | bb17 = s0
          [ s0 = UIntSize.add {count} {[#"../06_knights_tour.rs" 77 25 77 26] (1 : usize)}
              (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 =  [ &_16 <- [#"../06_knights_tour.rs" 76 36 78 13] () ] s2
          | s2 = bb19 ]
          
        | bb18 = s0 [ s0 =  [ &_16 <- [#"../06_knights_tour.rs" 78 13 78 13] () ] s1 | s1 = bb19 ] 
        | bb19 = s0 [ s0 = bb7 ]  ]
         ]
      
    | bb10 = s0 [ s0 = -{resolve'2 iter}- s1 | s1 = {[#"../06_knights_tour.rs" 73 8 73 46] false} any ] 
    | bb12 = s0 [ s0 = -{resolve'2 iter}- s1 | s1 = bb20 ] 
    | bb20 = s0 [ s0 =  [ &_0 <- count ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l () : usize
    | & self : C06KnightsTour_Board_Type.t_board = self
    | & p : C06KnightsTour_Point_Type.t_point = p
    | & count : usize = any_l () : usize
    | & iter : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    | & _8 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    | & iter_old : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) = any_l () : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    | & produced : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l () : Snapshot.snap_ty (Seq.seq (isize, isize))
    | & _16 : () = any_l () : ()
    | & _17 : Core_Option_Option_Type.t_option (isize, isize) = any_l () : Core_Option_Option_Type.t_option (isize, isize)
    | & _18 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    | & _19 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    | & __creusot_proc_iter_elem : (isize, isize) = any_l () : (isize, isize)
    | & _22 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l () : Snapshot.snap_ty (Seq.seq (isize, isize))
    | & m : (isize, isize) = any_l () : (isize, isize)
    | & next : C06KnightsTour_Point_Type.t_point = any_l () : C06KnightsTour_Point_Type.t_point
    | & _28 : (isize, isize) = any_l () : (isize, isize)
    | & _29 : bool = any_l () : bool ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module C06KnightsTour_Impl1_Set
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'7 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq usize)
  let rec inv'7 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'6 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'6 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'6 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'7 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'7 (shallow_model'3 self)
  let rec invariant'6 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'6 x = true
  predicate invariant'5 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'5 (_x:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'5 x = true
  use seq.Seq
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self}
    any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'1 self}
      (! return' {result}) ]
    
  axiom shallow_model'1_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'1 self)
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv'4 x
  = true
  use prelude.Borrow
  predicate invariant'3 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed usize)
  let rec inv'3 (_x:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed usize . inv'3 x = true
  predicate invariant'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'2 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'2 x = true
  predicate invariant'1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : usize)
  let rec inv'1 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : usize . inv'1 x = true
  predicate invariant'0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
  let rec inv'0 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) . inv'0 x
  = true
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use prelude.IntSize
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  let rec in_bounds'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self p} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {result
      = index_logic'0 self ix}
      (! return' {result}) ]
    
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'1 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'3 (index_logic'0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  let rec wf'0 (self:C06KnightsTour_Board_Type.t_board) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = wf'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (C06KnightsTour_Board_Type.t_board)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (C06KnightsTour_Board_Type.t_board)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Slice
  use seq.Seq
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  let rec resolve_elswhere'1 (self:usize) (old':Seq.seq usize) (fin:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve_elswhere'1 self old' fin} (! return' {result}) ]
    
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'1 (self:usize) (seq:Seq.seq usize) (out:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'1 self seq out} (! return' {result}) ]
    
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'2 (self:usize) (seq:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'2 self seq} (! return' {result}) ]
    
  function shallow_model'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq usize))= any
    [ return' (result:Seq.seq usize)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  let rec index_mut'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46] in_bounds'2 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed usize)-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55] Seq.length (shallow_model'3 ( ^ self))
      = Seq.length (shallow_model'2 self)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62] resolve_elswhere'1 index (shallow_model'2 self) (shallow_model'3 ( ^ self))}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57] has_value'1 index (shallow_model'3 ( ^ self)) ( ^ result)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54] has_value'1 index (shallow_model'2 self) ( * result)}
      (! return' {result}) ]
    
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  let rec resolve_elswhere'0 (self:usize) (old':Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve_elswhere'0 self old' fin} (! return' {result}) ]
    
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  let rec has_value'0 (self:usize) (seq:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = has_value'0 self seq out} (! return' {result}) ]
    
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  let rec in_bounds'1 (self:usize) (seq:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'1 self seq} (! return' {result}) ]
    
  function shallow_model'0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'0 self}
      (! return' {result}) ]
    
  let rec index_mut'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (index:usize) (return'  (ret:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46] in_bounds'1 index (shallow_model'0 self)}
    any
    [ return' (result:borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55] Seq.length (shallow_model'1 ( ^ self))
      = Seq.length (shallow_model'0 self)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62] resolve_elswhere'0 index (shallow_model'0 self) (shallow_model'1 ( ^ self))}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57] has_value'0 index (shallow_model'1 ( ^ self)) ( ^ result)}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54] has_value'0 index (shallow_model'0 self) ( * result)}
      (! return' {result}) ]
    
  use prelude.IntSize
  let rec set (self:borrowed (C06KnightsTour_Board_Type.t_board)) (p:C06KnightsTour_Point_Type.t_point) (v:usize) (return'  (ret:()))= {[#"../06_knights_tour.rs" 84 15 84 32] in_bounds'0 ( * self) p}
    {[#"../06_knights_tour.rs" 83 15 83 24] wf'0 ( * self)}
    (! bb0
    [ bb0 = s0
      [ s0 = C06KnightsTour_Board_Type.t_board { * self}
          (fun (rsize'0:usize) (rfield'0:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) ->
            Borrow.borrow_final
              <Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)>
              {rfield'0}
              {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_12 <- _ret' ] 
                C06KnightsTour_Board_Type.t_board { * self}
                  (fun (l_size'0:usize) (l_field'0:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) ->
                    
                    [ &self <- { self with current = (C06KnightsTour_Board_Type.C_Board l_size'0 ( ^ _12) : C06KnightsTour_Board_Type.t_board) ; } ]
                    
                    s1)))
      | s1 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_13 <- _res ] s2))
      | s2 = index_mut'0 {_12} {_13}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_11 <- _ret' ] 
            s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final
          <Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)>
          { * _11}
          {Borrow.get_id _11}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_10 <- _ret' ] 
             [ &_11 <- { _11 with current = ( ^ _10) ; } ] 
            s1)
      | s1 = C06KnightsTour_Point_Type.t_point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_15 <- _res ] s2))
      | s2 = index_mut'1 {_10} {_15} (fun (_ret':borrowed usize) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 =  [ &_0 <- [#"../06_knights_tour.rs" 88 8 88 50] () ] s3
      | s3 = -{resolve'1 _11}- s4
      | s4 = -{resolve'2 self}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & self : borrowed (C06KnightsTour_Board_Type.t_board) = self
    | & p : C06KnightsTour_Point_Type.t_point = p
    | & v : usize = v
    | & _9 : borrowed usize = any_l () : borrowed usize
    | & _10 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    | & _11 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    | & _12 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    | & _13 : usize = any_l () : usize
    | & _15 : usize = any_l () : usize ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self)
      = C06KnightsTour_Board_Type.board_size ( * self)}
      {[@expl:postcondition] [#"../06_knights_tour.rs" 85 14 85 26] wf'0 ( ^ self)}
      (! return' {result}) ]
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_iter < 't > (input:t_iter 't) (ret  (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module C06KnightsTour_Min
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use prelude.UIntSize
  use prelude.Slice
  predicate invariant'7 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : slice (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'7 (_x:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : slice (usize, C06KnightsTour_Point_Type.t_point) . inv'7 x = true
  use seq.Seq
  predicate invariant'6 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'6 (_x:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point) . inv'6 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'5 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'5 (_x:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self}
    any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'2 self}
      (! return' {result}) ]
    
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'5 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'2 self)
  let rec invariant'5 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . inv'5 x
  = true
  predicate invariant'4 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : slice (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'4 (_x:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : slice (usize, C06KnightsTour_Point_Type.t_point) . inv'4 x = true
  predicate invariant'3 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'3 (_x:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point) . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'2 (self : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'2 (_x:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) . inv'2 x = true
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . inv'1 x
  = true
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model'5 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  let rec shallow_model'5 (self:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'7 self}
    any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'5 self}
      (! return' {result}) ]
    
  axiom shallow_model'5_spec : forall self : slice (usize, C06KnightsTour_Point_Type.t_point) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'7 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'6 (shallow_model'5 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'5 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'5 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'1 [@inline:trivial] (self : slice (usize, C06KnightsTour_Point_Type.t_point)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'5 self) ix
  let rec index_logic'1 (self:slice (usize, C06KnightsTour_Point_Type.t_point)) (ix:int) (return'  (ret:(usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:(usize, C06KnightsTour_Point_Type.t_point))-> {result = index_logic'1 self ix}
      (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'3 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'5 self
  let rec shallow_model'3 (self:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'3 self}
      (! return' {result}) ]
    
  use seq.Seq
  function to_ref_seq'0 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  let rec to_ref_seq'0 (self:slice (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'4 self}
    any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = to_ref_seq'0 self}
      (! return' {result}) ]
    
  axiom to_ref_seq'0_spec : forall self : slice (usize, C06KnightsTour_Point_Type.t_point) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv'3 (to_ref_seq'0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq'0 self)
  = Seq.length (shallow_model'3 self))
  function shallow_model'1 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : slice (usize, C06KnightsTour_Point_Type.t_point)
    
  let rec shallow_model'1 (self:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:slice (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:slice (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  predicate produces'0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (visited : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (tl : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66] to_ref_seq'0 (shallow_model'1 self)
    = Seq.(++) visited (to_ref_seq'0 (shallow_model'1 tl))
  let rec produces'0 (self:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (visited:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (tl:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (ab : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (b : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (bc : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (c : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10] ()
  let rec produces_trans'0 (a:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (ab:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (b:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (bc:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (c:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'3 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'3 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point), ab : Seq.seq (usize, C06KnightsTour_Point_Type.t_point), b : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point), bc : Seq.seq (usize, C06KnightsTour_Point_Type.t_point), c : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10] ()
  let rec produces_refl'0 (self:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) . [#"../../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45] produces'0 self (Seq.empty  : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) self
  predicate invariant'0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'0 (_x:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) . inv'0 x = true
  use prelude.Intrinsic
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'4 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) : slice (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'4 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) (return'  (ret:slice (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:slice (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'4 self}
      (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)))
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61] resolve'0 self
    /\ shallow_model'5 (shallow_model'4 self) = (Seq.empty  : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  let rec completed'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) (return'  (ret:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:(usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:(usize, C06KnightsTour_Point_Type.t_point))-> {result = index_logic'0 self ix}
      (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (res : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 205 20 205 34] shallow_model'0 self
    = shallow_model'3 (shallow_model'1 res)
  let rec into_iter_post'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (res:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 199 20 199 24] true
  let rec into_iter_pre'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))-> {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec min (v:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &min <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) ]
        
        s1
      | s1 = into_iter'0 {v}
          (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) ->
             [ &iter <- _ret' ] 
            s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &iter_old <- ([#"../06_knights_tour.rs" 113 4 114 74] Snapshot.new iter) : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &produced <- ([#"../06_knights_tour.rs" 113 4 114 74] Snapshot.new (Seq.empty  : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))) : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../06_knights_tour.rs" 113 4 114 74] forall r : (usize, C06KnightsTour_Point_Type.t_point) . min
        = Core_Option_Option_Type.C_Some r
         -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v) /\ index_logic'0 v i = r)}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 113 4 114 74] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 113 4 114 74] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)> {iter}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) ->
                 [ &_17 <- _ret' ] 
                 [ &iter <-  ^ _17 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)>
              { * _17}
              {Borrow.get_id _17}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) ->
                 [ &_16 <- _ret' ] 
                 [ &_17 <- { _17 with current = ( ^ _16) ; } ] 
                s2)
          | s2 = next'0 {_16}
              (fun (_ret':Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) ->
                 [ &_15 <- _ret' ] 
                s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _17}- s1
          | s1 = any
            [ br0 -> {_15 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:(usize, C06KnightsTour_Point_Type.t_point))-> {_15 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <(usize, C06KnightsTour_Point_Type.t_point)> {_15}
              (fun (r0'0:(usize, C06KnightsTour_Point_Type.t_point)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_20 <- ([#"../06_knights_tour.rs" 113 4 114 74] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _20 ] 
            (any
            [ any_ (_any:Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))-> (!  [ &_20 <- _any ] 
              s1) ]
            )
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = any
            [ br0 -> {min = Core_Option_Option_Type.C_None } (! bb13)
            | br1 (a:(usize, C06KnightsTour_Point_Type.t_point))-> {min = Core_Option_Option_Type.C_Some a} (! bb14) ]
             ]
          
        | bb14 = s0
          [ s0 = Core_Option_Option_Type.some <(usize, C06KnightsTour_Point_Type.t_point)> {min}
              (fun (r0'0:(usize, C06KnightsTour_Point_Type.t_point)) ->  [ &m <- r0'0 ] s1)
          | s1 = UIntSize.lt {let (r'0, _) = x in r'0} {let (r'1, _) = m in r'1}
              (fun (_ret':bool) ->  [ &_28 <- _ret' ] s2)
          | s2 = any [ br0 -> {_28 = false} (! bb17) | br1 -> {_28} (! bb16) ]  ]
          
        | bb16 = s0
          [ s0 = 
            [ &_31 <- Core_Option_Option_Type.C_Some x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) ]
            
            s1
          | s1 =  [ &min <- _31 ] 
            (any
            [ any_ (_any:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))-> (! 
              [ &_31 <- _any ]
              
              s2) ]
            )
          | s2 =  [ &_23 <- [#"../06_knights_tour.rs" 120 20 120 33] () ] s3
          | s3 = bb18 ]
          
        | bb17 = s0 [ s0 =  [ &_23 <- [#"../06_knights_tour.rs" 121 17 121 17] () ] s1 | s1 = bb18 ] 
        | bb18 = s0 [ s0 = bb19 ] 
        | bb13 = s0 [ s0 = bb15 ] 
        | bb15 = s0
          [ s0 = 
            [ &_25 <- Core_Option_Option_Type.C_Some x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) ]
            
            s1
          | s1 =  [ &min <- _25 ] 
            (any
            [ any_ (_any:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))-> (! 
              [ &_25 <- _any ]
              
              s2) ]
            )
          | s2 =  [ &_23 <- [#"../06_knights_tour.rs" 117 20 117 33] () ] s3
          | s3 = bb19 ]
          
        | bb19 = s0 [ s0 = bb4 ]  ]
         ]
      
    | bb7 = s0 [ s0 = {[#"../06_knights_tour.rs" 113 4 114 74] false} any ] 
    | bb12 = s0 [ s0 = {[#"../06_knights_tour.rs" 116 14 116 17] false} any ] 
    | bb9 = s0 [ s0 =  [ &_0 <- min ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    | & v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) = v
    | & min : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    | & iter : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)
    | & iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) = any_l () : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    | & produced : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) = any_l () : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
    | & _15 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    | & _16 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    | & _17 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    | & __creusot_proc_iter_elem : (usize, C06KnightsTour_Point_Type.t_point) = any_l () : (usize, C06KnightsTour_Point_Type.t_point)
    | & _20 : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) = any_l () : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
    | & x : (usize, C06KnightsTour_Point_Type.t_point) = any_l () : (usize, C06KnightsTour_Point_Type.t_point)
    | & _23 : () = any_l () : ()
    | & _25 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    | & m : (usize, C06KnightsTour_Point_Type.t_point) = any_l () : (usize, C06KnightsTour_Point_Type.t_point)
    | & _28 : bool = any_l () : bool
    | & _31 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) ]
    
    [ return' (result:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))-> {[@expl:postcondition] [#"../06_knights_tour.rs" 109 0 110 62] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result
      = Core_Option_Option_Type.C_Some r
       -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use prelude.UIntSize
  use prelude.Int
  use prelude.UIntSize
  constant a  : usize
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
  goal vc_dumb_nonlinear_arith : ([#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000)
   -> ([#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module C06KnightsTour_KnightsTour
  use prelude.IntSize
  use seq.Seq
  predicate invariant'15 (self : Seq.seq (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'15 (self:Seq.seq (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'15 self} (! return' {result}) ]
    
  predicate inv'15 (_x : Seq.seq (isize, isize))
  let rec inv'15 (_x:Seq.seq (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'15 _x} (! return' {result}) ]
    
  axiom inv'15 : forall x : Seq.seq (isize, isize) . inv'15 x = true
  use prelude.UIntSize
  predicate inv'11 (_x : Seq.seq usize)
  let rec inv'11 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'14 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  let rec inv'14 (_x:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'14 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq usize))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'14 self}
    any [ return' (result:Seq.seq usize)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'14 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'11 (shallow_model'2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'14 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'11 (shallow_model'2 self)
  let rec invariant'14 (self:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'14 self} (! return' {result}) ]
    
  axiom inv'14 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv'14 x = true
  predicate invariant'13 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'13 (self:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'13 self} (! return' {result}) ]
    
  predicate inv'13 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'13 (_x:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'13 _x} (! return' {result}) ]
    
  axiom inv'13 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv'13 x
  = true
  use seq.Seq
  predicate inv'12 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'12 (_x:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'12 self}
    any
    [ return' (result:Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))-> {result
      = shallow_model'1 self}
      (! return' {result}) ]
    
  axiom shallow_model'1_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'12 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'13 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'12 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'13 (shallow_model'1 self)
  let rec invariant'12 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  axiom inv'12 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv'12 x
  = true
  predicate invariant'11 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'11 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  axiom inv'11 : forall x : Seq.seq usize . inv'11 x = true
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  predicate invariant'10 (self : (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:(usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'10 (_x:(usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : (usize, C06KnightsTour_Point_Type.t_point) . inv'10 x = true
  use prelude.Borrow
  predicate invariant'9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'9 (self:borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)))
    
  let rec inv'9 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) . inv'9 x
  = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'8 (self : Core_Option_Option_Type.t_option (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Core_Option_Option_Type.t_option (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Core_Option_Option_Type.t_option (isize, isize))
  let rec inv'8 (_x:Core_Option_Option_Type.t_option (isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Core_Option_Option_Type.t_option (isize, isize) . inv'8 x = true
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant'7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
  let rec inv'7 (_x:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) . inv'7 x
  = true
  predicate invariant'6 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  let rec inv'6 (_x:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point) . inv'6 x = true
  use seq.Seq
  predicate inv'5 (_x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  let rec inv'5 (_x:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (isize, isize)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self}
    any [ return' (result:Seq.seq (isize, isize))-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'15 (shallow_model'3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'5 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'15 (shallow_model'3 self)
  let rec invariant'5 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv'5 x = true
  use seq.Seq
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self}
    any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'6 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'6 (shallow_model'0 self)
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . inv'4 x
  = true
  predicate invariant'3 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option usize)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option usize . inv'3 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant'2 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'2 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  let rec shallow_model'4 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (isize, isize)))= any
    [ return' (result:Seq.seq (isize, isize))-> {result = shallow_model'4 self} (! return' {result}) ]
    
  predicate produces'1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq (isize, isize)) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41] shallow_model'4 self
    = Seq.(++) visited (shallow_model'4 rhs)
  let rec produces'1 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited:Seq.seq (isize, isize)) (rhs:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited rhs} (! return' {result}) ]
    
  function produces_trans'1 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq (isize, isize)) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq (isize, isize)) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10] ()
  let rec produces_trans'1 (a:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab:Seq.seq (isize, isize)) (b:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc:Seq.seq (isize, isize)) (c:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65] inv'1 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54] inv'15 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44] inv'1 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33] inv'15 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23] inv'1 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), ab : Seq.seq (isize, isize), b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), bc : Seq.seq (isize, isize), c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32] produces'1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32] produces'1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 22 268 23] inv'1 a)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 31 268 33] inv'15 ab)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 43 268 44] inv'1 b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 52 268 54] inv'15 bc)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 268 64 268 65] inv'1 c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10] ()
  let rec produces_refl'1 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 261 21 261 25] inv'1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45] produces'1 self (Seq.empty  : Seq.seq (isize, isize)) self)
  predicate invariant'1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv'1 x
  = true
  use seq.Seq
  predicate inv'0 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'0 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  function deep_model'0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'11 bc}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'11 ab}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'11 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'11 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'0 x = true
  use prelude.Snapshot
  use prelude.Intrinsic
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate resolve'8 (self : C06KnightsTour_Point_Type.t_point) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'8 (self:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'8 self} (! return' {result}) ]
    
  predicate resolve'7 (self : usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'7 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'7 self} (! return' {result}) ]
    
  predicate resolve'6 (self : (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'7 (let (a, _) = self in a)
    /\ resolve'8 (let (_, a) = self in a)
  let rec resolve'6 (self:(usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'6 self} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:(usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:(usize, C06KnightsTour_Point_Type.t_point))-> {result = index_logic'0 self ix}
      (! return' {result}) ]
    
  predicate resolve'4 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'0 self)  -> resolve'6 (index_logic'0 self i)
  let rec resolve'4 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  function shallow_model'6 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'6 (self:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'6 self}
      (! return' {result}) ]
    
  let rec min'0 (v:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))-> {[#"../06_knights_tour.rs" 109 0 110 62] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result
      = Core_Option_Option_Type.C_Some r
       -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'6 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
  predicate resolve'5 (self : isize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'5 (self:isize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  predicate resolve'2 (self : (isize, isize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'5 (let (a, _) = self in a)
    /\ resolve'5 (let (_, a) = self in a)
  let rec resolve'2 (self:(isize, isize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'3 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 239 8 239 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'4 self)  -> resolve'2 (Seq.get (shallow_model'4 self) i)
  let rec resolve'3 (self:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'5 (self:borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq (usize, C06KnightsTour_Point_Type.t_point)))= any
    [ return' (result:Seq.seq (usize, C06KnightsTour_Point_Type.t_point))-> {result = shallow_model'5 self}
      (! return' {result}) ]
    
  let rec push'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) (value:(usize, C06KnightsTour_Point_Type.t_point)) (return'  (ret:()))= {[@expl:precondition] inv'10 value}
    {[@expl:precondition] inv'9 self}
    any
    [ return' (result:())-> {[#"../../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51] shallow_model'0 ( ^ self)
      = Seq.snoc (shallow_model'5 self) value}
      (! return' {result}) ]
    
  use prelude.IntSize
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  let rec in_bounds'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = in_bounds'0 self p} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))-> {result
      = index_logic'1 self ix}
      (! return' {result}) ]
    
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model'1 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model'2 (index_logic'1 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  let rec wf'0 (self:C06KnightsTour_Board_Type.t_board) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = wf'0 self} (! return' {result}) ]
    
  let rec count_degree'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:usize))= {[@expl:precondition] [#"../06_knights_tour.rs" 69 15 69 32] in_bounds'0 self p}
    {[@expl:precondition] [#"../06_knights_tour.rs" 68 15 68 24] wf'0 self}
    any [ return' (result:usize)-> (! return' {result}) ] 
  let rec available'0 (self:C06KnightsTour_Board_Type.t_board) (p:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= {[@expl:precondition] [#"../06_knights_tour.rs" 50 15 50 24] wf'0 self}
    any
    [ return' (result:bool)-> {[#"../06_knights_tour.rs" 51 4 51 44] result  -> in_bounds'0 self p}
      (! return' {result}) ]
    
  let rec mov'0 (self:C06KnightsTour_Point_Type.t_point) (p:(isize, isize)) (return'  (ret:C06KnightsTour_Point_Type.t_point))= {[@expl:precondition] [#"../06_knights_tour.rs" 15 15 15 46] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [#"../06_knights_tour.rs" 13 15 13 52] - 10000
    <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    {[@expl:precondition] [#"../06_knights_tour.rs" 12 15 12 52] - 10000
    <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    any
    [ return' (result:C06KnightsTour_Point_Type.t_point)-> {[#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a)}
      {[#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
      = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function shallow_model'7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'4 ( * self)
  let rec shallow_model'7 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq (isize, isize)))= any
    [ return' (result:Seq.seq (isize, isize))-> {result = shallow_model'7 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57] resolve'1 self
    /\ shallow_model'7 self = (Seq.empty  : Seq.seq (isize, isize))
  let rec completed'1 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  let rec next'1 (self:borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Core_Option_Option_Type.t_option (isize, isize)))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option (isize, isize))-> {inv'8 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33] shallow_model'3 self = shallow_model'4 res
  let rec into_iter_post'1 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'1 self res} (! return' {result}) ]
    
  predicate into_iter_pre'1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24] true
  let rec into_iter_pre'1 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'1 self} (! return' {result}) ]
    
  let rec into_iter'1 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))= {[@expl:precondition] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'1 self}
    any
    [ return' (result:Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'1 self result}
      (! return' {result}) ]
    
  function index_logic'2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'3 self) ix
  let rec index_logic'2 (self:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:(isize, isize)))= any
    [ return' (result:(isize, isize))-> {result = index_logic'2 self ix} (! return' {result}) ]
    
  let rec moves'0 (_1:()) (return'  (ret:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global))-> {[#"../06_knights_tour.rs" 94 0 94 130] forall i : int . 0
      <= i
      /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'2 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'2 result i in a) <= 2}
      {[#"../06_knights_tour.rs" 93 10 93 28] Seq.length (shallow_model'3 result) = 8}
      (! return' {result}) ]
    
  let rec new'1 (_1:()) (return'  (ret:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))-> {inv'4 result}
      {[#"../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44] Seq.length (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Option_Option_Type.t_option usize))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option usize)-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range usize) (res:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {inv'0 result}
      {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  use prelude.Snapshot
  function dumb_nonlinear_arith'0 [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 128 0 128 8] ()
  let rec dumb_nonlinear_arith'0 (a:usize) (return'  (ret:()))= {[@expl:precondition] [#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a
    <= 1000}
    any [ return' (result:())-> {result = dumb_nonlinear_arith'0 a} (! return' {result}) ] 
  axiom dumb_nonlinear_arith'0_spec : forall a : usize . ([#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a
  <= 1000)  -> ([#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
  let rec set'0 (self:borrowed (C06KnightsTour_Board_Type.t_board)) (p:C06KnightsTour_Point_Type.t_point) (v:usize) (return'  (ret:()))= {[@expl:precondition] [#"../06_knights_tour.rs" 84 15 84 32] in_bounds'0 ( * self) p}
    {[@expl:precondition] [#"../06_knights_tour.rs" 83 15 83 24] wf'0 ( * self)}
    any
    [ return' (result:())-> {[#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self)
      = C06KnightsTour_Board_Type.board_size ( * self)}
      {[#"../06_knights_tour.rs" 85 14 85 26] wf'0 ( ^ self)}
      (! return' {result}) ]
    
  let rec new'0 (size:usize) (return'  (ret:C06KnightsTour_Board_Type.t_board))= {[@expl:precondition] [#"../06_knights_tour.rs" 37 15 37 28] UIntSize.to_int size
    <= 1000}
    any
    [ return' (result:C06KnightsTour_Board_Type.t_board)-> {[#"../06_knights_tour.rs" 39 14 39 25] wf'0 result}
      {[#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size}
      (! return' {result}) ]
    
  let rec knights_tour (size:usize) (x:usize) (y:usize) (return'  (ret:Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)))= {[#"../06_knights_tour.rs" 135 11 135 19] y
    < size}
    {[#"../06_knights_tour.rs" 134 11 134 19] x < size}
    {[#"../06_knights_tour.rs" 133 11 133 37] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 = new'0 {size} (fun (_ret':C06KnightsTour_Board_Type.t_board) ->  [ &board <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = IntSize.of_int {UIntSize.to_int x} (fun (_res:isize) ->  [ &_10 <- _res ] s1)
      | s1 = IntSize.of_int {UIntSize.to_int y} (fun (_res:isize) ->  [ &_12 <- _res ] s2)
      | s2 =  [ &p <- C06KnightsTour_Point_Type.C_Point _10 _12 ] 
        (any [ any_ (_any:isize)-> (!  [ &_10 <- _any ] (any [ any_ (_any:isize)-> (!  [ &_12 <- _any ] s3) ] )) ] )
      | s3 = Borrow.borrow_mut <C06KnightsTour_Board_Type.t_board> {board}
          (fun (_ret':borrowed (C06KnightsTour_Board_Type.t_board)) ->  [ &_15 <- _ret' ]  [ &board <-  ^ _15 ] s4)
      | s4 = set'0 {_15} {p} {[#"../06_knights_tour.rs" 139 17 139 18] (1 : usize)}
          (fun (_ret':()) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_17 <- [#"../06_knights_tour.rs" 141 4 141 44] Snapshot.new (dumb_nonlinear_arith'0 size) ] s1
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.mul {size} {size} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1)
      | s1 = 
        [ &_21 <- Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 145 16 145 17] (2 : usize)) _22 : Core_Ops_Range_Range_Type.t_range usize ]
        
        (any [ any_ (_any:usize)-> (!  [ &_22 <- _any ] s2) ] )
      | s2 = into_iter'0 {_21} (fun (_ret':Core_Ops_Range_Range_Type.t_range usize) ->  [ &iter <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = 
        [ &iter_old <- ([#"../06_knights_tour.rs" 142 4 142 36] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) ]
        
        s1
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = 
        [ &produced <- ([#"../06_knights_tour.rs" 142 4 142 36] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
        
        s1
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant] [#"../06_knights_tour.rs" 144 16 144 34] in_bounds'0 board p}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 143 16 143 26] wf'0 board}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 142 16 142 34] C06KnightsTour_Board_Type.board_size board
        = size}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 142 4 142 36] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../06_knights_tour.rs" 142 4 142 36] inv'0 iter}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range usize> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_37 <- _ret' ] 
                 [ &iter <-  ^ _37 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range usize> { * _37} {Borrow.get_id _37}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_36 <- _ret' ] 
                 [ &_37 <- { _37 with current = ( ^ _36) ; } ] 
                s2)
          | s2 = next'0 {_36} (fun (_ret':Core_Option_Option_Type.t_option usize) ->  [ &_35 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = -{resolve'0 _37}- s1
          | s1 = any
            [ br0 -> {_35 = Core_Option_Option_Type.C_None } (! bb14)
            | br1 (a:usize)-> {_35 = Core_Option_Option_Type.C_Some a} (! bb13) ]
             ]
          
        | bb13 = s0 [ s0 = bb15 ] 
        | bb15 = s0
          [ s0 = Core_Option_Option_Type.some <usize> {_35}
              (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_40 <- ([#"../06_knights_tour.rs" 142 4 142 36] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s2
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _40 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_40 <- _any ] s1) ] )
          | s1 =  [ &step <- __creusot_proc_iter_elem ] s2
          | s2 = new'1 {[#"../06_knights_tour.rs" 147 50 147 60] ()}
              (fun (_ret':Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) ->
                 [ &candidates <- _ret' ] 
                s3)
          | s3 = bb17 ]
          
        | bb17 = s0
          [ s0 = moves'0 {[#"../06_knights_tour.rs" 150 17 150 24] ()}
              (fun (_ret':Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) ->
                 [ &_46 <- _ret' ] 
                s1)
          | s1 = bb18 ]
          
        | bb18 = s0
          [ s0 = into_iter'1 {_46}
              (fun (_ret':Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) ->
                 [ &iter1 <- _ret' ] 
                s1)
          | s1 = bb19 ]
          
        | bb19 = s0
          [ s0 = 
            [ &iter_old1 <- ([#"../06_knights_tour.rs" 148 8 149 54] Snapshot.new iter1) : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) ]
            
            s1
          | s1 = bb20 ]
          
        | bb20 = s0
          [ s0 = 
            [ &produced1 <- ([#"../06_knights_tour.rs" 148 8 149 54] Snapshot.new (Seq.empty  : Seq.seq (isize, isize))) : Snapshot.snap_ty (Seq.seq (isize, isize)) ]
            
            s1
          | s1 = bb21 ]
          
        | bb21 = s0 [ s0 = bb22 ] 
        | bb22 = s0 [ s0 = bb23 ] 
        | bb23 = s0 [ s0 = bb24 ] 
        | bb24 = s0 [ s0 = bb25 ] 
        | bb25 = bb25
          [ bb25 = {[@expl:loop invariant] [#"../06_knights_tour.rs" 148 8 149 54] forall i : int . 0 <= i
            /\ i < Seq.length (shallow_model'0 candidates)
             -> in_bounds'0 board (let (_, a) = index_logic'0 candidates i in a)}
            {[@expl:loop invariant] [#"../06_knights_tour.rs" 148 8 149 54] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [#"../06_knights_tour.rs" 148 8 149 54] inv'1 iter1}
            (! s0) [ s0 = bb26 ] 
            [ bb26 = s0
              [ s0 = Borrow.borrow_mut
                  <Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)>
                  {iter1}
                  (fun (_ret':borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) ->
                     [ &_56 <- _ret' ] 
                     [ &iter1 <-  ^ _56 ] 
                    s1)
              | s1 = Borrow.borrow_final
                  <Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)>
                  { * _56}
                  {Borrow.get_id _56}
                  (fun (_ret':borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) ->
                     [ &_55 <- _ret' ] 
                     [ &_56 <- { _56 with current = ( ^ _55) ; } ] 
                    s2)
              | s2 = next'1 {_55} (fun (_ret':Core_Option_Option_Type.t_option (isize, isize)) ->  [ &_54 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = -{resolve'1 _56}- s1
              | s1 = any
                [ br0 -> {_54 = Core_Option_Option_Type.C_None } (! bb30)
                | br1 (a:(isize, isize))-> {_54 = Core_Option_Option_Type.C_Some a} (! bb29) ]
                 ]
              
            | bb29 = s0 [ s0 = bb31 ] 
            | bb31 = s0
              [ s0 = Core_Option_Option_Type.some <(isize, isize)> {_54}
                  (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_59 <- ([#"../06_knights_tour.rs" 148 8 149 54] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1))) : Snapshot.snap_ty (Seq.seq (isize, isize)) ]
                
                s2
              | s2 = bb32 ]
              
            | bb32 = s0
              [ s0 =  [ &produced1 <- _59 ] 
                (any [ any_ (_any:Snapshot.snap_ty (Seq.seq (isize, isize)))-> (!  [ &_59 <- _any ] s1) ] )
              | s1 =  [ &m <- __creusot_proc_iter_elem1 ] s2
              | s2 = -{resolve'2 __creusot_proc_iter_elem1}- s3
              | s3 =  [ &_65 <- m ] s4
              | s4 = mov'0 {p} {_65} (fun (_ret':C06KnightsTour_Point_Type.t_point) ->  [ &adj <- _ret' ] s5)
              | s5 = bb33 ]
              
            | bb33 = s0
              [ s0 = -{resolve'2 m}- s1
              | s1 = available'0 {board} {adj} (fun (_ret':bool) ->  [ &_66 <- _ret' ] s2)
              | s2 = bb34 ]
              
            | bb34 = s0 [ s0 = any [ br0 -> {_66 = false} (! bb38) | br1 -> {_66} (! bb35) ]  ] 
            | bb35 = s0
              [ s0 = count_degree'0 {board} {adj} (fun (_ret':usize) ->  [ &degree <- _ret' ] s1) | s1 = bb36 ]
              
            | bb36 = s0
              [ s0 = Borrow.borrow_mut
                  <Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)>
                  {candidates}
                  (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) ->
                     [ &_73 <- _ret' ] 
                     [ &candidates <-  ^ _73 ] 
                    s1)
              | s1 =  [ &_74 <- (degree, adj) ] s2
              | s2 = push'0 {_73} {_74} (fun (_ret':()) ->  [ &_72 <- _ret' ] s3)
              | s3 = bb37 ]
              
            | bb37 = s0 [ s0 =  [ &_34 <- [#"../06_knights_tour.rs" 152 36 155 13] () ] s1 | s1 = bb39 ] 
            | bb38 = s0 [ s0 =  [ &_34 <- [#"../06_knights_tour.rs" 155 13 155 13] () ] s1 | s1 = bb39 ] 
            | bb39 = s0 [ s0 = bb25 ]  ]
             ]
          
        | bb30 = s0 [ s0 = -{resolve'3 iter1}- s1 | s1 = bb40 ] 
        | bb40 = s0
          [ s0 =  [ &_81 <- candidates ] s1
          | s1 = min'0 {_81}
              (fun (_ret':Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) ->
                 [ &_79 <- _ret' ] 
                s2)
          | s2 = bb41 ]
          
        | bb41 = s0
          [ s0 = any
            [ br0 -> {_79 = Core_Option_Option_Type.C_None } (! bb44)
            | br1 (a:(usize, C06KnightsTour_Point_Type.t_point))-> {_79 = Core_Option_Option_Type.C_Some a} (! bb43) ]
             ]
          
        | bb43 = s0 [ s0 = bb45 ] 
        | bb45 = s0
          [ s0 = Core_Option_Option_Type.some <(usize, C06KnightsTour_Point_Type.t_point)> {_79}
              (fun (r0'0:(usize, C06KnightsTour_Point_Type.t_point)) ->  [ &adj1 <- let (_, r'0) = r0'0 in r'0 ] s1)
          | s1 = -{resolve'4 candidates}- s2
          | s2 =  [ &p <- adj1 ] s3
          | s3 = Borrow.borrow_mut <C06KnightsTour_Board_Type.t_board> {board}
              (fun (_ret':borrowed (C06KnightsTour_Board_Type.t_board)) ->  [ &_87 <- _ret' ]  [ &board <-  ^ _87 ] s4)
          | s4 = set'0 {_87} {p} {step} (fun (_ret':()) ->  [ &_86 <- _ret' ] s5)
          | s5 = bb46 ]
          
        | bb46 = s0 [ s0 =  [ &_34 <- [#"../06_knights_tour.rs" 145 33 162 5] () ] s1 | s1 = bb47 ] 
        | bb47 = s0 [ s0 = bb9 ]  ]
         ]
      
    | bb12 = s0 [ s0 = {[#"../06_knights_tour.rs" 142 4 142 36] false} any ] 
    | bb28 = s0
      [ s0 = -{resolve'3 iter1}- s1
      | s1 = -{resolve'4 candidates}- s2
      | s2 = {[#"../06_knights_tour.rs" 148 8 149 54] false} any ]
      
    | bb42 = s0 [ s0 = -{resolve'4 candidates}- s1 | s1 = {[#"../06_knights_tour.rs" 157 14 157 30] false} any ] 
    | bb44 = s0
      [ s0 = 
        [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board) ]
        
        s1
      | s1 = -{resolve'4 candidates}- s2
      | s2 = bb50 ]
      
    | bb50 = s0 [ s0 = bb51 ] 
    | bb51 = s0 [ s0 = bb52 ] 
    | bb14 = s0
      [ s0 = 
        [ &_0 <- Core_Option_Option_Type.C_Some board : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board) ]
        
        (any [ any_ (_any:C06KnightsTour_Board_Type.t_board)-> (!  [ &board <- _any ] s1) ] )
      | s1 = bb48 ]
      
    | bb48 = s0 [ s0 = bb49 ] 
    | bb49 = s0 [ s0 = bb52 ] 
    | bb52 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board) = any_l () : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)
    | & size : usize = size
    | & x : usize = x
    | & y : usize = y
    | & board : C06KnightsTour_Board_Type.t_board = any_l () : C06KnightsTour_Board_Type.t_board
    | & p : C06KnightsTour_Point_Type.t_point = any_l () : C06KnightsTour_Point_Type.t_point
    | & _10 : isize = any_l () : isize
    | & _12 : isize = any_l () : isize
    | & _14 : () = any_l () : ()
    | & _15 : borrowed (C06KnightsTour_Board_Type.t_board) = any_l () : borrowed (C06KnightsTour_Board_Type.t_board)
    | & _17 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & iter : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _21 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _22 : usize = any_l () : usize
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize)
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _34 : () = any_l () : ()
    | & _35 : Core_Option_Option_Type.t_option usize = any_l () : Core_Option_Option_Type.t_option usize
    | & _36 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & _37 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & __creusot_proc_iter_elem : usize = any_l () : usize
    | & _40 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & step : usize = any_l () : usize
    | & candidates : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)
    | & iter1 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    | & _46 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    | & iter_old1 : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) = any_l () : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    | & produced1 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l () : Snapshot.snap_ty (Seq.seq (isize, isize))
    | & _54 : Core_Option_Option_Type.t_option (isize, isize) = any_l () : Core_Option_Option_Type.t_option (isize, isize)
    | & _55 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    | & _56 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    | & __creusot_proc_iter_elem1 : (isize, isize) = any_l () : (isize, isize)
    | & _59 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l () : Snapshot.snap_ty (Seq.seq (isize, isize))
    | & m : (isize, isize) = any_l () : (isize, isize)
    | & adj : C06KnightsTour_Point_Type.t_point = any_l () : C06KnightsTour_Point_Type.t_point
    | & _65 : (isize, isize) = any_l () : (isize, isize)
    | & _66 : bool = any_l () : bool
    | & degree : usize = any_l () : usize
    | & _72 : () = any_l () : ()
    | & _73 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    | & _74 : (usize, C06KnightsTour_Point_Type.t_point) = any_l () : (usize, C06KnightsTour_Point_Type.t_point)
    | & _79 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) = any_l () : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    | & _81 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)
    | & adj1 : C06KnightsTour_Point_Type.t_point = any_l () : C06KnightsTour_Point_Type.t_point
    | & _86 : () = any_l () : ()
    | & _87 : borrowed (C06KnightsTour_Board_Type.t_board) = any_l () : borrowed (C06KnightsTour_Board_Type.t_board) ]
     [ return' (result:Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board))-> (! return' {result}) ] 
end
module C06KnightsTour_Impl2
  
end
module C06KnightsTour_Impl3
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  predicate invariant'1 (self : C06KnightsTour_Point_Type.t_point) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : C06KnightsTour_Point_Type.t_point)
  let rec inv'1 (_x:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : C06KnightsTour_Point_Type.t_point . inv'1 x = true
  predicate invariant'0 (self : C06KnightsTour_Point_Type.t_point) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06KnightsTour_Point_Type.t_point)
  let rec inv'0 (_x:C06KnightsTour_Point_Type.t_point) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06KnightsTour_Point_Type.t_point . inv'0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../06_knights_tour.rs" 4 15 4 20] forall self : C06KnightsTour_Point_Type.t_point . inv'0 self
   -> (forall result : C06KnightsTour_Point_Type.t_point . result = self  -> inv'1 result /\ result = self)
end
