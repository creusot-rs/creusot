module T_06_knights_tour__Point [#"06_knights_tour.rs" 5 0 5 12]
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  type t_Point  =
    | C_Point isize isize
  
  let rec t_Point (input:t_Point) (ret  (x:isize) (y:isize))= any
    [ good (x:isize) (y:isize)-> {C_Point x y = input} (! ret {x} {y}) ]
    
  
  function t_Point__x (self : t_Point) : isize =
    match self with
      | C_Point a _ -> a
      end
  
  function t_Point__y (self : t_Point) : isize =
    match self with
      | C_Point _ a -> a
      end
end
module M_06_knights_tour__qyi50474406909270761__clone [#"06_knights_tour.rs" 4 15 4 20] (* <Point as creusot_contracts::Clone> *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 4 15 4 20
  let%span sclone1 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  let rec clone'0 (self:isize) (return'  (ret:isize))= any
    [ return' (result:isize)-> {[%#sclone1] result = self} (! return' {result}) ]
    
  
  use T_06_knights_tour__Point as Point'0
  
  meta "compute_max_steps" 1000000
  
  let rec clone' (self:Point'0.t_Point) (return'  (ret:Point'0.t_Point))= (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_Point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_5 <- rx'0 ] s1)
      | s1 = clone'0 {_5} (fun (_ret':isize) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Point'0.t_Point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_8 <- ry'0 ] s1)
      | s1 = clone'0 {_8} (fun (_ret':isize) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Point'0.C_Point _3 _6 ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : Point'0.t_Point = any_l ()
    | & self : Point'0.t_Point = self
    | & _3 : isize = any_l ()
    | & _5 : isize = any_l ()
    | & _6 : isize = any_l ()
    | & _8 : isize = any_l () ]
    
    [ return' (result:Point'0.t_Point)-> {[@expl:postcondition] [%#s06_knights_tour0] result = self}
      (! return' {result}) ]
    
end
module M_06_knights_tour__qyi18370800917002056__mov [#"06_knights_tour.rs" 18 4 18 45] (* Point *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour1 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour2 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour3 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour4 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour5 = "06_knights_tour.rs" 17 14 17 41
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use T_06_knights_tour__Point as Point'0
  
  use prelude.prelude.Int
  
  use prelude.prelude.IntSize
  
  meta "compute_max_steps" 1000000
  
  let rec mov (self:Point'0.t_Point) (p:(isize, isize)) (return'  (ret:Point'0.t_Point))= {[%#s06_knights_tour3] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[%#s06_knights_tour2] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[%#s06_knights_tour1] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) <= 10000}
    {[%#s06_knights_tour0] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) <= 10000}
    (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_Point {self}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.add {rx'0} {let (r'0, _) = p in r'0} (fun (_ret':isize) ->  [ &_9 <- _ret' ] s1))
      | s1 = Point'0.t_Point {self}
          (fun (rx'1:isize) (ry'1:isize) ->
            IntSize.add {ry'1} {let (_, r'1) = p in r'1} (fun (_ret':isize) ->  [ &_12 <- _ret' ] s2))
      | s2 =  [ &_0 <- Point'0.C_Point _9 _12 ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : Point'0.t_Point = any_l ()
    | & self : Point'0.t_Point = self
    | & p : (isize, isize) = p
    | & _9 : isize = any_l ()
    | & _12 : isize = any_l () ]
    
    [ return' (result:Point'0.t_Point)-> {[@expl:postcondition] [%#s06_knights_tour5] IntSize.to_int (T_06_knights_tour__Point.t_Point__y result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) + IntSize.to_int (let (_, a) = p in a)}
      {[@expl:postcondition] [%#s06_knights_tour4] IntSize.to_int (T_06_knights_tour__Point.t_Point__x result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_06_knights_tour__Board [#"06_knights_tour.rs" 23 0 23 16]
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Board  =
    | C_Board usize (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  let rec t_Board (input:t_Board) (ret  (size:usize) (field:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= any
    [ good (size:usize) (field:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {C_Board size field
      = input}
      (! ret {size} {field}) ]
    
  
  function t_Board__size (self : t_Board) : usize =
    match self with
      | C_Board a _ -> a
      end
  
  function t_Board__field (self : t_Board) : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) =
    match self with
      | C_Board _ a -> a
      end
end
module T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv [#"../../../../creusot-contracts/src/std/iter/map_inv.rs" 3 0 3 26]
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  type t_MapInv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
  
  let rec t_MapInv < 'i > < 'b > < 'f > (input:t_MapInv 'i 'b 'f) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced = input}
      (! ret {iter} {func} {produced}) ]
    
  
  function t_MapInv__produced (self : t_MapInv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b) =
    match self with
      | C_MapInv _ _ a -> a
      end
  
  function t_MapInv__iter (self : t_MapInv 'i 'b 'f) : 'i =
    match self with
      | C_MapInv a _ _ -> a
      end
  
  function t_MapInv__func (self : t_MapInv 'i 'b 'f) : 'f =
    match self with
      | C_MapInv _ a _ -> a
      end
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'}) ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_06_knights_tour__qyi4580598960913230815__new__qyClosure3 [#"06_knights_tour.rs" 43 16 43 50] (* Board *)
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_06_knights_tour__qyi4580598960913230815__new__qyClosure3  =
    | M_06_knights_tour__qyi4580598960913230815__new__qyClosure3 usize
  
  let rec m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 (input:m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (ret  (size:usize))= any
    [ good (size:usize)-> {M_06_knights_tour__qyi4580598960913230815__new__qyClosure3 size = input} (! ret {size}) ]
    
end
module M_06_knights_tour__qyi4580598960913230815__new__qyClosure3 [#"06_knights_tour.rs" 43 16 43 50] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 44 28 44 29
  let%span s06_knights_tour1 = "06_knights_tour.rs" 43 26 43 48
  let%span svec2 = "../../../../creusot-contracts/src/std/vec.rs" 183 22 183 41
  let%span svec3 = "../../../../creusot-contracts/src/std/vec.rs" 184 12 184 78
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops6 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'1 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : usize [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use T_06_knights_tour__qyi4580598960913230815__new__qyClosure3 as Closure'0
  
  function field_0'0 [#"06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) : usize
    
   =
    let Closure'0.M_06_knights_tour__qyi4580598960913230815__new__qyClosure3 a = self in a
  
  predicate unnest'0 [#"06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (_2 : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    field_0'0 _2 = field_0'0 self
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'0_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec4] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#sops6] Seq.get (view'0 self) ix
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] inv'0 elem}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {inv'1 result}
      {[%#svec3] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#svec2] Seq.length (view'0 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 (_1:borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (_2:usize) (_3:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 {_1.current}
          (fun (r'0:usize) ->
            from_elem'0 {[%#s06_knights_tour0] (0 : usize)} {r'0}
              (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &res <- _ret' ] s2))
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _1 : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 = _1
    | & res : Vec'0.t_Vec usize (Global'0.t_Global) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_knights_tour1] Seq.length (view'0 result) = UIntSize.to_int (field_0'0 _1.final)}
      (! return' {result}) ]
    
end
module M_06_knights_tour__qyi4580598960913230815__new [#"06_knights_tour.rs" 40 4 40 31] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 41 20 41 21
  let%span s06_knights_tour1 = "06_knights_tour.rs" 37 15 37 28
  let%span s06_knights_tour2 = "06_knights_tour.rs" 38 14 38 33
  let%span s06_knights_tour3 = "06_knights_tour.rs" 39 14 39 25
  let%span siter4 = "../../../../creusot-contracts/src/std/iter.rs" 53 4 55 71
  let%span siter5 = "../../../../creusot-contracts/src/std/iter.rs" 56 15 56 51
  let%span siter6 = "../../../../creusot-contracts/src/std/iter.rs" 57 15 57 70
  let%span siter7 = "../../../../creusot-contracts/src/std/iter.rs" 59 21 59 25
  let%span siter8 = "../../../../creusot-contracts/src/std/iter.rs" 59 27 59 31
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 58 14 58 88
  let%span siter10 = "../../../../creusot-contracts/src/std/iter.rs" 59 4 62 61
  let%span siter11 = "../../../../creusot-contracts/src/std/iter.rs" 173 16 175 83
  let%span s06_knights_tour12 = "06_knights_tour.rs" 31 8 35 9
  let%span srange13 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange14 = "../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange15 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange16 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange17 = "../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange18 = "../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange19 = "../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange20 = "../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span srange21 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span smap_inv22 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 165 8 171 9
  let%span smap_inv23 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 152 8 159 9
  let%span smap_inv24 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9
  let%span smap_inv25 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 45 8 58 9
  let%span svec26 = "../../../../creusot-contracts/src/std/vec.rs" 292 20 292 32
  let%span svec27 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops28 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span snum29 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span srange30 = "../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span smap_inv31 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 127 8 131 9
  let%span smap_inv32 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 66 8 66 50
  let%span smap_inv33 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 25 15 25 24
  let%span smap_inv34 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 26 14 26 45
  let%span smap_inv35 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 33 15 33 21
  let%span smap_inv36 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 34 15 34 21
  let%span smap_inv37 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 35 15 35 21
  let%span smap_inv38 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 36 15 36 32
  let%span smap_inv39 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 15 37 32
  let%span smap_inv40 = "../../../../creusot-contracts/src/std/iter/map_inv.rs" 38 14 38 42
  let%span sresolve41 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant42 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use T_06_knights_tour__qyi4580598960913230815__new__qyClosure3 as Closure'0
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate inv'11 (_1 : Seq.seq (borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3))
  
  axiom inv_axiom'11 [@rewrite] : forall x : Seq.seq (borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) [inv'11 x] . inv'11 x
  = true
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'10 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv_axiom'10 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'10 x] . inv'10 x = true
  
  predicate inv'9 (_1 : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
  
  axiom inv_axiom'9 [@rewrite] : forall x : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 [inv'9 x] . inv'9 x
  = true
  
  use seq.Seq
  
  predicate inv'8 (_1 : Seq.seq usize)
  
  axiom inv_axiom'8 [@rewrite] : forall x : Seq.seq usize [inv'8 x] . inv'8 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'7 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'7 x] . inv'7 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'6 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv_axiom'6 [@rewrite] : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) [inv'6 x] . inv'6 x
  = true
  
  use seq.Seq
  
  use T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv as MapInv'0
  
  use seq.Seq
  
  function field_0'0 [#"06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) : usize
    
   =
    let Closure'0.M_06_knights_tour__qyi4580598960913230815__new__qyClosure3 a = self in a
  
  predicate unnest'0 [#"06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (_2 : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    field_0'0 _2 = field_0'0 self
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'1_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec27] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use prelude.prelude.Snapshot
  
  predicate postcondition_mut'0 [#"06_knights_tour.rs" 43 16 43 50] (self : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize))) (result : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    (let (_2, _3) = args in Seq.length (view'1 result) = UIntSize.to_int (field_0'0 self.final))
    /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  predicate precondition'0 [#"06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize)))
    
   =
    let (_2, _3) = args in true
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv as T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv
  
  function deep_model'0 (self : usize) : int =
    [%#snum29] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#srange21] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  use T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv as T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv
  
  use seq.Seq
  
  use seq.Seq
  
  use T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv as T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv
  
  predicate produces'1 [@inline:trivial] (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (visited : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (succ : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    [%#smap_inv25] unnest'0 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self) (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func succ)
    /\ (exists fs : Seq.seq (borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) . inv'11 fs
    /\ Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq usize . inv'8 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self) s (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter succ)
    /\ Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced succ)
    = Seq.(++) (Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self)) s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self
      = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func succ
    else
      (Seq.get fs 0).current = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final
      = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self)) (Seq.([..]) s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self)) (Seq.([..]) s 0 i))) (Seq.get visited i))))
  
  predicate inv'3 (_1 : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
  
  function produces_trans'3 (a : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (ab : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (b : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (bc : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (c : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) : ()
    
  
  axiom produces_trans'3_spec : forall a : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3, ab : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)), b : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3, bc : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)), c : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 . ([%#smap_inv35] inv'3 a)
   -> ([%#smap_inv36] inv'3 b)
   -> ([%#smap_inv37] inv'3 c)
   -> ([%#smap_inv38] produces'1 a ab b)
   -> ([%#smap_inv39] produces'1 b bc c)  -> ([%#smap_inv40] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'3 (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) : ()
    
  
  axiom produces_refl'3_spec : forall self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 . ([%#smap_inv33] inv'3 self)
   -> ([%#smap_inv34] produces'1 self (Seq.empty  : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) self)
  
  predicate inv'5 (_1 : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) [inv'5 x] . inv'5 x = true
  
  predicate invariant'1 (self : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3))
    
   =
    [%#sinvariant42] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3))
    
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) [inv'4 x] . inv'4 x
  = invariant'1 x
  
  predicate invariant'0 (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
  
  axiom inv_axiom'3 [@rewrite] : forall x : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 [inv'3 x] . inv'3 x
  = (invariant'0 x
  /\ match x with
    | MapInv'0.C_MapInv iter func produced -> true
    end)
  
  predicate inv'2 (_1 : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 [inv'2 x] . inv'2 x
  = true
  
  predicate inv'1 (_1 : Range'0.t_Range usize)
  
  function produces_trans'2 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'2_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange15] inv'1 a)
   -> ([%#srange16] inv'1 b)
   -> ([%#srange17] inv'1 c)
   -> ([%#srange18] produces'0 a ab b)
   -> ([%#srange19] produces'0 b bc c)  -> ([%#srange20] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'2 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'2_spec : forall self : Range'0.t_Range usize . ([%#srange13] inv'1 self)
   -> ([%#srange14] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Range'0.t_Range usize [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : usize [inv'0 x] . inv'0 x = true
  
  function produces_trans'1 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange15] inv'1 a)
   -> ([%#srange16] inv'1 b)
   -> ([%#srange17] inv'1 c)
   -> ([%#srange18] produces'0 a ab b)
   -> ([%#srange19] produces'0 b bc c)  -> ([%#srange20] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_Range usize . ([%#srange13] inv'1 self)
   -> ([%#srange14] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  function view'0 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom view'0_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#svec27] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#sops28] Seq.get (view'0 self) ix
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use T_06_knights_tour__Board as Board'0
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#s06_knights_tour12] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (view'0 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (view'1 (index_logic'0 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Intrinsic
  
  predicate from_iter_post'0 (prod : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (res : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
    
   =
    [%#svec26] prod = view'0 res
  
  predicate resolve'2 (self : borrowed (Range'0.t_Range usize)) =
    [%#sresolve41] self.final = self.current
  
  predicate completed'1 (self : borrowed (Range'0.t_Range usize)) =
    [%#srange30] resolve'2 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  predicate completed'0 (self : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3))
    
   =
    [%#smap_inv24] Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self.final)
    = (Seq.empty  : Seq.seq usize)
    /\ completed'1 (Borrow.borrow_logic (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self.current) (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self.current
    = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self.final
  
  predicate resolve'5 [#"06_knights_tour.rs" 43 16 43 50] (_1 : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    true
  
  predicate resolve'4 (_1 : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) =
    resolve'5 _1
  
  predicate resolve'3 (_1 : Range'0.t_Range usize) =
    true
  
  predicate resolve'1 (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    [%#smap_inv32] resolve'3 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self)
    /\ resolve'4 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self)
  
  predicate resolve'0 (_1 : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    resolve'1 _1
  
  let rec collect'0 (self:MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (return'  (ret:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {inv'6 result}
      {[%#siter11] exists done' : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3), prod : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'4 done'
      /\ inv'5 prod
      /\ resolve'0 done'.final
      /\ completed'0 done' /\ produces'1 self prod done'.current /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate preservation'0 (iter : Range'0.t_Range usize) (func : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)
    
   =
    [%#smap_inv23] forall s : Seq.seq usize, e1 : usize, e2 : usize, f : borrowed Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3, b : Vec'0.t_Vec usize (Global'0.t_Global), i : Range'0.t_Range usize . inv'8 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'9 f /\ inv'10 b /\ inv'1 i /\ unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate next_precondition'0 (iter : Range'0.t_Range usize) (func : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (produced : Seq.seq usize)
    
   =
    [%#smap_inv31] forall e : usize, i : Range'0.t_Range usize . inv'0 e
    /\ inv'1 i /\ produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate reinitialize'0 (_1 : ()) =
    [%#smap_inv22] forall iter : borrowed (Range'0.t_Range usize), func : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 . inv'7 iter
    /\ inv'2 func
     -> completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq usize) /\ preservation'0 iter.final func
  
  let rec map_inv'0 (self:Range'0.t_Range usize) (func:Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) (return'  (ret:MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3))= {[@expl:precondition] [%#siter8] inv'2 func}
    {[@expl:precondition] [%#siter7] inv'1 self}
    {[@expl:precondition] [%#siter6] preservation'0 self func}
    {[@expl:precondition] [%#siter5] reinitialize'0 ()}
    {[@expl:precondition] [%#siter4] forall e : usize, i2 : Range'0.t_Range usize . inv'0 e /\ inv'1 i2
     -> produces'0 self (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq usize))}
    any
    [ return' (result:MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3)-> {[%#siter10] inv'3 result}
      {[%#siter9] result = MapInv'0.C_MapInv self func (Snapshot.new (Seq.empty  : Seq.seq usize))}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec new (size:usize) (return'  (ret:Board'0.t_Board))= {[%#s06_knights_tour1] UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#s06_knights_tour0] (0 : usize)) size ] s1
      | s1 =  [ &_9 <- Closure'0.M_06_knights_tour__qyi4580598960913230815__new__qyClosure3 size ] s2
      | s2 = map_inv'0 {_7} {_9}
          (fun (_ret':MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3) ->
             [ &_6 <- _ret' ] 
            s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = collect'0 {_6}
          (fun (_ret':Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
             [ &rows <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Board'0.C_Board size rows ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : Board'0.t_Board = any_l ()
    | & size : usize = size
    | & rows : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) = any_l ()
    | & _6 : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 = any_l ()
    | & _7 : Range'0.t_Range usize = any_l ()
    | & _9 : Closure'0.m_06_knights_tour__qyi4580598960913230815__new__qyClosure3 = any_l () ]
    
    [ return' (result:Board'0.t_Board)-> {[@expl:postcondition] [%#s06_knights_tour3] wf'0 result}
      {[@expl:postcondition] [%#s06_knights_tour2] T_06_knights_tour__Board.t_Board__size result = size}
      (! return' {result}) ]
    
end
module M_06_knights_tour__qyi4580598960913230815__available [#"06_knights_tour.rs" 52 4 52 41] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 53 8 53 9
  let%span s06_knights_tour1 = "06_knights_tour.rs" 55 15 55 16
  let%span s06_knights_tour2 = "06_knights_tour.rs" 57 57 57 58
  let%span s06_knights_tour3 = "06_knights_tour.rs" 53 8 57 58
  let%span s06_knights_tour4 = "06_knights_tour.rs" 50 15 50 24
  let%span s06_knights_tour5 = "06_knights_tour.rs" 51 4 51 44
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span s06_knights_tour8 = "06_knights_tour.rs" 31 8 35 9
  let%span s06_knights_tour9 = "06_knights_tour.rs" 63 12 63 75
  let%span smodel10 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sslice11 = "../../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span svec13 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops14 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : usize [inv'3 x] . inv'3 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) [inv'0 x] . inv'0 x
  = true
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.UIntSize
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Point as Point'0
  
  use T_06_knights_tour__Board as Board'0
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#s06_knights_tour9] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'3_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec13] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function view'2 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom view'2_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#svec13] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#sops14] Seq.get (view'2 self) ix
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#s06_knights_tour8] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (view'2 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (view'3 (index_logic'0 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#sslice12] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#sslice11] UIntSize.to_int self < Seq.length seq
  
  function view'1 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize =
    [%#smodel10] view'3 self
  
  let rec index'1 (self:Vec'0.t_Vec usize (Global'0.t_Global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#svec6] in_bounds'2 index (view'1 self)}
    any
    [ return' (result:usize)-> {inv'3 result} {[%#svec7] has_value'1 index (view'1 self) result} (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#sslice12] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#sslice11] UIntSize.to_int self < Seq.length seq
  
  function view'0 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#smodel10] view'2 self
  
  let rec index'0 (self:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (index:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#svec6] in_bounds'1 index (view'0 self)}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {inv'2 result}
      {[%#svec7] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
    
  
  use prelude.prelude.IntSize
  
  meta "compute_max_steps" 1000000
  
  let rec available (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:bool))= {[%#s06_knights_tour4] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[%#s06_knights_tour0] (0 : isize)} {rx'0} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1))
      | s1 = any [ br0 -> {_5 = false} (! bb8) | br1 -> {_5} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_8 <- _res ] s1))
      | s1 = Board'0.t_Board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            UIntSize.lt {_8} {rsize'0} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2))
      | s2 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[%#s06_knights_tour1] (0 : isize)} {ry'0} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1))
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_14 <- _res ] s1))
      | s1 = Board'0.t_Board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            UIntSize.lt {_14} {rsize'0} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2))
      | s2 = any [ br0 -> {_13 = false} (! bb5) | br1 -> {_13} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_22 <- _res ] s1))
      | s1 = Board'0.t_Board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            index'0 {rfield'0} {_22} (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_20 <- _ret' ] s2))
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_24 <- _res ] s1))
      | s1 = index'1 {_20} {_24} (fun (_ret':usize) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 = UIntSize.eq {_18} {[%#s06_knights_tour2] (0 : usize)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb5 = bb9
    | bb6 = bb9
    | bb7 = bb9
    | bb8 = bb9
    | bb9 = s0 [ s0 =  [ &_0 <- [%#s06_knights_tour3] false ] s1 | s1 = bb12 ] 
    | bb12 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Board'0.t_Board = self
    | & p : Point'0.t_Point = p
    | & _5 : bool = any_l ()
    | & _7 : bool = any_l ()
    | & _8 : usize = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : bool = any_l ()
    | & _14 : usize = any_l ()
    | & _18 : usize = any_l ()
    | & _20 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _22 : usize = any_l ()
    | & _24 : usize = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#s06_knights_tour5] result  -> in_bounds'0 self p}
      (! return' {result}) ]
    
end
module T_core__mem__manually_drop__ManuallyDrop
  type t_ManuallyDrop 't =
    | C_ManuallyDrop 't
  
  let rec t_ManuallyDrop < 't > (input:t_ManuallyDrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value}) ]
    
end
module T_alloc__vec__into_iter__IntoIter
  use prelude.prelude.Opaque
  
  use T_core__mem__manually_drop__ManuallyDrop as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_IntoIter 't 'a =
    | C_IntoIter (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't) usize (ManuallyDrop'0.t_ManuallyDrop 'a) (NonNull'0.t_NonNull 't) opaque_ptr
  
  let rec t_IntoIter < 't > < 'a > (input:t_IntoIter 't 'a) (ret  (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'}) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_06_knights_tour__qyi4580598960913230815__count_degree [#"06_knights_tour.rs" 70 4 70 45] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 71 24 71 25
  let%span s06_knights_tour1 = "06_knights_tour.rs" 74 17 74 24
  let%span s06_knights_tour2 = "06_knights_tour.rs" 73 8 73 46
  let%span s06_knights_tour3 = "06_knights_tour.rs" 73 8 73 46
  let%span s06_knights_tour4 = "06_knights_tour.rs" 73 8 73 46
  let%span s06_knights_tour5 = "06_knights_tour.rs" 73 20 73 44
  let%span s06_knights_tour6 = "06_knights_tour.rs" 73 8 73 46
  let%span s06_knights_tour7 = "06_knights_tour.rs" 77 25 77 26
  let%span s06_knights_tour8 = "06_knights_tour.rs" 68 15 68 24
  let%span s06_knights_tour9 = "06_knights_tour.rs" 69 15 69 32
  let%span s06_knights_tour10 = "06_knights_tour.rs" 93 10 93 28
  let%span s06_knights_tour11 = "06_knights_tour.rs" 94 0 94 130
  let%span siter12 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span svec13 = "../../../../creusot-contracts/src/std/vec.rs" 269 12 269 41
  let%span siter14 = "../../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span s06_knights_tour15 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour16 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour17 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour18 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour19 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour20 = "06_knights_tour.rs" 17 14 17 41
  let%span s06_knights_tour21 = "06_knights_tour.rs" 50 15 50 24
  let%span s06_knights_tour22 = "06_knights_tour.rs" 51 4 51 44
  let%span s06_knights_tour23 = "06_knights_tour.rs" 31 8 35 9
  let%span s06_knights_tour24 = "06_knights_tour.rs" 63 12 63 75
  let%span svec25 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops26 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec27 = "../../../../creusot-contracts/src/std/vec.rs" 194 20 194 24
  let%span svec28 = "../../../../creusot-contracts/src/std/vec.rs" 200 20 200 33
  let%span svec29 = "../../../../creusot-contracts/src/std/vec.rs" 275 14 275 45
  let%span svec30 = "../../../../creusot-contracts/src/std/vec.rs" 273 4 273 10
  let%span svec31 = "../../../../creusot-contracts/src/std/vec.rs" 282 15 282 32
  let%span svec32 = "../../../../creusot-contracts/src/std/vec.rs" 283 15 283 32
  let%span svec33 = "../../../../creusot-contracts/src/std/vec.rs" 284 14 284 42
  let%span svec34 = "../../../../creusot-contracts/src/std/vec.rs" 280 4 280 10
  let%span svec35 = "../../../../creusot-contracts/src/std/vec.rs" 262 20 262 57
  let%span sresolve36 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel37 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option (isize, isize))
  
  axiom inv_axiom'4 [@rewrite] : forall x : Option'0.t_Option (isize, isize) [inv'4 x] . inv'4 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) [inv'3 x] . inv'3 x
  = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  predicate produces'0 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (visited : Seq.seq (isize, isize)) (rhs : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#svec13] view'1 self = Seq.(++) visited (view'1 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (ab : Seq.seq (isize, isize)) (b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (bc : Seq.seq (isize, isize)) (c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : ()
    
   =
    [%#svec34] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), ab : Seq.seq (isize, isize), b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), bc : Seq.seq (isize, isize), c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . ([%#svec31] produces'0 a ab b)
   -> ([%#svec32] produces'0 b bc c)  -> ([%#svec33] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : () =
    [%#svec30] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . [%#svec29] produces'0 self (Seq.empty  : Seq.seq (isize, isize)) self
  
  predicate inv'1 (_1 : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
  
  axiom inv_axiom'1 [@rewrite] : forall x : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) [inv'1 x] . inv'1 x
  = true
  
  predicate inv'0 (_1 : Seq.seq (isize, isize))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq (isize, isize) [inv'0 x] . inv'0 x = true
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.UIntSize
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Point as Point'0
  
  use T_06_knights_tour__Board as Board'0
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#s06_knights_tour24] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use seq.Seq
  
  use seq.Seq
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'3_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec25] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  use T_alloc__vec__Vec as Vec'0
  
  use seq.Seq
  
  function view'2 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom view'2_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#svec25] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#sops26] Seq.get (view'2 self) ix
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#s06_knights_tour23] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (view'2 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (view'3 (index_logic'1 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec available'0 (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:bool))= {[@expl:precondition] [%#s06_knights_tour21] wf'0 self}
    any [ return' (result:bool)-> {[%#s06_knights_tour22] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec mov'0 (self:Point'0.t_Point) (p:(isize, isize)) (return'  (ret:Point'0.t_Point))= {[@expl:precondition] [%#s06_knights_tour18] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [%#s06_knights_tour17] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [%#s06_knights_tour16] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) <= 10000}
    {[@expl:precondition] [%#s06_knights_tour15] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) <= 10000}
    any
    [ return' (result:Point'0.t_Point)-> {[%#s06_knights_tour20] IntSize.to_int (T_06_knights_tour__Point.t_Point__y result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) + IntSize.to_int (let (_, a) = p in a)}
      {[%#s06_knights_tour19] IntSize.to_int (T_06_knights_tour__Point.t_Point__x result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    resolve'1 _1
  
  function view'4 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) : Seq.seq (isize, isize)
   =
    [%#smodel37] view'1 self.current
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#svec35] resolve'1 self /\ view'4 self = (Seq.empty  : Seq.seq (isize, isize))
  
  let rec next'0 (self:borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) (return'  (ret:Option'0.t_Option (isize, isize)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Option'0.t_Option (isize, isize))-> {inv'4 result}
      {[%#siter14] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'0 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  axiom view'0_spec : forall self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) . [%#svec25] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#svec28] view'0 self = view'1 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) =
    [%#svec27] true
  
  let rec into_iter'0 (self:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (return'  (ret:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#siter12] into_iter_pre'0 self}
    any
    [ return' (result:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))-> {inv'1 result}
      {[%#siter12] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (ix : int) : (isize, isize)
    
   =
    [%#sops26] Seq.get (view'0 self) ix
  
  let rec moves'0 (_1:()) (return'  (ret:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (isize, isize) (Global'0.t_Global))-> {[%#s06_knights_tour11] forall i : int . 0 <= i
      /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'0 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'0 result i in a) <= 2}
      {[%#s06_knights_tour10] Seq.length (view'0 result) = 8}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec count_degree (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:usize))= {[%#s06_knights_tour9] in_bounds'0 self p}
    {[%#s06_knights_tour8] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [%#s06_knights_tour0] (0 : usize) ] s1
      | s1 = moves'0 {[%#s06_knights_tour1] ()}
          (fun (_ret':Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_8}
          (fun (_ret':IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour2] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &produced <- [%#s06_knights_tour3] Snapshot.new (Seq.empty  : Seq.seq (isize, isize)) ] s1 | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#s06_knights_tour5] UIntSize.to_int count
        <= Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#s06_knights_tour4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour4] inv'1 iter}
        {[@expl:loop invariant] [%#s06_knights_tour4] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)> {iter}
              (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                 [ &_20 <- _ret' ] 
                 [ &iter <- _ret'.final ] 
                s1)
          | s1 = Borrow.borrow_final
              <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)>
              {_20.current}
              {Borrow.get_id _20}
              (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_Option (isize, isize)) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any
            [ br0 -> {_18 = Option'0.C_None } (! bb12) | br1 (a:(isize, isize))-> {_18 = Option'0.C_Some a} (! bb11) ]
             ]
          
        | bb11 = bb13
        | bb13 = s0
          [ s0 = Option'0.v_Some <(isize, isize)> {_18}
              (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#s06_knights_tour6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _23 ] s1
          | s1 =  [ &m <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_29 <- m ] s3
          | s3 = mov'0 {p} {_29} (fun (_ret':Point'0.t_Point) ->  [ &next <- _ret' ] s4)
          | s4 = bb15 ]
          
        | bb15 = s0 [ s0 = available'0 {self} {next} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1) | s1 = bb16 ] 
        | bb16 = any [ br0 -> {_30 = false} (! bb18) | br1 -> {_30} (! bb17) ] 
        | bb17 = s0
          [ s0 = UIntSize.add {count} {[%#s06_knights_tour7] (1 : usize)} (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 = bb19 ]
          
        | bb18 = bb19
        | bb19 = bb7 ]
         ]
      
    | bb12 = bb20
    | bb20 = s0 [ s0 =  [ &_0 <- count ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : Board'0.t_Board = self
    | & p : Point'0.t_Point = p
    | & count : usize = any_l ()
    | & iter : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) = any_l ()
    | & _8 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) = any_l ()
    | & iter_old : Snapshot.snap_ty (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & _18 : Option'0.t_Option (isize, isize) = any_l ()
    | & _19 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & _20 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & __creusot_proc_iter_elem : (isize, isize) = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & m : (isize, isize) = any_l ()
    | & next : Point'0.t_Point = any_l ()
    | & _29 : (isize, isize) = any_l ()
    | & _30 : bool = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_06_knights_tour__qyi4580598960913230815__set [#"06_knights_tour.rs" 87 4 87 41] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 83 15 83 24
  let%span s06_knights_tour1 = "06_knights_tour.rs" 84 15 84 32
  let%span s06_knights_tour2 = "06_knights_tour.rs" 85 14 85 26
  let%span s06_knights_tour3 = "06_knights_tour.rs" 86 14 86 42
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span svec5 = "../../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span s06_knights_tour9 = "06_knights_tour.rs" 31 8 35 9
  let%span s06_knights_tour10 = "06_knights_tour.rs" 63 12 63 75
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 140 8 140 96
  let%span sresolve16 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops17 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : borrowed usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed usize [inv'3 x] . inv'3 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) [inv'0 x] . inv'0 x
  = true
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Point as Point'0
  
  use T_06_knights_tour__Board as Board'0
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#s06_knights_tour10] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'3_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec14] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function view'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom view'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#svec14] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#sops17] Seq.get (view'1 self) ix
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#s06_knights_tour9] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (view'1 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (view'3 (index_logic'0 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed (Board'0.t_Board)) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Board'0.t_Board)) =
    resolve'5 _1
  
  predicate resolve'4 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    resolve'4 _1
  
  predicate resolve'3 (self : borrowed usize) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed usize) =
    resolve'3 _1
  
  use seq.Seq
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#sslice15] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#sslice13] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#sslice12] UIntSize.to_int self < Seq.length seq
  
  function view'2 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#smodel11] view'3 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#svec4] in_bounds'2 index (view'2 self)}
    any
    [ return' (result:borrowed usize)-> {inv'3 result}
      {[%#svec8] Seq.length (view'3 self.final) = Seq.length (view'2 self)}
      {[%#svec7] resolve_elswhere'1 index (view'2 self) (view'3 self.final)}
      {[%#svec6] has_value'1 index (view'3 self.final) result.final}
      {[%#svec5] has_value'1 index (view'2 self) result.current}
      (! return' {result}) ]
    
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (fin : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
    
   =
    [%#sslice15] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#sslice13] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#sslice12] UIntSize.to_int self < Seq.length seq
  
  function view'0 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#smodel11] view'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))))= {[@expl:precondition] inv'1 index}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#svec4] in_bounds'1 index (view'0 self)}
    any
    [ return' (result:borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))-> {inv'2 result}
      {[%#svec8] Seq.length (view'1 self.final) = Seq.length (view'0 self)}
      {[%#svec7] resolve_elswhere'0 index (view'0 self) (view'1 self.final)}
      {[%#svec6] has_value'0 index (view'1 self.final) result.final}
      {[%#svec5] has_value'0 index (view'0 self) result.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.IntSize
  
  meta "compute_max_steps" 1000000
  
  let rec set (self:borrowed (Board'0.t_Board)) (p:Point'0.t_Point) (v:usize) (return'  (ret:()))= {[%#s06_knights_tour1] in_bounds'0 self.current p}
    {[%#s06_knights_tour0] wf'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Board'0.t_Board {self.current}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            Borrow.borrow_final
              <Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)>
              {rfield'0}
              {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) ->
                 [ &_12 <- _ret' ] 
                 [ &self <- { self with current = Board'0.C_Board rsize'0 _ret'.final ; } ] 
                s1))
      | s1 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_13 <- _res ] s2))
      | s2 = index_mut'0 {_12} {_13}
          (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {_11.current} {Borrow.get_id _11}
          (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
             [ &_10 <- _ret' ] 
             [ &_11 <- { _11 with current = _ret'.final ; } ] 
            s1)
      | s1 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_15 <- _res ] s2))
      | s2 = index_mut'1 {_10} {_15} (fun (_ret':borrowed usize) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'1 _11}- s3
      | s3 = -{resolve'2 self}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Board'0.t_Board) = self
    | & p : Point'0.t_Point = p
    | & v : usize = v
    | & _9 : borrowed usize = any_l ()
    | & _10 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _11 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _12 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) = any_l ()
    | & _13 : usize = any_l ()
    | & _15 : usize = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s06_knights_tour3] T_06_knights_tour__Board.t_Board__size self.final
      = T_06_knights_tour__Board.t_Board__size self.current}
      {[@expl:postcondition] [%#s06_knights_tour2] wf'0 self.final}
      (! return' {result}) ]
    
end
module T_core__slice__iter__Iter
  use prelude.prelude.Borrow
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Iter 't =
    | C_Iter (NonNull'0.t_NonNull 't) opaque_ptr (PhantomData'0.t_PhantomData 't)
  
  let rec t_Iter < 't > (input:t_Iter 't) (ret  (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker}) ]
    
end
module M_06_knights_tour__min [#"06_knights_tour.rs" 110 0 110 58]
  let%span s06_knights_tour0 = "06_knights_tour.rs" 112 4 113 74
  let%span s06_knights_tour1 = "06_knights_tour.rs" 112 4 113 74
  let%span s06_knights_tour2 = "06_knights_tour.rs" 112 4 113 74
  let%span s06_knights_tour3 = "06_knights_tour.rs" 112 4 113 74
  let%span s06_knights_tour4 = "06_knights_tour.rs" 108 0 109 62
  let%span siter5 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 410 12 410 66
  let%span smodel7 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sops8 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 208 20 208 24
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 214 20 214 34
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 418 14 418 45
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 416 4 416 10
  let%span sslice14 = "../../../../creusot-contracts/src/std/slice.rs" 425 15 425 32
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 426 15 426 32
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 427 14 427 42
  let%span sslice17 = "../../../../creusot-contracts/src/std/slice.rs" 423 4 423 10
  let%span sslice18 = "../../../../creusot-contracts/src/std/slice.rs" 100 14 100 41
  let%span sslice19 = "../../../../creusot-contracts/src/std/slice.rs" 101 4 101 82
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sslice21 = "../../../../creusot-contracts/src/std/slice.rs" 403 20 403 61
  let%span sresolve22 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops23 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span smodel24 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice25 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice26 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  
  use T_06_knights_tour__Point as Point'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option (usize, Point'0.t_Point))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option (usize, Point'0.t_Point) [inv'3 x] . inv'3 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) [inv'2 x] . inv'2 x
  = true
  
  use seq.Seq
  
  use T_core__slice__iter__Iter as Iter'0
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'5 (self : slice (usize, Point'0.t_Point)) : Seq.seq (usize, Point'0.t_Point)
  
  axiom view'5_spec : forall self : slice (usize, Point'0.t_Point) . ([%#sslice26] view'5 self = Slice.id self)
  && ([%#sslice25] Seq.length (view'5 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice (usize, Point'0.t_Point)) (ix : int) : (usize, Point'0.t_Point)
   =
    [%#sops23] Seq.get (view'5 self) ix
  
  use seq.Seq
  
  function view'3 (self : slice (usize, Point'0.t_Point)) : Seq.seq (usize, Point'0.t_Point) =
    [%#smodel7] view'5 self
  
  use seq.Seq
  
  function to_ref_seq'0 (self : slice (usize, Point'0.t_Point)) : Seq.seq (usize, Point'0.t_Point)
  
  axiom to_ref_seq'0_spec : forall self : slice (usize, Point'0.t_Point) . ([%#sslice19] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([%#sslice18] Seq.length (to_ref_seq'0 self) = Seq.length (view'3 self))
  
  function view'1 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) : slice (usize, Point'0.t_Point)
  
  predicate produces'0 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) (visited : Seq.seq (usize, Point'0.t_Point)) (tl : Iter'0.t_Iter (usize, Point'0.t_Point))
    
   =
    [%#sslice6] to_ref_seq'0 (view'1 self) = Seq.(++) visited (to_ref_seq'0 (view'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_Iter (usize, Point'0.t_Point)) (ab : Seq.seq (usize, Point'0.t_Point)) (b : Iter'0.t_Iter (usize, Point'0.t_Point)) (bc : Seq.seq (usize, Point'0.t_Point)) (c : Iter'0.t_Iter (usize, Point'0.t_Point)) : ()
    
   =
    [%#sslice17] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_Iter (usize, Point'0.t_Point), ab : Seq.seq (usize, Point'0.t_Point), b : Iter'0.t_Iter (usize, Point'0.t_Point), bc : Seq.seq (usize, Point'0.t_Point), c : Iter'0.t_Iter (usize, Point'0.t_Point) . ([%#sslice14] produces'0 a ab b)
   -> ([%#sslice15] produces'0 b bc c)  -> ([%#sslice16] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) : () =
    [%#sslice13] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_Iter (usize, Point'0.t_Point) . [%#sslice12] produces'0 self (Seq.empty  : Seq.seq (usize, Point'0.t_Point)) self
  
  predicate inv'1 (_1 : Iter'0.t_Iter (usize, Point'0.t_Point))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Iter'0.t_Iter (usize, Point'0.t_Point) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Seq.seq (usize, Point'0.t_Point))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq (usize, Point'0.t_Point) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) =
    resolve'1 _1
  
  use seq.Seq
  
  function view'4 (self : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) : slice (usize, Point'0.t_Point) =
    [%#smodel24] view'1 self.current
  
  predicate completed'0 (self : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) =
    [%#sslice21] resolve'1 self /\ view'5 (view'4 self) = (Seq.empty  : Seq.seq (usize, Point'0.t_Point))
  
  let rec next'0 (self:borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) (return'  (ret:Option'0.t_Option (usize, Point'0.t_Point)))= any
    [ return' (result:Option'0.t_Option (usize, Point'0.t_Point))-> {inv'3 result}
      {[%#siter9] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  function view'2 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point)
  
  axiom view'2_spec : forall self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . [%#svec20] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (ix : int) : (usize, Point'0.t_Point)
    
   =
    [%#sops8] Seq.get (view'2 self) ix
  
  function view'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point) =
    [%#smodel7] view'2 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (res : Iter'0.t_Iter (usize, Point'0.t_Point))
    
   =
    [%#svec11] view'0 self = view'3 (view'1 res)
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) =
    [%#svec10] true
  
  let rec into_iter'0 (self:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (return'  (ret:Iter'0.t_Iter (usize, Point'0.t_Point)))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#siter5] into_iter_pre'0 self}
    any
    [ return' (result:Iter'0.t_Iter (usize, Point'0.t_Point))-> {[%#siter5] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec min (v:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (return'  (ret:Option'0.t_Option (usize, Point'0.t_Point)))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &min <- Option'0.C_None ] s1
      | s1 = into_iter'0 {v} (fun (_ret':Iter'0.t_Iter (usize, Point'0.t_Point)) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour0] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &produced <- [%#s06_knights_tour1] Snapshot.new (Seq.empty  : Seq.seq (usize, Point'0.t_Point)) ] s1
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#s06_knights_tour2] forall r : (usize, Point'0.t_Point) . min
        = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (view'0 v) /\ index_logic'0 v i = r)}
        {[@expl:loop invariant] [%#s06_knights_tour2] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour2] inv'1 iter}
        {[@expl:loop invariant] [%#s06_knights_tour2] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_Iter (usize, Point'0.t_Point)> {iter}
              (fun (_ret':borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) ->
                 [ &_18 <- _ret' ] 
                 [ &iter <- _ret'.final ] 
                s1)
          | s1 = Borrow.borrow_final <Iter'0.t_Iter (usize, Point'0.t_Point)> {_18.current} {Borrow.get_id _18}
              (fun (_ret':borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) ->
                 [ &_17 <- _ret' ] 
                 [ &_18 <- { _18 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_17} (fun (_ret':Option'0.t_Option (usize, Point'0.t_Point)) ->  [ &_16 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _18}- s1
          | s1 = any
            [ br0 -> {_16 = Option'0.C_None } (! bb9)
            | br1 (a:(usize, Point'0.t_Point))-> {_16 = Option'0.C_Some a} (! bb8) ]
             ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.v_Some <(usize, Point'0.t_Point)> {_16}
              (fun (r0'0:(usize, Point'0.t_Point)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_21 <- [%#s06_knights_tour3] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _21 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = any
            [ br0 -> {min = Option'0.C_None } (! bb13)
            | br1 (a:(usize, Point'0.t_Point))-> {min = Option'0.C_Some a} (! bb14) ]
             ]
          
        | bb14 = s0
          [ s0 = Option'0.v_Some <(usize, Point'0.t_Point)> {min}
              (fun (r0'0:(usize, Point'0.t_Point)) ->  [ &m <- r0'0 ] s1)
          | s1 = UIntSize.lt {let (r'0, _) = x in r'0} {let (r'1, _) = m in r'1}
              (fun (_ret':bool) ->  [ &_29 <- _ret' ] s2)
          | s2 = any [ br0 -> {_29 = false} (! bb17) | br1 -> {_29} (! bb16) ]  ]
          
        | bb16 = s0 [ s0 =  [ &_32 <- Option'0.C_Some x ] s1 | s1 =  [ &min <- _32 ] s2 | s2 = bb18 ] 
        | bb17 = bb18
        | bb18 = bb19
        | bb13 = bb15
        | bb15 = s0 [ s0 =  [ &_26 <- Option'0.C_Some x ] s1 | s1 =  [ &min <- _26 ] s2 | s2 = bb19 ] 
        | bb19 = bb4 ]
         ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- min ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & v : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) = v
    | & min : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & iter : Iter'0.t_Iter (usize, Point'0.t_Point) = any_l ()
    | & iter_old : Snapshot.snap_ty (Iter'0.t_Iter (usize, Point'0.t_Point)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (usize, Point'0.t_Point)) = any_l ()
    | & _16 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & _17 : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point)) = any_l ()
    | & _18 : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point)) = any_l ()
    | & __creusot_proc_iter_elem : (usize, Point'0.t_Point) = any_l ()
    | & _21 : Snapshot.snap_ty (Seq.seq (usize, Point'0.t_Point)) = any_l ()
    | & x : (usize, Point'0.t_Point) = any_l ()
    | & _26 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & m : (usize, Point'0.t_Point) = any_l ()
    | & _29 : bool = any_l ()
    | & _32 : Option'0.t_Option (usize, Point'0.t_Point) = any_l () ]
    
    [ return' (result:Option'0.t_Option (usize, Point'0.t_Point))-> {[@expl:postcondition] [%#s06_knights_tour4] forall r : (usize, Point'0.t_Point) . result
      = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (view'0 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
end
module M_06_knights_tour__dumb_nonlinear_arith [#"06_knights_tour.rs" 130 0 130 33]
  let%span s06_knights_tour0 = "06_knights_tour.rs" 128 11 128 22
  let%span s06_knights_tour1 = "06_knights_tour.rs" 129 10 129 30
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  constant a  : usize
  
  function dumb_nonlinear_arith [#"06_knights_tour.rs" 130 0 130 33] (a : usize) : ()
  
  goal vc_dumb_nonlinear_arith : ([%#s06_knights_tour0] UIntSize.to_int a <= 1000)
   -> ([%#s06_knights_tour1] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module M_06_knights_tour__knights_tour [#"06_knights_tour.rs" 135 0 135 69]
  let%span s06_knights_tour0 = "06_knights_tour.rs" 138 17 138 18
  let%span s06_knights_tour1 = "06_knights_tour.rs" 140 4 140 44
  let%span s06_knights_tour2 = "06_knights_tour.rs" 144 16 144 17
  let%span s06_knights_tour3 = "06_knights_tour.rs" 141 4 141 36
  let%span s06_knights_tour4 = "06_knights_tour.rs" 141 4 141 36
  let%span s06_knights_tour5 = "06_knights_tour.rs" 141 4 141 36
  let%span s06_knights_tour6 = "06_knights_tour.rs" 141 16 141 34
  let%span s06_knights_tour7 = "06_knights_tour.rs" 142 16 142 26
  let%span s06_knights_tour8 = "06_knights_tour.rs" 143 16 143 34
  let%span s06_knights_tour9 = "06_knights_tour.rs" 141 4 141 36
  let%span s06_knights_tour10 = "06_knights_tour.rs" 146 50 146 60
  let%span s06_knights_tour11 = "06_knights_tour.rs" 149 17 149 24
  let%span s06_knights_tour12 = "06_knights_tour.rs" 147 8 148 54
  let%span s06_knights_tour13 = "06_knights_tour.rs" 147 8 148 54
  let%span s06_knights_tour14 = "06_knights_tour.rs" 147 8 148 54
  let%span s06_knights_tour15 = "06_knights_tour.rs" 147 8 148 54
  let%span s06_knights_tour16 = "06_knights_tour.rs" 150 12 150 130
  let%span s06_knights_tour17 = "06_knights_tour.rs" 132 11 132 37
  let%span s06_knights_tour18 = "06_knights_tour.rs" 133 11 133 19
  let%span s06_knights_tour19 = "06_knights_tour.rs" 134 11 134 19
  let%span s06_knights_tour20 = "06_knights_tour.rs" 37 15 37 28
  let%span s06_knights_tour21 = "06_knights_tour.rs" 38 14 38 33
  let%span s06_knights_tour22 = "06_knights_tour.rs" 39 14 39 25
  let%span s06_knights_tour23 = "06_knights_tour.rs" 83 15 83 24
  let%span s06_knights_tour24 = "06_knights_tour.rs" 84 15 84 32
  let%span s06_knights_tour25 = "06_knights_tour.rs" 85 14 85 26
  let%span s06_knights_tour26 = "06_knights_tour.rs" 86 14 86 42
  let%span s06_knights_tour27 = "06_knights_tour.rs" 128 11 128 22
  let%span s06_knights_tour28 = "06_knights_tour.rs" 129 10 129 30
  let%span s06_knights_tour29 = "06_knights_tour.rs" 127 0 127 8
  let%span siter30 = "../../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span srange31 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span s06_knights_tour32 = "06_knights_tour.rs" 31 8 35 9
  let%span s06_knights_tour33 = "06_knights_tour.rs" 63 12 63 75
  let%span siter34 = "../../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec35 = "../../../../creusot-contracts/src/std/vec.rs" 77 26 77 44
  let%span s06_knights_tour36 = "06_knights_tour.rs" 93 10 93 28
  let%span s06_knights_tour37 = "06_knights_tour.rs" 94 0 94 130
  let%span svec38 = "../../../../creusot-contracts/src/std/vec.rs" 269 12 269 41
  let%span svec39 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops40 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span s06_knights_tour41 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour42 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour43 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour44 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour45 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour46 = "06_knights_tour.rs" 17 14 17 41
  let%span s06_knights_tour47 = "06_knights_tour.rs" 50 15 50 24
  let%span s06_knights_tour48 = "06_knights_tour.rs" 51 4 51 44
  let%span s06_knights_tour49 = "06_knights_tour.rs" 68 15 68 24
  let%span s06_knights_tour50 = "06_knights_tour.rs" 69 15 69 32
  let%span svec51 = "../../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span s06_knights_tour52 = "06_knights_tour.rs" 108 0 109 62
  let%span siter53 = "../../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter54 = "../../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange55 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange56 = "../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange57 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange58 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange59 = "../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange60 = "../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange61 = "../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange62 = "../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum63 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span srange64 = "../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve65 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec66 = "../../../../creusot-contracts/src/std/vec.rs" 194 20 194 24
  let%span svec67 = "../../../../creusot-contracts/src/std/vec.rs" 200 20 200 33
  let%span svec68 = "../../../../creusot-contracts/src/std/vec.rs" 275 14 275 45
  let%span svec69 = "../../../../creusot-contracts/src/std/vec.rs" 273 4 273 10
  let%span svec70 = "../../../../creusot-contracts/src/std/vec.rs" 282 15 282 32
  let%span svec71 = "../../../../creusot-contracts/src/std/vec.rs" 283 15 283 32
  let%span svec72 = "../../../../creusot-contracts/src/std/vec.rs" 284 14 284 42
  let%span svec73 = "../../../../creusot-contracts/src/std/vec.rs" 280 4 280 10
  let%span svec74 = "../../../../creusot-contracts/src/std/vec.rs" 262 20 262 57
  let%span smodel75 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span smodel76 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  
  use T_06_knights_tour__Point as Point'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  predicate inv'11 (_1 : (usize, Point'0.t_Point))
  
  axiom inv_axiom'11 [@rewrite] : forall x : (usize, Point'0.t_Point) [inv'11 x] . inv'11 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.Borrow
  
  predicate inv'10 (_1 : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)))
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) [inv'10 x] . inv'10 x
  = true
  
  use prelude.prelude.IntSize
  
  use T_core__option__Option as Option'0
  
  predicate inv'9 (_1 : Option'0.t_Option (isize, isize))
  
  axiom inv_axiom'9 [@rewrite] : forall x : Option'0.t_Option (isize, isize) [inv'9 x] . inv'9 x = true
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  predicate inv'8 (_1 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))
  
  axiom inv_axiom'8 [@rewrite] : forall x : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) [inv'8 x] . inv'8 x
  = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'7 (_1 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global))
  
  axiom inv_axiom'7 [@rewrite] : forall x : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))
  
  axiom inv_axiom'6 [@rewrite] : forall x : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) [inv'6 x] . inv'6 x
  = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option usize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Option'0.t_Option usize [inv'5 x] . inv'5 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'4 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'4 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  predicate produces'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (visited : Seq.seq (isize, isize)) (rhs : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#svec38] view'4 self = Seq.(++) visited (view'4 rhs)
  
  function produces_trans'1 (a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (ab : Seq.seq (isize, isize)) (b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (bc : Seq.seq (isize, isize)) (c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : ()
    
   =
    [%#svec73] ()
  
  axiom produces_trans'1_spec : forall a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), ab : Seq.seq (isize, isize), b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), bc : Seq.seq (isize, isize), c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . ([%#svec70] produces'1 a ab b)
   -> ([%#svec71] produces'1 b bc c)  -> ([%#svec72] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : () =
    [%#svec69] ()
  
  axiom produces_refl'1_spec : forall self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . [%#svec68] produces'1 self (Seq.empty  : Seq.seq (isize, isize)) self
  
  predicate inv'3 (_1 : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
  
  axiom inv_axiom'3 [@rewrite] : forall x : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) [inv'3 x] . inv'3 x
  = true
  
  predicate inv'2 (_1 : Seq.seq (isize, isize))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq (isize, isize) [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#snum63] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#srange31] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  predicate inv'1 (_1 : Range'0.t_Range usize)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange57] inv'1 a)
   -> ([%#srange58] inv'1 b)
   -> ([%#srange59] inv'1 c)
   -> ([%#srange60] produces'0 a ab b)
   -> ([%#srange61] produces'0 b bc c)  -> ([%#srange62] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#srange55] inv'1 self)
   -> ([%#srange56] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Range'0.t_Range usize [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use T_core__option__Option as Option'0
  
  use T_core__option__Option as Option'0
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point)
  
  axiom view'0_spec : forall self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . [%#svec39] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (ix : int) : (usize, Point'0.t_Point)
    
   =
    [%#sops40] Seq.get (view'0 self) ix
  
  function view'6 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point) =
    [%#smodel76] view'0 self
  
  let rec min'0 (v:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (return'  (ret:Option'0.t_Option (usize, Point'0.t_Point)))= any
    [ return' (result:Option'0.t_Option (usize, Point'0.t_Point))-> {[%#s06_knights_tour52] forall r : (usize, Point'0.t_Point) . result
      = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (view'6 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function view'5 (self : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) : Seq.seq (usize, Point'0.t_Point)
    
   =
    [%#smodel75] view'0 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) (value:(usize, Point'0.t_Point)) (return'  (ret:()))= {[@expl:precondition] inv'11 value}
    {[@expl:precondition] inv'10 self}
    any [ return' (result:())-> {[%#svec51] view'0 self.final = Seq.snoc (view'5 self) value} (! return' {result}) ] 
  
  use T_06_knights_tour__Board as Board'0
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#s06_knights_tour33] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use T_alloc__vec__Vec as Vec'0
  
  function view'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'2_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec39] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  use T_alloc__vec__Vec as Vec'0
  
  use seq.Seq
  
  function view'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom view'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#svec39] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#sops40] Seq.get (view'1 self) ix
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#s06_knights_tour32] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (view'1 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (view'2 (index_logic'1 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  let rec count_degree'0 (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:usize))= {[@expl:precondition] [%#s06_knights_tour50] in_bounds'0 self p}
    {[@expl:precondition] [%#s06_knights_tour49] wf'0 self}
    any [ return' (result:usize)-> (! return' {result}) ] 
  
  let rec available'0 (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:bool))= {[@expl:precondition] [%#s06_knights_tour47] wf'0 self}
    any [ return' (result:bool)-> {[%#s06_knights_tour48] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec mov'0 (self:Point'0.t_Point) (p:(isize, isize)) (return'  (ret:Point'0.t_Point))= {[@expl:precondition] [%#s06_knights_tour44] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [%#s06_knights_tour43] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [%#s06_knights_tour42] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) <= 10000}
    {[@expl:precondition] [%#s06_knights_tour41] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) <= 10000}
    any
    [ return' (result:Point'0.t_Point)-> {[%#s06_knights_tour46] IntSize.to_int (T_06_knights_tour__Point.t_Point__y result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) + IntSize.to_int (let (_, a) = p in a)}
      {[%#s06_knights_tour45] IntSize.to_int (T_06_knights_tour__Point.t_Point__x result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'3 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#sresolve65] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    resolve'3 _1
  
  function view'7 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) : Seq.seq (isize, isize)
   =
    [%#smodel75] view'4 self.current
  
  predicate completed'1 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#svec74] resolve'3 self /\ view'7 self = (Seq.empty  : Seq.seq (isize, isize))
  
  let rec next'1 (self:borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) (return'  (ret:Option'0.t_Option (isize, isize)))= {[@expl:precondition] inv'8 self}
    any
    [ return' (result:Option'0.t_Option (isize, isize))-> {inv'9 result}
      {[%#siter34] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  axiom view'3_spec : forall self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) . [%#svec39] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate into_iter_post'1 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#svec67] view'3 self = view'4 res
  
  predicate into_iter_pre'1 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) =
    [%#svec66] true
  
  let rec into_iter'1 (self:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (return'  (ret:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))= {[@expl:precondition] inv'7 self}
    {[@expl:precondition] [%#siter30] into_iter_pre'1 self}
    any
    [ return' (result:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))-> {inv'3 result}
      {[%#siter30] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (ix : int) : (isize, isize)
    
   =
    [%#sops40] Seq.get (view'3 self) ix
  
  let rec moves'0 (_1:()) (return'  (ret:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (isize, isize) (Global'0.t_Global))-> {[%#s06_knights_tour37] forall i : int . 0 <= i
      /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'2 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'2 result i in a) <= 2}
      {[%#s06_knights_tour36] Seq.length (view'3 result) = 8}
      (! return' {result}) ]
    
  
  let rec new'1 (_1:()) (return'  (ret:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))-> {inv'6 result}
      {[%#svec35] Seq.length (view'0 result) = 0}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (Range'0.t_Range usize)) =
    [%#sresolve65] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Range'0.t_Range usize)) =
    resolve'2 _1
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#srange64] resolve'2 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {inv'5 result}
      {[%#siter34] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#siter54] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#siter53] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter30] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {inv'1 result}
      {[%#siter30] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function dumb_nonlinear_arith'0 [#"06_knights_tour.rs" 130 0 130 33] (a : usize) : () =
    [%#s06_knights_tour29] ()
  
  axiom dumb_nonlinear_arith'0_spec : forall a : usize . ([%#s06_knights_tour27] UIntSize.to_int a <= 1000)
   -> ([%#s06_knights_tour28] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
  
  let rec set'0 (self:borrowed (Board'0.t_Board)) (p:Point'0.t_Point) (v:usize) (return'  (ret:()))= {[@expl:precondition] [%#s06_knights_tour24] in_bounds'0 self.current p}
    {[@expl:precondition] [%#s06_knights_tour23] wf'0 self.current}
    any
    [ return' (result:())-> {[%#s06_knights_tour26] T_06_knights_tour__Board.t_Board__size self.final
      = T_06_knights_tour__Board.t_Board__size self.current}
      {[%#s06_knights_tour25] wf'0 self.final}
      (! return' {result}) ]
    
  
  let rec new'0 (size:usize) (return'  (ret:Board'0.t_Board))= {[@expl:precondition] [%#s06_knights_tour20] UIntSize.to_int size
    <= 1000}
    any
    [ return' (result:Board'0.t_Board)-> {[%#s06_knights_tour22] wf'0 result}
      {[%#s06_knights_tour21] T_06_knights_tour__Board.t_Board__size result = size}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec knights_tour (size:usize) (x:usize) (y:usize) (return'  (ret:Option'0.t_Option (Board'0.t_Board)))= {[%#s06_knights_tour19] y
    < size}
    {[%#s06_knights_tour18] x < size}
    {[%#s06_knights_tour17] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0 [ s0 = new'0 {size} (fun (_ret':Board'0.t_Board) ->  [ &board <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = IntSize.of_int {UIntSize.to_int x} (fun (_res:isize) ->  [ &_10 <- _res ] s1)
      | s1 = IntSize.of_int {UIntSize.to_int y} (fun (_res:isize) ->  [ &_12 <- _res ] s2)
      | s2 =  [ &p <- Point'0.C_Point _10 _12 ] s3
      | s3 = Borrow.borrow_mut <Board'0.t_Board> {board}
          (fun (_ret':borrowed (Board'0.t_Board)) ->  [ &_15 <- _ret' ]  [ &board <- _ret'.final ] s4)
      | s4 = set'0 {_15} {p} {[%#s06_knights_tour0] (1 : usize)} (fun (_ret':()) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_17 <- [%#s06_knights_tour1] Snapshot.new (dumb_nonlinear_arith'0 size) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UIntSize.mul {size} {size} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1)
      | s1 =  [ &_21 <- Range'0.C_Range ([%#s06_knights_tour2] (2 : usize)) _22 ] s2
      | s2 = into_iter'0 {_21} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour3] Snapshot.new iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s06_knights_tour4] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant] [%#s06_knights_tour8] in_bounds'0 board p}
        {[@expl:loop invariant] [%#s06_knights_tour7] wf'0 board}
        {[@expl:loop invariant] [%#s06_knights_tour6] T_06_knights_tour__Board.t_Board__size board = size}
        {[@expl:loop invariant] [%#s06_knights_tour5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour5] inv'1 iter}
        {[@expl:loop invariant] [%#s06_knights_tour5] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_38 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_38.current} {Borrow.get_id _38}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_37 <- _ret' ] 
                 [ &_38 <- { _38 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_37} (fun (_ret':Option'0.t_Option usize) ->  [ &_36 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = -{resolve'0 _38}- s1
          | s1 = any
            [ br0 -> {_36 = Option'0.C_None } (! bb14) | br1 (a:usize)-> {_36 = Option'0.C_Some a} (! bb13) ]
             ]
          
        | bb13 = bb15
        | bb15 = s0
          [ s0 = Option'0.v_Some <usize> {_36} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_41 <- [%#s06_knights_tour9] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _41 ] s1
          | s1 =  [ &step <- __creusot_proc_iter_elem ] s2
          | s2 = new'1 {[%#s06_knights_tour10] ()}
              (fun (_ret':Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) ->  [ &candidates <- _ret' ] s3)
          | s3 = bb17 ]
          
        | bb17 = s0
          [ s0 = moves'0 {[%#s06_knights_tour11] ()}
              (fun (_ret':Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) ->  [ &_47 <- _ret' ] s1)
          | s1 = bb18 ]
          
        | bb18 = s0
          [ s0 = into_iter'1 {_47}
              (fun (_ret':IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) ->  [ &iter1 <- _ret' ] s1)
          | s1 = bb19 ]
          
        | bb19 = s0 [ s0 =  [ &iter_old1 <- [%#s06_knights_tour12] Snapshot.new iter1 ] s1 | s1 = bb20 ] 
        | bb20 = s0
          [ s0 =  [ &produced1 <- [%#s06_knights_tour13] Snapshot.new (Seq.empty  : Seq.seq (isize, isize)) ] s1
          | s1 = bb21 ]
          
        | bb21 = bb22
        | bb22 = bb23
        | bb23 = bb24
        | bb24 = bb25
        | bb25 = bb25
          [ bb25 = {[@expl:loop invariant] [%#s06_knights_tour14] forall i : int . 0 <= i
            /\ i < Seq.length (view'0 candidates)  -> in_bounds'0 board (let (_, a) = index_logic'0 candidates i in a)}
            {[@expl:loop invariant] [%#s06_knights_tour14] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#s06_knights_tour14] inv'3 iter1}
            {[@expl:loop invariant] [%#s06_knights_tour14] inv'2 (Snapshot.inner produced1)}
            (! s0) [ s0 = bb26 ] 
            [ bb26 = s0
              [ s0 = Borrow.borrow_mut <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)> {iter1}
                  (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                     [ &_58 <- _ret' ] 
                     [ &iter1 <- _ret'.final ] 
                    s1)
              | s1 = Borrow.borrow_final
                  <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)>
                  {_58.current}
                  {Borrow.get_id _58}
                  (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                     [ &_57 <- _ret' ] 
                     [ &_58 <- { _58 with current = _ret'.final ; } ] 
                    s2)
              | s2 = next'1 {_57} (fun (_ret':Option'0.t_Option (isize, isize)) ->  [ &_56 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = -{resolve'1 _58}- s1
              | s1 = any
                [ br0 -> {_56 = Option'0.C_None } (! bb30)
                | br1 (a:(isize, isize))-> {_56 = Option'0.C_Some a} (! bb29) ]
                 ]
              
            | bb29 = bb31
            | bb31 = s0
              [ s0 = Option'0.v_Some <(isize, isize)> {_56}
                  (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_61 <- [%#s06_knights_tour15] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb32 ]
              
            | bb32 = s0
              [ s0 =  [ &produced1 <- _61 ] s1
              | s1 =  [ &m <- __creusot_proc_iter_elem1 ] s2
              | s2 = {[@expl:assertion] [%#s06_knights_tour16] forall r : Seq.seq (isize, isize), a : Seq.seq (isize, isize), b : Seq.seq (isize, isize) . r
                = Seq.(++) a (Seq.(++) (Seq.singleton m) b)  -> m = Seq.get r (Seq.length a)}
                s3
              | s3 =  [ &_69 <- m ] s4
              | s4 = mov'0 {p} {_69} (fun (_ret':Point'0.t_Point) ->  [ &adj <- _ret' ] s5)
              | s5 = bb33 ]
              
            | bb33 = s0 [ s0 = available'0 {board} {adj} (fun (_ret':bool) ->  [ &_70 <- _ret' ] s1) | s1 = bb34 ] 
            | bb34 = any [ br0 -> {_70 = false} (! bb38) | br1 -> {_70} (! bb35) ] 
            | bb35 = s0
              [ s0 = count_degree'0 {board} {adj} (fun (_ret':usize) ->  [ &degree <- _ret' ] s1) | s1 = bb36 ]
              
            | bb36 = s0
              [ s0 = Borrow.borrow_mut <Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)> {candidates}
                  (fun (_ret':borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) ->
                     [ &_77 <- _ret' ] 
                     [ &candidates <- _ret'.final ] 
                    s1)
              | s1 =  [ &_78 <- (degree, adj) ] s2
              | s2 = push'0 {_77} {_78} (fun (_ret':()) ->  [ &_76 <- _ret' ] s3)
              | s3 = bb37 ]
              
            | bb37 = bb39
            | bb38 = bb39
            | bb39 = bb25 ]
             ]
          
        | bb30 = bb40
        | bb40 = s0
          [ s0 =  [ &_85 <- candidates ] s1
          | s1 = min'0 {_85} (fun (_ret':Option'0.t_Option (usize, Point'0.t_Point)) ->  [ &_83 <- _ret' ] s2)
          | s2 = bb41 ]
          
        | bb41 = any
          [ br0 -> {_83 = Option'0.C_None } (! bb44)
          | br1 (a:(usize, Point'0.t_Point))-> {_83 = Option'0.C_Some a} (! bb43) ]
          
        | bb43 = bb45
        | bb45 = s0
          [ s0 = Option'0.v_Some <(usize, Point'0.t_Point)> {_83}
              (fun (r0'0:(usize, Point'0.t_Point)) ->  [ &adj1 <- let (_, r'0) = r0'0 in r'0 ] s1)
          | s1 =  [ &p <- adj1 ] s2
          | s2 = Borrow.borrow_mut <Board'0.t_Board> {board}
              (fun (_ret':borrowed (Board'0.t_Board)) ->  [ &_91 <- _ret' ]  [ &board <- _ret'.final ] s3)
          | s3 = set'0 {_91} {p} {step} (fun (_ret':()) ->  [ &_90 <- _ret' ] s4)
          | s4 = bb46 ]
          
        | bb46 = bb47
        | bb47 = bb9 ]
         ]
      
    | bb44 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb50 ] 
    | bb50 = bb51
    | bb51 = bb52
    | bb14 = s0 [ s0 =  [ &_0 <- Option'0.C_Some board ] s1 | s1 = bb48 ] 
    | bb48 = bb49
    | bb49 = bb52
    | bb52 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (Board'0.t_Board) = any_l ()
    | & size : usize = size
    | & x : usize = x
    | & y : usize = y
    | & board : Board'0.t_Board = any_l ()
    | & p : Point'0.t_Point = any_l ()
    | & _10 : isize = any_l ()
    | & _12 : isize = any_l ()
    | & _14 : () = any_l ()
    | & _15 : borrowed (Board'0.t_Board) = any_l ()
    | & _17 : Snapshot.snap_ty () = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _21 : Range'0.t_Range usize = any_l ()
    | & _22 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _36 : Option'0.t_Option usize = any_l ()
    | & _37 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _38 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _41 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & step : usize = any_l ()
    | & candidates : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) = any_l ()
    | & iter1 : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) = any_l ()
    | & _47 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) = any_l ()
    | & iter_old1 : Snapshot.snap_ty (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & _56 : Option'0.t_Option (isize, isize) = any_l ()
    | & _57 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & _58 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & __creusot_proc_iter_elem1 : (isize, isize) = any_l ()
    | & _61 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & m : (isize, isize) = any_l ()
    | & adj : Point'0.t_Point = any_l ()
    | & _69 : (isize, isize) = any_l ()
    | & _70 : bool = any_l ()
    | & degree : usize = any_l ()
    | & _76 : () = any_l ()
    | & _77 : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) = any_l ()
    | & _78 : (usize, Point'0.t_Point) = any_l ()
    | & _83 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & _85 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) = any_l ()
    | & adj1 : Point'0.t_Point = any_l ()
    | & _90 : () = any_l ()
    | & _91 : borrowed (Board'0.t_Board) = any_l () ]
     [ return' (result:Option'0.t_Option (Board'0.t_Board))-> (! return' {result}) ] 
end
module M_06_knights_tour__qyi12137358090983346310 [#"06_knights_tour.rs" 4 9 4 13] (* <Point as std::marker::Copy> *)
  
end
module M_06_knights_tour__qyi50474406909270761 [#"06_knights_tour.rs" 4 15 4 20] (* <Point as creusot_contracts::Clone> *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 4 15 4 20
  
  use T_06_knights_tour__Point as Point'0
  
  predicate inv'1 (_1 : Point'0.t_Point)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Point'0.t_Point [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : Point'0.t_Point)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Point'0.t_Point [inv'0 x] . inv'0 x = true
  
  goal clone'_refn : [%#s06_knights_tour0] forall self : Point'0.t_Point . inv'0 self
   -> (forall result : Point'0.t_Point . result = self  -> inv'1 result /\ result = self)
end
