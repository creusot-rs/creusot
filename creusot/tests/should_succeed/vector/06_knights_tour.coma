
module T_06_knights_tour__Point
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  type t_Point  =
    | C_Point isize isize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Point (input:t_Point) (ret  (x:isize) (y:isize))= any
    [ good (x:isize) (y:isize)-> {C_Point x y = input} (! ret {x} {y})
    | bad (x:isize) (y:isize)-> {C_Point x y <> input} {false} any ]
    
  
  function t_Point__x (self : t_Point) : isize =
    match self with
      | C_Point a _ -> a
      end
  
  function t_Point__y (self : t_Point) : isize =
    match self with
      | C_Point _ a -> a
      end
end
module M_06_knights_tour__qy123zimplqy35z3qy125z__clone
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 4 15 4 20
  
  let%span span1 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  let rec clone'0 (self:isize) (return'  (ret:isize))= any
    [ return' (result:isize)-> {[%#span1] result = self} (! return' {result}) ]
    
  
  use T_06_knights_tour__Point as Point'0
  
  let rec clone' (self:Point'0.t_Point) (return'  (ret:Point'0.t_Point))= (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_Point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_5 <- rx'0 ] s1)
      | s1 = clone'0 {_5} (fun (_ret':isize) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Point'0.t_Point {self} (fun (rx'0:isize) (ry'0:isize) ->  [ &_8 <- ry'0 ] s1)
      | s1 = clone'0 {_8} (fun (_ret':isize) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Point'0.C_Point _3 _6 ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : Point'0.t_Point = any_l ()
    | & self : Point'0.t_Point = self
    | & _3 : isize = any_l ()
    | & _5 : isize = any_l ()
    | & _6 : isize = any_l ()
    | & _8 : isize = any_l () ]
    
    [ return' (result:Point'0.t_Point)-> {[@expl:postcondition] [%#s06_knights_tour0] result = self}
      (! return' {result}) ]
    
end
module M_06_knights_tour__qy123zimplqy35z0qy125z__mov
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 12 15 12 52
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 13 15 13 52
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 14 15 14 46
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 15 15 15 46
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 16 14 16 41
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 17 14 17 41
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use T_06_knights_tour__Point as Point'0
  
  use prelude.prelude.IntSize
  
  let rec mov (self:Point'0.t_Point) (p:(isize, isize)) (return'  (ret:Point'0.t_Point))= {[%#s06_knights_tour3] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[%#s06_knights_tour2] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[%#s06_knights_tour1] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) <= 10000}
    {[%#s06_knights_tour0] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) <= 10000}
    (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_Point {self}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.add {rx'0} {let (r'0, _) = p in r'0} (fun (_ret':isize) ->  [ &_9 <- _ret' ] s1))
      | s1 = Point'0.t_Point {self}
          (fun (rx'1:isize) (ry'1:isize) ->
            IntSize.add {ry'1} {let (_, r'1) = p in r'1} (fun (_ret':isize) ->  [ &_12 <- _ret' ] s2))
      | s2 =  [ &_0 <- Point'0.C_Point _9 _12 ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : Point'0.t_Point = any_l ()
    | & self : Point'0.t_Point = self
    | & p : (isize, isize) = p
    | & _9 : isize = any_l ()
    | & _12 : isize = any_l () ]
    
    [ return' (result:Point'0.t_Point)-> {[@expl:postcondition] [%#s06_knights_tour5] IntSize.to_int (T_06_knights_tour__Point.t_Point__y result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) + IntSize.to_int (let (_, a) = p in a)}
      {[@expl:postcondition] [%#s06_knights_tour4] IntSize.to_int (T_06_knights_tour__Point.t_Point__x result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_06_knights_tour__Board
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.Int
  
  type t_Board  =
    | C_Board usize (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Board (input:t_Board) (ret  (size:usize) (field:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= any
    [ good (size:usize) (field:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {C_Board size field
      = input}
      (! ret {size} {field})
    | bad (size:usize) (field:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {C_Board size field
      <> input}
      {false}
      any ]
    
  
  function t_Board__size (self : t_Board) : usize =
    match self with
      | C_Board a _ -> a
      end
  
  function t_Board__field (self : t_Board) : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) =
    match self with
      | C_Board _ a -> a
      end
end
module T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  type t_MapInv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_MapInv < 'i > < 'b > < 'f > (input:t_MapInv 'i 'b 'f) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'b))-> {C_MapInv iter func produced <> input}
      {false}
      any ]
    
  
  function t_MapInv__iter (self : t_MapInv 'i 'b 'f) : 'i =
    match self with
      | C_MapInv a _ _ -> a
      end
  
  function t_MapInv__func (self : t_MapInv 'i 'b 'f) : 'f =
    match self with
      | C_MapInv _ a _ -> a
      end
  
  function t_MapInv__produced (self : t_MapInv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b) =
    match self with
      | C_MapInv _ _ a -> a
      end
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z_Type
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use T_alloc__vec__Vec as Vec'0
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z  =
    | M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z usize
  
  let rec m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z (input:m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (ret  (size:usize))= any
    [ good (size:usize)-> {M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z size = input}
      (! ret {size})
    | bad (size:usize)-> {M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z size <> input}
      {false}
      any ]
    
end
module M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 44 28 44 29
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 43 26 43 48
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.UIntSize
  
  predicate inv'0 (_1 : usize)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'3 (self : usize) =
    [%#span2] inv'0 self
  
  predicate inv'3 (_1 : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq usize) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq usize)
  
  axiom inv'2 : forall x : Seq.seq usize . inv'2 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span5] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'1 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span6] inv'2 (shallow_model'0 self)
  
  predicate inv'1 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'1 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'1 x = true
  
  predicate invariant'0 (self : usize) =
    [%#span7] true
  
  axiom inv'0 : forall x : usize . inv'0 x = true
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z_Type as Closure'0
  
  function field_0'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) : usize
    
   =
    let Closure'0.M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z a = self in a
  
  predicate unnest'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (_2 : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    field_0'0 _2 = field_0'0 self
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#span8] Seq.get (shallow_model'0 self) ix
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] [%#span9] inv'0 elem}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[%#span12] inv'1 result}
      {[%#span11] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span10] Seq.length (shallow_model'0 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    [%#span13] self.final = self.current
  
  let rec m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z (_1:borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (_2:usize) (_3:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z {_1.current}
          (fun (r'0:usize) ->
            from_elem'0 {[%#s06_knights_tour0] (0 : usize)} {r'0}
              (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &res <- _ret' ] s2))
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _1 : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z = _1
    | & res : Vec'0.t_Vec usize (Global'0.t_Global) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_knights_tour1] Seq.length (shallow_model'0 result)
      = UIntSize.to_int (field_0'0 _1.final)}
      (! return' {result}) ]
    
end
module M_06_knights_tour__qy123zimplqy35z1qy125z__new
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 41 20 41 21
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 37 15 37 28
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 38 14 38 33
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 39 14 39 25
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span11 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span12 = "../../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  
  let%span span13 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 41 8 53 9
  
  let%span span14 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 21
  
  let%span span15 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 15 30 21
  
  let%span span16 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 15 31 21
  
  let%span span17 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 32 15 32 32
  
  let%span span18 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 33 15 33 32
  
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 34 14 34 42
  
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 15 23 24
  
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 14 24 45
  
  let%span span22 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 116 8 120 9
  
  let%span span23 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 139 8 146 9
  
  let%span span24 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 124 4 124 83
  
  let%span span25 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span26 = "../../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  
  let%span span27 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 152 8 157 9
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 21
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter.rs" 40 15 40 21
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter.rs" 41 15 41 21
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter.rs" 42 15 42 32
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter.rs" 43 15 43 32
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter.rs" 44 14 44 42
  
  let%span span42 = "../../../../../creusot-contracts/src/std/iter.rs" 34 15 34 24
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter.rs" 35 14 35 45
  
  let%span span44 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span45 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span46 = "../../../../../creusot-contracts/src/std/vec.rs" 275 20 275 32
  
  let%span span47 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9
  
  let%span span48 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span49 = "../../../../../creusot-contracts/src/std/iter/map_inv.rs" 60 4 60 27
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../../creusot-contracts/src/std/iter.rs" 140 16 141 83
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "../../../../../creusot-contracts/src/std/iter.rs" 47 4 47 141
  
  let%span span54 = "../../../../../creusot-contracts/src/std/iter.rs" 48 15 48 51
  
  let%span span55 = "../../../../../creusot-contracts/src/std/iter.rs" 49 15 49 70
  
  let%span span56 = "../../../../../creusot-contracts/src/std/iter.rs" 51 21 51 25
  
  let%span span57 = "../../../../../creusot-contracts/src/std/iter.rs" 51 27 51 31
  
  let%span span58 = "../../../../../creusot-contracts/src/std/iter.rs" 50 14 50 88
  
  let%span span59 = "../../../../../creusot-contracts/src/std/iter.rs" 51 4 54 61
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate inv'4 (_1 : Seq.seq usize)
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  use seq.Seq
  
  function shallow_model'1 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span5] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'13 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span6] inv'4 (shallow_model'1 self)
  
  predicate inv'13 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'13 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'13 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  use M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z_Type as Closure'0
  
  predicate inv'1 (_1 : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    [%#span7] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'12 (_1 : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
  
  axiom inv'12 : forall x : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . inv'12 x
  = true
  
  predicate invariant'11 (self : usize) =
    [%#span8] true
  
  predicate inv'11 (_1 : usize)
  
  axiom inv'11 : forall x : usize . inv'11 x = true
  
  predicate invariant'10 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span9] inv'13 self
  
  predicate inv'10 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'10 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'10 x = true
  
  predicate invariant'9 (self : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    [%#span9] inv'12 self
  
  predicate inv'9 (_1 : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
  
  axiom inv'9 : forall x : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . inv'9 x
  = true
  
  predicate invariant'8 (self : usize) =
    [%#span9] inv'11 self
  
  predicate inv'8 (_1 : usize)
  
  axiom inv'8 : forall x : usize . inv'8 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span10] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'7 : forall x : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'7 x = true
  
  predicate invariant'6 (self : Snapshot.snap_ty (Seq.seq usize)) =
    [%#span8] true
  
  predicate inv'6 (_1 : Snapshot.snap_ty (Seq.seq usize))
  
  axiom inv'6 : forall x : Snapshot.snap_ty (Seq.seq usize) . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq (borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z))
    
   =
    [%#span10] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq (borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z))
    
  
  axiom inv'5 : forall x : Seq.seq (borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) . inv'5 x
  = true
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq usize) =
    [%#span10] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  axiom inv'4 : forall x : Seq.seq usize . inv'4 x = true
  
  function shallow_model'0 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span5] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'3 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span6] inv'7 (shallow_model'0 self)
  
  predicate inv'3 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv'3 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'3 x = true
  
  use T_core__ops__range__Range as Range'0
  
  use T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv as MapInv'0
  
  use seq.Seq
  
  function field_0'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) : usize
    
   =
    let Closure'0.M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z a = self in a
  
  predicate unnest'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (_2 : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    field_0'0 _2 = field_0'0 self
  
  predicate postcondition_mut'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (args : (usize, Snapshot.snap_ty (Seq.seq usize))) (result : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    (let (_2, _3) = args in Seq.length (shallow_model'1 result) = UIntSize.to_int (field_0'0 self.final))
    /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  predicate precondition'0 [#"../06_knights_tour.rs" 43 16 43 50] (self : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (args : (usize, Snapshot.snap_ty (Seq.seq usize)))
    
   =
    let (_2, _3) = args in true
  
  use prelude.prelude.Snapshot
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv as T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : usize) : int =
    [%#span11] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#span12] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  predicate produces'1 [@inline:trivial] (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (visited : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (succ : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    [%#span13] unnest'0 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self) (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func succ)
    /\ (exists s : Seq.seq usize . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self) s (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter succ)
    /\ Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced succ)
    = Seq.(++) (Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self)) s
    /\ (exists fs : Seq.seq (borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self
      = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func succ
    else
      (Seq.get fs 0).current = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self
      /\ (Seq.get fs (Seq.length visited - 1)).final
      = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  predicate inv'2 (_1 : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
  
  function produces_trans'2 (a : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (ab : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (b : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (bc : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (c : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) : ()
    
  
  axiom produces_trans'2_spec : forall a : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z, ab : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)), b : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z, bc : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)), c : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . ([%#span14] inv'2 a)
   -> ([%#span15] inv'2 b)
   -> ([%#span16] inv'2 c)
   -> ([%#span17] produces'1 a ab b)  -> ([%#span18] produces'1 b bc c)  -> ([%#span19] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'2 (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) : ()
    
  
  axiom produces_refl'2_spec : forall self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . ([%#span20] inv'2 self)
   -> ([%#span21] produces'1 self (Seq.empty  : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) self)
  
  use seq.Seq
  
  predicate next_precondition'0 (iter : Range'0.t_Range usize) (func : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (produced : Seq.seq usize)
    
   =
    [%#span22] forall e : usize, i : Range'0.t_Range usize . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 (iter : Range'0.t_Range usize) (func : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    [%#span23] forall s : Seq.seq usize, e1 : usize, e2 : usize, f : borrowed Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z, b : Vec'0.t_Vec usize (Global'0.t_Global), i : Range'0.t_Range usize . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 (iter : Range'0.t_Range usize) (func : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (produced : Seq.seq usize)
    
  
  axiom preservation_inv'0_spec : forall iter : Range'0.t_Range usize, func : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z, produced : Seq.seq usize . [%#span24] produced
  = (Seq.empty  : Seq.seq usize)  -> preservation_inv'0 iter func produced = preservation'0 iter func
  
  predicate resolve'3 (self : borrowed (Range'0.t_Range usize)) =
    [%#span25] self.final = self.current
  
  predicate completed'1 (self : borrowed (Range'0.t_Range usize)) =
    [%#span26] resolve'3 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  predicate reinitialize'0 (_1 : ()) =
    [%#span27] forall iter : borrowed (Range'0.t_Range usize), func : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq usize) /\ preservation'0 iter.final func
  
  predicate invariant'2 (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
  
  predicate inv'0 (_1 : Range'0.t_Range usize)
  
  axiom inv'2 : forall x : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . inv'2 x
  = (invariant'2 x
  /\ match x with
    | MapInv'0.C_MapInv iter func produced -> true
    end)
  
  predicate invariant'1 (self : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) =
    [%#span8] true
  
  axiom inv'1 : forall x : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z . inv'1 x
  = true
  
  predicate invariant'0 (self : Range'0.t_Range usize) =
    [%#span8] true
  
  axiom inv'0 : forall x : Range'0.t_Range usize . inv'0 x = true
  
  function produces_trans'1 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#span28] inv'0 a)
   -> ([%#span29] inv'0 b)
   -> ([%#span30] inv'0 c)
   -> ([%#span31] produces'0 a ab b)  -> ([%#span32] produces'0 b bc c)  -> ([%#span33] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_Range usize . ([%#span34] inv'0 self)
   -> ([%#span35] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#span36] inv'0 a)
   -> ([%#span37] inv'0 b)
   -> ([%#span38] inv'0 c)
   -> ([%#span39] produces'0 a ab b)  -> ([%#span40] produces'0 b bc c)  -> ([%#span41] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#span42] inv'0 self)
   -> ([%#span43] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span44] Seq.get (shallow_model'0 self) ix
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use T_06_knights_tour__Board as Board'0
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#span45] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (shallow_model'0 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (shallow_model'1 (index_logic'0 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Intrinsic
  
  predicate from_iter_post'0 (prod : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (res : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
    
   =
    [%#span46] prod = shallow_model'0 res
  
  predicate completed'0 (self : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z))
    
   =
    [%#span47] Snapshot.inner (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__produced self.final)
    = (Seq.empty  : Seq.seq usize)
    /\ completed'1 (Borrow.borrow_logic (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self.current) (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self.current
    = T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self.final
  
  predicate resolve'2 [#"../06_knights_tour.rs" 43 16 43 50] (_1 : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    true
  
  predicate resolve'1 (self : Range'0.t_Range usize) =
    [%#span48] true
  
  predicate resolve'0 (self : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)
    
   =
    [%#span49] resolve'1 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__iter self)
    /\ resolve'2 (T_creusot_contracts__stdqy35z1__iter__map_inv__MapInv.t_MapInv__func self)
  
  let rec collect'0 (self:MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (return'  (ret:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= {[@expl:precondition] [%#span50] inv'2 self}
    any
    [ return' (result:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {[%#span52] inv'3 result}
      {[%#span51] exists done' : borrowed (MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z), prod : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . resolve'0 done'.final
      /\ completed'0 done' /\ produces'1 self prod done'.current /\ from_iter_post'0 prod result}
      (! return' {result}) ]
    
  
  let rec map_inv'0 (self:Range'0.t_Range usize) (func:Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) (return'  (ret:MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z))= {[@expl:precondition] [%#span57] inv'1 func}
    {[@expl:precondition] [%#span56] inv'0 self}
    {[@expl:precondition] [%#span55] preservation'0 self func}
    {[@expl:precondition] [%#span54] reinitialize'0 ()}
    {[@expl:precondition] [%#span53] forall e : usize, i2 : Range'0.t_Range usize . produces'0 self (Seq.singleton e) i2
     -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq usize))}
    any
    [ return' (result:MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z)-> {[%#span59] inv'2 result}
      {[%#span58] result = MapInv'0.C_MapInv self func (Snapshot.new (Seq.empty  : Seq.seq usize))}
      (! return' {result}) ]
    
  
  let rec new (size:usize) (return'  (ret:Board'0.t_Board))= {[%#s06_knights_tour1] UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#s06_knights_tour0] (0 : usize)) size ] s1
      | s1 =  [ &_9 <- Closure'0.M_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z size ] s2
      | s2 = map_inv'0 {_7} {_9}
          (fun (_ret':MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z) ->
             [ &_6 <- _ret' ] 
            s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = collect'0 {_6}
          (fun (_ret':Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
             [ &rows <- _ret' ] 
            s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- Board'0.C_Board size rows ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : Board'0.t_Board = any_l ()
    | & size : usize = size
    | & rows : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) = any_l ()
    | & _6 : MapInv'0.t_MapInv (Range'0.t_Range usize) usize Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z = any_l ()
    | & _7 : Range'0.t_Range usize = any_l ()
    | & _9 : Closure'0.m_06_knights_tour__qy123zimplqy35z1qy125z__new__qy123zclosureqy35z3qy125z = any_l () ]
    
    [ return' (result:Board'0.t_Board)-> {[@expl:postcondition] [%#s06_knights_tour3] wf'0 result}
      {[@expl:postcondition] [%#s06_knights_tour2] T_06_knights_tour__Board.t_Board__size result = size}
      (! return' {result}) ]
    
end
module M_06_knights_tour__qy123zimplqy35z1qy125z__available
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 53 8 53 9
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 55 15 55 16
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 57 57 57 58
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 53 8 57 58
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 50 15 50 24
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 51 4 51 44
  
  let%span span6 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span12 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span15 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  
  let%span span18 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span23 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  predicate inv'1 (_1 : usize)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'9 (self : usize) =
    [%#span6] inv'1 self
  
  predicate inv'9 (_1 : usize)
  
  axiom inv'9 : forall x : usize . inv'9 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'5 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  predicate invariant'8 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span6] inv'5 self
  
  predicate inv'8 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'8 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'8 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq usize) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq usize)
  
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'6 (_1 : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'6 : forall x : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'6 x = true
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  function shallow_model'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span9] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'5 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span10] inv'7 (shallow_model'3 self)
  
  axiom inv'5 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'5 x = true
  
  function shallow_model'2 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span9] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'4 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span10] inv'6 (shallow_model'2 self)
  
  predicate inv'4 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv'4 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : usize) =
    [%#span11] inv'1 self
  
  predicate inv'3 (_1 : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  predicate invariant'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span11] inv'5 self
  
  predicate inv'2 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'2 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span12] true
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span11] inv'4 self
  
  predicate inv'0 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv'0 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'0 x = true
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as Point'0
  
  use T_06_knights_tour__Board as Board'0
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#span13] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span14] Seq.get (shallow_model'2 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#span15] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (shallow_model'2 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (shallow_model'3 (index_logic'0 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize =
    [%#span18] shallow_model'3 self
  
  let rec index'1 (self:Vec'0.t_Vec usize (Global'0.t_Global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span21] inv'1 index}
    {[@expl:precondition] [%#span20] inv'2 self}
    {[@expl:precondition] [%#span19] in_bounds'2 index (shallow_model'1 self)}
    any
    [ return' (result:usize)-> {[%#span23] inv'3 result}
      {[%#span22] has_value'1 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span18] shallow_model'2 self
  
  let rec index'0 (self:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (index:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] [%#span21] inv'1 index}
    {[@expl:precondition] [%#span20] inv'0 self}
    {[@expl:precondition] [%#span19] in_bounds'1 index (shallow_model'0 self)}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[%#span23] inv'2 result}
      {[%#span22] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  use prelude.prelude.IntSize
  
  let rec available (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:bool))= {[%#s06_knights_tour4] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[%#s06_knights_tour0] (0 : isize)} {rx'0} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1))
      | s1 = any [ br0 -> {_5 = false} (! bb8) | br1 -> {_5} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_8 <- _res ] s1))
      | s1 = Board'0.t_Board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            UIntSize.lt {_8} {rsize'0} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2))
      | s2 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            IntSize.le {[%#s06_knights_tour1] (0 : isize)} {ry'0} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1))
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_14 <- _res ] s1))
      | s1 = Board'0.t_Board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            UIntSize.lt {_14} {rsize'0} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2))
      | s2 = any [ br0 -> {_13 = false} (! bb5) | br1 -> {_13} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_22 <- _res ] s1))
      | s1 = Board'0.t_Board {self}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            index'0 {rfield'0} {_22} (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_20 <- _ret' ] s2))
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_24 <- _res ] s1))
      | s1 = index'1 {_20} {_24} (fun (_ret':usize) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 = UIntSize.eq {_18} {[%#s06_knights_tour2] (0 : usize)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb5 = bb9
    | bb6 = bb9
    | bb7 = bb9
    | bb8 = bb9
    | bb9 = s0 [ s0 =  [ &_0 <- [%#s06_knights_tour3] false ] s1 | s1 = bb12 ] 
    | bb12 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & self : Board'0.t_Board = self
    | & p : Point'0.t_Point = p
    | & _5 : bool = any_l ()
    | & _7 : bool = any_l ()
    | & _8 : usize = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : bool = any_l ()
    | & _14 : usize = any_l ()
    | & _18 : usize = any_l ()
    | & _20 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _22 : usize = any_l ()
    | & _24 : usize = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#s06_knights_tour5] result  -> in_bounds'0 self p}
      (! return' {result}) ]
    
end
module T_core__mem__manually_drop__ManuallyDrop
  type t_ManuallyDrop 't =
    | C_ManuallyDrop 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_ManuallyDrop < 't > (input:t_ManuallyDrop 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_ManuallyDrop value = input} (! ret {value})
    | bad (value:'t)-> {C_ManuallyDrop value <> input} {false} any ]
    
end
module T_alloc__vec__into_iter__IntoIter
  use prelude.prelude.Opaque
  
  use T_core__mem__manually_drop__ManuallyDrop as ManuallyDrop'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_IntoIter 't 'a =
    | C_IntoIter (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't) usize (ManuallyDrop'0.t_ManuallyDrop 'a) (NonNull'0.t_NonNull 't) opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_IntoIter < 't > < 'a > (input:t_IntoIter 't 'a) (ret  (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr))= any
    [ good (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      = input}
      (! ret {buf} {phantom} {cap} {alloc} {ptr} {end'})
    | bad (buf:NonNull'0.t_NonNull 't) (phantom:PhantomData'0.t_PhantomData 't) (cap:usize) (alloc:ManuallyDrop'0.t_ManuallyDrop 'a) (ptr:NonNull'0.t_NonNull 't) (end':opaque_ptr)-> {C_IntoIter buf phantom cap alloc ptr end'
      <> input}
      {false}
      any ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_06_knights_tour__qy123zimplqy35z1qy125z__count_degree
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 71 24 71 25
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 74 17 74 24
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 73 20 73 44
  
  let%span s06_knights_tour6 = "../06_knights_tour.rs" 73 8 73 46
  
  let%span s06_knights_tour7 = "../06_knights_tour.rs" 77 25 77 26
  
  let%span s06_knights_tour8 = "../06_knights_tour.rs" 68 15 68 24
  
  let%span s06_knights_tour9 = "../06_knights_tour.rs" 69 15 69 32
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span13 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span14 = "" 0 0 0 0
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span17 = "../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42
  
  let%span span21 = "../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10
  
  let%span span24 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span26 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span27 = "../06_knights_tour.rs" 50 15 50 24
  
  let%span span28 = "../06_knights_tour.rs" 51 4 51 44
  
  let%span span29 = "../06_knights_tour.rs" 12 15 12 52
  
  let%span span30 = "../06_knights_tour.rs" 13 15 13 52
  
  let%span span31 = "../06_knights_tour.rs" 14 15 14 46
  
  let%span span32 = "../06_knights_tour.rs" 15 15 15 46
  
  let%span span33 = "../06_knights_tour.rs" 16 14 16 41
  
  let%span span34 = "../06_knights_tour.rs" 17 14 17 41
  
  let%span span35 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span36 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span37 = "../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57
  
  let%span span38 = "" 0 0 0 0
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter.rs" 99 26 102 17
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33
  
  let%span span42 = "../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24
  
  let%span span43 = "../../../../../creusot-contracts/src/std/iter.rs" 93 0 179 1
  
  let%span span44 = "" 0 0 0 0
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../06_knights_tour.rs" 93 10 93 28
  
  let%span span47 = "../06_knights_tour.rs" 94 0 94 130
  
  use prelude.prelude.IntSize
  
  predicate invariant'6 (self : (isize, isize)) =
    [%#span10] true
  
  predicate inv'6 (_1 : (isize, isize))
  
  axiom inv'6 : forall x : (isize, isize) . inv'6 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'5 (self : (isize, isize)) =
    [%#span11] inv'6 self
  
  predicate inv'5 (_1 : (isize, isize))
  
  axiom inv'5 : forall x : (isize, isize) . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq (isize, isize)) =
    [%#span12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq (isize, isize))
  
  axiom inv'4 : forall x : Seq.seq (isize, isize) . inv'4 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'3 (self : Option'0.t_Option (isize, isize)) =
    [%#span10] true
  
  predicate inv'3 (_1 : Option'0.t_Option (isize, isize))
  
  axiom inv'3 : forall x : Option'0.t_Option (isize, isize) . inv'3 x = true
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  predicate inv'0 (_1 : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#span13] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))
  
  axiom inv'2 : forall x : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) . inv'2 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span14] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) . [%#span15] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'1 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) =
    [%#span16] inv'4 (shallow_model'0 self)
  
  predicate inv'1 (_1 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global))
  
  axiom inv'1 : forall x : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) . inv'1 x = true
  
  use seq.Seq
  
  function shallow_model'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  predicate produces'0 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (visited : Seq.seq (isize, isize)) (rhs : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#span17] shallow_model'1 self = Seq.(++) visited (shallow_model'1 rhs)
  
  function produces_trans'0 (a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (ab : Seq.seq (isize, isize)) (b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (bc : Seq.seq (isize, isize)) (c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : ()
    
   =
    [%#span21] ()
  
  axiom produces_trans'0_spec : forall a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), ab : Seq.seq (isize, isize), b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), bc : Seq.seq (isize, isize), c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . ([%#span18] produces'0 a ab b)
   -> ([%#span19] produces'0 b bc c)  -> ([%#span20] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : () =
    [%#span23] ()
  
  axiom produces_refl'0_spec : forall self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . [%#span22] produces'0 self (Seq.empty  : Seq.seq (isize, isize)) self
  
  predicate invariant'0 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) =
    [%#span10] true
  
  axiom inv'0 : forall x : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . inv'0 x = true
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as Point'0
  
  use T_06_knights_tour__Board as Board'0
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#span24] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use seq.Seq
  
  function shallow_model'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span15] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  function shallow_model'2 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span15] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span25] Seq.get (shallow_model'2 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#span26] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (shallow_model'2 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (shallow_model'3 (index_logic'1 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec available'0 (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:bool))= {[@expl:precondition] [%#span27] wf'0 self}
    any [ return' (result:bool)-> {[%#span28] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec mov'0 (self:Point'0.t_Point) (p:(isize, isize)) (return'  (ret:Point'0.t_Point))= {[@expl:precondition] [%#span32] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [%#span31] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [%#span30] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) <= 10000}
    {[@expl:precondition] [%#span29] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) <= 10000}
    any
    [ return' (result:Point'0.t_Point)-> {[%#span34] IntSize.to_int (T_06_knights_tour__Point.t_Point__y result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) + IntSize.to_int (let (_, a) = p in a)}
      {[%#span33] IntSize.to_int (T_06_knights_tour__Point.t_Point__x result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#span35] self.final = self.current
  
  function shallow_model'4 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) : Seq.seq (isize, isize)
    
   =
    [%#span36] shallow_model'1 self.current
  
  predicate completed'0 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#span37] resolve'0 self /\ shallow_model'4 self = (Seq.empty  : Seq.seq (isize, isize))
  
  let rec next'0 (self:borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) (return'  (ret:Option'0.t_Option (isize, isize)))= {[@expl:precondition] [%#span38] inv'2 self}
    any
    [ return' (result:Option'0.t_Option (isize, isize))-> {[%#span40] inv'3 result}
      {[%#span39] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#span41] shallow_model'0 self = shallow_model'1 res
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) =
    [%#span42] true
  
  let rec into_iter'0 (self:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (return'  (ret:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))= {[@expl:precondition] [%#span44] inv'1 self}
    {[@expl:precondition] [%#span43] into_iter_pre'0 self}
    any
    [ return' (result:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))-> {[%#span45] inv'0 result}
      {[%#span43] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (ix : int) : (isize, isize)
    
   =
    [%#span25] Seq.get (shallow_model'0 self) ix
  
  let rec moves'0 (_1:()) (return'  (ret:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (isize, isize) (Global'0.t_Global))-> {[%#span47] forall i : int . 0 <= i /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'0 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'0 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'0 result i in a) <= 2}
      {[%#span46] Seq.length (shallow_model'0 result) = 8}
      (! return' {result}) ]
    
  
  let rec count_degree (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:usize))= {[%#s06_knights_tour9] in_bounds'0 self p}
    {[%#s06_knights_tour8] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [%#s06_knights_tour0] (0 : usize) ] s1
      | s1 = moves'0 {[%#s06_knights_tour1] ()}
          (fun (_ret':Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_8}
          (fun (_ret':IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour2] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &produced <- [%#s06_knights_tour3] Snapshot.new (Seq.empty  : Seq.seq (isize, isize)) ] s1 | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#s06_knights_tour5] UIntSize.to_int count
        <= Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#s06_knights_tour4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour4] inv'0 iter}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)> {iter}
              (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <- _19.final ] 
                s1)
          | s1 = Borrow.borrow_final
              <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)>
              {_19.current}
              {Borrow.get_id _19}
              (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = _18.final ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_Option (isize, isize)) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Option'0.C_None } (! bb12) | br1 (a:(isize, isize))-> {_17 = Option'0.C_Some a} (! bb11) ]
             ]
          
        | bb11 = bb13
        | bb13 = s0
          [ s0 = Option'0.v_Some <(isize, isize)> {_17}
              (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- [%#s06_knights_tour6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _22 ] s1
          | s1 =  [ &m <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_28 <- m ] s3
          | s3 = mov'0 {p} {_28} (fun (_ret':Point'0.t_Point) ->  [ &next <- _ret' ] s4)
          | s4 = bb15 ]
          
        | bb15 = s0 [ s0 = available'0 {self} {next} (fun (_ret':bool) ->  [ &_29 <- _ret' ] s1) | s1 = bb16 ] 
        | bb16 = any [ br0 -> {_29 = false} (! bb18) | br1 -> {_29} (! bb17) ] 
        | bb17 = s0
          [ s0 = UIntSize.add {count} {[%#s06_knights_tour7] (1 : usize)} (fun (_ret':usize) ->  [ &count <- _ret' ] s1)
          | s1 = bb19 ]
          
        | bb18 = bb19
        | bb19 = bb7 ]
         ]
      
    | bb12 = bb20
    | bb20 = s0 [ s0 =  [ &_0 <- count ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : Board'0.t_Board = self
    | & p : Point'0.t_Point = p
    | & count : usize = any_l ()
    | & iter : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) = any_l ()
    | & _8 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) = any_l ()
    | & iter_old : Snapshot.snap_ty (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & _17 : Option'0.t_Option (isize, isize) = any_l ()
    | & _18 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & _19 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & __creusot_proc_iter_elem : (isize, isize) = any_l ()
    | & _22 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & m : (isize, isize) = any_l ()
    | & next : Point'0.t_Point = any_l ()
    | & _28 : (isize, isize) = any_l ()
    | & _29 : bool = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module M_06_knights_tour__qy123zimplqy35z1qy125z__set
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 83 15 83 24
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 84 15 84 32
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 85 14 85 26
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 86 14 86 42
  
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span9 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span13 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span14 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span15 = "../../../../../creusot-contracts/src/std/slice.rs" 138 8 138 96
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  
  let%span span18 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span26 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  predicate inv'1 (_1 : usize)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'9 (self : usize) =
    [%#span4] inv'1 self
  
  predicate inv'9 (_1 : usize)
  
  axiom inv'9 : forall x : usize . inv'9 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'5 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  predicate invariant'8 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span4] inv'5 self
  
  predicate inv'8 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'8 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'8 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq usize) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq usize)
  
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'6 (_1 : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'6 : forall x : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'6 x = true
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  function shallow_model'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span7] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'5 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span8] inv'7 (shallow_model'3 self)
  
  axiom inv'5 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'5 x = true
  
  function shallow_model'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span7] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'4 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span8] inv'6 (shallow_model'1 self)
  
  predicate inv'4 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv'4 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed usize) =
    [%#span9] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed usize)
  
  axiom inv'3 : forall x : borrowed usize . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span9] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span10] true
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) =
    [%#span9] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))
  
  axiom inv'0 : forall x : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) . inv'0 x
  = true
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use prelude.prelude.IntSize
  
  use T_06_knights_tour__Point as Point'0
  
  use T_06_knights_tour__Board as Board'0
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#span11] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span12] Seq.get (shallow_model'1 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#span13] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (shallow_model'1 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (shallow_model'3 (index_logic'0 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Board'0.t_Board)) =
    [%#span14] self.final = self.current
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span14] self.final = self.current
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span14] self.final = self.current
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span15] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'2 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#span18] shallow_model'3 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span21] inv'1 index}
    {[@expl:precondition] [%#span20] inv'2 self}
    {[@expl:precondition] [%#span19] in_bounds'2 index (shallow_model'2 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span26] inv'3 result}
      {[%#span25] Seq.length (shallow_model'3 self.final) = Seq.length (shallow_model'2 self)}
      {[%#span24] resolve_elswhere'1 index (shallow_model'2 self) (shallow_model'3 self.final)}
      {[%#span23] has_value'1 index (shallow_model'3 self.final) result.final}
      {[%#span22] has_value'1 index (shallow_model'2 self) result.current}
      (! return' {result}) ]
    
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (fin : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
    
   =
    [%#span15] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span18] shallow_model'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))))= {[@expl:precondition] [%#span21] inv'1 index}
    {[@expl:precondition] [%#span20] inv'0 self}
    {[@expl:precondition] [%#span19] in_bounds'1 index (shallow_model'0 self)}
    any
    [ return' (result:borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))-> {[%#span26] inv'2 result}
      {[%#span25] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'0 self)}
      {[%#span24] resolve_elswhere'0 index (shallow_model'0 self) (shallow_model'1 self.final)}
      {[%#span23] has_value'0 index (shallow_model'1 self.final) result.final}
      {[%#span22] has_value'0 index (shallow_model'0 self) result.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.IntSize
  
  let rec set (self:borrowed (Board'0.t_Board)) (p:Point'0.t_Point) (v:usize) (return'  (ret:()))= {[%#s06_knights_tour1] in_bounds'0 self.current p}
    {[%#s06_knights_tour0] wf'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Board'0.t_Board {self.current}
          (fun (rsize'0:usize) (rfield'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
            Borrow.borrow_final
              <Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)>
              {rfield'0}
              {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) ->
                 [ &_12 <- _ret' ] 
                Board'0.t_Board {self.current}
                  (fun (l_size'0:usize) (l_field'0:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
                     [ &self <- { self with current = Board'0.C_Board l_size'0 _12.final ; } ] 
                    s1)))
      | s1 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int rx'0} (fun (_res:usize) ->  [ &_13 <- _res ] s2))
      | s2 = index_mut'0 {_12} {_13}
          (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {_11.current} {Borrow.get_id _11}
          (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
             [ &_10 <- _ret' ] 
             [ &_11 <- { _11 with current = _10.final ; } ] 
            s1)
      | s1 = Point'0.t_Point {p}
          (fun (rx'0:isize) (ry'0:isize) ->
            UIntSize.of_int {IntSize.to_int ry'0} (fun (_res:usize) ->  [ &_15 <- _res ] s2))
      | s2 = index_mut'1 {_10} {_15} (fun (_ret':borrowed usize) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'1 _11}- s3
      | s3 = -{resolve'2 self}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Board'0.t_Board) = self
    | & p : Point'0.t_Point = p
    | & v : usize = v
    | & _9 : borrowed usize = any_l ()
    | & _10 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _11 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _12 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) = any_l ()
    | & _13 : usize = any_l ()
    | & _15 : usize = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s06_knights_tour3] T_06_knights_tour__Board.t_Board__size self.final
      = T_06_knights_tour__Board.t_Board__size self.current}
      {[@expl:postcondition] [%#s06_knights_tour2] wf'0 self.final}
      (! return' {result}) ]
    
end
module T_core__slice__iter__Iter
  use prelude.prelude.Borrow
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Iter 't =
    | C_Iter (NonNull'0.t_NonNull 't) opaque_ptr (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Iter < 't > (input:t_Iter 't) (ret  (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module M_06_knights_tour__min
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 113 4 114 74
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 109 0 110 62
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  
  let%span span15 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 98 14 98 41
  
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 99 4 99 82
  
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 408 12 408 66
  
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 419 15 419 32
  
  let%span span20 = "../../../../../creusot-contracts/src/std/slice.rs" 420 15 420 32
  
  let%span span21 = "../../../../../creusot-contracts/src/std/slice.rs" 421 14 421 42
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 417 4 417 10
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 414 14 414 45
  
  let%span span24 = "../../../../../creusot-contracts/src/std/slice.rs" 412 4 412 10
  
  let%span span25 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span26 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span27 = "../../../../../creusot-contracts/src/std/slice.rs" 401 20 401 61
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter.rs" 99 26 102 17
  
  let%span span29 = "" 0 0 0 0
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span31 = "../../../../../creusot-contracts/src/std/vec.rs" 205 20 205 34
  
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 199 20 199 24
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter.rs" 93 0 179 1
  
  let%span span34 = "" 0 0 0 0
  
  use T_06_knights_tour__Point as Point'0
  
  use prelude.prelude.UIntSize
  
  predicate invariant'6 (self : (usize, Point'0.t_Point)) =
    [%#span5] true
  
  predicate inv'6 (_1 : (usize, Point'0.t_Point))
  
  axiom inv'6 : forall x : (usize, Point'0.t_Point) . inv'6 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'5 (self : (usize, Point'0.t_Point)) =
    [%#span6] inv'6 self
  
  predicate inv'5 (_1 : (usize, Point'0.t_Point))
  
  axiom inv'5 : forall x : (usize, Point'0.t_Point) . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq (usize, Point'0.t_Point)) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq (usize, Point'0.t_Point))
  
  axiom inv'4 : forall x : Seq.seq (usize, Point'0.t_Point) . inv'4 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point)
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . [%#span9] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'3 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) =
    [%#span10] inv'4 (shallow_model'2 self)
  
  predicate inv'3 (_1 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))
  
  axiom inv'3 : forall x : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . inv'3 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'2 (self : Option'0.t_Option (usize, Point'0.t_Point)) =
    [%#span5] true
  
  predicate inv'2 (_1 : Option'0.t_Option (usize, Point'0.t_Point))
  
  axiom inv'2 : forall x : Option'0.t_Option (usize, Point'0.t_Point) . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) =
    [%#span11] inv'3 self
  
  predicate inv'1 (_1 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))
  
  axiom inv'1 : forall x : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . inv'1 x = true
  
  use T_core__slice__iter__Iter as Iter'0
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  function shallow_model'5 (self : slice (usize, Point'0.t_Point)) : Seq.seq (usize, Point'0.t_Point)
  
  axiom shallow_model'5_spec : forall self : slice (usize, Point'0.t_Point) . ([%#span13] shallow_model'5 self
  = Slice.id self)
  && ([%#span12] Seq.length (shallow_model'5 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice (usize, Point'0.t_Point)) (ix : int) : (usize, Point'0.t_Point)
   =
    [%#span14] Seq.get (shallow_model'5 self) ix
  
  use seq.Seq
  
  function shallow_model'3 (self : slice (usize, Point'0.t_Point)) : Seq.seq (usize, Point'0.t_Point) =
    [%#span15] shallow_model'5 self
  
  use seq.Seq
  
  function to_ref_seq'0 (self : slice (usize, Point'0.t_Point)) : Seq.seq (usize, Point'0.t_Point)
  
  axiom to_ref_seq'0_spec : forall self : slice (usize, Point'0.t_Point) . ([%#span17] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'1 self i)
  && ([%#span16] Seq.length (to_ref_seq'0 self) = Seq.length (shallow_model'3 self))
  
  function shallow_model'1 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) : slice (usize, Point'0.t_Point)
  
  predicate produces'0 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) (visited : Seq.seq (usize, Point'0.t_Point)) (tl : Iter'0.t_Iter (usize, Point'0.t_Point))
    
   =
    [%#span18] to_ref_seq'0 (shallow_model'1 self) = Seq.(++) visited (to_ref_seq'0 (shallow_model'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_Iter (usize, Point'0.t_Point)) (ab : Seq.seq (usize, Point'0.t_Point)) (b : Iter'0.t_Iter (usize, Point'0.t_Point)) (bc : Seq.seq (usize, Point'0.t_Point)) (c : Iter'0.t_Iter (usize, Point'0.t_Point)) : ()
    
   =
    [%#span22] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_Iter (usize, Point'0.t_Point), ab : Seq.seq (usize, Point'0.t_Point), b : Iter'0.t_Iter (usize, Point'0.t_Point), bc : Seq.seq (usize, Point'0.t_Point), c : Iter'0.t_Iter (usize, Point'0.t_Point) . ([%#span19] produces'0 a ab b)
   -> ([%#span20] produces'0 b bc c)  -> ([%#span21] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) : () =
    [%#span24] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_Iter (usize, Point'0.t_Point) . [%#span23] produces'0 self (Seq.empty  : Seq.seq (usize, Point'0.t_Point)) self
  
  predicate invariant'0 (self : Iter'0.t_Iter (usize, Point'0.t_Point)) =
    [%#span5] true
  
  predicate inv'0 (_1 : Iter'0.t_Iter (usize, Point'0.t_Point))
  
  axiom inv'0 : forall x : Iter'0.t_Iter (usize, Point'0.t_Point) . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) =
    [%#span25] self.final = self.current
  
  use seq.Seq
  
  function shallow_model'4 (self : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) : slice (usize, Point'0.t_Point) =
    [%#span26] shallow_model'1 self.current
  
  predicate completed'0 (self : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) =
    [%#span27] resolve'0 self
    /\ shallow_model'5 (shallow_model'4 self) = (Seq.empty  : Seq.seq (usize, Point'0.t_Point))
  
  let rec next'0 (self:borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) (return'  (ret:Option'0.t_Option (usize, Point'0.t_Point)))= any
    [ return' (result:Option'0.t_Option (usize, Point'0.t_Point))-> {[%#span29] inv'2 result}
      {[%#span28] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (ix : int) : (usize, Point'0.t_Point)
    
   =
    [%#span30] Seq.get (shallow_model'2 self) ix
  
  function shallow_model'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point)
    
   =
    [%#span15] shallow_model'2 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (res : Iter'0.t_Iter (usize, Point'0.t_Point))
    
   =
    [%#span31] shallow_model'0 self = shallow_model'3 (shallow_model'1 res)
  
  predicate into_iter_pre'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) =
    [%#span32] true
  
  let rec into_iter'0 (self:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (return'  (ret:Iter'0.t_Iter (usize, Point'0.t_Point)))= {[@expl:precondition] [%#span34] inv'1 self}
    {[@expl:precondition] [%#span33] into_iter_pre'0 self}
    any
    [ return' (result:Iter'0.t_Iter (usize, Point'0.t_Point))-> {[%#span33] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec min (v:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (return'  (ret:Option'0.t_Option (usize, Point'0.t_Point)))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &min <- Option'0.C_None ] s1
      | s1 = into_iter'0 {v} (fun (_ret':Iter'0.t_Iter (usize, Point'0.t_Point)) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour0] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &produced <- [%#s06_knights_tour1] Snapshot.new (Seq.empty  : Seq.seq (usize, Point'0.t_Point)) ] s1
      | s1 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#s06_knights_tour2] forall r : (usize, Point'0.t_Point) . min
        = Option'0.C_Some r
         -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v) /\ index_logic'0 v i = r)}
        {[@expl:loop invariant] [%#s06_knights_tour2] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour2] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_Iter (usize, Point'0.t_Point)> {iter}
              (fun (_ret':borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) ->
                 [ &_17 <- _ret' ] 
                 [ &iter <- _17.final ] 
                s1)
          | s1 = Borrow.borrow_final <Iter'0.t_Iter (usize, Point'0.t_Point)> {_17.current} {Borrow.get_id _17}
              (fun (_ret':borrowed (Iter'0.t_Iter (usize, Point'0.t_Point))) ->
                 [ &_16 <- _ret' ] 
                 [ &_17 <- { _17 with current = _16.final ; } ] 
                s2)
          | s2 = next'0 {_16} (fun (_ret':Option'0.t_Option (usize, Point'0.t_Point)) ->  [ &_15 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _17}- s1
          | s1 = any
            [ br0 -> {_15 = Option'0.C_None } (! bb9)
            | br1 (a:(usize, Point'0.t_Point))-> {_15 = Option'0.C_Some a} (! bb8) ]
             ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.v_Some <(usize, Point'0.t_Point)> {_15}
              (fun (r0'0:(usize, Point'0.t_Point)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_20 <- [%#s06_knights_tour3] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _20 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = any
            [ br0 -> {min = Option'0.C_None } (! bb13)
            | br1 (a:(usize, Point'0.t_Point))-> {min = Option'0.C_Some a} (! bb14) ]
             ]
          
        | bb14 = s0
          [ s0 = Option'0.v_Some <(usize, Point'0.t_Point)> {min}
              (fun (r0'0:(usize, Point'0.t_Point)) ->  [ &m <- r0'0 ] s1)
          | s1 = UIntSize.lt {let (r'0, _) = x in r'0} {let (r'1, _) = m in r'1}
              (fun (_ret':bool) ->  [ &_28 <- _ret' ] s2)
          | s2 = any [ br0 -> {_28 = false} (! bb17) | br1 -> {_28} (! bb16) ]  ]
          
        | bb16 = s0 [ s0 =  [ &_31 <- Option'0.C_Some x ] s1 | s1 =  [ &min <- _31 ] s2 | s2 = bb18 ] 
        | bb17 = bb18
        | bb18 = bb19
        | bb13 = bb15
        | bb15 = s0 [ s0 =  [ &_25 <- Option'0.C_Some x ] s1 | s1 =  [ &min <- _25 ] s2 | s2 = bb19 ] 
        | bb19 = bb4 ]
         ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- min ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & v : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) = v
    | & min : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & iter : Iter'0.t_Iter (usize, Point'0.t_Point) = any_l ()
    | & iter_old : Snapshot.snap_ty (Iter'0.t_Iter (usize, Point'0.t_Point)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (usize, Point'0.t_Point)) = any_l ()
    | & _15 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & _16 : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point)) = any_l ()
    | & _17 : borrowed (Iter'0.t_Iter (usize, Point'0.t_Point)) = any_l ()
    | & __creusot_proc_iter_elem : (usize, Point'0.t_Point) = any_l ()
    | & _20 : Snapshot.snap_ty (Seq.seq (usize, Point'0.t_Point)) = any_l ()
    | & x : (usize, Point'0.t_Point) = any_l ()
    | & _25 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & m : (usize, Point'0.t_Point) = any_l ()
    | & _28 : bool = any_l ()
    | & _31 : Option'0.t_Option (usize, Point'0.t_Point) = any_l () ]
    
    [ return' (result:Option'0.t_Option (usize, Point'0.t_Point))-> {[@expl:postcondition] [%#s06_knights_tour4] forall r : (usize, Point'0.t_Point) . result
      = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'0 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
end
module M_06_knights_tour__dumb_nonlinear_arith__Impl
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 129 11 129 22
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 130 10 130 30
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  constant a  : usize
  
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
  
  goal vc_dumb_nonlinear_arith : ([%#s06_knights_tour0] UIntSize.to_int a <= 1000)
   -> ([%#s06_knights_tour1] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module M_06_knights_tour__knights_tour
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 139 17 139 18
  
  let%span s06_knights_tour1 = "../06_knights_tour.rs" 141 4 141 44
  
  let%span s06_knights_tour2 = "../06_knights_tour.rs" 145 16 145 17
  
  let%span s06_knights_tour3 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour4 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour5 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour6 = "../06_knights_tour.rs" 142 16 142 34
  
  let%span s06_knights_tour7 = "../06_knights_tour.rs" 143 16 143 26
  
  let%span s06_knights_tour8 = "../06_knights_tour.rs" 144 16 144 34
  
  let%span s06_knights_tour9 = "../06_knights_tour.rs" 142 4 142 36
  
  let%span s06_knights_tour10 = "../06_knights_tour.rs" 147 50 147 60
  
  let%span s06_knights_tour11 = "../06_knights_tour.rs" 150 17 150 24
  
  let%span s06_knights_tour12 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour13 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour14 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour15 = "../06_knights_tour.rs" 148 8 149 54
  
  let%span s06_knights_tour16 = "../06_knights_tour.rs" 133 11 133 37
  
  let%span s06_knights_tour17 = "../06_knights_tour.rs" 134 11 134 19
  
  let%span s06_knights_tour18 = "../06_knights_tour.rs" 135 11 135 19
  
  let%span span19 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span20 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span22 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span23 = "" 0 0 0 0
  
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span25 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 254 12 254 41
  
  let%span span27 = "../../../../../creusot-contracts/src/std/vec.rs" 265 15 265 32
  
  let%span span28 = "../../../../../creusot-contracts/src/std/vec.rs" 266 15 266 32
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 267 14 267 42
  
  let%span span30 = "../../../../../creusot-contracts/src/std/vec.rs" 263 4 263 10
  
  let%span span31 = "../../../../../creusot-contracts/src/std/vec.rs" 260 14 260 45
  
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 258 4 258 10
  
  let%span span33 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  
  let%span span39 = "../../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  
  let%span span40 = "../../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  
  let%span span41 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  
  let%span span42 = "../../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  
  let%span span43 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span44 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span45 = "../06_knights_tour.rs" 109 0 110 62
  
  let%span span46 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span47 = "" 0 0 0 0
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span50 = "../06_knights_tour.rs" 63 12 63 75
  
  let%span span51 = "../06_knights_tour.rs" 31 8 35 9
  
  let%span span52 = "../06_knights_tour.rs" 68 15 68 24
  
  let%span span53 = "../06_knights_tour.rs" 69 15 69 32
  
  let%span span54 = "../06_knights_tour.rs" 50 15 50 24
  
  let%span span55 = "../06_knights_tour.rs" 51 4 51 44
  
  let%span span56 = "../06_knights_tour.rs" 12 15 12 52
  
  let%span span57 = "../06_knights_tour.rs" 13 15 13 52
  
  let%span span58 = "../06_knights_tour.rs" 14 15 14 46
  
  let%span span59 = "../06_knights_tour.rs" 15 15 15 46
  
  let%span span60 = "../06_knights_tour.rs" 16 14 16 41
  
  let%span span61 = "../06_knights_tour.rs" 17 14 17 41
  
  let%span span62 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span63 = "../../../../../creusot-contracts/src/std/vec.rs" 247 20 247 57
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../../creusot-contracts/src/std/iter.rs" 99 26 102 17
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "../../../../../creusot-contracts/src/std/vec.rs" 191 20 191 33
  
  let%span span68 = "../../../../../creusot-contracts/src/std/vec.rs" 185 20 185 24
  
  let%span span69 = "../../../../../creusot-contracts/src/std/iter.rs" 93 0 179 1
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "" 0 0 0 0
  
  let%span span72 = "../06_knights_tour.rs" 93 10 93 28
  
  let%span span73 = "../06_knights_tour.rs" 94 0 94 130
  
  let%span span74 = "../../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  
  let%span span77 = "" 0 0 0 0
  
  let%span span78 = "" 0 0 0 0
  
  let%span span79 = "../../../../../creusot-contracts/src/std/iter.rs" 84 8 84 19
  
  let%span span80 = "../../../../../creusot-contracts/src/std/iter.rs" 78 20 78 24
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "" 0 0 0 0
  
  let%span span83 = "../06_knights_tour.rs" 129 11 129 22
  
  let%span span84 = "../06_knights_tour.rs" 130 10 130 30
  
  let%span span85 = "../06_knights_tour.rs" 128 0 128 8
  
  let%span span86 = "../06_knights_tour.rs" 83 15 83 24
  
  let%span span87 = "../06_knights_tour.rs" 84 15 84 32
  
  let%span span88 = "../06_knights_tour.rs" 85 14 85 26
  
  let%span span89 = "../06_knights_tour.rs" 86 14 86 42
  
  let%span span90 = "../06_knights_tour.rs" 37 15 37 28
  
  let%span span91 = "../06_knights_tour.rs" 38 14 38 33
  
  let%span span92 = "../06_knights_tour.rs" 39 14 39 25
  
  use prelude.prelude.IntSize
  
  predicate invariant'14 (self : (isize, isize)) =
    [%#span19] true
  
  predicate inv'14 (_1 : (isize, isize))
  
  axiom inv'14 : forall x : (isize, isize) . inv'14 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'13 (self : (isize, isize)) =
    [%#span20] inv'14 self
  
  predicate inv'13 (_1 : (isize, isize))
  
  axiom inv'13 : forall x : (isize, isize) . inv'13 x = true
  
  use T_06_knights_tour__Point as Point'0
  
  use prelude.prelude.UIntSize
  
  predicate inv'9 (_1 : (usize, Point'0.t_Point))
  
  predicate invariant'12 (self : (usize, Point'0.t_Point)) =
    [%#span20] inv'9 self
  
  predicate inv'12 (_1 : (usize, Point'0.t_Point))
  
  axiom inv'12 : forall x : (usize, Point'0.t_Point) . inv'12 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'11 (self : Seq.seq (isize, isize)) =
    [%#span21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq (isize, isize))
  
  axiom inv'11 : forall x : Seq.seq (isize, isize) . inv'11 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq (usize, Point'0.t_Point)) =
    [%#span21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'10 (_1 : Seq.seq (usize, Point'0.t_Point))
  
  axiom inv'10 : forall x : Seq.seq (usize, Point'0.t_Point) . inv'10 x = true
  
  predicate invariant'9 (self : (usize, Point'0.t_Point)) =
    [%#span19] true
  
  axiom inv'9 : forall x : (usize, Point'0.t_Point) . inv'9 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'4 (_1 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) =
    [%#span22] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'8 (_1 : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)))
  
  axiom inv'8 : forall x : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) . inv'8 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'7 (self : Option'0.t_Option (isize, isize)) =
    [%#span19] true
  
  predicate inv'7 (_1 : Option'0.t_Option (isize, isize))
  
  axiom inv'7 : forall x : Option'0.t_Option (isize, isize) . inv'7 x = true
  
  use T_alloc__vec__into_iter__IntoIter as IntoIter'0
  
  predicate inv'1 (_1 : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
  
  predicate invariant'6 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#span22] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'6 (_1 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))
  
  axiom inv'6 : forall x : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) . inv'6 x = true
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span23] (18446744073709551615 : usize)
  
  function shallow_model'3 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) . [%#span24] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'5 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) =
    [%#span25] inv'11 (shallow_model'3 self)
  
  predicate inv'5 (_1 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global))
  
  axiom inv'5 : forall x : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) . inv'5 x = true
  
  function shallow_model'0 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point)
    
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . [%#span24] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'4 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) =
    [%#span25] inv'10 (shallow_model'0 self)
  
  axiom inv'4 : forall x : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) . inv'4 x = true
  
  predicate invariant'3 (self : Option'0.t_Option usize) =
    [%#span19] true
  
  predicate inv'3 (_1 : Option'0.t_Option usize)
  
  axiom inv'3 : forall x : Option'0.t_Option usize . inv'3 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'0 (_1 : Range'0.t_Range usize)
  
  predicate invariant'2 (self : borrowed (Range'0.t_Range usize)) =
    [%#span22] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv'2 : forall x : borrowed (Range'0.t_Range usize) . inv'2 x = true
  
  use seq.Seq
  
  function shallow_model'4 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : Seq.seq (isize, isize)
  
  predicate produces'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (visited : Seq.seq (isize, isize)) (rhs : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#span26] shallow_model'4 self = Seq.(++) visited (shallow_model'4 rhs)
  
  function produces_trans'1 (a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (ab : Seq.seq (isize, isize)) (b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) (bc : Seq.seq (isize, isize)) (c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : ()
    
   =
    [%#span30] ()
  
  axiom produces_trans'1_spec : forall a : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), ab : Seq.seq (isize, isize), b : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global), bc : Seq.seq (isize, isize), c : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . ([%#span27] produces'1 a ab b)
   -> ([%#span28] produces'1 b bc c)  -> ([%#span29] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) : () =
    [%#span32] ()
  
  axiom produces_refl'1_spec : forall self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . [%#span31] produces'1 self (Seq.empty  : Seq.seq (isize, isize)) self
  
  predicate invariant'1 (self : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) =
    [%#span19] true
  
  axiom inv'1 : forall x : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) . inv'1 x = true
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#span33] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#span34] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#span35] inv'0 a)
   -> ([%#span36] inv'0 b)
   -> ([%#span37] inv'0 c)
   -> ([%#span38] produces'0 a ab b)  -> ([%#span39] produces'0 b bc c)  -> ([%#span40] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#span41] inv'0 self)
   -> ([%#span42] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'0 (self : Range'0.t_Range usize) =
    [%#span19] true
  
  axiom inv'0 : forall x : Range'0.t_Range usize . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use T_06_knights_tour__Board as Board'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (ix : int) : (usize, Point'0.t_Point)
    
   =
    [%#span43] Seq.get (shallow_model'0 self) ix
  
  function shallow_model'6 (self : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) : Seq.seq (usize, Point'0.t_Point)
    
   =
    [%#span44] shallow_model'0 self
  
  let rec min'0 (v:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) (return'  (ret:Option'0.t_Option (usize, Point'0.t_Point)))= any
    [ return' (result:Option'0.t_Option (usize, Point'0.t_Point))-> {[%#span45] forall r : (usize, Point'0.t_Point) . result
      = Option'0.C_Some r  -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model'6 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function shallow_model'5 (self : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) : Seq.seq (usize, Point'0.t_Point)
    
   =
    [%#span46] shallow_model'0 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) (value:(usize, Point'0.t_Point)) (return'  (ret:()))= {[@expl:precondition] [%#span48] inv'9 value}
    {[@expl:precondition] [%#span47] inv'8 self}
    any
    [ return' (result:())-> {[%#span49] shallow_model'0 self.final = Seq.snoc (shallow_model'5 self) value}
      (! return' {result}) ]
    
  
  use T_06_knights_tour__Point as T_06_knights_tour__Point
  
  use T_06_knights_tour__Board as T_06_knights_tour__Board
  
  use prelude.prelude.IntSize
  
  predicate in_bounds'0 [#"../06_knights_tour.rs" 61 4 61 40] (self : Board'0.t_Board) (p : Point'0.t_Point) =
    [%#span50] 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ 0 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y p)
    < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
  
  function shallow_model'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span24] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  function shallow_model'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span24] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span43] Seq.get (shallow_model'1 self) ix
  
  predicate wf'0 [#"../06_knights_tour.rs" 30 4 30 23] (self : Board'0.t_Board) =
    [%#span51] UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self) <= 1000
    /\ Seq.length (shallow_model'1 (T_06_knights_tour__Board.t_Board__field self))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self)
     -> Seq.length (shallow_model'2 (index_logic'1 (T_06_knights_tour__Board.t_Board__field self) i))
    = UIntSize.to_int (T_06_knights_tour__Board.t_Board__size self))
  
  let rec count_degree'0 (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:usize))= {[@expl:precondition] [%#span53] in_bounds'0 self p}
    {[@expl:precondition] [%#span52] wf'0 self}
    any [ return' (result:usize)-> (! return' {result}) ] 
  
  let rec available'0 (self:Board'0.t_Board) (p:Point'0.t_Point) (return'  (ret:bool))= {[@expl:precondition] [%#span54] wf'0 self}
    any [ return' (result:bool)-> {[%#span55] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec mov'0 (self:Point'0.t_Point) (p:(isize, isize)) (return'  (ret:Point'0.t_Point))= {[@expl:precondition] [%#span59] - 10000
    <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    {[@expl:precondition] [%#span58] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:precondition] [%#span57] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__y self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) <= 10000}
    {[@expl:precondition] [%#span56] - 10000 <= IntSize.to_int (T_06_knights_tour__Point.t_Point__x self)
    /\ IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) <= 10000}
    any
    [ return' (result:Point'0.t_Point)-> {[%#span61] IntSize.to_int (T_06_knights_tour__Point.t_Point__y result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__y self) + IntSize.to_int (let (_, a) = p in a)}
      {[%#span60] IntSize.to_int (T_06_knights_tour__Point.t_Point__x result)
      = IntSize.to_int (T_06_knights_tour__Point.t_Point__x self) + IntSize.to_int (let (a, _) = p in a)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#span62] self.final = self.current
  
  function shallow_model'7 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) : Seq.seq (isize, isize)
    
   =
    [%#span46] shallow_model'4 self.current
  
  predicate completed'1 (self : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) =
    [%#span63] resolve'1 self /\ shallow_model'7 self = (Seq.empty  : Seq.seq (isize, isize))
  
  let rec next'1 (self:borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) (return'  (ret:Option'0.t_Option (isize, isize)))= {[@expl:precondition] [%#span64] inv'6 self}
    any
    [ return' (result:Option'0.t_Option (isize, isize))-> {[%#span66] inv'7 result}
      {[%#span65] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'1 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (res : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))
    
   =
    [%#span67] shallow_model'3 self = shallow_model'4 res
  
  predicate into_iter_pre'1 (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) =
    [%#span68] true
  
  let rec into_iter'1 (self:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (return'  (ret:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)))= {[@expl:precondition] [%#span70] inv'5 self}
    {[@expl:precondition] [%#span69] into_iter_pre'1 self}
    any
    [ return' (result:IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))-> {[%#span71] inv'1 result}
      {[%#span69] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) (ix : int) : (isize, isize)
    
   =
    [%#span43] Seq.get (shallow_model'3 self) ix
  
  let rec moves'0 (_1:()) (return'  (ret:Vec'0.t_Vec (isize, isize) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (isize, isize) (Global'0.t_Global))-> {[%#span73] forall i : int . 0 <= i /\ i < 8
       -> - 2 <= IntSize.to_int (let (a, _) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (a, _) = index_logic'2 result i in a) <= 2
      /\ - 2 <= IntSize.to_int (let (_, a) = index_logic'2 result i in a)
      /\ IntSize.to_int (let (_, a) = index_logic'2 result i in a) <= 2}
      {[%#span72] Seq.length (shallow_model'3 result) = 8}
      (! return' {result}) ]
    
  
  let rec new'1 (_1:()) (return'  (ret:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))-> {[%#span75] inv'4 result}
      {[%#span74] Seq.length (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#span62] self.final = self.current
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#span76] resolve'0 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] [%#span77] inv'2 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {[%#span78] inv'3 result}
      {[%#span65] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#span79] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#span80] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] [%#span81] inv'0 self}
    {[@expl:precondition] [%#span69] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {[%#span82] inv'0 result}
      {[%#span69] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function dumb_nonlinear_arith'0 [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : () =
    [%#span85] ()
  
  axiom dumb_nonlinear_arith'0_spec : forall a : usize . ([%#span83] UIntSize.to_int a <= 1000)
   -> ([%#span84] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
  
  let rec set'0 (self:borrowed (Board'0.t_Board)) (p:Point'0.t_Point) (v:usize) (return'  (ret:()))= {[@expl:precondition] [%#span87] in_bounds'0 self.current p}
    {[@expl:precondition] [%#span86] wf'0 self.current}
    any
    [ return' (result:())-> {[%#span89] T_06_knights_tour__Board.t_Board__size self.final
      = T_06_knights_tour__Board.t_Board__size self.current}
      {[%#span88] wf'0 self.final}
      (! return' {result}) ]
    
  
  let rec new'0 (size:usize) (return'  (ret:Board'0.t_Board))= {[@expl:precondition] [%#span90] UIntSize.to_int size
    <= 1000}
    any
    [ return' (result:Board'0.t_Board)-> {[%#span92] wf'0 result}
      {[%#span91] T_06_knights_tour__Board.t_Board__size result = size}
      (! return' {result}) ]
    
  
  let rec knights_tour (size:usize) (x:usize) (y:usize) (return'  (ret:Option'0.t_Option (Board'0.t_Board)))= {[%#s06_knights_tour18] y
    < size}
    {[%#s06_knights_tour17] x < size}
    {[%#s06_knights_tour16] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    (! bb0
    [ bb0 = s0 [ s0 = new'0 {size} (fun (_ret':Board'0.t_Board) ->  [ &board <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = IntSize.of_int {UIntSize.to_int x} (fun (_res:isize) ->  [ &_10 <- _res ] s1)
      | s1 = IntSize.of_int {UIntSize.to_int y} (fun (_res:isize) ->  [ &_12 <- _res ] s2)
      | s2 =  [ &p <- Point'0.C_Point _10 _12 ] s3
      | s3 = Borrow.borrow_mut <Board'0.t_Board> {board}
          (fun (_ret':borrowed (Board'0.t_Board)) ->  [ &_15 <- _ret' ]  [ &board <- _15.final ] s4)
      | s4 = set'0 {_15} {p} {[%#s06_knights_tour0] (1 : usize)} (fun (_ret':()) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_17 <- [%#s06_knights_tour1] Snapshot.new (dumb_nonlinear_arith'0 size) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UIntSize.mul {size} {size} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1)
      | s1 =  [ &_21 <- Range'0.C_Range ([%#s06_knights_tour2] (2 : usize)) _22 ] s2
      | s2 = into_iter'0 {_21} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour3] Snapshot.new iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s06_knights_tour4] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb9
      [ bb9 = {[@expl:loop invariant] [%#s06_knights_tour8] in_bounds'0 board p}
        {[@expl:loop invariant] [%#s06_knights_tour7] wf'0 board}
        {[@expl:loop invariant] [%#s06_knights_tour6] T_06_knights_tour__Board.t_Board__size board = size}
        {[@expl:loop invariant] [%#s06_knights_tour5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s06_knights_tour5] inv'0 iter}
        (! s0) [ s0 = bb10 ] 
        [ bb10 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_37 <- _ret' ]  [ &iter <- _37.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_37.current} {Borrow.get_id _37}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_36 <- _ret' ] 
                 [ &_37 <- { _37 with current = _36.final ; } ] 
                s2)
          | s2 = next'0 {_36} (fun (_ret':Option'0.t_Option usize) ->  [ &_35 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = -{resolve'0 _37}- s1
          | s1 = any
            [ br0 -> {_35 = Option'0.C_None } (! bb14) | br1 (a:usize)-> {_35 = Option'0.C_Some a} (! bb13) ]
             ]
          
        | bb13 = bb15
        | bb15 = s0
          [ s0 = Option'0.v_Some <usize> {_35} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_40 <- [%#s06_knights_tour9] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 =  [ &produced <- _40 ] s1
          | s1 =  [ &step <- __creusot_proc_iter_elem ] s2
          | s2 = new'1 {[%#s06_knights_tour10] ()}
              (fun (_ret':Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) ->  [ &candidates <- _ret' ] s3)
          | s3 = bb17 ]
          
        | bb17 = s0
          [ s0 = moves'0 {[%#s06_knights_tour11] ()}
              (fun (_ret':Vec'0.t_Vec (isize, isize) (Global'0.t_Global)) ->  [ &_46 <- _ret' ] s1)
          | s1 = bb18 ]
          
        | bb18 = s0
          [ s0 = into_iter'1 {_46}
              (fun (_ret':IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) ->  [ &iter1 <- _ret' ] s1)
          | s1 = bb19 ]
          
        | bb19 = s0 [ s0 =  [ &iter_old1 <- [%#s06_knights_tour12] Snapshot.new iter1 ] s1 | s1 = bb20 ] 
        | bb20 = s0
          [ s0 =  [ &produced1 <- [%#s06_knights_tour13] Snapshot.new (Seq.empty  : Seq.seq (isize, isize)) ] s1
          | s1 = bb21 ]
          
        | bb21 = bb22
        | bb22 = bb23
        | bb23 = bb24
        | bb24 = bb25
        | bb25 = bb25
          [ bb25 = {[@expl:loop invariant] [%#s06_knights_tour14] forall i : int . 0 <= i
            /\ i < Seq.length (shallow_model'0 candidates)
             -> in_bounds'0 board (let (_, a) = index_logic'0 candidates i in a)}
            {[@expl:loop invariant] [%#s06_knights_tour14] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#s06_knights_tour14] inv'1 iter1}
            (! s0) [ s0 = bb26 ] 
            [ bb26 = s0
              [ s0 = Borrow.borrow_mut <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)> {iter1}
                  (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                     [ &_56 <- _ret' ] 
                     [ &iter1 <- _56.final ] 
                    s1)
              | s1 = Borrow.borrow_final
                  <IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)>
                  {_56.current}
                  {Borrow.get_id _56}
                  (fun (_ret':borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global))) ->
                     [ &_55 <- _ret' ] 
                     [ &_56 <- { _56 with current = _55.final ; } ] 
                    s2)
              | s2 = next'1 {_55} (fun (_ret':Option'0.t_Option (isize, isize)) ->  [ &_54 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = -{resolve'1 _56}- s1
              | s1 = any
                [ br0 -> {_54 = Option'0.C_None } (! bb30)
                | br1 (a:(isize, isize))-> {_54 = Option'0.C_Some a} (! bb29) ]
                 ]
              
            | bb29 = bb31
            | bb31 = s0
              [ s0 = Option'0.v_Some <(isize, isize)> {_54}
                  (fun (r0'0:(isize, isize)) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_59 <- [%#s06_knights_tour15] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb32 ]
              
            | bb32 = s0
              [ s0 =  [ &produced1 <- _59 ] s1
              | s1 =  [ &m <- __creusot_proc_iter_elem1 ] s2
              | s2 =  [ &_65 <- m ] s3
              | s3 = mov'0 {p} {_65} (fun (_ret':Point'0.t_Point) ->  [ &adj <- _ret' ] s4)
              | s4 = bb33 ]
              
            | bb33 = s0 [ s0 = available'0 {board} {adj} (fun (_ret':bool) ->  [ &_66 <- _ret' ] s1) | s1 = bb34 ] 
            | bb34 = any [ br0 -> {_66 = false} (! bb38) | br1 -> {_66} (! bb35) ] 
            | bb35 = s0
              [ s0 = count_degree'0 {board} {adj} (fun (_ret':usize) ->  [ &degree <- _ret' ] s1) | s1 = bb36 ]
              
            | bb36 = s0
              [ s0 = Borrow.borrow_mut <Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)> {candidates}
                  (fun (_ret':borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global))) ->
                     [ &_73 <- _ret' ] 
                     [ &candidates <- _73.final ] 
                    s1)
              | s1 =  [ &_74 <- (degree, adj) ] s2
              | s2 = push'0 {_73} {_74} (fun (_ret':()) ->  [ &_72 <- _ret' ] s3)
              | s3 = bb37 ]
              
            | bb37 = bb39
            | bb38 = bb39
            | bb39 = bb25 ]
             ]
          
        | bb30 = bb40
        | bb40 = s0
          [ s0 =  [ &_81 <- candidates ] s1
          | s1 = min'0 {_81} (fun (_ret':Option'0.t_Option (usize, Point'0.t_Point)) ->  [ &_79 <- _ret' ] s2)
          | s2 = bb41 ]
          
        | bb41 = any
          [ br0 -> {_79 = Option'0.C_None } (! bb44)
          | br1 (a:(usize, Point'0.t_Point))-> {_79 = Option'0.C_Some a} (! bb43) ]
          
        | bb43 = bb45
        | bb45 = s0
          [ s0 = Option'0.v_Some <(usize, Point'0.t_Point)> {_79}
              (fun (r0'0:(usize, Point'0.t_Point)) ->  [ &adj1 <- let (_, r'0) = r0'0 in r'0 ] s1)
          | s1 =  [ &p <- adj1 ] s2
          | s2 = Borrow.borrow_mut <Board'0.t_Board> {board}
              (fun (_ret':borrowed (Board'0.t_Board)) ->  [ &_87 <- _ret' ]  [ &board <- _87.final ] s3)
          | s3 = set'0 {_87} {p} {step} (fun (_ret':()) ->  [ &_86 <- _ret' ] s4)
          | s4 = bb46 ]
          
        | bb46 = bb47
        | bb47 = bb9 ]
         ]
      
    | bb44 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb50 ] 
    | bb50 = bb51
    | bb51 = bb52
    | bb14 = s0 [ s0 =  [ &_0 <- Option'0.C_Some board ] s1 | s1 = bb48 ] 
    | bb48 = bb49
    | bb49 = bb52
    | bb52 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (Board'0.t_Board) = any_l ()
    | & size : usize = size
    | & x : usize = x
    | & y : usize = y
    | & board : Board'0.t_Board = any_l ()
    | & p : Point'0.t_Point = any_l ()
    | & _10 : isize = any_l ()
    | & _12 : isize = any_l ()
    | & _14 : () = any_l ()
    | & _15 : borrowed (Board'0.t_Board) = any_l ()
    | & _17 : Snapshot.snap_ty () = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _21 : Range'0.t_Range usize = any_l ()
    | & _22 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _35 : Option'0.t_Option usize = any_l ()
    | & _36 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _37 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _40 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & step : usize = any_l ()
    | & candidates : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) = any_l ()
    | & iter1 : IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global) = any_l ()
    | & _46 : Vec'0.t_Vec (isize, isize) (Global'0.t_Global) = any_l ()
    | & iter_old1 : Snapshot.snap_ty (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & _54 : Option'0.t_Option (isize, isize) = any_l ()
    | & _55 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & _56 : borrowed (IntoIter'0.t_IntoIter (isize, isize) (Global'0.t_Global)) = any_l ()
    | & __creusot_proc_iter_elem1 : (isize, isize) = any_l ()
    | & _59 : Snapshot.snap_ty (Seq.seq (isize, isize)) = any_l ()
    | & m : (isize, isize) = any_l ()
    | & adj : Point'0.t_Point = any_l ()
    | & _65 : (isize, isize) = any_l ()
    | & _66 : bool = any_l ()
    | & degree : usize = any_l ()
    | & _72 : () = any_l ()
    | & _73 : borrowed (Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global)) = any_l ()
    | & _74 : (usize, Point'0.t_Point) = any_l ()
    | & _79 : Option'0.t_Option (usize, Point'0.t_Point) = any_l ()
    | & _81 : Vec'0.t_Vec (usize, Point'0.t_Point) (Global'0.t_Global) = any_l ()
    | & adj1 : Point'0.t_Point = any_l ()
    | & _86 : () = any_l ()
    | & _87 : borrowed (Board'0.t_Board) = any_l () ]
     [ return' (result:Option'0.t_Option (Board'0.t_Board))-> (! return' {result}) ] 
end
module M_06_knights_tour__qy123zimplqy35z2qy125z
  
end
module M_06_knights_tour__qy123zimplqy35z3qy125z
  let%span s06_knights_tour0 = "../06_knights_tour.rs" 4 15 4 20
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  use T_06_knights_tour__Point as Point'0
  
  predicate invariant'1 (self : Point'0.t_Point) =
    [%#span1] true
  
  predicate inv'1 (_1 : Point'0.t_Point)
  
  axiom inv'1 : forall x : Point'0.t_Point . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Point'0.t_Point) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : Point'0.t_Point)
  
  axiom inv'0 : forall x : Point'0.t_Point . inv'0 x = true
  
  goal clone'_refn : [%#s06_knights_tour0] forall self : Point'0.t_Point . inv'0 self
   -> (forall result : Point'0.t_Point . result = self  -> inv'1 result /\ result = self)
end
