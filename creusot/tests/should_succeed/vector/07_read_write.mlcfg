
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C07ReadWrite_ReadWrite
  type t
  use seq.Seq
  predicate invariant7 (self : Seq.seq t)
  val invariant7 (self : Seq.seq t) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq t)
  val inv7 (_x : Seq.seq t) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq t . inv7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv6 x = true
  use prelude.UIntSize
  predicate invariant5 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : usize) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : usize)
  val inv5 (_x : usize) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : usize . inv5 x = true
  use prelude.Borrow
  predicate invariant4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv4 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv4 x = true
  predicate invariant3 (self : t)
  val invariant3 (self : t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : t)
  val inv3 (_x : t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : t . inv3 x = true
  predicate invariant2 (self : borrowed t)
  val invariant2 (self : borrowed t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed t)
  val inv2 (_x : borrowed t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed t . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv7 (shallow_model2 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv7 (shallow_model2 self)
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  function shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model2 ( * self)
  val shallow_model1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  predicate resolve3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve3 self }
    
  type deep_model_ty0
  function deep_model1 (self : t) : deep_model_ty0
  val deep_model1 (self : t) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  function deep_model0 (self : t) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 70 8 70 28] deep_model1 self
  val deep_model0 (self : t) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  val eq0 (self : t) (other : t) : bool
    requires {inv3 self}
    requires {inv3 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (deep_model0 self = deep_model0 other) }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  use prelude.Slice
  use seq.Seq
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model2 self
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model3 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (index : usize) : t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model3 self)}
    requires {inv6 self}
    requires {inv5 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model3 self) result }
    ensures { inv3 result }
    
  predicate resolve1 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds0 index (shallow_model1 self)}
    requires {inv4 self}
    requires {inv5 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model1 self) ( * result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model2 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model1 self) (shallow_model2 ( ^ self)) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model2 ( ^ self)) = Seq.length (shallow_model1 self) }
    ensures { inv2 result }
    
  let rec cfg read_write [#"../07_read_write.rs" 6 0 6 75] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (i : usize) (x : t) : ()
    requires {[#"../07_read_write.rs" 5 11 5 24] UIntSize.to_int i < Seq.length (shallow_model1 a)}
    requires {[#"../07_read_write.rs" 6 44 6 45] inv4 a}
    requires {[#"../07_read_write.rs" 6 70 6 71] inv1 x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = a;
  var i : usize = i;
  var x : t = x;
  var _6 : borrowed t;
  var _7 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _10 : bool;
  var _12 : t;
  {
    goto BB0
  }
  BB0 {
    [#"../07_read_write.rs" 7 4 7 5] _7 <- Borrow.borrow_final ( * a) (Borrow.get_id a);
    [#"../07_read_write.rs" 7 4 7 5] a <- { a with current = ( ^ _7) ; };
    assume { inv0 ( ^ _7) };
    [#"../07_read_write.rs" 7 5 7 8] _6 <- ([#"../07_read_write.rs" 7 5 7 8] index_mut0 _7 i);
    _7 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    [#"../07_read_write.rs" 7 4 7 12] _6 <- { _6 with current = x ; };
    assert { [@expl:type invariant] inv1 ( * _6) };
    assume { resolve0 ( * _6) };
    assert { [@expl:type invariant] inv2 _6 };
    assume { resolve1 _6 };
    [#"../07_read_write.rs" 8 13 8 16] _12 <- ([#"../07_read_write.rs" 8 13 8 16] index0 ( * a) i);
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv3 _12 };
    assume { resolve2 _12 };
    [#"../07_read_write.rs" 8 12 8 21] _10 <- ([#"../07_read_write.rs" 8 12 8 21] eq0 _12 x);
    goto BB3
  }
  BB3 {
    switch (_10)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    assert { [@expl:type invariant] inv1 x };
    assume { resolve0 x };
    assert { [@expl:type invariant] inv4 a };
    assume { resolve3 a };
    [#"../07_read_write.rs" 6 76 9 1] _0 <- ([#"../07_read_write.rs" 6 76 9 1] ());
    return _0
  }
  BB5 {
    assert { [@expl:type invariant] inv1 x };
    assume { resolve0 x };
    assert { [@expl:type invariant] inv4 a };
    assume { resolve3 a };
    assert { [#"../07_read_write.rs" 8 4 8 22] false };
    absurd
  }
  
end
