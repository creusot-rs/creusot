
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C03KnuthShuffle_KnuthShuffle
  type t
  use prelude.UIntSize
  use seq.Seq
  predicate invariant10 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq usize) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq usize)
  val inv10 (_x : Seq.seq usize) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq usize . inv10 x = true
  predicate invariant9 (self : Seq.seq t)
  val invariant9 (self : Seq.seq t) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq t)
  val inv9 (_x : Seq.seq t) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq t . inv9 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant8 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option usize)
  val inv8 (_x : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option usize . inv8 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant7 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv7 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant6 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv6 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv6 x = true
  predicate invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use prelude.Slice
  predicate invariant4 (self : borrowed (slice t))
  val invariant4 (self : borrowed (slice t)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (slice t))
  val inv4 (_x : borrowed (slice t)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (slice t) . inv4 x = true
  predicate invariant3 (self : slice t)
  val invariant3 (self : slice t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : slice t)
  val inv3 (_x : slice t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : slice t . inv3 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv2 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv2 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv2 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv9 (shallow_model2 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  predicate invariant2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv9 (shallow_model2 self)
  val invariant2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv2 x = true
  use seq.Seq
  predicate inv1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv1 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv1 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  function deep_model0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv1 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv10 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv1 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv10 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv1 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv10 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv1 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv10 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv1 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv1 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  predicate invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv1 x = true
  use prelude.Snapshot
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  val inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv0 x = true
  predicate resolve3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed (slice t)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (slice t)) : bool
    ensures { result = resolve2 self }
    
  use seq.Permut
  use prelude.Slice
  function shallow_model7 (self : slice t) : Seq.seq t
  val shallow_model7 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model7 self }
    
  axiom shallow_model7_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv9 (shallow_model7 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model7 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model7 self) <= UIntSize.to_int max0)
  function shallow_model6 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model7 ( * self)
  val shallow_model6 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model6 self }
    
  val swap0 (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 247 19 247 35] UIntSize.to_int a < Seq.length (shallow_model6 self)}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 248 19 248 35] UIntSize.to_int b < Seq.length (shallow_model6 self)}
    requires {inv4 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 249 8 249 52] Permut.exchange (shallow_model7 ( ^ self)) (shallow_model6 self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
  function shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model2 ( * self)
  val shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  val deref_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : borrowed (slice t)
    requires {inv5 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] shallow_model6 result = shallow_model0 self }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] shallow_model7 ( ^ result) = shallow_model2 ( ^ self) }
    ensures { inv4 result }
    
  val rand_in_range0 [#"../03_knuth_shuffle.rs" 8 0 8 45] (l : usize) (u : usize) : usize
    requires {[#"../03_knuth_shuffle.rs" 6 11 6 19] UIntSize.to_int l <= UIntSize.to_int u}
    ensures { [#"../03_knuth_shuffle.rs" 7 10 7 40] UIntSize.to_int l <= UIntSize.to_int result /\ UIntSize.to_int result < UIntSize.to_int u }
    
  use seq.Seq
  predicate resolve1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve1 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve1 self /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self)) >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : Core_Option_Option_Type.t_option usize
    requires {inv7 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv8 result }
    
  use seq.Permut
  predicate permutation_of0 (self : Seq.seq t) (o : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37] Permut.permut self o 0 (Seq.length self)
  val permutation_of0 (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of0 self o }
    
  function shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model0 self
  val shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model5 self }
    
  use prelude.Snapshot
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model5 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range usize) : Core_Ops_Range_Range_Type.t_range usize
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv1 result }
    
  function shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model2 self
  val shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model4 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv6 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model4 self) }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  let rec cfg knuth_shuffle [#"../03_knuth_shuffle.rs" 13 0 13 39] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    requires {[#"../03_knuth_shuffle.rs" 13 24 13 25] inv5 v}
    ensures { [#"../03_knuth_shuffle.rs" 12 0 12 36] permutation_of0 (shallow_model2 ( ^ v)) (shallow_model0 v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v;
  var old_v : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var iter : Core_Ops_Range_Range_Type.t_range usize;
  var _6 : Core_Ops_Range_Range_Type.t_range usize;
  var _7 : usize;
  var iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced : Snapshot.snap_ty (Seq.seq usize);
  var _17 : Core_Option_Option_Type.t_option usize;
  var _18 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _19 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem : usize;
  var _22 : Snapshot.snap_ty (Seq.seq usize);
  var n : usize;
  var upper : usize;
  var _26 : usize;
  var i : usize;
  var _31 : ();
  var _32 : borrowed (slice t);
  var _33 : borrowed (slice t);
  var _34 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _36 : usize;
  {
    goto BB0
  }
  BB0 {
    [#"../03_knuth_shuffle.rs" 14 16 14 31] old_v <- ([#"../03_knuth_shuffle.rs" 14 16 14 31] Snapshot.new v);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_v };
    assume { resolve0 old_v };
    [#"../03_knuth_shuffle.rs" 17 16 17 23] _7 <- ([#"../03_knuth_shuffle.rs" 17 16 17 23] len0 ( * v));
    goto BB2
  }
  BB2 {
    [#"../03_knuth_shuffle.rs" 17 13 17 23] _6 <- Core_Ops_Range_Range_Type.C_Range ([#"../03_knuth_shuffle.rs" 17 13 17 14] (0 : usize)) _7;
    _7 <- any usize;
    [#"../03_knuth_shuffle.rs" 16 4 16 43] iter <- ([#"../03_knuth_shuffle.rs" 16 4 16 43] into_iter0 _6);
    _6 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB3
  }
  BB3 {
    [#"../03_knuth_shuffle.rs" 16 4 16 43] iter_old <- ([#"../03_knuth_shuffle.rs" 16 4 16 43] Snapshot.new iter);
    goto BB4
  }
  BB4 {
    [#"../03_knuth_shuffle.rs" 16 4 16 43] produced <- ([#"../03_knuth_shuffle.rs" 16 4 16 43] Snapshot.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../03_knuth_shuffle.rs" 16 4 16 43] inv1 iter };
    invariant { [#"../03_knuth_shuffle.rs" 16 4 16 43] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../03_knuth_shuffle.rs" 16 4 16 43] permutation_of0 (shallow_model0 v) (shallow_model1 old_v) };
    goto BB7
  }
  BB7 {
    [#"../03_knuth_shuffle.rs" 16 4 16 43] _19 <- Borrow.borrow_mut iter;
    [#"../03_knuth_shuffle.rs" 16 4 16 43] iter <-  ^ _19;
    [#"../03_knuth_shuffle.rs" 16 4 16 43] _18 <- Borrow.borrow_final ( * _19) (Borrow.get_id _19);
    [#"../03_knuth_shuffle.rs" 16 4 16 43] _19 <- { _19 with current = ( ^ _18) ; };
    [#"../03_knuth_shuffle.rs" 16 4 16 43] _17 <- ([#"../03_knuth_shuffle.rs" 16 4 16 43] next0 _18);
    _18 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB8
  }
  BB8 {
    assume { resolve1 _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    assert { [@expl:type invariant] inv5 v };
    assume { resolve3 v };
    [#"../03_knuth_shuffle.rs" 16 4 16 43] _0 <- ([#"../03_knuth_shuffle.rs" 16 4 16 43] ());
    return _0
  }
  BB10 {
    goto BB12
  }
  BB11 {
    assert { [@expl:type invariant] inv5 v };
    assume { resolve3 v };
    assert { [#"../03_knuth_shuffle.rs" 16 4 16 43] false };
    absurd
  }
  BB12 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 654 0 654 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    [#"../03_knuth_shuffle.rs" 16 4 16 43] _22 <- ([#"../03_knuth_shuffle.rs" 16 4 16 43] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB13
  }
  BB13 {
    [#"../03_knuth_shuffle.rs" 16 4 16 43] produced <- _22;
    _22 <- any Snapshot.snap_ty (Seq.seq usize);
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 654 0 654 51] n <- __creusot_proc_iter_elem;
    [#"../03_knuth_shuffle.rs" 20 20 20 27] _26 <- ([#"../03_knuth_shuffle.rs" 20 20 20 27] len0 ( * v));
    goto BB14
  }
  BB14 {
    [#"../03_knuth_shuffle.rs" 20 20 20 31] upper <- _26 - n;
    _26 <- any usize;
    [#"../03_knuth_shuffle.rs" 21 16 21 39] i <- ([#"../03_knuth_shuffle.rs" 21 16 21 39] rand_in_range0 ([#"../03_knuth_shuffle.rs" 21 30 21 31] (0 : usize)) upper);
    goto BB15
  }
  BB15 {
    [#"../03_knuth_shuffle.rs" 22 8 22 9] _34 <- Borrow.borrow_mut ( * v);
    [#"../03_knuth_shuffle.rs" 22 8 22 9] v <- { v with current = ( ^ _34) ; };
    assume { inv2 ( ^ _34) };
    [#"../03_knuth_shuffle.rs" 22 8 22 28] _33 <- ([#"../03_knuth_shuffle.rs" 22 8 22 28] deref_mut0 _34);
    _34 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB16
  }
  BB16 {
    [#"../03_knuth_shuffle.rs" 22 8 22 9] _32 <- Borrow.borrow_final ( * _33) (Borrow.get_id _33);
    [#"../03_knuth_shuffle.rs" 22 8 22 9] _33 <- { _33 with current = ( ^ _32) ; };
    assume { inv3 ( ^ _32) };
    [#"../03_knuth_shuffle.rs" 22 18 22 27] _36 <- upper - ([#"../03_knuth_shuffle.rs" 22 26 22 27] (1 : usize));
    [#"../03_knuth_shuffle.rs" 22 8 22 28] _31 <- ([#"../03_knuth_shuffle.rs" 22 8 22 28] swap0 _32 i _36);
    _32 <- any borrowed (slice t);
    _36 <- any usize;
    goto BB17
  }
  BB17 {
    assert { [@expl:type invariant] inv4 _33 };
    assume { resolve2 _33 };
    goto BB6
  }
  
end
