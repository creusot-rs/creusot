module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  type creusotcontracts_std1_vec_vec 't  
end
module C04BinarySearch_SortedRange_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  predicate sorted_range (s : Seq.seq uint32) (l : int) (u : int)
end
module C04BinarySearch_SortedRange
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  predicate sorted_range (s : Seq.seq uint32) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> Seq.get s i <= Seq.get s j
end
module C04BinarySearch_Sorted_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  predicate sorted (s : Seq.seq uint32)
end
module C04BinarySearch_Sorted
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  clone C04BinarySearch_SortedRange_Interface as SortedRange0
  predicate sorted (s : Seq.seq uint32) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module C04BinarySearch_BinarySearch_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  use mach.int.UInt32
  clone C04BinarySearch_Sorted_Interface as Sorted0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val binary_search [@cfg:stackify] (arr : Type.creusotcontracts_std1_vec_vec uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {Sorted0.sorted (Model0.model arr)}
    requires {Seq.length (Model0.model arr) <= 18446744073709551615}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x < i && UInt64.to_int i < Seq.length (Model0.model arr) -> elem < Seq.get (Model0.model arr) (UInt64.to_int i)) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> Seq.get (Model0.model arr) (UInt64.to_int i) <= elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Seq.get (Model0.model arr) (UInt64.to_int x) = elem }
    
end
module C04BinarySearch_BinarySearch
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt32
  use Type
  clone C04BinarySearch_SortedRange as SortedRange0
  clone C04BinarySearch_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.creusotcontracts_std1_vec_vec uint32
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = uint32,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = uint32, function Model0.model = Model0.model
  let rec cfg binary_search [@cfg:stackify] (arr : Type.creusotcontracts_std1_vec_vec uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {Sorted0.sorted (Model0.model arr)}
    requires {Seq.length (Model0.model arr) <= 18446744073709551615}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x < i && UInt64.to_int i < Seq.length (Model0.model arr) -> elem < Seq.get (Model0.model arr) (UInt64.to_int i)) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> Seq.get (Model0.model arr) (UInt64.to_int i) <= elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Seq.get (Model0.model arr) (UInt64.to_int x) = elem }
    
   = 
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.creusotcontracts_std1_vec_vec uint32;
  var elem_2 : uint32;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec uint32;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec uint32;
  var base_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var half_15 : usize;
  var _16 : usize;
  var _17 : bool;
  var mid_18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : bool;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : Type.creusotcontracts_std1_vec_vec uint32;
  var _26 : usize;
  var _27 : uint32;
  var _28 : usize;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var cmp_32 : uint32;
  var _33 : uint32;
  var _34 : Type.creusotcontracts_std1_vec_vec uint32;
  var _35 : usize;
  var _36 : bool;
  var _37 : uint32;
  var _38 : uint32;
  var _39 : usize;
  var _40 : bool;
  var _41 : uint32;
  var _42 : uint32;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    _6 <- arr_1;
    _5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve arr_1 };
    assume { Resolve1.resolve elem_2 };
    _0 <- Type.Core_Result_Result_Err (0 : usize);
    goto BB20
  }
  BB3 {
    _3 <- ();
    assume { Resolve2.resolve _3 };
    _9 <- arr_1;
    size_8 <- Len0.len _9;
    goto BB4
  }
  BB4 {
    base_10 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant size_valid { 0 < UInt64.to_int size_8 && UInt64.to_int size_8 + UInt64.to_int base_10 <= Seq.length (Model0.model arr_1) };
    invariant lower_b { forall i : (usize) . i < base_10 -> Seq.get (Model0.model arr_1) (UInt64.to_int i) <= elem_2 };
    invariant lower_b { forall i : (usize) . UInt64.to_int base_10 + UInt64.to_int size_8 < UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model arr_1) -> elem_2 < Seq.get (Model0.model arr_1) (UInt64.to_int i) };
    assume { Resolve3.resolve _14 };
    _14 <- size_8;
    _13 <- _14 > (1 : usize);
    switch (_13)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve3.resolve _16 };
    _16 <- size_8;
    _17 <- (2 : usize) = (0 : usize);
    assert { not _17 };
    goto BB7
  }
  BB7 {
    half_15 <- _16 / (2 : usize);
    assume { Resolve3.resolve _19 };
    _19 <- base_10;
    assume { Resolve3.resolve _20 };
    _20 <- half_15;
    mid_18 <- _19 + _20;
    _25 <- arr_1;
    assume { Resolve3.resolve _26 };
    _26 <- mid_18;
    _24 <- Index0.index _25 _26;
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve _23 };
    _23 <- _24;
    assume { Resolve4.resolve _24 };
    assume { Resolve1.resolve _27 };
    _27 <- elem_2;
    _22 <- _23 > _27;
    switch (_22)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve3.resolve mid_18 };
    assume { Resolve3.resolve _21 };
    _21 <- base_10;
    assume { Resolve3.resolve base_10 };
    goto BB11
  }
  BB10 {
    assume { Resolve3.resolve base_10 };
    assume { Resolve3.resolve _21 };
    _21 <- mid_18;
    assume { Resolve3.resolve mid_18 };
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve base_10 };
    base_10 <- _21;
    assume { Resolve3.resolve _28 };
    _28 <- half_15;
    assume { Resolve3.resolve half_15 };
    size_8 <- size_8 - _28;
    _12 <- ();
    assume { Resolve2.resolve _12 };
    goto BB5
  }
  BB12 {
    assume { Resolve3.resolve size_8 };
    _11 <- ();
    assume { Resolve2.resolve _11 };
    _34 <- arr_1;
    assume { Resolve0.resolve arr_1 };
    assume { Resolve3.resolve _35 };
    _35 <- base_10;
    _33 <- Index0.index _34 _35;
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve cmp_32 };
    cmp_32 <- _33;
    assume { Resolve4.resolve _33 };
    assume { Resolve1.resolve _37 };
    _37 <- cmp_32;
    assume { Resolve1.resolve _38 };
    _38 <- elem_2;
    _36 <- _37 = _38;
    switch (_36)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    assume { Resolve1.resolve elem_2 };
    assume { Resolve1.resolve cmp_32 };
    assume { Resolve3.resolve _39 };
    _39 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Ok _39;
    goto BB19
  }
  BB15 {
    assume { Resolve1.resolve _41 };
    _41 <- cmp_32;
    assume { Resolve1.resolve cmp_32 };
    assume { Resolve1.resolve _42 };
    _42 <- elem_2;
    assume { Resolve1.resolve elem_2 };
    _40 <- _41 < _42;
    switch (_40)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve3.resolve _44 };
    _44 <- base_10;
    assume { Resolve3.resolve base_10 };
    _43 <- _44 + (1 : usize);
    _0 <- Type.Core_Result_Result_Err _43;
    goto BB18
  }
  BB17 {
    assume { Resolve3.resolve _45 };
    _45 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Err _45;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
