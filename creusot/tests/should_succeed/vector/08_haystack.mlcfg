
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module C08Haystack_MatchAt_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
end
module C08Haystack_MatchAt_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
  val match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int) : bool
    ensures { result = match_at needle haystack pos len }
    
end
module C08Haystack_MatchAt
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8
  predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
   =
    [#"../08_haystack.rs" 8 4 12 5] len <= Seq.length (ShallowModel0.shallow_model needle) /\ pos <= Seq.length (ShallowModel0.shallow_model haystack) - len /\ (forall i : int . 0 <= i /\ i < len -> IndexLogic0.index_logic needle i = IndexLogic0.index_logic haystack (pos + i))
  val match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int) : bool
    ensures { result = match_at needle haystack pos len }
    
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
end
module CreusotContracts_Std1_Ops_Impl3_StartLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl3_StartLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = start_log self }
    
end
module CreusotContracts_Std1_Ops_Impl3_StartLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = start_log self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Ops_Impl3_EndLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl3_EndLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = end_log self }
    
end
module CreusotContracts_Std1_Ops_Impl3_EndLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = end_log self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  function le_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  function le_log (self : self) (o : self) : bool
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function le_log (self : self) (o : self) : bool =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  function is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
end
module CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  function is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
  val is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not result -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self)) }
    ensures { result = is_empty_log self }
    
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self)))
end
module CreusotContracts_Std1_Ops_Impl3_IsEmptyLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  function is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
  val is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not result -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self)) }
    ensures { result = is_empty_log self }
    
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self)))
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub
  type idx
  use prelude.Int
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Interface
  type idx
  use prelude.Int
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
  val range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] Inv0.inv r}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] IsEmptyLog0.is_empty_log r = (result = 0) }
    ensures { result = range_inclusive_len r }
    
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] Inv0.inv r) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0))
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen
  type idx
  use prelude.Int
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Stub as StartLog0 with
    type idx = idx
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5] if IsEmptyLog0.is_empty_log r then
      0
    else
      DeepModel0.deep_model (EndLog0.end_log r) - DeepModel0.deep_model (StartLog0.start_log r) + 1
    
  val range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] Inv0.inv r}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] IsEmptyLog0.is_empty_log r = (result = 0) }
    ensures { result = range_inclusive_len r }
    
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] Inv0.inv r) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
  val produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Stub as StartLog0 with
    type idx = idx
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub as RangeInclusiveLen0 with
    type idx = idx,
    axiom .
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9] Seq.length visited = RangeInclusiveLen0.range_inclusive_len self - RangeInclusiveLen0.range_inclusive_len o /\ (IsEmptyLog0.is_empty_log self -> IsEmptyLog0.is_empty_log o) /\ (IsEmptyLog0.is_empty_log o \/ EndLog0.end_log self = EndLog0.end_log o) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (StartLog0.start_log self) + i)
  val produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Core_Ops_Range_Impl7_New_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = idx
  val new (start : idx) (end' : idx) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
    requires {Inv0.inv start}
    requires {Inv0.inv end'}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53] StartLog0.start_log result = start }
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49] EndLog0.end_log result = end' }
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93] LeLog0.le_log (DeepModel0.deep_model start) (DeepModel0.deep_model end') -> not IsEmptyLog0.is_empty_log result }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 63 20 63 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { Inv0.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Range_Impl12_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)
  val next (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)) : Core_Option_Option_Type.t_option a
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range a)
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl12_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  use seq.Seq
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    ensures { Inv2.inv result }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Ord_Impl3_LeLog_Stub
  use prelude.Int
  function le_log (self : int) (_2 : int) : bool
end
module CreusotContracts_Logic_Ord_Impl3_LeLog_Interface
  use prelude.Int
  function le_log (self : int) (_2 : int) : bool
  val le_log (self : int) (_2 : int) : bool
    ensures { result = le_log self _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_LeLog
  use prelude.Int
  use int.Int
  function le_log (self : int) (_2 : int) : bool =
    Int.(<=) self _2
  val le_log (self : int) (_2 : int) : bool
    ensures { result = le_log self _2 }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
  val produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : () =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10] ()
  val produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
  val produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10] ()
  val produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
  val completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    axiom .
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57] IsEmptyLog0.is_empty_log ( * self) /\ IsEmptyLog0.is_empty_log ( ^ self)
  val completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 108 20 108 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Stub
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Interface
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : ()
  val cmp_le_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 79 12 79 14] ()
  val cmp_le_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Stub
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Interface
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : ()
  val cmp_lt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 85 12 85 14] ()
  val cmp_lt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Stub
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Interface
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : ()
  val cmp_ge_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 91 12 91 14] ()
  val cmp_ge_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Stub
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Interface
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : ()
  val cmp_gt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 97 12 97 14] ()
  val cmp_gt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Refl_Stub
  use prelude.Int
  function refl (_1 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Refl_Interface
  use prelude.Int
  function refl (_1 : int) : ()
  val refl (_1 : int) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Refl
  use prelude.Int
  function refl (_1 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 103 12 103 14] ()
  val refl (_1 : int) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Trans_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Trans_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Trans
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 109 12 109 14] ()
  val trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1_Stub
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1_Interface
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : ()
  val antisym1 (_1 : int) (_2 : int) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 115 12 115 14] ()
  val antisym1 (_1 : int) (_2 : int) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2_Stub
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2_Interface
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : ()
  val antisym2 (_1 : int) (_2 : int) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 121 12 121 14] ()
  val antisym2 (_1 : int) (_2 : int) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp_Stub
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp_Interface
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : ()
  val eq_cmp (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : () =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 127 12 127 14] ()
  val eq_cmp (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module C08Haystack_Search_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8
  clone C08Haystack_MatchAt_Stub as MatchAt0
  val search [#"../08_haystack.rs" 21 0 21 60] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../08_haystack.rs" 15 11 15 65] Seq.length (ShallowModel0.shallow_model needle) >= 1 /\ Seq.length (ShallowModel0.shallow_model needle) <= Seq.length (ShallowModel0.shallow_model haystack)}
    ensures { [#"../08_haystack.rs" 16 10 16 85] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model haystack) \/ UIntSize.to_int result < Seq.length (ShallowModel0.shallow_model haystack) - Seq.length (ShallowModel0.shallow_model needle) + 1 }
    ensures { [#"../08_haystack.rs" 17 0 19 108] UIntSize.to_int result < Seq.length (ShallowModel0.shallow_model haystack) -> MatchAt0.match_at needle haystack (UIntSize.to_int result) (Seq.length (ShallowModel0.shallow_model needle)) /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int result -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    ensures { [#"../08_haystack.rs" 20 0 20 139] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model haystack) -> (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model haystack) -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    
end
module C08Haystack_Search
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.UInt8
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Seq.seq uint8
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Seq.seq uint8,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = uint8
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = uint8,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Core_Option_Option_Type.t_option usize
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Core_Option_Option_Type.t_option usize,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl3_EqCmp_Interface as EqCmp0
  clone CreusotContracts_Logic_Ord_Impl3_Antisym2_Interface as Antisym20
  clone CreusotContracts_Logic_Ord_Impl3_Antisym1_Interface as Antisym10
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl3_Trans_Interface as Trans0
  clone CreusotContracts_Logic_Ord_Impl3_Refl_Interface as Refl0
  clone CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Interface as CmpGtLog0
  clone CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Interface as CmpGeLog0
  clone CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Interface as CmpLtLog0
  clone CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Interface as CmpLeLog0
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces1 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl1 with
    type idx = usize,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone CreusotContracts_Std1_Ops_Impl3_StartLog_Interface as StartLog0 with
    type idx = usize
  clone CreusotContracts_Std1_Ops_Impl3_EndLog_Interface as EndLog0 with
    type idx = usize
  clone CreusotContracts_Logic_Ord_Impl3_LeLog as LeLog0
  clone CreusotContracts_Std1_Ops_Impl3_IsEmptyLog_Interface as IsEmptyLog0 with
    type idx = usize,
    predicate Inv0.inv = Inv0.inv,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    function LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen as RangeInclusiveLen0 with
    type idx = usize,
    predicate Inv0.inv = Inv0.inv,
    function IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces as Produces0 with
    type idx = usize,
    function RangeInclusiveLen0.range_inclusive_len = RangeInclusiveLen0.range_inclusive_len,
    function IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans as ProducesTrans0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl as ProducesRefl0 with
    type idx = usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl12_Index_Interface as Index0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv7.inv,
    type Output0.output = uint8
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Next_Interface as Next1 with
    type a = usize,
    predicate Inv0.inv = Inv6.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv5.inv
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Inv0.inv = Inv1.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone CreusotContracts_Std1_Iter_Range_Impl1_Completed as Completed0 with
    type idx = usize,
    function IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log
  clone Core_Iter_Range_Impl12_Next_Interface as Next0 with
    type a = usize,
    predicate Inv0.inv = Inv4.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv5.inv
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone C08Haystack_MatchAt as MatchAt0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Ops_Range_Impl7_New_Interface as New0 with
    type idx = usize,
    predicate Inv0.inv = Inv3.inv,
    function StartLog0.start_log = StartLog0.start_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function LeLog0.le_log = LeLog0.le_log,
    function IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    predicate Inv1.inv = Inv0.inv,
    type DeepModelTy0.deepModelTy = int
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg search [#"../08_haystack.rs" 21 0 21 60] [@cfg:stackify] [@cfg:subregion_analysis] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../08_haystack.rs" 15 11 15 65] Seq.length (ShallowModel0.shallow_model needle) >= 1 /\ Seq.length (ShallowModel0.shallow_model needle) <= Seq.length (ShallowModel0.shallow_model haystack)}
    ensures { [#"../08_haystack.rs" 16 10 16 85] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model haystack) \/ UIntSize.to_int result < Seq.length (ShallowModel0.shallow_model haystack) - Seq.length (ShallowModel0.shallow_model needle) + 1 }
    ensures { [#"../08_haystack.rs" 17 0 19 108] UIntSize.to_int result < Seq.length (ShallowModel0.shallow_model haystack) -> MatchAt0.match_at needle haystack (UIntSize.to_int result) (Seq.length (ShallowModel0.shallow_model needle)) /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int result -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    ensures { [#"../08_haystack.rs" 20 0 20 139] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model haystack) -> (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model haystack) -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) = needle;
  var haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global) = haystack;
  var iter : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _10 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _12 : usize;
  var _14 : usize;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var produced : Ghost.ghost_ty (Seq.seq usize);
  var _24 : Core_Option_Option_Type.t_option usize;
  var _25 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _26 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var __creusot_proc_iter_elem : usize;
  var _29 : Ghost.ghost_ty (Seq.seq usize);
  var i : usize;
  var iter1 : Core_Ops_Range_Range_Type.t_range usize;
  var _36 : usize;
  var iter_old1 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced1 : Ghost.ghost_ty (Seq.seq usize);
  var _45 : Core_Option_Option_Type.t_option usize;
  var _46 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _47 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem1 : usize;
  var _50 : Ghost.ghost_ty (Seq.seq usize);
  var j : usize;
  var _55 : uint8;
  var _59 : uint8;
  {
    goto BB0
  }
  BB0 {
    _12 <- ([#"../08_haystack.rs" 23 21 23 35] Len0.len ([#"../08_haystack.rs" 23 21 23 35] haystack));
    goto BB1
  }
  BB1 {
    _14 <- ([#"../08_haystack.rs" 23 38 23 50] Len0.len ([#"../08_haystack.rs" 23 38 23 50] needle));
    goto BB2
  }
  BB2 {
    _10 <- ([#"../08_haystack.rs" 23 17 23 50] New0.new ([#"../08_haystack.rs" 23 17 23 18] [#"../08_haystack.rs" 23 17 23 18] (0 : usize)) ([#"../08_haystack.rs" 23 21 23 50] _12 - _14));
    _12 <- any usize;
    _14 <- any usize;
    goto BB3
  }
  BB3 {
    iter <- ([#"../08_haystack.rs" 22 4 22 112] IntoIter0.into_iter _10);
    _10 <- any Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
    goto BB4
  }
  BB4 {
    iter_old <- ([#"../08_haystack.rs" 22 4 22 112] Ghost.new iter);
    goto BB5
  }
  BB5 {
    produced <- ([#"../08_haystack.rs" 22 4 22 112] Ghost.new (Seq.empty ));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant { [#"../08_haystack.rs" 22 4 22 112] Inv0.inv iter };
    invariant { [#"../08_haystack.rs" 22 4 22 112] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../08_haystack.rs" 22 4 22 112] forall k : int . 0 <= k /\ k < Seq.length (Ghost.inner produced) -> not MatchAt0.match_at needle haystack k (Seq.length (ShallowModel0.shallow_model needle)) };
    goto BB8
  }
  BB8 {
    _26 <- Borrow.borrow_mut iter;
    iter <-  ^ _26;
    _25 <- Borrow.borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../08_haystack.rs" 22 4 22 112] Next0.next _25);
    _25 <- any borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve _26 };
    switch (_24)
      | Core_Option_Option_Type.C_None -> goto BB10
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB10 {
    _0 <- ([#"../08_haystack.rs" 33 11 33 25] Len0.len ([#"../08_haystack.rs" 33 11 33 25] haystack));
    goto BB30
  }
  BB11 {
    goto BB13
  }
  BB12 {
    absurd
  }
  BB13 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _24;
    _29 <- ([#"../08_haystack.rs" 22 4 22 112] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB14
  }
  BB14 {
    produced <- _29;
    _29 <- any Ghost.ghost_ty (Seq.seq usize);
    i <- __creusot_proc_iter_elem;
    _36 <- ([#"../08_haystack.rs" 25 20 25 32] Len0.len ([#"../08_haystack.rs" 25 20 25 32] needle));
    goto BB15
  }
  BB15 {
    iter1 <- ([#"../08_haystack.rs" 24 8 24 68] IntoIter1.into_iter ([#"../08_haystack.rs" 25 17 25 32] Core_Ops_Range_Range_Type.C_Range ([#"../08_haystack.rs" 25 17 25 18] [#"../08_haystack.rs" 25 17 25 18] (0 : usize)) _36));
    _36 <- any usize;
    goto BB16
  }
  BB16 {
    iter_old1 <- ([#"../08_haystack.rs" 24 8 24 68] Ghost.new iter1);
    goto BB17
  }
  BB17 {
    produced1 <- ([#"../08_haystack.rs" 24 8 24 68] Ghost.new (Seq.empty ));
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    invariant { [#"../08_haystack.rs" 24 8 24 68] Inv1.inv iter1 };
    invariant { [#"../08_haystack.rs" 24 8 24 68] Produces1.produces (Ghost.inner iter_old1) (Ghost.inner produced1) iter1 };
    invariant { [#"../08_haystack.rs" 24 20 24 66] MatchAt0.match_at needle haystack (UIntSize.to_int i) (Seq.length (Ghost.inner produced1)) };
    goto BB20
  }
  BB20 {
    _47 <- Borrow.borrow_mut iter1;
    iter1 <-  ^ _47;
    _46 <- Borrow.borrow_mut ( * _47);
    _47 <- { _47 with current = ( ^ _46) };
    _45 <- ([#"../08_haystack.rs" 24 8 24 68] Next1.next _46);
    _46 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB21
  }
  BB21 {
    assume { Resolve1.resolve _47 };
    switch (_45)
      | Core_Option_Option_Type.C_None -> goto BB22
      | Core_Option_Option_Type.C_Some _ -> goto BB23
      end
  }
  BB22 {
    _0 <- i;
    goto BB31
  }
  BB23 {
    goto BB24
  }
  BB24 {
    __creusot_proc_iter_elem1 <- Core_Option_Option_Type.some_0 _45;
    _50 <- ([#"../08_haystack.rs" 24 8 24 68] Ghost.new (Seq.(++) (Ghost.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)));
    goto BB25
  }
  BB25 {
    produced1 <- _50;
    _50 <- any Ghost.ghost_ty (Seq.seq usize);
    j <- __creusot_proc_iter_elem1;
    _55 <- ([#"../08_haystack.rs" 26 15 26 24] Index0.index ([#"../08_haystack.rs" 26 15 26 21] needle) j);
    goto BB26
  }
  BB26 {
    _59 <- ([#"../08_haystack.rs" 26 28 26 43] Index0.index ([#"../08_haystack.rs" 26 28 26 36] haystack) ([#"../08_haystack.rs" 26 37 26 42] i + j));
    goto BB27
  }
  BB27 {
    switch ([#"../08_haystack.rs" 26 15 26 43] _55 <> _59)
      | False -> goto BB28
      | True -> goto BB29
      end
  }
  BB28 {
    goto BB19
  }
  BB29 {
    goto BB7
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  BB33 {
    goto BB12
  }
  BB34 {
    goto BB12
  }
  
end
