
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module C08Haystack_MatchAt_Stub
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
end
module C08Haystack_MatchAt_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
end
module C08Haystack_MatchAt
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
   =
    [#"../08_haystack.rs" 8 4 12 5] len <= Seq.length (ShallowModel0.shallow_model needle) /\ pos <= Seq.length (ShallowModel0.shallow_model haystack) - len /\ (forall i : int . 0 <= i /\ i < len -> Seq.get (ShallowModel0.shallow_model needle) i = Seq.get (ShallowModel0.shallow_model haystack) (pos + i))
  val match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int) : bool
    ensures { result = match_at needle haystack pos len }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
end
module CreusotContracts_Std1_Ops_Impl5_StartLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_StartLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_StartLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = start_log self }
    
end
module CreusotContracts_Std1_Ops_Impl5_EndLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_EndLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_EndLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = end_log self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Interface
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self))
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
  val is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = is_empty_log self }
    
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self))
end
module Core_Ops_Range_Impl7_New_Interface
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val new [@cfg:stackify] (start : idx) (end' : idx) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
    ensures { StartLog0.start_log result = start }
    ensures { EndLog0.end_log result = end' }
    ensures { LeLog0.le_log (DeepModel0.deep_model start) (DeepModel0.deep_model end') -> not IsEmptyLog0.is_empty_log result }
    
end
module Core_Ops_Range_Impl7_New
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Interface as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Interface as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Interface as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val new [@cfg:stackify] (start : idx) (end' : idx) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
    ensures { StartLog0.start_log result = start }
    ensures { EndLog0.end_log result = end' }
    ensures { LeLog0.le_log (DeepModel0.deep_model start) (DeepModel0.deep_model end') -> not IsEmptyLog0.is_empty_log result }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module CreusotContracts_Std1_Ops_Impl4_Invariant_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl4_Invariant_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl4_Invariant
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) =
    true
  val invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module Core_Iter_Range_Impl12_Item_Type
  type a
  type item  =
    a
end
module Core_Iter_Range_Impl12_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl12_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Range_Impl12_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl12_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Interface as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Interface
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx) =
    true
  val invariant' (self : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Range_Impl3_Item_Type
  type a
  type item  =
    a
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Range_Impl3_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Interface as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Stub
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Interface
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog
  use mach.int.Int
  use int.Int
  predicate le_log (self : int) (_2' : int) =
    Int.(<=) self _2'
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub
  type idx
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Interface
  type idx
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0)
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen
  type idx
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int =
    if IsEmptyLog0.is_empty_log r then
      0
    else
      DeepModel0.deep_model (EndLog0.end_log r) - DeepModel0.deep_model (StartLog0.start_log r) + 1
    
  val range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
    ensures { result = range_inclusive_len r }
    
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0)
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub as RangeInclusiveLen0 with
    type idx = idx,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
   =
    Seq.length visited = RangeInclusiveLen0.range_inclusive_len self - RangeInclusiveLen0.range_inclusive_len o /\ (IsEmptyLog0.is_empty_log self -> IsEmptyLog0.is_empty_log o) /\ (IsEmptyLog0.is_empty_log o \/ EndLog0.end_log self = EndLog0.end_log o) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (StartLog0.start_log self) + i)
  val produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Interface
  use mach.int.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function deep_model (self : usize) : int =
    UInt64.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl18_DeepModelTy_Type
  use mach.int.Int
  type deepModelTy  =
    int
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) =
    IsEmptyLog0.is_empty_log ( * self) /\ IsEmptyLog0.is_empty_log ( ^ self)
  val completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module C08Haystack_Search_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UInt8
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone C08Haystack_MatchAt_Stub as MatchAt0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val search [@cfg:stackify] [#"../08_haystack.rs" 21 0 21 60] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../08_haystack.rs" 15 11 15 71] Seq.length (ShallowModel0.shallow_model needle) >= 1 /\ Seq.length (ShallowModel0.shallow_model needle) <= Seq.length (ShallowModel0.shallow_model haystack)}
    ensures { [#"../08_haystack.rs" 16 10 16 91] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model haystack) \/ UInt64.to_int result < Seq.length (ShallowModel0.shallow_model haystack) - Seq.length (ShallowModel0.shallow_model needle) + 1 }
    ensures { [#"../08_haystack.rs" 17 0 19 110] UInt64.to_int result < Seq.length (ShallowModel0.shallow_model haystack) -> MatchAt0.match_at needle haystack (UInt64.to_int result) (Seq.length (ShallowModel0.shallow_model needle)) /\ (forall i : int . 0 <= i /\ i < UInt64.to_int result -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    ensures { [#"../08_haystack.rs" 20 0 20 145] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model haystack) -> (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model haystack) -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    
end
module C08Haystack_Search
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.UInt8
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use mach.int.UInt64
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces1 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant1 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans1 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl1 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl1_LeLog as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog as EndLog0 with
    type idx = usize
  clone CreusotContracts_Std1_Ops_Impl5_StartLog as StartLog0 with
    type idx = usize
  clone CreusotContracts_Logic_Int_Impl18_DeepModelTy_Type as DeepModelTy0
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog as IsEmptyLog0 with
    type idx = usize,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Completed as Completed0 with
    type idx = usize,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log
  clone Core_Iter_Range_Impl12_Item_Type as Item0 with
    type a = usize
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen as RangeInclusiveLen0 with
    type idx = usize,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces as Produces0 with
    type idx = usize,
    function RangeInclusiveLen0.range_inclusive_len = RangeInclusiveLen0.range_inclusive_len,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log,
    predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Std1_Ops_Impl4_Invariant as Invariant0 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans as ProducesTrans0 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl as ProducesRefl0 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl3_Next_Interface as Next1 with
    type a = usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item1.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter1 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone Core_Iter_Range_Impl12_Next_Interface as Next0 with
    type a = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone Core_Ops_Range_Impl7_New_Interface as New0 with
    type idx = usize,
    function StartLog0.start_log = StartLog0.start_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone C08Haystack_MatchAt as MatchAt0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg search [@cfg:stackify] [#"../08_haystack.rs" 21 0 21 60] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../08_haystack.rs" 15 11 15 71] Seq.length (ShallowModel0.shallow_model needle) >= 1 /\ Seq.length (ShallowModel0.shallow_model needle) <= Seq.length (ShallowModel0.shallow_model haystack)}
    ensures { [#"../08_haystack.rs" 16 10 16 91] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model haystack) \/ UInt64.to_int result < Seq.length (ShallowModel0.shallow_model haystack) - Seq.length (ShallowModel0.shallow_model needle) + 1 }
    ensures { [#"../08_haystack.rs" 17 0 19 110] UInt64.to_int result < Seq.length (ShallowModel0.shallow_model haystack) -> MatchAt0.match_at needle haystack (UInt64.to_int result) (Seq.length (ShallowModel0.shallow_model needle)) /\ (forall i : int . 0 <= i /\ i < UInt64.to_int result -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    ensures { [#"../08_haystack.rs" 20 0 20 145] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model haystack) -> (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model haystack) -> not MatchAt0.match_at needle haystack i (Seq.length (ShallowModel0.shallow_model needle))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var needle_1 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var haystack_2 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _3 : ();
  var _8 : ();
  var iter_9 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _10 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _11 : usize;
  var _12 : usize;
  var _13 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _14 : usize;
  var _15 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var iter_old_16 : Ghost.ghost_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _18 : ();
  var produced_19 : Ghost.ghost_ty (Seq.seq usize);
  var _22 : ();
  var _26 : ();
  var _27 : Core_Option_Option_Type.t_option usize;
  var _28 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _29 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _30 : isize;
  var i_31 : usize;
  var _32 : Ghost.ghost_ty (Seq.seq usize);
  var _34 : ();
  var i_35 : usize;
  var _36 : ();
  var _37 : ();
  var iter_38 : Core_Ops_Range_Range_Type.t_range usize;
  var _39 : Core_Ops_Range_Range_Type.t_range usize;
  var _40 : usize;
  var _41 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var iter_old_42 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var _44 : ();
  var produced_45 : Ghost.ghost_ty (Seq.seq usize);
  var _48 : ();
  var _52 : Core_Option_Option_Type.t_option usize;
  var _53 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _54 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _55 : isize;
  var i_56 : usize;
  var _57 : Ghost.ghost_ty (Seq.seq usize);
  var _59 : ();
  var j_60 : usize;
  var _61 : bool;
  var _62 : uint8;
  var _63 : uint8;
  var _64 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _65 : usize;
  var _66 : uint8;
  var _67 : uint8;
  var _68 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _69 : usize;
  var _70 : usize;
  var _71 : usize;
  var _72 : ();
  var _73 : ();
  var _74 : ();
  var _75 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  {
    needle_1 <- needle;
    haystack_2 <- haystack;
    goto BB0
  }
  BB0 {
    _13 <- haystack_2;
    _12 <- ([#"../08_haystack.rs" 23 21 23 35] Len0.len _13);
    goto BB1
  }
  BB1 {
    _15 <- needle_1;
    _14 <- ([#"../08_haystack.rs" 23 38 23 50] Len0.len _15);
    goto BB2
  }
  BB2 {
    _11 <- ([#"../08_haystack.rs" 23 21 23 50] _12 - _14);
    _10 <- ([#"../08_haystack.rs" 23 17 23 50] New0.new ([#"../08_haystack.rs" 23 17 23 18] (0 : usize)) _11);
    goto BB3
  }
  BB3 {
    iter_9 <- ([#"../08_haystack.rs" 22 4 22 123] IntoIter0.into_iter _10);
    goto BB4
  }
  BB4 {
    _18 <- ();
    iter_old_16 <- ([#"../08_haystack.rs" 22 4 22 123] Ghost.new iter_9);
    goto BB5
  }
  BB5 {
    _22 <- ();
    produced_19 <- ([#"../08_haystack.rs" 22 4 22 123] Ghost.new (Seq.empty ));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant type_invariant { [#"../08_haystack.rs" 22 4 22 123] Invariant0.invariant' iter_9 };
    invariant structural { [#"../08_haystack.rs" 22 4 22 123] Produces0.produces (Ghost.inner iter_old_16) (Ghost.inner produced_19) iter_9 };
    invariant no_match { [#"../08_haystack.rs" 22 4 22 123] forall k : int . 0 <= k /\ k < Seq.length (Ghost.inner produced_19) -> not MatchAt0.match_at needle_1 haystack_2 k (Seq.length (ShallowModel0.shallow_model needle_1)) };
    _29 <- borrow_mut iter_9;
    iter_9 <-  ^ _29;
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _27 <- ([#"../08_haystack.rs" 22 4 22 123] Next0.next _28);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve _29 };
    switch (_27)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB9 {
    _8 <- ();
    _75 <- haystack_2;
    _0 <- ([#"../08_haystack.rs" 33 11 33 25] Len0.len _75);
    goto BB27
  }
  BB10 {
    absurd
  }
  BB11 {
    i_31 <- Core_Option_Option_Type.some_0 _27;
    _34 <- ();
    _32 <- ([#"../08_haystack.rs" 22 4 22 123] Ghost.new (Seq.(++) (Ghost.inner produced_19) (Seq.singleton i_31)));
    goto BB12
  }
  BB12 {
    produced_19 <- _32;
    _32 <- any Ghost.ghost_ty (Seq.seq usize);
    i_35 <- i_31;
    _41 <- needle_1;
    _40 <- ([#"../08_haystack.rs" 25 20 25 32] Len0.len _41);
    goto BB13
  }
  BB13 {
    _39 <- Core_Ops_Range_Range_Type.C_Range ([#"../08_haystack.rs" 25 17 25 18] (0 : usize)) _40;
    iter_38 <- ([#"../08_haystack.rs" 24 8 24 82] IntoIter1.into_iter _39);
    goto BB14
  }
  BB14 {
    _44 <- ();
    iter_old_42 <- ([#"../08_haystack.rs" 24 8 24 82] Ghost.new iter_38);
    goto BB15
  }
  BB15 {
    _48 <- ();
    produced_45 <- ([#"../08_haystack.rs" 24 8 24 82] Ghost.new (Seq.empty ));
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant type_invariant { [#"../08_haystack.rs" 24 8 24 82] Invariant1.invariant' iter_38 };
    invariant structural { [#"../08_haystack.rs" 24 8 24 82] Produces1.produces (Ghost.inner iter_old_42) (Ghost.inner produced_45) iter_38 };
    invariant partial_match { [#"../08_haystack.rs" 24 34 24 80] MatchAt0.match_at needle_1 haystack_2 (UInt64.to_int i_35) (Seq.length (Ghost.inner produced_45)) };
    _54 <- borrow_mut iter_38;
    iter_38 <-  ^ _54;
    _53 <- borrow_mut ( * _54);
    _54 <- { _54 with current = ( ^ _53) };
    _52 <- ([#"../08_haystack.rs" 24 8 24 82] Next1.next _53);
    goto BB18
  }
  BB18 {
    assume { Resolve1.resolve _54 };
    switch (_52)
      | Core_Option_Option_Type.C_None -> goto BB19
      | Core_Option_Option_Type.C_Some _ -> goto BB21
      end
  }
  BB19 {
    _37 <- ();
    _0 <- i_35;
    goto BB28
  }
  BB20 {
    absurd
  }
  BB21 {
    i_56 <- Core_Option_Option_Type.some_0 _52;
    _59 <- ();
    _57 <- ([#"../08_haystack.rs" 24 8 24 82] Ghost.new (Seq.(++) (Ghost.inner produced_45) (Seq.singleton i_56)));
    goto BB22
  }
  BB22 {
    produced_45 <- _57;
    _57 <- any Ghost.ghost_ty (Seq.seq usize);
    j_60 <- i_56;
    _64 <- needle_1;
    _65 <- j_60;
    _63 <- ([#"../08_haystack.rs" 26 15 26 24] Index0.index _64 _65);
    goto BB23
  }
  BB23 {
    _62 <- _63;
    _68 <- haystack_2;
    _70 <- i_35;
    _71 <- j_60;
    _69 <- ([#"../08_haystack.rs" 26 37 26 42] _70 + _71);
    _67 <- ([#"../08_haystack.rs" 26 28 26 43] Index0.index _68 _69);
    goto BB24
  }
  BB24 {
    _66 <- _67;
    _61 <- ([#"../08_haystack.rs" 26 15 26 43] _62 <> _66);
    switch (_61)
      | False -> goto BB25
      | True -> goto BB26
      end
  }
  BB25 {
    _26 <- ();
    goto BB17
  }
  BB26 {
    goto BB7
  }
  BB27 {
    goto BB28
  }
  BB28 {
    return _0
  }
  
end
