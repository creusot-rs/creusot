
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module C08Haystack_MatchAt_Stub
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate match_at (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
end
module C08Haystack_MatchAt_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate match_at (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
end
module C08Haystack_MatchAt
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost predicate match_at [#"../08_haystack.rs" 7 0 7 77] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (pos : int) (len : int)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_haystack.rs" 8 4 12 5] len <= (let a' = Model0.model needle in Seq.length a') && pos <= (let a' = Model0.model haystack in Seq.length a') - len && pure {forall i : int . 0 <= i /\ i < len -> Seq.get (Model0.model needle) i = Seq.get (Model0.model haystack) (pos + i)}
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {Seq.get seq (UInt64.to_int self) = out}
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module C08Haystack_Search_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UInt8
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone C08Haystack_MatchAt_Stub as MatchAt0
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  val search [@cfg:stackify] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../08_haystack.rs" 15 11 15 71] Seq.length (Model0.model needle) >= 1 /\ Seq.length (Model0.model needle) <= Seq.length (Model0.model haystack)}
    ensures { [#"../08_haystack.rs" 16 10 16 91] UInt64.to_int result = Seq.length (Model0.model haystack) \/ UInt64.to_int result < Seq.length (Model0.model haystack) - Seq.length (Model0.model needle) + 1 }
    ensures { [#"../08_haystack.rs" 17 0 19 110] UInt64.to_int result < Seq.length (Model0.model haystack) -> MatchAt0.match_at needle haystack (UInt64.to_int result) (Seq.length (Model0.model needle)) /\ (forall i : int . 0 <= i /\ i < UInt64.to_int result -> not MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle))) }
    ensures { [#"../08_haystack.rs" 20 0 20 145] UInt64.to_int result = Seq.length (Model0.model haystack) -> (forall i : int . 0 <= i /\ i < Seq.length (Model0.model haystack) -> not MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle))) }
    
end
module C08Haystack_Search
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UInt8
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone C08Haystack_MatchAt as MatchAt0 with val Model0.model = Model0.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model1.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint8, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model1.model
  let rec cfg search [@cfg:stackify] [#"../08_haystack.rs" 21 0 21 60] (needle : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) (haystack : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {[#"../08_haystack.rs" 15 11 15 71] Seq.length (Model0.model needle) >= 1 /\ Seq.length (Model0.model needle) <= Seq.length (Model0.model haystack)}
    ensures { [#"../08_haystack.rs" 16 10 16 91] UInt64.to_int result = Seq.length (Model0.model haystack) \/ UInt64.to_int result < Seq.length (Model0.model haystack) - Seq.length (Model0.model needle) + 1 }
    ensures { [#"../08_haystack.rs" 17 0 19 110] UInt64.to_int result < Seq.length (Model0.model haystack) -> MatchAt0.match_at needle haystack (UInt64.to_int result) (Seq.length (Model0.model needle)) /\ (forall i : int . 0 <= i /\ i < UInt64.to_int result -> not MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle))) }
    ensures { [#"../08_haystack.rs" 20 0 20 145] UInt64.to_int result = Seq.length (Model0.model haystack) -> (forall i : int . 0 <= i /\ i < Seq.length (Model0.model haystack) -> not MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var needle_1 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var haystack_2 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _3 : ();
  var i_8 : usize;
  var _9 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : usize;
  var _16 : usize;
  var _17 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _18 : usize;
  var _19 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var j_20 : usize;
  var _21 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _27 : ();
  var _29 : ();
  var _30 : bool;
  var _31 : uint8;
  var _32 : uint8;
  var _33 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _34 : usize;
  var _35 : uint8;
  var _36 : uint8;
  var _37 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _38 : usize;
  var _39 : usize;
  var _40 : usize;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  var _46 : bool;
  var _47 : usize;
  var _48 : usize;
  var _49 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : ();
  var _54 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  {
    needle_1 <- needle;
    haystack_2 <- haystack;
    goto BB0
  }
  BB0 {
    i_8 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant no_match { [#"../08_haystack.rs" 23 4 23 111] forall k : int . 0 <= k /\ k < UInt64.to_int i_8 -> not MatchAt0.match_at needle_1 haystack_2 k (Seq.length (Model0.model needle_1)) };
    _13 <- i_8;
    _17 <- haystack_2;
    _16 <- ([#"../08_haystack.rs" 24 14 24 28] Len0.len _17);
    goto BB2
  }
  BB2 {
    _19 <- needle_1;
    _18 <- ([#"../08_haystack.rs" 24 31 24 43] Len0.len _19);
    goto BB3
  }
  BB3 {
    _15 <- ([#"../08_haystack.rs" 24 14 24 43] _16 - _18);
    _14 <- ([#"../08_haystack.rs" 24 14 24 47] _15 + (1 : usize));
    _12 <- ([#"../08_haystack.rs" 24 10 24 47] _13 < _14);
    switch (_12)
      | False -> goto BB17
      | True -> goto BB4
      end
  }
  BB4 {
    j_20 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant partial_match { [#"../08_haystack.rs" 26 34 26 68] MatchAt0.match_at needle_1 haystack_2 (UInt64.to_int i_8) (UInt64.to_int j_20) };
    _24 <- j_20;
    _26 <- needle_1;
    _25 <- ([#"../08_haystack.rs" 27 18 27 30] Len0.len _26);
    goto BB6
  }
  BB6 {
    _23 <- ([#"../08_haystack.rs" 27 14 27 30] _24 < _25);
    switch (_23)
      | False -> goto BB12
      | True -> goto BB7
      end
  }
  BB7 {
    assert { [#"../08_haystack.rs" 28 26 28 47] UInt64.to_int j_20 <= Seq.length (Model0.model needle_1) };
    _27 <- ();
    _33 <- needle_1;
    _34 <- j_20;
    _32 <- ([#"../08_haystack.rs" 29 15 29 24] Index0.index _33 _34);
    goto BB8
  }
  BB8 {
    _31 <- _32;
    _37 <- haystack_2;
    _39 <- i_8;
    _40 <- j_20;
    _38 <- ([#"../08_haystack.rs" 29 37 29 42] _39 + _40);
    _36 <- ([#"../08_haystack.rs" 29 28 29 43] Index0.index _37 _38);
    goto BB9
  }
  BB9 {
    _35 <- _36;
    _30 <- ([#"../08_haystack.rs" 29 15 29 43] _31 <> _35);
    switch (_30)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    _21 <- ();
    goto BB13
  }
  BB11 {
    _29 <- ();
    j_20 <- ([#"../08_haystack.rs" 32 12 32 18] j_20 + (1 : usize));
    _11 <- ();
    goto BB5
  }
  BB12 {
    _21 <- ();
    goto BB13
  }
  BB13 {
    _47 <- j_20;
    _49 <- needle_1;
    _48 <- ([#"../08_haystack.rs" 35 16 35 28] Len0.len _49);
    goto BB14
  }
  BB14 {
    _46 <- ([#"../08_haystack.rs" 35 11 35 28] _47 = _48);
    switch (_46)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    _0 <- i_8;
    goto BB19
  }
  BB16 {
    _45 <- ();
    i_8 <- ([#"../08_haystack.rs" 39 8 39 14] i_8 + (1 : usize));
    _11 <- ();
    goto BB1
  }
  BB17 {
    _9 <- ();
    _54 <- haystack_2;
    _0 <- ([#"../08_haystack.rs" 41 11 41 25] Len0.len _54);
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
