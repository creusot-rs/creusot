module M_01__all_zero [#"01.rs" 7 0 7 33]
  let%span s010 = "01.rs" 8 16 8 31
  let%span s011 = "01.rs" 11 13 11 14
  let%span s012 = "01.rs" 11 4 11 7
  let%span s013 = "01.rs" 11 4 11 7
  let%span s014 = "01.rs" 10 16 10 77
  let%span s015 = "01.rs" 9 16 9 40
  let%span s016 = "01.rs" 11 4 11 7
  let%span s017 = "01.rs" 11 4 11 7
  let%span s018 = "01.rs" 12 15 12 16
  let%span s019 = "01.rs" 5 10 5 71
  let%span s0110 = "01.rs" 6 10 6 33
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span siter12 = "../../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span sindex13 = "../../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span smodel14 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span ssnapshot15 = "../../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span srange16 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 12 26 70
  let%span siter17 = "../../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec22 = "../../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span svec23 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel24 = "../../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span siter25 = "../../../../creusot-contracts/src/std/iter.rs" 82 20 82 24
  let%span siter26 = "../../../../creusot-contracts/src/std/iter.rs" 88 8 88 19
  let%span srange27 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  let%span srange28 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  let%span srange29 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange30 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  let%span snum31 = "../../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span srange32 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  let%span sresolve33 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sslice34 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice35 = "../../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sslice36 = "../../../../creusot-contracts/src/std/slice.rs" 136 20 136 94
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Int
  
  function view'2 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec23] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'3 (self : t_Vec'0) : Seq.seq uint32 =
    [%#smodel24] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'2 self}
    any
    [ return' (result:usize)-> {[%#svec11] UIntSize.to_int result = Seq.length (view'3 self)} (! return' {result}) ]
    
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter25] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter26] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter12] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'0 result} {[%#siter12] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : uint32 =
    [%#sindex13] Seq.get (view'2 self) ix
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq uint32 =
    [%#smodel14] view'2 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'4 (self : borrowed (t_Vec'0)) : Seq.seq uint32 =
    [%#smodel24] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq uint32 =
    [%#ssnapshot15] view'4 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#snum31] UIntSize.to_int self
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange16] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange28] produces'0 a ab b)
   -> ([%#srange29] produces'0 b bc c)  -> ([%#srange30] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange27] produces'0 self (Seq.empty  : Seq.seq usize) self
  
  predicate inv'1 (_1 : Seq.seq usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq usize [inv'1 x] . inv'1 x = true
  
  predicate inv'3 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (t_Range'0) [inv'3 x] . inv'3 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 usize
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  predicate resolve'3 (self : borrowed (t_Range'0)) =
    [%#sresolve33] self.final = self.current
  
  predicate completed'0 (self : borrowed (t_Range'0)) =
    [%#srange32] resolve'3 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {inv'4 result}
      {[%#siter17] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'5 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'5 x] . inv'5 x = true
  
  predicate inv'6 (_1 : usize)
  
  axiom inv_axiom'6 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) =
    [%#sslice34] UIntSize.to_int self < Seq.length seq
  
  predicate inv'7 (_1 : borrowed uint32)
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed uint32 [inv'7 x] . inv'7 x = true
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint32) (out : uint32) =
    [%#sslice35] Seq.get seq (UIntSize.to_int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq uint32) (fin : Seq.seq uint32) =
    [%#sslice36] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed uint32))= {[@expl:index_mut 'self' type invariant] inv'5 self}
    {[@expl:index_mut 'index' type invariant] inv'6 index}
    {[@expl:index_mut requires] [%#svec18] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:borrowed uint32)-> {inv'7 result}
      {[%#svec19] has_value'0 index (view'0 self) result.current}
      {[%#svec20] has_value'0 index (view'2 self.final) result.final}
      {[%#svec21] resolve_elswhere'0 index (view'0 self) (view'2 self.final)}
      {[%#svec22] Seq.length (view'2 self.final) = Seq.length (view'0 self)}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed uint32) =
    [%#sresolve33] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed uint32) =
    resolve'4 _1
  
  predicate resolve'5 (self : borrowed (t_Vec'0)) =
    [%#sresolve33] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_Vec'0)) =
    resolve'5 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec all_zero'0 (v:borrowed (t_Vec'0)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s010] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_7 <- { t_Range__start'0 = ([%#s011] (0 : usize)); t_Range__end'0 = _8 } ] s1
      | s1 = into_iter'0 {_7} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s012] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &produced <- [%#s013] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] (Snapshot.inner old_6_0).final = v.final}
        {[@expl:for invariant] [%#s016] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#s016] inv'0 iter}
        {[@expl:for invariant] [%#s016] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant #0] [%#s015] Seq.length (view'0 v) = Seq.length (view'1 old_v)}
        {[@expl:loop invariant #1] [%#s014] forall j : int . 0 <= j /\ j < Seq.length (Snapshot.inner produced)
         -> index_logic'0 v.current j = (0 : uint32)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_23 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Range'0> {_23.current} {Borrow.get_id _23}
              (fun (_ret':borrowed (t_Range'0)) ->
                 [ &_22 <- _ret' ] 
                 [ &_23 <- { _23 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_22} (fun (_ret':t_Option'0) ->  [ &_21 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _23}- s1
          | s1 = any [ br0 -> {_21 = C_None'0 } (! bb11) | br1 (x0:usize)-> {_21 = C_Some'0 x0} (! bb10) ]  ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some'0 {_21} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_26 <- [%#s017] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _26 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = Borrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':borrowed (t_Vec'0)) ->  [ &_30 <- _ret' ]  [ &v <- { v with current = _ret'.final } ] s3)
          | s3 = index_mut'0 {_30} {i} (fun (_ret':borrowed uint32) ->  [ &_29 <- _ret' ] s4)
          | s4 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &_29 <- { _29 with current = ([%#s018] (0 : uint32)) } ] s1 | s1 = -{resolve'1 _29}- s2 | s2 = bb6 ]
           ]
         ]
      
    | bb11 = s0 [ s0 = -{resolve'2 v}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (t_Vec'0) = v
    | & old_v : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & iter : t_Range'0 = any_l ()
    | & _7 : t_Range'0 = any_l ()
    | & _8 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _21 : t_Option'0 = any_l ()
    | & _22 : borrowed (t_Range'0) = any_l ()
    | & _23 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _26 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & _29 : borrowed uint32 = any_l ()
    | & _30 : borrowed (t_Vec'0) = any_l ()
    | & old_6_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:all_zero ensures #0] [%#s019] forall i : int . 0 <= i
      /\ i < Seq.length (view'2 v.final)  -> index_logic'0 v.final i = (0 : uint32)}
      {[@expl:all_zero ensures #1] [%#s0110] Seq.length (view'0 v) = Seq.length (view'2 v.final)}
      (! return' {result}) ]
    
end
