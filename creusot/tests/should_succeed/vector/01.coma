
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C01_AllZero
  let%span s010 = "../01.rs" 8 16 8 31
  
  let%span s011 = "../01.rs" 12 13 12 14
  
  let%span s012 = "../01.rs" 9 4 9 31
  
  let%span s013 = "../01.rs" 9 4 9 31
  
  let%span s014 = "../01.rs" 9 4 9 31
  
  let%span s015 = "../01.rs" 9 16 9 29
  
  let%span s016 = "../01.rs" 10 16 10 40
  
  let%span s017 = "../01.rs" 9 4 9 31
  
  let%span s018 = "../01.rs" 13 15 13 16
  
  let%span s019 = "../01.rs" 5 0 5 73
  
  let%span s0110 = "../01.rs" 6 10 6 33
  
  let%span span11 = "" 0 0 0 0
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span17 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span18 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span20 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span21 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span22 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 18 107 22
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 24 107 29
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 107 4 107 44
  
  let%span span27 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span28 = "../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span29 = "../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span30 = "../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span31 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span32 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span33 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span34 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span35 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span36 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span37 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span38 = "../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span39 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span40 = "../../../../../creusot-contracts/src/std/slice.rs" 114 8 114 96
  
  let%span span41 = "../../../../../creusot-contracts/src/std/slice.rs" 107 20 107 37
  
  let%span span42 = "../../../../../creusot-contracts/src/std/slice.rs" 100 20 100 37
  
  let%span span43 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span44 = "../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "" 0 0 0 0
  
  let%span span47 = "../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span48 = "../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span49 = "../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span50 = "../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span51 = "" 0 0 0 0
  
  let%span span52 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 21 58 22
  
  let%span span53 = "../../../../../creusot-contracts/src/logic/seq2.rs" 56 14 56 31
  
  let%span span54 = "../../../../../creusot-contracts/src/logic/seq2.rs" 57 14 57 28
  
  let%span span55 = "../../../../../creusot-contracts/src/logic/seq2.rs" 58 4 58 34
  
  let%span span56 = "../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span57 = "" 0 0 0 0
  
  let%span span58 = "../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span59 = "" 0 0 0 0
  
  let%span span60 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span61 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span62 = "../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  let%span span63 = "../../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span64 = "../../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span65 = "../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span66 = "../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span67 = "../../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "" 0 0 0 0
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate inv'4 (_x : Seq'0.t_seq uint32)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span11] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq uint32) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq uint32 . ([%#span12] inv'4 self)  -> ([%#span13] len'1 self >= 0)
  
  predicate inv'9 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq'0.t_seq uint32
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec uint32 (Global'0.t_global) . ([%#span14] inv'9 self)
   -> ([%#span16] inv'4 (shallow_model'2 self))
  && ([%#span15] len'1 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'9 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span17] inv'4 (shallow_model'2 self)
  
  axiom inv'9 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'9 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : borrowed uint32) =
    [%#span18] true
  
  predicate inv'8 (_x : borrowed uint32)
  
  axiom inv'8 : forall x : borrowed uint32 . inv'8 x = true
  
  predicate invariant'7 (self : usize) =
    [%#span18] true
  
  predicate inv'7 (_x : usize)
  
  axiom inv'7 : forall x : usize . inv'7 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'6 (self : Option'0.t_option usize) =
    [%#span18] true
  
  predicate inv'6 (_x : Option'0.t_option usize)
  
  axiom inv'6 : forall x : Option'0.t_option usize . inv'6 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  predicate invariant'5 (self : borrowed (Range'0.t_range usize)) =
    [%#span18] true
  
  predicate inv'5 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'5 : forall x : borrowed (Range'0.t_range usize) . inv'5 x = true
  
  predicate invariant'4 (self : Seq'0.t_seq uint32) =
    [%#span18] true
  
  axiom inv'4 : forall x : Seq'0.t_seq uint32 . inv'4 x = true
  
  predicate invariant'3 (self : Seq'0.t_seq usize) =
    [%#span18] true
  
  predicate inv'3 (_x : Seq'0.t_seq usize)
  
  axiom inv'3 : forall x : Seq'0.t_seq usize . inv'3 x = true
  
  predicate invariant'2 (self : Vec'0.t_vec uint32 (Global'0.t_global)) =
    [%#span18] true
  
  predicate inv'2 (_x : Vec'0.t_vec uint32 (Global'0.t_global))
  
  axiom inv'2 : forall x : Vec'0.t_vec uint32 (Global'0.t_global) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) =
    [%#span18] true
  
  predicate inv'1 (_x : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) . inv'1 x = true
  
  constant empty'1 : Seq'0.t_seq uint32 = [%#span19] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span21] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span20] len'1 (empty'1 : Seq'0.t_seq uint32) = 0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq usize) (x : int) : usize
  
  use seq.Seq
  
  function len'2 (self : Seq'0.t_seq usize) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq usize . ([%#span12] inv'3 self)  -> ([%#span13] len'2 self >= 0)
  
  function concat'0 (self : Seq'0.t_seq usize) (other : Seq'0.t_seq usize) : Seq'0.t_seq usize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq usize, other : Seq'0.t_seq usize . ([%#span22] inv'3 self)
   -> ([%#span23] inv'3 other)
   -> ([%#span26] inv'3 (concat'0 self other))
  && ([%#span25] forall i : int . 0 <= i /\ i < len'2 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'2 self then index_logic'1 self i else index_logic'1 other (i - len'2 self)))
  && ([%#span24] len'2 (concat'0 self other) = len'2 self + len'2 other)
  
  predicate inv'0 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : usize) : int =
    [%#span27] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq'0.t_seq usize) (o : Range'0.t_range usize) =
    [%#span28] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'2 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'2 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'2 visited
     -> deep_model'0 (index_logic'1 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq'0.t_seq usize) (b : Range'0.t_range usize) (bc : Seq'0.t_seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq'0.t_seq usize, b : Range'0.t_range usize, bc : Seq'0.t_seq usize, c : Range'0.t_range usize . ([%#span29] produces'0 a ab b)
   -> ([%#span30] produces'0 b bc c)
   -> ([%#span31] inv'0 a)
   -> ([%#span32] inv'3 ab)
   -> ([%#span33] inv'0 b)
   -> ([%#span34] inv'3 bc)  -> ([%#span35] inv'0 c)  -> ([%#span36] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq usize = [%#span19] ()
  
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span37] inv'0 self)
   -> ([%#span38] produces'0 self (empty'0 : Seq'0.t_seq usize) self)
  
  predicate invariant'0 (self : Range'0.t_range usize) =
    [%#span18] true
  
  axiom inv'0 : forall x : Range'0.t_range usize . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : () =
    [%#span21] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span20] len'2 (empty'0 : Seq'0.t_seq usize) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) =
    [%#span39]  ^ self =  * self
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span39]  ^ self =  * self
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq uint32) (x : int) : uint32
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq'0.t_seq uint32) (fin : Seq'0.t_seq uint32) =
    [%#span40] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < len'1 old'
     -> index_logic'2 old' i = index_logic'2 fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq'0.t_seq uint32) (out : uint32) =
    [%#span41] index_logic'2 seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq'0.t_seq uint32) =
    [%#span42] UIntSize.to_int self < len'1 seq
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) : Seq'0.t_seq uint32 =
    [%#span43] shallow_model'2 ( * self)
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) (index:usize) (return'  (ret:borrowed uint32))= {[@expl:precondition] [%#span46] inv'7 index}
    {[@expl:precondition] [%#span45] inv'1 self}
    {[@expl:precondition] [%#span44] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:borrowed uint32)-> {[%#span51] inv'8 result}
      {[%#span50] len'1 (shallow_model'2 ( ^ self)) = len'1 (shallow_model'0 self)}
      {[%#span49] resolve_elswhere'0 index (shallow_model'0 self) (shallow_model'2 ( ^ self))}
      {[%#span48] has_value'0 index (shallow_model'2 ( ^ self)) ( ^ result)}
      {[%#span47] has_value'0 index (shallow_model'0 self) ( * result)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function singleton'0 (v : usize) : Seq'0.t_seq usize
  
  axiom singleton'0_spec : forall v : usize . ([%#span52] inv'7 v)
   -> ([%#span55] inv'3 (singleton'0 v))
  && ([%#span54] index_logic'1 (singleton'0 v) 0 = v) && ([%#span53] len'2 (singleton'0 v) = 1)
  
  predicate resolve'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span39]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span56] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  let rec next'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span57] inv'5 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span59] inv'6 result}
      {[%#span58] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec uint32 (Global'0.t_global)) (ix : int) : uint32 =
    [%#span60] index_logic'2 (shallow_model'2 self) ix
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function shallow_model'4 (self : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) : Seq'0.t_seq uint32 =
    [%#span61] shallow_model'0 self
  
  function deref'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec uint32 (Global'0.t_global)))) : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))
    
  
  function shallow_model'1 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec uint32 (Global'0.t_global)))) : Seq'0.t_seq uint32
    
   =
    [%#span62] shallow_model'4 (deref'0 self)
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function deref'2 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function inner'0 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function new'2 (x : Seq'0.t_seq usize) : Snapshot'0.t_snapshot (Seq'0.t_seq usize)
  
  axiom new'2_spec : forall x : Seq'0.t_seq usize . ([%#span63] inv'3 x)  -> ([%#span64] deref'1 (new'2 x) = x)
  
  function new'1 (x : Range'0.t_range usize) : Snapshot'0.t_snapshot (Range'0.t_range usize)
  
  axiom new'1_spec : forall x : Range'0.t_range usize . ([%#span63] inv'0 x)  -> ([%#span64] deref'2 (new'1 x) = x)
  
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span65] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span66] true
  
  let rec into_iter'0 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span68] inv'0 self}
    {[@expl:precondition] [%#span67] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span69] inv'0 result}
      {[%#span67] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  function shallow_model'3 (self : Vec'0.t_vec uint32 (Global'0.t_global)) : Seq'0.t_seq uint32 =
    [%#span61] shallow_model'2 self
  
  let rec len'0 (self:Vec'0.t_vec uint32 (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span70] inv'2 self}
    any
    [ return' (result:usize)-> {[%#span71] UIntSize.to_int result = len'1 (shallow_model'3 self)} (! return' {result}) ]
    
  
  function new'0 (x : borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec uint32 (Global'0.t_global)))
    
  
  axiom new'0_spec : forall x : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) . ([%#span63] inv'1 x)
   -> ([%#span64] deref'0 (new'0 x) = x)
  
  let rec all_zero (v:borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s010] new'0 v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 { * v} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#s011] (0 : usize)) _8 ] 
        (any [ any_ (_any:usize)-> (!  [ &_8 <- _any ] s1) ] )
      | s1 = into_iter'0 {_7} (fun (_ret':Range'0.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s012] new'1 iter ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &produced <- [%#s013] new'2 (empty'0 : Seq'0.t_seq usize) ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &old_6_0 <- new'0 v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant]  ^ deref'0 old_6_0 =  ^ v}
        {[@expl:loop invariant] [%#s014] forall j : int . 0 <= j /\ j < len'2 (deref'1 produced)
         -> index_logic'0 ( * v) j = (0 : uint32)}
        {[@expl:loop invariant] [%#s016] len'1 (shallow_model'0 v) = len'1 (shallow_model'1 old_v)}
        {[@expl:loop invariant] [%#s015]  ^ deref'0 old_v =  ^ v}
        {[@expl:loop invariant] [%#s014] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#s014] inv'0 iter}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_22 <- _ret' ]  [ &iter <-  ^ _22 ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> { * _22} {Borrow.get_id _22}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_21 <- _ret' ] 
                 [ &_22 <- { _22 with current = ( ^ _21) ; } ] 
                s2)
          | s2 = next'0 {_21} (fun (_ret':Option'0.t_option usize) ->  [ &_20 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _22}- s1
          | s1 = any
            [ br0 -> {_20 = Option'0.C_None } (! bb11) | br1 (a:usize)-> {_20 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = Option'0.some <usize> {_20} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_25 <- [%#s017] new'2 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ] s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _25 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq usize))-> (!  [ &_25 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = Borrow.borrow_mut <Vec'0.t_vec uint32 (Global'0.t_global)> { * v}
              (fun (_ret':borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) ->
                 [ &_29 <- _ret' ] 
                 [ &v <- { v with current = ( ^ _29) ; } ] 
                s3)
          | s3 = index_mut'0 {_29} {i} (fun (_ret':borrowed uint32) ->  [ &_28 <- _ret' ] s4)
          | s4 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &_28 <- { _28 with current = ([%#s018] (0 : uint32)) ; } ] s1
          | s1 = -{resolve'1 _28}- s2
          | s2 = bb6 ]
           ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'2 v}- s1 | s1 = {[%#s014] false} any ] 
    | bb11 = s0 [ s0 = -{resolve'2 v}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) = v
    | & old_v : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) = any_l ()
    | & iter : Range'0.t_range usize = any_l ()
    | & _7 : Range'0.t_range usize = any_l ()
    | & _8 : usize = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Range'0.t_range usize) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & _20 : Option'0.t_option usize = any_l ()
    | & _21 : borrowed (Range'0.t_range usize) = any_l ()
    | & _22 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _25 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & i : usize = any_l ()
    | & _28 : borrowed uint32 = any_l ()
    | & _29 : borrowed (Vec'0.t_vec uint32 (Global'0.t_global)) = any_l ()
    | & old_6_0 : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec uint32 (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s0110] len'1 (shallow_model'0 v) = len'1 (shallow_model'2 ( ^ v))}
      {[@expl:postcondition] [%#s019] forall i : int . 0 <= i /\ i < len'1 (shallow_model'2 ( ^ v))
       -> index_logic'0 ( ^ v) i = (0 : uint32)}
      (! return' {result}) ]
    
end
