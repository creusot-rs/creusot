module M_07_read_write__read_write [#"07_read_write.rs" 6 0 6 75]
  let%span s07_read_write0 = "07_read_write.rs" 8 4 8 22
  let%span s07_read_write1 = "07_read_write.rs" 6 44 6 45
  let%span s07_read_write2 = "07_read_write.rs" 6 70 6 71
  let%span s07_read_write3 = "07_read_write.rs" 5 11 5 24
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec5 = "../../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span scmp11 = "../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel12 = "../../../../creusot-contracts/src/model.rs" 110 8 110 22
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice14 = "../../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span svec15 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 136 20 136 94
  let%span sresolve17 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel18 = "../../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span smodel19 = "../../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant21 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant22 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq23 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed24 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec15] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed24] inv'3 self
  
  predicate inv'8 (_1 : t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_T'0 [inv'8 x] . inv'8 x = invariant'6 x
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t_T'0 [inv'7 x] . inv'7 x = invariant'5 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec20] inv'7 (view'1 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'2 (self : borrowed (t_Vec'0)) =
    [%#sinvariant21] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate inv'4 (_1 : usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : usize [inv'4 x] . inv'4 x = true
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel12] view'1 self.current
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t_T'0) =
    [%#sslice13] UIntSize.to_int self < Seq.length seq
  
  predicate invariant'1 (self : borrowed t_T'0) =
    [%#sinvariant21] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_1 : borrowed t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice14] Seq.get seq (UIntSize.to_int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq t_T'0) (fin : Seq.seq t_T'0) =
    [%#sslice16] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed t_T'0))= {[@expl:index_mut 'self' type invariant] inv'2 self}
    {[@expl:index_mut 'index' type invariant] inv'4 index}
    {[@expl:index_mut requires] [%#svec4] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:borrowed t_T'0)-> {inv'1 result}
      {[%#svec5] has_value'0 index (view'0 self) result.current}
      {[%#svec6] has_value'0 index (view'1 self.final) result.final}
      {[%#svec7] resolve_elswhere'0 index (view'0 self) (view'1 self.final)}
      {[%#svec8] Seq.length (view'1 self.final) = Seq.length (view'0 self)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed t_T'0) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_T'0) =
    resolve'2 _1
  
  predicate invariant'3 (self : t_Vec'0) =
    [%#sinvariant22] inv'0 self
  
  predicate inv'5 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel18] view'1 self
  
  predicate invariant'4 (self : t_T'0) =
    [%#sinvariant22] inv'3 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] inv'5 self}
    {[@expl:index 'index' type invariant] inv'4 index}
    {[@expl:index requires] [%#svec9] in_bounds'0 index (view'2 self)}
    any
    [ return' (result:t_T'0)-> {inv'6 result} {[%#svec10] has_value'0 index (view'2 self) result} (! return' {result}) ]
    
  
  type t_DeepModelTy'0
  
  function deep_model'1 (self : t_T'0) : t_DeepModelTy'0
  
  function deep_model'0 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel19] deep_model'1 self
  
  let rec eq'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'6 self}
    {[@expl:eq 'other' type invariant] inv'6 other}
    any [ return' (result:bool)-> {[%#scmp11] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ] 
  
  predicate resolve'3 (self : borrowed (t_Vec'0)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_Vec'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec read_write'0 (a:borrowed (t_Vec'0)) (i:usize) (x:t_T'0) (return'  (ret:()))= {[@expl:read_write 'a' type invariant] [%#s07_read_write1] inv'2 a}
    {[@expl:read_write 'x' type invariant] [%#s07_read_write2] inv'3 x}
    {[@expl:read_write requires] [%#s07_read_write3] UIntSize.to_int i < Seq.length (view'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 a.current}
        Borrow.borrow_final <t_Vec'0> {a.current} {Borrow.get_id a}
          (fun (_ret':borrowed (t_Vec'0)) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &a <- { a with current = _ret'.final } ] 
            s1)
      | s1 = index_mut'0 {_7} {i} (fun (_ret':borrowed t_T'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_6 <- { _6 with current = x } ] s1
      | s1 = {[@expl:type invariant] inv'1 _6} s2
      | s2 = -{resolve'0 _6}- s3
      | s3 = index'0 {a.current} {i} (fun (_ret':t_T'0) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = eq'0 {_12} {x} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 a} s1
      | s1 = -{resolve'1 a}- s2
      | s2 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb4) ]  ]
      
    | bb4 = return' {_0}
    | bb5 = {[%#s07_read_write0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed (t_Vec'0) = a
    | & i : usize = i
    | & x : t_T'0 = x
    | & _6 : borrowed t_T'0 = any_l ()
    | & _7 : borrowed (t_Vec'0) = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : t_T'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
