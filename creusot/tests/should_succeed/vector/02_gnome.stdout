module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type c02gnome_ghost 't = 
    | C02Gnome_Ghost opaque_ptr
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module CreusotContracts_Builtins_Model_Model_ModelTy
  type self   
  type modelty   
end
module CreusotContracts_Builtins_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelty
end
module CreusotContracts_Builtins_Model_Model_Model
  type self   
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelty
end
module C02Gnome_Impl0_ModelTy
  type t   
  type modelty  = 
    t
end
module C02Gnome_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.c02gnome_ghost t) : t
end
module C02Gnome_Impl0_Model
  type t   
  use Type
  function model (self : Type.c02gnome_ghost t) : t
end
module C02Gnome_Impl0
  type t   
  use Type
  clone C02Gnome_Impl0_Model as Model0 with type t = t
  clone C02Gnome_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Model_Model as Model1 with type self = Type.c02gnome_ghost t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy1 with type self = Type.c02gnome_ghost t,
  type modelty = ModelTy0.modelty
end
module C02Gnome_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C02Gnome_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.c02gnome_ghost t
    ensures { Model0.model result = a }
    
end
module C02Gnome_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone C02Gnome_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.c02gnome_ghost t
    ensures { Model0.model result = a }
    
end
module C02Gnome_Ord_LeLog_Interface
  type self   
  function le_log (self : self) (_2 : self) : bool
end
module C02Gnome_Ord_LeLog
  type self   
  function le_log (self : self) (_2 : self) : bool
end
module C02Gnome_Ord_Le_Interface
  type self   
  use prelude.Prelude
  clone C02Gnome_Ord_LeLog_Interface as LeLog0 with type self = self
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module C02Gnome_Ord_Le
  type self   
  use prelude.Prelude
  clone C02Gnome_Ord_LeLog as LeLog0 with type self = self
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module C02Gnome_Ord_Trans_Interface
  type self   
  clone C02Gnome_Ord_LeLog_Interface as LeLog0 with type self = self
  function trans (a : self) (b : self) (c : self) : ()
end
module C02Gnome_Ord_Trans
  type self   
  clone C02Gnome_Ord_LeLog_Interface as LeLog0 with type self = self
  function trans (a : self) (b : self) (c : self) : ()
  axiom trans_spec : forall a : self, b : self, c : self . LeLog0.le_log a b && LeLog0.le_log b c -> LeLog0.le_log a c
end
module C02Gnome_SortedRange_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module C02Gnome_SortedRange
  type t   
  use seq.Seq
  use mach.int.Int
  clone C02Gnome_Ord_LeLog_Interface as LeLog0 with type self = t
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
end
module C02Gnome_Sorted_Interface
  type t   
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module C02Gnome_Sorted
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone C02Gnome_SortedRange_Interface as SortedRange0 with type t = t
  predicate sorted (s : Seq.seq t) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelty  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = ModelTy0.modelty
end
module CreusotContracts_Builtins_Seq_Impl0_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Builtins_Seq_Impl0_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Builtins_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelty  = 
    ModelTy0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Builtins_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelty = ModelTy0.modelty
  function model (self : borrowed t) : ModelTy0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Builtins_Model_Model_Model as Model2 with type self = t,
  type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Builtins_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelty = ModelTy2.modelty,
  function Model0.model = Model2.model
  clone CreusotContracts_Builtins_Model_Impl1_ModelTy as ModelTy0 with type t = t,
  type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Builtins_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelty = ModelTy0.modelty
end
module CreusotContracts_Builtins_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelty  = 
    ModelTy0.modelty
end
module CreusotContracts_Builtins_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelty
end
module CreusotContracts_Builtins_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Builtins_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelty = ModelTy0.modelty
  function model (self : t) : ModelTy0.modelty = 
    Model0.model self
end
module CreusotContracts_Builtins_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Builtins_Model_Model_Model as Model2 with type self = t,
  type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Builtins_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelty = ModelTy2.modelty,
  function Model0.model = Model2.model
  clone CreusotContracts_Builtins_Model_Impl0_ModelTy as ModelTy0 with type t = t,
  type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Builtins_Model_Model_Model as Model1 with type self = t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Builtins_Model_Model_ModelTy as ModelTy1 with type self = t, type modelty = ModelTy0.modelty
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use seq.Permut
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap
  type t   
  use mach.int.UInt64
  use seq.Seq
  use seq.Permut
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module C02Gnome_GnomeSort_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C02Gnome_Sorted_Interface as Sorted0 with type t = t
  clone CreusotContracts_Builtins_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val gnome_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model0.model ( * v)) }
    ensures { Sorted0.sorted (Model0.model ( ^ v)) }
    
end
module C02Gnome_GnomeSort
  type t   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone C02Gnome_Impl0_Model as Model1 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone C02Gnome_Ord_LeLog as LeLog0 with type self = t
  clone C02Gnome_SortedRange as SortedRange0 with type t = t, function LeLog0.le_log = LeLog0.le_log
  clone C02Gnome_Sorted as Sorted0 with type t = t, predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone C02Gnome_Ord_Trans as Trans0 with type self = t, function LeLog0.le_log = LeLog0.le_log, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve6 with type t = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve5 with type self = bool
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve4 with type self = t
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve1 with type self = Type.c02gnome_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t))
  clone CreusotContracts_Builtins_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone C02Gnome_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t),
  function Model0.model = Model1.model
  clone C02Gnome_Ord_Le_Interface as Le0 with type self = t, function LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Builtins_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model2.model
  let rec cfg gnome_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    ensures { PermutationOf0.permutation_of (Model2.model ( ^ v)) (Model2.model ( * v)) }
    ensures { Sorted0.sorted (Model2.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var old_v_2 : Type.c02gnome_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t));
  var _3 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _4 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _5 : ();
  var i_6 : usize;
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.creusotcontracts_std1_vec_vec t;
  var _12 : bool;
  var _13 : bool;
  var _14 : usize;
  var _15 : bool;
  var _16 : t;
  var _17 : t;
  var _18 : Type.creusotcontracts_std1_vec_vec t;
  var _19 : usize;
  var _20 : usize;
  var _21 : t;
  var _22 : t;
  var _23 : t;
  var _24 : Type.creusotcontracts_std1_vec_vec t;
  var _25 : usize;
  var _26 : ();
  var _27 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _28 : usize;
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_v_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_2 };
    assert { let _ = Trans0.trans (Seq.get (Model0.model v_1) 0) (Seq.get (Model0.model v_1) 0) (Seq.get (Model0.model v_1) 0) in true };
    _5 <- ();
    assume { Resolve2.resolve _5 };
    i_6 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant sorted { SortedRange0.sorted_range (Model0.model v_1) 0 (UInt64.to_int i_6) };
    invariant proph_const {  ^ v_1 =  ^ Model1.model old_v_2 };
    invariant permutation { PermutationOf0.permutation_of (Model2.model ( * v_1)) (Model2.model ( * Model1.model old_v_2)) };
    goto BB3
  }
  BB3 {
    assume { Resolve3.resolve _9 };
    _9 <- i_6;
    _11 <-  * v_1;
    _10 <- Len0.len _11;
    goto BB4
  }
  BB4 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB16
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve3.resolve _14 };
    _14 <- i_6;
    _13 <- _14 = (0 : usize);
    switch (_13)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _12 <- true;
    goto BB8
  }
  BB7 {
    _18 <-  * v_1;
    assume { Resolve3.resolve _20 };
    _20 <- i_6;
    _19 <- _20 - (1 : usize);
    _17 <- Index0.index _18 _19;
    goto BB9
  }
  BB8 {
    switch (_12)
      | False -> goto BB13
      | _ -> goto BB12
      end
  }
  BB9 {
    _16 <- _17;
    assume { Resolve4.resolve _17 };
    _24 <-  * v_1;
    assume { Resolve3.resolve _25 };
    _25 <- i_6;
    _23 <- Index0.index _24 _25;
    goto BB10
  }
  BB10 {
    _22 <- _23;
    assume { Resolve4.resolve _23 };
    _21 <- _22;
    assume { Resolve4.resolve _22 };
    _15 <- Le0.le _16 _21;
    goto BB11
  }
  BB11 {
    assume { Resolve5.resolve _12 };
    _12 <- _15;
    goto BB8
  }
  BB12 {
    i_6 <- i_6 + (1 : usize);
    _7 <- ();
    assume { Resolve2.resolve _7 };
    goto BB15
  }
  BB13 {
    _27 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _27) };
    assume { Resolve3.resolve _29 };
    _29 <- i_6;
    _28 <- _29 - (1 : usize);
    assume { Resolve3.resolve _30 };
    _30 <- i_6;
    _26 <- Swap0.swap _27 _28 _30;
    goto BB14
  }
  BB14 {
    i_6 <- i_6 - (1 : usize);
    _7 <- ();
    assume { Resolve2.resolve _7 };
    goto BB15
  }
  BB15 {
    goto BB2
  }
  BB16 {
    assume { Resolve6.resolve v_1 };
    assume { Resolve3.resolve i_6 };
    _0 <- ();
    return _0
  }
  
end
