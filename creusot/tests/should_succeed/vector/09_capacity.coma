
module Alloc_Vec_Vec_Type
  use prelude.prelude.Opaque
  
  type t_vec 't 'a =
    | C_Vec hidden_field hidden_field
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:hidden_field) (len:hidden_field))= any
    [ good (buf:hidden_field) (len:hidden_field)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:hidden_field) (len:hidden_field)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Alloc_Boxed_Box_Type
  use prelude.prelude.Opaque
  
  type t_box 't 'a =
    | C_Box hidden_field hidden_field
  
  function any_l (_ : 'b) : 'a
end
module C09Capacity_ChangeCapacity
  type t
  
  let%span s09_capacity0 = "../09_capacity.rs" 7 14 7 17
  
  let%span s09_capacity1 = "../09_capacity.rs" 8 20 8 23
  
  let%span s09_capacity2 = "../09_capacity.rs" 10 16 10 17
  
  let%span s09_capacity3 = "../09_capacity.rs" 6 26 6 27
  
  let%span s09_capacity4 = "../09_capacity.rs" 4 10 4 33
  
  let%span s09_capacity5 = "../09_capacity.rs" 5 0 5 69
  
  let%span span6 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span12 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span13 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span14 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 125 26 125 43
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 121 26 121 43
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 117 26 117 43
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../../creusot-contracts/src/std/vec.rs" 113 26 113 43
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_1 : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'3 (self : t) =
    [%#span6] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t)
  
  axiom inv'2 : forall x : Seq.seq t . inv'2 x = true
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_vec t (Global'0.t_global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span8] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . [%#span10] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span11] inv'2 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span12] Seq.get (shallow_model'0 self) ix
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span13] shallow_model'0 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span14] self.final = self.current
  
  let rec shrink_to'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (min_capacity:usize) (return'  (ret:()))= {[@expl:precondition] [%#span15] inv'1 self}
    any [ return' (result:())-> {[%#span16] shallow_model'0 self.final = shallow_model'1 self} (! return' {result}) ] 
  
  let rec shrink_to_fit'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:()))= {[@expl:precondition] [%#span17] inv'1 self}
    any [ return' (result:())-> {[%#span18] shallow_model'0 self.final = shallow_model'1 self} (! return' {result}) ] 
  
  let rec reserve_exact'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (additional:usize) (return'  (ret:()))= {[@expl:precondition] [%#span19] inv'1 self}
    any [ return' (result:())-> {[%#span20] shallow_model'0 self.final = shallow_model'1 self} (! return' {result}) ] 
  
  let rec reserve'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (additional:usize) (return'  (ret:()))= {[@expl:precondition] [%#span21] inv'1 self}
    any [ return' (result:())-> {[%#span22] shallow_model'0 self.final = shallow_model'1 self} (! return' {result}) ] 
  
  let rec change_capacity (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:()))= {[%#s09_capacity3] inv'1 v}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_5 <- _ret' ] 
             [ &v <- { v with current = _5.final ; } ] 
            s1)
      | s1 = -{inv'0 _5.final}- s2
      | s2 = reserve'0 {_5} {[%#s09_capacity0] (100 : usize)} (fun (_ret':()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_7 <- _ret' ] 
             [ &v <- { v with current = _7.final ; } ] 
            s1)
      | s1 = -{inv'0 _7.final}- s2
      | s2 = reserve_exact'0 {_7} {[%#s09_capacity1] (200 : usize)} (fun (_ret':()) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_9 <- _ret' ] 
             [ &v <- { v with current = _9.final ; } ] 
            s1)
      | s1 = -{inv'0 _9.final}- s2
      | s2 = shrink_to_fit'0 {_9} (fun (_ret':()) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec t (Global'0.t_global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_11 <- _ret' ] 
             [ &v <- { v with current = _11.final ; } ] 
            s1)
      | s1 = -{inv'0 _11.final}- s2
      | s2 = shrink_to'0 {_11} {[%#s09_capacity2] (1 : usize)} (fun (_ret':()) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'0 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec t (Global'0.t_global)) = v
    | & _4 : () = any_l ()
    | & _5 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _8 : () = any_l ()
    | & _9 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _10 : () = any_l ()
    | & _11 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s09_capacity5] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'1 v)  -> index_logic'0 v.final i = index_logic'0 v.current i}
      {[@expl:postcondition] [%#s09_capacity4] Seq.length (shallow_model'0 v.final) = Seq.length (shallow_model'1 v)}
      (! return' {result}) ]
    
end
module C09Capacity_ClearVec
  type t
  
  let%span s09_capacity0 = "../09_capacity.rs" 14 20 14 21
  
  let%span s09_capacity1 = "../09_capacity.rs" 13 10 13 26
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span7 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span8 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 129 26 129 45
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_1 : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'3 (self : t) =
    [%#span2] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t)
  
  axiom inv'2 : forall x : Seq.seq t . inv'2 x = true
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_vec t (Global'0.t_global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'1 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . [%#span6] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span7] inv'2 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span8] self.final = self.current
  
  let rec clear'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:()))= {[@expl:precondition] [%#span9] inv'1 self}
    any [ return' (result:())-> {[%#span10] Seq.length (shallow_model'0 self.final) = 0} (! return' {result}) ] 
  
  let rec clear_vec (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:()))= {[%#s09_capacity0] inv'1 v}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec t (Global'0.t_global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_4 <- _ret' ] 
             [ &v <- { v with current = _4.final ; } ] 
            s1)
      | s1 = -{inv'0 _4.final}- s2
      | s2 = clear'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'0 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec t (Global'0.t_global)) = v
    | & _3 : () = any_l ()
    | & _4 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s09_capacity1] Seq.length (shallow_model'0 v.final) = 0}
      (! return' {result}) ]
    
end
