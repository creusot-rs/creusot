module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_09_capacity__change_capacity [#"09_capacity.rs" 6 0 6 41]
  type t
  
  let%span s09_capacity0 = "09_capacity.rs" 7 14 7 17
  let%span s09_capacity1 = "09_capacity.rs" 8 20 8 23
  let%span s09_capacity2 = "09_capacity.rs" 10 16 10 17
  let%span s09_capacity3 = "09_capacity.rs" 6 26 6 27
  let%span s09_capacity4 = "09_capacity.rs" 4 10 4 33
  let%span s09_capacity5 = "09_capacity.rs" 5 0 5 69
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 121 26 121 43
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 125 26 125 43
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 129 26 129 43
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 133 26 133 43
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sops12 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sresolve13 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant15 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq16 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'4 (_1 : t)
  
  predicate invariant'3 (self : t) =
    [%#sboxed17] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t [inv'3 x] . inv'3 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t [inv'2 x] . inv'2 x = invariant'2 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant15] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'1 x] . inv'1 x
  = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'0_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec10] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec14] inv'2 (view'0 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#sops12] Seq.get (view'0 self) ix
  
  function view'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel11] view'0 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve13] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'1 _1
  
  let rec shrink_to'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (min_capacity:usize) (return'  (ret:()))= {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec9] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  let rec shrink_to_fit'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:()))= {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec8] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  let rec reserve_exact'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (additional:usize) (return'  (ret:()))= {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec7] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  let rec reserve'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (additional:usize) (return'  (ret:()))= {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec6] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec change_capacity (v:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:()))= {[%#s09_capacity3] inv'1 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 v.current}
        Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {v.current}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_5 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = reserve'0 {_5} {[%#s09_capacity0] (100 : usize)} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = {inv'0 v.current}
        Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {v.current}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = reserve_exact'0 {_7} {[%#s09_capacity1] (200 : usize)} (fun (_ret':()) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {inv'0 v.current}
        Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {v.current}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_9 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = shrink_to_fit'0 {_9} (fun (_ret':()) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = {inv'0 v.current}
        Borrow.borrow_final <Vec'0.t_Vec t (Global'0.t_Global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_11 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = shrink_to'0 {_11} {[%#s09_capacity2] (1 : usize)} (fun (_ret':()) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'0 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = v
    | & _4 : () = any_l ()
    | & _5 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _8 : () = any_l ()
    | & _9 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _10 : () = any_l ()
    | & _11 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s09_capacity5] forall i : int . 0 <= i
      /\ i < Seq.length (view'1 v)  -> index_logic'0 v.final i = index_logic'0 v.current i}
      {[@expl:postcondition] [%#s09_capacity4] Seq.length (view'0 v.final) = Seq.length (view'1 v)}
      (! return' {result}) ]
    
end
module M_09_capacity__clear_vec [#"09_capacity.rs" 14 0 14 35]
  type t
  
  let%span s09_capacity0 = "09_capacity.rs" 14 20 14 21
  let%span s09_capacity1 = "09_capacity.rs" 13 10 13 26
  let%span svec2 = "../../../../creusot-contracts/src/std/vec.rs" 137 26 137 45
  let%span svec3 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec5 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq7 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed8 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'4 (_1 : t)
  
  predicate invariant'3 (self : t) =
    [%#sboxed8] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t [inv'3 x] . inv'3 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t) =
    [%#sseq7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t [inv'2 x] . inv'2 x = invariant'2 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'1 x] . inv'1 x
  = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'0_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec3] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec5] inv'2 (view'0 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'1 _1
  
  let rec clear'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:()))= {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec2] Seq.length (view'0 self.final) = 0} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec clear_vec (v:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:()))= {[%#s09_capacity0] inv'1 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 v.current}
        Borrow.borrow_final <Vec'0.t_Vec t (Global'0.t_Global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = clear'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'0 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = v
    | & _3 : () = any_l ()
    | & _4 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s09_capacity1] Seq.length (view'0 v.final) = 0}
      (! return' {result}) ]
    
end
