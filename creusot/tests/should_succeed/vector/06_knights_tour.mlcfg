
module C06KnightsTour_Point_Type
  use mach.int.Int
  use prelude.IntSize
  type t_point  =
    | C_Point isize isize
    
  let function point_x (self : t_point) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Point a _ -> a
      end
  let function point_y (self : t_point) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Point _ a -> a
      end
end
module Core_Clone_Impls_Impl11_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  val clone' [@cfg:stackify] (self : isize) : isize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl11_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  val clone' [@cfg:stackify] (self : isize) : isize
    ensures { result = self }
    
end
module C06KnightsTour_Impl3_Clone_Interface
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  val clone' [@cfg:stackify] [#"../06_knights_tour.rs" 4 15 4 20] (self : C06KnightsTour_Point_Type.t_point) : C06KnightsTour_Point_Type.t_point
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
end
module C06KnightsTour_Impl3_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  clone Core_Clone_Impls_Impl11_Clone_Interface as Clone0
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  let rec cfg clone' [@cfg:stackify] [#"../06_knights_tour.rs" 4 15 4 20] (self : C06KnightsTour_Point_Type.t_point) : C06KnightsTour_Point_Type.t_point
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.t_point;
  var self_1 : C06KnightsTour_Point_Type.t_point;
  var _3 : isize;
  var _4 : isize;
  var _5 : isize;
  var _6 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- C06KnightsTour_Point_Type.point_x self_1;
    _3 <- ([#"../06_knights_tour.rs" 6 4 6 12] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _6 <- C06KnightsTour_Point_Type.point_y self_1;
    _5 <- ([#"../06_knights_tour.rs" 7 4 7 12] Clone0.clone' _6);
    goto BB2
  }
  BB2 {
    _0 <- C06KnightsTour_Point_Type.C_Point _3 _5;
    return _0
  }
  
end
module C06KnightsTour_Impl0_Mov_Interface
  use mach.int.Int64
  use mach.int.Int
  use prelude.Borrow
  use prelude.IntSize
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  val mov [@cfg:stackify] [#"../06_knights_tour.rs" 18 4 18 45] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.point_x self) /\ Int64.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.point_y self) /\ Int64.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= Int64.to_int (let (a, _) = p in a) /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= Int64.to_int (let (_, a) = p in a) /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] Int64.to_int (C06KnightsTour_Point_Type.point_x result) = Int64.to_int (C06KnightsTour_Point_Type.point_x self) + Int64.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] Int64.to_int (C06KnightsTour_Point_Type.point_y result) = Int64.to_int (C06KnightsTour_Point_Type.point_y self) + Int64.to_int (let (_, a) = p in a) }
    
end
module C06KnightsTour_Impl0_Mov
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  use mach.int.Int64
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  let rec cfg mov [@cfg:stackify] [#"../06_knights_tour.rs" 18 4 18 45] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.point_x self) /\ Int64.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.point_y self) /\ Int64.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= Int64.to_int (let (a, _) = p in a) /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= Int64.to_int (let (_, a) = p in a) /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] Int64.to_int (C06KnightsTour_Point_Type.point_x result) = Int64.to_int (C06KnightsTour_Point_Type.point_x self) + Int64.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] Int64.to_int (C06KnightsTour_Point_Type.point_y result) = Int64.to_int (C06KnightsTour_Point_Type.point_y self) + Int64.to_int (let (_, a) = p in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.t_point;
  var self_1 : C06KnightsTour_Point_Type.t_point;
  var p_2 : (isize, isize);
  var _9 : isize;
  var _10 : isize;
  var _11 : isize;
  var _12 : isize;
  var _13 : isize;
  var _14 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _10 <- C06KnightsTour_Point_Type.point_x self_1;
    _11 <- (let (a, _) = p_2 in a);
    _9 <- ([#"../06_knights_tour.rs" 19 18 19 32] _10 + _11);
    _13 <- C06KnightsTour_Point_Type.point_y self_1;
    _14 <- (let (_, a) = p_2 in a);
    _12 <- ([#"../06_knights_tour.rs" 19 37 19 51] _13 + _14);
    _0 <- C06KnightsTour_Point_Type.C_Point _9 _12;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C06KnightsTour_Board_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_board  =
    | C_Board usize (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let function board_size (self : t_board) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Board a _ -> a
      end
  let function board_field (self : t_board) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Board _ a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module C06KnightsTour_Impl1_Wf_Stub
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board)
end
module C06KnightsTour_Impl1_Wf_Interface
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board)
end
module C06KnightsTour_Impl1_Wf
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UInt64.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000 /\ Seq.length (ShallowModel0.shallow_model (C06KnightsTour_Board_Type.board_field self)) = UInt64.to_int (C06KnightsTour_Board_Type.board_size self) /\ (forall i : int . 0 <= i /\ i < UInt64.to_int (C06KnightsTour_Board_Type.board_size self) -> Seq.length (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (C06KnightsTour_Board_Type.board_field self)) i)) = UInt64.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf self }
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use seq.Seq
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Ghost.ghost_ty (Seq.seq 'b))
    
  let function mapinv_produced (self : t_mapinv 'i 'b 'f) : Ghost.ghost_ty (Seq.seq 'b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ _ a -> a
      end
  let function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv a _ _ -> a
      end
  let function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ a _ -> a
      end
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) =
    Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self)) = Seq.empty  /\ Completed0.completed {current = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self); final = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)} /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  val completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Interface
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) =
    forall i : i . forall e : Item0.item . Invariant0.invariant' i -> Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (Seq.singleton e) i -> Precondition0.precondition (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (e, CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)
  val next_precondition (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = next_precondition self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Interface
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation (iter : i) (func : f) =
    forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new s) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize (_1' : ())
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize (_1' : ())
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  predicate reinitialize (_1' : ()) =
    forall reset : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) . Completed0.completed reset -> Invariant0.invariant' (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ reset)) -> NextPrecondition0.next_precondition ( ^ reset) /\ Preservation0.preservation (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ reset)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ reset))
  val reinitialize (_1' : ()) : bool
    ensures { result = reinitialize _1' }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv_Stub
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv_Interface
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
  axiom preservation_inv_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv
  type i
  type b
  type f
  use prelude.Ghost
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) =
    forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Invariant0.invariant' i -> Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * f) -> Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s)) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s)) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s) e1))
  val preservation_inv (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = preservation_inv self }
    
  axiom preservation_inv_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self) = Seq.empty  -> preservation_inv self = Preservation0.preservation (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
end
module CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Interface
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant
  type i
  type b
  type f
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv_Stub as PreservationInv0 with
    type i = i,
    type b = b,
    type f = f,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub as Reinitialize0 with
    type i = i,
    type b = b,
    type f = f
  predicate invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) =
    Reinitialize0.reinitialize () /\ PreservationInv0.preservation_inv self /\ Invariant0.invariant' (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ NextPrecondition0.next_precondition self
  val invariant' (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Iter_Iterator_MapInv_Interface
  type self
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  use prelude.Ghost
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant1 with
    type i = self,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub as Reinitialize0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val map_inv [@cfg:stackify] (self : self) (func : f) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
    requires {forall i2 : self . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces self (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {Reinitialize0.reinitialize ()}
    requires {Preservation0.preservation self func}
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { result = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Ghost.new (Seq.empty )) }
    
end
module CreusotContracts_Std1_Iter_Iterator_MapInv
  type self
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  use prelude.Ghost
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Interface as Invariant1 with
    type i = self,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Interface as Preservation0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Interface as Reinitialize0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = self
  val map_inv [@cfg:stackify] (self : self) (func : f) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
    requires {forall i2 : self . forall e : Item0.item . Invariant0.invariant' i2 -> Produces0.produces self (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {Reinitialize0.reinitialize ()}
    requires {Preservation0.preservation self func}
    requires {Invariant0.invariant' self}
    ensures { Invariant1.invariant' result }
    ensures { result = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Ghost.new (Seq.empty )) }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Stub
  type self
  type a
  use seq.Seq
  predicate from_iter_logic (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Interface
  type self
  type a
  use seq.Seq
  predicate from_iter_logic (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterLogic
  type self
  type a
  use seq.Seq
  predicate from_iter_logic (prod : Seq.seq a) (res : self)
  val from_iter_logic (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_logic prod res }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect_Interface
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Stub as FromIterLogic0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val collect [@cfg:stackify] (self : self) : b
    requires {Invariant0.invariant' self}
    ensures { exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterLogic0.from_iter_logic prod result }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterLogic_Interface as FromIterLogic0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = self
  val collect [@cfg:stackify] (self : self) : b
    requires {Invariant0.invariant' self}
    ensures { exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterLogic0.from_iter_logic prod result }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl6_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl6_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl6_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C06KnightsTour_Impl1_New_Closure3_Interface
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  type c06knightstour_impl1_new_closure3  =
    | C06KnightsTour_Impl1_New_Closure3 usize
    
  let function c06knightstour_impl1_new_closure3_0 (self : c06knightstour_impl1_new_closure3) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06KnightsTour_Impl1_New_Closure3 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize)))
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] let (_2', _3') = args in true
  predicate unnest (self : c06knightstour_impl1_new_closure3) (_2' : c06knightstour_impl1_new_closure3) =
    c06knightstour_impl1_new_closure3_0 _2' = c06knightstour_impl1_new_closure3_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (self : borrowed c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    ([#"../06_knights_tour.rs" 43 26 43 50] let (_2', _3') = args in Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int (c06knightstour_impl1_new_closure3_0 ( ^ self))) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../06_knights_tour.rs" 43 26 43 50] let (_2', _3') = args in Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int (c06knightstour_impl1_new_closure3_0 self)
  predicate resolve (_1' : c06knightstour_impl1_new_closure3) =
    true
  val c06KnightsTour_Impl1_New_Closure3 [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (_1' : borrowed c06knightstour_impl1_new_closure3) (_2' : usize) (_3' : Ghost.ghost_ty (Seq.seq usize)) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 43 26 43 50] Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int (c06knightstour_impl1_new_closure3_0 ( ^ _1')) }
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C06KnightsTour_Impl1_New_Closure3
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  type c06knightstour_impl1_new_closure3  =
    | C06KnightsTour_Impl1_New_Closure3 usize
    
  let function c06knightstour_impl1_new_closure3_0 (self : c06knightstour_impl1_new_closure3) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06KnightsTour_Impl1_New_Closure3 a -> a
      end
  use prelude.Ghost
  use seq.Seq
  use mach.int.UInt64
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate precondition [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize)))
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] let (_2', _3') = args in true
  predicate unnest (self : c06knightstour_impl1_new_closure3) (_2' : c06knightstour_impl1_new_closure3) =
    c06knightstour_impl1_new_closure3_0 _2' = c06knightstour_impl1_new_closure3_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (self : borrowed c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    ([#"../06_knights_tour.rs" 43 26 43 50] let (_2', _3') = args in Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int (c06knightstour_impl1_new_closure3_0 ( ^ self))) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../06_knights_tour.rs" 43 26 43 50] let (_2', _3') = args in Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int (c06knightstour_impl1_new_closure3_0 self)
  predicate resolve (_1' : c06knightstour_impl1_new_closure3) =
    true
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = usize
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve1 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve2.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c06knightstour_impl1_new_closure3
  let rec cfg c06KnightsTour_Impl1_New_Closure3 [@cfg:stackify] [#"../06_knights_tour.rs" 43 16 43 52] (_1' : borrowed c06knightstour_impl1_new_closure3) (_2' : usize) (_3' : Ghost.ghost_ty (Seq.seq usize)) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 43 26 43 50] Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int (c06knightstour_impl1_new_closure3_0 ( ^ _1')) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _1 : borrowed c06knightstour_impl1_new_closure3;
  var _2 : usize;
  var _3 : Ghost.ghost_ty (Seq.seq usize);
  var res_4 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _5 : usize;
  {
    _1 <- _1';
    _2 <- _2';
    _3 <- _3';
    goto BB0
  }
  BB0 {
    _5 <- c06knightstour_impl1_new_closure3_0 ( * _1);
    assume { Resolve0.resolve _1 };
    res_4 <- ([#"../06_knights_tour.rs" 44 23 44 36] FromElem0.from_elem ([#"../06_knights_tour.rs" 44 28 44 29] (0 : usize)) _5);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _0 };
    _0 <- res_4;
    res_4 <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
  axiom produces_refl_spec : forall a : self . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Core_Iter_Range_Impl3_Item_Type
  type a
  type item  =
    a
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Interface
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx) =
    true
  val invariant' (self : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl2_Item_Type
  type i
  type b
  type f
  type item  =
    b
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Stub
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Interface
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) =
    Resolve0.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ Resolve1.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  val resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use prelude.Borrow
  use mach.int.Int
  use seq_ext.SeqExt
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
   =
    Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ) /\ (exists s : Seq.seq Item0.item . Seq.length s = Seq.length visited /\ Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ) /\ Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ) = Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Std1_Vec_Impl5_FromIterLogic_Stub
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl5_FromIterLogic_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl5_FromIterLogic
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    prod = ShallowModel0.shallow_model res
  val from_iter_logic (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_logic prod res }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Interface
  use mach.int.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function deep_model (self : usize) : int =
    UInt64.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : () =
    ()
  val produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
   =
    ()
  val produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module C06KnightsTour_Impl1_New_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val new [@cfg:stackify] [#"../06_knights_tour.rs" 40 4 40 31] (size : usize) : C06KnightsTour_Board_Type.t_board
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] Wf0.wf result }
    
end
module C06KnightsTour_Impl1_New
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use mach.int.UInt64
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = usize
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve5.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Item_Type as Item0 with
    type a = usize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  use prelude.Ghost
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone C06KnightsTour_Impl1_New_Closure3_Interface as Closure30 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces as Produces1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant0 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation as Preservation0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition as NextPrecondition0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_PreservationInv as PreservationInv0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Completed as Completed0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize as Reinitialize0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Iter_MapInv_Impl1_Invariant as Invariant1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    type Item0.item = Item0.item,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate PreservationInv0.preservation_inv = PreservationInv0.preservation_inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans as ProducesTrans2 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl as ProducesRefl2 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans1 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl1 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve2 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve4.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl5_FromIterLogic as FromIterLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve as Resolve1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = usize,
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Resolve1.resolve = Closure30.resolve,
    predicate Resolve0.resolve = Resolve3.resolve
  clone CreusotContracts_Std1_Iter_MapInv_Impl2_Item_Type as Item1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans as ProducesTrans0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl as ProducesRefl0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve2.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Core_Iter_Traits_Iterator_Iterator_Collect_Interface as Collect0 with
    type self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3,
    type b = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item1.item,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate FromIterLogic0.from_iter_logic = FromIterLogic0.from_iter_logic
  clone CreusotContracts_Std1_Iter_Iterator_MapInv_Interface as MapInv1 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = Item0.item,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Invariant1.invariant' = Invariant1.invariant'
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg new [@cfg:stackify] [#"../06_knights_tour.rs" 40 4 40 31] (size : usize) : C06KnightsTour_Board_Type.t_board
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] Wf0.wf result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Board_Type.t_board;
  var size_1 : usize;
  var rows_5 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _6 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3;
  var _7 : Core_Ops_Range_Range_Type.t_range usize;
  var _8 : usize;
  var _9 : Closure30.c06knightstour_impl1_new_closure3;
  var _10 : usize;
  var _11 : usize;
  var _12 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _8 <- size_1;
    _7 <- Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 41 20 41 21] (0 : usize)) _8;
    _10 <- size_1;
    _9 <- Closure30.C06KnightsTour_Impl1_New_Closure3 _10;
    _6 <- ([#"../06_knights_tour.rs" 41 19 45 13] MapInv1.map_inv _7 _9);
    goto BB1
  }
  BB1 {
    rows_5 <- ([#"../06_knights_tour.rs" 41 19 46 22] Collect0.collect _6);
    goto BB2
  }
  BB2 {
    _11 <- size_1;
    assume { Resolve0.resolve _12 };
    _12 <- rows_5;
    rows_5 <- any Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
    _0 <- C06KnightsTour_Board_Type.C_Board _11 _12;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06KnightsTour_Impl1_InBounds_Stub
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
end
module C06KnightsTour_Impl1_InBounds_Interface
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
end
module C06KnightsTour_Impl1_InBounds
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use mach.int.Int64
  use mach.int.Int
  use mach.int.UInt64
  predicate in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= Int64.to_int (C06KnightsTour_Point_Type.point_x p) /\ Int64.to_int (C06KnightsTour_Point_Type.point_x p) < UInt64.to_int (C06KnightsTour_Board_Type.board_size self) /\ 0 <= Int64.to_int (C06KnightsTour_Point_Type.point_y p) /\ Int64.to_int (C06KnightsTour_Point_Type.point_y p) < UInt64.to_int (C06KnightsTour_Board_Type.board_size self)
  val in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds self p }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module C06KnightsTour_Impl1_Available_Interface
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Stub as InBounds0
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val available [@cfg:stackify] [#"../06_knights_tour.rs" 52 4 52 41] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result -> InBounds0.in_bounds self p }
    
end
module C06KnightsTour_Impl1_Available
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = usize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds2 with
    type t = usize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg available [@cfg:stackify] [#"../06_knights_tour.rs" 52 4 52 41] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result -> InBounds0.in_bounds self p }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : C06KnightsTour_Board_Type.t_board;
  var p_2 : C06KnightsTour_Point_Type.t_point;
  var _5 : bool;
  var _6 : bool;
  var _7 : bool;
  var _8 : bool;
  var _9 : isize;
  var _10 : bool;
  var _11 : usize;
  var _12 : isize;
  var _13 : usize;
  var _14 : bool;
  var _15 : isize;
  var _16 : bool;
  var _17 : usize;
  var _18 : isize;
  var _19 : usize;
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _24 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _25 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _26 : usize;
  var _27 : isize;
  var _28 : usize;
  var _29 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _9 <- C06KnightsTour_Point_Type.point_x p_2;
    _8 <- ([#"../06_knights_tour.rs" 53 8 53 16] ([#"../06_knights_tour.rs" 53 8 53 9] (0 : isize)) <= _9);
    switch (_8)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB1 {
    _0 <- ([#"../06_knights_tour.rs" 53 8 57 58] false);
    goto BB3
  }
  BB2 {
    _25 <- C06KnightsTour_Board_Type.board_field self_1;
    _27 <- C06KnightsTour_Point_Type.point_x p_2;
    _26 <- UIntSize.of_int (IntSize.to_int _27);
    _24 <- ([#"../06_knights_tour.rs" 57 15 57 39] Index0.index _25 _26);
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _5 <- ([#"../06_knights_tour.rs" 53 8 56 41] false);
    goto BB6
  }
  BB5 {
    _18 <- C06KnightsTour_Point_Type.point_y p_2;
    _17 <- UIntSize.of_int (IntSize.to_int _18);
    _19 <- C06KnightsTour_Board_Type.board_size self_1;
    _16 <- ([#"../06_knights_tour.rs" 56 15 56 41] _17 < _19);
    _5 <- _16;
    _16 <- any bool;
    goto BB6
  }
  BB6 {
    switch (_5)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB7 {
    _6 <- ([#"../06_knights_tour.rs" 53 8 55 23] false);
    goto BB9
  }
  BB8 {
    _15 <- C06KnightsTour_Point_Type.point_y p_2;
    _14 <- ([#"../06_knights_tour.rs" 55 15 55 23] ([#"../06_knights_tour.rs" 55 15 55 16] (0 : isize)) <= _15);
    _6 <- _14;
    _14 <- any bool;
    goto BB9
  }
  BB9 {
    switch (_6)
      | False -> goto BB4
      | True -> goto BB5
      end
  }
  BB10 {
    _7 <- ([#"../06_knights_tour.rs" 53 8 54 41] false);
    goto BB12
  }
  BB11 {
    _12 <- C06KnightsTour_Point_Type.point_x p_2;
    _11 <- UIntSize.of_int (IntSize.to_int _12);
    _13 <- C06KnightsTour_Board_Type.board_size self_1;
    _10 <- ([#"../06_knights_tour.rs" 54 15 54 41] _11 < _13);
    _7 <- _10;
    _10 <- any bool;
    goto BB12
  }
  BB12 {
    switch (_7)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB13 {
    _23 <- _24;
    _29 <- C06KnightsTour_Point_Type.point_y p_2;
    _28 <- UIntSize.of_int (IntSize.to_int _29);
    _22 <- ([#"../06_knights_tour.rs" 57 15 57 53] Index1.index _23 _28);
    goto BB14
  }
  BB14 {
    _21 <- _22;
    _20 <- ([#"../06_knights_tour.rs" 57 15 57 58] _21 = ([#"../06_knights_tour.rs" 57 57 57 58] (0 : usize)));
    _0 <- _20;
    _20 <- any bool;
    goto BB3
  }
  
end
module C06KnightsTour_Moves_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  use prelude.IntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val moves [@cfg:stackify] [#"../06_knights_tour.rs" 95 0 95 33] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 93 10 93 30] Seq.length (ShallowModel0.shallow_model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 94 0 94 142] forall i : int . 0 <= i /\ i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (ShallowModel0.shallow_model result) i in a) /\ Int64.to_int (let (a, _) = Seq.get (ShallowModel0.shallow_model result) i in a) <= 2 /\ - 2 <= Int64.to_int (let (_, a) = Seq.get (ShallowModel0.shallow_model result) i in a) /\ Int64.to_int (let (_, a) = Seq.get (ShallowModel0.shallow_model result) i in a) <= 2 }
    
end
module C06KnightsTour_Moves
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  use prelude.IntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val moves [@cfg:stackify] [#"../06_knights_tour.rs" 95 0 95 33] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 93 10 93 30] Seq.length (ShallowModel0.shallow_model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 94 0 94 142] forall i : int . 0 <= i /\ i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (ShallowModel0.shallow_model result) i in a) /\ Int64.to_int (let (a, _) = Seq.get (ShallowModel0.shallow_model result) i in a) <= 2 /\ - 2 <= Int64.to_int (let (_, a) = Seq.get (ShallowModel0.shallow_model result) i in a) /\ Int64.to_int (let (_, a) = Seq.get (ShallowModel0.shallow_model result) i in a) <= 2 }
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl2_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl3_Invariant_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_Invariant_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_Invariant
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    true
  val invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = invariant' self }
    
end
module Alloc_Vec_Impl19_IntoIter_Interface
  type t
  type a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl3_Invariant_Stub as Invariant0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { Invariant0.invariant' result }
    
end
module Alloc_Vec_Impl19_IntoIter
  type t
  type a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl3_Invariant_Interface as Invariant0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { Invariant0.invariant' result }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl2_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl4_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl4_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl4_Completed
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl4_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl4_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl4_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Alloc_Vec_IntoIter_Impl5_Item_Type
  type t
  type a
  type item  =
    t
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item1 with
    type t = t,
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl4_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl3_Invariant_Stub as Invariant0 with
    type t = t,
    type a = a
  val next [@cfg:stackify] (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Alloc_Vec_IntoIter_Impl5_Next
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item1 with
    type t = t,
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Interface as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl4_Completed_Interface as Completed0 with
    type t = t,
    type a = a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl3_Invariant_Interface as Invariant0 with
    type t = t,
    type a = a
  val next [@cfg:stackify] (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Vec_Impl7_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl7_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl7_Resolve
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl4_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl4_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl4_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl4_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl4_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Vec_Impl4_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl4_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module C06KnightsTour_Impl1_CountDegree_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Stub as InBounds0
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val count_degree [@cfg:stackify] [#"../06_knights_tour.rs" 70 4 70 45] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : usize
    requires {[#"../06_knights_tour.rs" 68 15 68 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 69 15 69 32] InBounds0.in_bounds self p}
    
end
module C06KnightsTour_Impl1_CountDegree
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModelTy_Type as ShallowModelTy0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModel as ShallowModel3 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = isize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl4_Completed as Completed0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl4_Produces as Produces0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_ProducesTrans as ProducesTrans0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl4_ProducesRefl as ProducesRefl0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve2 with
    type t1 = isize,
    type t2 = isize,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Std1_Vec_Impl7_Resolve as Resolve1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Resolve0.resolve = Resolve2.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Vec_Impl3_Invariant as Invariant0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Alloc_Vec_Impl19_IntoIter_Interface as IntoIter1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    val Max0.mAX' = Max0.mAX'
  clone C06KnightsTour_Moves_Interface as Moves0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg count_degree [@cfg:stackify] [#"../06_knights_tour.rs" 70 4 70 45] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : usize
    requires {[#"../06_knights_tour.rs" 68 15 68 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 69 15 69 32] InBounds0.in_bounds self p}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : C06KnightsTour_Board_Type.t_board;
  var p_2 : C06KnightsTour_Point_Type.t_point;
  var count_5 : usize;
  var _6 : ();
  var iter_7 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var _8 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_9 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _11 : ();
  var produced_12 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option (isize, isize);
  var _21 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _22 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _23 : isize;
  var i_24 : (isize, isize);
  var _25 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var _27 : ();
  var m_28 : (isize, isize);
  var next_29 : C06KnightsTour_Point_Type.t_point;
  var _30 : C06KnightsTour_Point_Type.t_point;
  var _31 : (isize, isize);
  var _32 : (isize, isize);
  var _33 : bool;
  var _34 : C06KnightsTour_Board_Type.t_board;
  var _35 : C06KnightsTour_Point_Type.t_point;
  var _36 : ();
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    count_5 <- ([#"../06_knights_tour.rs" 71 24 71 25] (0 : usize));
    _8 <- ([#"../06_knights_tour.rs" 74 17 74 24] Moves0.moves ());
    goto BB1
  }
  BB1 {
    iter_7 <- ([#"../06_knights_tour.rs" 73 8 73 53] IntoIter1.into_iter _8);
    goto BB2
  }
  BB2 {
    _11 <- ();
    iter_old_9 <- ([#"../06_knights_tour.rs" 73 8 73 53] Ghost.new iter_7);
    goto BB3
  }
  BB3 {
    _15 <- ();
    produced_12 <- ([#"../06_knights_tour.rs" 73 8 73 53] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant type_invariant { [#"../06_knights_tour.rs" 73 8 73 53] Invariant0.invariant' iter_7 };
    invariant structural { [#"../06_knights_tour.rs" 73 8 73 53] Produces0.produces (Ghost.inner iter_old_9) (Ghost.inner produced_12) iter_7 };
    invariant count { [#"../06_knights_tour.rs" 73 27 73 51] UInt64.to_int count_5 <= Seq.length (Ghost.inner produced_12) };
    _22 <- borrow_mut iter_7;
    iter_7 <-  ^ _22;
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../06_knights_tour.rs" 73 8 73 53] Next0.next _21);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve _22 };
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB9 {
    _6 <- ();
    goto BB18
  }
  BB10 {
    assume { Resolve1.resolve iter_7 };
    absurd
  }
  BB11 {
    assume { Resolve2.resolve i_24 };
    i_24 <- Core_Option_Option_Type.some_0 _20;
    _27 <- ();
    _25 <- ([#"../06_knights_tour.rs" 73 8 73 53] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton i_24)));
    goto BB12
  }
  BB12 {
    produced_12 <- _25;
    _25 <- any Ghost.ghost_ty (Seq.seq (isize, isize));
    assume { Resolve2.resolve m_28 };
    m_28 <- i_24;
    assume { Resolve2.resolve i_24 };
    _30 <- p_2;
    _32 <- m_28;
    assume { Resolve2.resolve m_28 };
    _31 <- _32;
    next_29 <- ([#"../06_knights_tour.rs" 75 23 75 32] Mov0.mov _30 _31);
    goto BB13
  }
  BB13 {
    _34 <- self_1;
    _35 <- next_29;
    _33 <- ([#"../06_knights_tour.rs" 76 15 76 35] Available0.available _34 _35);
    goto BB14
  }
  BB14 {
    switch (_33)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    count_5 <- ([#"../06_knights_tour.rs" 77 16 77 26] count_5 + ([#"../06_knights_tour.rs" 77 25 77 26] (1 : usize)));
    _19 <- ();
    goto BB17
  }
  BB16 {
    _19 <- ();
    goto BB17
  }
  BB17 {
    goto BB7
  }
  BB18 {
    assume { Resolve1.resolve iter_7 };
    _0 <- count_5;
    return _0
  }
  
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module C06KnightsTour_Impl1_Set_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Stub as InBounds0
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val set [@cfg:stackify] [#"../06_knights_tour.rs" 87 4 87 41] (self : borrowed (C06KnightsTour_Board_Type.t_board)) (p : C06KnightsTour_Point_Type.t_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 83 15 83 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 84 15 84 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 85 14 85 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self) = C06KnightsTour_Board_Type.board_size ( * self) }
    
end
module C06KnightsTour_Impl1_Set
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.IntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = usize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds2 with
    type t = usize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
    type Output0.output = Output1.output,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output0.output,
    val Max0.mAX' = Max0.mAX'
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C06KnightsTour_Board_Type.t_board
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg set [@cfg:stackify] [#"../06_knights_tour.rs" 87 4 87 41] (self : borrowed (C06KnightsTour_Board_Type.t_board)) (p : C06KnightsTour_Point_Type.t_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 83 15 83 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 84 15 84 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 85 14 85 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self) = C06KnightsTour_Board_Type.board_size ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (C06KnightsTour_Board_Type.t_board);
  var p_2 : C06KnightsTour_Point_Type.t_point;
  var v_3 : usize;
  var _8 : usize;
  var _9 : borrowed usize;
  var _10 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _11 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _13 : usize;
  var _14 : isize;
  var _15 : usize;
  var _16 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    _8 <- v_3;
    _12 <- borrow_mut (C06KnightsTour_Board_Type.board_field ( * self_1));
    self_1 <- { self_1 with current = (let C06KnightsTour_Board_Type.C_Board a b =  * self_1 in C06KnightsTour_Board_Type.C_Board a ( ^ _12)) };
    assume { Resolve0.resolve self_1 };
    _14 <- C06KnightsTour_Point_Type.point_x p_2;
    _13 <- UIntSize.of_int (IntSize.to_int _14);
    _11 <- ([#"../06_knights_tour.rs" 88 8 88 32] IndexMut0.index_mut _12 _13);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    assume { Resolve1.resolve _11 };
    _16 <- C06KnightsTour_Point_Type.point_y p_2;
    _15 <- UIntSize.of_int (IntSize.to_int _16);
    _9 <- ([#"../06_knights_tour.rs" 88 8 88 46] IndexMut1.index_mut _10 _15);
    goto BB2
  }
  BB2 {
    _9 <- { _9 with current = _8 };
    _8 <- any usize;
    assume { Resolve2.resolve _9 };
    _0 <- ();
    return _0
  }
  
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl12_Invariant_Stub
  type t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl12_Invariant_Interface
  type t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl12_Invariant
  type t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t) =
    true
  val invariant' (self : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = invariant' self }
    
end
module Alloc_Vec_Impl20_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Stub as Invariant0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub as ShallowModel0 with
    type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel1.shallow_model (ShallowModel0.shallow_model result) = ShallowModel2.shallow_model self }
    ensures { Invariant0.invariant' result }
    
end
module Alloc_Vec_Impl20_IntoIter
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Interface as Invariant0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Interface as ShallowModel0 with
    type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel1.shallow_model (ShallowModel0.shallow_model result) = ShallowModel2.shallow_model self }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  type shallowModelTy  =
    seq t
end
module CreusotContracts_Std1_Slice_Impl13_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl13_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl13_Completed
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_ref_seq (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_ref_seq (self : seq t) : Seq.seq t
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function to_ref_seq (self : seq t) : Seq.seq t
  val to_ref_seq (self : seq t) : Seq.seq t
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl13_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl13_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl13_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module Core_Slice_Iter_Impl181_Item_Type
  type t
  use prelude.Borrow
  type item  =
    t
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl181_Item_Type as Item1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl13_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Stub as Invariant0 with
    type t = t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Slice_Iter_Impl181_Next
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl181_Item_Type as Item1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Interface as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl13_Completed_Interface as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl12_Invariant_Interface as Invariant0 with
    type t = t
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_Impl13_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl13_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl13_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl13_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl13_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl13_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module C06KnightsTour_Min_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  val min [@cfg:stackify] [#"../06_knights_tour.rs" 111 0 111 58] (v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../06_knights_tour.rs" 109 0 110 67] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result = Core_Option_Option_Type.C_Some r -> (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v) /\ Seq.get (ShallowModel0.shallow_model v) i = r) }
    
end
module C06KnightsTour_Min
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use prelude.Slice
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModelTy_Type as ShallowModelTy2 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl11_ShallowModel as ShallowModel2 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)
  clone CreusotContracts_Std1_Slice_Impl13_Completed as Completed0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl181_Item_Type as Item0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = seq (usize, C06KnightsTour_Point_Type.t_point),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_Produces as Produces0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl13_ProducesTrans as ProducesTrans0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ProducesRefl as ProducesRefl0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Slice_Impl12_Invariant as Invariant0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl20_IntoIter_Interface as IntoIter0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant'
  let rec cfg min [@cfg:stackify] [#"../06_knights_tour.rs" 111 0 111 58] (v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../06_knights_tour.rs" 109 0 110 67] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result = Core_Option_Option_Type.C_Some r -> (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v) /\ Seq.get (ShallowModel0.shallow_model v) i = r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var v_1 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var min_3 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _4 : ();
  var iter_5 : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point);
  var _6 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_7 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var _9 : ();
  var produced_10 : Ghost.ghost_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
  var _13 : ();
  var _17 : ();
  var _18 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _19 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var _20 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var _21 : isize;
  var i_22 : (usize, C06KnightsTour_Point_Type.t_point);
  var _23 : Ghost.ghost_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
  var _25 : ();
  var x_26 : (usize, C06KnightsTour_Point_Type.t_point);
  var _27 : ();
  var _28 : isize;
  var _29 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _30 : (usize, C06KnightsTour_Point_Type.t_point);
  var m_31 : (usize, C06KnightsTour_Point_Type.t_point);
  var _32 : bool;
  var _33 : usize;
  var _34 : usize;
  var _35 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _36 : (usize, C06KnightsTour_Point_Type.t_point);
  var _37 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    min_3 <- Core_Option_Option_Type.C_None;
    _6 <- v_1;
    iter_5 <- ([#"../06_knights_tour.rs" 113 4 114 79] IntoIter0.into_iter _6);
    goto BB1
  }
  BB1 {
    _9 <- ();
    iter_old_7 <- ([#"../06_knights_tour.rs" 113 4 114 79] Ghost.new iter_5);
    goto BB2
  }
  BB2 {
    _13 <- ();
    produced_10 <- ([#"../06_knights_tour.rs" 113 4 114 79] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant type_invariant { [#"../06_knights_tour.rs" 113 4 114 79] Invariant0.invariant' iter_5 };
    invariant structural { [#"../06_knights_tour.rs" 113 4 114 79] Produces0.produces (Ghost.inner iter_old_7) (Ghost.inner produced_10) iter_5 };
    invariant post { [#"../06_knights_tour.rs" 113 4 114 79] forall r : (usize, C06KnightsTour_Point_Type.t_point) . min_3 = Core_Option_Option_Type.C_Some r -> (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v_1) /\ Seq.get (ShallowModel0.shallow_model v_1) i = r) };
    _20 <- borrow_mut iter_5;
    iter_5 <-  ^ _20;
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _18 <- ([#"../06_knights_tour.rs" 113 4 114 79] Next0.next _19);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _20 };
    switch (_18)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB6 {
    _4 <- ();
    _0 <- min_3;
    return _0
  }
  BB7 {
    absurd
  }
  BB8 {
    i_22 <- Core_Option_Option_Type.some_0 _18;
    _25 <- ();
    _23 <- ([#"../06_knights_tour.rs" 113 4 114 79] Ghost.new (Seq.(++) (Ghost.inner produced_10) (Seq.singleton i_22)));
    goto BB9
  }
  BB9 {
    produced_10 <- _23;
    _23 <- any Ghost.ghost_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
    x_26 <- i_22;
    switch (min_3)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB10 {
    m_31 <- Core_Option_Option_Type.some_0 min_3;
    _33 <- (let (a, _) = x_26 in a);
    _34 <- (let (a, _) = m_31 in a);
    _32 <- ([#"../06_knights_tour.rs" 119 19 119 28] _33 < _34);
    switch (_32)
      | False -> goto BB14
      | True -> goto BB13
      end
  }
  BB11 {
    absurd
  }
  BB12 {
    _30 <- x_26;
    _29 <- Core_Option_Option_Type.C_Some _30;
    min_3 <- _29;
    _29 <- any Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
    _27 <- ();
    goto BB16
  }
  BB13 {
    _36 <- x_26;
    _35 <- Core_Option_Option_Type.C_Some _36;
    min_3 <- _35;
    _35 <- any Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
    _27 <- ();
    goto BB15
  }
  BB14 {
    _27 <- ();
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    _17 <- ();
    goto BB4
  }
  
end
module C06KnightsTour_DumbNonlinearArith_Stub
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
end
module C06KnightsTour_DumbNonlinearArith_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 129 11 129 22] UInt64.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 130 10 130 30] UInt64.to_int a * UInt64.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 128 0 128 8] ()
  val dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 129 11 129 22] UInt64.to_int a <= 1000}
    ensures { result = dumb_nonlinear_arith a }
    
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 129 11 129 22] UInt64.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 130 10 130 30] UInt64.to_int a * UInt64.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  let rec ghost function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 129 11 129 22] UInt64.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 130 10 130 30] UInt64.to_int a * UInt64.to_int a <= 1000000 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_knights_tour.rs" 128 0 128 8] ()
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Range_Impl3_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl3_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Interface as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new [@cfg:stackify] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new [@cfg:stackify] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module C06KnightsTour_KnightsTour_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  val knights_tour [@cfg:stackify] [#"../06_knights_tour.rs" 136 0 136 69] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)
    requires {[#"../06_knights_tour.rs" 133 11 133 37] 0 < UInt64.to_int size /\ UInt64.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 134 11 134 19] x < size}
    requires {[#"../06_knights_tour.rs" 135 11 135 19] y < size}
    
end
module C06KnightsTour_KnightsTour
  use mach.int.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use mach.int.UInt64
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve8 with
    type t = C06KnightsTour_Point_Type.t_point
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve7 with
    type t = usize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModelTy_Type as ShallowModelTy1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_ShallowModel as ShallowModel4 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve6 with
    type t = isize
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve5 with
    type t1 = usize,
    type t2 = C06KnightsTour_Point_Type.t_point,
    predicate Resolve0.resolve = Resolve7.resolve,
    predicate Resolve1.resolve = Resolve8.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl4_Completed as Completed1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl4_Produces as Produces1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_ProducesTrans as ProducesTrans1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl4_ProducesRefl as ProducesRefl1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Item_Type as Item0 with
    type a = usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant0 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans0 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl0 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06KnightsTour_Min_Interface as Min0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone C06KnightsTour_Impl1_CountDegree_Interface as CountDegree0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve4 with
    type t1 = isize,
    type t2 = isize,
    predicate Resolve0.resolve = Resolve6.resolve,
    predicate Resolve1.resolve = Resolve6.resolve
  clone CreusotContracts_Std1_Vec_Impl7_Resolve as Resolve3 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Vec_Impl6_Resolve as Resolve2 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve5.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl3_Invariant as Invariant1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item1.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone Alloc_Vec_Impl19_IntoIter_Interface as IntoIter2 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    val Max0.mAX' = Max0.mAX'
  clone C06KnightsTour_Moves_Interface as Moves0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl0_New_Interface as New1 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter1 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone C06KnightsTour_DumbNonlinearArith as DumbNonlinearArith0 with
    axiom .
  clone C06KnightsTour_Impl1_Set_Interface as Set0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_New_Interface as New0 with
    predicate Wf0.wf = Wf0.wf
  let rec cfg knights_tour [@cfg:stackify] [#"../06_knights_tour.rs" 136 0 136 69] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)
    requires {[#"../06_knights_tour.rs" 133 11 133 37] 0 < UInt64.to_int size /\ UInt64.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 134 11 134 19] x < size}
    requires {[#"../06_knights_tour.rs" 135 11 135 19] y < size}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board);
  var size_1 : usize;
  var x_2 : usize;
  var y_3 : usize;
  var board_7 : C06KnightsTour_Board_Type.t_board;
  var _8 : usize;
  var p_9 : C06KnightsTour_Point_Type.t_point;
  var _10 : isize;
  var _11 : usize;
  var _12 : isize;
  var _13 : usize;
  var _14 : ();
  var _15 : borrowed (C06KnightsTour_Board_Type.t_board);
  var _16 : C06KnightsTour_Point_Type.t_point;
  var _17 : Ghost.ghost_ty ();
  var _20 : ();
  var _21 : ();
  var iter_22 : Core_Ops_Range_Range_Type.t_range usize;
  var _23 : Core_Ops_Range_Range_Type.t_range usize;
  var _24 : usize;
  var _25 : usize;
  var _26 : usize;
  var iter_old_27 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var _29 : ();
  var produced_30 : Ghost.ghost_ty (Seq.seq usize);
  var _33 : ();
  var _39 : ();
  var _40 : Core_Option_Option_Type.t_option usize;
  var _41 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _42 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _43 : isize;
  var i_44 : usize;
  var _45 : Ghost.ghost_ty (Seq.seq usize);
  var _47 : ();
  var step_48 : usize;
  var candidates_49 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var _50 : ();
  var iter_51 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var _52 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_53 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _55 : ();
  var produced_56 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var _59 : ();
  var _63 : Core_Option_Option_Type.t_option (isize, isize);
  var _64 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _65 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _66 : isize;
  var i_67 : (isize, isize);
  var _68 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var _70 : ();
  var m_71 : (isize, isize);
  var adj_72 : C06KnightsTour_Point_Type.t_point;
  var _73 : C06KnightsTour_Point_Type.t_point;
  var _74 : (isize, isize);
  var _75 : (isize, isize);
  var _76 : bool;
  var _77 : C06KnightsTour_Board_Type.t_board;
  var _78 : C06KnightsTour_Point_Type.t_point;
  var degree_79 : usize;
  var _80 : C06KnightsTour_Board_Type.t_board;
  var _81 : C06KnightsTour_Point_Type.t_point;
  var _82 : ();
  var _83 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global));
  var _84 : (usize, C06KnightsTour_Point_Type.t_point);
  var _85 : usize;
  var _86 : C06KnightsTour_Point_Type.t_point;
  var _87 : ();
  var _88 : ();
  var _89 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _90 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var _91 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var _92 : isize;
  var adj_93 : C06KnightsTour_Point_Type.t_point;
  var _94 : C06KnightsTour_Point_Type.t_point;
  var _95 : ();
  var _96 : ();
  var _97 : borrowed (C06KnightsTour_Board_Type.t_board);
  var _98 : C06KnightsTour_Point_Type.t_point;
  var _99 : usize;
  var _100 : ();
  var _101 : C06KnightsTour_Board_Type.t_board;
  {
    size_1 <- size;
    x_2 <- x;
    y_3 <- y;
    goto BB0
  }
  BB0 {
    _8 <- size_1;
    board_7 <- ([#"../06_knights_tour.rs" 137 20 137 36] New0.new _8);
    goto BB1
  }
  BB1 {
    _11 <- x_2;
    _10 <- IntSize.of_int (UIntSize.to_int _11);
    _13 <- y_3;
    _12 <- IntSize.of_int (UIntSize.to_int _13);
    p_9 <- C06KnightsTour_Point_Type.C_Point _10 _12;
    _15 <- borrow_mut board_7;
    board_7 <-  ^ _15;
    _16 <- p_9;
    _14 <- ([#"../06_knights_tour.rs" 139 4 139 19] Set0.set _15 _16 ([#"../06_knights_tour.rs" 139 17 139 18] (1 : usize)));
    goto BB2
  }
  BB2 {
    _20 <- ();
    _17 <- ([#"../06_knights_tour.rs" 141 4 141 41] Ghost.new (DumbNonlinearArith0.dumb_nonlinear_arith size_1));
    goto BB3
  }
  BB3 {
    _25 <- size_1;
    _26 <- size_1;
    _24 <- ([#"../06_knights_tour.rs" 145 19 145 32] _25 * _26);
    _23 <- Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 145 16 145 17] (2 : usize)) _24;
    iter_22 <- ([#"../06_knights_tour.rs" 142 4 142 39] IntoIter1.into_iter _23);
    goto BB4
  }
  BB4 {
    _29 <- ();
    iter_old_27 <- ([#"../06_knights_tour.rs" 142 4 142 39] Ghost.new iter_22);
    goto BB5
  }
  BB5 {
    _33 <- ();
    produced_30 <- ([#"../06_knights_tour.rs" 142 4 142 39] Ghost.new (Seq.empty ));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant type_invariant { [#"../06_knights_tour.rs" 142 4 142 39] Invariant0.invariant' iter_22 };
    invariant structural { [#"../06_knights_tour.rs" 142 4 142 39] Produces0.produces (Ghost.inner iter_old_27) (Ghost.inner produced_30) iter_22 };
    invariant b { [#"../06_knights_tour.rs" 142 19 142 37] C06KnightsTour_Board_Type.board_size board_7 = size_1 };
    invariant b { [#"../06_knights_tour.rs" 143 19 143 29] Wf0.wf board_7 };
    invariant p { [#"../06_knights_tour.rs" 144 19 144 37] InBounds0.in_bounds board_7 p_9 };
    _42 <- borrow_mut iter_22;
    iter_22 <-  ^ _42;
    _41 <- borrow_mut ( * _42);
    _42 <- { _42 with current = ( ^ _41) };
    _40 <- ([#"../06_knights_tour.rs" 142 4 142 39] Next0.next _41);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _42 };
    switch (_40)
      | Core_Option_Option_Type.C_None -> goto BB11
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB11 {
    _21 <- ();
    _101 <- board_7;
    board_7 <- any C06KnightsTour_Board_Type.t_board;
    _0 <- Core_Option_Option_Type.C_Some _101;
    goto BB43
  }
  BB12 {
    absurd
  }
  BB13 {
    i_44 <- Core_Option_Option_Type.some_0 _40;
    _47 <- ();
    _45 <- ([#"../06_knights_tour.rs" 142 4 142 39] Ghost.new (Seq.(++) (Ghost.inner produced_30) (Seq.singleton i_44)));
    goto BB14
  }
  BB14 {
    produced_30 <- _45;
    _45 <- any Ghost.ghost_ty (Seq.seq usize);
    step_48 <- i_44;
    candidates_49 <- ([#"../06_knights_tour.rs" 147 50 147 60] New1.new ());
    goto BB15
  }
  BB15 {
    _52 <- ([#"../06_knights_tour.rs" 150 17 150 24] Moves0.moves ());
    goto BB16
  }
  BB16 {
    iter_51 <- ([#"../06_knights_tour.rs" 148 8 149 57] IntoIter2.into_iter _52);
    goto BB17
  }
  BB17 {
    _55 <- ();
    iter_old_53 <- ([#"../06_knights_tour.rs" 148 8 149 57] Ghost.new iter_51);
    goto BB18
  }
  BB18 {
    _59 <- ();
    produced_56 <- ([#"../06_knights_tour.rs" 148 8 149 57] Ghost.new (Seq.empty ));
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    invariant type_invariant { [#"../06_knights_tour.rs" 148 8 149 57] Invariant1.invariant' iter_51 };
    invariant structural { [#"../06_knights_tour.rs" 148 8 149 57] Produces1.produces (Ghost.inner iter_old_53) (Ghost.inner produced_56) iter_51 };
    invariant c { [#"../06_knights_tour.rs" 148 8 149 57] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model candidates_49) -> InBounds0.in_bounds board_7 (let (_, a) = Seq.get (ShallowModel0.shallow_model candidates_49) i in a) };
    _65 <- borrow_mut iter_51;
    iter_51 <-  ^ _65;
    _64 <- borrow_mut ( * _65);
    _65 <- { _65 with current = ( ^ _64) };
    _63 <- ([#"../06_knights_tour.rs" 148 8 149 57] Next1.next _64);
    goto BB24
  }
  BB24 {
    assume { Resolve1.resolve _65 };
    switch (_63)
      | Core_Option_Option_Type.C_None -> goto BB25
      | Core_Option_Option_Type.C_Some _ -> goto BB27
      end
  }
  BB25 {
    _50 <- ();
    goto BB36
  }
  BB26 {
    assume { Resolve2.resolve candidates_49 };
    assume { Resolve3.resolve iter_51 };
    absurd
  }
  BB27 {
    assume { Resolve4.resolve i_67 };
    i_67 <- Core_Option_Option_Type.some_0 _63;
    _70 <- ();
    _68 <- ([#"../06_knights_tour.rs" 148 8 149 57] Ghost.new (Seq.(++) (Ghost.inner produced_56) (Seq.singleton i_67)));
    goto BB28
  }
  BB28 {
    produced_56 <- _68;
    _68 <- any Ghost.ghost_ty (Seq.seq (isize, isize));
    assume { Resolve4.resolve m_71 };
    m_71 <- i_67;
    assume { Resolve4.resolve i_67 };
    _73 <- p_9;
    _75 <- m_71;
    assume { Resolve4.resolve m_71 };
    _74 <- _75;
    adj_72 <- ([#"../06_knights_tour.rs" 151 22 151 31] Mov0.mov _73 _74);
    goto BB29
  }
  BB29 {
    _77 <- board_7;
    _78 <- adj_72;
    _76 <- ([#"../06_knights_tour.rs" 152 15 152 35] Available0.available _77 _78);
    goto BB30
  }
  BB30 {
    switch (_76)
      | False -> goto BB34
      | True -> goto BB31
      end
  }
  BB31 {
    _80 <- board_7;
    _81 <- adj_72;
    degree_79 <- ([#"../06_knights_tour.rs" 153 29 153 52] CountDegree0.count_degree _80 _81);
    goto BB32
  }
  BB32 {
    _83 <- borrow_mut candidates_49;
    candidates_49 <-  ^ _83;
    _85 <- degree_79;
    _86 <- adj_72;
    _84 <- (_85, _86);
    _82 <- ([#"../06_knights_tour.rs" 154 16 154 46] Push0.push _83 _84);
    goto BB33
  }
  BB33 {
    _39 <- ();
    goto BB35
  }
  BB34 {
    _39 <- ();
    goto BB35
  }
  BB35 {
    goto BB23
  }
  BB36 {
    assume { Resolve3.resolve iter_51 };
    _91 <- candidates_49;
    _90 <- _91;
    _89 <- ([#"../06_knights_tour.rs" 157 14 157 30] Min0.min _90);
    goto BB37
  }
  BB37 {
    switch (_89)
      | Core_Option_Option_Type.C_None -> goto BB38
      | Core_Option_Option_Type.C_Some _ -> goto BB40
      end
  }
  BB38 {
    _0 <- Core_Option_Option_Type.C_None;
    goto BB45
  }
  BB39 {
    assume { Resolve2.resolve candidates_49 };
    absurd
  }
  BB40 {
    adj_93 <- (let (_, a) = Core_Option_Option_Type.some_0 _89 in a);
    _94 <- adj_93;
    p_9 <- _94;
    _94 <- any C06KnightsTour_Point_Type.t_point;
    _88 <- ();
    _97 <- borrow_mut board_7;
    board_7 <-  ^ _97;
    _98 <- p_9;
    _99 <- step_48;
    _96 <- ([#"../06_knights_tour.rs" 161 8 161 26] Set0.set _97 _98 _99);
    goto BB41
  }
  BB41 {
    _39 <- ();
    goto BB42
  }
  BB42 {
    assume { Resolve2.resolve candidates_49 };
    goto BB9
  }
  BB43 {
    goto BB44
  }
  BB44 {
    goto BB47
  }
  BB45 {
    assume { Resolve2.resolve candidates_49 };
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    return _0
  }
  
end
module C06KnightsTour_Impl2
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module C06KnightsTour_Impl3
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone C06KnightsTour_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = C06KnightsTour_Point_Type.t_point,
    val clone' = Clone0.clone'
end
