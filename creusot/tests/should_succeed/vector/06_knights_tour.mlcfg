module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type c06knightstour_point  =
    | C06KnightsTour_Point isize isize
    
  let function c06knightstour_point_Point_y (self : c06knightstour_point) : isize =
    match (self) with
      | C06KnightsTour_Point _ a -> a
      end
  let function c06knightstour_point_Point_x (self : c06knightstour_point) : isize =
    match (self) with
      | C06KnightsTour_Point a _ -> a
      end
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type c06knightstour_board  =
    | C06KnightsTour_Board usize (alloc_vec_vec (alloc_vec_vec usize (alloc_alloc_global)) (alloc_alloc_global))
    
  let function c06knightstour_board_Board_size (self : c06knightstour_board) : usize =
    match (self) with
      | C06KnightsTour_Board a _ -> a
      end
  let function c06knightstour_board_Board_field (self : c06knightstour_board) : alloc_vec_vec (alloc_vec_vec usize (alloc_alloc_global)) (alloc_alloc_global)
    
   =
    match (self) with
      | C06KnightsTour_Board _ a -> a
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 9223372036854775807
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  =
    Output0.output
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module CreusotContracts_Std1_Slice_Impl3
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue1 with type self = usize,
  type t = seq t, predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds1 with type self = usize,
  type t = seq t, predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . Seq.length (model self) <= 9223372036854775807 && model self = Prelude.id self
end
module CreusotContracts_Std1_Slice_Impl0
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = seq t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module C06KnightsTour_Min_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val min [@cfg:stackify] (v : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global)) : Type.core_option_option (usize, Type.c06knightstour_point)
    
end
module C06KnightsTour_Min
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = (usize, Type.c06knightstour_point)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (usize, Type.c06knightstour_point)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (usize, Type.c06knightstour_point)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = (usize, Type.c06knightstour_point)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, axiom .
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, Type.c06knightstour_point), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  let rec cfg min [@cfg:stackify] [#"../06_knights_tour.rs" 118 0 58] (v : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global)) : Type.core_option_option (usize, Type.c06knightstour_point)
    
   =
  var _0 : Type.core_option_option (usize, Type.c06knightstour_point);
  var v_1 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var i_2 : usize;
  var min_3 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _10 : ();
  var _11 : isize;
  var _12 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _13 : (usize, Type.c06knightstour_point);
  var _14 : (usize, Type.c06knightstour_point);
  var _15 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _16 : usize;
  var m_17 : (usize, Type.c06knightstour_point);
  var _18 : bool;
  var _19 : usize;
  var _20 : (usize, Type.c06knightstour_point);
  var _21 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _22 : usize;
  var _23 : usize;
  var _24 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _25 : (usize, Type.c06knightstour_point);
  var _26 : (usize, Type.c06knightstour_point);
  var _27 : (usize, Type.c06knightstour_point);
  var _28 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    min_3 <- Type.Core_Option_Option_None;
    goto BB1
  }
  BB1 {
    _7 <- i_2;
    _9 <- v_1;
    _8 <- ([#"../06_knights_tour.rs" 121 14 21] Len0.len _9);
    goto BB2
  }
  BB2 {
    _6 <- ([#"../06_knights_tour.rs" 121 10 21] _7 < _8);
    switch (_6)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    switch (min_3)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB4 {
    m_17 <- Type.core_option_option_Some_0 min_3;
    _21 <- v_1;
    _22 <- i_2;
    _20 <- ([#"../06_knights_tour.rs" 125 19 23] Index0.index _21 _22);
    goto BB8
  }
  BB5 {
    absurd
  }
  BB6 {
    _15 <- v_1;
    _16 <- i_2;
    _14 <- ([#"../06_knights_tour.rs" 123 32 36] Index0.index _15 _16);
    goto BB7
  }
  BB7 {
    _13 <- _14;
    _12 <- Type.Core_Option_Option_Some _13;
    min_3 <- _12;
    _10 <- ();
    goto BB13
  }
  BB8 {
    _19 <- (let (a, _) = _20 in a);
    _23 <- (let (a, _) = m_17 in a);
    _18 <- ([#"../06_knights_tour.rs" 125 19 31] _19 < _23);
    switch (_18)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _28 <- v_1;
    _29 <- i_2;
    _27 <- ([#"../06_knights_tour.rs" 126 32 36] Index0.index _28 _29);
    goto BB10
  }
  BB10 {
    _26 <- _27;
    _25 <- _26;
    _24 <- Type.Core_Option_Option_Some _25;
    min_3 <- _24;
    _10 <- ();
    goto BB12
  }
  BB11 {
    _10 <- ();
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    i_2 <- ([#"../06_knights_tour.rs" 130 8 14] i_2 + (1 : usize));
    _5 <- ();
    goto BB1
  }
  BB14 {
    _4 <- ();
    _0 <- min_3;
    return _0
  }
  
end
module C06KnightsTour_Impl3_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.c06knightstour_point) : Type.c06knightstour_point
end
module C06KnightsTour_Impl3_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] [#"../06_knights_tour.rs" 5 15 20] (self : Type.c06knightstour_point) : Type.c06knightstour_point
    
   =
  var _0 : Type.c06knightstour_point;
  var self_1 : Type.c06knightstour_point;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module C06KnightsTour_Impl0_Mov_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.Prelude
  use Type
  val mov [@cfg:stackify] (self : Type.c06knightstour_point) (p : (isize, isize)) : Type.c06knightstour_point
    requires {[#"../06_knights_tour.rs" 16 4 52] - 10000 <= Int64.to_int (let (_, a) = p in a) && Int64.to_int (let (_, a) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 4 52] - 10000 <= Int64.to_int (let (a, _) = p in a) && Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 4 58] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_y self) && Int64.to_int (Type.c06knightstour_point_Point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 4 58] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_x self) && Int64.to_int (Type.c06knightstour_point_Point_x self) <= 10000}
    ensures { [#"../06_knights_tour.rs" 18 4 49] Int64.to_int (Type.c06knightstour_point_Point_y result) = Int64.to_int (Type.c06knightstour_point_Point_y self) + Int64.to_int (let (_, a) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 4 49] Int64.to_int (Type.c06knightstour_point_Point_x result) = Int64.to_int (Type.c06knightstour_point_Point_x self) + Int64.to_int (let (a, _) = p in a) }
    
end
module C06KnightsTour_Impl0_Mov
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.Prelude
  use Type
  let rec cfg mov [@cfg:stackify] [#"../06_knights_tour.rs" 19 4 45] (self : Type.c06knightstour_point) (p : (isize, isize)) : Type.c06knightstour_point
    requires {[#"../06_knights_tour.rs" 16 4 52] - 10000 <= Int64.to_int (let (_, a) = p in a) && Int64.to_int (let (_, a) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 4 52] - 10000 <= Int64.to_int (let (a, _) = p in a) && Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 4 58] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_y self) && Int64.to_int (Type.c06knightstour_point_Point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 4 58] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_x self) && Int64.to_int (Type.c06knightstour_point_Point_x self) <= 10000}
    ensures { [#"../06_knights_tour.rs" 18 4 49] Int64.to_int (Type.c06knightstour_point_Point_y result) = Int64.to_int (Type.c06knightstour_point_Point_y self) + Int64.to_int (let (_, a) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 4 49] Int64.to_int (Type.c06knightstour_point_Point_x result) = Int64.to_int (Type.c06knightstour_point_Point_x self) + Int64.to_int (let (a, _) = p in a) }
    
   =
  var _0 : Type.c06knightstour_point;
  var self_1 : Type.c06knightstour_point;
  var p_2 : (isize, isize);
  var _3 : isize;
  var _4 : isize;
  var _5 : isize;
  var _6 : isize;
  var _7 : isize;
  var _8 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _4 <- Type.c06knightstour_point_Point_x self_1;
    _5 <- (let (a, _) = p_2 in a);
    _3 <- ([#"../06_knights_tour.rs" 20 18 32] _4 + _5);
    _7 <- Type.c06knightstour_point_Point_y self_1;
    _8 <- (let (_, a) = p_2 in a);
    _6 <- ([#"../06_knights_tour.rs" 20 37 51] _7 + _8);
    _0 <- Type.C06KnightsTour_Point _3 _6;
    return _0
  }
  
end
module C06KnightsTour_Impl1_Wf_Interface
  use Type
  predicate wf (self : Type.c06knightstour_board)
end
module C06KnightsTour_Impl1_Wf
  use Type
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  predicate wf [#"../06_knights_tour.rs" 31 4 23] (self : Type.c06knightstour_board) =
    [#"../06_knights_tour.rs" 31 4 23] UInt64.to_int (Type.c06knightstour_board_Board_size self) <= 1000 && Seq.length (Model0.model (Type.c06knightstour_board_Board_field self)) = UInt64.to_int (Type.c06knightstour_board_Board_size self) && (forall i : (int) . 0 <= i && i < UInt64.to_int (Type.c06knightstour_board_Board_size self) -> Seq.length (Model1.model (Seq.get (Model0.model (Type.c06knightstour_board_Board_field self)) i)) = UInt64.to_int (Type.c06knightstour_board_Board_size self))
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module C06KnightsTour_Impl1_New_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val new [@cfg:stackify] (size : usize) : Type.c06knightstour_board
    requires {[#"../06_knights_tour.rs" 38 4 30] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 40 4 27] Wf0.wf result }
    ensures { [#"../06_knights_tour.rs" 39 4 35] Type.c06knightstour_board_Board_size result = size }
    
end
module C06KnightsTour_Impl1_New
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] [#"../06_knights_tour.rs" 41 4 31] (size : usize) : Type.c06knightstour_board
    requires {[#"../06_knights_tour.rs" 38 4 30] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 40 4 27] Wf0.wf result }
    ensures { [#"../06_knights_tour.rs" 39 4 35] Type.c06knightstour_board_Board_size result = size }
    
   =
  var _0 : Type.c06knightstour_board;
  var size_1 : usize;
  var rows_2 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : ();
  var _11 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _12 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _3 <- size_1;
    rows_2 <- ([#"../06_knights_tour.rs" 42 36 60] WithCapacity0.with_capacity _3);
    goto BB1
  }
  BB1 {
    i_4 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant i_size { [#"../06_knights_tour.rs" 45 8 39] i_4 <= size_1 };
    invariant rows { [#"../06_knights_tour.rs" 46 8 81] forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> Seq.length (Model1.model (Seq.get (Model0.model rows_2) j)) = UInt64.to_int size_1 };
    invariant row_len { [#"../06_knights_tour.rs" 48 8 51] Seq.length (Model0.model rows_2) = UInt64.to_int i_4 };
    _8 <- i_4;
    _9 <- size_1;
    _7 <- ([#"../06_knights_tour.rs" 49 14 22] _8 < _9);
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _11 <- borrow_mut rows_2;
    rows_2 <-  ^ _11;
    _13 <- size_1;
    _12 <- ([#"../06_knights_tour.rs" 50 22 45] FromElem0.from_elem (0 : usize) _13);
    goto BB6
  }
  BB6 {
    _10 <- ([#"../06_knights_tour.rs" 50 12 46] Push0.push _11 _12);
    goto BB7
  }
  BB7 {
    i_4 <- ([#"../06_knights_tour.rs" 51 12 18] i_4 + (1 : usize));
    _6 <- ();
    goto BB4
  }
  BB8 {
    _5 <- ();
    _17 <- size_1;
    assume { Resolve0.resolve _18 };
    _18 <- rows_2;
    _0 <- Type.C06KnightsTour_Board _17 _18;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C06KnightsTour_Impl1_InBounds_Interface
  use Type
  predicate in_bounds (self : Type.c06knightstour_board) (p : Type.c06knightstour_point)
end
module C06KnightsTour_Impl1_InBounds
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt64
  predicate in_bounds [#"../06_knights_tour.rs" 68 4 40] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point)
    
   =
    [#"../06_knights_tour.rs" 68 4 40] 0 <= Int64.to_int (Type.c06knightstour_point_Point_x p) && Int64.to_int (Type.c06knightstour_point_Point_x p) < UInt64.to_int (Type.c06knightstour_board_Board_size self) && 0 <= Int64.to_int (Type.c06knightstour_point_Point_y p) && Int64.to_int (Type.c06knightstour_point_Point_y p) < UInt64.to_int (Type.c06knightstour_board_Board_size self)
end
module C06KnightsTour_Impl1_Available_Interface
  use prelude.Prelude
  use Type
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val available [@cfg:stackify] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : bool
    requires {[#"../06_knights_tour.rs" 57 4 26] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 58 4 44] result -> InBounds0.in_bounds self p }
    
end
module C06KnightsTour_Impl1_Available
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg available [@cfg:stackify] [#"../06_knights_tour.rs" 59 4 41] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : bool
    requires {[#"../06_knights_tour.rs" 57 4 26] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 58 4 44] result -> InBounds0.in_bounds self p }
    
   =
  var _0 : bool;
  var self_1 : Type.c06knightstour_board;
  var p_2 : Type.c06knightstour_point;
  var _3 : bool;
  var _4 : bool;
  var _5 : bool;
  var _6 : bool;
  var _7 : isize;
  var _8 : bool;
  var _9 : usize;
  var _10 : isize;
  var _11 : usize;
  var _12 : bool;
  var _13 : isize;
  var _14 : bool;
  var _15 : usize;
  var _16 : isize;
  var _17 : usize;
  var _18 : bool;
  var _19 : usize;
  var _20 : usize;
  var _21 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _22 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _23 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : isize;
  var _26 : usize;
  var _27 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _7 <- Type.c06knightstour_point_Point_x p_2;
    _6 <- ([#"../06_knights_tour.rs" 60 8 16] (0 : isize) <= _7);
    switch (_6)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB1 {
    _0 <- false;
    goto BB3
  }
  BB2 {
    _23 <- Type.c06knightstour_board_Board_field self_1;
    _25 <- Type.c06knightstour_point_Point_x p_2;
    _24 <- UInt64.of_int (Int64.to_int _25);
    _22 <- ([#"../06_knights_tour.rs" 64 15 39] Index0.index _23 _24);
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _3 <- false;
    goto BB6
  }
  BB5 {
    _16 <- Type.c06knightstour_point_Point_y p_2;
    _15 <- UInt64.of_int (Int64.to_int _16);
    _17 <- Type.c06knightstour_board_Board_size self_1;
    _14 <- ([#"../06_knights_tour.rs" 63 15 41] _15 < _17);
    _3 <- _14;
    goto BB6
  }
  BB6 {
    switch (_3)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB7 {
    _4 <- false;
    goto BB9
  }
  BB8 {
    _13 <- Type.c06knightstour_point_Point_y p_2;
    _12 <- ([#"../06_knights_tour.rs" 62 15 23] (0 : isize) <= _13);
    _4 <- _12;
    goto BB9
  }
  BB9 {
    switch (_4)
      | False -> goto BB4
      | _ -> goto BB5
      end
  }
  BB10 {
    _5 <- false;
    goto BB12
  }
  BB11 {
    _10 <- Type.c06knightstour_point_Point_x p_2;
    _9 <- UInt64.of_int (Int64.to_int _10);
    _11 <- Type.c06knightstour_board_Board_size self_1;
    _8 <- ([#"../06_knights_tour.rs" 61 15 41] _9 < _11);
    _5 <- _8;
    goto BB12
  }
  BB12 {
    switch (_5)
      | False -> goto BB7
      | _ -> goto BB8
      end
  }
  BB13 {
    _21 <- _22;
    _27 <- Type.c06knightstour_point_Point_y p_2;
    _26 <- UInt64.of_int (Int64.to_int _27);
    _20 <- ([#"../06_knights_tour.rs" 64 15 53] Index1.index _21 _26);
    goto BB14
  }
  BB14 {
    _19 <- _20;
    _18 <- ([#"../06_knights_tour.rs" 64 15 58] _19 = (0 : usize));
    _0 <- _18;
    goto BB3
  }
  
end
module C06KnightsTour_Moves_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (isize, isize),
  type a = Type.alloc_alloc_global, axiom .
  val moves [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global)
    ensures { [#"../06_knights_tour.rs" 103 0 149] forall i : (int) . 0 <= i && i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) <= 2 && - 2 <= Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) <= 2 }
    ensures { [#"../06_knights_tour.rs" 102 0 32] Seq.length (Model0.model result) = 8 }
    
end
module C06KnightsTour_Moves
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  axiom .
  val moves [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global)
    ensures { [#"../06_knights_tour.rs" 103 0 149] forall i : (int) . 0 <= i && i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) <= 2 && - 2 <= Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) <= 2 }
    ensures { [#"../06_knights_tour.rs" 102 0 32] Seq.length (Model0.model result) = 8 }
    
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = (t1, t2),
  predicate resolve = Resolve0.resolve
end
module C06KnightsTour_Impl1_CountDegree_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  val count_degree [@cfg:stackify] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : usize
    requires {[#"../06_knights_tour.rs" 76 4 34] InBounds0.in_bounds self p}
    requires {[#"../06_knights_tour.rs" 75 4 26] Wf0.wf self}
    
end
module C06KnightsTour_Impl1_CountDegree
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = isize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve1 with type t1 = isize, type t2 = isize,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve2.resolve
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = (isize, isize)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = (isize, isize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  axiom .
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (isize, isize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = (isize, isize),
  function Model0.model = Model2.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone C06KnightsTour_Moves_Interface as Moves0 with function Model0.model = Model2.model
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  let rec cfg count_degree [@cfg:stackify] [#"../06_knights_tour.rs" 77 4 45] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : usize
    requires {[#"../06_knights_tour.rs" 76 4 34] InBounds0.in_bounds self p}
    requires {[#"../06_knights_tour.rs" 75 4 26] Wf0.wf self}
    
   =
  var _0 : usize;
  var self_1 : Type.c06knightstour_board;
  var p_2 : Type.c06knightstour_point;
  var count_3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _11 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var next_12 : Type.c06knightstour_point;
  var _13 : Type.c06knightstour_point;
  var _14 : (isize, isize);
  var _15 : (isize, isize);
  var _16 : (isize, isize);
  var _17 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _18 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _19 : usize;
  var _20 : ();
  var _21 : bool;
  var _22 : Type.c06knightstour_board;
  var _23 : Type.c06knightstour_point;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant count { [#"../06_knights_tour.rs" 81 8 39] count_3 <= i_4 };
    _8 <- i_4;
    _11 <- ([#"../06_knights_tour.rs" 82 18 25] Moves0.moves ());
    goto BB2
  }
  BB2 {
    _10 <- _11;
    _9 <- ([#"../06_knights_tour.rs" 82 18 31] Len0.len _10);
    goto BB3
  }
  BB3 {
    _7 <- ([#"../06_knights_tour.rs" 82 14 31] _8 < _9);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _11 };
    switch (_7)
      | False -> goto BB14
      | _ -> goto BB5
      end
  }
  BB5 {
    _13 <- p_2;
    _18 <- ([#"../06_knights_tour.rs" 83 30 37] Moves0.moves ());
    goto BB6
  }
  BB6 {
    _17 <- _18;
    _19 <- i_4;
    _16 <- ([#"../06_knights_tour.rs" 83 30 40] Index0.index _17 _19);
    goto BB7
  }
  BB7 {
    _15 <- _16;
    _14 <- _15;
    next_12 <- ([#"../06_knights_tour.rs" 83 23 41] Mov0.mov _13 _14);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve _18 };
    _22 <- self_1;
    _23 <- next_12;
    _21 <- ([#"../06_knights_tour.rs" 84 15 35] Available0.available _22 _23);
    goto BB10
  }
  BB10 {
    switch (_21)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    count_3 <- ([#"../06_knights_tour.rs" 85 16 26] count_3 + (1 : usize));
    _20 <- ();
    goto BB13
  }
  BB12 {
    _20 <- ();
    goto BB13
  }
  BB13 {
    i_4 <- ([#"../06_knights_tour.rs" 87 12 18] i_4 + (1 : usize));
    _6 <- ();
    goto BB1
  }
  BB14 {
    _5 <- ();
    _0 <- count_3;
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module C06KnightsTour_Impl1_Set_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  val set [@cfg:stackify] (self : borrowed (Type.c06knightstour_board)) (p : Type.c06knightstour_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 93 4 34] InBounds0.in_bounds ( * self) p}
    requires {[#"../06_knights_tour.rs" 92 4 26] Wf0.wf ( * self)}
    ensures { [#"../06_knights_tour.rs" 95 4 44] Type.c06knightstour_board_Board_size ( ^ self) = Type.c06knightstour_board_Board_size ( * self) }
    ensures { [#"../06_knights_tour.rs" 94 4 28] Wf0.wf ( ^ self) }
    
end
module C06KnightsTour_Impl1_Set
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c06knightstour_board
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  let rec cfg set [@cfg:stackify] [#"../06_knights_tour.rs" 96 4 41] (self : borrowed (Type.c06knightstour_board)) (p : Type.c06knightstour_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 93 4 34] InBounds0.in_bounds ( * self) p}
    requires {[#"../06_knights_tour.rs" 92 4 26] Wf0.wf ( * self)}
    ensures { [#"../06_knights_tour.rs" 95 4 44] Type.c06knightstour_board_Board_size ( ^ self) = Type.c06knightstour_board_Board_size ( * self) }
    ensures { [#"../06_knights_tour.rs" 94 4 28] Wf0.wf ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.c06knightstour_board);
  var p_2 : Type.c06knightstour_point;
  var v_3 : usize;
  var _4 : usize;
  var _5 : borrowed usize;
  var _6 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _7 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _8 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _9 : usize;
  var _10 : isize;
  var _11 : usize;
  var _12 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_3;
    _8 <- borrow_mut (Type.c06knightstour_board_Board_field ( * self_1));
    self_1 <- { self_1 with current = (let Type.C06KnightsTour_Board a b =  * self_1 in Type.C06KnightsTour_Board a ( ^ _8)) };
    assume { Resolve0.resolve self_1 };
    _10 <- Type.c06knightstour_point_Point_x p_2;
    _9 <- UInt64.of_int (Int64.to_int _10);
    _7 <- ([#"../06_knights_tour.rs" 97 8 32] IndexMut0.index_mut _8 _9);
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    assume { Resolve1.resolve _7 };
    _12 <- Type.c06knightstour_point_Point_y p_2;
    _11 <- UInt64.of_int (Int64.to_int _12);
    _5 <- ([#"../06_knights_tour.rs" 97 8 46] IndexMut1.index_mut _6 _11);
    goto BB2
  }
  BB2 {
    _5 <- { _5 with current = _4 };
    assume { Resolve2.resolve _5 };
    _0 <- ();
    return _0
  }
  
end
module C06KnightsTour_DumbNonlinearArith_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function dumb_nonlinear_arith (a : usize) : ()
end
module C06KnightsTour_DumbNonlinearArith
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 138 0 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 138 0 33] ()
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 136 0 24] UInt64.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 137 0 32] UInt64.to_int a * UInt64.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec ghost function dumb_nonlinear_arith (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 136 0 24] UInt64.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 137 0 32] UInt64.to_int a * UInt64.to_int a <= 1000000 }
    
   =
    [#"../06_knights_tour.rs" 138 0 33] ()
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module C06KnightsTour_KnightsTour_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  val knights_tour [@cfg:stackify] (size : usize) (x : usize) (y : usize) : Type.core_option_option (Type.c06knightstour_board)
    requires {[#"../06_knights_tour.rs" 142 0 21] y < size}
    requires {[#"../06_knights_tour.rs" 141 0 21] x < size}
    requires {[#"../06_knights_tour.rs" 140 0 39] 0 < UInt64.to_int size && UInt64.to_int size <= 1000}
    
end
module C06KnightsTour_KnightsTour
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  clone C06KnightsTour_DumbNonlinearArith as DumbNonlinearArith0 with axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = Type.c06knightstour_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve3 with type t1 = usize,
  type t2 = Type.c06knightstour_point, predicate Resolve0.resolve = Resolve5.resolve,
  predicate Resolve1.resolve = Resolve6.resolve
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = isize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = isize, type t2 = isize,
  predicate Resolve0.resolve = Resolve4.resolve, predicate Resolve1.resolve = Resolve4.resolve
  clone C06KnightsTour_Min_Interface as Min0
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = (isize, isize)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = (isize, isize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  axiom .
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (isize, isize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = (isize, isize),
  function Model0.model = Model3.model, predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone C06KnightsTour_Moves_Interface as Moves0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = (usize, Type.c06knightstour_point),
  function Model0.model = Model2.model, predicate Resolve0.resolve = Resolve3.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone Alloc_Vec_Impl0_New_Interface as New1 with type t = (usize, Type.c06knightstour_point),
  function Model0.model = Model2.model
  clone C06KnightsTour_Impl1_CountDegree_Interface as CountDegree0 with predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate Wf0.wf = Wf0.wf
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_Set_Interface as Set0 with predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate Wf0.wf = Wf0.wf
  clone C06KnightsTour_Impl1_New_Interface as New0 with predicate Wf0.wf = Wf0.wf
  let rec cfg knights_tour [@cfg:stackify] [#"../06_knights_tour.rs" 143 0 65] (size : usize) (x : usize) (y : usize) : Type.core_option_option (Type.c06knightstour_board)
    requires {[#"../06_knights_tour.rs" 142 0 21] y < size}
    requires {[#"../06_knights_tour.rs" 141 0 21] x < size}
    requires {[#"../06_knights_tour.rs" 140 0 39] 0 < UInt64.to_int size && UInt64.to_int size <= 1000}
    
   =
  var _0 : Type.core_option_option (Type.c06knightstour_board);
  var size_1 : usize;
  var x_2 : usize;
  var y_3 : usize;
  var board_4 : Type.c06knightstour_board;
  var _5 : usize;
  var p_6 : Type.c06knightstour_point;
  var _7 : isize;
  var _8 : usize;
  var _9 : isize;
  var _10 : usize;
  var step_11 : usize;
  var _12 : ();
  var _13 : borrowed (Type.c06knightstour_board);
  var _14 : Type.c06knightstour_point;
  var _15 : usize;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : usize;
  var _22 : usize;
  var _23 : usize;
  var candidates_24 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var i_25 : usize;
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _31 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _32 : ();
  var adj_33 : Type.c06knightstour_point;
  var _34 : Type.c06knightstour_point;
  var _35 : (isize, isize);
  var _36 : (isize, isize);
  var _37 : (isize, isize);
  var _38 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _39 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _40 : usize;
  var _41 : bool;
  var _42 : Type.c06knightstour_board;
  var _43 : Type.c06knightstour_point;
  var degree_44 : usize;
  var _45 : Type.c06knightstour_board;
  var _46 : Type.c06knightstour_point;
  var _47 : ();
  var _48 : borrowed (Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global));
  var _49 : (usize, Type.c06knightstour_point);
  var _50 : usize;
  var _51 : Type.c06knightstour_point;
  var _52 : ();
  var _53 : ();
  var _54 : ();
  var _55 : ();
  var _56 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _57 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _58 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _59 : isize;
  var adj_60 : Type.c06knightstour_point;
  var _61 : Type.c06knightstour_point;
  var _62 : ();
  var _63 : ();
  var _64 : borrowed (Type.c06knightstour_board);
  var _65 : Type.c06knightstour_point;
  var _66 : usize;
  var _67 : ();
  var _68 : ();
  var _69 : ();
  var _70 : Type.c06knightstour_board;
  {
    size_1 <- size;
    x_2 <- x;
    y_3 <- y;
    goto BB0
  }
  BB0 {
    _5 <- size_1;
    board_4 <- ([#"../06_knights_tour.rs" 144 20 36] New0.new _5);
    goto BB1
  }
  BB1 {
    _8 <- x_2;
    _7 <- Int64.of_int (UInt64.to_int _8);
    _10 <- y_3;
    _9 <- Int64.of_int (UInt64.to_int _10);
    p_6 <- Type.C06KnightsTour_Point _7 _9;
    step_11 <- (1 : usize);
    _13 <- borrow_mut board_4;
    board_4 <-  ^ _13;
    _14 <- p_6;
    _15 <- step_11;
    _12 <- ([#"../06_knights_tour.rs" 148 4 22] Set0.set _13 _14 _15);
    goto BB2
  }
  BB2 {
    step_11 <- ([#"../06_knights_tour.rs" 149 4 13] step_11 + (1 : usize));
    assert { [#"../06_knights_tour.rs" 151 4 54] let _ = DumbNonlinearArith0.dumb_nonlinear_arith size_1 in true };
    _16 <- ();
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant b { [#"../06_knights_tour.rs" 152 4 39] Type.c06knightstour_board_Board_size board_4 = size_1 };
    invariant b { [#"../06_knights_tour.rs" 153 4 31] Wf0.wf board_4 };
    invariant p { [#"../06_knights_tour.rs" 154 4 39] InBounds0.in_bounds board_4 p_6 };
    _20 <- step_11;
    _22 <- size_1;
    _23 <- size_1;
    _21 <- ([#"../06_knights_tour.rs" 157 18 31] _22 * _23);
    _19 <- ([#"../06_knights_tour.rs" 157 10 31] _20 <= _21);
    switch (_19)
      | False -> goto BB31
      | _ -> goto BB6
      end
  }
  BB6 {
    candidates_24 <- ([#"../06_knights_tour.rs" 159 29 39] New1.new ());
    goto BB7
  }
  BB7 {
    i_25 <- (0 : usize);
    goto BB8
  }
  BB8 {
    _28 <- i_25;
    _31 <- ([#"../06_knights_tour.rs" 161 18 25] Moves0.moves ());
    goto BB9
  }
  BB9 {
    _30 <- _31;
    _29 <- ([#"../06_knights_tour.rs" 161 18 31] Len0.len _30);
    goto BB10
  }
  BB10 {
    _27 <- ([#"../06_knights_tour.rs" 161 14 31] _28 < _29);
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve _31 };
    switch (_27)
      | False -> goto BB24
      | _ -> goto BB12
      end
  }
  BB12 {
    assert { [#"../06_knights_tour.rs" 162 12 48] InBounds0.in_bounds board_4 p_6 };
    goto BB13
  }
  BB13 {
    _32 <- ();
    _34 <- p_6;
    _39 <- ([#"../06_knights_tour.rs" 163 29 36] Moves0.moves ());
    goto BB14
  }
  BB14 {
    _38 <- _39;
    _40 <- i_25;
    _37 <- ([#"../06_knights_tour.rs" 163 29 39] Index0.index _38 _40);
    goto BB15
  }
  BB15 {
    _36 <- _37;
    _35 <- _36;
    adj_33 <- ([#"../06_knights_tour.rs" 163 22 40] Mov0.mov _34 _35);
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve _39 };
    _42 <- board_4;
    _43 <- adj_33;
    _41 <- ([#"../06_knights_tour.rs" 164 15 35] Available0.available _42 _43);
    goto BB18
  }
  BB18 {
    switch (_41)
      | False -> goto BB22
      | _ -> goto BB19
      end
  }
  BB19 {
    _45 <- board_4;
    _46 <- adj_33;
    degree_44 <- ([#"../06_knights_tour.rs" 165 29 52] CountDegree0.count_degree _45 _46);
    goto BB20
  }
  BB20 {
    _48 <- borrow_mut candidates_24;
    candidates_24 <-  ^ _48;
    _50 <- degree_44;
    _51 <- adj_33;
    _49 <- (_50, _51);
    _47 <- ([#"../06_knights_tour.rs" 166 16 46] Push0.push _48 _49);
    goto BB21
  }
  BB21 {
    _18 <- ();
    goto BB23
  }
  BB22 {
    _18 <- ();
    goto BB23
  }
  BB23 {
    goto BB8
  }
  BB24 {
    _26 <- ();
    _58 <- candidates_24;
    _57 <- _58;
    _56 <- ([#"../06_knights_tour.rs" 169 14 30] Min0.min _57);
    goto BB25
  }
  BB25 {
    switch (_56)
      | Type.Core_Option_Option_None -> goto BB26
      | Type.Core_Option_Option_Some _ -> goto BB28
      end
  }
  BB26 {
    _0 <- Type.Core_Option_Option_None;
    goto BB34
  }
  BB27 {
    assume { Resolve1.resolve candidates_24 };
    absurd
  }
  BB28 {
    adj_60 <- (let (_, a) = Type.core_option_option_Some_0 _56 in a);
    _61 <- adj_60;
    p_6 <- _61;
    _55 <- ();
    _64 <- borrow_mut board_4;
    board_4 <-  ^ _64;
    _65 <- p_6;
    _66 <- step_11;
    _63 <- ([#"../06_knights_tour.rs" 173 8 26] Set0.set _64 _65 _66);
    goto BB29
  }
  BB29 {
    step_11 <- ([#"../06_knights_tour.rs" 174 8 17] step_11 + (1 : usize));
    _18 <- ();
    goto BB30
  }
  BB30 {
    assume { Resolve1.resolve candidates_24 };
    goto BB5
  }
  BB31 {
    _17 <- ();
    _70 <- board_4;
    _0 <- Type.Core_Option_Option_Some _70;
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB36
  }
  BB34 {
    assume { Resolve1.resolve candidates_24 };
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    return _0
  }
  
end
module C06KnightsTour_Impl2
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module C06KnightsTour_Impl3
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.c06knightstour_point
  clone C06KnightsTour_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.c06knightstour_point,
  val clone' = Clone0.clone'
end
