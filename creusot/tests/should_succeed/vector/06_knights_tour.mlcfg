
module C06KnightsTour_Point_Type
  use prelude.IntSize
  use prelude.Int
  type t_point  =
    | C_Point isize isize
    
  let function point_x (self : t_point) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Point a _ -> a
      end
  let function point_y (self : t_point) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Point _ a -> a
      end
end
module C06KnightsTour_Impl3_Clone
  use prelude.Borrow
  use prelude.IntSize
  use prelude.Int
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  val clone0 (self : isize) : isize
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
  let rec cfg clone' [#"../06_knights_tour.rs" 4 15 4 20] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Point_Type.t_point) : C06KnightsTour_Point_Type.t_point
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.t_point;
  var self : C06KnightsTour_Point_Type.t_point = self;
  var _3 : isize;
  var _5 : isize;
  var _6 : isize;
  var _8 : isize;
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 6 4 6 12] _5 <- C06KnightsTour_Point_Type.point_x self;
    [#"../06_knights_tour.rs" 6 4 6 12] _3 <- ([#"../06_knights_tour.rs" 6 4 6 12] clone0 _5);
    goto BB1
  }
  BB1 {
    [#"../06_knights_tour.rs" 7 4 7 12] _8 <- C06KnightsTour_Point_Type.point_y self;
    [#"../06_knights_tour.rs" 7 4 7 12] _6 <- ([#"../06_knights_tour.rs" 7 4 7 12] clone0 _8);
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 4 15 4 20] _0 <- C06KnightsTour_Point_Type.C_Point _3 _6;
    _3 <- any isize;
    _6 <- any isize;
    return _0
  }
  
end
module C06KnightsTour_Impl0_Mov
  use prelude.IntSize
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use prelude.IntSize
  use prelude.Int
  let rec cfg mov [#"../06_knights_tour.rs" 18 4 18 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
    = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
    = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.t_point;
  var self : C06KnightsTour_Point_Type.t_point = self;
  var p : (isize, isize) = p;
  var _9 : isize;
  var _12 : isize;
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 19 18 19 32] _9 <- C06KnightsTour_Point_Type.point_x self + (let (a, _) = p in a);
    [#"../06_knights_tour.rs" 19 37 19 51] _12 <- C06KnightsTour_Point_Type.point_y self + (let (_, a) = p in a);
    [#"../06_knights_tour.rs" 19 8 19 53] _0 <- C06KnightsTour_Point_Type.C_Point _9 _12;
    _9 <- any isize;
    _12 <- any isize;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C06KnightsTour_Board_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  type t_board  =
    | C_Board usize (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let function board_size (self : t_board) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Board a _ -> a
      end
  let function board_field (self : t_board) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Board _ a -> a
      end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module C06KnightsTour_Impl1_New_Closure3_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  use prelude.Snapshot
  use prelude.Int16
  use prelude.Int
  use prelude.Borrow
  type c06knightstour_impl1_new_closure3  =
    | C06knightstour_impl1_new_closure3 usize
    
end
module C06KnightsTour_Impl1_New_Closure3
  use prelude.UIntSize
  use seq.Seq
  predicate invariant2 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Seq.seq usize) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Seq.seq usize)
  val inv2 (_x : Seq.seq usize) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Seq.seq usize . inv2 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv1 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv1 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv1 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv2 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv2 (shallow_model0 self)
  val invariant1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv1 x = true
  predicate invariant0 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : usize) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : usize)
  val inv0 (_x : usize) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : usize . inv0 x = true
  use prelude.Int16
  use prelude.Snapshot
  use prelude.Borrow
  use C06KnightsTour_Impl1_New_Closure3_Type as C06KnightsTour_Impl1_New_Closure3_Type
  function field_00 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : usize
    
   =
    let C06KnightsTour_Impl1_New_Closure3_Type.C06knightstour_impl1_new_closure3 a = self in a
  val field_00 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : usize
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (_2 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    field_00 _2 = field_00 self
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    ensures { result = index_logic0 self ix }
    
  val from_elem0 (elem : usize) (n : usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {inv0 elem}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model0 result)
    = UIntSize.to_int n }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i
    /\ i < UIntSize.to_int n  -> index_logic0 result i = elem }
    ensures { inv1 result }
    
  predicate resolve0 (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c06knightstour_impl1_new_closure3 [#"../06_knights_tour.rs" 43 16 43 50] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (_2 : usize) (_3 : Snapshot.snap_ty (Seq.seq usize)) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 43 26 43 48] Seq.length (shallow_model0 result)
    = UIntSize.to_int (field_00 ( ^ _1)) }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _1 : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 = _1;
  var res : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 _1 };
    [#"../06_knights_tour.rs" 44 23 44 36] res <- ([#"../06_knights_tour.rs" 44 23 44 36] from_elem0 ([#"../06_knights_tour.rs" 44 28 44 29] (0 : usize)) (field_00 ( * _1)));
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 43 16 43 50] _0 <- res;
    res <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  use prelude.Snapshot
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Snapshot.snap_ty (Seq.seq 'b))
    
  let function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MapInv a _ _ -> a
      end
  let function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MapInv _ a _ -> a
      end
  let function mapinv_produced (self : t_mapinv 'i 'b 'f) : Snapshot.snap_ty (Seq.seq 'b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MapInv _ _ a -> a
      end
end
module C06KnightsTour_Impl1_New
  use prelude.UIntSize
  use seq.Seq
  use prelude.Snapshot
  predicate invariant12 (self : Snapshot.snap_ty (Seq.seq usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant12 (self : Snapshot.snap_ty (Seq.seq usize)) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : Snapshot.snap_ty (Seq.seq usize))
  val inv12 (_x : Snapshot.snap_ty (Seq.seq usize)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Snapshot.snap_ty (Seq.seq usize) . inv12 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int16
  use C06KnightsTour_Impl1_New_Closure3_Type as C06KnightsTour_Impl1_New_Closure3_Type
  use prelude.Borrow
  predicate invariant11 (self : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
  val inv11 (_x : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv11 x
  = true
  predicate invariant10 (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
  val inv10 (_x : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . inv10 x
  = true
  predicate inv7 (_x : Seq.seq usize)
  val inv7 (_x : Seq.seq usize) : bool
    ensures { result = inv7 _x }
    
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv9 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv7 (shallow_model1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self)
  <= UIntSize.to_int max0)
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv7 (shallow_model1 self)
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv9 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant8 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv8 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv8 x = true
  predicate invariant7 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Seq.seq usize) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : Seq.seq usize . inv7 x = true
  predicate inv4 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv4 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv4 _x }
    
  use seq.Seq
  predicate inv6 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv6 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv6 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv4 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant6 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv4 (shallow_model0 self)
  val invariant6 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv6 x
  = true
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  predicate inv3 (_x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
  val inv3 (_x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = inv3 _x }
    
  function field_00 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : usize
    
   =
    let C06KnightsTour_Impl1_New_Closure3_Type.C06knightstour_impl1_new_closure3 a = self in a
  val field_00 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : usize
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (_2 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    field_00 _2 = field_00 self
  predicate postcondition_mut0 [#"../06_knights_tour.rs" 43 16 43 50] (self : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    (let (_2, _3) = args in Seq.length (shallow_model1 result) = UIntSize.to_int (field_00 ( ^ self)))
    /\ unnest0 ( * self) ( ^ self)
  use seq.Seq
  predicate precondition0 [#"../06_knights_tour.rs" 43 16 43 50] (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (args : (usize, Snapshot.snap_ty (Seq.seq usize)))
    
   =
    let (_2, _3) = args in true
  use prelude.Snapshot
  use seq_ext.SeqExt
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Int
  function deep_model0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces0 self visited o }
    
  predicate produces1 [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (visited : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9] unnest0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ)
    /\ (exists s : Seq.seq usize . inv7 s
    /\ Seq.length s = Seq.length visited
    /\ produces0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ)
    /\ Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ)
    = Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s
    /\ (exists fs : Seq.seq (borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv11 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i)
    /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self
      /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest0 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i)
    /\ precondition0 ( * Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces1 [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (visited : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = produces1 self visited succ }
    
  function produces_trans2 (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (ab : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (bc : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : ()
    
  val produces_trans2 (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (ab : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (bc : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces1 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces1 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv3 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv4 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv3 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv4 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv3 c}
    ensures { result = produces_trans2 a ab b bc c }
    
  axiom produces_trans2_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3, ab : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)), b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3, bc : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)), c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] produces1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] produces1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] inv3 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] inv4 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] inv3 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] inv4 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] inv3 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl2 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : ()
    
  val produces_refl2 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv3 self}
    ensures { result = produces_refl2 self }
    
  axiom produces_refl2_spec : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 25] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45] produces1 self (Seq.empty ) self)
  predicate invariant5 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
  val inv5 (_x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv5 x
  = (inv3 ( * x) /\ inv3 ( ^ x))
  predicate invariant4 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv4 x = true
  use seq.Seq
  predicate inv1 (_x : usize)
  val inv1 (_x : usize) : bool
    ensures { result = inv1 _x }
    
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv0 _x }
    
  predicate next_precondition0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9] forall i : Core_Ops_Range_Range_Type.t_range usize . forall e : usize . inv0 i
     -> inv1 e  -> produces0 iter (Seq.singleton e) i  -> precondition0 func (e, Snapshot.new produced)
  val next_precondition0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize) : bool
    ensures { result = next_precondition0 iter func produced }
    
  use seq.Seq
  predicate preservation0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9] forall i : Core_Ops_Range_Range_Type.t_range usize . forall b : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . forall f : borrowed C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . forall e2 : usize . forall e1 : usize . forall s : Seq.seq usize . inv0 i
     -> inv9 b
     -> inv10 f
     -> inv1 e2
     -> inv1 e1
     -> inv7 s
     -> unnest0 func ( * f)
     -> produces0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition0 ( * f) (e1, Snapshot.new s)
     -> postcondition_mut0 f (e1, Snapshot.new s) b  -> precondition0 ( ^ f) (e2, Snapshot.new (Seq.snoc s e1))
  val preservation0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = preservation0 iter func }
    
  use seq.Seq
  predicate inv2 (_x : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
  val inv2 (_x : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = inv2 _x }
    
  predicate preservation_inv0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize)
    
  val preservation_inv0 (iter : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) (produced : Seq.seq usize) : bool
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv0 iter}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv2 func}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv7 produced}
    ensures { result = preservation_inv0 iter func produced }
    
  axiom preservation_inv0_spec : forall iter : Core_Ops_Range_Range_Type.t_range usize, func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3, produced : Seq.seq usize . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 24 121 28] inv0 iter)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 33 121 37] inv2 func)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 121 42 121 50] inv7 produced)
   -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 120 4 120 83] produced = Seq.empty 
   -> preservation_inv0 iter func produced = preservation0 iter func)
  predicate resolve3 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve3 self }
    
  predicate completed1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve3 self
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed1 self }
    
  predicate reinitialize0 (_1 : ()) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9] forall func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . forall iter : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv2 func
     -> inv8 iter  -> completed1 iter  -> next_precondition0 ( ^ iter) func (Seq.empty ) /\ preservation0 ( ^ iter) func
  val reinitialize0 (_1 : ()) : bool
    ensures { result = reinitialize0 _1 }
    
  predicate invariant3 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
  val invariant3 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . inv3 x
  = (invariant3 x
  /\ match x with
    | CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv iter func produced -> true
    end)
  predicate invariant2 (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3 . inv2 x = true
  function produces_trans1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv7 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv7 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv7 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv7 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  predicate invariant1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : usize) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : usize . inv1 x = true
  predicate invariant0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv0 x = true
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv7 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv7 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] inv7 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] inv7 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 45] produces0 self (Seq.empty ) self)
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic0 self ix }
    
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model0 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model1 (index_logic0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf0 self }
    
  predicate from_iter_post0 (prod : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (res : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 20 258 32] prod = shallow_model0 res
  val from_iter_post0 (prod : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (res : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post0 prod res }
    
  predicate completed0 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3))
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9] Snapshot.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self))
    = Seq.empty 
    /\ completed1 (Borrow.borrow_logic (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self)) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self)
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  val completed0 (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)) : bool
    ensures { result = completed0 self }
    
  predicate resolve2 [#"../06_knights_tour.rs" 43 16 43 50] (_1 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    true
  predicate resolve1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 27] resolve1 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self)
    /\ resolve2 (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  val resolve0 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : bool
    ensures { result = resolve0 self }
    
  val collect0 (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    requires {inv3 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 130 16 131 83] exists prod : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . exists done' : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) . inv4 prod
    /\ inv5 done'
    /\ resolve0 ( ^ done') /\ completed0 done' /\ produces1 self prod ( * done') /\ from_iter_post0 prod result }
    ensures { inv6 result }
    
  val map_inv0 (self : Core_Ops_Range_Range_Type.t_range usize) (func : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 141] forall i2 : Core_Ops_Range_Range_Type.t_range usize . forall e : usize . inv0 i2
     -> inv1 e  -> produces0 self (Seq.singleton e) i2  -> precondition0 func (e, Snapshot.new (Seq.empty ))}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51] reinitialize0 ()}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70] preservation0 self func}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31] inv2 func}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 88] result
    = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Snapshot.new (Seq.empty )) }
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 61] inv3 result }
    
  let rec cfg new [#"../06_knights_tour.rs" 40 4 40 31] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) : C06KnightsTour_Board_Type.t_board
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UIntSize.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] wf0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Board_Type.t_board;
  var size : usize = size;
  var rows : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _6 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3;
  var _7 : Core_Ops_Range_Range_Type.t_range usize;
  var _9 : C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3;
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 41 19 41 28] _7 <- Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 41 20 41 21] (0 : usize)) size;
    [#"../06_knights_tour.rs" 43 16 43 50] _9 <- C06KnightsTour_Impl1_New_Closure3_Type.C06knightstour_impl1_new_closure3 size;
    [#"../06_knights_tour.rs" 41 19 45 13] _6 <- ([#"../06_knights_tour.rs" 41 19 45 13] map_inv0 _7 _9);
    _7 <- any Core_Ops_Range_Range_Type.t_range usize;
    _9 <- any C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3;
    goto BB1
  }
  BB1 {
    [#"../06_knights_tour.rs" 41 19 46 22] rows <- ([#"../06_knights_tour.rs" 41 19 46 22] collect0 _6);
    _6 <- any CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize C06KnightsTour_Impl1_New_Closure3_Type.c06knightstour_impl1_new_closure3;
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 47 8 47 34] _0 <- C06KnightsTour_Board_Type.C_Board size rows;
    rows <- any Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06KnightsTour_Impl1_Available
  use prelude.UIntSize
  use seq.Seq
  predicate invariant7 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Seq.seq usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq usize)
  val inv7 (_x : Seq.seq usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq usize . inv7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv6 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv7 (shallow_model3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max0)
  predicate invariant6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv7 (shallow_model3 self)
  val invariant6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv6 x = true
  predicate invariant5 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv5 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv5 (shallow_model2 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv4 x
  = true
  predicate invariant3 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : usize)
  val inv3 (_x : usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : usize . inv3 x = true
  predicate invariant2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv2 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv2 x = true
  predicate invariant1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : usize)
  val inv1 (_x : usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : usize . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv0 x
  = true
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use prelude.IntSize
  predicate in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  val in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds0 self p }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic0 self ix }
    
  predicate wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model2 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model3 (index_logic0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf0 self }
    
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) : bool
    ensures { result = in_bounds2 self seq }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model3 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    ensures { result = shallow_model1 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index : usize) : usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds2 index (shallow_model1 self)}
    requires {inv2 self}
    requires {inv1 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model1 self) result }
    ensures { inv3 result }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    ensures { result = shallow_model0 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model0 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model0 self) result }
    ensures { inv2 result }
    
  use prelude.IntSize
  let rec cfg available [#"../06_knights_tour.rs" 52 4 52 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] wf0 self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result  -> in_bounds0 self p }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : C06KnightsTour_Board_Type.t_board = self;
  var p : C06KnightsTour_Point_Type.t_point = p;
  var _5 : bool;
  var _7 : bool;
  var _8 : usize;
  var _11 : bool;
  var _13 : bool;
  var _14 : usize;
  var _18 : usize;
  var _20 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _22 : usize;
  var _24 : usize;
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 53 8 53 16] _5 <- ([#"../06_knights_tour.rs" 53 8 53 9] (0 : isize))
    <= C06KnightsTour_Point_Type.point_x p;
    switch (_5)
      | False -> goto BB8
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../06_knights_tour.rs" 54 15 54 29] _8 <- UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_x p));
    [#"../06_knights_tour.rs" 54 15 54 41] _7 <- _8 < C06KnightsTour_Board_Type.board_size self;
    _8 <- any usize;
    switch (_7)
      | False -> goto BB7
      | True -> goto BB2
      end
  }
  BB2 {
    [#"../06_knights_tour.rs" 55 15 55 23] _11 <- ([#"../06_knights_tour.rs" 55 15 55 16] (0 : isize))
    <= C06KnightsTour_Point_Type.point_y p;
    switch (_11)
      | False -> goto BB6
      | True -> goto BB3
      end
  }
  BB3 {
    [#"../06_knights_tour.rs" 56 15 56 29] _14 <- UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_y p));
    [#"../06_knights_tour.rs" 56 15 56 41] _13 <- _14 < C06KnightsTour_Board_Type.board_size self;
    _14 <- any usize;
    switch (_13)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../06_knights_tour.rs" 57 26 57 38] _22 <- UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_x p));
    [#"../06_knights_tour.rs" 57 25 57 39] _20 <- ([#"../06_knights_tour.rs" 57 25 57 39] index0 (C06KnightsTour_Board_Type.board_field self) _22);
    _22 <- any usize;
    goto BB10
  }
  BB5 {
    goto BB9
  }
  BB6 {
    goto BB9
  }
  BB7 {
    goto BB9
  }
  BB8 {
    goto BB9
  }
  BB9 {
    [#"../06_knights_tour.rs" 53 8 57 58] _0 <- ([#"../06_knights_tour.rs" 53 8 57 58] false);
    goto BB12
  }
  BB10 {
    [#"../06_knights_tour.rs" 57 40 57 52] _24 <- UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_y p));
    [#"../06_knights_tour.rs" 57 39 57 53] _18 <- ([#"../06_knights_tour.rs" 57 39 57 53] index1 _20 _24);
    _24 <- any usize;
    goto BB11
  }
  BB11 {
    [#"../06_knights_tour.rs" 57 15 57 58] _0 <- _18 = ([#"../06_knights_tour.rs" 57 57 57 58] (0 : usize));
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C06KnightsTour_Impl1_CountDegree
  use prelude.UIntSize
  use seq.Seq
  predicate invariant8 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Seq.seq usize) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq usize)
  val inv8 (_x : Seq.seq usize) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq usize . inv8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv8 (shallow_model3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max0)
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv8 (shallow_model3 self)
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  predicate invariant6 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv6 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv6 x = true
  use seq.Seq
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate invariant5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model2 self)
  val invariant5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv5 x
  = true
  use prelude.IntSize
  predicate invariant4 (self : Seq.seq (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Seq.seq (isize, isize)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq (isize, isize))
  val inv4 (_x : Seq.seq (isize, isize)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq (isize, isize) . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option (isize, isize)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (isize, isize))
  val inv3 (_x : Core_Option_Option_Type.t_option (isize, isize)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (isize, isize) . inv3 x = true
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Borrow
  predicate invariant2 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv2 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) . inv2 x
  = true
  use seq.Seq
  predicate inv1 (_x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  val inv1 (_x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv1 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv4 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv4 (shallow_model0 self)
  val invariant1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  val shallow_model1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    ensures { result = shallow_model1 self }
    
  predicate produces0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq (isize, isize)) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 237 12 237 41] shallow_model1 self
    = Seq.(++) visited (shallow_model1 rhs)
  val produces0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq (isize, isize)) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = produces0 self visited rhs }
    
  function produces_trans0 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq (isize, isize)) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq (isize, isize)) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 246 4 246 10] ()
  val produces_trans0 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq (isize, isize)) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq (isize, isize)) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] inv4 ab}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] inv4 bc}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), ab : Seq.seq (isize, isize), b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), bc : Seq.seq (isize, isize), c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] inv4 ab)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] inv4 bc)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 250 14 250 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 241 4 241 10] ()
  val produces_refl0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 243 14 243 45] produces0 self (Seq.empty ) self)
  predicate invariant0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv0 x
  = true
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use prelude.IntSize
  predicate in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  val in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds0 self p }
    
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic1 self ix }
    
  predicate wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model2 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model3 (index_logic1 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf0 self }
    
  use prelude.Snapshot
  predicate resolve3 (self : isize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : isize) : bool
    ensures { result = resolve3 self }
    
  predicate resolve1 (self : (isize, isize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve3 (let (a, _) = self in a)
    /\ resolve3 (let (_, a) = self in a)
  val resolve1 (self : (isize, isize)) : bool
    ensures { result = resolve1 self }
    
  use seq.Seq
  predicate resolve2 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 222 8 222 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model1 self)  -> resolve1 (Seq.get (shallow_model1 self) i)
  val resolve2 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve2 self }
    
  val available0 [#"../06_knights_tour.rs" 52 4 52 41] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] wf0 self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result  -> in_bounds0 self p }
    
  val mov0 [#"../06_knights_tour.rs" 18 4 18 45] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
    = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
    = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a) }
    
  use seq.Seq
  predicate resolve0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve0 self }
    
  function shallow_model4 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model4 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (isize, isize)
    ensures { result = shallow_model4 self }
    
  predicate completed0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 230 20 230 57] resolve0 self /\ shallow_model4 self = Seq.empty 
  val completed0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Core_Option_Option_Type.t_option (isize, isize)
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv3 result }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 174 20 174 33] shallow_model0 self = shallow_model1 res
  val into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 168 20 168 24] true
  val into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (isize, isize)
    ensures { result = index_logic0 self ix }
    
  val moves0 [#"../06_knights_tour.rs" 95 0 95 33] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 93 10 93 28] Seq.length (shallow_model0 result) = 8 }
    ensures { [#"../06_knights_tour.rs" 94 0 94 130] forall i : int . 0 <= i /\ i < 8
     -> - 2 <= IntSize.to_int (let (a, _) = index_logic0 result i in a)
    /\ IntSize.to_int (let (a, _) = index_logic0 result i in a) <= 2
    /\ - 2 <= IntSize.to_int (let (_, a) = index_logic0 result i in a)
    /\ IntSize.to_int (let (_, a) = index_logic0 result i in a) <= 2 }
    
  let rec cfg count_degree [#"../06_knights_tour.rs" 70 4 70 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : usize
    requires {[#"../06_knights_tour.rs" 68 15 68 24] wf0 self}
    requires {[#"../06_knights_tour.rs" 69 15 69 32] in_bounds0 self p}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : C06KnightsTour_Board_Type.t_board = self;
  var p : C06KnightsTour_Point_Type.t_point = p;
  var count : usize;
  var iter : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var _8 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var iter_old : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var produced : Snapshot.snap_ty (Seq.seq (isize, isize));
  var _16 : ();
  var _17 : Core_Option_Option_Type.t_option (isize, isize);
  var _18 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _19 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem : (isize, isize);
  var _22 : Snapshot.snap_ty (Seq.seq (isize, isize));
  var m : (isize, isize);
  var next : C06KnightsTour_Point_Type.t_point;
  var _28 : (isize, isize);
  var _29 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 71 24 71 25] count <- ([#"../06_knights_tour.rs" 71 24 71 25] (0 : usize));
    [#"../06_knights_tour.rs" 74 17 74 24] _8 <- ([#"../06_knights_tour.rs" 74 17 74 24] moves0 ([#"../06_knights_tour.rs" 74 17 74 24] ()));
    goto BB1
  }
  BB1 {
    [#"../06_knights_tour.rs" 73 8 73 46] iter <- ([#"../06_knights_tour.rs" 73 8 73 46] into_iter0 _8);
    _8 <- any Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 73 8 73 46] iter_old <- ([#"../06_knights_tour.rs" 73 8 73 46] Snapshot.new iter);
    goto BB3
  }
  BB3 {
    [#"../06_knights_tour.rs" 73 8 73 46] produced <- ([#"../06_knights_tour.rs" 73 8 73 46] Snapshot.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant { [#"../06_knights_tour.rs" 73 8 73 46] inv0 iter };
    invariant { [#"../06_knights_tour.rs" 73 8 73 46] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../06_knights_tour.rs" 73 20 73 44] UIntSize.to_int count <= Seq.length (Snapshot.inner produced) };
    goto BB8
  }
  BB8 {
    [#"../06_knights_tour.rs" 73 8 73 46] _19 <- Borrow.borrow_mut iter;
    [#"../06_knights_tour.rs" 73 8 73 46] iter <-  ^ _19;
    [#"../06_knights_tour.rs" 73 8 73 46] _18 <- Borrow.borrow_final ( * _19) (Borrow.get_id _19);
    [#"../06_knights_tour.rs" 73 8 73 46] _19 <- { _19 with current = ( ^ _18) ; };
    [#"../06_knights_tour.rs" 73 8 73 46] _17 <- ([#"../06_knights_tour.rs" 73 8 73 46] next0 _18);
    _18 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
    goto BB9
  }
  BB9 {
    assume { resolve0 _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB10 {
    assume { resolve2 iter };
    assert { [#"../06_knights_tour.rs" 73 8 73 46] false };
    absurd
  }
  BB11 {
    goto BB13
  }
  BB12 {
    assume { resolve2 iter };
    goto BB20
  }
  BB13 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    [#"../06_knights_tour.rs" 73 8 73 46] _22 <- ([#"../06_knights_tour.rs" 73 8 73 46] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB14
  }
  BB14 {
    [#"../06_knights_tour.rs" 73 8 73 46] produced <- _22;
    _22 <- any Snapshot.snap_ty (Seq.seq (isize, isize));
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] m <- __creusot_proc_iter_elem;
    assume { resolve1 __creusot_proc_iter_elem };
    [#"../06_knights_tour.rs" 75 29 75 31] _28 <- m;
    [#"../06_knights_tour.rs" 75 23 75 32] next <- ([#"../06_knights_tour.rs" 75 23 75 32] mov0 p _28);
    goto BB15
  }
  BB15 {
    assume { resolve1 m };
    [#"../06_knights_tour.rs" 76 15 76 35] _29 <- ([#"../06_knights_tour.rs" 76 15 76 35] available0 self next);
    goto BB16
  }
  BB16 {
    switch (_29)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    [#"../06_knights_tour.rs" 77 16 77 26] count <- count + ([#"../06_knights_tour.rs" 77 25 77 26] (1 : usize));
    [#"../06_knights_tour.rs" 76 36 78 13] _16 <- ([#"../06_knights_tour.rs" 76 36 78 13] ());
    goto BB19
  }
  BB18 {
    [#"../06_knights_tour.rs" 78 13 78 13] _16 <- ([#"../06_knights_tour.rs" 78 13 78 13] ());
    goto BB19
  }
  BB19 {
    goto BB7
  }
  BB20 {
    [#"../06_knights_tour.rs" 80 8 80 13] _0 <- count;
    return _0
  }
  
end
module C06KnightsTour_Impl1_Set
  use prelude.UIntSize
  use seq.Seq
  predicate invariant7 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Seq.seq usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq usize)
  val inv7 (_x : Seq.seq usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq usize . inv7 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv6 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv6 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv6 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv6 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv7 (shallow_model3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max0)
  predicate invariant6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv7 (shallow_model3 self)
  val invariant6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv6 x = true
  predicate invariant5 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv5 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv5 x = true
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv5 (shallow_model1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self)
  <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv5 (shallow_model1 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv4 x
  = true
  use prelude.Borrow
  predicate invariant3 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : borrowed usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed usize)
  val inv3 (_x : borrowed usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed usize . inv3 x = true
  predicate invariant2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv2 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv2 x = true
  predicate invariant1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : usize)
  val inv1 (_x : usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : usize . inv1 x = true
  predicate invariant0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv0 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) . inv0 x
  = true
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use prelude.IntSize
  predicate in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  val in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds0 self p }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic0 self ix }
    
  predicate wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model1 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model3 (index_logic0 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf0 self }
    
  predicate resolve2 (self : borrowed (C06KnightsTour_Board_Type.t_board)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (C06KnightsTour_Board_Type.t_board)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed usize) : bool
    ensures { result = resolve0 self }
    
  use prelude.Slice
  use seq.Seq
  predicate resolve_elswhere1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) : bool
    ensures { result = resolve_elswhere1 self old' fin }
    
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) : bool
    ensures { result = in_bounds2 self seq }
    
  function shallow_model2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model3 ( * self)
  val shallow_model2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model2 self }
    
  val index_mut1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds2 index (shallow_model2 self)}
    requires {inv2 self}
    requires {inv1 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value1 index (shallow_model2 self) ( * result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value1 index (shallow_model3 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere1 index (shallow_model2 self) (shallow_model3 ( ^ self)) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model3 ( ^ self))
    = Seq.length (shallow_model2 self) }
    ensures { inv3 result }
    
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    ensures { result = shallow_model0 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds1 index (shallow_model0 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value0 index (shallow_model0 self) ( * result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value0 index (shallow_model1 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model0 self) (shallow_model1 ( ^ self)) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model1 ( ^ self))
    = Seq.length (shallow_model0 self) }
    ensures { inv2 result }
    
  use prelude.IntSize
  let rec cfg set [#"../06_knights_tour.rs" 87 4 87 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C06KnightsTour_Board_Type.t_board)) (p : C06KnightsTour_Point_Type.t_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 83 15 83 24] wf0 ( * self)}
    requires {[#"../06_knights_tour.rs" 84 15 84 32] in_bounds0 ( * self) p}
    ensures { [#"../06_knights_tour.rs" 85 14 85 26] wf0 ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self)
    = C06KnightsTour_Board_Type.board_size ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (C06KnightsTour_Board_Type.t_board) = self;
  var p : C06KnightsTour_Point_Type.t_point = p;
  var v : usize = v;
  var _9 : borrowed usize;
  var _10 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _11 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _13 : usize;
  var _15 : usize;
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 88 8 88 18] _12 <- Borrow.borrow_final (C06KnightsTour_Board_Type.board_field ( * self)) (Borrow.inherit_id (Borrow.get_id self) 2);
    [#"../06_knights_tour.rs" 88 8 88 18] self <- { self with current = (let C06KnightsTour_Board_Type.C_Board x0 x1 =  * self in C06KnightsTour_Board_Type.C_Board x0 ( ^ _12)) ; };
    [#"../06_knights_tour.rs" 88 19 88 31] _13 <- UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_x p));
    [#"../06_knights_tour.rs" 88 18 88 32] _11 <- ([#"../06_knights_tour.rs" 88 18 88 32] index_mut0 _12 _13);
    _12 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    _13 <- any usize;
    goto BB1
  }
  BB1 {
    [#"../06_knights_tour.rs" 88 8 88 32] _10 <- Borrow.borrow_final ( * _11) (Borrow.get_id _11);
    [#"../06_knights_tour.rs" 88 8 88 32] _11 <- { _11 with current = ( ^ _10) ; };
    [#"../06_knights_tour.rs" 88 33 88 45] _15 <- UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_y p));
    [#"../06_knights_tour.rs" 88 32 88 46] _9 <- ([#"../06_knights_tour.rs" 88 32 88 46] index_mut1 _10 _15);
    _10 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    _15 <- any usize;
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 88 8 88 50] _9 <- { _9 with current = v ; };
    assume { resolve0 _9 };
    [#"../06_knights_tour.rs" 88 8 88 50] _0 <- ([#"../06_knights_tour.rs" 88 8 88 50] ());
    assume { resolve1 _11 };
    assume { resolve2 self };
    return _0
  }
  
end
module Core_Slice_Iter_Iter_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module C06KnightsTour_Min
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use prelude.UIntSize
  use prelude.Slice
  predicate invariant7 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : slice (usize, C06KnightsTour_Point_Type.t_point))
  val inv7 (_x : slice (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : slice (usize, C06KnightsTour_Point_Type.t_point) . inv7 x = true
  use seq.Seq
  predicate invariant6 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  val inv6 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point) . inv6 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate invariant5 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model2 self)
  val invariant5 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . inv5 x
  = true
  predicate invariant4 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : slice (usize, C06KnightsTour_Point_Type.t_point))
  val inv4 (_x : slice (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : slice (usize, C06KnightsTour_Point_Type.t_point) . inv4 x = true
  predicate invariant3 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  val inv3 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point) . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point))
  val inv2 (_x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point) . inv2 x = true
  predicate invariant1 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
  val inv1 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . inv1 x
  = true
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model5 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  val shallow_model5 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv7 self}
    ensures { result = shallow_model5 self }
    
  axiom shallow_model5_spec : forall self : slice (usize, C06KnightsTour_Point_Type.t_point) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv7 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv6 (shallow_model5 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model5 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model5 self)
  <= UIntSize.to_int max0)
  function index_logic1 [@inline:trivial] (self : slice (usize, C06KnightsTour_Point_Type.t_point)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model5 self) ix
  val index_logic1 [@inline:trivial] (self : slice (usize, C06KnightsTour_Point_Type.t_point)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = index_logic1 self ix }
    
  use seq.Seq
  function shallow_model3 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model5 self
  val shallow_model3 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = shallow_model3 self }
    
  use seq.Seq
  function to_ref_seq0 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  val to_ref_seq0 (self : slice (usize, C06KnightsTour_Point_Type.t_point)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv4 self}
    ensures { result = to_ref_seq0 self }
    
  axiom to_ref_seq0_spec : forall self : slice (usize, C06KnightsTour_Point_Type.t_point) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv3 (to_ref_seq0 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq0 self)  -> Seq.get (to_ref_seq0 self) i = index_logic1 self i)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq0 self)
  = Seq.length (shallow_model3 self))
  function shallow_model1 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : slice (usize, C06KnightsTour_Point_Type.t_point)
    
  val shallow_model1 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : slice (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = shallow_model1 self }
    
  predicate produces0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (visited : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (tl : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 386 12 386 66] to_ref_seq0 (shallow_model1 self)
    = Seq.(++) visited (to_ref_seq0 (shallow_model1 tl))
  val produces0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (visited : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (tl : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = produces0 self visited tl }
    
  function produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (ab : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (b : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (bc : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (c : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 395 4 395 10] ()
  val produces_trans0 (a : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (ab : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (b : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) (bc : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) (c : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv3 ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv3 bc}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point), ab : Seq.seq (usize, C06KnightsTour_Point_Type.t_point), b : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point), bc : Seq.seq (usize, C06KnightsTour_Point_Type.t_point), c : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 397 15 397 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 398 15 398 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 31 400 33] inv3 ab)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 400 61 400 63] inv3 bc)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 399 14 399 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 390 4 390 10] ()
  val produces_refl0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : ()
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) . [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 45] produces0 self (Seq.empty ) self
  predicate invariant0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
  val inv0 (_x : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point) . inv0 x = true
  use prelude.Snapshot
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) : bool
    ensures { result = resolve0 self }
    
  use seq.Seq
  function shallow_model4 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) : slice (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model4 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) : slice (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = shallow_model4 self }
    
  predicate completed0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 379 20 379 61] resolve0 self
    /\ shallow_model5 (shallow_model4 self) = Seq.empty 
  val completed0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv2 result }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = index_logic0 self ix }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = shallow_model0 self }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (res : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 188 20 188 34] shallow_model0 self
    = shallow_model3 (shallow_model1 res)
  val into_iter_post0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (res : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 182 20 182 24] true
  val into_iter_pre0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    
  let rec cfg min [#"../06_knights_tour.rs" 111 0 111 58] [@cfg:stackify] [@cfg:subregion_analysis] (v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../06_knights_tour.rs" 109 0 110 62] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result
    = Core_Option_Option_Type.C_Some r
     -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model0 v) /\ index_logic0 v i = r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) = v;
  var min : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var iter : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point);
  var iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var produced : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
  var _15 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _16 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var _17 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var __creusot_proc_iter_elem : (usize, C06KnightsTour_Point_Type.t_point);
  var _20 : Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
  var x : (usize, C06KnightsTour_Point_Type.t_point);
  var _23 : ();
  var _25 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var m : (usize, C06KnightsTour_Point_Type.t_point);
  var _28 : bool;
  var _31 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 112 18 112 22] min <- Core_Option_Option_Type.C_None;
    [#"../06_knights_tour.rs" 113 4 114 74] iter <- ([#"../06_knights_tour.rs" 113 4 114 74] into_iter0 v);
    goto BB1
  }
  BB1 {
    [#"../06_knights_tour.rs" 113 4 114 74] iter_old <- ([#"../06_knights_tour.rs" 113 4 114 74] Snapshot.new iter);
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 113 4 114 74] produced <- ([#"../06_knights_tour.rs" 113 4 114 74] Snapshot.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../06_knights_tour.rs" 113 4 114 74] inv0 iter };
    invariant { [#"../06_knights_tour.rs" 113 4 114 74] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../06_knights_tour.rs" 113 4 114 74] forall r : (usize, C06KnightsTour_Point_Type.t_point) . min
    = Core_Option_Option_Type.C_Some r
     -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model0 v) /\ index_logic0 v i = r) };
    goto BB5
  }
  BB5 {
    [#"../06_knights_tour.rs" 113 4 114 74] _17 <- Borrow.borrow_mut iter;
    [#"../06_knights_tour.rs" 113 4 114 74] iter <-  ^ _17;
    [#"../06_knights_tour.rs" 113 4 114 74] _16 <- Borrow.borrow_final ( * _17) (Borrow.get_id _17);
    [#"../06_knights_tour.rs" 113 4 114 74] _17 <- { _17 with current = ( ^ _16) ; };
    [#"../06_knights_tour.rs" 113 4 114 74] _15 <- ([#"../06_knights_tour.rs" 113 4 114 74] next0 _16);
    _16 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
    goto BB6
  }
  BB6 {
    assume { resolve0 _17 };
    switch (_15)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    assert { [#"../06_knights_tour.rs" 113 4 114 74] false };
    absurd
  }
  BB8 {
    goto BB10
  }
  BB9 {
    [#"../06_knights_tour.rs" 125 4 125 7] _0 <- min;
    return _0
  }
  BB10 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _15;
    [#"../06_knights_tour.rs" 113 4 114 74] _20 <- ([#"../06_knights_tour.rs" 113 4 114 74] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    [#"../06_knights_tour.rs" 113 4 114 74] produced <- _20;
    _20 <- any Snapshot.snap_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] x <- __creusot_proc_iter_elem;
    switch (min)
      | Core_Option_Option_Type.C_None -> goto BB13
      | Core_Option_Option_Type.C_Some _ -> goto BB14
      end
  }
  BB12 {
    assert { [#"../06_knights_tour.rs" 116 14 116 17] false };
    absurd
  }
  BB13 {
    goto BB15
  }
  BB14 {
    [#"../06_knights_tour.rs" 118 17 118 18] m <- Core_Option_Option_Type.some_0 min;
    [#"../06_knights_tour.rs" 119 19 119 28] _28 <- (let (a, _) = x in a) < (let (a, _) = m in a);
    switch (_28)
      | False -> goto BB17
      | True -> goto BB16
      end
  }
  BB15 {
    [#"../06_knights_tour.rs" 117 26 117 33] _25 <- Core_Option_Option_Type.C_Some x;
    [#"../06_knights_tour.rs" 117 20 117 33] min <- _25;
    _25 <- any Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
    [#"../06_knights_tour.rs" 117 20 117 33] _23 <- ([#"../06_knights_tour.rs" 117 20 117 33] ());
    goto BB19
  }
  BB16 {
    [#"../06_knights_tour.rs" 120 26 120 33] _31 <- Core_Option_Option_Type.C_Some x;
    [#"../06_knights_tour.rs" 120 20 120 33] min <- _31;
    _31 <- any Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
    [#"../06_knights_tour.rs" 120 20 120 33] _23 <- ([#"../06_knights_tour.rs" 120 20 120 33] ());
    goto BB18
  }
  BB17 {
    [#"../06_knights_tour.rs" 121 17 121 17] _23 <- ([#"../06_knights_tour.rs" 121 17 121 17] ());
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB4
  }
  
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use prelude.UIntSize
  use prelude.Int
  use prelude.UIntSize
  constant a  : usize
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
  goal vc_dumb_nonlinear_arith : ([#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000)
   -> ([#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module C06KnightsTour_KnightsTour
  use prelude.IntSize
  use seq.Seq
  predicate invariant15 (self : Seq.seq (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant15 (self : Seq.seq (isize, isize)) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : Seq.seq (isize, isize))
  val inv15 (_x : Seq.seq (isize, isize)) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : Seq.seq (isize, isize) . inv15 x = true
  use prelude.UIntSize
  predicate inv11 (_x : Seq.seq usize)
  val inv11 (_x : Seq.seq usize) : bool
    ensures { result = inv11 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv14 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv14 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv14 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv14 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv14 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv11 (shallow_model2 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate invariant14 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv11 (shallow_model2 self)
  val invariant14 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant14 self }
    
  axiom inv14 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv14 x = true
  predicate invariant13 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant13 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv13 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv13 x = true
  use seq.Seq
  predicate inv12 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv12 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv12 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv12 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv12 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv13 (shallow_model1 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self)
  <= UIntSize.to_int max0)
  predicate invariant12 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv13 (shallow_model1 self)
  val invariant12 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant12 self }
    
  axiom inv12 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv12 x
  = true
  predicate invariant11 (self : Seq.seq usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : Seq.seq usize) : bool
    ensures { result = invariant11 self }
    
  axiom inv11 : forall x : Seq.seq usize . inv11 x = true
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  predicate invariant10 (self : (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : (usize, C06KnightsTour_Point_Type.t_point))
  val inv10 (_x : (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : (usize, C06KnightsTour_Point_Type.t_point) . inv10 x = true
  use prelude.Borrow
  predicate invariant9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv9 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) . inv9 x
  = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant8 (self : Core_Option_Option_Type.t_option (isize, isize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : Core_Option_Option_Type.t_option (isize, isize)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option (isize, isize))
  val inv8 (_x : Core_Option_Option_Type.t_option (isize, isize)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option (isize, isize) . inv8 x = true
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv7 (_x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) . inv7 x
  = true
  predicate invariant6 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point))
  val inv6 (_x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq (usize, C06KnightsTour_Point_Type.t_point) . inv6 x = true
  use seq.Seq
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv15 (shallow_model3 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max0)
  predicate invariant5 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv15 (shallow_model3 self)
  val invariant5 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv5 x = true
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model0 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) . inv4 x
  = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option usize)
  val inv3 (_x : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option usize . inv3 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant2 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv2 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv2 x = true
  use seq.Seq
  predicate inv1 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  val inv1 (_x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv1 _x }
    
  function shallow_model4 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    
  val shallow_model4 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (isize, isize)
    ensures { result = shallow_model4 self }
    
  predicate produces1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq (isize, isize)) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 237 12 237 41] shallow_model4 self
    = Seq.(++) visited (shallow_model4 rhs)
  val produces1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (visited : Seq.seq (isize, isize)) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = produces1 self visited rhs }
    
  function produces_trans1 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq (isize, isize)) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq (isize, isize)) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 246 4 246 10] ()
  val produces_trans1 (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ab : Seq.seq (isize, isize)) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (bc : Seq.seq (isize, isize)) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] produces1 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] produces1 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] inv1 a}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] inv15 ab}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] inv1 b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] inv15 bc}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] inv1 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), ab : Seq.seq (isize, isize), b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global), bc : Seq.seq (isize, isize), c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] produces1 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] produces1 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] inv1 a)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] inv15 ab)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] inv1 b)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] inv15 bc)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] inv1 c)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 250 14 250 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 241 4 241 10] ()
  val produces_refl1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 25] inv1 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 25] inv1 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 243 14 243 45] produces1 self (Seq.empty ) self)
  predicate invariant1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global) . inv1 x
  = true
  use seq.Seq
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv0 _x }
    
  use prelude.Int
  use seq.Seq
  function deep_model0 (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv11 ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv11 bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv11 ab)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv11 bc)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  predicate invariant0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv0 x = true
  use prelude.Snapshot
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate resolve8 (self : C06KnightsTour_Point_Type.t_point) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve8 (self : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = resolve8 self }
    
  predicate resolve7 (self : usize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve7 (self : usize) : bool
    ensures { result = resolve7 self }
    
  predicate resolve6 (self : (usize, C06KnightsTour_Point_Type.t_point)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve7 (let (a, _) = self in a)
    /\ resolve8 (let (_, a) = self in a)
  val resolve6 (self : (usize, C06KnightsTour_Point_Type.t_point)) : bool
    ensures { result = resolve6 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = index_logic0 self ix }
    
  predicate resolve4 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve6 (index_logic0 self i)
  val resolve4 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve4 self }
    
  function shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = shallow_model6 self }
    
  val min0 [#"../06_knights_tour.rs" 111 0 111 58] (v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../06_knights_tour.rs" 109 0 110 62] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result
    = Core_Option_Option_Type.C_Some r
     -> (exists i : int . 0 <= i /\ i < Seq.length (shallow_model6 v) /\ index_logic0 v i = r) }
    
  predicate resolve5 (self : isize) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve5 (self : isize) : bool
    ensures { result = resolve5 self }
    
  predicate resolve2 (self : (isize, isize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve5 (let (a, _) = self in a)
    /\ resolve5 (let (_, a) = self in a)
  val resolve2 (self : (isize, isize)) : bool
    ensures { result = resolve2 self }
    
  use seq.Seq
  predicate resolve3 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 222 8 222 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model4 self)  -> resolve2 (Seq.get (shallow_model4 self) i)
  val resolve3 (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve3 self }
    
  use seq.Seq
  function shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model0 ( * self)
  val shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
    ensures { result = shallow_model5 self }
    
  val push0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))) (value : (usize, C06KnightsTour_Point_Type.t_point)) : ()
    requires {inv9 self}
    requires {inv10 value}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 51] shallow_model0 ( ^ self)
    = Seq.snoc (shallow_model5 self) value }
    
  use prelude.IntSize
  predicate in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p)
    < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  val in_bounds0 [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds0 self p }
    
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic1 self ix }
    
  predicate wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000
    /\ Seq.length (shallow_model1 (C06KnightsTour_Board_Type.board_field self))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
    /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
     -> Seq.length (shallow_model2 (index_logic1 (C06KnightsTour_Board_Type.board_field self) i))
    = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf0 [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf0 self }
    
  val count_degree0 [#"../06_knights_tour.rs" 70 4 70 45] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : usize
    requires {[#"../06_knights_tour.rs" 68 15 68 24] wf0 self}
    requires {[#"../06_knights_tour.rs" 69 15 69 32] in_bounds0 self p}
    
  val available0 [#"../06_knights_tour.rs" 52 4 52 41] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] wf0 self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result  -> in_bounds0 self p }
    
  val mov0 [#"../06_knights_tour.rs" 18 4 18 45] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self)
    /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a)
    /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= IntSize.to_int (let (_, a) = p in a)
    /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result)
    = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result)
    = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a) }
    
  use seq.Seq
  predicate resolve1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve1 self }
    
  function shallow_model7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model4 ( * self)
  val shallow_model7 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (isize, isize)
    ensures { result = shallow_model7 self }
    
  predicate completed1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 230 20 230 57] resolve1 self /\ shallow_model7 self = Seq.empty 
  val completed1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = completed1 self }
    
  val next1 (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))) : Core_Option_Option_Type.t_option (isize, isize)
    requires {inv7 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv8 result }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 174 20 174 33] shallow_model3 self = shallow_model4 res
  val into_iter_post1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_post1 self res }
    
  predicate into_iter_pre1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 168 20 168 24] true
  val into_iter_pre1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = into_iter_pre1 self }
    
  val into_iter1 (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre1 self}
    requires {inv5 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post1 self result }
    ensures { inv1 result }
    
  function index_logic2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (isize, isize)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : (isize, isize)
    ensures { result = index_logic2 self ix }
    
  val moves0 [#"../06_knights_tour.rs" 95 0 95 33] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 93 10 93 28] Seq.length (shallow_model3 result) = 8 }
    ensures { [#"../06_knights_tour.rs" 94 0 94 130] forall i : int . 0 <= i /\ i < 8
     -> - 2 <= IntSize.to_int (let (a, _) = index_logic2 result i in a)
    /\ IntSize.to_int (let (a, _) = index_logic2 result i in a) <= 2
    /\ - 2 <= IntSize.to_int (let (_, a) = index_logic2 result i in a)
    /\ IntSize.to_int (let (_, a) = index_logic2 result i in a) <= 2 }
    
  val new1 (_1 : ()) : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (shallow_model0 result) = 0 }
    ensures { inv4 result }
    
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve0 self
    /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : Core_Option_Option_Type.t_option usize
    requires {inv2 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv3 result }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range usize) : Core_Ops_Range_Range_Type.t_range usize
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  use prelude.Snapshot
  function dumb_nonlinear_arith0 [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 128 0 128 8] ()
  val dumb_nonlinear_arith0 [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000}
    ensures { result = dumb_nonlinear_arith0 a }
    
  axiom dumb_nonlinear_arith0_spec : forall a : usize . ([#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a
  <= 1000)  -> ([#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
  val set0 [#"../06_knights_tour.rs" 87 4 87 41] (self : borrowed (C06KnightsTour_Board_Type.t_board)) (p : C06KnightsTour_Point_Type.t_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 83 15 83 24] wf0 ( * self)}
    requires {[#"../06_knights_tour.rs" 84 15 84 32] in_bounds0 ( * self) p}
    ensures { [#"../06_knights_tour.rs" 85 14 85 26] wf0 ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self)
    = C06KnightsTour_Board_Type.board_size ( * self) }
    
  val new0 [#"../06_knights_tour.rs" 40 4 40 31] (size : usize) : C06KnightsTour_Board_Type.t_board
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UIntSize.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] wf0 result }
    
  let rec cfg knights_tour [#"../06_knights_tour.rs" 136 0 136 69] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)
    requires {[#"../06_knights_tour.rs" 133 11 133 37] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 134 11 134 19] x < size}
    requires {[#"../06_knights_tour.rs" 135 11 135 19] y < size}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board);
  var size : usize = size;
  var x : usize = x;
  var y : usize = y;
  var board : C06KnightsTour_Board_Type.t_board;
  var p : C06KnightsTour_Point_Type.t_point;
  var _10 : isize;
  var _12 : isize;
  var _14 : ();
  var _15 : borrowed (C06KnightsTour_Board_Type.t_board);
  var _17 : Snapshot.snap_ty ();
  var iter : Core_Ops_Range_Range_Type.t_range usize;
  var _21 : Core_Ops_Range_Range_Type.t_range usize;
  var _22 : usize;
  var iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced : Snapshot.snap_ty (Seq.seq usize);
  var _34 : ();
  var _35 : Core_Option_Option_Type.t_option usize;
  var _36 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _37 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem : usize;
  var _40 : Snapshot.snap_ty (Seq.seq usize);
  var step : usize;
  var candidates : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var iter1 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var _46 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var iter_old1 : Snapshot.snap_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var produced1 : Snapshot.snap_ty (Seq.seq (isize, isize));
  var _54 : Core_Option_Option_Type.t_option (isize, isize);
  var _55 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _56 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem1 : (isize, isize);
  var _59 : Snapshot.snap_ty (Seq.seq (isize, isize));
  var m : (isize, isize);
  var adj : C06KnightsTour_Point_Type.t_point;
  var _65 : (isize, isize);
  var _66 : bool;
  var degree : usize;
  var _72 : ();
  var _73 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global));
  var _74 : (usize, C06KnightsTour_Point_Type.t_point);
  var _79 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _81 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var adj1 : C06KnightsTour_Point_Type.t_point;
  var _86 : ();
  var _87 : borrowed (C06KnightsTour_Board_Type.t_board);
  {
    goto BB0
  }
  BB0 {
    [#"../06_knights_tour.rs" 137 20 137 36] board <- ([#"../06_knights_tour.rs" 137 20 137 36] new0 size);
    goto BB1
  }
  BB1 {
    [#"../06_knights_tour.rs" 138 27 138 37] _10 <- IntSize.of_int (UIntSize.to_int x);
    [#"../06_knights_tour.rs" 138 42 138 52] _12 <- IntSize.of_int (UIntSize.to_int y);
    [#"../06_knights_tour.rs" 138 16 138 54] p <- C06KnightsTour_Point_Type.C_Point _10 _12;
    _10 <- any isize;
    _12 <- any isize;
    [#"../06_knights_tour.rs" 139 4 139 9] _15 <- Borrow.borrow_mut board;
    [#"../06_knights_tour.rs" 139 4 139 9] board <-  ^ _15;
    [#"../06_knights_tour.rs" 139 4 139 19] _14 <- ([#"../06_knights_tour.rs" 139 4 139 19] set0 _15 p ([#"../06_knights_tour.rs" 139 17 139 18] (1 : usize)));
    _15 <- any borrowed (C06KnightsTour_Board_Type.t_board);
    goto BB2
  }
  BB2 {
    [#"../06_knights_tour.rs" 141 4 141 44] _17 <- ([#"../06_knights_tour.rs" 141 4 141 44] Snapshot.new (dumb_nonlinear_arith0 size));
    goto BB3
  }
  BB3 {
    [#"../06_knights_tour.rs" 145 19 145 32] _22 <- size * size;
    [#"../06_knights_tour.rs" 145 16 145 32] _21 <- Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 145 16 145 17] (2 : usize)) _22;
    _22 <- any usize;
    [#"../06_knights_tour.rs" 142 4 142 36] iter <- ([#"../06_knights_tour.rs" 142 4 142 36] into_iter0 _21);
    _21 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB4
  }
  BB4 {
    [#"../06_knights_tour.rs" 142 4 142 36] iter_old <- ([#"../06_knights_tour.rs" 142 4 142 36] Snapshot.new iter);
    goto BB5
  }
  BB5 {
    [#"../06_knights_tour.rs" 142 4 142 36] produced <- ([#"../06_knights_tour.rs" 142 4 142 36] Snapshot.new (Seq.empty ));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant { [#"../06_knights_tour.rs" 142 4 142 36] inv0 iter };
    invariant { [#"../06_knights_tour.rs" 142 4 142 36] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../06_knights_tour.rs" 142 16 142 34] C06KnightsTour_Board_Type.board_size board = size };
    invariant { [#"../06_knights_tour.rs" 143 16 143 26] wf0 board };
    invariant { [#"../06_knights_tour.rs" 144 16 144 34] in_bounds0 board p };
    goto BB10
  }
  BB10 {
    [#"../06_knights_tour.rs" 142 4 142 36] _37 <- Borrow.borrow_mut iter;
    [#"../06_knights_tour.rs" 142 4 142 36] iter <-  ^ _37;
    [#"../06_knights_tour.rs" 142 4 142 36] _36 <- Borrow.borrow_final ( * _37) (Borrow.get_id _37);
    [#"../06_knights_tour.rs" 142 4 142 36] _37 <- { _37 with current = ( ^ _36) ; };
    [#"../06_knights_tour.rs" 142 4 142 36] _35 <- ([#"../06_knights_tour.rs" 142 4 142 36] next0 _36);
    _36 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB11
  }
  BB11 {
    assume { resolve0 _37 };
    switch (_35)
      | Core_Option_Option_Type.C_None -> goto BB14
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB12 {
    assert { [#"../06_knights_tour.rs" 142 4 142 36] false };
    absurd
  }
  BB13 {
    goto BB15
  }
  BB14 {
    [#"../06_knights_tour.rs" 163 4 163 15] _0 <- Core_Option_Option_Type.C_Some board;
    board <- any C06KnightsTour_Board_Type.t_board;
    goto BB48
  }
  BB15 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _35;
    [#"../06_knights_tour.rs" 142 4 142 36] _40 <- ([#"../06_knights_tour.rs" 142 4 142 36] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB16
  }
  BB16 {
    [#"../06_knights_tour.rs" 142 4 142 36] produced <- _40;
    _40 <- any Snapshot.snap_ty (Seq.seq usize);
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] step <- __creusot_proc_iter_elem;
    [#"../06_knights_tour.rs" 147 50 147 60] candidates <- ([#"../06_knights_tour.rs" 147 50 147 60] new1 ([#"../06_knights_tour.rs" 147 50 147 60] ()));
    goto BB17
  }
  BB17 {
    [#"../06_knights_tour.rs" 150 17 150 24] _46 <- ([#"../06_knights_tour.rs" 150 17 150 24] moves0 ([#"../06_knights_tour.rs" 150 17 150 24] ()));
    goto BB18
  }
  BB18 {
    [#"../06_knights_tour.rs" 148 8 149 54] iter1 <- ([#"../06_knights_tour.rs" 148 8 149 54] into_iter1 _46);
    _46 <- any Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
    goto BB19
  }
  BB19 {
    [#"../06_knights_tour.rs" 148 8 149 54] iter_old1 <- ([#"../06_knights_tour.rs" 148 8 149 54] Snapshot.new iter1);
    goto BB20
  }
  BB20 {
    [#"../06_knights_tour.rs" 148 8 149 54] produced1 <- ([#"../06_knights_tour.rs" 148 8 149 54] Snapshot.new (Seq.empty ));
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    invariant { [#"../06_knights_tour.rs" 148 8 149 54] inv1 iter1 };
    invariant { [#"../06_knights_tour.rs" 148 8 149 54] produces1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1 };
    invariant { [#"../06_knights_tour.rs" 148 8 149 54] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 candidates)  -> in_bounds0 board (let (_, a) = index_logic0 candidates i in a) };
    goto BB26
  }
  BB26 {
    [#"../06_knights_tour.rs" 148 8 149 54] _56 <- Borrow.borrow_mut iter1;
    [#"../06_knights_tour.rs" 148 8 149 54] iter1 <-  ^ _56;
    [#"../06_knights_tour.rs" 148 8 149 54] _55 <- Borrow.borrow_final ( * _56) (Borrow.get_id _56);
    [#"../06_knights_tour.rs" 148 8 149 54] _56 <- { _56 with current = ( ^ _55) ; };
    [#"../06_knights_tour.rs" 148 8 149 54] _54 <- ([#"../06_knights_tour.rs" 148 8 149 54] next1 _55);
    _55 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
    goto BB27
  }
  BB27 {
    assume { resolve1 _56 };
    switch (_54)
      | Core_Option_Option_Type.C_None -> goto BB30
      | Core_Option_Option_Type.C_Some _ -> goto BB29
      end
  }
  BB28 {
    assume { resolve3 iter1 };
    assume { resolve4 candidates };
    assert { [#"../06_knights_tour.rs" 148 8 149 54] false };
    absurd
  }
  BB29 {
    goto BB31
  }
  BB30 {
    assume { resolve3 iter1 };
    goto BB40
  }
  BB31 {
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem1 <- Core_Option_Option_Type.some_0 _54;
    [#"../06_knights_tour.rs" 148 8 149 54] _59 <- ([#"../06_knights_tour.rs" 148 8 149 54] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)));
    goto BB32
  }
  BB32 {
    [#"../06_knights_tour.rs" 148 8 149 54] produced1 <- _59;
    _59 <- any Snapshot.snap_ty (Seq.seq (isize, isize));
    [#"../../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] m <- __creusot_proc_iter_elem1;
    assume { resolve2 __creusot_proc_iter_elem1 };
    [#"../06_knights_tour.rs" 151 28 151 30] _65 <- m;
    [#"../06_knights_tour.rs" 151 22 151 31] adj <- ([#"../06_knights_tour.rs" 151 22 151 31] mov0 p _65);
    goto BB33
  }
  BB33 {
    assume { resolve2 m };
    [#"../06_knights_tour.rs" 152 15 152 35] _66 <- ([#"../06_knights_tour.rs" 152 15 152 35] available0 board adj);
    goto BB34
  }
  BB34 {
    switch (_66)
      | False -> goto BB38
      | True -> goto BB35
      end
  }
  BB35 {
    [#"../06_knights_tour.rs" 153 29 153 52] degree <- ([#"../06_knights_tour.rs" 153 29 153 52] count_degree0 board adj);
    goto BB36
  }
  BB36 {
    [#"../06_knights_tour.rs" 154 16 154 26] _73 <- Borrow.borrow_mut candidates;
    [#"../06_knights_tour.rs" 154 16 154 26] candidates <-  ^ _73;
    [#"../06_knights_tour.rs" 154 32 154 45] _74 <- (degree, adj);
    [#"../06_knights_tour.rs" 154 16 154 46] _72 <- ([#"../06_knights_tour.rs" 154 16 154 46] push0 _73 _74);
    _73 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global));
    _74 <- any (usize, C06KnightsTour_Point_Type.t_point);
    goto BB37
  }
  BB37 {
    [#"../06_knights_tour.rs" 152 36 155 13] _34 <- ([#"../06_knights_tour.rs" 152 36 155 13] ());
    goto BB39
  }
  BB38 {
    [#"../06_knights_tour.rs" 155 13 155 13] _34 <- ([#"../06_knights_tour.rs" 155 13 155 13] ());
    goto BB39
  }
  BB39 {
    goto BB25
  }
  BB40 {
    [#"../06_knights_tour.rs" 157 18 157 29] _81 <- candidates;
    [#"../06_knights_tour.rs" 157 14 157 30] _79 <- ([#"../06_knights_tour.rs" 157 14 157 30] min0 _81);
    goto BB41
  }
  BB41 {
    switch (_79)
      | Core_Option_Option_Type.C_None -> goto BB44
      | Core_Option_Option_Type.C_Some _ -> goto BB43
      end
  }
  BB42 {
    assume { resolve4 candidates };
    assert { [#"../06_knights_tour.rs" 157 14 157 30] false };
    absurd
  }
  BB43 {
    goto BB45
  }
  BB44 {
    [#"../06_knights_tour.rs" 159 27 159 31] _0 <- Core_Option_Option_Type.C_None;
    assume { resolve4 candidates };
    goto BB50
  }
  BB45 {
    [#"../06_knights_tour.rs" 158 22 158 25] adj1 <- (let (_, a) = Core_Option_Option_Type.some_0 _79 in a);
    assume { resolve4 candidates };
    [#"../06_knights_tour.rs" 158 31 158 38] p <- adj1;
    [#"../06_knights_tour.rs" 161 8 161 13] _87 <- Borrow.borrow_mut board;
    [#"../06_knights_tour.rs" 161 8 161 13] board <-  ^ _87;
    [#"../06_knights_tour.rs" 161 8 161 26] _86 <- ([#"../06_knights_tour.rs" 161 8 161 26] set0 _87 p step);
    _87 <- any borrowed (C06KnightsTour_Board_Type.t_board);
    goto BB46
  }
  BB46 {
    [#"../06_knights_tour.rs" 145 33 162 5] _34 <- ([#"../06_knights_tour.rs" 145 33 162 5] ());
    goto BB47
  }
  BB47 {
    goto BB9
  }
  BB48 {
    goto BB49
  }
  BB49 {
    goto BB52
  }
  BB50 {
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    return _0
  }
  
end
module C06KnightsTour_Impl2
  
end
module C06KnightsTour_Impl3
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  predicate invariant1 (self : C06KnightsTour_Point_Type.t_point) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : C06KnightsTour_Point_Type.t_point)
  val inv1 (_x : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : C06KnightsTour_Point_Type.t_point . inv1 x = true
  predicate invariant0 (self : C06KnightsTour_Point_Type.t_point) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06KnightsTour_Point_Type.t_point)
  val inv0 (_x : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06KnightsTour_Point_Type.t_point . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../06_knights_tour.rs" 4 15 4 20] forall self : C06KnightsTour_Point_Type.t_point . inv0 self
   -> (forall result : C06KnightsTour_Point_Type.t_point . result = self  -> inv1 result /\ result = self)
end
