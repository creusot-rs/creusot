
module C06KnightsTour_Point_Type
  use prelude.Int
  use prelude.IntSize
  type t_point  =
    | C_Point isize isize
    
  let function point_x (self : t_point) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Point a _ -> a
      end
  let function point_y (self : t_point) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Point _ a -> a
      end
end
module Core_Clone_Impls_Impl11_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  val clone' (self : isize) : isize
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module C06KnightsTour_Impl3_Clone_Interface
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  val clone' [#"../06_knights_tour.rs" 4 15 4 20] (self : C06KnightsTour_Point_Type.t_point) : C06KnightsTour_Point_Type.t_point
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
end
module C06KnightsTour_Impl3_Clone
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  clone Core_Clone_Impls_Impl11_Clone_Interface as Clone0
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  let rec cfg clone' [#"../06_knights_tour.rs" 4 15 4 20] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Point_Type.t_point) : C06KnightsTour_Point_Type.t_point
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.t_point;
  var self : C06KnightsTour_Point_Type.t_point = self;
  var _3 : isize;
  var _5 : isize;
  var _6 : isize;
  var _8 : isize;
  {
    goto BB0
  }
  BB0 {
    _5 <- ([#"../06_knights_tour.rs" 6 4 6 12] C06KnightsTour_Point_Type.point_x self);
    _3 <- ([#"../06_knights_tour.rs" 6 4 6 12] Clone0.clone' ([#"../06_knights_tour.rs" 6 4 6 12] _5));
    goto BB1
  }
  BB1 {
    _8 <- ([#"../06_knights_tour.rs" 7 4 7 12] C06KnightsTour_Point_Type.point_y self);
    _6 <- ([#"../06_knights_tour.rs" 7 4 7 12] Clone0.clone' ([#"../06_knights_tour.rs" 7 4 7 12] _8));
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_knights_tour.rs" 4 15 4 20] C06KnightsTour_Point_Type.C_Point _3 _6);
    _3 <- any isize;
    _6 <- any isize;
    return _0
  }
  
end
module C06KnightsTour_Impl0_Mov_Interface
  use prelude.IntSize
  use prelude.Int
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  val mov [#"../06_knights_tour.rs" 18 4 18 45] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self) /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self) /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a) /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= IntSize.to_int (let (_, a) = p in a) /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result) = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result) = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a) }
    
end
module C06KnightsTour_Impl0_Mov
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  let rec cfg mov [#"../06_knights_tour.rs" 18 4 18 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Point_Type.t_point) (p : (isize, isize)) : C06KnightsTour_Point_Type.t_point
    requires {[#"../06_knights_tour.rs" 12 15 12 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x self) /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 52] - 10000 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y self) /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 46] - 10000 <= IntSize.to_int (let (a, _) = p in a) /\ IntSize.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 46] - 10000 <= IntSize.to_int (let (_, a) = p in a) /\ IntSize.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 41] IntSize.to_int (C06KnightsTour_Point_Type.point_x result) = IntSize.to_int (C06KnightsTour_Point_Type.point_x self) + IntSize.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 41] IntSize.to_int (C06KnightsTour_Point_Type.point_y result) = IntSize.to_int (C06KnightsTour_Point_Type.point_y self) + IntSize.to_int (let (_, a) = p in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.t_point;
  var self : C06KnightsTour_Point_Type.t_point = self;
  var p : (isize, isize) = p;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../06_knights_tour.rs" 19 8 19 53] C06KnightsTour_Point_Type.C_Point ([#"../06_knights_tour.rs" 19 18 19 32] C06KnightsTour_Point_Type.point_x self + (let (a, _) = p in a)) ([#"../06_knights_tour.rs" 19 37 19 51] C06KnightsTour_Point_Type.point_y self + (let (_, a) = p in a)));
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C06KnightsTour_Board_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_board  =
    | C_Board usize (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  let function board_size (self : t_board) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Board a _ -> a
      end
  let function board_field (self : t_board) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Board _ a -> a
      end
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module C06KnightsTour_Impl1_Wf_Stub
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board)
end
module C06KnightsTour_Impl1_Wf_Interface
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board)
  val wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf self }
    
end
module C06KnightsTour_Impl1_Wf
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) =
    [#"../06_knights_tour.rs" 31 8 35 9] UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) <= 1000 /\ Seq.length (ShallowModel0.shallow_model (C06KnightsTour_Board_Type.board_field self)) = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) -> Seq.length (ShallowModel1.shallow_model (IndexLogic0.index_logic (C06KnightsTour_Board_Type.board_field self) i)) = UIntSize.to_int (C06KnightsTour_Board_Type.board_size self))
  val wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.t_board) : bool
    ensures { result = wf self }
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use prelude.Ghost
  use seq.Seq
  type t_mapinv 'i 'b 'f =
    | C_MapInv 'i 'f (Ghost.ghost_ty (Seq.seq 'b))
    
  let function mapinv_iter (self : t_mapinv 'i 'b 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv a _ _ -> a
      end
  let function mapinv_func (self : t_mapinv 'i 'b 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ a _ -> a
      end
  let function mapinv_produced (self : t_mapinv 'i 'b 'f) : Ghost.ghost_ty (Seq.seq 'b)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MapInv _ _ a -> a
      end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val from_elem (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    requires {Inv0.inv elem}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int n }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> IndexLogic0.index_logic result i = elem }
    ensures { Inv1.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C06KnightsTour_Impl1_New_Closure3_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  type c06knightstour_impl1_new_closure3  =
    | C06KnightsTour_Impl1_New_Closure3 usize
    
end
module C06KnightsTour_Impl1_New_Closure3_Interface
  use export C06KnightsTour_Impl1_New_Closure3_Type
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use prelude.Ghost
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  let function field_0 [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_knights_tour.rs" 1 0 1 0] let C06KnightsTour_Impl1_New_Closure3 a = self in a
  predicate resolve [#"../06_knights_tour.rs" 43 16 43 50] (_1 : c06knightstour_impl1_new_closure3) =
    [#"../06_knights_tour.rs" 1 0 1 0] true
  predicate unnest [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) (_2 : c06knightstour_impl1_new_closure3)
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize)))
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] let (_2, _3) = args in true
  predicate postcondition_once [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../06_knights_tour.rs" 43 26 43 48] let (_2, _3) = args in Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int (field_0 self)
  predicate postcondition_mut [#"../06_knights_tour.rs" 43 16 43 50] (self : borrowed c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] (let (_2, _3) = args in Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int (field_0 ( ^ self))) /\ unnest ( * self) ( ^ self)
  val c06KnightsTour_Impl1_New_Closure3 [#"../06_knights_tour.rs" 43 16 43 50] (_1 : borrowed c06knightstour_impl1_new_closure3) (_2 : usize) (_3 : Ghost.ghost_ty (Seq.seq usize)) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 43 26 43 48] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int (field_0 ( ^ _1)) }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C06KnightsTour_Impl1_New_Closure3
  use export C06KnightsTour_Impl1_New_Closure3_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = usize,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv1.inv
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c06knightstour_impl1_new_closure3
  let function field_0 [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_knights_tour.rs" 1 0 1 0] let C06KnightsTour_Impl1_New_Closure3 a = self in a
  predicate resolve [#"../06_knights_tour.rs" 43 16 43 50] (_1 : c06knightstour_impl1_new_closure3) =
    [#"../06_knights_tour.rs" 1 0 1 0] true
  predicate unnest [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) (_2 : c06knightstour_impl1_new_closure3)
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize)))
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] let (_2, _3) = args in true
  predicate postcondition_once [#"../06_knights_tour.rs" 43 16 43 50] (self : c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../06_knights_tour.rs" 43 26 43 48] let (_2, _3) = args in Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int (field_0 self)
  predicate postcondition_mut [#"../06_knights_tour.rs" 43 16 43 50] (self : borrowed c06knightstour_impl1_new_closure3) (args : (usize, Ghost.ghost_ty (Seq.seq usize))) (result : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../06_knights_tour.rs" 1 0 1 0] (let (_2, _3) = args in Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int (field_0 ( ^ self))) /\ unnest ( * self) ( ^ self)
  let rec cfg c06KnightsTour_Impl1_New_Closure3 [#"../06_knights_tour.rs" 43 16 43 50] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed c06knightstour_impl1_new_closure3) (_2 : usize) (_3 : Ghost.ghost_ty (Seq.seq usize)) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 43 26 43 48] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int (field_0 ( ^ _1)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _1 : borrowed c06knightstour_impl1_new_closure3 = _1;
  var res : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _1 };
    res <- ([#"../06_knights_tour.rs" 44 23 44 36] FromElem0.from_elem ([#"../06_knights_tour.rs" 44 28 44 29] [#"../06_knights_tour.rs" 44 28 44 29] (0 : usize)) (field_0 ( * _1)));
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- res;
    res <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  predicate next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  predicate next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item)
  val next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item) : bool
    ensures { result = next_precondition iter func produced }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 112 8 116 9] forall i : i . forall e : Item0.item . Inv0.inv i -> Inv1.inv e -> Produces0.produces iter (Seq.singleton e) i -> Precondition0.precondition func (e, Ghost.new produced)
  val next_precondition (iter : i) (func : f) (produced : Seq.seq Item0.item) : bool
    ensures { result = next_precondition iter func produced }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Interface
  type i
  type b
  type f
  predicate preservation (iter : i) (func : f)
  val preservation (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  predicate preservation (iter : i) (func : f) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 135 8 142 9] forall i : i . forall b : b . forall f : borrowed f . forall e2 : Item0.item . forall e1 : Item0.item . forall s : Seq.seq Item0.item . Inv0.inv i -> Inv1.inv b -> Inv2.inv f -> Inv3.inv e2 -> Inv3.inv e1 -> Inv4.inv s -> Unnest0.unnest func ( * f) -> Produces0.produces iter (Seq.snoc (Seq.snoc s e1) e2) i -> Precondition0.precondition ( * f) (e1, Ghost.new s) -> PostconditionMut0.postcondition_mut f (e1, Ghost.new s) b -> Precondition0.precondition ( ^ f) (e2, Ghost.new (Seq.snoc s e1))
  val preservation (iter : i) (func : f) : bool
    ensures { result = preservation iter func }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub
  type i
  type b
  type f
  predicate reinitialize (_1 : ())
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Interface
  type i
  type b
  type f
  predicate reinitialize (_1 : ())
  val reinitialize (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = i,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition_Stub as NextPrecondition0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  predicate reinitialize (_1 : ()) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 148 8 153 9] forall func : f . forall iter : borrowed i . Inv0.inv func -> Inv1.inv iter -> Completed0.completed iter -> NextPrecondition0.next_precondition ( ^ iter) func (Seq.empty ) /\ Preservation0.preservation ( ^ iter) func
  val reinitialize (_1 : ()) : bool
    ensures { result = reinitialize _1 }
    
end
module CreusotContracts_Std1_Iter_Iterator_MapInv_Interface
  type self
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation_Stub as Preservation0 with
    type i = self,
    type b = b,
    type f = f
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize_Stub as Reinitialize0 with
    type i = self,
    type b = b,
    type f = f
  val map_inv (self : self) (func : f) : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv self Item0.item f
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 43 4 43 138] forall i2 : self . forall e : Item0.item . Inv0.inv i2 -> Inv1.inv e -> Produces0.produces self (Seq.singleton e) i2 -> Precondition0.precondition func (e, Ghost.new (Seq.empty ))}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 44 15 44 51] Reinitialize0.reinitialize ()}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 45 15 45 70] Preservation0.preservation self func}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 21 47 25] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 47 27 47 31] Inv2.inv func}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 46 14 46 85] result = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.C_MapInv self func (Ghost.new (Seq.empty )) }
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 47 4 50 58] Inv3.inv result }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Stub
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Interface
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
  val from_iter_post (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
  val from_iter_post (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_post prod res }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect_Interface
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = b
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Stub as FromIterPost0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val collect (self : self) : b
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 130 16 131 84] exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Inv1.inv prod /\ Inv2.inv done_ /\ Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterPost0.from_iter_post prod result }
    ensures { Inv3.inv result }
    
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl (a : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 35 21 35 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../../../../../creusot-contracts/src/std/iter.rs" 38 15 38 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 39 15 39 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 22 41 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 31 41 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 52 41 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 61 41 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 41 82 41 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_MapInv_MapInv_Type_Inv
  type i
  type b
  type f
  use prelude.Ghost
  use prelude.Seq
  use prelude.Int
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f
  axiom inv_t_mapinv [@rewrite] : forall self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f . Inv0.inv self = ((Inv1.inv (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ Inv2.inv (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)) /\ (forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) -> Inv3.inv (Seq.get (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) i)))
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Stub
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve_Interface
  type i
  type b
  type f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f)
  val resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve
  type i
  type b
  type f
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 56 4 56 16] Resolve0.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) /\ Resolve1.resolve (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self)
  val resolve (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i b f) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Stub
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f))
  val completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9] Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced ( ^ self)) = Seq.empty  /\ Completed0.completed {current = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( * self); final = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter ( ^ self)} /\ CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( * self) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func ( ^ self)
  val completed (self : borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
  val produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  use prelude.Int
  use seq_ext.SeqExt
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed f)
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = (Item0.item, Ghost.ghost_ty (Seq.seq Item0.item)),
    type f = f
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  predicate produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f)
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9] Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ) /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Seq.length s = Seq.length visited /\ Produces0.produces (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter self) s (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_iter succ) /\ Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced succ) = Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) s /\ (exists fs : Seq.seq (borrowed f) . Inv1.inv fs /\ Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (if Seq.length visited = 0 then
      CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    else
       * Seq.get fs 0 = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self /\  ^ Seq.get fs (Seq.length visited - 1) = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func succ
    ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Unnest0.unnest (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_func self) ( * Seq.get fs i) /\ Precondition0.precondition ( * Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) /\ PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get s i, Ghost.new (Seq.(++) (Ghost.inner (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.mapinv_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  val produces [@inline:trivial] (self : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (visited : Seq.seq b) (succ : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module CreusotContracts_Std1_Vec_Impl9_FromIterPost_Stub
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_FromIterPost_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Std1_Vec_Impl9_FromIterPost
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 258 20 258 32] prod = ShallowModel0.shallow_model res
  val from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"../../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Resolve_Impl3_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl3_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl3_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
  val produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  function produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : () =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 21 4 21 10] ()
  val produces_refl (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 24 21 24 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Stub
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
  val produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = i
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type b = b,
    type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 26 4 26 10] ()
  val produces_trans (a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (ab : Seq.seq b) (b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) (bc : Seq.seq b) (c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, ab : Seq.seq b, b : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f, bc : Seq.seq b, c : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv i Item0.item f . ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 22 31 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 31 31 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 52 31 53] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 61 31 63] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 31 82 31 83] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06KnightsTour_Impl1_New_Interface
  use prelude.UIntSize
  use prelude.Int
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val new [#"../06_knights_tour.rs" 40 4 40 31] (size : usize) : C06KnightsTour_Board_Type.t_board
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UIntSize.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] Wf0.wf result }
    
end
module C06KnightsTour_Impl1_New
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq usize
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone C06KnightsTour_Impl1_New_Closure3_Interface as Closure30 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Seq.seq (borrowed Closure30.c06knightstour_impl1_new_closure3)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Seq.seq (borrowed Closure30.c06knightstour_impl1_new_closure3),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = borrowed Closure30.c06knightstour_impl1_new_closure3
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = borrowed Closure30.c06knightstour_impl1_new_closure3,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use CreusotContracts_Std1_Iter_MapInv_MapInv_Type as CreusotContracts_Std1_Iter_MapInv_MapInv_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Produces as Produces1 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = usize,
    predicate Inv0.inv = Inv8.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv11.inv
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesTrans_Interface as ProducesTrans2 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv4.inv,
    type Item0.item = usize,
    axiom .
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_ProducesRefl_Interface as ProducesRefl2 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = usize,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed (CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Closure30.c06knightstour_impl1_new_closure3
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_MapInv_MapInv_Type_Inv as CreusotContracts_Std1_Iter_MapInv_MapInv_Type_Inv0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = usize,
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv0.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Closure30.c06knightstour_impl1_new_closure3,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans1 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl1 with
    type idx = usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv8.inv,
    type Item0.item = usize,
    axiom .
  clone CreusotContracts_Std1_Iter_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = usize,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl9_FromIterPost as FromIterPost0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed1 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve2.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_MapInv_Impl0_Completed as Completed0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    type Item0.item = usize,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_MapInv_Impl4_Resolve as Resolve0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = usize,
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Resolve1.resolve = Closure30.resolve,
    predicate Resolve0.resolve = Resolve1.resolve
  clone Core_Iter_Traits_Iterator_Iterator_Collect_Interface as Collect0 with
    type self = CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3,
    type b = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type Item0.item = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate FromIterPost0.from_iter_post = FromIterPost0.from_iter_post,
    predicate Inv3.inv = Inv6.inv
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Preservation as Preservation0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Unnest0.unnest = Closure30.unnest,
    predicate Precondition0.precondition = Closure30.precondition,
    predicate PostconditionMut0.postcondition_mut = Closure30.postcondition_mut,
    type Item0.item = usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv10.inv,
    predicate Inv3.inv = Inv1.inv,
    predicate Inv4.inv = Inv8.inv,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_NextPrecondition as NextPrecondition0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Iter_MapInv_Impl3_Reinitialize as Reinitialize0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate NextPrecondition0.next_precondition = NextPrecondition0.next_precondition,
    predicate Preservation0.preservation = Preservation0.preservation,
    type Item0.item = usize
  clone CreusotContracts_Std1_Iter_Iterator_MapInv_Interface as MapInv0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type f = Closure30.c06knightstour_impl1_new_closure3,
    predicate Precondition0.precondition = Closure30.precondition,
    type Item0.item = usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Reinitialize0.reinitialize = Reinitialize0.reinitialize,
    predicate Preservation0.preservation = Preservation0.preservation,
    predicate Inv2.inv = Inv2.inv,
    predicate Inv3.inv = Inv3.inv
  let rec cfg new [#"../06_knights_tour.rs" 40 4 40 31] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) : C06KnightsTour_Board_Type.t_board
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UIntSize.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] Wf0.wf result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Board_Type.t_board;
  var size : usize = size;
  var rows : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _6 : CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3;
  {
    goto BB0
  }
  BB0 {
    _6 <- ([#"../06_knights_tour.rs" 41 19 45 13] MapInv0.map_inv ([#"../06_knights_tour.rs" 41 19 41 28] Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 41 20 41 21] [#"../06_knights_tour.rs" 41 20 41 21] (0 : usize)) size) ([#"../06_knights_tour.rs" 43 16 43 50] Closure30.C06KnightsTour_Impl1_New_Closure3 ([#"../06_knights_tour.rs" 43 16 43 50] size)));
    goto BB1
  }
  BB1 {
    rows <- ([#"../06_knights_tour.rs" 41 19 46 22] Collect0.collect _6);
    _6 <- any CreusotContracts_Std1_Iter_MapInv_MapInv_Type.t_mapinv (Core_Ops_Range_Range_Type.t_range usize) usize Closure30.c06knightstour_impl1_new_closure3;
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_knights_tour.rs" 47 8 47 34] C06KnightsTour_Board_Type.C_Board size rows);
    rows <- any Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C06KnightsTour_Impl1_InBounds_Stub
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
end
module C06KnightsTour_Impl1_InBounds_Interface
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
  val in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds self p }
    
end
module C06KnightsTour_Impl1_InBounds
  use prelude.IntSize
  use prelude.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  predicate in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point)
    
   =
    [#"../06_knights_tour.rs" 63 12 63 75] 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_x p) /\ IntSize.to_int (C06KnightsTour_Point_Type.point_x p) < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self) /\ 0 <= IntSize.to_int (C06KnightsTour_Point_Type.point_y p) /\ IntSize.to_int (C06KnightsTour_Point_Type.point_y p) < UIntSize.to_int (C06KnightsTour_Board_Type.board_size self)
  val in_bounds [#"../06_knights_tour.rs" 61 4 61 40] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    ensures { result = in_bounds self p }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl12_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  use seq.Seq
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    ensures { Inv2.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 108 20 108 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module C06KnightsTour_Impl1_Available_Interface
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Stub as InBounds0
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val available [#"../06_knights_tour.rs" 52 4 52 41] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result -> InBounds0.in_bounds self p }
    
end
module C06KnightsTour_Impl1_Available
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds2 with
    type t = usize
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl12_Index_Interface as Index1 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate HasValue0.has_value = HasValue1.has_value,
    predicate Inv2.inv = Inv3.inv,
    type Output0.output = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Alloc_Vec_Impl12_Index_Interface as Index0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv2.inv
  let rec cfg available [#"../06_knights_tour.rs" 52 4 52 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : bool
    requires {[#"../06_knights_tour.rs" 50 15 50 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 51 4 51 44] result -> InBounds0.in_bounds self p }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : C06KnightsTour_Board_Type.t_board = self;
  var p : C06KnightsTour_Point_Type.t_point = p;
  var _5 : bool;
  var _6 : bool;
  var _7 : bool;
  var _22 : usize;
  var _24 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    switch ([#"../06_knights_tour.rs" 53 8 53 16] ([#"../06_knights_tour.rs" 53 8 53 9] [#"../06_knights_tour.rs" 53 8 53 9] (0 : isize)) <= C06KnightsTour_Point_Type.point_x p)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB1 {
    _0 <- ([#"../06_knights_tour.rs" 53 8 57 58] [#"../06_knights_tour.rs" 53 8 57 58] false);
    goto BB3
  }
  BB2 {
    _24 <- ([#"../06_knights_tour.rs" 57 15 57 39] Index0.index ([#"../06_knights_tour.rs" 57 15 57 25] C06KnightsTour_Board_Type.board_field self) ([#"../06_knights_tour.rs" 57 26 57 38] UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_x p))));
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _5 <- ([#"../06_knights_tour.rs" 53 8 56 41] [#"../06_knights_tour.rs" 53 8 56 41] false);
    goto BB6
  }
  BB5 {
    _5 <- ([#"../06_knights_tour.rs" 56 15 56 41] ([#"../06_knights_tour.rs" 56 15 56 29] UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_y p))) < C06KnightsTour_Board_Type.board_size self);
    goto BB6
  }
  BB6 {
    switch (_5)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB7 {
    _6 <- ([#"../06_knights_tour.rs" 53 8 55 23] [#"../06_knights_tour.rs" 53 8 55 23] false);
    goto BB9
  }
  BB8 {
    _6 <- ([#"../06_knights_tour.rs" 55 15 55 23] ([#"../06_knights_tour.rs" 55 15 55 16] [#"../06_knights_tour.rs" 55 15 55 16] (0 : isize)) <= C06KnightsTour_Point_Type.point_y p);
    goto BB9
  }
  BB9 {
    switch (_6)
      | False -> goto BB4
      | True -> goto BB5
      end
  }
  BB10 {
    _7 <- ([#"../06_knights_tour.rs" 53 8 54 41] [#"../06_knights_tour.rs" 53 8 54 41] false);
    goto BB12
  }
  BB11 {
    _7 <- ([#"../06_knights_tour.rs" 54 15 54 41] ([#"../06_knights_tour.rs" 54 15 54 29] UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_x p))) < C06KnightsTour_Board_Type.board_size self);
    goto BB12
  }
  BB12 {
    switch (_7)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB13 {
    _22 <- ([#"../06_knights_tour.rs" 57 15 57 53] Index1.index ([#"../06_knights_tour.rs" 57 15 57 39] _24) ([#"../06_knights_tour.rs" 57 40 57 52] UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_y p))));
    goto BB14
  }
  BB14 {
    _0 <- ([#"../06_knights_tour.rs" 57 15 57 58] _22 = ([#"../06_knights_tour.rs" 57 57 57 58] [#"../06_knights_tour.rs" 57 57 57 58] (0 : usize)));
    goto BB3
  }
  
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl7_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl7_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 237 12 237 41] ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 222 8 222 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module C06KnightsTour_Moves_Interface
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  val moves [#"../06_knights_tour.rs" 95 0 95 33] (_1 : ()) : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../06_knights_tour.rs" 93 10 93 28] Seq.length (ShallowModel0.shallow_model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 94 0 94 130] forall i : int . 0 <= i /\ i < 8 -> - 2 <= IntSize.to_int (let (a, _) = IndexLogic0.index_logic result i in a) /\ IntSize.to_int (let (a, _) = IndexLogic0.index_logic result i in a) <= 2 /\ - 2 <= IntSize.to_int (let (_, a) = IndexLogic0.index_logic result i in a) /\ IntSize.to_int (let (_, a) = IndexLogic0.index_logic result i in a) <= 2 }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 168 20 168 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 174 20 174 33] ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl15_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 230 20 230 57] Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl8_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val next (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 241 4 241 10] ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 246 4 246 10] ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc}
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"../../../../../creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06KnightsTour_Impl1_CountDegree_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Stub as InBounds0
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val count_degree [#"../06_knights_tour.rs" 70 4 70 45] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : usize
    requires {[#"../06_knights_tour.rs" 68 15 68 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 69 15 69 32] InBounds0.in_bounds self p}
    
end
module C06KnightsTour_Impl1_CountDegree
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq (isize, isize)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq (isize, isize),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option (isize, isize)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option (isize, isize),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Interface as ShallowModel1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl8_Produces as Produces0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_ProducesTrans as ProducesTrans0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl8_ProducesRefl as ProducesRefl0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve3 with
    type t = isize
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = isize,
    type t2 = isize,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Std1_Vec_Impl11_Resolve as Resolve2 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve1.resolve
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (isize, isize),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_Completed as Completed0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv3.inv
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost as IntoIterPost0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre as IntoIterPre0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Vec_Impl15_IntoIter_Interface as IntoIter0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv1.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Inv1.inv = Inv0.inv
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone C06KnightsTour_Moves_Interface as Moves0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg count_degree [#"../06_knights_tour.rs" 70 4 70 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : C06KnightsTour_Board_Type.t_board) (p : C06KnightsTour_Point_Type.t_point) : usize
    requires {[#"../06_knights_tour.rs" 68 15 68 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 69 15 69 32] InBounds0.in_bounds self p}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : C06KnightsTour_Board_Type.t_board = self;
  var p : C06KnightsTour_Point_Type.t_point = p;
  var count : usize;
  var iter : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var _8 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var iter_old : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var produced : Ghost.ghost_ty (Seq.seq (isize, isize));
  var _16 : ();
  var _17 : Core_Option_Option_Type.t_option (isize, isize);
  var _18 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _19 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem : (isize, isize);
  var _22 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var m : (isize, isize);
  var next : C06KnightsTour_Point_Type.t_point;
  var _28 : (isize, isize);
  var _29 : bool;
  {
    goto BB0
  }
  BB0 {
    count <- ([#"../06_knights_tour.rs" 71 24 71 25] [#"../06_knights_tour.rs" 71 24 71 25] (0 : usize));
    _8 <- ([#"../06_knights_tour.rs" 74 17 74 24] Moves0.moves ());
    goto BB1
  }
  BB1 {
    iter <- ([#"../06_knights_tour.rs" 73 8 73 46] IntoIter0.into_iter _8);
    _8 <- any Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
    goto BB2
  }
  BB2 {
    iter_old <- ([#"../06_knights_tour.rs" 73 8 73 46] Ghost.new iter);
    goto BB3
  }
  BB3 {
    produced <- ([#"../06_knights_tour.rs" 73 8 73 46] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant { [#"../06_knights_tour.rs" 73 8 73 46] Inv0.inv iter };
    invariant { [#"../06_knights_tour.rs" 73 8 73 46] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../06_knights_tour.rs" 73 20 73 44] UIntSize.to_int count <= Seq.length (Ghost.inner produced) };
    goto BB8
  }
  BB8 {
    _19 <- Borrow.borrow_mut iter;
    iter <-  ^ _19;
    _18 <- Borrow.borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _17 <- ([#"../06_knights_tour.rs" 73 8 73 46] Next0.next _18);
    _18 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB10
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB10 {
    assume { Resolve2.resolve iter };
    goto BB20
  }
  BB11 {
    goto BB13
  }
  BB12 {
    assume { Resolve2.resolve iter };
    absurd
  }
  BB13 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _17;
    _22 <- ([#"../06_knights_tour.rs" 73 8 73 46] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB14
  }
  BB14 {
    produced <- _22;
    _22 <- any Ghost.ghost_ty (Seq.seq (isize, isize));
    m <- __creusot_proc_iter_elem;
    assume { Resolve1.resolve __creusot_proc_iter_elem };
    _28 <- ([#"../06_knights_tour.rs" 75 29 75 31] m);
    next <- ([#"../06_knights_tour.rs" 75 23 75 32] Mov0.mov ([#"../06_knights_tour.rs" 75 23 75 32] p) ([#"../06_knights_tour.rs" 75 29 75 31] _28));
    goto BB15
  }
  BB15 {
    assume { Resolve1.resolve m };
    _29 <- ([#"../06_knights_tour.rs" 76 15 76 35] Available0.available ([#"../06_knights_tour.rs" 76 15 76 35] self) next);
    goto BB16
  }
  BB16 {
    switch (_29)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    count <- ([#"../06_knights_tour.rs" 77 16 77 26] count + ([#"../06_knights_tour.rs" 77 25 77 26] [#"../06_knights_tour.rs" 77 25 77 26] (1 : usize)));
    _16 <- ([#"../06_knights_tour.rs" 76 36 78 13] ());
    goto BB19
  }
  BB18 {
    _16 <- ([#"../06_knights_tour.rs" 78 13 78 13] ());
    goto BB19
  }
  BB19 {
    goto BB7
  }
  BB20 {
    _0 <- count;
    return _0
  }
  
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl13_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed Output0.output
  use seq.Seq
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { Inv2.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 8 122 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module C06KnightsTour_Impl1_Set_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Stub as InBounds0
  clone C06KnightsTour_Impl1_Wf_Stub as Wf0
  val set [#"../06_knights_tour.rs" 87 4 87 41] (self : borrowed (C06KnightsTour_Board_Type.t_board)) (p : C06KnightsTour_Point_Type.t_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 83 15 83 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 84 15 84 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 85 14 85 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self) = C06KnightsTour_Board_Type.board_size ( * self) }
    
end
module C06KnightsTour_Impl1_Set
  use prelude.IntSize
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed usize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = C06KnightsTour_Board_Type.t_board
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds2 with
    type t = usize
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl13_IndexMut_Interface as IndexMut1 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate HasValue0.has_value = HasValue1.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
    predicate Inv2.inv = Inv3.inv,
    type Output0.output = usize
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl13_IndexMut_Interface as IndexMut0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    predicate Inv2.inv = Inv2.inv
  let rec cfg set [#"../06_knights_tour.rs" 87 4 87 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C06KnightsTour_Board_Type.t_board)) (p : C06KnightsTour_Point_Type.t_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 83 15 83 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 84 15 84 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 85 14 85 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 86 14 86 42] C06KnightsTour_Board_Type.board_size ( ^ self) = C06KnightsTour_Board_Type.board_size ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (C06KnightsTour_Board_Type.t_board) = self;
  var p : C06KnightsTour_Point_Type.t_point = p;
  var v : usize = v;
  var _9 : borrowed usize;
  var _10 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _11 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    _12 <- Borrow.borrow_mut (C06KnightsTour_Board_Type.board_field ( * self));
    self <- { self with current = (let C06KnightsTour_Board_Type.C_Board a b =  * self in C06KnightsTour_Board_Type.C_Board a ( ^ _12)) };
    _11 <- ([#"../06_knights_tour.rs" 88 8 88 32] IndexMut0.index_mut _12 ([#"../06_knights_tour.rs" 88 19 88 31] UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_x p))));
    _12 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    _10 <- Borrow.borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    _9 <- ([#"../06_knights_tour.rs" 88 8 88 46] IndexMut1.index_mut _10 ([#"../06_knights_tour.rs" 88 33 88 45] UIntSize.of_int (IntSize.to_int (C06KnightsTour_Point_Type.point_y p))));
    _10 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB2
  }
  BB2 {
    _9 <- { _9 with current = v };
    assume { Resolve0.resolve _9 };
    _0 <- ([#"../06_knights_tour.rs" 88 8 88 50] ());
    assume { Resolve1.resolve _11 };
    assume { Resolve2.resolve self };
    return _0
  }
  
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv result }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv (to_ref_seq self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv result }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv (to_ref_seq self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl14_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl14_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl14_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 379 12 379 66] ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 182 20 182 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Stub
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel1 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 188 20 188 34] ShallowModel0.shallow_model self = ShallowModel2.shallow_model (ShallowModel1.shallow_model res)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    
end
module CreusotContracts_Std1_Slice_Impl14_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl14_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl14_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 372 20 372 61] Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl14_Completed_Stub as Completed0 with
    type t = t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv0.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 383 4 383 10] ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../../creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10] ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab}
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06KnightsTour_Min_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
  use Core_Option_Option_Type as Core_Option_Option_Type
  val min [#"../06_knights_tour.rs" 111 0 111 58] (v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../06_knights_tour.rs" 109 0 110 62] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result = Core_Option_Option_Type.C_Some r -> (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v) /\ IndexLogic0.index_logic v i = r) }
    
end
module C06KnightsTour_Min
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = slice (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = slice (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = slice (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = slice (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel5 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic1 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel3 with
    type t = slice (usize, C06KnightsTour_Point_Type.t_point),
    type ShallowModelTy0.shallowModelTy = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv4.inv,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel1 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  clone CreusotContracts_Std1_Slice_Impl14_Produces as Produces0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq
  clone CreusotContracts_Std1_Slice_Impl14_ProducesTrans as ProducesTrans0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl14_ProducesRefl as ProducesRefl0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel4 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point),
    type ShallowModelTy0.shallowModelTy = slice (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl14_Completed as Completed0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv2.inv
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPost as IntoIterPost0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPre as IntoIterPre0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Vec_Impl16_IntoIter_Interface as IntoIter0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv1.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  let rec cfg min [#"../06_knights_tour.rs" 111 0 111 58] [@cfg:stackify] [@cfg:subregion_analysis] (v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)) : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point)
    ensures { [#"../06_knights_tour.rs" 109 0 110 62] forall r : (usize, C06KnightsTour_Point_Type.t_point) . result = Core_Option_Option_Type.C_Some r -> (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v) /\ IndexLogic0.index_logic v i = r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var v : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global) = v;
  var min : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var iter : Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point);
  var iter_old : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var produced : Ghost.ghost_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
  var _15 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _16 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var _17 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
  var __creusot_proc_iter_elem : (usize, C06KnightsTour_Point_Type.t_point);
  var _20 : Ghost.ghost_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
  var x : (usize, C06KnightsTour_Point_Type.t_point);
  var _23 : ();
  var m : (usize, C06KnightsTour_Point_Type.t_point);
  {
    goto BB0
  }
  BB0 {
    min <- ([#"../06_knights_tour.rs" 112 18 112 22] Core_Option_Option_Type.C_None);
    iter <- ([#"../06_knights_tour.rs" 113 4 114 74] IntoIter0.into_iter v);
    goto BB1
  }
  BB1 {
    iter_old <- ([#"../06_knights_tour.rs" 113 4 114 74] Ghost.new iter);
    goto BB2
  }
  BB2 {
    produced <- ([#"../06_knights_tour.rs" 113 4 114 74] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"../06_knights_tour.rs" 113 4 114 74] Inv0.inv iter };
    invariant { [#"../06_knights_tour.rs" 113 4 114 74] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../06_knights_tour.rs" 113 4 114 74] forall r : (usize, C06KnightsTour_Point_Type.t_point) . min = Core_Option_Option_Type.C_Some r -> (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model v) /\ IndexLogic0.index_logic v i = r) };
    goto BB5
  }
  BB5 {
    _17 <- Borrow.borrow_mut iter;
    iter <-  ^ _17;
    _16 <- Borrow.borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../06_knights_tour.rs" 113 4 114 74] Next0.next _16);
    _16 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter (usize, C06KnightsTour_Point_Type.t_point));
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _17 };
    switch (_15)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    _0 <- min;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    absurd
  }
  BB10 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _15;
    _20 <- ([#"../06_knights_tour.rs" 113 4 114 74] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB11
  }
  BB11 {
    produced <- _20;
    _20 <- any Ghost.ghost_ty (Seq.seq (usize, C06KnightsTour_Point_Type.t_point));
    x <- __creusot_proc_iter_elem;
    switch (min)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB12 {
    goto BB14
  }
  BB13 {
    m <- Core_Option_Option_Type.some_0 min;
    switch ([#"../06_knights_tour.rs" 119 19 119 28] (let (a, _) = x in a) < (let (a, _) = m in a))
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB14 {
    min <- ([#"../06_knights_tour.rs" 117 26 117 33] Core_Option_Option_Type.C_Some ([#"../06_knights_tour.rs" 117 31 117 32] x));
    _23 <- ([#"../06_knights_tour.rs" 117 20 117 33] ());
    goto BB18
  }
  BB15 {
    min <- ([#"../06_knights_tour.rs" 120 26 120 33] Core_Option_Option_Type.C_Some ([#"../06_knights_tour.rs" 120 31 120 32] x));
    _23 <- ([#"../06_knights_tour.rs" 120 20 120 33] ());
    goto BB17
  }
  BB16 {
    _23 <- ([#"../06_knights_tour.rs" 121 17 121 17] ());
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB4
  }
  BB20 {
    goto BB9
  }
  BB21 {
    goto BB9
  }
  
end
module C06KnightsTour_DumbNonlinearArith_Stub
  use prelude.UIntSize
  use prelude.Int
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
end
module C06KnightsTour_DumbNonlinearArith_Interface
  use prelude.UIntSize
  use prelude.Int
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
  val dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000 }
    ensures { result = dumb_nonlinear_arith a }
    
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith
  use prelude.UIntSize
  use prelude.Int
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 128 0 128 8] ()
  val dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000 }
    ensures { result = dumb_nonlinear_arith a }
    
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use prelude.UIntSize
  use prelude.Int
  let rec ghost function dumb_nonlinear_arith [#"../06_knights_tour.rs" 131 0 131 33] (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 129 11 129 22] UIntSize.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 130 10 130 30] UIntSize.to_int a * UIntSize.to_int a <= 1000000 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_knights_tour.rs" 128 0 128 8] ()
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 63 20 63 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { Inv0.inv result }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range a)
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { Inv1.inv result }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val new (_1 : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    ensures { Inv0.inv result }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    requires {Inv0.inv self}
    requires {Inv1.inv value}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module C06KnightsTour_KnightsTour_Interface
  use prelude.UIntSize
  use prelude.Int
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  val knights_tour [#"../06_knights_tour.rs" 136 0 136 69] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)
    requires {[#"../06_knights_tour.rs" 133 11 133 37] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 134 11 134 19] x < size}
    requires {[#"../06_knights_tour.rs" 135 11 135 19] y < size}
    
end
module C06KnightsTour_KnightsTour
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = Seq.seq (isize, isize)
  clone TyInv_Trivial as TyInv_Trivial15 with
    type t = Seq.seq (isize, isize),
    predicate Inv0.inv = Inv15.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial14 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial13 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Core_Option_Option_Type.t_option (isize, isize)
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Core_Option_Option_Type.t_option (isize, isize),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq (usize, C06KnightsTour_Point_Type.t_point)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option usize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Interface as ShallowModel4 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl8_Produces as Produces1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_ProducesTrans as ProducesTrans1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv15.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl8_ProducesRefl as ProducesRefl1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl0 with
    type idx = usize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use C06KnightsTour_Board_Type as C06KnightsTour_Board_Type
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve8 with
    type t = C06KnightsTour_Point_Type.t_point
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve7 with
    type t = usize
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve6 with
    type t1 = usize,
    type t2 = C06KnightsTour_Point_Type.t_point,
    predicate Resolve0.resolve = Resolve7.resolve,
    predicate Resolve1.resolve = Resolve8.resolve
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve4 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Resolve0.resolve = Resolve6.resolve
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone C06KnightsTour_Min_Interface as Min0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve5 with
    type t = isize
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve2 with
    type t1 = isize,
    type t2 = isize,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Resolve1.resolve = Resolve5.resolve
  clone CreusotContracts_Std1_Vec_Impl11_Resolve as Resolve3 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv10.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv14.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv12.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone C06KnightsTour_Impl1_Wf as Wf0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone C06KnightsTour_Impl1_CountDegree_Interface as CountDegree0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (isize, isize),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_Completed as Completed1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv8.inv
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv15.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost as IntoIterPost1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre as IntoIterPre1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Vec_Impl15_IntoIter_Interface as IntoIter1 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Inv0.inv = Inv5.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post,
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = (isize, isize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone C06KnightsTour_Moves_Interface as Moves0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic
  clone Alloc_Vec_Impl0_New_Interface as New1 with
    type t = (usize, C06KnightsTour_Point_Type.t_point),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv4.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = usize,
    predicate Inv0.inv = Inv2.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv3.inv
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone C06KnightsTour_DumbNonlinearArith as DumbNonlinearArith0 with
    axiom .
  clone C06KnightsTour_Impl1_Set_Interface as Set0 with
    predicate Wf0.wf = Wf0.wf,
    predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_New_Interface as New0 with
    predicate Wf0.wf = Wf0.wf
  let rec cfg knights_tour [#"../06_knights_tour.rs" 136 0 136 69] [@cfg:stackify] [@cfg:subregion_analysis] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board)
    requires {[#"../06_knights_tour.rs" 133 11 133 37] 0 < UIntSize.to_int size /\ UIntSize.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 134 11 134 19] x < size}
    requires {[#"../06_knights_tour.rs" 135 11 135 19] y < size}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (C06KnightsTour_Board_Type.t_board);
  var size : usize = size;
  var x : usize = x;
  var y : usize = y;
  var board : C06KnightsTour_Board_Type.t_board;
  var p : C06KnightsTour_Point_Type.t_point;
  var _14 : ();
  var _15 : borrowed (C06KnightsTour_Board_Type.t_board);
  var _17 : Ghost.ghost_ty ();
  var iter : Core_Ops_Range_Range_Type.t_range usize;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced : Ghost.ghost_ty (Seq.seq usize);
  var _34 : ();
  var _35 : Core_Option_Option_Type.t_option usize;
  var _36 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _37 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem : usize;
  var _40 : Ghost.ghost_ty (Seq.seq usize);
  var step : usize;
  var candidates : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var iter1 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var _46 : Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
  var iter_old1 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var produced1 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var _54 : Core_Option_Option_Type.t_option (isize, isize);
  var _55 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var _56 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem1 : (isize, isize);
  var _59 : Ghost.ghost_ty (Seq.seq (isize, isize));
  var m : (isize, isize);
  var adj : C06KnightsTour_Point_Type.t_point;
  var _65 : (isize, isize);
  var _66 : bool;
  var degree : usize;
  var _72 : ();
  var _73 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global));
  var _79 : Core_Option_Option_Type.t_option (usize, C06KnightsTour_Point_Type.t_point);
  var _81 : Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global);
  var adj1 : C06KnightsTour_Point_Type.t_point;
  var _86 : ();
  var _87 : borrowed (C06KnightsTour_Board_Type.t_board);
  {
    goto BB0
  }
  BB0 {
    board <- ([#"../06_knights_tour.rs" 137 20 137 36] New0.new size);
    goto BB1
  }
  BB1 {
    p <- ([#"../06_knights_tour.rs" 138 16 138 54] C06KnightsTour_Point_Type.C_Point ([#"../06_knights_tour.rs" 138 27 138 37] IntSize.of_int (UIntSize.to_int x)) ([#"../06_knights_tour.rs" 138 42 138 52] IntSize.of_int (UIntSize.to_int y)));
    _15 <- Borrow.borrow_mut board;
    board <-  ^ _15;
    _14 <- ([#"../06_knights_tour.rs" 139 4 139 19] Set0.set _15 p ([#"../06_knights_tour.rs" 139 17 139 18] [#"../06_knights_tour.rs" 139 17 139 18] (1 : usize)));
    _15 <- any borrowed (C06KnightsTour_Board_Type.t_board);
    goto BB2
  }
  BB2 {
    _17 <- ([#"../06_knights_tour.rs" 141 4 141 38] Ghost.new (DumbNonlinearArith0.dumb_nonlinear_arith size));
    goto BB3
  }
  BB3 {
    iter <- ([#"../06_knights_tour.rs" 142 4 142 36] IntoIter0.into_iter ([#"../06_knights_tour.rs" 145 16 145 32] Core_Ops_Range_Range_Type.C_Range ([#"../06_knights_tour.rs" 145 16 145 17] [#"../06_knights_tour.rs" 145 16 145 17] (2 : usize)) ([#"../06_knights_tour.rs" 145 19 145 32] size * size)));
    goto BB4
  }
  BB4 {
    iter_old <- ([#"../06_knights_tour.rs" 142 4 142 36] Ghost.new iter);
    goto BB5
  }
  BB5 {
    produced <- ([#"../06_knights_tour.rs" 142 4 142 36] Ghost.new (Seq.empty ));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant { [#"../06_knights_tour.rs" 142 4 142 36] Inv0.inv iter };
    invariant { [#"../06_knights_tour.rs" 142 4 142 36] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../06_knights_tour.rs" 142 16 142 34] C06KnightsTour_Board_Type.board_size board = size };
    invariant { [#"../06_knights_tour.rs" 143 16 143 26] Wf0.wf board };
    invariant { [#"../06_knights_tour.rs" 144 16 144 34] InBounds0.in_bounds board p };
    goto BB10
  }
  BB10 {
    _37 <- Borrow.borrow_mut iter;
    iter <-  ^ _37;
    _36 <- Borrow.borrow_mut ( * _37);
    _37 <- { _37 with current = ( ^ _36) };
    _35 <- ([#"../06_knights_tour.rs" 142 4 142 36] Next0.next _36);
    _36 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve _37 };
    switch (_35)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB12 {
    _0 <- ([#"../06_knights_tour.rs" 163 4 163 15] Core_Option_Option_Type.C_Some board);
    board <- any C06KnightsTour_Board_Type.t_board;
    goto BB46
  }
  BB13 {
    goto BB15
  }
  BB14 {
    absurd
  }
  BB15 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _35;
    _40 <- ([#"../06_knights_tour.rs" 142 4 142 36] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB16
  }
  BB16 {
    produced <- _40;
    _40 <- any Ghost.ghost_ty (Seq.seq usize);
    step <- __creusot_proc_iter_elem;
    candidates <- ([#"../06_knights_tour.rs" 147 50 147 60] New1.new ());
    goto BB17
  }
  BB17 {
    _46 <- ([#"../06_knights_tour.rs" 150 17 150 24] Moves0.moves ());
    goto BB18
  }
  BB18 {
    iter1 <- ([#"../06_knights_tour.rs" 148 8 149 54] IntoIter1.into_iter _46);
    _46 <- any Alloc_Vec_Vec_Type.t_vec (isize, isize) (Alloc_Alloc_Global_Type.t_global);
    goto BB19
  }
  BB19 {
    iter_old1 <- ([#"../06_knights_tour.rs" 148 8 149 54] Ghost.new iter1);
    goto BB20
  }
  BB20 {
    produced1 <- ([#"../06_knights_tour.rs" 148 8 149 54] Ghost.new (Seq.empty ));
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    invariant { [#"../06_knights_tour.rs" 148 8 149 54] Inv1.inv iter1 };
    invariant { [#"../06_knights_tour.rs" 148 8 149 54] Produces1.produces (Ghost.inner iter_old1) (Ghost.inner produced1) iter1 };
    invariant { [#"../06_knights_tour.rs" 148 8 149 54] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model candidates) -> InBounds0.in_bounds board (let (_, a) = IndexLogic0.index_logic candidates i in a) };
    goto BB26
  }
  BB26 {
    _56 <- Borrow.borrow_mut iter1;
    iter1 <-  ^ _56;
    _55 <- Borrow.borrow_mut ( * _56);
    _56 <- { _56 with current = ( ^ _55) };
    _54 <- ([#"../06_knights_tour.rs" 148 8 149 54] Next1.next _55);
    _55 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (isize, isize) (Alloc_Alloc_Global_Type.t_global));
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve _56 };
    switch (_54)
      | Core_Option_Option_Type.C_None -> goto BB28
      | Core_Option_Option_Type.C_Some _ -> goto BB29
      end
  }
  BB28 {
    assume { Resolve3.resolve iter1 };
    goto BB39
  }
  BB29 {
    goto BB30
  }
  BB30 {
    __creusot_proc_iter_elem1 <- Core_Option_Option_Type.some_0 _54;
    _59 <- ([#"../06_knights_tour.rs" 148 8 149 54] Ghost.new (Seq.(++) (Ghost.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)));
    goto BB31
  }
  BB31 {
    produced1 <- _59;
    _59 <- any Ghost.ghost_ty (Seq.seq (isize, isize));
    m <- __creusot_proc_iter_elem1;
    assume { Resolve2.resolve __creusot_proc_iter_elem1 };
    _65 <- ([#"../06_knights_tour.rs" 151 28 151 30] m);
    adj <- ([#"../06_knights_tour.rs" 151 22 151 31] Mov0.mov ([#"../06_knights_tour.rs" 151 22 151 31] p) ([#"../06_knights_tour.rs" 151 28 151 30] _65));
    goto BB32
  }
  BB32 {
    assume { Resolve2.resolve m };
    _66 <- ([#"../06_knights_tour.rs" 152 15 152 35] Available0.available ([#"../06_knights_tour.rs" 152 15 152 35] board) adj);
    goto BB33
  }
  BB33 {
    switch (_66)
      | False -> goto BB37
      | True -> goto BB34
      end
  }
  BB34 {
    degree <- ([#"../06_knights_tour.rs" 153 29 153 52] CountDegree0.count_degree ([#"../06_knights_tour.rs" 153 29 153 52] board) adj);
    goto BB35
  }
  BB35 {
    _73 <- Borrow.borrow_mut candidates;
    candidates <-  ^ _73;
    _72 <- ([#"../06_knights_tour.rs" 154 16 154 46] Push0.push _73 ([#"../06_knights_tour.rs" 154 32 154 45] (degree, adj)));
    _73 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (usize, C06KnightsTour_Point_Type.t_point) (Alloc_Alloc_Global_Type.t_global));
    goto BB36
  }
  BB36 {
    _34 <- ([#"../06_knights_tour.rs" 152 36 155 13] ());
    goto BB38
  }
  BB37 {
    _34 <- ([#"../06_knights_tour.rs" 155 13 155 13] ());
    goto BB38
  }
  BB38 {
    goto BB25
  }
  BB39 {
    _81 <- ([#"../06_knights_tour.rs" 157 18 157 29] candidates);
    _79 <- ([#"../06_knights_tour.rs" 157 14 157 30] Min0.min ([#"../06_knights_tour.rs" 157 18 157 29] _81));
    goto BB40
  }
  BB40 {
    switch (_79)
      | Core_Option_Option_Type.C_None -> goto BB41
      | Core_Option_Option_Type.C_Some _ -> goto BB42
      end
  }
  BB41 {
    _0 <- ([#"../06_knights_tour.rs" 159 27 159 31] Core_Option_Option_Type.C_None);
    assume { Resolve4.resolve candidates };
    goto BB48
  }
  BB42 {
    goto BB43
  }
  BB43 {
    adj1 <- (let (_, a) = Core_Option_Option_Type.some_0 _79 in a);
    assume { Resolve4.resolve candidates };
    p <- adj1;
    _87 <- Borrow.borrow_mut board;
    board <-  ^ _87;
    _86 <- ([#"../06_knights_tour.rs" 161 8 161 26] Set0.set _87 p step);
    _87 <- any borrowed (C06KnightsTour_Board_Type.t_board);
    goto BB44
  }
  BB44 {
    _34 <- ([#"../06_knights_tour.rs" 145 33 162 5] ());
    goto BB45
  }
  BB45 {
    goto BB9
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB50
  }
  BB48 {
    goto BB49
  }
  BB49 {
    goto BB50
  }
  BB50 {
    return _0
  }
  BB57 {
    goto BB14
  }
  BB58 {
    assume { Resolve3.resolve iter1 };
    assume { Resolve4.resolve candidates };
    goto BB14
  }
  BB59 {
    assume { Resolve4.resolve candidates };
    goto BB14
  }
  
end
module C06KnightsTour_Impl2
  
end
module C06KnightsTour_Impl3
  use prelude.Borrow
  use C06KnightsTour_Point_Type as C06KnightsTour_Point_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C06KnightsTour_Point_Type.t_point
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = C06KnightsTour_Point_Type.t_point,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C06KnightsTour_Point_Type.t_point
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = C06KnightsTour_Point_Type.t_point,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"../06_knights_tour.rs" 4 15 4 20] forall self : C06KnightsTour_Point_Type.t_point . Inv0.inv self -> (forall result : C06KnightsTour_Point_Type.t_point . result = self -> Inv1.inv result /\ result = self)
end
