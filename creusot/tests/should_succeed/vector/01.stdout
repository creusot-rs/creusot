module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type c01_ghost 't = 
    | C01_Ghost
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module C01_Main_Interface
  val main () : ()
end
module C01_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Builtins_Model_Model
  type self   
  type modelty   
  function model (self : self) : modelty
end
module C01_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.c01_ghost t) : t
end
module C01_Impl0_Model
  type t   
  use Type
  function model (self : Type.c01_ghost t) : t
end
module C01_Impl0_Interface
  type t   
  use Type
  clone export C01_Impl0_Model_Interface with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.c01_ghost t, type modelty = modelty,
  function model = model
end
module C01_Impl0
  type t   
  use Type
  clone export C01_Impl0_Model with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.c01_ghost t, type modelty = modelty,
  function model = model
end
module C01_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C01_Impl0_Interface as Model0 with type t = t
  val record (a : t) : Type.c01_ghost t
    ensures { Model0.model result = a }
    
end
module C01_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone C01_Impl0 as Model0 with type t = t
  val record (a : t) : Type.c01_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Interface
  type t   
  use Type
  use seq.Seq
  clone export CreusotContracts_Std1_Vec_Impl0_Model_Interface with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = modelty, function model = model
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  use seq.Seq
  clone export CreusotContracts_Std1_Vec_Impl0_Model with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = modelty, function model = model
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Model_Model
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : t) : Model0.modelty = 
    Model0.model self
end
module CreusotContracts_Builtins_Model_Impl0_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl0_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = t, type modelty = modelty, function model = model
end
module CreusotContracts_Builtins_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl0_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = t, type modelty = modelty, function model = model
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index
  type self   
  type idx   
  type output   
  use prelude.Prelude
  val index (self : self) (index : idx) : output
end
module Core_Ops_Index_IndexMut
  type self   
  type idx   
  clone Core_Ops_Index_Index as Index0 with type self = self, type idx = idx
  use prelude.Prelude
  val index_mut (self : borrowed self) (index : idx) : borrowed Index0.output
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Model_Impl1_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Std1_Vec_Impl3_IndexMut_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) ix }
    ensures {  * result = Seq.get (Model1.model self) ix }
    
end
module CreusotContracts_Std1_Vec_Impl3_IndexMut
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) ix }
    ensures {  * result = Seq.get (Model1.model self) ix }
    
end
module CreusotContracts_Std1_Vec_Impl3_Interface
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  clone export CreusotContracts_Std1_Vec_Impl3_IndexMut_Interface with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone export Core_Ops_Index_IndexMut with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  val index_mut = index_mut
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0 as Model0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1 as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  clone export CreusotContracts_Std1_Vec_Impl3_IndexMut_Interface with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone export Core_Ops_Index_IndexMut with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  val index_mut = index_mut
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Resolve_Impl1_Interface
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module C01_AllZero_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model0 with type t = uint32
  val all_zero (v : borrowed (Type.creusotcontracts_std1_vec_vec uint32)) : ()
    ensures { Seq.length (Model0.model ( * v)) = Seq.length (Model0.model ( ^ v)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model ( ^ v)) -> Seq.get (Model0.model ( ^ v)) i = (0 : uint32) }
    
end
module C01_AllZero
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0 as Model1 with type t = uint32
  clone C01_Impl0 as Model0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec uint32)
  use mach.int.UInt64
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve5 with type t = Type.creusotcontracts_std1_vec_vec uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve3 with type t = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = Type.c01_ghost (borrowed (Type.creusotcontracts_std1_vec_vec uint32))
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec uint32)
  clone CreusotContracts_Builtins_Model_Impl1 as Model3 with type t = Type.creusotcontracts_std1_vec_vec uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3 as IndexMut0 with type t = uint32, function Model0.model = Model1.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Builtins_Model_Impl0 as Model2 with type t = Type.creusotcontracts_std1_vec_vec uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = uint32,
  function Model0.model = Model2.model, function Model1.model = Model1.model
  clone C01_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec uint32),
  function Model0.model = Model0.model
  let rec cfg all_zero (v : borrowed (Type.creusotcontracts_std1_vec_vec uint32)) : ()
    ensures { Seq.length (Model1.model ( * v)) = Seq.length (Model1.model ( ^ v)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ v)) -> Seq.get (Model1.model ( ^ v)) i = (0 : uint32) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec uint32);
  var i_2 : usize;
  var old_v_3 : Type.c01_ghost (borrowed (Type.creusotcontracts_std1_vec_vec uint32));
  var _4 : borrowed (Type.creusotcontracts_std1_vec_vec uint32);
  var _5 : borrowed (Type.creusotcontracts_std1_vec_vec uint32);
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec uint32;
  var _11 : borrowed uint32;
  var _12 : borrowed (Type.creusotcontracts_std1_vec_vec uint32);
  var _13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    assume { Resolve0.resolve _5 };
    old_v_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_3 };
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model0.model old_v_3 };
    invariant in_bounds { Seq.length (Model1.model ( * v_1)) = Seq.length (Model1.model ( * Model0.model old_v_3)) };
    invariant all_zero { forall j : (int) . 0 <= j && j < i_2 -> Seq.get (Model1.model ( * v_1)) j = (0 : uint32) };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _8 };
    _8 <- i_2;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB4
  }
  BB4 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB7
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB5 {
    _12 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _12) };
    assume { Resolve2.resolve _13 };
    _13 <- i_2;
    _11 <- IndexMut0.index_mut _12 _13;
    goto BB6
  }
  BB6 {
    _11 <- { _11 with current = (0 : uint32) };
    assume { Resolve3.resolve _11 };
    i_2 <- i_2 + (1 : usize);
    _6 <- ();
    assume { Resolve4.resolve _6 };
    goto BB2
  }
  BB7 {
    assume { Resolve5.resolve v_1 };
    assume { Resolve2.resolve i_2 };
    _0 <- ();
    return _0
  }
  
end
