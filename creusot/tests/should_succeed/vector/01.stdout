module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type c01_ghostrecord 't = 
    | C01_GhostRecord
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type c01_list 't = 
    | C01_List_Cons 't (c01_list 't)
    | C01_List_Nil
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type c01_myvec 't = 
    | C01_MyVec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module C01_Main_Interface
  val main () : ()
end
module C01_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C01_Impl1_Len_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  function len (self : Type.c01_list t) : int
end
module C01_Impl1_Len
  type t   
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  function len (self : Type.c01_list t) : int
  val len (self : Type.c01_list t) : int
    ensures { result >= 0 }
    ensures { result = len self }
    
  axiom spec : forall self : Type.c01_list t . len self >= 0
  axiom def : forall self : Type.c01_list t . len self = match (self) with
    | Type.C01_List_Cons _ ls -> 1 + len ls
    | Type.C01_List_Nil -> 0
    end
end
module C01_Impl1_Len_Impl
  type t   
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  let rec len (self : Type.c01_list t) : int
    ensures { result >= 0 }
    variant {self}
    
   = 
    match (self) with
      | Type.C01_List_Cons _ ls -> 1 + len ls
      | Type.C01_List_Nil -> 0
      end
end
module C01_Impl1_Get_Interface
  type t   
  use Type
  use mach.int.Int
  function get (self : Type.c01_list t) (ix : int) : Type.core_option_option t
end
module C01_Impl1_Get
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  function get (self : Type.c01_list t) (ix : int) : Type.core_option_option t = 
    match (self) with
      | Type.C01_List_Cons hd tl -> match (ix = 0) with
        | True -> Type.Core_Option_Option_Some hd
        | False -> get tl (ix - 1)
        end
      | Type.C01_List_Nil -> Type.Core_Option_Option_None
      end
end
module C01_Impl1_Push_Interface
  type t   
  use Type
  function push (self : Type.c01_list t) (v : t) : Type.c01_list t
end
module C01_Impl1_Push
  type t   
  use Type
  function push (self : Type.c01_list t) (v : t) : Type.c01_list t = 
    match (self) with
      | Type.C01_List_Cons h tl -> Type.C01_List_Cons h (push tl v)
      | Type.C01_List_Nil -> Type.C01_List_Cons v (Type.C01_List_Nil)
      end
end
module C01_Impl1_Index_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone C01_Impl1_Get_Interface as Get1 with type t = t
  clone C01_Impl1_Len_Interface as Len0 with type t = t
  function index (self : Type.c01_list t) (ix : int) : t
end
module C01_Impl1_Index
  type t   
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone C01_Impl1_Get_Interface as Get1 with type t = t
  clone C01_Impl1_Len_Interface as Len0 with type t = t
  function index (self : Type.c01_list t) (ix : int) : t
  val index (self : Type.c01_list t) (ix : int) : t
    requires {0 <= ix && ix < Len0.len self}
    ensures { Type.Core_Option_Option_Some result = Get1.get self ix }
    ensures { result = index self ix }
    
  axiom spec : forall self : Type.c01_list t, ix : int . 0 <= ix && ix < Len0.len self -> Type.Core_Option_Option_Some (index self ix) = Get1.get self ix
end
module C01_Impl1_Index_Impl
  type t   
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone C01_Impl1_Get as Get1 with type t = t
  clone C01_Impl1_Len as Len0 with type t = t, axiom .
  let rec index (self : Type.c01_list t) (ix : int) : t
    requires {0 <= ix && ix < Len0.len self}
    ensures { Type.Core_Option_Option_Some result = Get1.get self ix }
    variant {self}
    
   = 
    match (self) with
      | Type.C01_List_Cons x ls -> match (ix = 0) with
        | True -> x
        | False -> index ls (ix - 1)
        end
      | Type.C01_List_Nil -> absurd
      end
end
module C01_AsRef_Interface
  type t   
  use prelude.Prelude
  use Type
  function as_ref (opt : Type.core_option_option t) : Type.core_option_option t
end
module C01_AsRef
  type t   
  use prelude.Prelude
  use Type
  function as_ref (opt : Type.core_option_option t) : Type.core_option_option t = 
    match (opt) with
      | Type.Core_Option_Option_Some r -> Type.Core_Option_Option_Some r
      | Type.Core_Option_Option_None -> Type.Core_Option_Option_None
      end
end
module C01_Impl2_Model_Interface
  type t   
  use Type
  function model (self : Type.c01_ghostrecord t) : t
end
module C01_Impl2_Model
  type t   
  use Type
  function model (self : Type.c01_ghostrecord t) : t
end
module C01_Impl2_Record_Interface
  type t   
  use Type
  use prelude.Prelude
  clone C01_Impl2_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.c01_ghostrecord t
    ensures { Model0.model result = a }
    
end
module C01_Impl2_Record
  type t   
  use Type
  use prelude.Prelude
  clone C01_Impl2_Model as Model0 with type t = t
  val record (a : t) : Type.c01_ghostrecord t
    ensures { Model0.model result = a }
    
end
module C01_Impl3_Model_Interface
  type t   
  use Type
  function model (self : Type.c01_myvec t) : Type.c01_list t
end
module C01_Impl3_Model
  type t   
  use Type
  function model (self : Type.c01_myvec t) : Type.c01_list t
end
module C01_Impl3_Len_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone C01_Impl1_Len_Interface as Len1 with type t = t
  clone C01_Impl3_Model_Interface as Model0 with type t = t
  val len (self : Type.c01_myvec t) : usize
    ensures { result = Len1.len (Model0.model self) }
    
end
module C01_Impl3_Len
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone C01_Impl1_Len as Len1 with type t = t, axiom .
  clone C01_Impl3_Model as Model0 with type t = t
  val len (self : Type.c01_myvec t) : usize
    ensures { result = Len1.len (Model0.model self) }
    
end
module C01_Impl3_Get_Interface
  type t   
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone C01_Impl1_Get_Interface as Get2 with type t = t
  clone C01_Impl3_Model_Interface as Model1 with type t = t
  clone C01_AsRef_Interface as AsRef0 with type t = t
  val get (self : Type.c01_myvec t) (ix : usize) : Type.core_option_option t
    ensures { AsRef0.as_ref result = Get2.get (Model1.model self) ix }
    
end
module C01_Impl3_Get
  type t   
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone C01_Impl1_Get as Get2 with type t = t
  clone C01_Impl3_Model as Model1 with type t = t
  clone C01_AsRef as AsRef0 with type t = t
  val get (self : Type.c01_myvec t) (ix : usize) : Type.core_option_option t
    ensures { AsRef0.as_ref result = Get2.get (Model1.model self) ix }
    
end
module C01_Impl3_Push_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C01_Impl1_Push_Interface as Push1 with type t = t
  clone C01_Impl3_Model_Interface as Model0 with type t = t
  val push (self : borrowed (Type.c01_myvec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Push1.push (Model0.model ( * self)) v }
    
end
module C01_Impl3_Push
  type t   
  use prelude.Prelude
  use Type
  clone C01_Impl1_Push as Push1 with type t = t
  clone C01_Impl3_Model as Model0 with type t = t
  val push (self : borrowed (Type.c01_myvec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Push1.push (Model0.model ( * self)) v }
    
end
module C01_Impl3_Index_Interface
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C01_Impl1_Index_Interface as Index2 with type t = t
  clone C01_Impl1_Len_Interface as Len1 with type t = t
  clone C01_Impl3_Model_Interface as Model0 with type t = t
  val index (self : Type.c01_myvec t) (ix : usize) : t
    requires {ix < Len1.len (Model0.model self)}
    ensures { result = Index2.index (Model0.model self) ix }
    
end
module C01_Impl3_Index
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C01_Impl1_Get as Get3 with type t = t
  clone C01_Impl1_Len as Len1 with type t = t, axiom .
  clone C01_Impl1_Index as Index2 with type t = t, function Len0.len = Len1.len, function Get1.get = Get3.get, axiom .
  clone C01_Impl3_Model as Model0 with type t = t
  val index (self : Type.c01_myvec t) (ix : usize) : t
    requires {ix < Len1.len (Model0.model self)}
    ensures { result = Index2.index (Model0.model self) ix }
    
end
module C01_Impl3_IndexMut_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone C01_Impl1_Index_Interface as Index2 with type t = t
  clone C01_Impl1_Len_Interface as Len1 with type t = t
  clone C01_Impl3_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.c01_myvec t)) (ix : usize) : borrowed t
    requires {ix < Len1.len (Model0.model ( * self))}
    ensures { Len1.len (Model0.model ( * self)) = Len1.len (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j <= Len1.len (Model0.model ( ^ self)) -> not (j = ix) -> Index2.index (Model0.model ( ^ self)) j = Index2.index (Model0.model ( * self)) j }
    ensures {  ^ result = Index2.index (Model0.model ( ^ self)) ix }
    ensures {  * result = Index2.index (Model0.model ( * self)) ix }
    
end
module C01_Impl3_IndexMut
  type t   
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone C01_Impl1_Get as Get3 with type t = t
  clone C01_Impl1_Len as Len1 with type t = t, axiom .
  clone C01_Impl1_Index as Index2 with type t = t, function Len0.len = Len1.len, function Get1.get = Get3.get, axiom .
  clone C01_Impl3_Model as Model0 with type t = t
  val index_mut (self : borrowed (Type.c01_myvec t)) (ix : usize) : borrowed t
    requires {ix < Len1.len (Model0.model ( * self))}
    ensures { Len1.len (Model0.model ( * self)) = Len1.len (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j <= Len1.len (Model0.model ( ^ self)) -> not (j = ix) -> Index2.index (Model0.model ( ^ self)) j = Index2.index (Model0.model ( * self)) j }
    ensures {  ^ result = Index2.index (Model0.model ( ^ self)) ix }
    ensures {  * result = Index2.index (Model0.model ( * self)) ix }
    
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl12_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Impl12_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module C01_AllZero_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone C01_Impl1_Index_Interface as Index2 with type t = uint32
  clone C01_Impl1_Len_Interface as Len1 with type t = uint32
  clone C01_Impl3_Model_Interface as Model0 with type t = uint32
  val all_zero (v : borrowed (Type.c01_myvec uint32)) : ()
    ensures { Len1.len (Model0.model ( * v)) = Len1.len (Model0.model ( ^ v)) }
    ensures { forall i : (int) . 0 <= i && i < Len1.len (Model0.model ( ^ v)) -> Index2.index (Model0.model ( ^ v)) i = (0 : uint32) }
    
end
module C01_AllZero
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone C01_Impl1_Get as Get4 with type t = uint32
  clone C01_Impl1_Len as Len2 with type t = uint32, axiom .
  clone C01_Impl1_Index as Index3 with type t = uint32, function Len0.len = Len2.len, function Get1.get = Get4.get,
  axiom .
  clone C01_Impl3_Model as Model1 with type t = uint32
  clone C01_Impl2_Model as Model0 with type t = borrowed (Type.c01_myvec uint32)
  use mach.int.UInt64
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve14 with type t = Type.c01_myvec uint32
  clone CreusotContracts_Builtins_Resolve as Resolve13 with type self = ()
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve12 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve10 with type self = bool
  clone CreusotContracts_Builtins_Resolve as Resolve8 with type self = usize
  clone CreusotContracts_Builtins_Resolve as Resolve7 with type self = Type.c01_ghostrecord (borrowed (Type.c01_myvec uint32))
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = borrowed (Type.c01_myvec uint32)
  clone C01_Impl3_IndexMut_Interface as IndexMut11 with type t = uint32, function Model0.model = Model1.model,
  function Len1.len = Len2.len, function Index2.index = Index3.index
  clone C01_Impl3_Len_Interface as Len9 with type t = uint32, function Model0.model = Model1.model,
  function Len1.len = Len2.len
  clone C01_Impl2_Record_Interface as Record6 with type t = borrowed (Type.c01_myvec uint32),
  function Model0.model = Model0.model
  let rec cfg all_zero (v : borrowed (Type.c01_myvec uint32)) : ()
    ensures { Len2.len (Model1.model ( * v)) = Len2.len (Model1.model ( ^ v)) }
    ensures { forall i : (int) . 0 <= i && i < Len2.len (Model1.model ( ^ v)) -> Index3.index (Model1.model ( ^ v)) i = (0 : uint32) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.c01_myvec uint32);
  var i_2 : usize;
  var old_v_3 : Type.c01_ghostrecord (borrowed (Type.c01_myvec uint32));
  var _4 : borrowed (Type.c01_myvec uint32);
  var _5 : borrowed (Type.c01_myvec uint32);
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Type.c01_myvec uint32;
  var _14 : borrowed uint32;
  var _15 : borrowed (Type.c01_myvec uint32);
  var _16 : usize;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    assume { Resolve5.resolve _5 };
    old_v_3 <- Record6.record _4;
    goto BB1
  }
  BB1 {
    assume { Resolve7.resolve old_v_3 };
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model0.model old_v_3 };
    invariant in_bounds { Len2.len (Model1.model ( * v_1)) = Len2.len (Model1.model ( * Model0.model old_v_3)) };
    invariant all_zero { forall j : (int) . 0 <= j && j < i_2 -> Index3.index (Model1.model ( * v_1)) j = (0 : uint32) };
    goto BB3
  }
  BB3 {
    assume { Resolve8.resolve _11 };
    _11 <- i_2;
    _13 <-  * v_1;
    _12 <- Len9.len _13;
    goto BB4
  }
  BB4 {
    _10 <- _11 < _12;
    switch (_10)
      | False -> goto BB7
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve10.resolve _10 };
    _15 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _15) };
    assume { Resolve8.resolve _16 };
    _16 <- i_2;
    _14 <- IndexMut11.index_mut _15 _16;
    goto BB6
  }
  BB6 {
    _14 <- { _14 with current = (0 : uint32) };
    assume { Resolve12.resolve _14 };
    i_2 <- i_2 + (1 : usize);
    _9 <- ();
    assume { Resolve13.resolve _9 };
    goto BB2
  }
  BB7 {
    assume { Resolve14.resolve v_1 };
    assume { Resolve8.resolve i_2 };
    assume { Resolve10.resolve _10 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_WellFounded
  type self   
end
module C01_Impl0
  type t   
  use Type
  clone CreusotContracts_WellFounded with type self = Type.c01_list t
end
