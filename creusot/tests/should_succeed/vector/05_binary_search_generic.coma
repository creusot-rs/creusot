
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module T_core__result__Result
  type t_Result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Ok < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec v_Err < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module M_05_binary_search_generic__binary_search
  type t
  
  let%span s05_binary_search_generic0 = "../05_binary_search_generic.rs" 31 20 31 21
  
  let%span s05_binary_search_generic1 = "../05_binary_search_generic.rs" 32 19 32 20
  
  let%span s05_binary_search_generic2 = "../05_binary_search_generic.rs" 35 26 35 27
  
  let%span s05_binary_search_generic3 = "../05_binary_search_generic.rs" 37 16 37 56
  
  let%span s05_binary_search_generic4 = "../05_binary_search_generic.rs" 37 4 37 58
  
  let%span s05_binary_search_generic5 = "../05_binary_search_generic.rs" 40 17 40 18
  
  let%span s05_binary_search_generic6 = "../05_binary_search_generic.rs" 41 26 41 27
  
  let%span s05_binary_search_generic7 = "../05_binary_search_generic.rs" 41 19 41 27
  
  let%span s05_binary_search_generic8 = "../05_binary_search_generic.rs" 53 37 53 38
  
  let%span s05_binary_search_generic9 = "../05_binary_search_generic.rs" 20 11 20 36
  
  let%span s05_binary_search_generic10 = "../05_binary_search_generic.rs" 21 11 21 35
  
  let%span s05_binary_search_generic11 = "../05_binary_search_generic.rs" 27 41 27 44
  
  let%span s05_binary_search_generic12 = "../05_binary_search_generic.rs" 27 55 27 59
  
  let%span s05_binary_search_generic13 = "../05_binary_search_generic.rs" 22 0 22 89
  
  let%span s05_binary_search_generic14 = "../05_binary_search_generic.rs" 23 0 24 74
  
  let%span s05_binary_search_generic15 = "../05_binary_search_generic.rs" 25 0 26 92
  
  let%span span16 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span17 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span21 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span22 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span23 = "../../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span24 = "../../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span25 = "../../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span29 = "../../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span30 = "../../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span31 = "../../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span33 = "../../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span34 = "../../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span36 = "../05_binary_search_generic.rs" 10 4 12 5
  
  let%span span37 = "../05_binary_search_generic.rs" 17 4 17 31
  
  let%span span38 = "" 0 0 0 0
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span41 = "../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "" 0 0 0 0
  
  let%span span44 = "../../../../../creusot-contracts/src/std/cmp.rs" 39 26 39 76
  
  let%span span45 = "../../../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  
  let%span span46 = "../../../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  
  let%span span47 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span48 = "../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span54 = "../../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56
  
  let%span span55 = "../../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53
  
  let%span span56 = "" 0 0 0 0
  
  let%span span57 = "../../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  predicate inv'0 (_1 : t)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : t) =
    [%#span16] inv'0 self
  
  predicate inv'6 (_1 : t)
  
  axiom inv'6 : forall x : t . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq t) =
    [%#span17] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t)
  
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span18] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#span19] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'4 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#span20] inv'5 (shallow_model'1 self)
  
  predicate inv'4 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv'4 : forall x : Vec'0.t_Vec t (Global'0.t_Global) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : t) =
    [%#span21] inv'0 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  predicate invariant'2 (self : usize) =
    [%#span22] true
  
  predicate inv'2 (_1 : usize)
  
  axiom inv'2 : forall x : usize . inv'2 x = true
  
  predicate invariant'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#span21] inv'4 self
  
  predicate inv'1 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv'1 : forall x : Vec'0.t_Vec t (Global'0.t_Global) . inv'1 x = true
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span24] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span25] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span26] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span27] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span28] cmp_log'0 x y
  = o)  -> ([%#span29] cmp_log'0 y z = o)  -> ([%#span30] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span31] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span32] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span33] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span34] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span35] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use seq.Seq
  
  predicate sorted_range'0 [#"../05_binary_search_generic.rs" 9 0 9 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int)
    
   =
    [%#span36] forall i : int, j : int . l <= i /\ i <= j /\ j < u  -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  use seq.Seq
  
  predicate sorted'0 [#"../05_binary_search_generic.rs" 16 0 16 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#span37] sorted_range'0 s 0 (Seq.length s)
  
  use prelude.prelude.Intrinsic
  
  function deep_model'1 (self : t) : t_DeepModelTy'0
  
  let rec cmp'0 (self:t) (other:t) (return'  (ret:Ordering'0.t_Ordering))= {[@expl:precondition] [%#span39] inv'3 other}
    {[@expl:precondition] [%#span38] inv'3 self}
    any
    [ return' (result:Ordering'0.t_Ordering)-> {[%#span40] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  function deep_model'3 (self : t) : t_DeepModelTy'0 =
    [%#span41] deep_model'1 self
  
  let rec gt'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span43] inv'3 other}
    {[@expl:precondition] [%#span42] inv'3 self}
    any
    [ return' (result:bool)-> {[%#span44] result = gt_log'0 (deep_model'3 self) (deep_model'3 other)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span45] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span46] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#span47] shallow_model'1 self
  
  let rec index'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] [%#span50] inv'2 index}
    {[@expl:precondition] [%#span49] inv'1 self}
    {[@expl:precondition] [%#span48] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:t)-> {[%#span52] inv'3 result}
      {[%#span51] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#span53] Seq.get (shallow_model'1 self) ix
  
  function deep_model'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'2_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . ([%#span55] forall i : int . 0 <= i
  /\ i < Seq.length (shallow_model'1 self)  -> Seq.get (deep_model'2 self) i = deep_model'1 (index_logic'0 self i))
  && ([%#span54] Seq.length (shallow_model'1 self) = Seq.length (deep_model'2 self))
  
  function deep_model'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t_DeepModelTy'0 =
    [%#span41] deep_model'2 self
  
  use T_core__result__Result as Result'0
  
  predicate resolve'0 (self : t)
  
  let rec len'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span56] inv'1 self}
    any
    [ return' (result:usize)-> {[%#span57] UIntSize.to_int result = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
  
  let rec binary_search (arr:Vec'0.t_Vec t (Global'0.t_Global)) (elem:t) (return'  (ret:Result'0.t_Result usize usize))= {[%#s05_binary_search_generic12] inv'0 elem}
    {[%#s05_binary_search_generic11] inv'1 arr}
    {[%#s05_binary_search_generic10] sorted'0 (deep_model'0 arr)}
    {[%#s05_binary_search_generic9] Seq.length (shallow_model'0 arr) <= UIntSize.to_int (v_MAX'0 : usize)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = UIntSize.eq {_10} {[%#s05_binary_search_generic0] (0 : usize)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 elem} s1
      | s1 = -{resolve'0 elem}- s2
      | s2 =  [ &_0 <- Result'0.C_Err ([%#s05_binary_search_generic1] (0 : usize)) ] s3
      | s3 = bb29 ]
      
    | bb6 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 =  [ &base <- [%#s05_binary_search_generic2] (0 : usize) ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb10
      [ bb10 = {[@expl:loop invariant] [%#s05_binary_search_generic4] forall i : usize . UIntSize.to_int base
        + UIntSize.to_int size
        <= UIntSize.to_int i
        /\ UIntSize.to_int i < Seq.length (shallow_model'0 arr)
         -> lt_log'0 (deep_model'1 elem) (Seq.get (deep_model'0 arr) (UIntSize.to_int i))}
        {[@expl:loop invariant] [%#s05_binary_search_generic4] forall i : usize . i < base
         -> le_log'0 (Seq.get (deep_model'0 arr) (UIntSize.to_int i)) (deep_model'1 elem)}
        {[@expl:loop invariant] [%#s05_binary_search_generic3] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= Seq.length (shallow_model'0 arr)}
        (! s0) [ s0 = bb11 ] 
        [ bb11 = s0
          [ s0 = UIntSize.gt {size} {[%#s05_binary_search_generic5] (1 : usize)}
              (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb19) | br1 -> {_21} (! bb12) ]  ]
          
        | bb12 = s0
          [ s0 = UIntSize.eq {[%#s05_binary_search_generic6] (2 : usize)} {[%#s05_binary_search_generic7] (0 : usize)}
              (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#s05_binary_search_generic7] not _25} s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 = UIntSize.div {size} {[%#s05_binary_search_generic6] (2 : usize)}
              (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':t) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0 [ s0 = gt'0 {_32} {elem} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1) | s1 = bb15 ] 
        | bb15 = any [ br0 -> {_30 = false} (! bb17) | br1 -> {_30} (! bb16) ] 
        | bb16 = s0 [ s0 =  [ &_29 <- base ] s1 | s1 = bb18 ] 
        | bb17 = s0 [ s0 =  [ &_29 <- mid ] s1 | s1 = bb18 ] 
        | bb18 = s0
          [ s0 =  [ &base <- _29 ] s1
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb10 ]
           ]
         ]
      
    | bb19 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':t) ->  [ &_41 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 =  [ &cmp <- _41 ] s1
      | s1 =  [ &_47 <- elem ] s2
      | s2 = cmp'0 {cmp} {_47} (fun (_ret':Ordering'0.t_Ordering) ->  [ &_44 <- _ret' ] s3)
      | s3 = bb21 ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'0 elem} s1
      | s1 = -{resolve'0 elem}- s2
      | s2 = any
        [ br0 -> {_44 = Ordering'0.C_Less } (! bb24)
        | br1 -> {_44 = Ordering'0.C_Equal } (! bb23)
        | br2 -> {_44 = Ordering'0.C_Greater } (! bb25) ]
         ]
      
    | bb25 = s0 [ s0 =  [ &_0 <- Result'0.C_Err base ] s1 | s1 = bb28 ] 
    | bb23 = bb26
    | bb26 = s0 [ s0 =  [ &_0 <- Result'0.C_Ok base ] s1 | s1 = bb28 ] 
    | bb24 = bb27
    | bb27 = s0
      [ s0 = UIntSize.add {base} {[%#s05_binary_search_generic8] (1 : usize)}
          (fun (_ret':usize) ->  [ &_50 <- _ret' ] s1)
      | s1 =  [ &_0 <- Result'0.C_Err _50 ] s2
      | s2 = bb28 ]
      
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : Result'0.t_Result usize usize = any_l ()
    | & arr : Vec'0.t_Vec t (Global'0.t_Global) = arr
    | & elem : t = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _21 : bool = any_l ()
    | & half : usize = any_l ()
    | & _25 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _29 : usize = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : t = any_l ()
    | & cmp : t = any_l ()
    | & _41 : t = any_l ()
    | & _44 : Ordering'0.t_Ordering = any_l ()
    | & _47 : t = any_l ()
    | & _50 : usize = any_l () ]
    
    [ return' (result:Result'0.t_Result usize usize)-> {[@expl:postcondition] [%#s05_binary_search_generic15] forall x : usize . result
      = Result'0.C_Err x
       -> (forall i : usize . x <= i /\ UIntSize.to_int i < Seq.length (shallow_model'0 arr)
       -> lt_log'0 (deep_model'1 elem) (Seq.get (deep_model'0 arr) (UIntSize.to_int i)))}
      {[@expl:postcondition] [%#s05_binary_search_generic14] forall x : usize . result = Result'0.C_Err x
       -> (forall i : usize . i < x  -> le_log'0 (Seq.get (deep_model'0 arr) (UIntSize.to_int i)) (deep_model'1 elem))}
      {[@expl:postcondition] [%#s05_binary_search_generic13] forall x : usize . result = Result'0.C_Ok x
       -> Seq.get (deep_model'0 arr) (UIntSize.to_int x) = deep_model'1 elem}
      (! return' {result}) ]
    
end
