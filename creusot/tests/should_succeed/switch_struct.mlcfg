
module SwitchStruct_M_Type
  use prelude.Int
  use prelude.UInt32
  type t_m 't =
    | C_F uint32
    | C_G 't
    
  let function g_field2 (self : t_m 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_F _ -> any 't
      | C_G a -> a
      end
  let function f_field1 (self : t_m 't) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_F a -> a
      | C_G _ -> any uint32
      end
end
module SwitchStruct_Test_Interface
  use prelude.Int
  use prelude.UInt32
  use SwitchStruct_M_Type as SwitchStruct_M_Type
  val test [#"../switch_struct.rs" 8 0 8 30] (o : SwitchStruct_M_Type.t_m uint32) : bool
end
module SwitchStruct_Test
  use prelude.Int
  use prelude.UInt32
  use prelude.IntSize
  use SwitchStruct_M_Type as SwitchStruct_M_Type
  let rec cfg test [#"../switch_struct.rs" 8 0 8 30] [@cfg:stackify] [@cfg:subregion_analysis] (o : SwitchStruct_M_Type.t_m uint32) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var o_1 : SwitchStruct_M_Type.t_m uint32;
  var _2 : isize;
  var field1_3 : uint32;
  var _4 : uint32;
  var field2_5 : uint32;
  var _6 : uint32;
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    switch (o_1)
      | SwitchStruct_M_Type.C_F _ -> goto BB1
      | SwitchStruct_M_Type.C_G _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    field2_5 <- SwitchStruct_M_Type.g_field2 o_1;
    _6 <- field2_5;
    _0 <- ([#"../switch_struct.rs" 12 24 12 35] _6 = ([#"../switch_struct.rs" 12 34 12 35] (0 : uint32)));
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    field1_3 <- SwitchStruct_M_Type.f_field1 o_1;
    _4 <- field1_3;
    _0 <- ([#"../switch_struct.rs" 11 24 11 34] _4 > ([#"../switch_struct.rs" 11 33 11 34] (0 : uint32)));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
