module M_hillel__right_pad [#"hillel.rs" 17 0 17 59]
  let%span shillel0 = "hillel.rs" 18 18 18 35
  let%span shillel1 = "hillel.rs" 24 16 24 86
  let%span shillel2 = "hillel.rs" 23 16 23 84
  let%span shillel3 = "hillel.rs" 22 16 22 66
  let%span shillel4 = "hillel.rs" 21 16 21 60
  let%span shillel5 = "hillel.rs" 20 16 20 44
  let%span shillel6 = "hillel.rs" 17 22 17 25
  let%span shillel7 = "hillel.rs" 17 52 17 55
  let%span shillel8 = "hillel.rs" 11 10 11 62
  let%span shillel9 = "hillel.rs" 12 10 12 62
  let%span shillel10 = "hillel.rs" 13 10 13 60
  let%span shillel11 = "hillel.rs" 14 10 14 53
  let%span shillel12 = "hillel.rs" 15 10 15 73
  let%span shillel13 = "hillel.rs" 16 10 16 73
  let%span ssnapshot14 = "../../../creusot-contracts/src/snapshot.rs" 26 20 26 39
  let%span smodel15 = "../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span sops16 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 87 26 87 56
  let%span svec19 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel20 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span sresolve21 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant23 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant24 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq25 = "../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed26 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use prelude.prelude.Snapshot
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec19] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'1 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel15] view'2 self.current
  
  function view'3 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel20] view'1 self
  
  function view'0 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot14] view'3 (Snapshot.inner self)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sops16] Seq.get (view'2 self) ix
  
  use seq.Seq
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed26] inv'2 self
  
  predicate inv'5 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'5 x] . inv'5 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq25] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec22] inv'4 (view'2 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#sinvariant24] inv'0 self
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  function view'4 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel20] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'3 self}
    any
    [ return' (result:usize)-> {[%#svec17] UIntSize.to_int result = Seq.length (view'4 self)} (! return' {result}) ]
    
  
  predicate invariant'1 (self : borrowed (t_Vec'0)) =
    [%#sinvariant23] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (t_Vec'0)) (value:t_T'0) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'1 self}
    {[@expl:push 'value' type invariant] inv'2 value}
    any [ return' (result:())-> {[%#svec18] view'2 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  predicate resolve'1 (self : borrowed (t_Vec'0)) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Vec'0)) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec right_pad'0 (str:borrowed (t_Vec'0)) (len:usize) (pad:t_T'0) (return'  (ret:()))= {[@expl:right_pad 'str' type invariant] [%#shillel6] inv'1 str}
    {[@expl:right_pad 'pad' type invariant] [%#shillel7] inv'2 pad}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [%#shillel0] Snapshot.new str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &old_2_0 <- Snapshot.new str ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] (Snapshot.inner old_2_0).final = str.final}
        {[@expl:loop invariant #0] [%#shillel5] Seq.length (view'0 old_str) <= Seq.length (view'1 str)}
        {[@expl:loop invariant #1] [%#shillel4] Seq.length (view'0 old_str) < UIntSize.to_int len
         -> Seq.length (view'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant #2] [%#shillel3] Seq.length (view'1 str) > UIntSize.to_int len
         -> Seq.length (view'1 str) = Seq.length (view'0 old_str)}
        {[@expl:loop invariant #3] [%#shillel2] forall i : int . 0 <= i /\ i < Seq.length (view'0 old_str)
         -> index_logic'0 str.current i = index_logic'0 (Snapshot.inner old_str).current i}
        {[@expl:loop invariant #4] [%#shillel1] forall i : int . Seq.length (view'0 old_str) <= i
        /\ i < Seq.length (view'1 str)  -> index_logic'0 str.current i = pad}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'0 {str.current} (fun (_ret':usize) ->  [ &_19 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {_19} {len} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1)
          | s1 = any [ br0 -> {_18 = false} (! bb7) | br1 -> {_18} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = {inv'0 str.current}
            Borrow.borrow_mut <t_Vec'0> {str.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_23 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &str <- { str with current = _ret'.final } ] 
                s1)
          | s1 = push'0 {_23} {pad} (fun (_ret':()) ->  [ &_22 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = bb2 ]
         ]
      
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'1 str} s1 | s1 = -{resolve'0 str}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & str : borrowed (t_Vec'0) = str
    | & len : usize = len
    | & pad : t_T'0 = pad
    | & old_str : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & _18 : bool = any_l ()
    | & _19 : usize = any_l ()
    | & _22 : () = any_l ()
    | & _23 : borrowed (t_Vec'0) = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:right_pad ensures #0] [%#shillel8] Seq.length (view'2 str.final)
      >= UIntSize.to_int len
      /\ Seq.length (view'2 str.final) >= Seq.length (view'1 str)}
      {[@expl:right_pad ensures #1] [%#shillel9] Seq.length (view'2 str.final) = UIntSize.to_int len
      \/ Seq.length (view'2 str.final) = Seq.length (view'1 str)}
      {[@expl:right_pad ensures #2] [%#shillel10] UIntSize.to_int len <= Seq.length (view'1 str)
       -> Seq.length (view'2 str.final) = Seq.length (view'1 str)}
      {[@expl:right_pad ensures #3] [%#shillel11] UIntSize.to_int len > Seq.length (view'1 str)
       -> Seq.length (view'2 str.final) = UIntSize.to_int len}
      {[@expl:right_pad ensures #4] [%#shillel12] forall i : int . 0 <= i /\ i < Seq.length (view'1 str)
       -> index_logic'0 str.final i = index_logic'0 str.current i}
      {[@expl:right_pad ensures #5] [%#shillel13] forall i : int . Seq.length (view'1 str) <= i
      /\ i < UIntSize.to_int len  -> index_logic'0 str.final i = pad}
      (! return' {result}) ]
    
end
module M_hillel__left_pad [#"hillel.rs" 34 0 34 58]
  let%span shillel0 = "hillel.rs" 35 18 35 35
  let%span shillel1 = "hillel.rs" 36 31 36 46
  let%span shillel2 = "hillel.rs" 43 16 43 65
  let%span shillel3 = "hillel.rs" 42 16 42 86
  let%span shillel4 = "hillel.rs" 41 16 41 49
  let%span shillel5 = "hillel.rs" 40 16 40 66
  let%span shillel6 = "hillel.rs" 39 16 39 60
  let%span shillel7 = "hillel.rs" 38 16 38 44
  let%span shillel8 = "hillel.rs" 45 19 45 20
  let%span shillel9 = "hillel.rs" 46 12 46 32
  let%span shillel10 = "hillel.rs" 34 21 34 24
  let%span shillel11 = "hillel.rs" 34 51 34 54
  let%span shillel12 = "hillel.rs" 30 10 30 62
  let%span shillel13 = "hillel.rs" 31 10 31 62
  let%span shillel14 = "hillel.rs" 32 10 32 88
  let%span shillel15 = "hillel.rs" 33 10 33 104
  let%span sops16 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span smodel17 = "../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span ssnapshot18 = "../../../creusot-contracts/src/snapshot.rs" 26 20 26 39
  let%span svec19 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 107 26 107 59
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 108 26 108 87
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 109 26 109 52
  let%span svec23 = "../../../creusot-contracts/src/std/vec.rs" 110 26 110 103
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel25 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span sresolve26 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant28 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant29 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq30 = "../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed31 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_T'0
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec24] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sops16] Seq.get (view'2 self) ix
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel17] view'2 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel25] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot18] view'3 (Snapshot.inner self)
  
  use seq.Seq
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed31] inv'2 self
  
  predicate inv'5 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'5 x] . inv'5 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq30] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec27] inv'4 (view'2 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#sinvariant29] inv'0 self
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  function view'4 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel25] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'3 self}
    any
    [ return' (result:usize)-> {[%#svec19] UIntSize.to_int result = Seq.length (view'4 self)} (! return' {result}) ]
    
  
  predicate invariant'1 (self : borrowed (t_Vec'0)) =
    [%#sinvariant28] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  let rec insert'0 (self:borrowed (t_Vec'0)) (index:usize) (element:t_T'0) (return'  (ret:()))= {[@expl:insert 'self' type invariant] inv'1 self}
    {[@expl:insert 'element' type invariant] inv'2 element}
    any
    [ return' (result:())-> {[%#svec20] Seq.length (view'2 self.final) = Seq.length (view'0 self) + 1}
      {[%#svec21] forall i : int . 0 <= i /\ i < UIntSize.to_int index
       -> index_logic'0 self.final i = index_logic'0 self.current i}
      {[%#svec22] index_logic'0 self.final (UIntSize.to_int index) = element}
      {[%#svec23] forall i : int . UIntSize.to_int index < i /\ i < Seq.length (view'2 self.final)
       -> index_logic'0 self.final i = index_logic'0 self.current (i - 1)}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (t_Vec'0)) =
    [%#sresolve26] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Vec'0)) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec left_pad'0 (str:borrowed (t_Vec'0)) (len:usize) (pad:t_T'0) (return'  (ret:()))= {[@expl:left_pad 'str' type invariant] [%#shillel10] inv'1 str}
    {[@expl:left_pad 'pad' type invariant] [%#shillel11] inv'2 pad}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [%#shillel0] Snapshot.new str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &c <- [%#shillel1] Snapshot.new 0 ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &old_3_0 <- Snapshot.new str ] s1 | s1 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:mut invariant] (Snapshot.inner old_3_0).final = str.final}
        {[@expl:loop invariant #0] [%#shillel7] Seq.length (view'1 old_str) <= Seq.length (view'0 str)}
        {[@expl:loop invariant #1] [%#shillel6] Seq.length (view'1 old_str) < UIntSize.to_int len
         -> Seq.length (view'0 str) <= UIntSize.to_int len}
        {[@expl:loop invariant #2] [%#shillel5] Seq.length (view'0 str) > UIntSize.to_int len
         -> Seq.length (view'0 str) = Seq.length (view'1 old_str)}
        {[@expl:loop invariant #3] [%#shillel4] Snapshot.inner c
        = Seq.length (view'0 str) - Seq.length (view'1 old_str)}
        {[@expl:loop invariant #4] [%#shillel3] forall i : int . Snapshot.inner c <= i /\ i < Seq.length (view'0 str)
         -> index_logic'0 str.current i = index_logic'0 (Snapshot.inner old_str).current (i - Snapshot.inner c)}
        {[@expl:loop invariant #5] [%#shillel2] forall i : int . 0 <= i /\ i < Snapshot.inner c
         -> index_logic'0 str.current i = pad}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0 [ s0 = len'0 {str.current} (fun (_ret':usize) ->  [ &_20 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {_20} {len} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
          | s1 = any [ br0 -> {_19 = false} (! bb9) | br1 -> {_19} (! bb6) ]  ]
          
        | bb6 = s0
          [ s0 = {inv'0 str.current}
            Borrow.borrow_mut <t_Vec'0> {str.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_24 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &str <- { str with current = _ret'.final } ] 
                s1)
          | s1 = insert'0 {_24} {[%#shillel8] (0 : usize)} {pad} (fun (_ret':()) ->  [ &_23 <- _ret' ] s2)
          | s2 = bb7 ]
          
        | bb7 = s0 [ s0 =  [ &_26 <- [%#shillel9] Snapshot.new (1 + Snapshot.inner c) ] s1 | s1 = bb8 ] 
        | bb8 = s0 [ s0 =  [ &c <- _26 ] s1 | s1 = bb3 ]  ]
         ]
      
    | bb9 = s0 [ s0 = {[@expl:type invariant] inv'1 str} s1 | s1 = -{resolve'0 str}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & str : borrowed (t_Vec'0) = str
    | & len : usize = len
    | & pad : t_T'0 = pad
    | & old_str : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & c : Snapshot.snap_ty int = any_l ()
    | & _19 : bool = any_l ()
    | & _20 : usize = any_l ()
    | & _23 : () = any_l ()
    | & _24 : borrowed (t_Vec'0) = any_l ()
    | & _26 : Snapshot.snap_ty int = any_l ()
    | & old_3_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:left_pad ensures #0] [%#shillel12] Seq.length (view'2 str.final)
      >= UIntSize.to_int len
      /\ Seq.length (view'2 str.final) >= Seq.length (view'0 str)}
      {[@expl:left_pad ensures #1] [%#shillel13] Seq.length (view'2 str.final) = UIntSize.to_int len
      \/ Seq.length (view'2 str.final) = Seq.length (view'0 str)}
      {[@expl:left_pad ensures #2] [%#shillel14] forall i : int . 0 <= i
      /\ i < Seq.length (view'2 str.final) - Seq.length (view'0 str)  -> index_logic'0 str.final i = pad}
      {[@expl:left_pad ensures #3] [%#shillel15] forall i : int . 0 <= i /\ i < Seq.length (view'0 str)
       -> index_logic'0 str.final (i + (Seq.length (view'2 str.final) - Seq.length (view'0 str)))
      = index_logic'0 str.current i}
      (! return' {result}) ]
    
end
module M_hillel__subset_push [#"hillel.rs" 73 0 73 37]
  let%span shillel0 = "hillel.rs" 72 10 72 41
  let%span shillel1 = "hillel.rs" 71 0 71 8
  let%span shillel2 = "hillel.rs" 67 8 67 72
  let%span shillel3 = "hillel.rs" 60 8 60 64
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate contains'0 [#"hillel.rs" 58 0 58 44] (seq : Seq.seq t_T'0) (elem : t_T'0) =
    [%#shillel3] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  
  predicate is_subset'0 [#"hillel.rs" 65 0 65 49] (sub : Seq.seq t_T'0) (sup : Seq.seq t_T'0) =
    [%#shillel2] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  
  constant s  : Seq.seq t_T'0
  
  constant elem  : t_T'0
  
  function subset_push'0 [#"hillel.rs" 73 0 73 37] (s : Seq.seq t_T'0) (elem : t_T'0) : ()
  
  goal vc_subset_push'0 : [%#shillel0] is_subset'0 s (Seq.snoc s elem)
end
module M_hillel__insert_unique [#"hillel.rs" 80 0 80 62]
  let%span shillel0 = "hillel.rs" 81 4 81 47
  let%span shillel1 = "hillel.rs" 82 20 82 94
  let%span shillel2 = "hillel.rs" 83 20 83 37
  let%span shillel3 = "hillel.rs" 86 4 86 7
  let%span shillel4 = "hillel.rs" 86 4 86 7
  let%span shillel5 = "hillel.rs" 85 16 85 109
  let%span shillel6 = "hillel.rs" 86 4 86 7
  let%span shillel7 = "hillel.rs" 86 4 86 7
  let%span shillel8 = "hillel.rs" 87 24 87 57
  let%span shillel9 = "hillel.rs" 89 28 89 73
  let%span shillel10 = "hillel.rs" 94 18 94 37
  let%span shillel11 = "hillel.rs" 95 20 95 76
  let%span shillel12 = "hillel.rs" 80 36 80 39
  let%span shillel13 = "hillel.rs" 80 54 80 58
  let%span shillel14 = "hillel.rs" 75 11 75 38
  let%span shillel15 = "hillel.rs" 76 10 76 40
  let%span shillel16 = "hillel.rs" 77 10 77 58
  let%span shillel17 = "hillel.rs" 78 10 78 87
  let%span shillel18 = "hillel.rs" 79 10 79 58
  let%span shillel19 = "hillel.rs" 72 10 72 41
  let%span shillel20 = "hillel.rs" 71 0 71 8
  let%span smodel21 = "../../../creusot-contracts/src/model.rs" 97 8 97 28
  let%span shillel22 = "hillel.rs" 67 8 67 72
  let%span svec23 = "../../../creusot-contracts/src/std/vec.rs" 169 26 169 42
  let%span sslice24 = "../../../creusot-contracts/src/std/slice.rs" 245 0 354 1
  let%span siter25 = "../../../creusot-contracts/src/std/iter.rs" 101 0 213 1
  let%span sops26 = "../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  let%span smodel27 = "../../../creusot-contracts/src/model.rs" 79 8 79 28
  let%span sslice28 = "../../../creusot-contracts/src/std/slice.rs" 405 12 405 66
  let%span siter29 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span sops30 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span scmp31 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span shillel32 = "hillel.rs" 60 8 60 64
  let%span shillel33 = "hillel.rs" 53 8 53 105
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 87 26 87 56
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 29 14 29 47
  let%span svec36 = "../../../creusot-contracts/src/std/vec.rs" 30 14 31 51
  let%span smodel37 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span siter38 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter39 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span sslice40 = "../../../creusot-contracts/src/std/slice.rs" 411 14 411 45
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 409 4 409 10
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 416 15 416 32
  let%span sslice43 = "../../../creusot-contracts/src/std/slice.rs" 417 15 417 32
  let%span sslice44 = "../../../creusot-contracts/src/std/slice.rs" 418 14 418 42
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 414 4 414 10
  let%span sslice46 = "../../../creusot-contracts/src/std/slice.rs" 96 14 96 41
  let%span sslice47 = "../../../creusot-contracts/src/std/slice.rs" 97 14 97 80
  let%span sslice48 = "../../../creusot-contracts/src/std/slice.rs" 398 20 398 61
  let%span sresolve49 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec50 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel51 = "../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span sslice52 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice53 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sops54 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sseq55 = "../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sinvariant56 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec57 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant58 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed59 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sslice60 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  
  use seq.Seq
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate contains'0 [#"hillel.rs" 58 0 58 44] (seq : Seq.seq t_DeepModelTy'0) (elem : t_DeepModelTy'0) =
    [%#shillel32] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  
  predicate is_subset'0 [#"hillel.rs" 65 0 65 49] (sub : Seq.seq t_DeepModelTy'0) (sup : Seq.seq t_DeepModelTy'0) =
    [%#shillel22] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  
  function subset_push'0 [#"hillel.rs" 73 0 73 37] (s : Seq.seq t_DeepModelTy'0) (elem : t_DeepModelTy'0) : () =
    [%#shillel20] ()
  
  axiom subset_push'0_spec : forall s : Seq.seq t_DeepModelTy'0, elem : t_DeepModelTy'0 . [%#shillel19] is_subset'0 s (Seq.snoc s elem)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  type t_T'0
  
  use seq.Seq
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'3_spec : forall self : t_Vec'0 . [%#svec50] Seq.length (view'3 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sops30] Seq.get (view'3 self) ix
  
  function deep_model'1 (self : t_T'0) : t_DeepModelTy'0
  
  function deep_model'3 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'3_spec : forall self : t_Vec'0 . ([%#svec35] Seq.length (view'3 self)
  = Seq.length (deep_model'3 self))
  && ([%#svec36] forall i : int . 0 <= i /\ i < Seq.length (view'3 self)
   -> Seq.get (deep_model'3 self) i = deep_model'1 (index_logic'1 self i))
  
  function deep_model'0 (self : borrowed (t_Vec'0)) : Seq.seq t_DeepModelTy'0 =
    [%#smodel21] deep_model'3 self.current
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate invariant'10 (self : t_T'0) =
    [%#sboxed59] inv'2 self
  
  predicate inv'13 (_1 : t_T'0)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_T'0 [inv'13 x] . inv'13 x = invariant'10 x
  
  predicate invariant'8 (self : Seq.seq t_T'0) =
    [%#sseq55] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : Seq.seq t_T'0 [inv'11 x] . inv'11 x = invariant'8 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec57] inv'11 (view'3 self)
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate invariant'3 (self : t_Vec'0) =
    [%#sinvariant58] inv'4 self
  
  predicate inv'5 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  function view'5 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'5_spec : forall self : slice t_T'0 . ([%#sslice52] Seq.length (view'5 self)
  <= UIntSize.to_int (v_MAX'0 : usize))
  && ([%#sslice53] view'5 self = Slice.id self)
  
  predicate invariant'9 (self : slice t_T'0) =
    [%#sslice60] inv'11 (view'5 self)
  
  predicate inv'12 (_1 : slice t_T'0)
  
  axiom inv_axiom'11 [@rewrite] : forall x : slice t_T'0 [inv'12 x] . inv'12 x = invariant'9 x
  
  predicate invariant'4 (self : slice t_T'0) =
    [%#sinvariant58] inv'12 self
  
  predicate inv'6 (_1 : slice t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : slice t_T'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  function view'0 (self : slice t_T'0) : Seq.seq t_T'0 =
    [%#smodel37] view'5 self
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel37] view'3 self
  
  let rec deref'0 (self:t_Vec'0) (return'  (ret:slice t_T'0))= {[@expl:deref 'self' type invariant] inv'5 self}
    any [ return' (result:slice t_T'0)-> {inv'6 result} {[%#svec23] view'0 result = view'1 self} (! return' {result}) ] 
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: opaque_ptr; t_Iter__qy95zmarker'0: () }
  
  function view'2 (self : t_Iter'0) : slice t_T'0
  
  let rec iter'0 (self:slice t_T'0) (return'  (ret:t_Iter'0))= {[@expl:iter 'self' type invariant] inv'6 self}
    any [ return' (result:t_Iter'0)-> {[%#sslice24] view'2 result = self} (! return' {result}) ] 
  
  predicate inv'0 (_1 : t_Iter'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Iter'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Iter'0) =
    [%#siter38] true
  
  predicate into_iter_post'0 (self : t_Iter'0) (res : t_Iter'0) =
    [%#siter39] self = res
  
  let rec into_iter'0 (self:t_Iter'0) (return'  (ret:t_Iter'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter25] into_iter_pre'0 self}
    any [ return' (result:t_Iter'0)-> {inv'0 result} {[%#siter25] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t_T'0)) (ix : int) : t_T'0 =
    [%#sops26] Seq.get (Snapshot.inner self) ix
  
  function deep_model'2 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel27] deep_model'1 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops54] Seq.get (view'5 self) ix
  
  function to_ref_seq'0 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom to_ref_seq'0_spec : forall self : slice t_T'0 . ([%#sslice46] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'0 self))
  && ([%#sslice47] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'2 self i)
  
  predicate produces'0 (self : t_Iter'0) (visited : Seq.seq t_T'0) (tl : t_Iter'0) =
    [%#sslice28] to_ref_seq'0 (view'2 self) = Seq.(++) visited (to_ref_seq'0 (view'2 tl))
  
  function produces_trans'0 (a : t_Iter'0) (ab : Seq.seq t_T'0) (b : t_Iter'0) (bc : Seq.seq t_T'0) (c : t_Iter'0) : ()
   =
    [%#sslice45] ()
  
  axiom produces_trans'0_spec : forall a : t_Iter'0, ab : Seq.seq t_T'0, b : t_Iter'0, bc : Seq.seq t_T'0, c : t_Iter'0 . ([%#sslice42] produces'0 a ab b)
   -> ([%#sslice43] produces'0 b bc c)  -> ([%#sslice44] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Iter'0) : () =
    [%#sslice41] ()
  
  axiom produces_refl'0_spec : forall self : t_Iter'0 . [%#sslice40] produces'0 self (Seq.empty  : Seq.seq t_T'0) self
  
  use seq.Seq
  
  predicate invariant'7 (self : t_T'0) =
    [%#sinvariant58] inv'2 self
  
  predicate inv'10 (_1 : t_T'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_T'0 [inv'10 x] . inv'10 x = invariant'7 x
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed59] inv'10 self
  
  predicate inv'9 (_1 : t_T'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_T'0 [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'0 (self : Seq.seq t_T'0) =
    [%#sseq55] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_T'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  predicate inv'7 (_1 : t_Option'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'0 [inv'7 x] . inv'7 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'10 a_0
    end
  
  predicate resolve'3 (self : borrowed (t_Iter'0)) =
    [%#sresolve49] self.final = self.current
  
  function view'6 (self : borrowed (t_Iter'0)) : slice t_T'0 =
    [%#smodel51] view'2 self.current
  
  use seq.Seq
  
  predicate completed'0 (self : borrowed (t_Iter'0)) =
    [%#sslice48] resolve'3 self /\ view'5 (view'6 self) = (Seq.empty  : Seq.seq t_T'0)
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Iter'0)) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {inv'7 result}
      {[%#siter29] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Iter'0)) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Snapshot
  
  predicate invariant'5 (self : t_T'0) =
    [%#sinvariant58] inv'10 self
  
  predicate inv'8 (_1 : t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_T'0 [inv'8 x] . inv'8 x = invariant'5 x
  
  function deep_model'4 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel27] deep_model'2 self
  
  let rec eq'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'8 self}
    {[@expl:eq 'other' type invariant] inv'8 other}
    any [ return' (result:bool)-> {[%#scmp31] result = (deep_model'4 self = deep_model'4 other)} (! return' {result}) ] 
  
  predicate resolve'1 (_1 : t_T'0)
  
  predicate invariant'1 (self : borrowed (t_Vec'0)) =
    [%#sinvariant56] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'3 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate resolve'4 (self : borrowed (t_Vec'0)) =
    [%#sresolve49] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_Vec'0)) =
    resolve'4 _1
  
  predicate is_unique'0 [#"hillel.rs" 51 0 51 34] (s : Seq.seq t_DeepModelTy'0) =
    [%#shillel33] forall i : int, j : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s
     -> Seq.get s i = Seq.get s j  -> i = j
  
  function view'4 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel51] view'3 self.current
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (t_Vec'0)) (value:t_T'0) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'3 self}
    {[@expl:push 'value' type invariant] inv'2 value}
    any [ return' (result:())-> {[%#svec34] view'3 self.final = Seq.snoc (view'4 self) value} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec insert_unique'0 (vec:borrowed (t_Vec'0)) (elem:t_T'0) (return'  (ret:()))= {[@expl:insert_unique 'vec' type invariant] [%#shillel12] inv'3 vec}
    {[@expl:insert_unique 'elem' type invariant] [%#shillel13] inv'2 elem}
    {[@expl:insert_unique requires] [%#shillel14] is_unique'0 (deep_model'0 vec)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_8 <- [%#shillel0] Snapshot.new () ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:assertion] [%#shillel1] is_subset'0 (deep_model'0 vec) (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
        s1
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &ghost_vec <- [%#shillel2] Snapshot.new vec ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 = deref'0 {vec.current} (fun (_ret':slice t_T'0) ->  [ &_18 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = iter'0 {_18} (fun (_ret':t_Iter'0) ->  [ &_16 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 = into_iter'0 {_16} (fun (_ret':t_Iter'0) ->  [ &iter <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &iter_old <- [%#shillel3] Snapshot.new iter ] s1 | s1 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &produced <- [%#shillel4] Snapshot.new (Seq.empty  : Seq.seq t_T'0) ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb12
      [ bb12 = {[@expl:for invariant] [%#shillel6] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#shillel6] inv'0 iter}
        {[@expl:for invariant] [%#shillel6] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#shillel5] forall j : int . 0 <= j /\ j < Seq.length (Snapshot.inner produced)
         -> deep_model'2 (index_logic'0 produced j) <> deep_model'1 elem}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <t_Iter'0> {iter}
              (fun (_ret':borrowed (t_Iter'0)) ->  [ &_31 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Iter'0> {_31.current} {Borrow.get_id _31}
              (fun (_ret':borrowed (t_Iter'0)) ->  [ &_30 <- _ret' ]  [ &_31 <- { _31 with current = _ret'.final } ] s2)
          | s2 = next'0 {_30} (fun (_ret':t_Option'0) ->  [ &_29 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'0 _31}- s1
          | s1 = any [ br0 -> {_29 = C_None'0 } (! bb17) | br1 (x0:t_T'0)-> {_29 = C_Some'0 x0} (! bb16) ]  ]
          
        | bb16 = bb18
        | bb18 = s0
          [ s0 = v_Some'0 {_29} (fun (r0'0:t_T'0) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_34 <- [%#shillel7] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _34 ] s1
          | s1 =  [ &e <- __creusot_proc_iter_elem ] s2
          | s2 = {[@expl:assertion] [%#shillel8] e
            = index_logic'1 (Snapshot.inner ghost_vec).current (Seq.length (Snapshot.inner produced) - 1)}
            s3
          | s3 = eq'0 {e} {elem} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s4)
          | s4 = bb20 ]
          
        | bb20 = any [ br0 -> {_39 = false} (! bb23) | br1 -> {_39} (! bb21) ] 
        | bb23 = bb12 ]
         ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'2 elem} s1
      | s1 = -{resolve'1 elem}- s2
      | s2 = {[@expl:type invariant] inv'3 vec} s3
      | s3 = -{resolve'2 vec}- s4
      | s4 = {[@expl:assertion] [%#shillel9] contains'0 (deep_model'0 vec) (deep_model'1 elem)} s5
      | s5 = bb22 ]
      
    | bb22 = bb26
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#shillel10] vec.final = (Snapshot.inner ghost_vec).final} s1
      | s1 = {[@expl:assertion] [%#shillel11] is_unique'0 (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))} s2
      | s2 = bb24 ]
      
    | bb24 = s0
      [ s0 = {inv'4 vec.current}
        Borrow.borrow_final <t_Vec'0> {vec.current} {Borrow.get_id vec}
          (fun (_ret':borrowed (t_Vec'0)) ->
             [ &_52 <- _ret' ] 
            -{inv'4 _ret'.final}-
             [ &vec <- { vec with current = _ret'.final } ] 
            s1)
      | s1 = push'0 {_52} {elem} (fun (_ret':()) ->  [ &_51 <- _ret' ] s2)
      | s2 = bb25 ]
      
    | bb25 = s0 [ s0 = {[@expl:type invariant] inv'3 vec} s1 | s1 = -{resolve'2 vec}- s2 | s2 = bb26 ] 
    | bb26 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & vec : borrowed (t_Vec'0) = vec
    | & elem : t_T'0 = elem
    | & _8 : Snapshot.snap_ty () = any_l ()
    | & ghost_vec : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & iter : t_Iter'0 = any_l ()
    | & _16 : t_Iter'0 = any_l ()
    | & _18 : slice t_T'0 = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Iter'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_T'0) = any_l ()
    | & _29 : t_Option'0 = any_l ()
    | & _30 : borrowed (t_Iter'0) = any_l ()
    | & _31 : borrowed (t_Iter'0) = any_l ()
    | & __creusot_proc_iter_elem : t_T'0 = any_l ()
    | & _34 : Snapshot.snap_ty (Seq.seq t_T'0) = any_l ()
    | & e : t_T'0 = any_l ()
    | & _39 : bool = any_l ()
    | & _51 : () = any_l ()
    | & _52 : borrowed (t_Vec'0) = any_l () ]
    
    [ return' (result:())-> {[@expl:insert_unique ensures #0] [%#shillel15] is_unique'0 (deep_model'3 vec.final)}
      {[@expl:insert_unique ensures #1] [%#shillel16] is_subset'0 (deep_model'0 vec) (deep_model'3 vec.final)}
      {[@expl:insert_unique ensures #2] [%#shillel17] is_subset'0 (deep_model'3 vec.final) (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
      {[@expl:insert_unique ensures #3] [%#shillel18] contains'0 (deep_model'3 vec.final) (deep_model'1 elem)}
      (! return' {result}) ]
    
end
module M_hillel__unique [#"hillel.rs" 102 0 102 56]
  let%span shillel0 = "hillel.rs" 103 21 103 31
  let%span shillel1 = "hillel.rs" 104 40 104 64
  let%span shillel2 = "hillel.rs" 110 13 110 14
  let%span shillel3 = "hillel.rs" 110 4 110 7
  let%span shillel4 = "hillel.rs" 110 4 110 7
  let%span shillel5 = "hillel.rs" 109 16 109 95
  let%span shillel6 = "hillel.rs" 108 16 108 64
  let%span shillel7 = "hillel.rs" 107 16 107 46
  let%span shillel8 = "hillel.rs" 106 16 106 27
  let%span shillel9 = "hillel.rs" 110 4 110 7
  let%span shillel10 = "hillel.rs" 110 4 110 7
  let%span shillel11 = "hillel.rs" 111 22 111 28
  let%span shillel12 = "hillel.rs" 113 18 113 55
  let%span shillel13 = "hillel.rs" 116 20 116 95
  let%span shillel14 = "hillel.rs" 117 20 117 88
  let%span shillel15 = "hillel.rs" 102 36 102 39
  let%span shillel16 = "hillel.rs" 102 50 102 56
  let%span shillel17 = "hillel.rs" 99 10 99 40
  let%span shillel18 = "hillel.rs" 100 10 100 58
  let%span shillel19 = "hillel.rs" 101 10 101 58
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 74 26 74 44
  let%span sslice21 = "../../../creusot-contracts/src/std/slice.rs" 245 0 354 1
  let%span siter22 = "../../../creusot-contracts/src/std/iter.rs" 101 0 213 1
  let%span smodel23 = "../../../creusot-contracts/src/model.rs" 79 8 79 28
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 29 14 29 47
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 30 14 31 51
  let%span shillel26 = "hillel.rs" 67 8 67 72
  let%span shillel27 = "hillel.rs" 53 8 53 105
  let%span srange28 = "../../../creusot-contracts/src/std/iter/range.rs" 23 12 27 70
  let%span siter29 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span shillel30 = "hillel.rs" 80 36 80 39
  let%span shillel31 = "hillel.rs" 80 54 80 58
  let%span shillel32 = "hillel.rs" 75 11 75 38
  let%span shillel33 = "hillel.rs" 76 10 76 40
  let%span shillel34 = "hillel.rs" 77 10 77 58
  let%span shillel35 = "hillel.rs" 78 10 78 87
  let%span shillel36 = "hillel.rs" 79 10 79 58
  let%span smodel37 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span siter39 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter40 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 40 14 40 44
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 41 14 41 96
  let%span sops43 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span shillel44 = "hillel.rs" 60 8 60 64
  let%span srange45 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange46 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange47 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange48 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange49 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange50 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange51 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange52 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum53 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span srange54 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve55 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel56 = "../../../creusot-contracts/src/model.rs" 97 8 97 28
  let%span sslice57 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice58 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sops59 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span svec60 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant61 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant62 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq63 = "../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sslice64 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sboxed65 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec38] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'7 (_1 : t_T'0)
  
  predicate invariant'5 (self : t_T'0) =
    [%#sboxed65] inv'7 self
  
  predicate inv'10 (_1 : t_T'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_T'0 [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq63] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'8 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Seq.seq t_T'0 [inv'8 x] . inv'8 x = invariant'3 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec60] inv'8 (view'1 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  let rec new'0 (_1:()) (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'0 result} {[%#svec20] Seq.length (view'1 result) = 0} (! return' {result}) ]
    
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  function view'2 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : slice t_T'0 . ([%#sslice57] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize))
  && ([%#sslice58] view'2 self = Slice.id self)
  
  predicate invariant'4 (self : slice t_T'0) =
    [%#sslice64] inv'8 (view'2 self)
  
  predicate inv'9 (_1 : slice t_T'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : slice t_T'0 [inv'9 x] . inv'9 x = invariant'4 x
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sinvariant62] inv'9 self
  
  predicate inv'4 (_1 : slice t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : slice t_T'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  function view'0 (self : slice t_T'0) : Seq.seq t_T'0 =
    [%#smodel37] view'2 self
  
  let rec len'0 (self:slice t_T'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'4 self}
    any
    [ return' (result:usize)-> {[%#sslice21] Seq.length (view'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'1 (_1 : t_Range'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Range'0 [inv'1 x] . inv'1 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter39] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter40] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'1 self}
    {[@expl:into_iter requires] [%#siter22] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'1 result} {[%#siter22] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops59] Seq.get (view'2 self) ix
  
  function deep_model'3 (self : t_T'0) : t_DeepModelTy'0
  
  function deep_model'2 (self : slice t_T'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'2_spec : forall self : slice t_T'0 . ([%#sslice41] Seq.length (view'0 self)
  = Seq.length (deep_model'2 self))
  && ([%#sslice42] forall i : int . 0 <= i /\ i < Seq.length (deep_model'2 self)
   -> Seq.get (deep_model'2 self) i = deep_model'3 (index_logic'1 self i))
  
  function deep_model'0 (self : slice t_T'0) : Seq.seq t_DeepModelTy'0 =
    [%#smodel23] deep_model'2 self
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sops43] Seq.get (view'1 self) ix
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : t_Vec'0 . ([%#svec24] Seq.length (view'1 self)
  = Seq.length (deep_model'1 self))
  && ([%#svec25] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)
   -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  
  predicate contains'0 [#"hillel.rs" 58 0 58 44] (seq : Seq.seq t_DeepModelTy'0) (elem : t_DeepModelTy'0) =
    [%#shillel44] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  
  predicate is_subset'0 [#"hillel.rs" 65 0 65 49] (sub : Seq.seq t_DeepModelTy'0) (sup : Seq.seq t_DeepModelTy'0) =
    [%#shillel26] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  
  predicate is_unique'0 [#"hillel.rs" 51 0 51 34] (s : Seq.seq t_DeepModelTy'0) =
    [%#shillel27] forall i : int, j : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s
     -> Seq.get s i = Seq.get s j  -> i = j
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function deep_model'4 (self : usize) : int =
    [%#snum53] UIntSize.to_int self
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange28] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'4 self.t_Range__start'0 <= deep_model'4 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'4 o.t_Range__start'0 <= deep_model'4 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'4 o.t_Range__start'0 - deep_model'4 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'4 (Seq.get visited i) = deep_model'4 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange47] inv'1 a)
   -> ([%#srange48] inv'1 b)
   -> ([%#srange49] inv'1 c)
   -> ([%#srange50] produces'0 a ab b)
   -> ([%#srange51] produces'0 b bc c)  -> ([%#srange52] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . ([%#srange45] inv'1 self)
   -> ([%#srange46] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate inv'2 (_1 : Seq.seq usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq usize [inv'2 x] . inv'2 x = true
  
  predicate inv'5 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_Range'0) [inv'5 x] . inv'5 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 usize
  
  predicate inv'6 (_1 : t_Option'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'0 [inv'6 x] . inv'6 x = true
  
  predicate resolve'2 (self : borrowed (t_Range'0)) =
    [%#sresolve55] self.final = self.current
  
  predicate completed'0 (self : borrowed (t_Range'0)) =
    [%#srange54] resolve'2 self
    /\ deep_model'4 (self.current).t_Range__start'0 >= deep_model'4 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'5 self}
    any
    [ return' (result:t_Option'0)-> {inv'6 result}
      {[%#siter29] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate invariant'1 (self : borrowed (t_Vec'0)) =
    [%#sinvariant61] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'3 x] . inv'3 x = invariant'1 x
  
  function deep_model'5 (self : borrowed (t_Vec'0)) : Seq.seq t_DeepModelTy'0 =
    [%#smodel56] deep_model'1 self.current
  
  use seq.Seq
  
  let rec insert_unique'0 (vec:borrowed (t_Vec'0)) (elem:t_T'0) (return'  (ret:()))= {[@expl:insert_unique 'vec' type invariant] [%#shillel30] inv'3 vec}
    {[@expl:insert_unique 'elem' type invariant] [%#shillel31] inv'7 elem}
    {[@expl:insert_unique requires] [%#shillel32] is_unique'0 (deep_model'5 vec)}
    any
    [ return' (result:())-> {[%#shillel33] is_unique'0 (deep_model'1 vec.final)}
      {[%#shillel34] is_subset'0 (deep_model'5 vec) (deep_model'1 vec.final)}
      {[%#shillel35] is_subset'0 (deep_model'1 vec.final) (Seq.snoc (deep_model'5 vec) (deep_model'3 elem))}
      {[%#shillel36] contains'0 (deep_model'1 vec.final) (deep_model'3 elem)}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (t_Vec'0)) =
    [%#sresolve55] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_Vec'0)) =
    resolve'3 _1
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec unique'0 (str:slice t_T'0) (return'  (ret:t_Vec'0))= {[@expl:unique 'str' type invariant] [%#shillel15] inv'4 str}
    (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#shillel0] ()} (fun (_ret':t_Vec'0) ->  [ &unique <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &sub_str <- [%#shillel1] Snapshot.new (Seq.empty  : Seq.seq t_T'0) ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = len'0 {str} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_10 <- { t_Range__start'0 = ([%#shillel2] (0 : usize)); t_Range__end'0 = _11 } ] s1
      | s1 = into_iter'0 {_10} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#shillel3] Snapshot.new iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#shillel4] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = bb11
      [ bb11 = {[@expl:for invariant] [%#shillel9] inv'2 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#shillel9] inv'1 iter}
        {[@expl:for invariant] [%#shillel9] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant #0] [%#shillel8] inv'0 unique}
        {[@expl:loop invariant #1] [%#shillel7] is_unique'0 (deep_model'1 unique)}
        {[@expl:loop invariant #2] [%#shillel6] is_subset'0 (deep_model'1 unique) (deep_model'0 str)}
        {[@expl:loop invariant #3] [%#shillel5] is_subset'0 (Seq.([..]) (deep_model'0 str) 0 (Seq.length (Snapshot.inner produced))) (deep_model'1 unique)}
        (! s0) [ s0 = bb12 ] 
        [ bb12 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_27 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Range'0> {_27.current} {Borrow.get_id _27}
              (fun (_ret':borrowed (t_Range'0)) ->
                 [ &_26 <- _ret' ] 
                 [ &_27 <- { _27 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_26} (fun (_ret':t_Option'0) ->  [ &_25 <- _ret' ] s3)
          | s3 = bb13 ]
          
        | bb13 = s0
          [ s0 = -{resolve'0 _27}- s1
          | s1 = any [ br0 -> {_25 = C_None'0 } (! bb16) | br1 (x0:usize)-> {_25 = C_Some'0 x0} (! bb15) ]  ]
          
        | bb15 = bb17
        | bb17 = s0
          [ s0 = v_Some'0 {_25} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_30 <- [%#shillel10] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb18 ]
          
        | bb18 = s0
          [ s0 =  [ &produced <- _30 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_34 <- i ] s3
          | s3 =  [ &_35 <- Slice.length str ] s4
          | s4 = UIntSize.lt {_34} {_35} (fun (_ret':bool) ->  [ &_36 <- _ret' ] s5)
          | s5 = {[@expl:index in bounds] [%#shillel11] _36} s6
          | s6 = bb19 ]
          
        | bb19 = s0
          [ s0 = Slice.get <t_T'0> {str} {_34} (fun (r'0:t_T'0) ->  [ &elem <- r'0 ] s1)
          | s1 = {inv'0 unique}
            Borrow.borrow_mut <t_Vec'0> {unique}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_39 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &unique <- _ret'.final ] 
                s2)
          | s2 = {inv'0 _39.current}
            Borrow.borrow_final <t_Vec'0> {_39.current} {Borrow.get_id _39}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_38 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &_39 <- { _39 with current = _ret'.final } ] 
                s3)
          | s3 = insert_unique'0 {_38} {elem} (fun (_ret':()) ->  [ &_37 <- _ret' ] s4)
          | s4 = bb20 ]
          
        | bb20 = s0
          [ s0 = {[@expl:type invariant] inv'3 _39} s1
          | s1 = -{resolve'1 _39}- s2
          | s2 =  [ &_41 <- [%#shillel12] Snapshot.new (Seq.snoc (Snapshot.inner sub_str) elem) ] s3
          | s3 = bb21 ]
          
        | bb21 = s0 [ s0 =  [ &sub_str <- _41 ] s1 | s1 = bb11 ]  ]
         ]
      
    | bb16 = s0
      [ s0 = {[@expl:assertion] [%#shillel13] is_subset'0 (Seq.([..]) (deep_model'0 str) 0 (Seq.length (view'0 str))) (deep_model'1 unique)}
        s1
      | s1 = bb22 ]
      
    | bb22 = s0
      [ s0 = {[@expl:assertion] [%#shillel14] Seq.(==) (Seq.([..]) (deep_model'0 str) 0 (Seq.length (view'0 str))) (deep_model'0 str)}
        s1
      | s1 =  [ &_0 <- unique ] s2
      | s2 = bb23 ]
      
    | bb23 = return' {_0} ]
    )
    [ & _0 : t_Vec'0 = any_l ()
    | & str : slice t_T'0 = str
    | & unique : t_Vec'0 = any_l ()
    | & sub_str : Snapshot.snap_ty (Seq.seq t_T'0) = any_l ()
    | & iter : t_Range'0 = any_l ()
    | & _10 : t_Range'0 = any_l ()
    | & _11 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _25 : t_Option'0 = any_l ()
    | & _26 : borrowed (t_Range'0) = any_l ()
    | & _27 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _30 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & elem : t_T'0 = any_l ()
    | & _34 : usize = any_l ()
    | & _35 : usize = any_l ()
    | & _36 : bool = any_l ()
    | & _37 : () = any_l ()
    | & _38 : borrowed (t_Vec'0) = any_l ()
    | & _39 : borrowed (t_Vec'0) = any_l ()
    | & _41 : Snapshot.snap_ty (Seq.seq t_T'0) = any_l () ]
    
    [ return' (result:t_Vec'0)-> {[@expl:unique result type invariant] [%#shillel16] inv'0 result}
      {[@expl:unique ensures #0] [%#shillel17] is_unique'0 (deep_model'1 result)}
      {[@expl:unique ensures #1] [%#shillel18] is_subset'0 (deep_model'1 result) (deep_model'0 str)}
      {[@expl:unique ensures #2] [%#shillel19] is_subset'0 (deep_model'0 str) (deep_model'1 result)}
      (! return' {result}) ]
    
end
module M_hillel__sum_range [#"hillel.rs" 125 0 125 54]
  let%span shillel0 = "hillel.rs" 123 11 123 53
  let%span shillel1 = "hillel.rs" 124 10 124 21
  let%span shillel2 = "hillel.rs" 122 10 122 19
  let%span shillel3 = "hillel.rs" 121 0 121 8
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  constant seq  : Seq.seq uint32
  
  constant from  : int
  
  constant to'  : int
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  goal vc_sum_range'0 : ([%#shillel0] 0 <= from /\ from <= to' /\ to' <= Seq.length seq)
   -> (if to' - from > 0 then
    (([@expl:sum_range requires] [%#shillel0] 0 <= from + 1 /\ from + 1 <= to' /\ to' <= Seq.length seq)
    /\ 0 <= ([%#shillel2] to' - from) /\ ([%#shillel2] to' - (from + 1)) < ([%#shillel2] to' - from))
    /\ (([%#shillel1] sum_range'0 seq (from + 1) to' >= 0)
     -> ([%#shillel1] UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' >= 0))
  else
    [%#shillel1] 0 >= 0
  )
end
module M_hillel__sum_range_split [#"hillel.rs" 137 0 137 61]
  let%span shillel0 = "hillel.rs" 135 11 135 63
  let%span shillel1 = "hillel.rs" 136 10 136 85
  let%span shillel2 = "hillel.rs" 134 10 134 18
  let%span shillel3 = "hillel.rs" 138 4 140 5
  let%span shillel4 = "hillel.rs" 123 11 123 53
  let%span shillel5 = "hillel.rs" 124 10 124 21
  let%span shillel6 = "hillel.rs" 122 10 122 19
  let%span shillel7 = "hillel.rs" 121 0 121 8
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel4] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)
   -> sum_range'0 seq from to'
  = ([%#shillel7] if to' - from > 0 then UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel4] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([%#shillel5] sum_range'0 seq from to' >= 0)
  
  constant seq  : Seq.seq uint32
  
  constant from  : int
  
  constant to'  : int
  
  constant i  : int
  
  function sum_range_split'0 [#"hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  
  goal vc_sum_range_split'0 : ([%#shillel0] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> (if i > from then
    (([@expl:sum_range_split requires] [%#shillel0] 0 <= from + 1 /\ from + 1 <= i /\ i <= to' /\ to' <= Seq.length seq)
    /\ 0 <= ([%#shillel2] i - from) /\ ([%#shillel2] i - (from + 1)) < ([%#shillel2] i - from))
    /\ (([%#shillel1] sum_range'0 seq (from + 1) to' = sum_range'0 seq (from + 1) i + sum_range'0 seq i to')
     -> (let _ = sum_range_split'0 seq (from + 1) to' i in [%#shillel1] sum_range'0 seq from to'
    = sum_range'0 seq from i + sum_range'0 seq i to'))
  else
    [%#shillel1] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to'
  )
end
module M_hillel__score [#"hillel.rs" 147 0 147 38]
  let%span shillel0 = "hillel.rs" 144 11 144 35
  let%span shillel1 = "hillel.rs" 145 10 145 64
  let%span shillel2 = "hillel.rs" 146 10 146 77
  let%span shillel3 = "hillel.rs" 135 11 135 63
  let%span shillel4 = "hillel.rs" 136 10 136 85
  let%span shillel5 = "hillel.rs" 134 10 134 18
  let%span shillel6 = "hillel.rs" 123 11 123 53
  let%span shillel7 = "hillel.rs" 124 10 124 21
  let%span shillel8 = "hillel.rs" 122 10 122 19
  let%span shillel9 = "hillel.rs" 148 4 148 41
  let%span shillel10 = "hillel.rs" 121 0 121 8
  let%span shillel11 = "hillel.rs" 138 4 140 5
  let%span sint12 = "../../../creusot-contracts/src/logic/int.rs" 69 4 69 12
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel6] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)
   -> sum_range'0 seq from to'
  = ([%#shillel10] if to' - from > 0 then UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel6] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([%#shillel7] sum_range'0 seq from to' >= 0)
  
  function sum_range_split'0 [#"hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  
  axiom sum_range_split'0_def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([%#shillel3] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> sum_range_split'0 seq from to' i
  = ([%#shillel11] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  
  axiom sum_range_split'0_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([%#shillel3] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> ([%#shillel4] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  
  function abs_diff'0 (self : int) (other : int) : int =
    [%#sint12] if self < other then other - self else self - other
  
  constant seq  : Seq.seq uint32
  
  constant i  : int
  
  function score'0 [#"hillel.rs" 147 0 147 38] (seq : Seq.seq uint32) (i : int) : int
  
  goal vc_score'0 : ([%#shillel0] 0 <= i /\ i <= Seq.length seq)
   -> ([@expl:sum_range_split requires] [%#shillel3] 0 <= 0
  /\ 0 <= i /\ i <= Seq.length seq /\ Seq.length seq <= Seq.length seq)
  /\ (([%#shillel4] sum_range'0 seq 0 (Seq.length seq) = sum_range'0 seq 0 i + sum_range'0 seq i (Seq.length seq))
   -> (let _ = sum_range_split'0 seq 0 (Seq.length seq) i in ([@expl:sum_range requires] [%#shillel6] 0 <= 0
  /\ 0 <= i /\ i <= Seq.length seq)
  /\ (([%#shillel7] sum_range'0 seq 0 i >= 0)
   -> ([@expl:sum_range requires] [%#shillel6] 0 <= i /\ i <= Seq.length seq /\ Seq.length seq <= Seq.length seq)
  /\ (([%#shillel7] sum_range'0 seq i (Seq.length seq) >= 0)
   -> (let result = abs_diff'0 (sum_range'0 seq 0 i) (sum_range'0 seq i (Seq.length seq)) in ([%#shillel1] 0 <= result
  /\ result <= sum_range'0 seq 0 (Seq.length seq))
  && ([%#shillel2] 0 = i \/ i = Seq.length seq  -> result = sum_range'0 seq 0 (Seq.length seq)))))))
end
module M_hillel__fulcrum [#"hillel.rs" 159 0 159 30]
  let%span shillel0 = "hillel.rs" 160 25 160 26
  let%span shillel1 = "hillel.rs" 164 4 164 7
  let%span shillel2 = "hillel.rs" 164 4 164 7
  let%span shillel3 = "hillel.rs" 163 16 163 52
  let%span shillel4 = "hillel.rs" 162 16 162 58
  let%span shillel5 = "hillel.rs" 164 4 164 7
  let%span shillel6 = "hillel.rs" 164 4 164 7
  let%span shillel7 = "hillel.rs" 168 20 168 56
  let%span shillel8 = "hillel.rs" 170 27 170 28
  let%span shillel9 = "hillel.rs" 173 23 173 24
  let%span shillel10 = "hillel.rs" 179 13 179 14
  let%span shillel11 = "hillel.rs" 179 4 179 7
  let%span shillel12 = "hillel.rs" 179 4 179 7
  let%span shillel13 = "hillel.rs" 178 16 178 97
  let%span shillel14 = "hillel.rs" 177 16 177 46
  let%span shillel15 = "hillel.rs" 176 16 176 61
  let%span shillel16 = "hillel.rs" 175 16 175 30
  let%span shillel17 = "hillel.rs" 174 16 174 56
  let%span shillel18 = "hillel.rs" 179 4 179 7
  let%span shillel19 = "hillel.rs" 179 4 179 7
  let%span shillel20 = "hillel.rs" 186 15 186 19
  let%span shillel21 = "hillel.rs" 155 11 155 45
  let%span shillel22 = "hillel.rs" 156 11 156 23
  let%span shillel23 = "hillel.rs" 157 10 157 44
  let%span shillel24 = "hillel.rs" 158 10 158 86
  let%span siter25 = "../../../creusot-contracts/src/std/iter.rs" 101 0 213 1
  let%span smodel26 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span shillel27 = "hillel.rs" 123 11 123 53
  let%span shillel28 = "hillel.rs" 124 10 124 21
  let%span shillel29 = "hillel.rs" 122 10 122 19
  let%span shillel30 = "hillel.rs" 121 0 121 8
  let%span sslice31 = "../../../creusot-contracts/src/std/slice.rs" 405 12 405 66
  let%span siter32 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span sslice33 = "../../../creusot-contracts/src/std/slice.rs" 245 0 354 1
  let%span shillel34 = "hillel.rs" 144 11 144 35
  let%span shillel35 = "hillel.rs" 145 10 145 64
  let%span shillel36 = "hillel.rs" 146 10 146 77
  let%span shillel37 = "hillel.rs" 148 4 148 41
  let%span srange38 = "../../../creusot-contracts/src/std/iter/range.rs" 23 12 27 70
  let%span snum39 = "../../../creusot-contracts/src/std/num.rs" 220 26 220 59
  let%span sslice40 = "../../../creusot-contracts/src/std/slice.rs" 360 20 360 24
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 366 20 366 32
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice43 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sslice44 = "../../../creusot-contracts/src/std/slice.rs" 411 14 411 45
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 409 4 409 10
  let%span sslice46 = "../../../creusot-contracts/src/std/slice.rs" 416 15 416 32
  let%span sslice47 = "../../../creusot-contracts/src/std/slice.rs" 417 15 417 32
  let%span sslice48 = "../../../creusot-contracts/src/std/slice.rs" 418 14 418 42
  let%span sslice49 = "../../../creusot-contracts/src/std/slice.rs" 414 4 414 10
  let%span sslice50 = "../../../creusot-contracts/src/std/slice.rs" 96 14 96 41
  let%span sslice51 = "../../../creusot-contracts/src/std/slice.rs" 97 14 97 80
  let%span sslice52 = "../../../creusot-contracts/src/std/slice.rs" 398 20 398 61
  let%span sresolve53 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span siter54 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter55 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span shillel56 = "hillel.rs" 135 11 135 63
  let%span shillel57 = "hillel.rs" 136 10 136 85
  let%span shillel58 = "hillel.rs" 134 10 134 18
  let%span shillel59 = "hillel.rs" 138 4 140 5
  let%span sint60 = "../../../creusot-contracts/src/logic/int.rs" 69 4 69 12
  let%span srange61 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange62 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange63 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange64 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange65 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange66 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange67 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange68 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum69 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span srange70 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sops71 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span smodel72 = "../../../creusot-contracts/src/model.rs" 106 8 106 22
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Slice
  
  predicate inv'4 (_1 : slice uint32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : slice uint32 [inv'4 x] . inv'4 x = true
  
  predicate into_iter_pre'0 (self : slice uint32) =
    [%#sslice40] true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: opaque_ptr; t_Iter__qy95zmarker'0: () }
  
  function view'2 (self : t_Iter'0) : slice uint32
  
  predicate into_iter_post'0 (self : slice uint32) (res : t_Iter'0) =
    [%#sslice41] self = view'2 res
  
  let rec into_iter'0 (self:slice uint32) (return'  (ret:t_Iter'0))= {[@expl:into_iter 'self' type invariant] inv'4 self}
    {[@expl:into_iter requires] [%#siter25] into_iter_pre'0 self}
    any [ return' (result:t_Iter'0)-> {[%#siter25] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  function view'1 (self : slice uint32) : Seq.seq uint32
  
  axiom view'1_spec : forall self : slice uint32 . ([%#sslice42] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize))
  && ([%#sslice43] view'1 self = Slice.id self)
  
  function view'0 (self : slice uint32) : Seq.seq uint32 =
    [%#smodel26] view'1 self
  
  use seq.Seq
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel27] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)
   -> sum_range'0 seq from to'
  = ([%#shillel30] if to' - from > 0 then UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel27] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([%#shillel28] sum_range'0 seq from to' >= 0)
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#sops71] Seq.get (view'1 self) ix
  
  function to_ref_seq'0 (self : slice uint32) : Seq.seq uint32
  
  axiom to_ref_seq'0_spec : forall self : slice uint32 . ([%#sslice50] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'0 self))
  && ([%#sslice51] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  
  predicate produces'0 (self : t_Iter'0) (visited : Seq.seq uint32) (tl : t_Iter'0) =
    [%#sslice31] to_ref_seq'0 (view'2 self) = Seq.(++) visited (to_ref_seq'0 (view'2 tl))
  
  function produces_trans'0 (a : t_Iter'0) (ab : Seq.seq uint32) (b : t_Iter'0) (bc : Seq.seq uint32) (c : t_Iter'0) : ()
    
   =
    [%#sslice49] ()
  
  axiom produces_trans'0_spec : forall a : t_Iter'0, ab : Seq.seq uint32, b : t_Iter'0, bc : Seq.seq uint32, c : t_Iter'0 . ([%#sslice46] produces'0 a ab b)
   -> ([%#sslice47] produces'0 b bc c)  -> ([%#sslice48] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Iter'0) : () =
    [%#sslice45] ()
  
  axiom produces_refl'0_spec : forall self : t_Iter'0 . [%#sslice44] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  predicate inv'0 (_1 : t_Iter'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Iter'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq uint32 [inv'1 x] . inv'1 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 uint32
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x = true
  
  predicate resolve'2 (self : borrowed (t_Iter'0)) =
    [%#sresolve53] self.final = self.current
  
  function view'3 (self : borrowed (t_Iter'0)) : slice uint32 =
    [%#smodel72] view'2 self.current
  
  use seq.Seq
  
  predicate completed'0 (self : borrowed (t_Iter'0)) =
    [%#sslice52] resolve'2 self /\ view'1 (view'3 self) = (Seq.empty  : Seq.seq uint32)
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Iter'0)) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {inv'5 result}
      {[%#siter32] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Iter'0)) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : uint32 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  let rec len'0 (self:slice uint32) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'4 self}
    any
    [ return' (result:usize)-> {[%#sslice33] Seq.length (view'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'2 (_1 : t_Range'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Range'0 [inv'2 x] . inv'2 x = true
  
  predicate into_iter_pre'1 (self : t_Range'0) =
    [%#siter54] true
  
  predicate into_iter_post'1 (self : t_Range'0) (res : t_Range'0) =
    [%#siter55] self = res
  
  let rec into_iter'1 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'2 self}
    {[@expl:into_iter requires] [%#siter25] into_iter_pre'1 self}
    any [ return' (result:t_Range'0)-> {inv'2 result} {[%#siter25] into_iter_post'1 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function sum_range_split'0 [#"hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  
  axiom sum_range_split'0_def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([%#shillel56] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> sum_range_split'0 seq from to' i
  = ([%#shillel59] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  
  axiom sum_range_split'0_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([%#shillel56] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> ([%#shillel57] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  
  function abs_diff'1 (self : int) (other : int) : int =
    [%#sint60] if self < other then other - self else self - other
  
  function score'0 [#"hillel.rs" 147 0 147 38] (seq : Seq.seq uint32) (i : int) : int =
    [%#shillel37] let _ = sum_range_split'0 seq 0 (Seq.length seq) i in abs_diff'1 (sum_range'0 seq 0 i) (sum_range'0 seq i (Seq.length seq))
  
  axiom score'0_spec : forall seq : Seq.seq uint32, i : int . ([%#shillel34] 0 <= i /\ i <= Seq.length seq)
   -> ([%#shillel35] 0 <= score'0 seq i /\ score'0 seq i <= sum_range'0 seq 0 (Seq.length seq))
  && ([%#shillel36] 0 = i \/ i = Seq.length seq  -> score'0 seq i = sum_range'0 seq 0 (Seq.length seq))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#snum69] UIntSize.to_int self
  
  use seq.Seq
  
  predicate produces'1 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange38] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'1 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange63] inv'2 a)
   -> ([%#srange64] inv'2 b)
   -> ([%#srange65] inv'2 c)
   -> ([%#srange66] produces'1 a ab b)
   -> ([%#srange67] produces'1 b bc c)  -> ([%#srange68] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_Range'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_Range'0 . ([%#srange61] inv'2 self)
   -> ([%#srange62] produces'1 self (Seq.empty  : Seq.seq usize) self)
  
  predicate inv'3 (_1 : Seq.seq usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq usize [inv'3 x] . inv'3 x = true
  
  predicate inv'6 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (t_Range'0) [inv'6 x] . inv'6 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 usize
  
  predicate inv'7 (_1 : t_Option'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Option'1 [inv'7 x] . inv'7 x = true
  
  predicate resolve'3 (self : borrowed (t_Range'0)) =
    [%#sresolve53] self.final = self.current
  
  predicate completed'1 (self : borrowed (t_Range'0)) =
    [%#srange70] resolve'3 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'1 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] inv'6 self}
    any
    [ return' (result:t_Option'1)-> {inv'7 result}
      {[%#siter32] match result with
        | C_None'1 -> completed'1 self
        | C_Some'1 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'1 (_1 : borrowed (t_Range'0)) =
    resolve'3 _1
  
  let rec v_Some'1 (input:t_Option'1) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'1 field_0 : t_Option'1] . C_Some'1 field_0 <> input} (! {false} any) ]
    
  
  let rec abs_diff'0 (self:uint32) (other:uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#snum39] UInt32.to_int result
      = abs_diff'1 (UInt32.to_int self) (UInt32.to_int other)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec fulcrum'0 (s:slice uint32) (return'  (ret:usize))= {[@expl:fulcrum requires #0] [%#shillel21] sum_range'0 (view'0 s) 0 (Seq.length (view'0 s))
    <= 1000}
    {[@expl:fulcrum requires #1] [%#shillel22] Seq.length (view'0 s) > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &total <- [%#shillel0] (0 : uint32) ] s1
      | s1 = into_iter'0 {s} (fun (_ret':t_Iter'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#shillel1] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#shillel2] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:for invariant] [%#shillel5] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#shillel5] inv'0 iter}
        {[@expl:for invariant] [%#shillel5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant #0] [%#shillel4] UInt32.to_int total
        = sum_range'0 (view'0 s) 0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant #1] [%#shillel3] UInt32.to_int total <= sum_range'0 (view'0 s) 0 (Seq.length (view'0 s))}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <t_Iter'0> {iter}
              (fun (_ret':borrowed (t_Iter'0)) ->  [ &_22 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Iter'0> {_22.current} {Borrow.get_id _22}
              (fun (_ret':borrowed (t_Iter'0)) ->  [ &_21 <- _ret' ]  [ &_22 <- { _22 with current = _ret'.final } ] s2)
          | s2 = next'0 {_21} (fun (_ret':t_Option'0) ->  [ &_20 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _22}- s1
          | s1 = any [ br0 -> {_20 = C_None'0 } (! bb9) | br1 (x0:uint32)-> {_20 = C_Some'0 x0} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = v_Some'0 {_20} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_25 <- [%#shillel6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _25 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {total} {x} (fun (_ret':uint32) ->  [ &total <- _ret' ] s3)
          | s3 = bb4 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#shillel7] UInt32.to_int total = sum_range'0 (view'0 s) 0 (Seq.length (view'0 s))} s1
      | s1 =  [ &min_i <- [%#shillel8] (0 : usize) ] s2
      | s2 =  [ &min_dist <- total ] s3
      | s3 =  [ &sum <- [%#shillel9] (0 : uint32) ] s4
      | s4 = len'0 {s} (fun (_ret':usize) ->  [ &_38 <- _ret' ] s5)
      | s5 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &_37 <- { t_Range__start'0 = ([%#shillel10] (0 : usize)); t_Range__end'0 = _38 } ] s1
      | s1 = into_iter'1 {_37} (fun (_ret':t_Range'0) ->  [ &iter1 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = s0 [ s0 =  [ &iter_old1 <- [%#shillel11] Snapshot.new iter1 ] s1 | s1 = bb14 ] 
    | bb14 = s0 [ s0 =  [ &produced1 <- [%#shillel12] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = bb16
      [ bb16 = {[@expl:for invariant] [%#shillel18] inv'3 (Snapshot.inner produced1)}
        {[@expl:for invariant] [%#shillel18] inv'2 iter1}
        {[@expl:for invariant] [%#shillel18] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
        {[@expl:loop invariant #0] [%#shillel17] UInt32.to_int sum
        = sum_range'0 (view'0 s) 0 (Seq.length (Snapshot.inner produced1))}
        {[@expl:loop invariant #1] [%#shillel16] UInt32.to_int sum <= UInt32.to_int total}
        {[@expl:loop invariant #2] [%#shillel15] UIntSize.to_int min_i <= Seq.length (Snapshot.inner produced1)
        /\ UIntSize.to_int min_i < Seq.length (view'0 s)}
        {[@expl:loop invariant #3] [%#shillel14] UInt32.to_int min_dist = score'0 (view'0 s) (UIntSize.to_int min_i)}
        {[@expl:loop invariant #4] [%#shillel13] forall j : int . 0 <= j /\ j < Seq.length (Snapshot.inner produced1)
         -> score'0 (view'0 s) (UIntSize.to_int min_i) <= score'0 (view'0 s) j}
        (! s0) [ s0 = bb17 ] 
        [ bb17 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {iter1}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_54 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Range'0> {_54.current} {Borrow.get_id _54}
              (fun (_ret':borrowed (t_Range'0)) ->
                 [ &_53 <- _ret' ] 
                 [ &_54 <- { _54 with current = _ret'.final } ] 
                s2)
          | s2 = next'1 {_53} (fun (_ret':t_Option'1) ->  [ &_52 <- _ret' ] s3)
          | s3 = bb18 ]
          
        | bb18 = s0
          [ s0 = -{resolve'1 _54}- s1
          | s1 = any [ br0 -> {_52 = C_None'1 } (! bb21) | br1 (x0:usize)-> {_52 = C_Some'1 x0} (! bb20) ]  ]
          
        | bb20 = bb22
        | bb22 = s0
          [ s0 = v_Some'1 {_52} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
          | s1 = 
            [ &_57 <- [%#shillel19] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
            
            s2
          | s2 = bb23 ]
          
        | bb23 = s0
          [ s0 =  [ &produced1 <- _57 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem1 ] s2
          | s2 = UInt32.sub {total} {sum} (fun (_ret':uint32) ->  [ &_62 <- _ret' ] s3)
          | s3 = abs_diff'0 {sum} {_62} (fun (_ret':uint32) ->  [ &dist <- _ret' ] s4)
          | s4 = bb24 ]
          
        | bb24 = s0
          [ s0 = UInt32.lt {dist} {min_dist} (fun (_ret':bool) ->  [ &_66 <- _ret' ] s1)
          | s1 = any [ br0 -> {_66 = false} (! bb26) | br1 -> {_66} (! bb25) ]  ]
          
        | bb25 = s0 [ s0 =  [ &min_i <- i ] s1 | s1 =  [ &min_dist <- dist ] s2 | s2 = bb27 ] 
        | bb26 = bb27
        | bb27 = s0
          [ s0 =  [ &_72 <- i ] s1
          | s1 =  [ &_73 <- Slice.length s ] s2
          | s2 = UIntSize.lt {_72} {_73} (fun (_ret':bool) ->  [ &_74 <- _ret' ] s3)
          | s3 = {[@expl:index in bounds] [%#shillel20] _74} s4
          | s4 = bb28 ]
          
        | bb28 = s0
          [ s0 = Slice.get <uint32> {s} {_72}
              (fun (r'0:uint32) -> UInt32.add {sum} {r'0} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s1))
          | s1 = bb16 ]
           ]
         ]
      
    | bb21 = s0 [ s0 =  [ &_0 <- min_i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & s : slice uint32 = s
    | & total : uint32 = any_l ()
    | & iter : t_Iter'0 = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Iter'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _20 : t_Option'0 = any_l ()
    | & _21 : borrowed (t_Iter'0) = any_l ()
    | & _22 : borrowed (t_Iter'0) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _25 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & x : uint32 = any_l ()
    | & min_i : usize = any_l ()
    | & min_dist : uint32 = any_l ()
    | & sum : uint32 = any_l ()
    | & iter1 : t_Range'0 = any_l ()
    | & _37 : t_Range'0 = any_l ()
    | & _38 : usize = any_l ()
    | & iter_old1 : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _52 : t_Option'1 = any_l ()
    | & _53 : borrowed (t_Range'0) = any_l ()
    | & _54 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _57 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & dist : uint32 = any_l ()
    | & _62 : uint32 = any_l ()
    | & _66 : bool = any_l ()
    | & _72 : usize = any_l ()
    | & _73 : usize = any_l ()
    | & _74 : bool = any_l () ]
    
    [ return' (result:usize)-> {[@expl:fulcrum ensures #0] [%#shillel23] 0 <= UIntSize.to_int result
      /\ UIntSize.to_int result < Seq.length (view'0 s)}
      {[@expl:fulcrum ensures #1] [%#shillel24] forall i : int . 0 <= i /\ i < Seq.length (view'0 s)
       -> score'0 (view'0 s) (UIntSize.to_int result) <= score'0 (view'0 s) i}
      (! return' {result}) ]
    
end
