module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_hillel__right_pad [#"hillel.rs" 17 0 17 59]
  type t
  
  let%span shillel0 = "hillel.rs" 18 18 18 35
  let%span shillel1 = "hillel.rs" 20 16 20 44
  let%span shillel2 = "hillel.rs" 20 4 20 46
  let%span shillel3 = "hillel.rs" 17 22 17 25
  let%span shillel4 = "hillel.rs" 17 52 17 55
  let%span shillel5 = "hillel.rs" 11 10 11 62
  let%span shillel6 = "hillel.rs" 12 10 12 62
  let%span shillel7 = "hillel.rs" 13 0 13 62
  let%span shillel8 = "hillel.rs" 14 0 14 55
  let%span shillel9 = "hillel.rs" 15 0 15 75
  let%span shillel10 = "hillel.rs" 16 0 16 75
  let%span ssnapshot11 = "../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span smodel12 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sops13 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel17 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sresolve18 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec19 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant20 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant21 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq22 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed23 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'2 (_1 : t)
  
  predicate invariant'4 (self : t) =
    [%#sboxed23] inv'2 self
  
  predicate inv'5 (_1 : t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t [inv'5 x] . inv'5 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#sseq22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#sinvariant21] inv'0 self
  
  predicate inv'3 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant20] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'1 x] . inv'1 x
  = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'2_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec16] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec19] inv'4 (view'2 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve18] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'1 _1
  
  use seq.Seq
  
  function view'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel12] view'2 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (value:t) (return'  (ret:()))= {[@expl:precondition] inv'2 value}
    {[@expl:precondition] inv'1 self}
    any [ return' (result:())-> {[%#svec15] view'2 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  function view'4 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#smodel17] view'2 self
  
  let rec len'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:usize)-> {[%#svec14] UIntSize.to_int result = Seq.length (view'4 self)} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#sops13] Seq.get (view'2 self) ix
  
  function view'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel17] view'1 self
  
  function view'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global)))) : Seq.seq t =
    [%#ssnapshot11] view'3 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec right_pad (str:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (len:usize) (pad:t) (return'  (ret:()))= {[%#shillel4] inv'2 pad}
    {[%#shillel3] inv'1 str}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [%#shillel0] Snapshot.new str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &old_2_0 <- Snapshot.new str ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = str.final}
        {[@expl:loop invariant] [%#shillel2] forall i : int . Seq.length (view'0 old_str) <= i
        /\ i < Seq.length (view'1 str)  -> index_logic'0 str.current i = pad}
        {[@expl:loop invariant] [%#shillel2] forall i : int . 0 <= i /\ i < Seq.length (view'0 old_str)
         -> index_logic'0 str.current i = index_logic'0 (Snapshot.inner old_str).current i}
        {[@expl:loop invariant] [%#shillel2] Seq.length (view'1 str) > UIntSize.to_int len
         -> Seq.length (view'1 str) = Seq.length (view'0 old_str)}
        {[@expl:loop invariant] [%#shillel2] Seq.length (view'0 old_str) < UIntSize.to_int len
         -> Seq.length (view'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant] [%#shillel1] Seq.length (view'0 old_str) <= Seq.length (view'1 str)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'0 {str.current} (fun (_ret':usize) ->  [ &_19 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {_19} {len} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1)
          | s1 = any [ br0 -> {_18 = false} (! bb7) | br1 -> {_18} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = {inv'0 str.current}
            Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {str.current}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_23 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &str <- { str with current = _ret'.final ; } ] 
                s1)
          | s1 = push'0 {_23} {pad} (fun (_ret':()) ->  [ &_22 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = bb2 ]
         ]
      
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'1 str} s1 | s1 = -{resolve'0 str}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & str : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = str
    | & len : usize = len
    | & pad : t = pad
    | & old_str : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l ()
    | & _18 : bool = any_l ()
    | & _19 : usize = any_l ()
    | & _22 : () = any_l ()
    | & _23 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shillel10] forall i : int . Seq.length (view'1 str) <= i
      /\ i < UIntSize.to_int len  -> index_logic'0 str.final i = pad}
      {[@expl:postcondition] [%#shillel9] forall i : int . 0 <= i /\ i < Seq.length (view'1 str)
       -> index_logic'0 str.final i = index_logic'0 str.current i}
      {[@expl:postcondition] [%#shillel8] UIntSize.to_int len > Seq.length (view'1 str)
       -> Seq.length (view'2 str.final) = UIntSize.to_int len}
      {[@expl:postcondition] [%#shillel7] UIntSize.to_int len <= Seq.length (view'1 str)
       -> Seq.length (view'2 str.final) = Seq.length (view'1 str)}
      {[@expl:postcondition] [%#shillel6] Seq.length (view'2 str.final) = UIntSize.to_int len
      \/ Seq.length (view'2 str.final) = Seq.length (view'1 str)}
      {[@expl:postcondition] [%#shillel5] Seq.length (view'2 str.final) >= UIntSize.to_int len
      /\ Seq.length (view'2 str.final) >= Seq.length (view'1 str)}
      (! return' {result}) ]
    
end
module M_hillel__left_pad [#"hillel.rs" 34 0 34 58]
  type t
  
  let%span shillel0 = "hillel.rs" 35 18 35 35
  let%span shillel1 = "hillel.rs" 36 31 36 46
  let%span shillel2 = "hillel.rs" 38 16 38 44
  let%span shillel3 = "hillel.rs" 38 4 38 46
  let%span shillel4 = "hillel.rs" 41 16 41 49
  let%span shillel5 = "hillel.rs" 45 19 45 20
  let%span shillel6 = "hillel.rs" 46 12 46 32
  let%span shillel7 = "hillel.rs" 34 21 34 24
  let%span shillel8 = "hillel.rs" 34 51 34 54
  let%span shillel9 = "hillel.rs" 30 10 30 62
  let%span shillel10 = "hillel.rs" 31 10 31 62
  let%span shillel11 = "hillel.rs" 32 0 32 90
  let%span shillel12 = "hillel.rs" 33 0 33 106
  let%span ssnapshot13 = "../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span smodel14 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sops15 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 110 26 110 59
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 111 16 111 89
  let%span svec19 = "../../../creusot-contracts/src/std/vec.rs" 112 26 112 52
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 113 16 113 105
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel22 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sresolve23 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant25 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant26 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq27 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed28 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'2 (_1 : t)
  
  predicate invariant'4 (self : t) =
    [%#sboxed28] inv'2 self
  
  predicate inv'5 (_1 : t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t [inv'5 x] . inv'5 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#sinvariant26] inv'0 self
  
  predicate inv'3 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant25] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'1 x] . inv'1 x
  = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'2_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec21] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec24] inv'4 (view'2 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve23] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'1 _1
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#sops15] Seq.get (view'2 self) ix
  
  function view'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel14] view'2 self.current
  
  let rec insert'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (index:usize) (element:t) (return'  (ret:()))= {[@expl:precondition] inv'2 element}
    {[@expl:precondition] inv'1 self}
    any
    [ return' (result:())-> {[%#svec20] forall i : int . UIntSize.to_int index < i /\ i < Seq.length (view'2 self.final)
       -> index_logic'0 self.final i = index_logic'0 self.current (i - 1)}
      {[%#svec19] index_logic'0 self.final (UIntSize.to_int index) = element}
      {[%#svec18] forall i : int . 0 <= i /\ i < UIntSize.to_int index
       -> index_logic'0 self.final i = index_logic'0 self.current i}
      {[%#svec17] Seq.length (view'2 self.final) = Seq.length (view'1 self) + 1}
      (! return' {result}) ]
    
  
  function view'4 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#smodel22] view'2 self
  
  let rec len'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:usize)-> {[%#svec16] UIntSize.to_int result = Seq.length (view'4 self)} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel22] view'1 self
  
  function view'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global)))) : Seq.seq t =
    [%#ssnapshot13] view'3 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec left_pad (str:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (len:usize) (pad:t) (return'  (ret:()))= {[%#shillel8] inv'2 pad}
    {[%#shillel7] inv'1 str}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [%#shillel0] Snapshot.new str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &c <- [%#shillel1] Snapshot.new 0 ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &old_3_0 <- Snapshot.new str ] s1 | s1 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] (Snapshot.inner old_3_0).final = str.final}
        {[@expl:loop invariant] [%#shillel3] forall i : int . 0 <= i /\ i < Snapshot.inner c
         -> index_logic'0 str.current i = pad}
        {[@expl:loop invariant] [%#shillel3] forall i : int . Snapshot.inner c <= i /\ i < Seq.length (view'1 str)
         -> index_logic'0 str.current i = index_logic'0 (Snapshot.inner old_str).current (i - Snapshot.inner c)}
        {[@expl:loop invariant] [%#shillel4] Snapshot.inner c = Seq.length (view'1 str) - Seq.length (view'0 old_str)}
        {[@expl:loop invariant] [%#shillel3] Seq.length (view'1 str) > UIntSize.to_int len
         -> Seq.length (view'1 str) = Seq.length (view'0 old_str)}
        {[@expl:loop invariant] [%#shillel3] Seq.length (view'0 old_str) < UIntSize.to_int len
         -> Seq.length (view'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant] [%#shillel2] Seq.length (view'0 old_str) <= Seq.length (view'1 str)}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0 [ s0 = len'0 {str.current} (fun (_ret':usize) ->  [ &_20 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {_20} {len} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
          | s1 = any [ br0 -> {_19 = false} (! bb9) | br1 -> {_19} (! bb6) ]  ]
          
        | bb6 = s0
          [ s0 = {inv'0 str.current}
            Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {str.current}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_24 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &str <- { str with current = _ret'.final ; } ] 
                s1)
          | s1 = insert'0 {_24} {[%#shillel5] (0 : usize)} {pad} (fun (_ret':()) ->  [ &_23 <- _ret' ] s2)
          | s2 = bb7 ]
          
        | bb7 = s0 [ s0 =  [ &_26 <- [%#shillel6] Snapshot.new (1 + Snapshot.inner c) ] s1 | s1 = bb8 ] 
        | bb8 = s0 [ s0 =  [ &c <- _26 ] s1 | s1 = bb3 ]  ]
         ]
      
    | bb9 = s0 [ s0 = {[@expl:type invariant] inv'1 str} s1 | s1 = -{resolve'0 str}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & str : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = str
    | & len : usize = len
    | & pad : t = pad
    | & old_str : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l ()
    | & c : Snapshot.snap_ty int = any_l ()
    | & _19 : bool = any_l ()
    | & _20 : usize = any_l ()
    | & _23 : () = any_l ()
    | & _24 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _26 : Snapshot.snap_ty int = any_l ()
    | & old_3_0 : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shillel12] forall i : int . 0 <= i /\ i < Seq.length (view'1 str)
       -> index_logic'0 str.final (i + (Seq.length (view'2 str.final) - Seq.length (view'1 str)))
      = index_logic'0 str.current i}
      {[@expl:postcondition] [%#shillel11] forall i : int . 0 <= i
      /\ i < Seq.length (view'2 str.final) - Seq.length (view'1 str)  -> index_logic'0 str.final i = pad}
      {[@expl:postcondition] [%#shillel10] Seq.length (view'2 str.final) = UIntSize.to_int len
      \/ Seq.length (view'2 str.final) = Seq.length (view'1 str)}
      {[@expl:postcondition] [%#shillel9] Seq.length (view'2 str.final) >= UIntSize.to_int len
      /\ Seq.length (view'2 str.final) >= Seq.length (view'1 str)}
      (! return' {result}) ]
    
end
module M_hillel__subset_push [#"hillel.rs" 73 0 73 37]
  type t
  
  let%span shillel0 = "hillel.rs" 72 10 72 36
  let%span shillel1 = "hillel.rs" 66 4 68 5
  let%span shillel2 = "hillel.rs" 59 4 61 5
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate contains'0 [#"hillel.rs" 58 0 58 44] (seq : Seq.seq t) (elem : t) =
    [%#shillel2] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  
  predicate is_subset'0 [#"hillel.rs" 65 0 65 49] (sub : Seq.seq t) (sup : Seq.seq t) =
    [%#shillel1] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  
  use seq.Seq
  
  constant s  : Seq.seq t
  
  constant elem  : t
  
  function subset_push [#"hillel.rs" 73 0 73 37] (s : Seq.seq t) (elem : t) : ()
  
  goal vc_subset_push : [%#shillel0] is_subset'0 s (Seq.snoc s elem)
end
module T_core__slice__iter__Iter
  use prelude.prelude.Borrow
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Iter 't =
    | C_Iter (NonNull'0.t_NonNull 't) opaque_ptr (PhantomData'0.t_PhantomData 't)
  
  let rec t_Iter < 't > (input:t_Iter 't) (ret  (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (ptr:NonNull'0.t_NonNull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker}) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_hillel__insert_unique [#"hillel.rs" 80 0 80 62]
  type t
  
  let%span shillel0 = "hillel.rs" 81 4 81 47
  let%span shillel1 = "hillel.rs" 82 20 82 89
  let%span shillel2 = "hillel.rs" 83 20 83 37
  let%span shillel3 = "hillel.rs" 85 4 85 111
  let%span shillel4 = "hillel.rs" 85 4 85 111
  let%span shillel5 = "hillel.rs" 85 4 85 111
  let%span shillel6 = "hillel.rs" 85 4 85 111
  let%span shillel7 = "hillel.rs" 87 24 87 57
  let%span shillel8 = "hillel.rs" 89 28 89 73
  let%span shillel9 = "hillel.rs" 94 18 94 37
  let%span shillel10 = "hillel.rs" 95 20 95 71
  let%span shillel11 = "hillel.rs" 75 11 75 38
  let%span shillel12 = "hillel.rs" 80 36 80 39
  let%span shillel13 = "hillel.rs" 80 54 80 58
  let%span shillel14 = "hillel.rs" 76 10 76 40
  let%span shillel15 = "hillel.rs" 77 10 77 58
  let%span shillel16 = "hillel.rs" 78 10 78 82
  let%span shillel17 = "hillel.rs" 79 10 79 58
  let%span shillel18 = "hillel.rs" 72 10 72 36
  let%span shillel19 = "hillel.rs" 71 0 71 8
  let%span smodel20 = "../../../creusot-contracts/src/model.rs" 100 8 100 28
  let%span shillel21 = "hillel.rs" 66 4 68 5
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 172 26 172 42
  let%span sslice23 = "../../../creusot-contracts/src/std/slice.rs" 249 0 358 1
  let%span siter24 = "../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span sslice25 = "../../../creusot-contracts/src/std/slice.rs" 410 12 410 66
  let%span sops26 = "../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  let%span smodel27 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span siter28 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span sops29 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span scmp30 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span shillel31 = "hillel.rs" 59 4 61 5
  let%span shillel32 = "hillel.rs" 52 4 54 5
  let%span svec33 = "../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 31 14 31 47
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 32 4 33 53
  let%span smodel36 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span siter37 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter38 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span sslice39 = "../../../creusot-contracts/src/std/slice.rs" 418 14 418 45
  let%span sslice40 = "../../../creusot-contracts/src/std/slice.rs" 416 4 416 10
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 425 15 425 32
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 426 15 426 32
  let%span sslice43 = "../../../creusot-contracts/src/std/slice.rs" 427 14 427 42
  let%span sslice44 = "../../../creusot-contracts/src/std/slice.rs" 423 4 423 10
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 100 14 100 41
  let%span sslice46 = "../../../creusot-contracts/src/std/slice.rs" 101 4 101 82
  let%span sslice47 = "../../../creusot-contracts/src/std/slice.rs" 403 20 403 61
  let%span sresolve48 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec49 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel50 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice51 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice52 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sseq53 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sops54 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sinvariant55 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec56 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant57 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed58 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sslice59 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  
  predicate inv'2 (_1 : t)
  
  predicate invariant'10 (self : t) =
    [%#sboxed58] inv'2 self
  
  predicate inv'13 (_1 : t)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t [inv'13 x] . inv'13 x = invariant'10 x
  
  use seq.Seq
  
  predicate inv'11 (_1 : Seq.seq t)
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'5 (self : slice t) : Seq.seq t
  
  axiom view'5_spec : forall self : slice t . ([%#sslice52] view'5 self = Slice.id self)
  && ([%#sslice51] Seq.length (view'5 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'9 (self : slice t) =
    [%#sslice59] inv'11 (view'5 self)
  
  predicate inv'12 (_1 : slice t)
  
  axiom inv_axiom'11 [@rewrite] : forall x : slice t [inv'12 x] . inv'12 x = invariant'9 x
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq t) =
    [%#sseq53] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  axiom inv_axiom'10 [@rewrite] : forall x : Seq.seq t [inv'11 x] . inv'11 x = invariant'8 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : t) =
    [%#sinvariant57] inv'2 self
  
  predicate inv'10 (_1 : t)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t [inv'10 x] . inv'10 x = invariant'7 x
  
  predicate invariant'6 (self : t) =
    [%#sboxed58] inv'10 self
  
  predicate inv'9 (_1 : t)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'5 (self : t) =
    [%#sinvariant57] inv'10 self
  
  predicate inv'8 (_1 : t)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t [inv'8 x] . inv'8 x = invariant'5 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'7 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Option'0.t_Option t [inv'7 x] . inv'7 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'10 a_0
    end
  
  predicate invariant'4 (self : slice t) =
    [%#sinvariant57] inv'12 self
  
  predicate inv'6 (_1 : slice t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : slice t [inv'6 x] . inv'6 x = invariant'4 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'4 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  predicate invariant'3 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#sinvariant57] inv'4 self
  
  predicate inv'5 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv_axiom'4 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'5 x] . inv'5 x = invariant'3 x
  
  function view'3 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'3_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec49] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec56] inv'11 (view'3 self)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant55] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'3 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'3 x] . inv'3 x
  = invariant'1 x
  
  use seq.Seq
  
  use T_core__slice__iter__Iter as Iter'0
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#sops54] Seq.get (view'5 self) ix
  
  use seq.Seq
  
  function view'0 (self : slice t) : Seq.seq t =
    [%#smodel36] view'5 self
  
  use seq.Seq
  
  function to_ref_seq'0 (self : slice t) : Seq.seq t
  
  axiom to_ref_seq'0_spec : forall self : slice t . ([%#sslice46] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'2 self i)
  && ([%#sslice45] Seq.length (to_ref_seq'0 self) = Seq.length (view'0 self))
  
  function view'2 (self : Iter'0.t_Iter t) : slice t
  
  predicate produces'0 (self : Iter'0.t_Iter t) (visited : Seq.seq t) (tl : Iter'0.t_Iter t) =
    [%#sslice25] to_ref_seq'0 (view'2 self) = Seq.(++) visited (to_ref_seq'0 (view'2 tl))
  
  function produces_trans'0 (a : Iter'0.t_Iter t) (ab : Seq.seq t) (b : Iter'0.t_Iter t) (bc : Seq.seq t) (c : Iter'0.t_Iter t) : ()
    
   =
    [%#sslice44] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_Iter t, ab : Seq.seq t, b : Iter'0.t_Iter t, bc : Seq.seq t, c : Iter'0.t_Iter t . ([%#sslice41] produces'0 a ab b)
   -> ([%#sslice42] produces'0 b bc c)  -> ([%#sslice43] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Iter'0.t_Iter t) : () =
    [%#sslice40] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_Iter t . [%#sslice39] produces'0 self (Seq.empty  : Seq.seq t) self
  
  predicate inv'1 (_1 : Iter'0.t_Iter t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Iter'0.t_Iter t [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t) =
    [%#sseq53] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq t [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  function deep_model'1 (self : t) : t_DeepModelTy'0
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#sops29] Seq.get (view'3 self) ix
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'3 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'3_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . ([%#svec35] forall i : int . 0 <= i
  /\ i < Seq.length (view'3 self)  -> Seq.get (deep_model'3 self) i = deep_model'1 (index_logic'1 self i))
  && ([%#svec34] Seq.length (view'3 self) = Seq.length (deep_model'3 self))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function view'4 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel50] view'3 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (value:t) (return'  (ret:()))= {[@expl:precondition] inv'2 value}
    {[@expl:precondition] inv'3 self}
    any [ return' (result:())-> {[%#svec33] view'3 self.final = Seq.snoc (view'4 self) value} (! return' {result}) ] 
  
  predicate is_unique'0 [#"hillel.rs" 51 0 51 34] (s : Seq.seq t_DeepModelTy'0) =
    [%#shillel32] forall i : int, j : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s
     -> Seq.get s i = Seq.get s j  -> i = j
  
  predicate contains'0 [#"hillel.rs" 58 0 58 44] (seq : Seq.seq t_DeepModelTy'0) (elem : t_DeepModelTy'0) =
    [%#shillel31] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  
  predicate resolve'4 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve48] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'4 _1
  
  predicate resolve'1 (_1 : t)
  
  function deep_model'2 (self : t) : t_DeepModelTy'0 =
    [%#smodel27] deep_model'1 self
  
  function deep_model'4 (self : t) : t_DeepModelTy'0 =
    [%#smodel27] deep_model'2 self
  
  let rec eq'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] inv'8 other}
    {[@expl:precondition] inv'8 self}
    any [ return' (result:bool)-> {[%#scmp30] result = (deep_model'4 self = deep_model'4 other)} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate resolve'3 (self : borrowed (Iter'0.t_Iter t)) =
    [%#sresolve48] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Iter'0.t_Iter t)) =
    resolve'3 _1
  
  use seq.Seq
  
  function view'6 (self : borrowed (Iter'0.t_Iter t)) : slice t =
    [%#smodel50] view'2 self.current
  
  predicate completed'0 (self : borrowed (Iter'0.t_Iter t)) =
    [%#sslice47] resolve'3 self /\ view'5 (view'6 self) = (Seq.empty  : Seq.seq t)
  
  let rec next'0 (self:borrowed (Iter'0.t_Iter t)) (return'  (ret:Option'0.t_Option t))= any
    [ return' (result:Option'0.t_Option t)-> {inv'7 result}
      {[%#siter28] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t)) (ix : int) : t =
    [%#sops26] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Iter'0.t_Iter t) (res : Iter'0.t_Iter t) =
    [%#siter38] self = res
  
  predicate into_iter_pre'0 (self : Iter'0.t_Iter t) =
    [%#siter37] true
  
  let rec into_iter'0 (self:Iter'0.t_Iter t) (return'  (ret:Iter'0.t_Iter t))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter24] into_iter_pre'0 self}
    any
    [ return' (result:Iter'0.t_Iter t)-> {inv'1 result}
      {[%#siter24] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec iter'0 (self:slice t) (return'  (ret:Iter'0.t_Iter t))= {[@expl:precondition] inv'6 self}
    any [ return' (result:Iter'0.t_Iter t)-> {[%#sslice23] view'2 result = self} (! return' {result}) ] 
  
  function view'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#smodel36] view'3 self
  
  let rec deref'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (return'  (ret:slice t))= {[@expl:precondition] inv'5 self}
    any [ return' (result:slice t)-> {inv'6 result} {[%#svec22] view'0 result = view'1 self} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  predicate is_subset'0 [#"hillel.rs" 65 0 65 49] (sub : Seq.seq t_DeepModelTy'0) (sup : Seq.seq t_DeepModelTy'0) =
    [%#shillel21] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  
  use seq.Seq
  
  function deep_model'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t_DeepModelTy'0 =
    [%#smodel20] deep_model'3 self.current
  
  use prelude.prelude.Snapshot
  
  function subset_push'0 [#"hillel.rs" 73 0 73 37] (s : Seq.seq t_DeepModelTy'0) (elem : t_DeepModelTy'0) : () =
    [%#shillel19] ()
  
  axiom subset_push'0_spec : forall s : Seq.seq t_DeepModelTy'0, elem : t_DeepModelTy'0 . [%#shillel18] is_subset'0 s (Seq.snoc s elem)
  
  meta "compute_max_steps" 1000000
  
  let rec insert_unique (vec:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (elem:t) (return'  (ret:()))= {[%#shillel13] inv'2 elem}
    {[%#shillel12] inv'3 vec}
    {[%#shillel11] is_unique'0 (deep_model'0 vec)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_8 <- [%#shillel0] Snapshot.new () ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:assertion] [%#shillel1] is_subset'0 (deep_model'0 vec) (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
        s1
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &ghost_vec <- [%#shillel2] Snapshot.new vec ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 = deref'0 {vec.current} (fun (_ret':slice t) ->  [ &_18 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = iter'0 {_18} (fun (_ret':Iter'0.t_Iter t) ->  [ &_16 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 = into_iter'0 {_16} (fun (_ret':Iter'0.t_Iter t) ->  [ &iter <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &iter_old <- [%#shillel3] Snapshot.new iter ] s1 | s1 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &produced <- [%#shillel4] Snapshot.new (Seq.empty  : Seq.seq t) ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb12
      [ bb12 = {[@expl:loop invariant] [%#shillel5] forall j : int . 0 <= j /\ j < Seq.length (Snapshot.inner produced)
         -> deep_model'2 (index_logic'0 produced j) <> deep_model'1 elem}
        {[@expl:loop invariant] [%#shillel5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#shillel5] inv'1 iter}
        {[@expl:loop invariant] [%#shillel5] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_Iter t> {iter}
              (fun (_ret':borrowed (Iter'0.t_Iter t)) ->  [ &_31 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Iter'0.t_Iter t> {_31.current} {Borrow.get_id _31}
              (fun (_ret':borrowed (Iter'0.t_Iter t)) ->
                 [ &_30 <- _ret' ] 
                 [ &_31 <- { _31 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_30} (fun (_ret':Option'0.t_Option t) ->  [ &_29 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'0 _31}- s1
          | s1 = any [ br0 -> {_29 = Option'0.C_None } (! bb17) | br1 (a:t)-> {_29 = Option'0.C_Some a} (! bb16) ]  ]
          
        | bb16 = bb18
        | bb18 = s0
          [ s0 = Option'0.v_Some <t> {_29} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_34 <- [%#shillel6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _34 ] s1
          | s1 =  [ &e <- __creusot_proc_iter_elem ] s2
          | s2 = {[@expl:assertion] [%#shillel7] e
            = index_logic'1 (Snapshot.inner ghost_vec).current (Seq.length (Snapshot.inner produced) - 1)}
            s3
          | s3 = eq'0 {e} {elem} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s4)
          | s4 = bb20 ]
          
        | bb20 = any [ br0 -> {_39 = false} (! bb23) | br1 -> {_39} (! bb21) ] 
        | bb23 = bb12 ]
         ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'2 elem} s1
      | s1 = -{resolve'1 elem}- s2
      | s2 = {[@expl:type invariant] inv'3 vec} s3
      | s3 = -{resolve'2 vec}- s4
      | s4 = {[@expl:assertion] [%#shillel8] contains'0 (deep_model'0 vec) (deep_model'1 elem)} s5
      | s5 = bb22 ]
      
    | bb22 = bb26
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#shillel9] vec.final = (Snapshot.inner ghost_vec).final} s1
      | s1 = {[@expl:assertion] [%#shillel10] is_unique'0 (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))} s2
      | s2 = bb24 ]
      
    | bb24 = s0
      [ s0 = {inv'4 vec.current}
        Borrow.borrow_final <Vec'0.t_Vec t (Global'0.t_Global)> {vec.current} {Borrow.get_id vec}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_52 <- _ret' ] 
            -{inv'4 _ret'.final}-
             [ &vec <- { vec with current = _ret'.final ; } ] 
            s1)
      | s1 = push'0 {_52} {elem} (fun (_ret':()) ->  [ &_51 <- _ret' ] s2)
      | s2 = bb25 ]
      
    | bb25 = s0 [ s0 = {[@expl:type invariant] inv'3 vec} s1 | s1 = -{resolve'2 vec}- s2 | s2 = bb26 ] 
    | bb26 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & vec : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = vec
    | & elem : t = elem
    | & _8 : Snapshot.snap_ty () = any_l ()
    | & ghost_vec : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l ()
    | & iter : Iter'0.t_Iter t = any_l ()
    | & _16 : Iter'0.t_Iter t = any_l ()
    | & _18 : slice t = any_l ()
    | & iter_old : Snapshot.snap_ty (Iter'0.t_Iter t) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & _29 : Option'0.t_Option t = any_l ()
    | & _30 : borrowed (Iter'0.t_Iter t) = any_l ()
    | & _31 : borrowed (Iter'0.t_Iter t) = any_l ()
    | & __creusot_proc_iter_elem : t = any_l ()
    | & _34 : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & e : t = any_l ()
    | & _39 : bool = any_l ()
    | & _51 : () = any_l ()
    | & _52 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shillel17] contains'0 (deep_model'3 vec.final) (deep_model'1 elem)}
      {[@expl:postcondition] [%#shillel16] is_subset'0 (deep_model'3 vec.final) (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
      {[@expl:postcondition] [%#shillel15] is_subset'0 (deep_model'0 vec) (deep_model'3 vec.final)}
      {[@expl:postcondition] [%#shillel14] is_unique'0 (deep_model'3 vec.final)}
      (! return' {result}) ]
    
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'}) ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module M_hillel__unique [#"hillel.rs" 102 0 102 56]
  type t
  
  let%span shillel0 = "hillel.rs" 103 21 103 31
  let%span shillel1 = "hillel.rs" 104 40 104 64
  let%span shillel2 = "hillel.rs" 110 13 110 14
  let%span shillel3 = "hillel.rs" 106 4 106 29
  let%span shillel4 = "hillel.rs" 106 4 106 29
  let%span shillel5 = "hillel.rs" 106 4 106 29
  let%span shillel6 = "hillel.rs" 106 16 106 27
  let%span shillel7 = "hillel.rs" 107 16 107 46
  let%span shillel8 = "hillel.rs" 108 16 108 64
  let%span shillel9 = "hillel.rs" 109 16 109 95
  let%span shillel10 = "hillel.rs" 106 4 106 29
  let%span shillel11 = "hillel.rs" 111 22 111 28
  let%span shillel12 = "hillel.rs" 113 18 113 50
  let%span shillel13 = "hillel.rs" 116 20 116 95
  let%span shillel14 = "hillel.rs" 117 20 117 88
  let%span shillel15 = "hillel.rs" 102 36 102 39
  let%span shillel16 = "hillel.rs" 99 10 99 40
  let%span shillel17 = "hillel.rs" 100 10 100 58
  let%span shillel18 = "hillel.rs" 101 10 101 58
  let%span shillel19 = "hillel.rs" 102 50 102 56
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 77 26 77 44
  let%span sslice21 = "../../../creusot-contracts/src/std/slice.rs" 249 0 358 1
  let%span siter22 = "../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span srange23 = "../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 31 14 31 47
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 32 4 33 53
  let%span shillel26 = "hillel.rs" 52 4 54 5
  let%span smodel27 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span shillel28 = "hillel.rs" 66 4 68 5
  let%span siter29 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span shillel30 = "hillel.rs" 75 11 75 38
  let%span shillel31 = "hillel.rs" 80 36 80 39
  let%span shillel32 = "hillel.rs" 80 54 80 58
  let%span shillel33 = "hillel.rs" 76 10 76 40
  let%span shillel34 = "hillel.rs" 77 10 77 58
  let%span shillel35 = "hillel.rs" 78 10 78 82
  let%span shillel36 = "hillel.rs" 79 10 79 58
  let%span smodel37 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span siter39 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter40 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange41 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange42 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange43 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange44 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange45 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange46 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange47 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange48 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum49 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span sops50 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sslice51 = "../../../creusot-contracts/src/std/slice.rs" 42 14 42 44
  let%span sslice52 = "../../../creusot-contracts/src/std/slice.rs" 43 4 43 98
  let%span shillel53 = "hillel.rs" 59 4 61 5
  let%span srange54 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve55 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel56 = "../../../creusot-contracts/src/model.rs" 100 8 100 28
  let%span sslice57 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice58 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span svec59 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sops60 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sinvariant61 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant62 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq63 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sslice64 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sboxed65 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'7 (_1 : t)
  
  predicate invariant'5 (self : t) =
    [%#sboxed65] inv'7 self
  
  predicate inv'10 (_1 : t)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t [inv'10 x] . inv'10 x = invariant'5 x
  
  use seq.Seq
  
  predicate inv'8 (_1 : Seq.seq t)
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'2 (self : slice t) : Seq.seq t
  
  axiom view'2_spec : forall self : slice t . ([%#sslice58] view'2 self = Slice.id self)
  && ([%#sslice57] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'4 (self : slice t) =
    [%#sslice64] inv'8 (view'2 self)
  
  predicate inv'9 (_1 : slice t)
  
  axiom inv_axiom'8 [@rewrite] : forall x : slice t [inv'9 x] . inv'9 x = invariant'4 x
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#sseq63] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Seq.seq t [inv'8 x] . inv'8 x = invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'6 (_1 : Option'0.t_Option usize)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Option'0.t_Option usize [inv'6 x] . inv'6 x = true
  
  use T_core__ops__range__Range as Range'0
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'5 x] . inv'5 x = true
  
  predicate invariant'2 (self : slice t) =
    [%#sinvariant62] inv'9 self
  
  predicate inv'4 (_1 : slice t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : slice t [inv'4 x] . inv'4 x = invariant'2 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant61] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'3 x] . inv'3 x
  = invariant'1 x
  
  function view'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'1_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec38] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec59] inv'8 (view'1 self)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'2 x] . inv'2 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'2 (self : usize) : int =
    [%#snum49] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#srange23] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'2 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'2 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'2 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'2 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'2 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'2 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'2 (Seq.get visited i) = deep_model'2 (T_core__ops__range__Range.t_Range__start self) + i)
  
  predicate inv'1 (_1 : Range'0.t_Range usize)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange43] inv'1 a)
   -> ([%#srange44] inv'1 b)
   -> ([%#srange45] inv'1 c)
   -> ([%#srange46] produces'0 a ab b)
   -> ([%#srange47] produces'0 b bc c)  -> ([%#srange48] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#srange41] inv'1 self)
   -> ([%#srange42] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Range'0.t_Range usize [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function view'0 (self : slice t) : Seq.seq t =
    [%#smodel37] view'2 self
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve55] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'3 _1
  
  use seq.Seq
  
  use seq.Seq
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  predicate contains'0 [#"hillel.rs" 58 0 58 44] (seq : Seq.seq t_DeepModelTy'0) (elem : t_DeepModelTy'0) =
    [%#shillel53] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  
  use seq.Seq
  
  function deep_model'3 (self : t) : t_DeepModelTy'0
  
  predicate is_subset'0 [#"hillel.rs" 65 0 65 49] (sub : Seq.seq t_DeepModelTy'0) (sup : Seq.seq t_DeepModelTy'0) =
    [%#shillel28] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#sops50] Seq.get (view'1 self) ix
  
  function deep_model'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'0_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . ([%#svec25] forall i : int . 0 <= i
  /\ i < Seq.length (view'1 self)  -> Seq.get (deep_model'0 self) i = deep_model'3 (index_logic'0 self i))
  && ([%#svec24] Seq.length (view'1 self) = Seq.length (deep_model'0 self))
  
  predicate is_unique'0 [#"hillel.rs" 51 0 51 34] (s : Seq.seq t_DeepModelTy'0) =
    [%#shillel26] forall i : int, j : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s
     -> Seq.get s i = Seq.get s j  -> i = j
  
  function deep_model'5 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t_DeepModelTy'0 =
    [%#smodel56] deep_model'0 self.current
  
  let rec insert_unique'0 (vec:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (elem:t) (return'  (ret:()))= {[@expl:precondition] [%#shillel32] inv'7 elem}
    {[@expl:precondition] [%#shillel31] inv'3 vec}
    {[@expl:precondition] [%#shillel30] is_unique'0 (deep_model'5 vec)}
    any
    [ return' (result:())-> {[%#shillel36] contains'0 (deep_model'0 vec.final) (deep_model'3 elem)}
      {[%#shillel35] is_subset'0 (deep_model'0 vec.final) (Seq.snoc (deep_model'5 vec) (deep_model'3 elem))}
      {[%#shillel34] is_subset'0 (deep_model'5 vec) (deep_model'0 vec.final)}
      {[%#shillel33] is_unique'0 (deep_model'0 vec.final)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (Range'0.t_Range usize)) =
    [%#sresolve55] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Range'0.t_Range usize)) =
    resolve'2 _1
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#srange54] resolve'2 self
    /\ deep_model'2 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'2 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {inv'6 result}
      {[%#siter29] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#sops60] Seq.get (view'2 self) ix
  
  function deep_model'4 (self : slice t) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'4_spec : forall self : slice t . ([%#sslice52] forall i : int . 0 <= i
  /\ i < Seq.length (deep_model'4 self)  -> Seq.get (deep_model'4 self) i = deep_model'3 (index_logic'1 self i))
  && ([%#sslice51] Seq.length (view'0 self) = Seq.length (deep_model'4 self))
  
  function deep_model'1 (self : slice t) : Seq.seq t_DeepModelTy'0 =
    [%#smodel27] deep_model'4 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#siter40] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#siter39] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter22] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {inv'1 result}
      {[%#siter22] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:usize)-> {[%#sslice21] Seq.length (view'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_Vec t (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec t (Global'0.t_Global))-> {inv'2 result}
      {[%#svec20] Seq.length (view'1 result) = 0}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec unique (str:slice t) (return'  (ret:Vec'0.t_Vec t (Global'0.t_Global)))= {[%#shillel15] inv'4 str}
    (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#shillel0] ()} (fun (_ret':Vec'0.t_Vec t (Global'0.t_Global)) ->  [ &unique <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &sub_str <- [%#shillel1] Snapshot.new (Seq.empty  : Seq.seq t) ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = len'0 {str} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_10 <- Range'0.C_Range ([%#shillel2] (0 : usize)) _11 ] s1
      | s1 = into_iter'0 {_10} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#shillel3] Snapshot.new iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#shillel4] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = bb11
      [ bb11 = {[@expl:loop invariant] [%#shillel9] is_subset'0 (Seq.([..]) (deep_model'1 str) 0 (Seq.length (Snapshot.inner produced))) (deep_model'0 unique)}
        {[@expl:loop invariant] [%#shillel8] is_subset'0 (deep_model'0 unique) (deep_model'1 str)}
        {[@expl:loop invariant] [%#shillel7] is_unique'0 (deep_model'0 unique)}
        {[@expl:loop invariant] [%#shillel6] inv'2 unique}
        {[@expl:loop invariant] [%#shillel5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#shillel5] inv'1 iter}
        {[@expl:loop invariant] [%#shillel5] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb12 ] 
        [ bb12 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_27 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_27.current} {Borrow.get_id _27}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_26 <- _ret' ] 
                 [ &_27 <- { _27 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_26} (fun (_ret':Option'0.t_Option usize) ->  [ &_25 <- _ret' ] s3)
          | s3 = bb13 ]
          
        | bb13 = s0
          [ s0 = -{resolve'0 _27}- s1
          | s1 = any
            [ br0 -> {_25 = Option'0.C_None } (! bb16) | br1 (a:usize)-> {_25 = Option'0.C_Some a} (! bb15) ]
             ]
          
        | bb15 = bb17
        | bb17 = s0
          [ s0 = Option'0.v_Some <usize> {_25} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_30 <- [%#shillel10] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb18 ]
          
        | bb18 = s0
          [ s0 =  [ &produced <- _30 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_34 <- i ] s3
          | s3 =  [ &_35 <- Slice.length str ] s4
          | s4 = UIntSize.lt {_34} {_35} (fun (_ret':bool) ->  [ &_36 <- _ret' ] s5)
          | s5 = {[@expl:index in bounds] [%#shillel11] _36} s6
          | s6 = bb19 ]
          
        | bb19 = s0
          [ s0 = Slice.get <t> {str} {_34} (fun (r'0:t) ->  [ &elem <- r'0 ] s1)
          | s1 = {inv'2 unique}
            Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {unique}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_39 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &unique <- _ret'.final ] 
                s2)
          | s2 = {inv'2 _39.current}
            Borrow.borrow_final <Vec'0.t_Vec t (Global'0.t_Global)> {_39.current} {Borrow.get_id _39}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_38 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &_39 <- { _39 with current = _ret'.final ; } ] 
                s3)
          | s3 = insert_unique'0 {_38} {elem} (fun (_ret':()) ->  [ &_37 <- _ret' ] s4)
          | s4 = bb20 ]
          
        | bb20 = s0
          [ s0 = {[@expl:type invariant] inv'3 _39} s1
          | s1 = -{resolve'1 _39}- s2
          | s2 =  [ &_41 <- [%#shillel12] Snapshot.new (Seq.snoc (Snapshot.inner sub_str) elem) ] s3
          | s3 = bb21 ]
          
        | bb21 = s0 [ s0 =  [ &sub_str <- _41 ] s1 | s1 = bb11 ]  ]
         ]
      
    | bb16 = s0
      [ s0 = {[@expl:assertion] [%#shillel13] is_subset'0 (Seq.([..]) (deep_model'1 str) 0 (Seq.length (view'0 str))) (deep_model'0 unique)}
        s1
      | s1 = bb22 ]
      
    | bb22 = s0
      [ s0 = {[@expl:assertion] [%#shillel14] Seq.(==) (Seq.([..]) (deep_model'1 str) 0 (Seq.length (view'0 str))) (deep_model'1 str)}
        s1
      | s1 =  [ &_0 <- unique ] s2
      | s2 = bb23 ]
      
    | bb23 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec t (Global'0.t_Global) = any_l ()
    | & str : slice t = str
    | & unique : Vec'0.t_Vec t (Global'0.t_Global) = any_l ()
    | & sub_str : Snapshot.snap_ty (Seq.seq t) = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _10 : Range'0.t_Range usize = any_l ()
    | & _11 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _25 : Option'0.t_Option usize = any_l ()
    | & _26 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _27 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _30 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & elem : t = any_l ()
    | & _34 : usize = any_l ()
    | & _35 : usize = any_l ()
    | & _36 : bool = any_l ()
    | & _37 : () = any_l ()
    | & _38 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _39 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _41 : Snapshot.snap_ty (Seq.seq t) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec t (Global'0.t_Global))-> {[@expl:postcondition] [%#shillel19] inv'2 result}
      {[@expl:postcondition] [%#shillel18] is_subset'0 (deep_model'1 str) (deep_model'0 result)}
      {[@expl:postcondition] [%#shillel17] is_subset'0 (deep_model'0 result) (deep_model'1 str)}
      {[@expl:postcondition] [%#shillel16] is_unique'0 (deep_model'0 result)}
      (! return' {result}) ]
    
end
module M_hillel__sum_range [#"hillel.rs" 125 0 125 54]
  let%span shillel0 = "hillel.rs" 123 11 123 53
  let%span shillel1 = "hillel.rs" 124 10 124 21
  let%span shillel2 = "hillel.rs" 122 10 122 19
  let%span shillel3 = "hillel.rs" 121 0 121 8
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant seq  : Seq.seq uint32
  
  constant from  : int
  
  constant to'  : int
  
  function sum_range [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  goal vc_sum_range : ([%#shillel0] 0 <= from /\ from <= to' /\ to' <= Seq.length seq)
   -> (if to' - from > 0 then
    (([%#shillel0] 0 <= from + 1 /\ from + 1 <= to' /\ to' <= Seq.length seq)
    /\ 0 <= ([%#shillel2] to' - from) /\ ([%#shillel2] to' - (from + 1)) < ([%#shillel2] to' - from))
    /\ (([%#shillel1] sum_range seq (from + 1) to' >= 0)
     -> ([%#shillel1] UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to' >= 0))
  else
    [%#shillel1] 0 >= 0
  )
end
module M_hillel__sum_range_split [#"hillel.rs" 137 0 137 61]
  let%span shillel0 = "hillel.rs" 135 11 135 63
  let%span shillel1 = "hillel.rs" 136 10 136 85
  let%span shillel2 = "hillel.rs" 134 10 134 18
  let%span shillel3 = "hillel.rs" 123 11 123 53
  let%span shillel4 = "hillel.rs" 124 10 124 21
  let%span shillel5 = "hillel.rs" 122 10 122 19
  let%span shillel6 = "hillel.rs" 121 0 121 8
  let%span shillel7 = "hillel.rs" 138 4 140 5
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([%#shillel6] if to' - from > 0 then UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel3] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([%#shillel4] sum_range'0 seq from to' >= 0)
  
  constant seq  : Seq.seq uint32
  
  constant from  : int
  
  constant to'  : int
  
  constant i  : int
  
  function sum_range_split [#"hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  
  goal vc_sum_range_split : ([%#shillel0] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> (if i > from then
    (([%#shillel0] 0 <= from + 1 /\ from + 1 <= i /\ i <= to' /\ to' <= Seq.length seq)
    /\ 0 <= ([%#shillel2] i - from) /\ ([%#shillel2] i - (from + 1)) < ([%#shillel2] i - from))
    /\ (([%#shillel1] sum_range'0 seq (from + 1) to' = sum_range'0 seq (from + 1) i + sum_range'0 seq i to')
     -> (let _ = sum_range_split seq (from + 1) to' i in [%#shillel1] sum_range'0 seq from to'
    = sum_range'0 seq from i + sum_range'0 seq i to'))
  else
    [%#shillel1] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to'
  )
end
module M_hillel__score [#"hillel.rs" 147 0 147 38]
  let%span shillel0 = "hillel.rs" 144 11 144 35
  let%span shillel1 = "hillel.rs" 145 10 145 64
  let%span shillel2 = "hillel.rs" 146 0 146 79
  let%span shillel3 = "hillel.rs" 135 11 135 63
  let%span shillel4 = "hillel.rs" 136 10 136 85
  let%span shillel5 = "hillel.rs" 134 10 134 18
  let%span shillel6 = "hillel.rs" 123 11 123 53
  let%span shillel7 = "hillel.rs" 124 10 124 21
  let%span shillel8 = "hillel.rs" 122 10 122 19
  let%span shillel9 = "hillel.rs" 121 0 121 8
  let%span shillel10 = "hillel.rs" 138 4 140 5
  let%span sint11 = "../../../creusot-contracts/src/logic/int.rs" 56 4 56 12
  
  use prelude.prelude.Int
  
  function abs_diff'0 (self : int) (other : int) : int =
    [%#sint11] if self < other then other - self else self - other
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([%#shillel9] if to' - from > 0 then UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel6] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([%#shillel7] sum_range'0 seq from to' >= 0)
  
  function sum_range_split'0 [#"hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  
  axiom sum_range_split'0_def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split'0 seq from to' i
  = ([%#shillel10] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  
  axiom sum_range_split'0_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([%#shillel3] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> ([%#shillel4] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  
  constant seq  : Seq.seq uint32
  
  constant i  : int
  
  function score [#"hillel.rs" 147 0 147 38] (seq : Seq.seq uint32) (i : int) : int
  
  goal vc_score : ([%#shillel0] 0 <= i /\ i <= Seq.length seq)
   -> ([%#shillel3] 0 <= 0 /\ 0 <= i /\ i <= Seq.length seq /\ Seq.length seq <= Seq.length seq)
  /\ (([%#shillel4] sum_range'0 seq 0 (Seq.length seq) = sum_range'0 seq 0 i + sum_range'0 seq i (Seq.length seq))
   -> (let _ = sum_range_split'0 seq 0 (Seq.length seq) i in ([%#shillel6] 0 <= 0 /\ 0 <= i /\ i <= Seq.length seq)
  /\ (([%#shillel7] sum_range'0 seq 0 i >= 0)
   -> ([%#shillel6] 0 <= i /\ i <= Seq.length seq /\ Seq.length seq <= Seq.length seq)
  /\ (([%#shillel7] sum_range'0 seq i (Seq.length seq) >= 0)
   -> (let result = abs_diff'0 (sum_range'0 seq 0 i) (sum_range'0 seq i (Seq.length seq)) in ([%#shillel2] 0 = i
  \/ i = Seq.length seq  -> result = sum_range'0 seq 0 (Seq.length seq))
  && ([%#shillel1] 0 <= result /\ result <= sum_range'0 seq 0 (Seq.length seq)))))))
end
module M_hillel__fulcrum [#"hillel.rs" 159 0 159 30]
  let%span shillel0 = "hillel.rs" 160 25 160 26
  let%span shillel1 = "hillel.rs" 162 4 162 60
  let%span shillel2 = "hillel.rs" 162 4 162 60
  let%span shillel3 = "hillel.rs" 162 4 162 60
  let%span shillel4 = "hillel.rs" 162 16 162 58
  let%span shillel5 = "hillel.rs" 163 16 163 52
  let%span shillel6 = "hillel.rs" 162 4 162 60
  let%span shillel7 = "hillel.rs" 168 20 168 56
  let%span shillel8 = "hillel.rs" 170 27 170 28
  let%span shillel9 = "hillel.rs" 173 23 173 24
  let%span shillel10 = "hillel.rs" 179 13 179 14
  let%span shillel11 = "hillel.rs" 174 4 174 58
  let%span shillel12 = "hillel.rs" 174 4 174 58
  let%span shillel13 = "hillel.rs" 174 4 174 58
  let%span shillel14 = "hillel.rs" 174 16 174 56
  let%span shillel15 = "hillel.rs" 175 16 175 30
  let%span shillel16 = "hillel.rs" 176 16 176 61
  let%span shillel17 = "hillel.rs" 177 16 177 46
  let%span shillel18 = "hillel.rs" 174 4 174 58
  let%span shillel19 = "hillel.rs" 186 15 186 19
  let%span shillel20 = "hillel.rs" 155 11 155 45
  let%span shillel21 = "hillel.rs" 156 11 156 23
  let%span shillel22 = "hillel.rs" 157 10 157 44
  let%span shillel23 = "hillel.rs" 158 0 158 88
  let%span siter24 = "../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span sslice25 = "../../../creusot-contracts/src/std/slice.rs" 410 12 410 66
  let%span smodel26 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span shillel27 = "hillel.rs" 123 11 123 53
  let%span shillel28 = "hillel.rs" 124 10 124 21
  let%span shillel29 = "hillel.rs" 122 10 122 19
  let%span shillel30 = "hillel.rs" 121 0 121 8
  let%span siter31 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span sslice32 = "../../../creusot-contracts/src/std/slice.rs" 249 0 358 1
  let%span srange33 = "../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span shillel34 = "hillel.rs" 144 11 144 35
  let%span shillel35 = "hillel.rs" 145 10 145 64
  let%span shillel36 = "hillel.rs" 146 0 146 79
  let%span shillel37 = "hillel.rs" 148 4 148 41
  let%span snum38 = "../../../creusot-contracts/src/std/num.rs" 221 26 221 59
  let%span sslice39 = "../../../creusot-contracts/src/std/slice.rs" 364 20 364 24
  let%span sslice40 = "../../../creusot-contracts/src/std/slice.rs" 370 20 370 32
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 418 14 418 45
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 416 4 416 10
  let%span sslice43 = "../../../creusot-contracts/src/std/slice.rs" 425 15 425 32
  let%span sslice44 = "../../../creusot-contracts/src/std/slice.rs" 426 15 426 32
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 427 14 427 42
  let%span sslice46 = "../../../creusot-contracts/src/std/slice.rs" 423 4 423 10
  let%span sslice47 = "../../../creusot-contracts/src/std/slice.rs" 100 14 100 41
  let%span sslice48 = "../../../creusot-contracts/src/std/slice.rs" 101 4 101 82
  let%span sslice49 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice50 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sslice51 = "../../../creusot-contracts/src/std/slice.rs" 403 20 403 61
  let%span sresolve52 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span siter53 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter54 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange55 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange56 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange57 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange58 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange59 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange60 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange61 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange62 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum63 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span shillel64 = "hillel.rs" 135 11 135 63
  let%span shillel65 = "hillel.rs" 136 10 136 85
  let%span shillel66 = "hillel.rs" 134 10 134 18
  let%span shillel67 = "hillel.rs" 138 4 140 5
  let%span sint68 = "../../../creusot-contracts/src/logic/int.rs" 56 4 56 12
  let%span srange69 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sops70 = "../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span smodel71 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  predicate inv'7 (_1 : Option'0.t_Option usize)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Option'0.t_Option usize [inv'7 x] . inv'7 x = true
  
  use T_core__ops__range__Range as Range'0
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'6 x] . inv'6 x = true
  
  use prelude.prelude.UInt32
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option uint32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Option'0.t_Option uint32 [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.Slice
  
  predicate inv'4 (_1 : slice uint32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : slice uint32 [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#snum63] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'1 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#srange33] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  predicate inv'3 (_1 : Range'0.t_Range usize)
  
  function produces_trans'1 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange57] inv'3 a)
   -> ([%#srange58] inv'3 b)
   -> ([%#srange59] inv'3 c)
   -> ([%#srange60] produces'1 a ab b)
   -> ([%#srange61] produces'1 b bc c)  -> ([%#srange62] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_Range usize . ([%#srange55] inv'3 self)
   -> ([%#srange56] produces'1 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Range'0.t_Range usize [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : Seq.seq usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq usize [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use T_core__slice__iter__Iter as Iter'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'2 (self : slice uint32) : Seq.seq uint32
  
  axiom view'2_spec : forall self : slice uint32 . ([%#sslice50] view'2 self = Slice.id self)
  && ([%#sslice49] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#sops70] Seq.get (view'2 self) ix
  
  use seq.Seq
  
  function view'0 (self : slice uint32) : Seq.seq uint32 =
    [%#smodel26] view'2 self
  
  use seq.Seq
  
  function to_ref_seq'0 (self : slice uint32) : Seq.seq uint32
  
  axiom to_ref_seq'0_spec : forall self : slice uint32 . ([%#sslice48] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  && ([%#sslice47] Seq.length (to_ref_seq'0 self) = Seq.length (view'0 self))
  
  function view'1 (self : Iter'0.t_Iter uint32) : slice uint32
  
  predicate produces'0 (self : Iter'0.t_Iter uint32) (visited : Seq.seq uint32) (tl : Iter'0.t_Iter uint32) =
    [%#sslice25] to_ref_seq'0 (view'1 self) = Seq.(++) visited (to_ref_seq'0 (view'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_Iter uint32) (ab : Seq.seq uint32) (b : Iter'0.t_Iter uint32) (bc : Seq.seq uint32) (c : Iter'0.t_Iter uint32) : ()
    
   =
    [%#sslice46] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_Iter uint32, ab : Seq.seq uint32, b : Iter'0.t_Iter uint32, bc : Seq.seq uint32, c : Iter'0.t_Iter uint32 . ([%#sslice43] produces'0 a ab b)
   -> ([%#sslice44] produces'0 b bc c)  -> ([%#sslice45] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Iter'0.t_Iter uint32) : () =
    [%#sslice42] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_Iter uint32 . [%#sslice41] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  predicate inv'1 (_1 : Iter'0.t_Iter uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Iter'0.t_Iter uint32 [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq uint32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  function abs_diff'1 (self : int) (other : int) : int =
    [%#sint68] if self < other then other - self else self - other
  
  use prelude.prelude.UInt32
  
  let rec abs_diff'0 (self:uint32) (other:uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#snum38] UInt32.to_int result
      = abs_diff'1 (UInt32.to_int self) (UInt32.to_int other)}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'3 (self : borrowed (Range'0.t_Range usize)) =
    [%#sresolve52] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Range'0.t_Range usize)) =
    resolve'3 _1
  
  predicate completed'1 (self : borrowed (Range'0.t_Range usize)) =
    [%#srange69] resolve'3 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'1 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] inv'6 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {inv'7 result}
      {[%#siter31] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  function sum_range'0 [#"hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([%#shillel30] if to' - from > 0 then UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([%#shillel27] 0 <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([%#shillel28] sum_range'0 seq from to' >= 0)
  
  function sum_range_split'0 [#"hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  
  axiom sum_range_split'0_def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split'0 seq from to' i
  = ([%#shillel67] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  
  axiom sum_range_split'0_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([%#shillel64] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> ([%#shillel65] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  
  function score'0 [#"hillel.rs" 147 0 147 38] (seq : Seq.seq uint32) (i : int) : int =
    [%#shillel37] let _ = sum_range_split'0 seq 0 (Seq.length seq) i in abs_diff'1 (sum_range'0 seq 0 i) (sum_range'0 seq i (Seq.length seq))
  
  axiom score'0_spec : forall seq : Seq.seq uint32, i : int . ([%#shillel34] 0 <= i /\ i <= Seq.length seq)
   -> ([%#shillel36] 0 = i \/ i = Seq.length seq  -> score'0 seq i = sum_range'0 seq 0 (Seq.length seq))
  && ([%#shillel35] 0 <= score'0 seq i /\ score'0 seq i <= sum_range'0 seq 0 (Seq.length seq))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'1 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#siter54] self = res
  
  predicate into_iter_pre'1 (self : Range'0.t_Range usize) =
    [%#siter53] true
  
  let rec into_iter'1 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [%#siter24] into_iter_pre'1 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {inv'3 result}
      {[%#siter24] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:slice uint32) (return'  (ret:usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:usize)-> {[%#sslice32] Seq.length (view'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (Iter'0.t_Iter uint32)) =
    [%#sresolve52] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Iter'0.t_Iter uint32)) =
    resolve'2 _1
  
  use seq.Seq
  
  function view'3 (self : borrowed (Iter'0.t_Iter uint32)) : slice uint32 =
    [%#smodel71] view'1 self.current
  
  predicate completed'0 (self : borrowed (Iter'0.t_Iter uint32)) =
    [%#sslice51] resolve'2 self /\ view'2 (view'3 self) = (Seq.empty  : Seq.seq uint32)
  
  let rec next'0 (self:borrowed (Iter'0.t_Iter uint32)) (return'  (ret:Option'0.t_Option uint32))= any
    [ return' (result:Option'0.t_Option uint32)-> {inv'5 result}
      {[%#siter31] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : slice uint32) (res : Iter'0.t_Iter uint32) =
    [%#sslice40] self = view'1 res
  
  predicate into_iter_pre'0 (self : slice uint32) =
    [%#sslice39] true
  
  let rec into_iter'0 (self:slice uint32) (return'  (ret:Iter'0.t_Iter uint32))= {[@expl:precondition] inv'4 self}
    {[@expl:precondition] [%#siter24] into_iter_pre'0 self}
    any [ return' (result:Iter'0.t_Iter uint32)-> {[%#siter24] into_iter_post'0 self result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec fulcrum (s:slice uint32) (return'  (ret:usize))= {[%#shillel21] Seq.length (view'0 s) > 0}
    {[%#shillel20] sum_range'0 (view'0 s) 0 (Seq.length (view'0 s)) <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &total <- [%#shillel0] (0 : uint32) ] s1
      | s1 = into_iter'0 {s} (fun (_ret':Iter'0.t_Iter uint32) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#shillel1] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#shillel2] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#shillel5] UInt32.to_int total
        <= sum_range'0 (view'0 s) 0 (Seq.length (view'0 s))}
        {[@expl:loop invariant] [%#shillel4] UInt32.to_int total
        = sum_range'0 (view'0 s) 0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [%#shillel3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#shillel3] inv'1 iter}
        {[@expl:loop invariant] [%#shillel3] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_Iter uint32> {iter}
              (fun (_ret':borrowed (Iter'0.t_Iter uint32)) ->  [ &_22 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Iter'0.t_Iter uint32> {_22.current} {Borrow.get_id _22}
              (fun (_ret':borrowed (Iter'0.t_Iter uint32)) ->
                 [ &_21 <- _ret' ] 
                 [ &_22 <- { _22 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_21} (fun (_ret':Option'0.t_Option uint32) ->  [ &_20 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _22}- s1
          | s1 = any [ br0 -> {_20 = Option'0.C_None } (! bb9) | br1 (a:uint32)-> {_20 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.v_Some <uint32> {_20} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_25 <- [%#shillel6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _25 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {total} {x} (fun (_ret':uint32) ->  [ &total <- _ret' ] s3)
          | s3 = bb4 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#shillel7] UInt32.to_int total = sum_range'0 (view'0 s) 0 (Seq.length (view'0 s))} s1
      | s1 =  [ &min_i <- [%#shillel8] (0 : usize) ] s2
      | s2 =  [ &min_dist <- total ] s3
      | s3 =  [ &sum <- [%#shillel9] (0 : uint32) ] s4
      | s4 = len'0 {s} (fun (_ret':usize) ->  [ &_38 <- _ret' ] s5)
      | s5 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &_37 <- Range'0.C_Range ([%#shillel10] (0 : usize)) _38 ] s1
      | s1 = into_iter'1 {_37} (fun (_ret':Range'0.t_Range usize) ->  [ &iter1 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = s0 [ s0 =  [ &iter_old1 <- [%#shillel11] Snapshot.new iter1 ] s1 | s1 = bb14 ] 
    | bb14 = s0 [ s0 =  [ &produced1 <- [%#shillel12] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = bb16
      [ bb16 = {[@expl:loop invariant] [%#shillel13] forall j : int . 0 <= j
        /\ j < Seq.length (Snapshot.inner produced1)
         -> score'0 (view'0 s) (UIntSize.to_int min_i) <= score'0 (view'0 s) j}
        {[@expl:loop invariant] [%#shillel17] UInt32.to_int min_dist = score'0 (view'0 s) (UIntSize.to_int min_i)}
        {[@expl:loop invariant] [%#shillel16] UIntSize.to_int min_i <= Seq.length (Snapshot.inner produced1)
        /\ UIntSize.to_int min_i < Seq.length (view'0 s)}
        {[@expl:loop invariant] [%#shillel15] UInt32.to_int sum <= UInt32.to_int total}
        {[@expl:loop invariant] [%#shillel14] UInt32.to_int sum
        = sum_range'0 (view'0 s) 0 (Seq.length (Snapshot.inner produced1))}
        {[@expl:loop invariant] [%#shillel13] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
        {[@expl:loop invariant] [%#shillel13] inv'3 iter1}
        {[@expl:loop invariant] [%#shillel13] inv'2 (Snapshot.inner produced1)}
        (! s0) [ s0 = bb17 ] 
        [ bb17 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter1}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_54 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_54.current} {Borrow.get_id _54}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_53 <- _ret' ] 
                 [ &_54 <- { _54 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'1 {_53} (fun (_ret':Option'0.t_Option usize) ->  [ &_52 <- _ret' ] s3)
          | s3 = bb18 ]
          
        | bb18 = s0
          [ s0 = -{resolve'1 _54}- s1
          | s1 = any
            [ br0 -> {_52 = Option'0.C_None } (! bb21) | br1 (a:usize)-> {_52 = Option'0.C_Some a} (! bb20) ]
             ]
          
        | bb20 = bb22
        | bb22 = s0
          [ s0 = Option'0.v_Some <usize> {_52} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
          | s1 = 
            [ &_57 <- [%#shillel18] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
            
            s2
          | s2 = bb23 ]
          
        | bb23 = s0
          [ s0 =  [ &produced1 <- _57 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem1 ] s2
          | s2 = UInt32.sub {total} {sum} (fun (_ret':uint32) ->  [ &_62 <- _ret' ] s3)
          | s3 = abs_diff'0 {sum} {_62} (fun (_ret':uint32) ->  [ &dist <- _ret' ] s4)
          | s4 = bb24 ]
          
        | bb24 = s0
          [ s0 = UInt32.lt {dist} {min_dist} (fun (_ret':bool) ->  [ &_66 <- _ret' ] s1)
          | s1 = any [ br0 -> {_66 = false} (! bb26) | br1 -> {_66} (! bb25) ]  ]
          
        | bb25 = s0 [ s0 =  [ &min_i <- i ] s1 | s1 =  [ &min_dist <- dist ] s2 | s2 = bb27 ] 
        | bb26 = bb27
        | bb27 = s0
          [ s0 =  [ &_72 <- i ] s1
          | s1 =  [ &_73 <- Slice.length s ] s2
          | s2 = UIntSize.lt {_72} {_73} (fun (_ret':bool) ->  [ &_74 <- _ret' ] s3)
          | s3 = {[@expl:index in bounds] [%#shillel19] _74} s4
          | s4 = bb28 ]
          
        | bb28 = s0
          [ s0 = Slice.get <uint32> {s} {_72}
              (fun (r'0:uint32) -> UInt32.add {sum} {r'0} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s1))
          | s1 = bb16 ]
           ]
         ]
      
    | bb21 = s0 [ s0 =  [ &_0 <- min_i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & s : slice uint32 = s
    | & total : uint32 = any_l ()
    | & iter : Iter'0.t_Iter uint32 = any_l ()
    | & iter_old : Snapshot.snap_ty (Iter'0.t_Iter uint32) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _20 : Option'0.t_Option uint32 = any_l ()
    | & _21 : borrowed (Iter'0.t_Iter uint32) = any_l ()
    | & _22 : borrowed (Iter'0.t_Iter uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _25 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & x : uint32 = any_l ()
    | & min_i : usize = any_l ()
    | & min_dist : uint32 = any_l ()
    | & sum : uint32 = any_l ()
    | & iter1 : Range'0.t_Range usize = any_l ()
    | & _37 : Range'0.t_Range usize = any_l ()
    | & _38 : usize = any_l ()
    | & iter_old1 : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _52 : Option'0.t_Option usize = any_l ()
    | & _53 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _54 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _57 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & dist : uint32 = any_l ()
    | & _62 : uint32 = any_l ()
    | & _66 : bool = any_l ()
    | & _72 : usize = any_l ()
    | & _73 : usize = any_l ()
    | & _74 : bool = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#shillel23] forall i : int . 0 <= i /\ i < Seq.length (view'0 s)
       -> score'0 (view'0 s) (UIntSize.to_int result) <= score'0 (view'0 s) i}
      {[@expl:postcondition] [%#shillel22] 0 <= UIntSize.to_int result
      /\ UIntSize.to_int result < Seq.length (view'0 s)}
      (! return' {result}) ]
    
end
