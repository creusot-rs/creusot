
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Hillel_RightPad
  type t
  use seq.Seq
  predicate invariant'5 (self : Seq.seq t)
  let rec invariant'5 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq t)
  let rec inv'5 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'4 x = true
  use prelude.Borrow
  predicate invariant'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'3 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'3 x = true
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'2 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'2 self)
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'1 x = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv'0 x
  = true
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'2 ( * self)
  let rec shallow_model'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec push'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (value:t) (return'  (ret:()))= {[@expl:precondition] inv'2 value}
    {[@expl:precondition] inv'3 self}
    any
    [ return' (result:())-> {[#"../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51] shallow_model'2 ( ^ self)
      = Seq.snoc (shallow_model'1 self) value}
      (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'4 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  let rec len'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:usize)-> {[#"../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48] UIntSize.to_int result
      = Seq.length (shallow_model'4 self)}
      (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function shallow_model'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'1 self
  let rec shallow_model'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model'3 (Snapshot.inner self)
  let rec shallow_model'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec resolve'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec right_pad (str:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len:usize) (pad:t) (return'  (ret:()))= {[#"../hillel.rs" 16 52 16 55] inv'2 pad}
    {[#"../hillel.rs" 16 22 16 25] inv'3 str}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [#"../hillel.rs" 17 18 17 35] Snapshot.new str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 old_str} s1 | s1 = -{resolve'0 old_str}- s2 | s2 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [#"../hillel.rs" 19 4 19 35] forall i : int . Seq.length (shallow_model'0 old_str)
        <= i
        /\ i < Seq.length (shallow_model'1 str)  -> index_logic'0 ( * str) i = pad}
        {[@expl:loop invariant] [#"../hillel.rs" 19 4 19 35] forall i : int . 0 <= i
        /\ i < Seq.length (shallow_model'0 old_str)
         -> index_logic'0 ( * str) i = index_logic'0 ( * Snapshot.inner old_str) i}
        {[@expl:loop invariant] [#"../hillel.rs" 19 4 19 35] Seq.length (shallow_model'1 str) > UIntSize.to_int len
         -> Seq.length (shallow_model'1 str) = Seq.length (shallow_model'0 old_str)}
        {[@expl:loop invariant] [#"../hillel.rs" 19 4 19 35] Seq.length (shallow_model'0 old_str) < UIntSize.to_int len
         -> Seq.length (shallow_model'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant] [#"../hillel.rs" 20 16 20 44] Seq.length (shallow_model'0 old_str)
        <= Seq.length (shallow_model'1 str)}
        {[@expl:loop invariant] [#"../hillel.rs" 19 16 19 33]  ^ str =  ^ Snapshot.inner old_str}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'0 { * str} (fun (_ret':usize) ->  [ &_20 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {_20} {len}
              (fun (_ret':bool) ->  [ &_19 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_20 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_19 = false} (! bb7) | br1 -> {_19} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)> { * str}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_24 <- _ret' ] 
                 [ &str <- { str with current = ( ^ _24) ; } ] 
                s1)
          | s1 = -{inv'1 ( ^ _24)}- s2
          | s2 = push'0 {_24} {pad} (fun (_ret':()) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0 [ s0 = bb2 ]  ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'2 pad} s1
      | s1 = -{resolve'1 pad}- s2
      | s2 = {[@expl:type invariant] inv'3 str} s3
      | s3 = -{resolve'2 str}- s4
      | s4 =  [ &_0 <- [#"../hillel.rs" 25 4 27 5] () ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = str
    | & len : usize = len
    | & pad : t = pad
    | & old_str : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) = any_l () : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
    | & _19 : bool = any_l () : bool
    | & _20 : usize = any_l () : usize
    | & _23 : () = any_l () : ()
    | & _24 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../hillel.rs" 15 0 15 75] forall i : int . Seq.length (shallow_model'1 str)
      <= i
      /\ i < UIntSize.to_int len  -> index_logic'0 ( ^ str) i = pad}
      {[@expl:postcondition] [#"../hillel.rs" 14 0 14 75] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'1 str)  -> index_logic'0 ( ^ str) i = index_logic'0 ( * str) i}
      {[@expl:postcondition] [#"../hillel.rs" 13 0 13 55] UIntSize.to_int len > Seq.length (shallow_model'1 str)
       -> Seq.length (shallow_model'2 ( ^ str)) = UIntSize.to_int len}
      {[@expl:postcondition] [#"../hillel.rs" 12 0 12 62] UIntSize.to_int len <= Seq.length (shallow_model'1 str)
       -> Seq.length (shallow_model'2 ( ^ str)) = Seq.length (shallow_model'1 str)}
      {[@expl:postcondition] [#"../hillel.rs" 11 10 11 62] Seq.length (shallow_model'2 ( ^ str)) = UIntSize.to_int len
      \/ Seq.length (shallow_model'2 ( ^ str)) = Seq.length (shallow_model'1 str)}
      {[@expl:postcondition] [#"../hillel.rs" 10 10 10 62] Seq.length (shallow_model'2 ( ^ str)) >= UIntSize.to_int len
      /\ Seq.length (shallow_model'2 ( ^ str)) >= Seq.length (shallow_model'1 str)}
      (! return' {result}) ]
    
end
module Hillel_LeftPad
  type t
  use seq.Seq
  predicate invariant'5 (self : Seq.seq t)
  let rec invariant'5 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq t)
  let rec inv'5 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq t . inv'5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec invariant'4 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'4 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'4 x = true
  use prelude.Borrow
  predicate invariant'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'3 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'3 x = true
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'1 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'1 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function shallow_model'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'1 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'5 (shallow_model'2 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'5 (shallow_model'2 self)
  let rec invariant'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'1 x = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv'0 x
  = true
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  function shallow_model'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'2 ( * self)
  let rec shallow_model'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec insert'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (index:usize) (element:t) (return'  (ret:()))= {[@expl:precondition] inv'2 element}
    {[@expl:precondition] inv'3 self}
    any
    [ return' (result:())-> {[#"../../../../creusot-contracts/src/std/vec.rs" 105 16 105 105] forall i : int . UIntSize.to_int index
      < i
      /\ i < Seq.length (shallow_model'2 ( ^ self))  -> index_logic'0 ( ^ self) i = index_logic'0 ( * self) (i - 1)}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 104 26 104 52] index_logic'0 ( ^ self) (UIntSize.to_int index)
      = element}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 103 16 103 89] forall i : int . 0 <= i
      /\ i < UIntSize.to_int index  -> index_logic'0 ( ^ self) i = index_logic'0 ( * self) i}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 102 26 102 59] Seq.length (shallow_model'2 ( ^ self))
      = Seq.length (shallow_model'1 self) + 1}
      (! return' {result}) ]
    
  function shallow_model'4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'4 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  let rec len'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:usize)-> {[#"../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48] UIntSize.to_int result
      = Seq.length (shallow_model'4 self)}
      (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'1 self
  let rec shallow_model'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function shallow_model'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model'3 (Snapshot.inner self)
  let rec shallow_model'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec resolve'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec left_pad (str:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len:usize) (pad:t) (return'  (ret:()))= {[#"../hillel.rs" 34 51 34 54] inv'2 pad}
    {[#"../hillel.rs" 34 21 34 24] inv'3 str}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [#"../hillel.rs" 35 18 35 35] Snapshot.new str ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_str} s1
      | s1 = -{resolve'0 old_str}- s2
      | s2 =  [ &c <- [#"../hillel.rs" 36 31 36 46] Snapshot.new 0 ] s3
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] [#"../hillel.rs" 38 4 38 35] forall i : int . 0 <= i /\ i < Snapshot.inner c
         -> index_logic'0 ( * str) i = pad}
        {[@expl:loop invariant] [#"../hillel.rs" 38 4 38 35] forall i : int . Snapshot.inner c <= i
        /\ i < Seq.length (shallow_model'1 str)
         -> index_logic'0 ( * str) i = index_logic'0 ( * Snapshot.inner old_str) (i - Snapshot.inner c)}
        {[@expl:loop invariant] [#"../hillel.rs" 42 16 42 49] Snapshot.inner c
        = Seq.length (shallow_model'1 str) - Seq.length (shallow_model'0 old_str)}
        {[@expl:loop invariant] [#"../hillel.rs" 38 4 38 35] Seq.length (shallow_model'1 str) > UIntSize.to_int len
         -> Seq.length (shallow_model'1 str) = Seq.length (shallow_model'0 old_str)}
        {[@expl:loop invariant] [#"../hillel.rs" 38 4 38 35] Seq.length (shallow_model'0 old_str) < UIntSize.to_int len
         -> Seq.length (shallow_model'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant] [#"../hillel.rs" 39 16 39 44] Seq.length (shallow_model'0 old_str)
        <= Seq.length (shallow_model'1 str)}
        {[@expl:loop invariant] [#"../hillel.rs" 38 16 38 33]  ^ str =  ^ Snapshot.inner old_str}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0 [ s0 = len'0 { * str} (fun (_ret':usize) ->  [ &_21 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {_21} {len}
              (fun (_ret':bool) ->  [ &_20 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_21 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_20 = false} (! bb9) | br1 -> {_20} (! bb6) ]  ]
          
        | bb6 = s0
          [ s0 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)> { * str}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_25 <- _ret' ] 
                 [ &str <- { str with current = ( ^ _25) ; } ] 
                s1)
          | s1 = -{inv'1 ( ^ _25)}- s2
          | s2 = insert'0 {_25} {[#"../hillel.rs" 46 19 46 20] (0 : usize)} {pad}
              (fun (_ret':()) ->  [ &_24 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 =  [ &_27 <- [#"../hillel.rs" 47 12 47 32] Snapshot.new (1 + Snapshot.inner c) ] s1 | s1 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &c <- _27 ] (any [ any_ (_any:Snapshot.snap_ty int)-> (!  [ &_27 <- _any ] s1) ] ) | s1 = bb3 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'2 pad} s1
      | s1 = -{resolve'1 pad}- s2
      | s2 = {[@expl:type invariant] inv'3 str} s3
      | s3 = -{resolve'2 str}- s4
      | s4 =  [ &_0 <- [#"../hillel.rs" 45 4 48 5] () ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = str
    | & len : usize = len
    | & pad : t = pad
    | & old_str : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) = any_l () : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
    | & c : Snapshot.snap_ty int = any_l () : Snapshot.snap_ty int
    | & _20 : bool = any_l () : bool
    | & _21 : usize = any_l () : usize
    | & _24 : () = any_l () : ()
    | & _25 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
    | & _27 : Snapshot.snap_ty int = any_l () : Snapshot.snap_ty int ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../hillel.rs" 33 0 33 106] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'1 str)
       -> index_logic'0 ( ^ str) (i + (Seq.length (shallow_model'2 ( ^ str)) - Seq.length (shallow_model'1 str)))
      = index_logic'0 ( * str) i}
      {[@expl:postcondition] [#"../hillel.rs" 32 0 32 90] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'2 ( ^ str)) - Seq.length (shallow_model'1 str)
       -> index_logic'0 ( ^ str) i = pad}
      {[@expl:postcondition] [#"../hillel.rs" 31 10 31 62] Seq.length (shallow_model'2 ( ^ str)) = UIntSize.to_int len
      \/ Seq.length (shallow_model'2 ( ^ str)) = Seq.length (shallow_model'1 str)}
      {[@expl:postcondition] [#"../hillel.rs" 30 10 30 62] Seq.length (shallow_model'2 ( ^ str)) >= UIntSize.to_int len
      /\ Seq.length (shallow_model'2 ( ^ str)) >= Seq.length (shallow_model'1 str)}
      (! return' {result}) ]
    
end
module Hillel_SubsetPush_Impl
  type t
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use seq.Seq
  predicate invariant'0 (self : Seq.seq t)
  let rec invariant'0 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Seq.seq t)
  let rec inv'0 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Seq.seq t . inv'0 x = true
  use seq.Seq
  use seq.Seq
  use prelude.Int
  predicate contains'0 [#"../hillel.rs" 59 0 59 44] (seq : Seq.seq t) (elem : t) =
    [#"../hillel.rs" 60 4 62 5] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  let rec contains'0 (seq:Seq.seq t) (elem:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = contains'0 seq elem} (! return' {result}) ]
    
  predicate is_subset'0 [#"../hillel.rs" 66 0 66 49] (sub : Seq.seq t) (sup : Seq.seq t) =
    [#"../hillel.rs" 67 4 69 5] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  let rec is_subset'0 (sub:Seq.seq t) (sup:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_subset'0 sub sup} (! return' {result}) ]
    
  use seq.Seq
  constant s  : Seq.seq t
  constant elem  : t
  function subset_push [#"../hillel.rs" 74 0 74 37] (s : Seq.seq t) (elem : t) : ()
  goal vc_subset_push : ([#"../hillel.rs" 74 29 74 33] inv'1 elem)
   -> ([#"../hillel.rs" 74 18 74 19] inv'0 s)  -> ([#"../hillel.rs" 73 10 73 36] is_subset'0 s (Seq.snoc s elem))
end
module Core_Slice_Iter_Iter_Type
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use prelude.Opaque
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_iter < 't > (input:t_iter 't) (ret  (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Hillel_InsertUnique
  type t
  use prelude.Slice
  predicate invariant'15 (self : slice t)
  let rec invariant'15 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'15 self} (! return' {result}) ]
    
  predicate inv'15 (_x : slice t)
  let rec inv'15 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'15 _x} (! return' {result}) ]
    
  axiom inv'15 : forall x : slice t . inv'15 x = true
  use seq.Seq
  predicate invariant'14 (self : Seq.seq t)
  let rec invariant'14 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'14 self} (! return' {result}) ]
    
  predicate inv'14 (_x : Seq.seq t)
  let rec inv'14 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'14 _x} (! return' {result}) ]
    
  axiom inv'14 : forall x : Seq.seq t . inv'14 x = true
  predicate invariant'13 (self : Seq.seq t)
  let rec invariant'13 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'13 self} (! return' {result}) ]
    
  predicate inv'13 (_x : Seq.seq t)
  let rec inv'13 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'13 _x} (! return' {result}) ]
    
  axiom inv'13 : forall x : Seq.seq t . inv'13 x = true
  predicate invariant'12 (self : t)
  let rec invariant'12 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'12 self} (! return' {result}) ]
    
  predicate inv'12 (_x : t)
  let rec inv'12 (_x:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'12 _x} (! return' {result}) ]
    
  axiom inv'12 : forall x : t . inv'12 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'11 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec invariant'11 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'11 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'11 x = true
  type deep_model_ty'0
  predicate invariant'10 (self : deep_model_ty'0)
  let rec invariant'10 (self:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : deep_model_ty'0)
  let rec inv'10 (_x:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : deep_model_ty'0 . inv'10 x = true
  predicate invariant'9 (self : Seq.seq deep_model_ty'0)
  let rec invariant'9 (self:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq deep_model_ty'0)
  let rec inv'9 (_x:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq deep_model_ty'0 . inv'9 x = true
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'8 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'8 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  function shallow_model'3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'3 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'8 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'3 self} (! return' {result}) ] 
  axiom shallow_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'8 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'14 (shallow_model'3 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'8 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'14 (shallow_model'3 self)
  let rec invariant'8 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  axiom inv'8 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'8 x = true
  use prelude.Borrow
  predicate invariant'7 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'7 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'7 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'7 x = true
  predicate invariant'6 (self : t)
  let rec invariant'6 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : t)
  let rec inv'6 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ] 
  axiom inv'6 : forall x : t . inv'6 x = true
  predicate invariant'5 (self : t)
  let rec invariant'5 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : t)
  let rec inv'5 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : t . inv'5 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'4 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'4 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'4 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Core_Option_Option_Type.t_option t . inv'4 x = true
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  function shallow_model'5 (self : slice t) : Seq.seq t
  let rec shallow_model'5 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'15 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'5 self} (! return' {result}) ] 
  axiom shallow_model'5_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'15 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'14 (shallow_model'5 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'5 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'5 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'2 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'5 self) ix
  let rec index_logic'2 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'2 self ix} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'0 (self : slice t) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'5 self
  let rec shallow_model'0 (self:slice t) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  predicate inv'1 (_x : slice t)
  let rec inv'1 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  function to_ref_seq'0 (self : slice t) : Seq.seq t
  let rec to_ref_seq'0 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'1 self}
    any [ return' (result:Seq.seq t)-> {result = to_ref_seq'0 self} (! return' {result}) ] 
  axiom to_ref_seq'0_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'1 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv'13 (to_ref_seq'0 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'2 self i)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq'0 self)
  = Seq.length (shallow_model'0 self))
  function shallow_model'2 (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  let rec shallow_model'2 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:slice t))= any
    [ return' (result:slice t)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66] to_ref_seq'0 (shallow_model'2 self)
    = Seq.(++) visited (to_ref_seq'0 (shallow_model'2 tl))
  let rec produces'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (visited:Seq.seq t) (tl:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10] ()
  let rec produces_trans'0 (a:Core_Slice_Iter_Iter_Type.t_iter t) (ab:Seq.seq t) (b:Core_Slice_Iter_Iter_Type.t_iter t) (bc:Seq.seq t) (c:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'13 bc}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'13 ab}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'13 ab)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'13 bc)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10] ()
  let rec produces_refl'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter t . [#"../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45] produces'0 self (Seq.empty  : Seq.seq t) self
  predicate invariant'3 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec invariant'3 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec inv'3 (_x:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Slice_Iter_Iter_Type.t_iter t . inv'3 x = true
  use prelude.Snapshot
  predicate invariant'2 (self : Snapshot.snap_ty (Seq.seq t))
  let rec invariant'2 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Snapshot.snap_ty (Seq.seq t))
  let rec inv'2 (_x:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Snapshot.snap_ty (Seq.seq t) . inv'2 x = true
  predicate invariant'1 (self : slice t)
  let rec invariant'1 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : slice t . inv'1 x = true
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv'0 x
  = true
  function deep_model'1 (self : t) : deep_model_ty'0
  let rec deep_model'1 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  function index_logic'1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'3 self) ix
  let rec index_logic'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  function deep_model'3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty'0
  let rec deep_model'3 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq deep_model_ty'0))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv'8 self}
    any [ return' (result:Seq.seq deep_model_ty'0)-> {result = deep_model'3 self} (! return' {result}) ] 
  axiom deep_model'3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv'8 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44] inv'9 (deep_model'3 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i
  /\ i < Seq.length (shallow_model'3 self)  -> Seq.get (deep_model'3 self) i = deep_model'1 (index_logic'1 self i))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (shallow_model'3 self)
  = Seq.length (deep_model'3 self))
  use prelude.Intrinsic
  use seq.Seq
  function shallow_model'4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'3 ( * self)
  let rec shallow_model'4 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  let rec push'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (value:t) (return'  (ret:()))= {[@expl:precondition] inv'6 value}
    {[@expl:precondition] inv'7 self}
    any
    [ return' (result:())-> {[#"../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51] shallow_model'3 ( ^ self)
      = Seq.snoc (shallow_model'4 self) value}
      (! return' {result}) ]
    
  predicate is_unique'0 [#"../hillel.rs" 52 0 52 34] (s : Seq.seq deep_model_ty'0) =
    [#"../hillel.rs" 53 4 55 5] forall j : int . forall i : int . 0 <= i
    /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s  -> Seq.get s i = Seq.get s j  -> i = j
  let rec is_unique'0 (s:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_unique'0 s} (! return' {result}) ]
    
  predicate contains'0 [#"../hillel.rs" 59 0 59 44] (seq : Seq.seq deep_model_ty'0) (elem : deep_model_ty'0) =
    [#"../hillel.rs" 60 4 62 5] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  let rec contains'0 (seq:Seq.seq deep_model_ty'0) (elem:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = contains'0 seq elem} (! return' {result}) ]
    
  predicate resolve'10 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'10 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'10 self} (! return' {result}) ]
    
  predicate resolve'9 (self : t)
  let rec resolve'9 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'9 self} (! return' {result}) ]
    
  predicate resolve'8 (self : Core_Slice_Iter_Iter_Type.t_iter t)
  let rec resolve'8 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'8 self} (! return' {result}) ]
    
  function deep_model'2 (self : t) : deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'2 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'4 (self : t) : deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'2 self
  let rec deep_model'4 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'4 self} (! return' {result}) ]
    
  let rec eq'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] inv'12 other}
    {[@expl:precondition] inv'12 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'4 self = deep_model'4 other)}
      (! return' {result}) ]
    
  use prelude.Snapshot
  predicate resolve'7 (self : t)
  let rec resolve'7 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'7 self} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'6 (self : Core_Option_Option_Type.t_option t)
  let rec resolve'6 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'6 self} (! return' {result}) ]
    
  predicate resolve'5 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'5 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'6 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : slice t =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'2 ( * self)
  let rec shallow_model'6 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:slice t))= any
    [ return' (result:slice t)-> {result = shallow_model'6 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61] resolve'5 self
    /\ shallow_model'5 (shallow_model'6 self) = (Seq.empty  : Seq.seq t)
  let rec completed'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:Core_Option_Option_Type.t_option t))= any
    [ return' (result:Core_Option_Option_Type.t_option t)-> {inv'4 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t)) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33] Seq.get (Snapshot.inner self) ix
  let rec index_logic'0 (self:Snapshot.snap_ty (Seq.seq t)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  predicate resolve'4 (self : Snapshot.snap_ty (Seq.seq t))
  let rec resolve'4 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate resolve'3 (self : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t))
  let rec resolve'3 (self:Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (res:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Slice_Iter_Iter_Type.t_iter t) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter t))= {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter t)-> {inv'3 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec iter'0 (self:slice t) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter t))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter t)-> {[#"../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] shallow_model'2 result
      = self}
      (! return' {result}) ]
    
  predicate resolve'2 (self : slice t)
  let rec resolve'2 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'3 self
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec deref'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:slice t))= {[@expl:precondition] inv'11 self}
    any
    [ return' (result:slice t)-> {inv'1 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 163 26 163 42] shallow_model'0 result = shallow_model'1 self}
      (! return' {result}) ]
    
  predicate resolve'1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  let rec resolve'1 (self:Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  predicate is_subset'0 [#"../hillel.rs" 66 0 66 49] (sub : Seq.seq deep_model_ty'0) (sup : Seq.seq deep_model_ty'0) =
    [#"../hillel.rs" 67 4 69 5] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  let rec is_subset'0 (sub:Seq.seq deep_model_ty'0) (sup:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_subset'0 sub sup} (! return' {result}) ]
    
  use seq.Seq
  function deep_model'0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty'0
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 99 8 99 28] deep_model'3 ( * self)
  let rec deep_model'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq deep_model_ty'0))= any
    [ return' (result:Seq.seq deep_model_ty'0)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty ())
  let rec resolve'0 (self:Snapshot.snap_ty ()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function subset_push'0 [#"../hillel.rs" 74 0 74 37] (s : Seq.seq deep_model_ty'0) (elem : deep_model_ty'0) : () =
    [#"../hillel.rs" 72 0 72 8] ()
  let rec subset_push'0 (s:Seq.seq deep_model_ty'0) (elem:deep_model_ty'0) (return'  (ret:()))= {[@expl:precondition] [#"../hillel.rs" 74 29 74 33] inv'10 elem}
    {[@expl:precondition] [#"../hillel.rs" 74 18 74 19] inv'9 s}
    any [ return' (result:())-> {result = subset_push'0 s elem} (! return' {result}) ] 
  axiom subset_push'0_spec : forall s : Seq.seq deep_model_ty'0, elem : deep_model_ty'0 . ([#"../hillel.rs" 74 18 74 19] inv'9 s)
   -> ([#"../hillel.rs" 74 29 74 33] inv'10 elem)  -> ([#"../hillel.rs" 73 10 73 36] is_subset'0 s (Seq.snoc s elem))
  let rec insert_unique (vec:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (elem:t) (return'  (ret:()))= {[#"../hillel.rs" 81 54 81 58] inv'6 elem}
    {[#"../hillel.rs" 81 36 81 39] inv'7 vec}
    {[#"../hillel.rs" 76 11 76 38] is_unique'0 (deep_model'0 vec)}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_8 <- [#"../hillel.rs" 82 4 82 47] Snapshot.new () ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [#"../hillel.rs" 83 20 83 89] is_subset'0 (deep_model'0 vec) (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
        s2
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &ghost_vec <- [#"../hillel.rs" 84 20 84 37] Snapshot.new vec ] s1 | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 ghost_vec} s1
      | s1 = -{resolve'1 ghost_vec}- s2
      | s2 = deref'0 { * vec} (fun (_ret':slice t) ->  [ &_18 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'1 _18} s1
      | s1 = -{resolve'2 _18}- s2
      | s2 = iter'0 {_18} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter t) ->  [ &_16 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = into_iter'0 {_16} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter t) ->  [ &iter <- _ret' ] s1) | s1 = bb8 ]
      
    | bb8 = s0
      [ s0 = 
        [ &iter_old <- ([#"../hillel.rs" 86 4 86 111] Snapshot.new iter) : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t) ]
        
        s1
      | s1 = bb9 ]
      
    | bb9 = s0
      [ s0 = -{resolve'3 iter_old}- s1
      | s1 = 
        [ &produced <- ([#"../hillel.rs" 86 4 86 111] Snapshot.new (Seq.empty  : Seq.seq t)) : Snapshot.snap_ty (Seq.seq t) ]
        
        s2
      | s2 = bb10 ]
      
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'2 produced} s1 | s1 = -{resolve'4 produced}- s2 | s2 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = bb12
      [ bb12 = {[@expl:loop invariant] [#"../hillel.rs" 86 4 86 111] forall j : int . 0 <= j
        /\ j < Seq.length (Snapshot.inner produced)  -> deep_model'2 (index_logic'0 produced j) <> deep_model'1 elem}
        {[@expl:loop invariant] [#"../hillel.rs" 86 4 86 111] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../hillel.rs" 86 4 86 111] inv'3 iter}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <Core_Slice_Iter_Iter_Type.t_iter t> {iter}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) ->  [ &_30 <- _ret' ]  [ &iter <-  ^ _30 ] s1)
          | s1 = Borrow.borrow_final <Core_Slice_Iter_Iter_Type.t_iter t> { * _30} {Borrow.get_id _30}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) ->
                 [ &_29 <- _ret' ] 
                 [ &_30 <- { _30 with current = ( ^ _29) ; } ] 
                s2)
          | s2 = next'0 {_29} (fun (_ret':Core_Option_Option_Type.t_option t) ->  [ &_28 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'5 _30}- s1
          | s1 = any
            [ br0 -> {_28 = Core_Option_Option_Type.C_None } (! bb17)
            | br1 (a:t)-> {_28 = Core_Option_Option_Type.C_Some a} (! bb16) ]
             ]
          
        | bb16 = s0 [ s0 = bb18 ] 
        | bb18 = s0
          [ s0 = Core_Option_Option_Type.some <t> {_28} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'4 _28} s2
          | s2 = -{resolve'6 _28}- s3
          | s3 = 
            [ &_33 <- ([#"../hillel.rs" 86 4 86 111] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq t) ]
            
            s4
          | s4 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _33 ] (any [ any_ (_any:Snapshot.snap_ty (Seq.seq t))-> (!  [ &_33 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'2 produced} s2
          | s2 = -{resolve'4 produced}- s3
          | s3 =  [ &e <- __creusot_proc_iter_elem ] s4
          | s4 = {[@expl:type invariant] inv'5 __creusot_proc_iter_elem} s5
          | s5 = -{resolve'7 __creusot_proc_iter_elem}- s6
          | s6 = {[@expl:assertion] [#"../hillel.rs" 88 24 88 57] e
            = index_logic'1 ( * Snapshot.inner ghost_vec) (Seq.length (Snapshot.inner produced) - 1)}
            s7
          | s7 =  [ &_41 <- elem ] s8
          | s8 = eq'0 {e} {_41} (fun (_ret':bool) ->  [ &_38 <- _ret' ] s9)
          | s9 = bb20 ]
          
        | bb20 = s0 [ s0 = any [ br0 -> {_38 = false} (! bb23) | br1 -> {_38} (! bb21) ]  ] 
        | bb23 = s0
          [ s0 = {[@expl:type invariant] inv'5 _41} s1
          | s1 = -{resolve'7 _41}- s2
          | s2 = {[@expl:type invariant] inv'5 e} s3
          | s3 = -{resolve'7 e}- s4
          | s4 = bb12 ]
           ]
         ]
      
    | bb15 = s0
      [ s0 = -{resolve'8 iter}- s1
      | s1 = {[@expl:type invariant] inv'6 elem} s2
      | s2 = -{resolve'9 elem}- s3
      | s3 = {[@expl:type invariant] inv'4 _28} s4
      | s4 = -{resolve'6 _28}- s5
      | s5 = {[@expl:type invariant] inv'7 vec} s6
      | s6 = -{resolve'10 vec}- s7
      | s7 = {[#"../hillel.rs" 86 4 86 111] false} any ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'5 _41} s1
      | s1 = -{resolve'7 _41}- s2
      | s2 = {[@expl:type invariant] inv'5 e} s3
      | s3 = -{resolve'7 e}- s4
      | s4 = -{resolve'8 iter}- s5
      | s5 = {[@expl:type invariant] inv'6 elem} s6
      | s6 = -{resolve'9 elem}- s7
      | s7 = {[@expl:type invariant] inv'7 vec} s8
      | s8 = -{resolve'10 vec}- s9
      | s9 = {[@expl:assertion] [#"../hillel.rs" 90 28 90 73] contains'0 (deep_model'0 vec) (deep_model'1 elem)} s10
      | s10 = bb22 ]
      
    | bb22 = s0 [ s0 =  [ &_0 <- [#"../hillel.rs" 91 12 91 18] () ] s1 | s1 = bb26 ] 
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv'4 _28} s1
      | s1 = -{resolve'6 _28}- s2
      | s2 = -{resolve'8 iter}- s3
      | s3 = {[@expl:assertion] [#"../hillel.rs" 95 18 95 37]  ^ vec =  ^ Snapshot.inner ghost_vec} s4
      | s4 = {[@expl:assertion] [#"../hillel.rs" 96 20 96 71] is_unique'0 (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
        s5
      | s5 = bb24 ]
      
    | bb24 = s0
      [ s0 = Borrow.borrow_final
          <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)>
          { * vec}
          {Borrow.get_id vec}
          (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
             [ &_51 <- _ret' ] 
             [ &vec <- { vec with current = ( ^ _51) ; } ] 
            s1)
      | s1 = -{inv'8 ( ^ _51)}- s2
      | s2 = push'0 {_51} {elem} (fun (_ret':()) ->  [ &_50 <- _ret' ] s3)
      | s3 = bb25 ]
      
    | bb25 = s0
      [ s0 = {[@expl:type invariant] inv'7 vec} s1
      | s1 = -{resolve'10 vec}- s2
      | s2 =  [ &_0 <- [#"../hillel.rs" 81 63 98 1] () ] s3
      | s3 = bb26 ]
      
    | bb26 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = vec
    | & elem : t = elem
    | & _8 : Snapshot.snap_ty () = any_l () : Snapshot.snap_ty ()
    | & ghost_vec : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) = any_l () : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
    | & iter : Core_Slice_Iter_Iter_Type.t_iter t = any_l () : Core_Slice_Iter_Iter_Type.t_iter t
    | & _16 : Core_Slice_Iter_Iter_Type.t_iter t = any_l () : Core_Slice_Iter_Iter_Type.t_iter t
    | & _18 : slice t = any_l () : slice t
    | & iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter t)
    | & produced : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t)
    | & _28 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & _29 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)
    | & _30 : borrowed (Core_Slice_Iter_Iter_Type.t_iter t) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)
    | & __creusot_proc_iter_elem : t = any_l () : t
    | & _33 : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t)
    | & e : t = any_l () : t
    | & _38 : bool = any_l () : bool
    | & _41 : t = any_l () : t
    | & _50 : () = any_l () : ()
    | & _51 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../hillel.rs" 80 10 80 58] contains'0 (deep_model'3 ( ^ vec)) (deep_model'1 elem)}
      {[@expl:postcondition] [#"../hillel.rs" 79 10 79 82] is_subset'0 (deep_model'3 ( ^ vec)) (Seq.snoc (deep_model'0 vec) (deep_model'1 elem))}
      {[@expl:postcondition] [#"../hillel.rs" 78 10 78 58] is_subset'0 (deep_model'0 vec) (deep_model'3 ( ^ vec))}
      {[@expl:postcondition] [#"../hillel.rs" 77 10 77 40] is_unique'0 (deep_model'3 ( ^ vec))}
      (! return' {result}) ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Hillel_Unique
  type t
  use prelude.Slice
  predicate invariant'11 (self : slice t)
  let rec invariant'11 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'11 self} (! return' {result}) ]
    
  predicate inv'11 (_x : slice t)
  let rec inv'11 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'11 _x} (! return' {result}) ]
    
  axiom inv'11 : forall x : slice t . inv'11 x = true
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'10 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'10 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'10 self} (! return' {result}) ]
    
  predicate inv'10 (_x : Seq.seq usize)
  let rec inv'10 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'10 _x} (! return' {result}) ]
    
  axiom inv'10 : forall x : Seq.seq usize . inv'10 x = true
  predicate invariant'9 (self : Seq.seq t)
  let rec invariant'9 (self:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq t)
  let rec inv'9 (_x:Seq.seq t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq t . inv'9 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'8 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Core_Option_Option_Type.t_option usize)
  let rec inv'8 (_x:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Core_Option_Option_Type.t_option usize . inv'8 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'7 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'7 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'7 x = true
  type deep_model_ty'0
  predicate invariant'6 (self : Seq.seq deep_model_ty'0)
  let rec invariant'6 (self:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq deep_model_ty'0)
  let rec inv'6 (_x:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq deep_model_ty'0 . inv'6 x = true
  predicate invariant'5 (self : slice t)
  let rec invariant'5 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : slice t)
  let rec inv'5 (_x:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : slice t . inv'5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant'4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec invariant'4 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'4 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv'4 x = true
  predicate invariant'3 (self : t)
  let rec invariant'3 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : t)
  let rec inv'3 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : t . inv'3 x = true
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  let rec shallow_model'1 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'9 (shallow_model'1 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'9 (shallow_model'1 self)
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'1 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  function deep_model'2 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'2 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'2 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'2 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'2 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'2 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'2 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'2 (Core_Ops_Range_Range_Type.range_start o) - deep_model'2 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'2 (Seq.get visited i) = deep_model'2 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'10 bc}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'10 ab}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'10 ab)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'10 bc)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'1 x = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (Seq.seq t))
  let rec invariant'0 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (Seq.seq t))
  let rec inv'0 (_x:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (Seq.seq t) . inv'0 x = true
  use prelude.Intrinsic
  use seq.Seq
  use prelude.Slice
  function shallow_model'2 (self : slice t) : Seq.seq t
  let rec shallow_model'2 (self:slice t) (return'  (ret:Seq.seq t))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'11 self}
    any [ return' (result:Seq.seq t)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'11 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'9 (shallow_model'2 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'2 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  function shallow_model'0 (self : slice t) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'0 (self:slice t) (return'  (ret:Seq.seq t))= any
    [ return' (result:Seq.seq t)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  predicate resolve'5 (self : slice t)
  let rec resolve'5 (self:slice t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'5 self} (! return' {result}) ]
    
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  predicate resolve'4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'1 self)  -> resolve'2 (index_logic'0 self i)
  let rec resolve'4 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  use seq.Seq
  use prelude.Snapshot
  predicate resolve'3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate contains'0 [#"../hillel.rs" 59 0 59 44] (seq : Seq.seq deep_model_ty'0) (elem : deep_model_ty'0) =
    [#"../hillel.rs" 60 4 62 5] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  let rec contains'0 (seq:Seq.seq deep_model_ty'0) (elem:deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = contains'0 seq elem} (! return' {result}) ]
    
  use seq.Seq
  function deep_model'3 (self : t) : deep_model_ty'0
  let rec deep_model'3 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'3 self} (! return' {result}) ]
    
  predicate is_subset'0 [#"../hillel.rs" 66 0 66 49] (sub : Seq.seq deep_model_ty'0) (sup : Seq.seq deep_model_ty'0) =
    [#"../hillel.rs" 67 4 69 5] forall i : int . 0 <= i /\ i < Seq.length sub  -> contains'0 sup (Seq.get sub i)
  let rec is_subset'0 (sub:Seq.seq deep_model_ty'0) (sup:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_subset'0 sub sup} (! return' {result}) ]
    
  function deep_model'0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty'0
  let rec deep_model'0 (self:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq deep_model_ty'0))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv'2 self}
    any [ return' (result:Seq.seq deep_model_ty'0)-> {result = deep_model'0 self} (! return' {result}) ] 
  axiom deep_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv'2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44] inv'6 (deep_model'0 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i
  /\ i < Seq.length (shallow_model'1 self)  -> Seq.get (deep_model'0 self) i = deep_model'3 (index_logic'0 self i))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (shallow_model'1 self)
  = Seq.length (deep_model'0 self))
  predicate is_unique'0 [#"../hillel.rs" 52 0 52 34] (s : Seq.seq deep_model_ty'0) =
    [#"../hillel.rs" 53 4 55 5] forall j : int . forall i : int . 0 <= i
    /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s  -> Seq.get s i = Seq.get s j  -> i = j
  let rec is_unique'0 (s:Seq.seq deep_model_ty'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_unique'0 s} (! return' {result}) ]
    
  function deep_model'5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty'0
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 99 8 99 28] deep_model'0 ( * self)
  let rec deep_model'5 (self:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq deep_model_ty'0))= any
    [ return' (result:Seq.seq deep_model_ty'0)-> {result = deep_model'5 self} (! return' {result}) ]
    
  let rec insert_unique'0 (vec:borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (elem:t) (return'  (ret:()))= {[@expl:precondition] [#"../hillel.rs" 81 54 81 58] inv'3 elem}
    {[@expl:precondition] [#"../hillel.rs" 81 36 81 39] inv'4 vec}
    {[@expl:precondition] [#"../hillel.rs" 76 11 76 38] is_unique'0 (deep_model'5 vec)}
    any
    [ return' (result:())-> {[#"../hillel.rs" 80 10 80 58] contains'0 (deep_model'0 ( ^ vec)) (deep_model'3 elem)}
      {[#"../hillel.rs" 79 10 79 82] is_subset'0 (deep_model'0 ( ^ vec)) (Seq.snoc (deep_model'5 vec) (deep_model'3 elem))}
      {[#"../hillel.rs" 78 10 78 58] is_subset'0 (deep_model'5 vec) (deep_model'0 ( ^ vec))}
      {[#"../hillel.rs" 77 10 77 40] is_unique'0 (deep_model'0 ( ^ vec))}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'1 self
    /\ deep_model'2 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'2 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Option_Option_Type.t_option usize))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option usize)-> {inv'8 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use seq_ext.SeqExt
  use prelude.Snapshot
  function index_logic'1 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'1 (self:slice t) (ix:int) (return'  (ret:t))= any
    [ return' (result:t)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function deep_model'4 (self : slice t) : Seq.seq deep_model_ty'0
  let rec deep_model'4 (self:slice t) (return'  (ret:Seq.seq deep_model_ty'0))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 32 18 32 22] inv'11 self}
    any [ return' (result:Seq.seq deep_model_ty'0)-> {result = deep_model'4 self} (! return' {result}) ] 
  axiom deep_model'4_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 32 18 32 22] inv'11 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 32 4 32 44] inv'6 (deep_model'4 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 31 4 31 98] forall i : int . 0 <= i
  /\ i < Seq.length (deep_model'4 self)  -> Seq.get (deep_model'4 self) i = deep_model'3 (index_logic'1 self i))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 30 14 30 44] Seq.length (shallow_model'0 self)
  = Seq.length (deep_model'4 self))
  function deep_model'1 (self : slice t) : Seq.seq deep_model_ty'0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'4 self
  let rec deep_model'1 (self:slice t) (return'  (ret:Seq.seq deep_model_ty'0))= any
    [ return' (result:Seq.seq deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range usize) (res:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {inv'1 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:usize)-> {[#"../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] Seq.length (shallow_model'0 self)
      = UIntSize.to_int result}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (Seq.seq t))
  let rec resolve'0 (self:Snapshot.snap_ty (Seq.seq t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use seq.Seq
  let rec new'0 (_1:()) (return'  (ret:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))= any
    [ return' (result:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))-> {inv'2 result}
      {[#"../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44] Seq.length (shallow_model'1 result) = 0}
      (! return' {result}) ]
    
  let rec unique (str:slice t) (return'  (ret:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))= {[#"../hillel.rs" 103 36 103 39] inv'5 str}
    (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[#"../hillel.rs" 104 21 104 31] ()}
          (fun (_ret':Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) ->  [ &unique <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &sub_str <- ([#"../hillel.rs" 105 40 105 64] Snapshot.new (Seq.empty  : Seq.seq t)) : Snapshot.snap_ty (Seq.seq t) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 sub_str} s1
      | s1 = -{resolve'0 sub_str}- s2
      | s2 = len'0 {str} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &_10 <- Core_Ops_Range_Range_Type.C_Range ([#"../hillel.rs" 110 13 110 14] (0 : usize)) _11 : Core_Ops_Range_Range_Type.t_range usize ]
        
        (any [ any_ (_any:usize)-> (!  [ &_11 <- _any ] s1) ] )
      | s1 = into_iter'0 {_10} (fun (_ret':Core_Ops_Range_Range_Type.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = 
        [ &iter_old <- ([#"../hillel.rs" 107 4 107 48] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) ]
        
        s1
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = 
        [ &produced <- ([#"../hillel.rs" 107 4 107 48] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
        
        s1
      | s1 = bb6 ]
      
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = bb10
      [ bb10 = {[@expl:loop invariant] [#"../hillel.rs" 109 16 109 95] is_subset'0 (SeqExt.subsequence (deep_model'1 str) 0 (Seq.length (Snapshot.inner produced))) (deep_model'0 unique)}
        {[@expl:loop invariant] [#"../hillel.rs" 108 16 108 64] is_subset'0 (deep_model'0 unique) (deep_model'1 str)}
        {[@expl:loop invariant] [#"../hillel.rs" 107 16 107 46] is_unique'0 (deep_model'0 unique)}
        {[@expl:loop invariant] [#"../hillel.rs" 107 4 107 48] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../hillel.rs" 107 4 107 48] inv'1 iter}
        (! s0) [ s0 = bb11 ] 
        [ bb11 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range usize> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_25 <- _ret' ] 
                 [ &iter <-  ^ _25 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range usize> { * _25} {Borrow.get_id _25}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_24 <- _ret' ] 
                 [ &_25 <- { _25 with current = ( ^ _24) ; } ] 
                s2)
          | s2 = next'0 {_24} (fun (_ret':Core_Option_Option_Type.t_option usize) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb12 ]
          
        | bb12 = s0
          [ s0 = -{resolve'1 _25}- s1
          | s1 = any
            [ br0 -> {_23 = Core_Option_Option_Type.C_None } (! bb15)
            | br1 (a:usize)-> {_23 = Core_Option_Option_Type.C_Some a} (! bb14) ]
             ]
          
        | bb14 = s0 [ s0 = bb16 ] 
        | bb16 = s0
          [ s0 = Core_Option_Option_Type.some <usize> {_23}
              (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_28 <- ([#"../hillel.rs" 107 4 107 48] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s2
          | s2 = bb17 ]
          
        | bb17 = s0
          [ s0 =  [ &produced <- _28 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_28 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_32 <- i ] s3
          | s3 =  [ &_33 <- Slice.length str ] s4
          | s4 = UIntSize.lt {_32} {_33} (fun (_ret':bool) ->  [ &_34 <- _ret' ] s5)
          | s5 = {[@expl:index in bounds] [#"../hillel.rs" 111 22 111 28] _34} s6
          | s6 = bb18 ]
          
        | bb18 = s0
          [ s0 = Slice.get <t> {str} {_32} (fun (r'0:t) ->  [ &elem <- r'0 ] s1)
          | s1 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)> {unique}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_37 <- _ret' ] 
                 [ &unique <-  ^ _37 ] 
                s2)
          | s2 = -{inv'2 ( ^ _37)}- s3
          | s3 = Borrow.borrow_final
              <Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)>
              { * _37}
              {Borrow.get_id _37}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_36 <- _ret' ] 
                 [ &_37 <- { _37 with current = ( ^ _36) ; } ] 
                s4)
          | s4 = -{inv'2 ( ^ _36)}- s5
          | s5 = {[@expl:type invariant] inv'3 elem} s6
          | s6 = -{resolve'2 elem}- s7
          | s7 = insert_unique'0 {_36} {elem} (fun (_ret':()) ->  [ &_35 <- _ret' ] s8)
          | s8 = bb19 ]
          
        | bb19 = s0
          [ s0 = {[@expl:type invariant] inv'4 _37} s1
          | s1 = -{resolve'3 _37}- s2
          | s2 = 
            [ &_39 <- ([#"../hillel.rs" 113 18 113 50] Snapshot.new (Seq.snoc (Snapshot.inner sub_str) elem)) : Snapshot.snap_ty (Seq.seq t) ]
            
            s3
          | s3 = bb20 ]
          
        | bb20 = s0
          [ s0 =  [ &sub_str <- _39 ] (any [ any_ (_any:Snapshot.snap_ty (Seq.seq t))-> (!  [ &_39 <- _any ] s1) ] )
          | s1 = {[@expl:type invariant] inv'0 sub_str} s2
          | s2 = -{resolve'0 sub_str}- s3
          | s3 = bb10 ]
           ]
         ]
      
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'2 unique} s1
      | s1 = -{resolve'4 unique}- s2
      | s2 = {[@expl:type invariant] inv'5 str} s3
      | s3 = -{resolve'5 str}- s4
      | s4 = {[#"../hillel.rs" 107 4 107 48] false} any ]
      
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'5 str} s1
      | s1 = -{resolve'5 str}- s2
      | s2 = {[@expl:assertion] [#"../hillel.rs" 116 20 116 95] is_subset'0 (SeqExt.subsequence (deep_model'1 str) 0 (Seq.length (shallow_model'0 str))) (deep_model'0 unique)}
        s3
      | s3 = bb21 ]
      
    | bb21 = s0
      [ s0 = {[@expl:assertion] [#"../hillel.rs" 117 20 117 88] Seq.(==) (SeqExt.subsequence (deep_model'1 str) 0 (Seq.length (shallow_model'0 str))) (deep_model'1 str)}
        s1
      | s1 =  [ &_0 <- unique ] 
        (any
        [ any_ (_any:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))-> (!  [ &unique <- _any ] s2) ]
        )
      | s2 = bb22 ]
      
    | bb22 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    | & str : slice t = str
    | & unique : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = any_l () : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    | & sub_str : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t)
    | & iter : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _10 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _11 : usize = any_l () : usize
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize)
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _23 : Core_Option_Option_Type.t_option usize = any_l () : Core_Option_Option_Type.t_option usize
    | & _24 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & _25 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & __creusot_proc_iter_elem : usize = any_l () : usize
    | & _28 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & i : usize = any_l () : usize
    | & elem : t = any_l () : t
    | & _32 : usize = any_l () : usize
    | & _33 : usize = any_l () : usize
    | & _34 : bool = any_l () : bool
    | & _35 : () = any_l () : ()
    | & _36 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
    | & _37 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
    | & _39 : Snapshot.snap_ty (Seq.seq t) = any_l () : Snapshot.snap_ty (Seq.seq t) ]
    
    [ return' (result:Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))-> {[@expl:postcondition] [#"../hillel.rs" 103 50 103 56] inv'2 result}
      {[@expl:postcondition] [#"../hillel.rs" 102 10 102 58] is_subset'0 (deep_model'1 str) (deep_model'0 result)}
      {[@expl:postcondition] [#"../hillel.rs" 101 10 101 58] is_subset'0 (deep_model'0 result) (deep_model'1 str)}
      {[@expl:postcondition] [#"../hillel.rs" 100 10 100 40] is_unique'0 (deep_model'0 result)}
      (! return' {result}) ]
    
end
module Hillel_SumRange_Impl
  use prelude.UInt32
  use seq.Seq
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  use prelude.Int
  constant seq  : Seq.seq uint32
  constant from  : int
  constant to'  : int
  function sum_range [#"../hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  goal vc_sum_range : ([#"../hillel.rs" 123 11 123 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq)
   -> match to' - from > 0 with
    | True -> (([#"../hillel.rs" 123 11 123 53] 0 <= from + 1 /\ from + 1 <= to' /\ to' <= Seq.length seq)
    /\ 0 <= ([#"../hillel.rs" 122 10 122 19] to' - from)
    /\ ([#"../hillel.rs" 122 10 122 19] to' - (from + 1)) < ([#"../hillel.rs" 122 10 122 19] to' - from))
    /\ (([#"../hillel.rs" 124 10 124 21] sum_range seq (from + 1) to' >= 0)
     -> ([#"../hillel.rs" 124 10 124 21] UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to' >= 0))
    | False -> [#"../hillel.rs" 124 10 124 21] 0 >= 0
    end
end
module Hillel_SumRangeSplit_Impl
  use prelude.UInt32
  use seq.Seq
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  use prelude.Int
  function sum_range'0 [#"../hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([#"../hillel.rs" 121 0 121 8] if to' - from > 0 then
    UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to'
  else
    0
  )
  let rec sum_range'0 (seq:Seq.seq uint32) (from:int) (to':int) (return'  (ret:int))= {[@expl:precondition] [#"../hillel.rs" 123 11 123 53] 0
    <= from
    /\ from <= to' /\ to' <= Seq.length seq}
    any [ return' (result:int)-> {result = sum_range'0 seq from to'} (! return' {result}) ] 
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 123 11 123 53] 0
  <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([#"../hillel.rs" 124 10 124 21] sum_range'0 seq from to' >= 0)
  constant seq  : Seq.seq uint32
  constant from  : int
  constant to'  : int
  constant i  : int
  function sum_range_split [#"../hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  goal vc_sum_range_split : ([#"../hillel.rs" 135 11 135 63] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> match i > from with
    | True -> (([#"../hillel.rs" 135 11 135 63] 0 <= from + 1 /\ from + 1 <= i /\ i <= to' /\ to' <= Seq.length seq)
    /\ 0 <= ([#"../hillel.rs" 134 10 134 18] i - from)
    /\ ([#"../hillel.rs" 134 10 134 18] i - (from + 1)) < ([#"../hillel.rs" 134 10 134 18] i - from))
    /\ (([#"../hillel.rs" 136 10 136 85] sum_range'0 seq (from + 1) to'
    = sum_range'0 seq (from + 1) i + sum_range'0 seq i to')
     -> (let _ = sum_range_split seq (from + 1) to' i in [#"../hillel.rs" 136 10 136 85] sum_range'0 seq from to'
    = sum_range'0 seq from i + sum_range'0 seq i to'))
    | False -> [#"../hillel.rs" 136 10 136 85] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to'
    end
end
module Hillel_Score_Impl
  use prelude.Int
  function abs_diff'0 (self : int) (other : int) : int =
    [#"../../../../creusot-contracts/src/logic/int.rs" 51 4 51 12] if self < other then other - self else self - other
  let rec abs_diff'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {result = abs_diff'0 self other} (! return' {result}) ]
    
  use prelude.UInt32
  use seq.Seq
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  function sum_range'0 [#"../hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([#"../hillel.rs" 121 0 121 8] if to' - from > 0 then
    UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to'
  else
    0
  )
  let rec sum_range'0 (seq:Seq.seq uint32) (from:int) (to':int) (return'  (ret:int))= {[@expl:precondition] [#"../hillel.rs" 123 11 123 53] 0
    <= from
    /\ from <= to' /\ to' <= Seq.length seq}
    any [ return' (result:int)-> {result = sum_range'0 seq from to'} (! return' {result}) ] 
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 123 11 123 53] 0
  <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([#"../hillel.rs" 124 10 124 21] sum_range'0 seq from to' >= 0)
  function sum_range_split'0 [#"../hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    
  axiom sum_range_split'0_def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split'0 seq from to' i
  = ([#"../hillel.rs" 138 4 140 5] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  let rec sum_range_split'0 (seq:Seq.seq uint32) (from:int) (to':int) (i:int) (return'  (ret:()))= {[@expl:precondition] [#"../hillel.rs" 135 11 135 63] 0
    <= from
    /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    any [ return' (result:())-> {result = sum_range_split'0 seq from to' i} (! return' {result}) ] 
  axiom sum_range_split'0_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 135 11 135 63] 0
  <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> ([#"../hillel.rs" 136 10 136 85] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  constant seq  : Seq.seq uint32
  constant i  : int
  function score [#"../hillel.rs" 147 0 147 38] (seq : Seq.seq uint32) (i : int) : int
  goal vc_score : ([#"../hillel.rs" 144 11 144 35] 0 <= i /\ i <= Seq.length seq)
   -> ([#"../hillel.rs" 135 11 135 63] 0 <= 0 /\ 0 <= i /\ i <= Seq.length seq /\ Seq.length seq <= Seq.length seq)
  /\ (([#"../hillel.rs" 136 10 136 85] sum_range'0 seq 0 (Seq.length seq)
  = sum_range'0 seq 0 i + sum_range'0 seq i (Seq.length seq))
   -> (let _ = sum_range_split'0 seq 0 (Seq.length seq) i in ([#"../hillel.rs" 123 11 123 53] 0 <= 0
  /\ 0 <= i /\ i <= Seq.length seq)
  /\ (([#"../hillel.rs" 124 10 124 21] sum_range'0 seq 0 i >= 0)
   -> ([#"../hillel.rs" 123 11 123 53] 0 <= i /\ i <= Seq.length seq /\ Seq.length seq <= Seq.length seq)
  /\ (([#"../hillel.rs" 124 10 124 21] sum_range'0 seq i (Seq.length seq) >= 0)
   -> (let result = abs_diff'0 (sum_range'0 seq 0 i) (sum_range'0 seq i (Seq.length seq)) in ([#"../hillel.rs" 146 0 146 79] 0
  = i
  \/ i = Seq.length seq  -> result = sum_range'0 seq 0 (Seq.length seq))
  && ([#"../hillel.rs" 145 10 145 64] 0 <= result /\ result <= sum_range'0 seq 0 (Seq.length seq)))))))
end
module Hillel_Fulcrum
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'9 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'9 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : Seq.seq usize)
  let rec inv'9 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ]
    
  axiom inv'9 : forall x : Seq.seq usize . inv'9 x = true
  use prelude.UInt32
  predicate invariant'8 (self : Seq.seq uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'8 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  predicate inv'8 (_x : Seq.seq uint32)
  let rec inv'8 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  axiom inv'8 : forall x : Seq.seq uint32 . inv'8 x = true
  use prelude.Slice
  predicate invariant'7 (self : slice uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'7 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : slice uint32)
  let rec inv'7 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : slice uint32 . inv'7 x = true
  predicate invariant'6 (self : Seq.seq uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq uint32)
  let rec inv'6 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq uint32 . inv'6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'5 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Core_Option_Option_Type.t_option usize)
  let rec inv'5 (_x:Core_Option_Option_Type.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Core_Option_Option_Type.t_option usize . inv'5 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  let rec inv'4 (_x:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv'4 x = true
  predicate invariant'3 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option uint32)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option uint32 . inv'3 x = true
  predicate invariant'2 (self : slice uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : slice uint32)
  let rec inv'2 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : slice uint32 . inv'2 x = true
  use seq.Seq
  predicate inv'1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  let rec inv'1 (_x:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  function deep_model'0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'1 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'1 (self:Core_Ops_Range_Range_Type.t_range usize) (visited:Seq.seq usize) (o:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'1 self visited o} (! return' {result}) ]
    
  function produces_trans'1 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  let rec produces_trans'1 (a:Core_Ops_Range_Range_Type.t_range usize) (ab:Seq.seq usize) (b:Core_Ops_Range_Range_Type.t_range usize) (bc:Seq.seq usize) (c:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'9 bc}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'9 ab}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b}
    any [ return' (result:())-> {result = produces_trans'1 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'1_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'1 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'1 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'1 a)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'9 ab)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'1 b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'9 bc)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'1 c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'1 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  let rec produces_refl'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self}
    any [ return' (result:())-> {result = produces_refl'1 self} (! return' {result}) ] 
  axiom produces_refl'1_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'1 self)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'1 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv'1 x = true
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use seq.Seq
  use seq.Seq
  use prelude.Slice
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model'2 (self : slice uint32) : Seq.seq uint32
  let rec shallow_model'2 (self:slice uint32) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'7 self}
    any [ return' (result:Seq.seq uint32)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : slice uint32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'7 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'8 (shallow_model'2 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'2 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:slice uint32) (ix:int) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'0 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'2 self
  let rec shallow_model'0 (self:slice uint32) (return'  (ret:Seq.seq uint32))= any
    [ return' (result:Seq.seq uint32)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  function to_ref_seq'0 (self : slice uint32) : Seq.seq uint32
  let rec to_ref_seq'0 (self:slice uint32) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'2 self}
    any [ return' (result:Seq.seq uint32)-> {result = to_ref_seq'0 self} (! return' {result}) ] 
  axiom to_ref_seq'0_spec : forall self : slice uint32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 91 19 91 23] inv'2 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 91 4 91 35] inv'6 (to_ref_seq'0 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 90 4 90 82] forall i : int . 0 <= i
  /\ i < Seq.length (to_ref_seq'0 self)  -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 89 14 89 41] Seq.length (to_ref_seq'0 self)
  = Seq.length (shallow_model'0 self))
  function shallow_model'1 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : slice uint32
  let rec shallow_model'1 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:slice uint32))= any
    [ return' (result:slice uint32)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) (visited : Seq.seq uint32) (tl : Core_Slice_Iter_Iter_Type.t_iter uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 399 12 399 66] to_ref_seq'0 (shallow_model'1 self)
    = Seq.(++) visited (to_ref_seq'0 (shallow_model'1 tl))
  let rec produces'0 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (visited:Seq.seq uint32) (tl:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited tl} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Slice_Iter_Iter_Type.t_iter uint32) (ab : Seq.seq uint32) (b : Core_Slice_Iter_Iter_Type.t_iter uint32) (bc : Seq.seq uint32) (c : Core_Slice_Iter_Iter_Type.t_iter uint32) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 408 4 408 10] ()
  let rec produces_trans'0 (a:Core_Slice_Iter_Iter_Type.t_iter uint32) (ab:Seq.seq uint32) (b:Core_Slice_Iter_Iter_Type.t_iter uint32) (bc:Seq.seq uint32) (c:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'6 bc}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'6 ab}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter uint32, ab : Seq.seq uint32, b : Core_Slice_Iter_Iter_Type.t_iter uint32, bc : Seq.seq uint32, c : Core_Slice_Iter_Iter_Type.t_iter uint32 . ([#"../../../../creusot-contracts/src/std/slice.rs" 410 15 410 32] produces'0 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 411 15 411 32] produces'0 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 413 31 413 33] inv'6 ab)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 413 61 413 63] inv'6 bc)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 412 14 412 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) : () =
    [#"../../../../creusot-contracts/src/std/slice.rs" 403 4 403 10] ()
  let rec produces_refl'0 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:()))= any
    [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ]
    
  axiom produces_refl'0_spec : forall self : Core_Slice_Iter_Iter_Type.t_iter uint32 . [#"../../../../creusot-contracts/src/std/slice.rs" 405 14 405 45] produces'0 self (Seq.empty  : Seq.seq uint32) self
  predicate invariant'0 (self : Core_Slice_Iter_Iter_Type.t_iter uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Slice_Iter_Iter_Type.t_iter uint32)
  let rec inv'0 (_x:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Slice_Iter_Iter_Type.t_iter uint32 . inv'0 x = true
  use prelude.Intrinsic
  function abs_diff'1 (self : int) (other : int) : int =
    [#"../../../../creusot-contracts/src/logic/int.rs" 51 4 51 12] if self < other then other - self else self - other
  let rec abs_diff'1 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {result = abs_diff'1 self other} (! return' {result}) ]
    
  use prelude.UInt32
  let rec abs_diff'0 (self:uint32) (other:uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[#"../../../../creusot-contracts/src/std/num.rs" 221 26 221 59] UInt32.to_int result
      = abs_diff'1 (UInt32.to_int self) (UInt32.to_int other)}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate completed'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'1 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'1 self} (! return' {result}) ]
    
  let rec next'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range usize)) (return'  (ret:Core_Option_Option_Type.t_option usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option usize)-> {inv'5 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'1 self
        | Core_Option_Option_Type.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  function sum_range'0 [#"../hillel.rs" 125 0 125 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  axiom sum_range'0_def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([#"../hillel.rs" 121 0 121 8] if to' - from > 0 then
    UInt32.to_int (Seq.get seq from) + sum_range'0 seq (from + 1) to'
  else
    0
  )
  let rec sum_range'0 (seq:Seq.seq uint32) (from:int) (to':int) (return'  (ret:int))= {[@expl:precondition] [#"../hillel.rs" 123 11 123 53] 0
    <= from
    /\ from <= to' /\ to' <= Seq.length seq}
    any [ return' (result:int)-> {result = sum_range'0 seq from to'} (! return' {result}) ] 
  axiom sum_range'0_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 123 11 123 53] 0
  <= from
  /\ from <= to' /\ to' <= Seq.length seq)  -> ([#"../hillel.rs" 124 10 124 21] sum_range'0 seq from to' >= 0)
  function sum_range_split'0 [#"../hillel.rs" 137 0 137 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    
  axiom sum_range_split'0_def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split'0 seq from to' i
  = ([#"../hillel.rs" 138 4 140 5] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  let rec sum_range_split'0 (seq:Seq.seq uint32) (from:int) (to':int) (i:int) (return'  (ret:()))= {[@expl:precondition] [#"../hillel.rs" 135 11 135 63] 0
    <= from
    /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    any [ return' (result:())-> {result = sum_range_split'0 seq from to' i} (! return' {result}) ] 
  axiom sum_range_split'0_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 135 11 135 63] 0
  <= from
  /\ from <= i /\ i <= to' /\ to' <= Seq.length seq)
   -> ([#"../hillel.rs" 136 10 136 85] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  function score'0 [#"../hillel.rs" 147 0 147 38] (seq : Seq.seq uint32) (i : int) : int =
    [#"../hillel.rs" 148 4 148 41] let _ = sum_range_split'0 seq 0 (Seq.length seq) i in abs_diff'1 (sum_range'0 seq 0 i) (sum_range'0 seq i (Seq.length seq))
  let rec score'0 (seq:Seq.seq uint32) (i:int) (return'  (ret:int))= {[@expl:precondition] [#"../hillel.rs" 144 11 144 35] 0
    <= i
    /\ i <= Seq.length seq}
    any [ return' (result:int)-> {result = score'0 seq i} (! return' {result}) ] 
  axiom score'0_spec : forall seq : Seq.seq uint32, i : int . ([#"../hillel.rs" 144 11 144 35] 0 <= i
  /\ i <= Seq.length seq)
   -> ([#"../hillel.rs" 146 0 146 79] 0 = i \/ i = Seq.length seq
   -> score'0 seq i = sum_range'0 seq 0 (Seq.length seq))
  && ([#"../hillel.rs" 145 10 145 64] 0 <= score'0 seq i /\ score'0 seq i <= sum_range'0 seq 0 (Seq.length seq))
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'1 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'1 (self:Core_Ops_Range_Range_Type.t_range usize) (res:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'1 self res} (! return' {result}) ]
    
  predicate into_iter_pre'1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'1 self} (! return' {result}) ]
    
  let rec into_iter'1 (self:Core_Ops_Range_Range_Type.t_range usize) (return'  (ret:Core_Ops_Range_Range_Type.t_range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'1 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range usize)-> {inv'1 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'1 self result}
      (! return' {result}) ]
    
  let rec len'0 (self:slice uint32) (return'  (ret:usize))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:usize)-> {[#"../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] Seq.length (shallow_model'0 self)
      = UIntSize.to_int result}
      (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  function shallow_model'3 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) : slice uint32 =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'1 ( * self)
  let rec shallow_model'3 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:slice uint32))= any
    [ return' (result:slice uint32)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 392 20 392 61] resolve'0 self
    /\ shallow_model'2 (shallow_model'3 self) = (Seq.empty  : Seq.seq uint32)
  let rec completed'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) (return'  (ret:Core_Option_Option_Type.t_option uint32))= any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {inv'3 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : slice uint32) (res : Core_Slice_Iter_Iter_Type.t_iter uint32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 359 20 359 32] self = shallow_model'1 res
  let rec into_iter_post'0 (self:slice uint32) (res:Core_Slice_Iter_Iter_Type.t_iter uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : slice uint32) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 353 20 353 24] true
  let rec into_iter_pre'0 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:slice uint32) (return'  (ret:Core_Slice_Iter_Iter_Type.t_iter uint32))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Slice_Iter_Iter_Type.t_iter uint32)-> {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec fulcrum (s:slice uint32) (return'  (ret:usize))= {[#"../hillel.rs" 156 11 156 23] Seq.length (shallow_model'0 s)
    > 0}
    {[#"../hillel.rs" 155 11 155 45] sum_range'0 (shallow_model'0 s) 0 (Seq.length (shallow_model'0 s)) <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &total <- [#"../hillel.rs" 160 25 160 26] (0 : uint32) ] s1
      | s1 = into_iter'0 {s} (fun (_ret':Core_Slice_Iter_Iter_Type.t_iter uint32) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &iter_old <- ([#"../hillel.rs" 162 4 162 60] Snapshot.new iter) : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter uint32) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &produced <- ([#"../hillel.rs" 162 4 162 60] Snapshot.new (Seq.empty  : Seq.seq uint32)) : Snapshot.snap_ty (Seq.seq uint32) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../hillel.rs" 163 16 163 52] UInt32.to_int total
        <= sum_range'0 (shallow_model'0 s) 0 (Seq.length (shallow_model'0 s))}
        {[@expl:loop invariant] [#"../hillel.rs" 162 16 162 58] UInt32.to_int total
        = sum_range'0 (shallow_model'0 s) 0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [#"../hillel.rs" 162 4 162 60] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../hillel.rs" 162 4 162 60] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Core_Slice_Iter_Iter_Type.t_iter uint32> {iter}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) ->
                 [ &_21 <- _ret' ] 
                 [ &iter <-  ^ _21 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Slice_Iter_Iter_Type.t_iter uint32> { * _21} {Borrow.get_id _21}
              (fun (_ret':borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = ( ^ _20) ; } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':Core_Option_Option_Type.t_option uint32) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any
            [ br0 -> {_19 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:uint32)-> {_19 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <uint32> {_19}
              (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_24 <- ([#"../hillel.rs" 162 4 162 60] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq uint32) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _24 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq uint32))-> (!  [ &_24 <- _any ] s1) ] )
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {total} {x} (fun (_ret':uint32) ->  [ &total <- _ret' ] s3)
          | s3 =  [ &_18 <- [#"../hillel.rs" 164 16 166 5] () ] s4
          | s4 = bb4 ]
           ]
         ]
      
    | bb7 = s0 [ s0 = {[#"../hillel.rs" 162 4 162 60] false} any ] 
    | bb9 = s0
      [ s0 = {[@expl:assertion] [#"../hillel.rs" 168 20 168 56] UInt32.to_int total
        = sum_range'0 (shallow_model'0 s) 0 (Seq.length (shallow_model'0 s))}
        s1
      | s1 =  [ &min_i <- [#"../hillel.rs" 170 27 170 28] (0 : usize) ] s2
      | s2 =  [ &min_dist <- total ] s3
      | s3 =  [ &sum <- [#"../hillel.rs" 173 23 173 24] (0 : uint32) ] s4
      | s4 = len'0 {s} (fun (_ret':usize) ->  [ &_37 <- _ret' ] s5)
      | s5 = bb12 ]
      
    | bb12 = s0
      [ s0 = 
        [ &_36 <- Core_Ops_Range_Range_Type.C_Range ([#"../hillel.rs" 179 13 179 14] (0 : usize)) _37 : Core_Ops_Range_Range_Type.t_range usize ]
        
        (any [ any_ (_any:usize)-> (!  [ &_37 <- _any ] s1) ] )
      | s1 = into_iter'1 {_36} (fun (_ret':Core_Ops_Range_Range_Type.t_range usize) ->  [ &iter1 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = s0
      [ s0 = 
        [ &iter_old1 <- ([#"../hillel.rs" 174 4 174 58] Snapshot.new iter1) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) ]
        
        s1
      | s1 = bb14 ]
      
    | bb14 = s0
      [ s0 = 
        [ &produced1 <- ([#"../hillel.rs" 174 4 174 58] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
        
        s1
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = bb16
      [ bb16 = {[@expl:loop invariant] [#"../hillel.rs" 174 4 174 58] forall j : int . 0 <= j
        /\ j < Seq.length (Snapshot.inner produced1)
         -> score'0 (shallow_model'0 s) (UIntSize.to_int min_i) <= score'0 (shallow_model'0 s) j}
        {[@expl:loop invariant] [#"../hillel.rs" 177 16 177 46] UInt32.to_int min_dist
        = score'0 (shallow_model'0 s) (UIntSize.to_int min_i)}
        {[@expl:loop invariant] [#"../hillel.rs" 176 16 176 61] UIntSize.to_int min_i
        <= Seq.length (Snapshot.inner produced1)
        /\ UIntSize.to_int min_i < Seq.length (shallow_model'0 s)}
        {[@expl:loop invariant] [#"../hillel.rs" 175 16 175 30] UInt32.to_int sum <= UInt32.to_int total}
        {[@expl:loop invariant] [#"../hillel.rs" 174 16 174 56] UInt32.to_int sum
        = sum_range'0 (shallow_model'0 s) 0 (Seq.length (Snapshot.inner produced1))}
        {[@expl:loop invariant] [#"../hillel.rs" 174 4 174 58] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
        {[@expl:loop invariant] [#"../hillel.rs" 174 4 174 58] inv'1 iter1}
        (! s0) [ s0 = bb17 ] 
        [ bb17 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range usize> {iter1}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_52 <- _ret' ] 
                 [ &iter1 <-  ^ _52 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range usize> { * _52} {Borrow.get_id _52}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range usize)) ->
                 [ &_51 <- _ret' ] 
                 [ &_52 <- { _52 with current = ( ^ _51) ; } ] 
                s2)
          | s2 = next'1 {_51} (fun (_ret':Core_Option_Option_Type.t_option usize) ->  [ &_50 <- _ret' ] s3)
          | s3 = bb18 ]
          
        | bb18 = s0
          [ s0 = -{resolve'1 _52}- s1
          | s1 = any
            [ br0 -> {_50 = Core_Option_Option_Type.C_None } (! bb21)
            | br1 (a:usize)-> {_50 = Core_Option_Option_Type.C_Some a} (! bb20) ]
             ]
          
        | bb20 = s0 [ s0 = bb22 ] 
        | bb22 = s0
          [ s0 = Core_Option_Option_Type.some <usize> {_50}
              (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
          | s1 = 
            [ &_55 <- ([#"../hillel.rs" 174 4 174 58] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1))) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s2
          | s2 = bb23 ]
          
        | bb23 = s0
          [ s0 =  [ &produced1 <- _55 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_55 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem1 ] s2
          | s2 = UInt32.sub {total} {sum} (fun (_ret':uint32) ->  [ &_60 <- _ret' ] s3)
          | s3 = abs_diff'0 {sum} {_60} (fun (_ret':uint32) ->  [ &dist <- _ret' ] s4)
          | s4 = bb24 ]
          
        | bb24 = s0
          [ s0 = UInt32.lt {dist} {min_dist} (fun (_ret':bool) ->  [ &_64 <- _ret' ] s1)
          | s1 = any [ br0 -> {_64 = false} (! bb26) | br1 -> {_64} (! bb25) ]  ]
          
        | bb25 = s0
          [ s0 =  [ &min_i <- i ] s1
          | s1 =  [ &min_dist <- dist ] s2
          | s2 =  [ &_63 <- [#"../hillel.rs" 181 27 184 9] () ] s3
          | s3 = bb27 ]
          
        | bb26 = s0 [ s0 =  [ &_63 <- [#"../hillel.rs" 184 9 184 9] () ] s1 | s1 = bb27 ] 
        | bb27 = s0
          [ s0 =  [ &_70 <- i ] s1
          | s1 =  [ &_71 <- Slice.length s ] s2
          | s2 = UIntSize.lt {_70} {_71} (fun (_ret':bool) ->  [ &_72 <- _ret' ] s3)
          | s3 = {[@expl:index in bounds] [#"../hillel.rs" 186 15 186 19] _72} s4
          | s4 = bb28 ]
          
        | bb28 = s0
          [ s0 = Slice.get <uint32> {s} {_70}
              (fun (r'0:uint32) -> UInt32.add {sum} {r'0} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s1))
          | s1 =  [ &_18 <- [#"../hillel.rs" 179 24 187 5] () ] s2
          | s2 = bb16 ]
           ]
         ]
      
    | bb19 = s0 [ s0 = {[#"../hillel.rs" 174 4 174 58] false} any ] 
    | bb21 = s0 [ s0 =  [ &_0 <- min_i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l () : usize
    | & s : slice uint32 = s
    | & total : uint32 = any_l () : uint32
    | & iter : Core_Slice_Iter_Iter_Type.t_iter uint32 = any_l () : Core_Slice_Iter_Iter_Type.t_iter uint32
    | & iter_old : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter uint32) = any_l () : Snapshot.snap_ty (Core_Slice_Iter_Iter_Type.t_iter uint32)
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & _18 : () = any_l () : ()
    | & _19 : Core_Option_Option_Type.t_option uint32 = any_l () : Core_Option_Option_Type.t_option uint32
    | & _20 : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)
    | & _21 : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32) = any_l () : borrowed (Core_Slice_Iter_Iter_Type.t_iter uint32)
    | & __creusot_proc_iter_elem : uint32 = any_l () : uint32
    | & _24 : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & x : uint32 = any_l () : uint32
    | & min_i : usize = any_l () : usize
    | & min_dist : uint32 = any_l () : uint32
    | & sum : uint32 = any_l () : uint32
    | & iter1 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _36 : Core_Ops_Range_Range_Type.t_range usize = any_l () : Core_Ops_Range_Range_Type.t_range usize
    | & _37 : usize = any_l () : usize
    | & iter_old1 : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize)
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _50 : Core_Option_Option_Type.t_option usize = any_l () : Core_Option_Option_Type.t_option usize
    | & _51 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & _52 : borrowed (Core_Ops_Range_Range_Type.t_range usize) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range usize)
    | & __creusot_proc_iter_elem1 : usize = any_l () : usize
    | & _55 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & i : usize = any_l () : usize
    | & dist : uint32 = any_l () : uint32
    | & _60 : uint32 = any_l () : uint32
    | & _63 : () = any_l () : ()
    | & _64 : bool = any_l () : bool
    | & _70 : usize = any_l () : usize
    | & _71 : usize = any_l () : usize
    | & _72 : bool = any_l () : bool ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [#"../hillel.rs" 158 0 158 88] forall i : int . 0 <= i
      /\ i < Seq.length (shallow_model'0 s)
       -> score'0 (shallow_model'0 s) (UIntSize.to_int result) <= score'0 (shallow_model'0 s) i}
      {[@expl:postcondition] [#"../hillel.rs" 157 10 157 44] 0 <= UIntSize.to_int result
      /\ UIntSize.to_int result < Seq.length (shallow_model'0 s)}
      (! return' {result}) ]
    
end
