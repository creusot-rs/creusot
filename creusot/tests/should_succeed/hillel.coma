
module CreusotContracts_Snapshot_Snapshot_Type
  type t_snapshot 't
end
module CreusotContracts_Logic_Seq2_Seq_Type
  type t_seq 't
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Hillel_RightPad
  type t
  
  let%span shillel0 = "../hillel.rs" 17 18 17 35
  
  let%span shillel1 = "../hillel.rs" 19 16 19 33
  
  let%span shillel2 = "../hillel.rs" 20 16 20 44
  
  let%span shillel3 = "../hillel.rs" 19 4 19 35
  
  let%span shillel4 = "../hillel.rs" 16 22 16 25
  
  let%span shillel5 = "../hillel.rs" 16 52 16 55
  
  let%span shillel6 = "../hillel.rs" 10 10 10 62
  
  let%span shillel7 = "../hillel.rs" 11 10 11 62
  
  let%span shillel8 = "../hillel.rs" 12 0 12 62
  
  let%span shillel9 = "../hillel.rs" 13 0 13 55
  
  let%span shillel10 = "../hillel.rs" 14 0 14 75
  
  let%span shillel11 = "../hillel.rs" 15 0 15 75
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span14 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span15 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span16 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span17 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span18 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span19 = "../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span20 = "../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span21 = "../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span22 = "../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span23 = "../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span24 = "../../../../creusot-contracts/src/logic/seq2.rs" 98 8 98 39
  
  let%span span25 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span26 = "" 0 0 0 0
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span29 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span30 = "" 0 0 0 0
  
  let%span span31 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span33 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  let%span span34 = "../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span35 = "../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'4 (self : Seq'0.t_seq t)
  
  predicate inv'4 (_x : Seq'0.t_seq t)
  
  axiom inv'4 : forall x : Seq'0.t_seq t . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'3 (self : Vec'0.t_vec t (Global'0.t_global))
  
  predicate inv'3 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'3 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  predicate inv'2 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span12] (18446744073709551615 : usize)
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . [%#span13] len'0 self >= 0
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span14] inv'0 self)
   -> ([%#span15] len'0 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span16] inv'4 (shallow_model'2 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  constant empty'0 : Seq'0.t_seq t
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span17] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span18]  ^ self =  * self
  
  predicate resolve'1 (self : t)
  
  function index_logic'1 (self : Seq'0.t_seq t) (_2 : int) : t
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span20] forall i : int . 0 <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'0 self then index_logic'1 self i else index_logic'1 other (i - len'0 self)))
  && ([%#span19] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span21] inv'1 v)
   -> ([%#span23] index_logic'1 (singleton'0 v) 0 = v) && ([%#span22] len'0 (singleton'0 v) = 1)
  
  function push'1 [@inline:trivial] (self : Seq'0.t_seq t) (v : t) : Seq'0.t_seq t =
    [%#span24] concat'0 self (singleton'0 v)
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq t =
    [%#span25] shallow_model'2 ( * self)
  
  let rec push'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (value:t) (return'  (ret:()))= {[@expl:precondition] [%#span27] inv'1 value}
    {[@expl:precondition] [%#span26] inv'2 self}
    any
    [ return' (result:())-> {[%#span28] shallow_model'2 ( ^ self) = push'1 (shallow_model'1 self) value}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t =
    [%#span29] shallow_model'2 self
  
  let rec len'1 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span30] inv'3 self}
    any
    [ return' (result:usize)-> {[%#span31] UIntSize.to_int result = len'0 (shallow_model'4 self)} (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span32] index_logic'1 (shallow_model'2 self) ix
  
  function shallow_model'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq t =
    [%#span29] shallow_model'1 self
  
  function deref'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : borrowed (Vec'0.t_vec t (Global'0.t_global))
    
  
  function shallow_model'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : Seq'0.t_seq t
   =
    [%#span33] shallow_model'3 (deref'0 self)
  
  predicate resolve'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  function new'0 (x : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))
    
  
  axiom new'0_spec : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . ([%#span34] inv'2 x)
   -> ([%#span35] deref'0 (new'0 x) = x)
  
  let rec right_pad (str:borrowed (Vec'0.t_vec t (Global'0.t_global))) (len:usize) (pad:t) (return'  (ret:()))= {[%#shillel5] inv'1 pad}
    {[%#shillel4] inv'2 str}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [%#shillel0] new'0 str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = -{resolve'0 old_str}- s1 | s1 =  [ &old_2_0 <- new'0 str ] s2 | s2 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant]  ^ deref'0 old_2_0 =  ^ str}
        {[@expl:loop invariant] [%#shillel3] forall i : int . len'0 (shallow_model'0 old_str) <= i
        /\ i < len'0 (shallow_model'1 str)  -> index_logic'0 ( * str) i = pad}
        {[@expl:loop invariant] [%#shillel3] forall i : int . 0 <= i /\ i < len'0 (shallow_model'0 old_str)
         -> index_logic'0 ( * str) i = index_logic'0 ( * deref'0 old_str) i}
        {[@expl:loop invariant] [%#shillel3] len'0 (shallow_model'1 str) > UIntSize.to_int len
         -> len'0 (shallow_model'1 str) = len'0 (shallow_model'0 old_str)}
        {[@expl:loop invariant] [%#shillel3] len'0 (shallow_model'0 old_str) < UIntSize.to_int len
         -> len'0 (shallow_model'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant] [%#shillel2] len'0 (shallow_model'0 old_str) <= len'0 (shallow_model'1 str)}
        {[@expl:loop invariant] [%#shillel1]  ^ str =  ^ deref'0 old_str}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'1 { * str} (fun (_ret':usize) ->  [ &_20 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {_20} {len}
              (fun (_ret':bool) ->  [ &_19 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_20 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_19 = false} (! bb7) | br1 -> {_19} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> { * str}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_24 <- _ret' ] 
                 [ &str <- { str with current = ( ^ _24) ; } ] 
                s1)
          | s1 = -{inv'0 ( ^ _24)}- s2
          | s2 = push'0 {_24} {pad} (fun (_ret':()) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = bb2 ]
         ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 pad} s1
      | s1 = -{resolve'1 pad}- s2
      | s2 = {[@expl:type invariant] inv'2 str} s3
      | s3 = -{resolve'2 str}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & str : borrowed (Vec'0.t_vec t (Global'0.t_global)) = str
    | & len : usize = len
    | & pad : t = pad
    | & old_str : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & _19 : bool = any_l ()
    | & _20 : usize = any_l ()
    | & _23 : () = any_l ()
    | & _24 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & old_2_0 : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shillel11] forall i : int . len'0 (shallow_model'1 str) <= i
      /\ i < UIntSize.to_int len  -> index_logic'0 ( ^ str) i = pad}
      {[@expl:postcondition] [%#shillel10] forall i : int . 0 <= i /\ i < len'0 (shallow_model'1 str)
       -> index_logic'0 ( ^ str) i = index_logic'0 ( * str) i}
      {[@expl:postcondition] [%#shillel9] UIntSize.to_int len > len'0 (shallow_model'1 str)
       -> len'0 (shallow_model'2 ( ^ str)) = UIntSize.to_int len}
      {[@expl:postcondition] [%#shillel8] UIntSize.to_int len <= len'0 (shallow_model'1 str)
       -> len'0 (shallow_model'2 ( ^ str)) = len'0 (shallow_model'1 str)}
      {[@expl:postcondition] [%#shillel7] len'0 (shallow_model'2 ( ^ str)) = UIntSize.to_int len
      \/ len'0 (shallow_model'2 ( ^ str)) = len'0 (shallow_model'1 str)}
      {[@expl:postcondition] [%#shillel6] len'0 (shallow_model'2 ( ^ str)) >= UIntSize.to_int len
      /\ len'0 (shallow_model'2 ( ^ str)) >= len'0 (shallow_model'1 str)}
      (! return' {result}) ]
    
end
module Hillel_LeftPad
  type t
  
  let%span shillel0 = "../hillel.rs" 35 18 35 35
  
  let%span shillel1 = "../hillel.rs" 36 31 36 46
  
  let%span shillel2 = "../hillel.rs" 38 16 38 33
  
  let%span shillel3 = "../hillel.rs" 39 16 39 44
  
  let%span shillel4 = "../hillel.rs" 38 4 38 35
  
  let%span shillel5 = "../hillel.rs" 42 16 42 49
  
  let%span shillel6 = "../hillel.rs" 46 19 46 20
  
  let%span shillel7 = "../hillel.rs" 47 12 47 32
  
  let%span shillel8 = "../hillel.rs" 34 21 34 24
  
  let%span shillel9 = "../hillel.rs" 34 51 34 54
  
  let%span shillel10 = "../hillel.rs" 30 10 30 62
  
  let%span shillel11 = "../hillel.rs" 31 10 31 62
  
  let%span shillel12 = "../hillel.rs" 32 0 32 90
  
  let%span shillel13 = "../hillel.rs" 33 0 33 106
  
  let%span span14 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span17 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span18 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span19 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span20 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span21 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span23 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span24 = "" 0 0 0 0
  
  let%span span25 = "" 0 0 0 0
  
  let%span span26 = "../../../../creusot-contracts/src/std/vec.rs" 102 26 102 59
  
  let%span span27 = "../../../../creusot-contracts/src/std/vec.rs" 103 16 103 89
  
  let%span span28 = "../../../../creusot-contracts/src/std/vec.rs" 104 26 104 52
  
  let%span span29 = "../../../../creusot-contracts/src/std/vec.rs" 105 16 105 105
  
  let%span span30 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span33 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  let%span span34 = "../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span35 = "../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'5 (self : Seq'0.t_seq t)
  
  predicate inv'5 (_x : Seq'0.t_seq t)
  
  axiom inv'5 : forall x : Seq'0.t_seq t . inv'5 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'4 (self : Vec'0.t_vec t (Global'0.t_global))
  
  predicate inv'4 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'4 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'4 x = true
  
  use prelude.prelude.Int
  
  predicate invariant'3 (self : int) =
    [%#span14] true
  
  predicate inv'3 (_x : int)
  
  axiom inv'3 : forall x : int . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  predicate inv'2 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span15] (18446744073709551615 : usize)
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . [%#span16] len'0 self >= 0
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span17] inv'0 self)
   -> ([%#span18] len'0 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span19] inv'5 (shallow_model'2 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  constant empty'0 : Seq'0.t_seq t
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span20] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span21]  ^ self =  * self
  
  predicate resolve'1 (self : t)
  
  function index_logic'1 (self : Seq'0.t_seq t) (_2 : int) : t
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span22] index_logic'1 (shallow_model'2 self) ix
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq t =
    [%#span23] shallow_model'2 ( * self)
  
  let rec insert'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (index:usize) (element:t) (return'  (ret:()))= {[@expl:precondition] [%#span25] inv'1 element}
    {[@expl:precondition] [%#span24] inv'2 self}
    any
    [ return' (result:())-> {[%#span29] forall i : int . UIntSize.to_int index < i
      /\ i < len'0 (shallow_model'2 ( ^ self))  -> index_logic'0 ( ^ self) i = index_logic'0 ( * self) (i - 1)}
      {[%#span28] index_logic'0 ( ^ self) (UIntSize.to_int index) = element}
      {[%#span27] forall i : int . 0 <= i /\ i < UIntSize.to_int index
       -> index_logic'0 ( ^ self) i = index_logic'0 ( * self) i}
      {[%#span26] len'0 (shallow_model'2 ( ^ self)) = len'0 (shallow_model'1 self) + 1}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t =
    [%#span30] shallow_model'2 self
  
  let rec len'1 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span31] inv'4 self}
    any
    [ return' (result:usize)-> {[%#span32] UIntSize.to_int result = len'0 (shallow_model'4 self)} (! return' {result}) ]
    
  
  function deref'1 (self : Snapshot'0.t_snapshot int) : int
  
  function shallow_model'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq t =
    [%#span30] shallow_model'1 self
  
  function deref'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : borrowed (Vec'0.t_vec t (Global'0.t_global))
    
  
  function shallow_model'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : Seq'0.t_seq t
   =
    [%#span33] shallow_model'3 (deref'0 self)
  
  function new'1 (x : int) : Snapshot'0.t_snapshot int
  
  axiom new'1_spec : forall x : int . ([%#span34] inv'3 x)  -> ([%#span35] deref'1 (new'1 x) = x)
  
  predicate resolve'0 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  function new'0 (x : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))
    
  
  axiom new'0_spec : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . ([%#span34] inv'2 x)
   -> ([%#span35] deref'0 (new'0 x) = x)
  
  let rec left_pad (str:borrowed (Vec'0.t_vec t (Global'0.t_global))) (len:usize) (pad:t) (return'  (ret:()))= {[%#shillel9] inv'1 pad}
    {[%#shillel8] inv'2 str}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_str <- [%#shillel0] new'0 str ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = -{resolve'0 old_str}- s1 | s1 =  [ &c <- [%#shillel1] new'1 0 ] s2 | s2 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &old_3_0 <- new'0 str ] s1 | s1 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant]  ^ deref'0 old_3_0 =  ^ str}
        {[@expl:loop invariant] [%#shillel4] forall i : int . 0 <= i /\ i < deref'1 c
         -> index_logic'0 ( * str) i = pad}
        {[@expl:loop invariant] [%#shillel4] forall i : int . deref'1 c <= i /\ i < len'0 (shallow_model'1 str)
         -> index_logic'0 ( * str) i = index_logic'0 ( * deref'0 old_str) (i - deref'1 c)}
        {[@expl:loop invariant] [%#shillel5] deref'1 c = len'0 (shallow_model'1 str) - len'0 (shallow_model'0 old_str)}
        {[@expl:loop invariant] [%#shillel4] len'0 (shallow_model'1 str) > UIntSize.to_int len
         -> len'0 (shallow_model'1 str) = len'0 (shallow_model'0 old_str)}
        {[@expl:loop invariant] [%#shillel4] len'0 (shallow_model'0 old_str) < UIntSize.to_int len
         -> len'0 (shallow_model'1 str) <= UIntSize.to_int len}
        {[@expl:loop invariant] [%#shillel3] len'0 (shallow_model'0 old_str) <= len'0 (shallow_model'1 str)}
        {[@expl:loop invariant] [%#shillel2]  ^ str =  ^ deref'0 old_str}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0 [ s0 = len'1 { * str} (fun (_ret':usize) ->  [ &_21 <- _ret' ] s1) | s1 = bb5 ] 
        | bb5 = s0
          [ s0 = UIntSize.lt {_21} {len}
              (fun (_ret':bool) ->  [ &_20 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_21 <- _any ] s1) ] ))
          | s1 = any [ br0 -> {_20 = false} (! bb9) | br1 -> {_20} (! bb6) ]  ]
          
        | bb6 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> { * str}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_25 <- _ret' ] 
                 [ &str <- { str with current = ( ^ _25) ; } ] 
                s1)
          | s1 = -{inv'0 ( ^ _25)}- s2
          | s2 = insert'0 {_25} {[%#shillel6] (0 : usize)} {pad} (fun (_ret':()) ->  [ &_24 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0 [ s0 =  [ &_27 <- [%#shillel7] new'1 (1 + deref'1 c) ] s1 | s1 = bb8 ] 
        | bb8 = s0
          [ s0 =  [ &c <- _27 ] (any [ any_ (_any:Snapshot'0.t_snapshot int)-> (!  [ &_27 <- _any ] s1) ] ) | s1 = bb3 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'1 pad} s1
      | s1 = -{resolve'1 pad}- s2
      | s2 = {[@expl:type invariant] inv'2 str} s3
      | s3 = -{resolve'2 str}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & str : borrowed (Vec'0.t_vec t (Global'0.t_global)) = str
    | & len : usize = len
    | & pad : t = pad
    | & old_str : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & c : Snapshot'0.t_snapshot int = any_l ()
    | & _20 : bool = any_l ()
    | & _21 : usize = any_l ()
    | & _24 : () = any_l ()
    | & _25 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _27 : Snapshot'0.t_snapshot int = any_l ()
    | & old_3_0 : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shillel13] forall i : int . 0 <= i
      /\ i < len'0 (shallow_model'1 str)
       -> index_logic'0 ( ^ str) (i + (len'0 (shallow_model'2 ( ^ str)) - len'0 (shallow_model'1 str)))
      = index_logic'0 ( * str) i}
      {[@expl:postcondition] [%#shillel12] forall i : int . 0 <= i
      /\ i < len'0 (shallow_model'2 ( ^ str)) - len'0 (shallow_model'1 str)  -> index_logic'0 ( ^ str) i = pad}
      {[@expl:postcondition] [%#shillel11] len'0 (shallow_model'2 ( ^ str)) = UIntSize.to_int len
      \/ len'0 (shallow_model'2 ( ^ str)) = len'0 (shallow_model'1 str)}
      {[@expl:postcondition] [%#shillel10] len'0 (shallow_model'2 ( ^ str)) >= UIntSize.to_int len
      /\ len'0 (shallow_model'2 ( ^ str)) >= len'0 (shallow_model'1 str)}
      (! return' {result}) ]
    
end
module Hillel_SubsetPush_Impl
  type t
  
  let%span shillel0 = "../hillel.rs" 74 29 74 33
  
  let%span shillel1 = "../hillel.rs" 73 10 73 36
  
  let%span span2 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span3 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span4 = "../hillel.rs" 60 4 62 5
  
  let%span span5 = "../hillel.rs" 67 4 69 5
  
  let%span span6 = "../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span7 = "../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span8 = "../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span9 = "../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span10 = "../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span11 = "../../../../creusot-contracts/src/logic/seq2.rs" 98 8 98 39
  
  use prelude.prelude.Int
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . [%#span2] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq t
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span3] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  function index_logic'0 (self : Seq'0.t_seq t) (_2 : int) : t
  
  predicate contains'0 [#"../hillel.rs" 59 0 59 44] (seq : Seq'0.t_seq t) (elem : t) =
    [%#span4] exists i : int . 0 <= i /\ i < len'0 seq /\ index_logic'0 seq i = elem
  
  predicate is_subset'0 [#"../hillel.rs" 66 0 66 49] (sub : Seq'0.t_seq t) (sup : Seq'0.t_seq t) =
    [%#span5] forall i : int . 0 <= i /\ i < len'0 sub  -> contains'0 sup (index_logic'0 sub i)
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span7] forall i : int . 0 <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'0 self then index_logic'0 self i else index_logic'0 other (i - len'0 self)))
  && ([%#span6] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span8] inv'0 v)
   -> ([%#span10] index_logic'0 (singleton'0 v) 0 = v) && ([%#span9] len'0 (singleton'0 v) = 1)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq t) (v : t) : Seq'0.t_seq t =
    [%#span11] concat'0 self (singleton'0 v)
  
  constant s  : Seq'0.t_seq t
  
  constant elem  : t
  
  function subset_push [#"../hillel.rs" 74 0 74 37] (s : Seq'0.t_seq t) (elem : t) : ()
  
  goal vc_subset_push : ([%#shillel0] inv'0 elem)  -> ([%#shillel1] is_subset'0 s (push'0 s elem))
end
module Core_Slice_Iter_Iter_Type
  use prelude.prelude.Borrow
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use prelude.prelude.Opaque
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_iter 't =
    | C_Iter (NonNull'0.t_nonnull 't) opaque_ptr (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_iter < 't > (input:t_iter 't) (ret  (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      = input}
      (! ret {ptr} {end_or_len} {_marker})
    | bad (ptr:NonNull'0.t_nonnull 't) (end_or_len:opaque_ptr) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Iter ptr end_or_len _marker
      <> input}
      {false}
      any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Hillel_InsertUnique
  type t
  
  let%span shillel0 = "../hillel.rs" 82 4 82 47
  
  let%span shillel1 = "../hillel.rs" 83 20 83 89
  
  let%span shillel2 = "../hillel.rs" 84 20 84 37
  
  let%span shillel3 = "../hillel.rs" 86 4 86 111
  
  let%span shillel4 = "../hillel.rs" 86 4 86 111
  
  let%span shillel5 = "../hillel.rs" 86 4 86 111
  
  let%span shillel6 = "../hillel.rs" 86 4 86 111
  
  let%span shillel7 = "../hillel.rs" 88 24 88 57
  
  let%span shillel8 = "../hillel.rs" 90 28 90 73
  
  let%span shillel9 = "../hillel.rs" 95 18 95 37
  
  let%span shillel10 = "../hillel.rs" 96 20 96 71
  
  let%span shillel11 = "../hillel.rs" 76 11 76 38
  
  let%span shillel12 = "../hillel.rs" 81 36 81 39
  
  let%span shillel13 = "../hillel.rs" 81 54 81 58
  
  let%span shillel14 = "../hillel.rs" 77 10 77 40
  
  let%span shillel15 = "../hillel.rs" 78 10 78 58
  
  let%span shillel16 = "../hillel.rs" 79 10 79 82
  
  let%span shillel17 = "../hillel.rs" 80 10 80 58
  
  let%span span18 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span19 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span22 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span24 = "../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span25 = "../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span26 = "../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span27 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span29 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span30 = "../../../../creusot-contracts/src/std/slice.rs" 76 19 76 23
  
  let%span span31 = "../../../../creusot-contracts/src/std/slice.rs" 74 14 74 41
  
  let%span span32 = "../../../../creusot-contracts/src/std/slice.rs" 75 4 75 82
  
  let%span span33 = "../../../../creusot-contracts/src/std/slice.rs" 384 12 384 66
  
  let%span span34 = "../../../../creusot-contracts/src/std/slice.rs" 395 15 395 32
  
  let%span span35 = "../../../../creusot-contracts/src/std/slice.rs" 396 15 396 32
  
  let%span span36 = "../../../../creusot-contracts/src/std/slice.rs" 397 14 397 42
  
  let%span span37 = "../../../../creusot-contracts/src/std/slice.rs" 393 4 393 10
  
  let%span span38 = "../../../../creusot-contracts/src/std/slice.rs" 390 14 390 45
  
  let%span span39 = "../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span41 = "../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22
  
  let%span span42 = "../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56
  
  let%span span43 = "../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53
  
  let%span span44 = "../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span45 = "../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span46 = "../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span47 = "../../../../creusot-contracts/src/logic/seq2.rs" 98 8 98 39
  
  let%span span48 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span52 = "../hillel.rs" 53 4 55 5
  
  let%span span53 = "../hillel.rs" 60 4 62 5
  
  let%span span54 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span55 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span56 = "" 0 0 0 0
  
  let%span span57 = "" 0 0 0 0
  
  let%span span58 = "../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  let%span span59 = "../../../../creusot-contracts/src/std/slice.rs" 377 20 377 61
  
  let%span span60 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  let%span span63 = "../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span64 = "../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span65 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span66 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span67 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "" 0 0 0 0
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  let%span span72 = "" 0 0 0 0
  
  let%span span73 = "../../../../creusot-contracts/src/std/vec.rs" 163 26 163 42
  
  let%span span74 = "" 0 0 0 0
  
  let%span span75 = "../hillel.rs" 67 4 69 5
  
  let%span span76 = "../../../../creusot-contracts/src/model.rs" 99 8 99 28
  
  let%span span77 = "../hillel.rs" 74 29 74 33
  
  let%span span78 = "../hillel.rs" 73 10 73 36
  
  let%span span79 = "../hillel.rs" 72 0 72 8
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'13 (self : Seq'0.t_seq t)
  
  predicate inv'13 (_x : Seq'0.t_seq t)
  
  axiom inv'13 : forall x : Seq'0.t_seq t . inv'13 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'12 (self : slice t)
  
  predicate inv'12 (_x : slice t)
  
  axiom inv'12 : forall x : slice t . inv'12 x = true
  
  use prelude.prelude.Int
  
  function len'2 (self : Seq'0.t_seq t) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq t . [%#span18] len'2 self >= 0
  
  constant empty'2 : Seq'0.t_seq t
  
  function empty_len'2 (_1 : ()) : ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span19] len'2 (empty'2 : Seq'0.t_seq t) = 0
  
  predicate invariant'11 (self : t)
  
  predicate inv'11 (_x : t)
  
  axiom inv'11 : forall x : t . inv'11 x = true
  
  predicate invariant'10 (self : Seq'0.t_seq t)
  
  predicate inv'10 (_x : Seq'0.t_seq t)
  
  axiom inv'10 : forall x : Seq'0.t_seq t . inv'10 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'9 (self : Vec'0.t_vec t (Global'0.t_global))
  
  predicate inv'9 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'9 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'9 x = true
  
  type deep_model_ty'0
  
  predicate invariant'8 (self : ())
  
  predicate inv'8 (_x : ())
  
  axiom inv'8 : forall x : () . inv'8 x = true
  
  predicate invariant'7 (self : deep_model_ty'0)
  
  predicate inv'7 (_x : deep_model_ty'0)
  
  axiom inv'7 : forall x : deep_model_ty'0 . inv'7 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span20] (18446744073709551615 : usize)
  
  predicate inv'6 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span21] inv'6 self)
   -> ([%#span22] len'2 (shallow_model'3 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'6 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span23] inv'13 (shallow_model'3 self)
  
  axiom inv'6 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'6 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  predicate inv'5 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'5 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'5 x = true
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_x : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  predicate invariant'3 (self : t)
  
  predicate inv'3 (_x : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option t)
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  use Core_Slice_Iter_Iter_Type as Iter'0
  
  function index_logic'3 (self : Seq'0.t_seq t) (_2 : int) : t
  
  function len'0 (self : Seq'0.t_seq t) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq t . [%#span18] len'0 self >= 0
  
  function concat'0 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'0_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span25] forall i : int . 0 <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'3 (concat'0 self other) i
  = (if i < len'0 self then index_logic'3 self i else index_logic'3 other (i - len'0 self)))
  && ([%#span24] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function index_logic'4 (self : Seq'0.t_seq t) (_2 : int) : t
  
  function shallow_model'5 (self : slice t) : Seq'0.t_seq t
  
  axiom shallow_model'5_spec : forall self : slice t . ([%#span26] inv'12 self)
   -> ([%#span27] len'2 (shallow_model'5 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'5 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span28] index_logic'4 (shallow_model'5 self) ix
  
  function shallow_model'0 (self : slice t) : Seq'0.t_seq t =
    [%#span29] shallow_model'5 self
  
  predicate inv'0 (_x : slice t)
  
  function to_ref_seq'0 (self : slice t) : Seq'0.t_seq t
  
  axiom to_ref_seq'0_spec : forall self : slice t . ([%#span30] inv'0 self)
   -> ([%#span32] forall i : int . 0 <= i /\ i < len'0 (to_ref_seq'0 self)
   -> index_logic'3 (to_ref_seq'0 self) i = index_logic'5 self i)
  && ([%#span31] len'0 (to_ref_seq'0 self) = len'2 (shallow_model'0 self))
  
  function shallow_model'2 (self : Iter'0.t_iter t) : slice t
  
  predicate produces'0 (self : Iter'0.t_iter t) (visited : Seq'0.t_seq t) (tl : Iter'0.t_iter t) =
    [%#span33] to_ref_seq'0 (shallow_model'2 self) = concat'0 visited (to_ref_seq'0 (shallow_model'2 tl))
  
  function produces_trans'0 (a : Iter'0.t_iter t) (ab : Seq'0.t_seq t) (b : Iter'0.t_iter t) (bc : Seq'0.t_seq t) (c : Iter'0.t_iter t) : ()
    
   =
    [%#span37] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_iter t, ab : Seq'0.t_seq t, b : Iter'0.t_iter t, bc : Seq'0.t_seq t, c : Iter'0.t_iter t . ([%#span34] produces'0 a ab b)
   -> ([%#span35] produces'0 b bc c)  -> ([%#span36] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq t
  
  function produces_refl'0 (self : Iter'0.t_iter t) : () =
    [%#span39] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_iter t . [%#span38] produces'0 self (empty'0 : Seq'0.t_seq t) self
  
  predicate invariant'1 (self : Iter'0.t_iter t)
  
  predicate inv'1 (_x : Iter'0.t_iter t)
  
  axiom inv'1 : forall x : Iter'0.t_iter t . inv'1 x = true
  
  function empty_len'1 (_1 : ()) : ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span19] len'0 (empty'0 : Seq'0.t_seq t) = 0
  
  predicate invariant'0 (self : slice t)
  
  axiom inv'0 : forall x : slice t . inv'0 x = true
  
  function len'1 (self : Seq'0.t_seq deep_model_ty'0) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq deep_model_ty'0 . [%#span18] len'1 self >= 0
  
  constant empty'1 : Seq'0.t_seq deep_model_ty'0
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span19] len'1 (empty'1 : Seq'0.t_seq deep_model_ty'0) = 0
  
  function deep_model'1 (self : t) : deep_model_ty'0
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span40] index_logic'4 (shallow_model'3 self) ix
  
  function index_logic'2 (self : Seq'0.t_seq deep_model_ty'0) (_2 : int) : deep_model_ty'0
  
  function deep_model'3 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq deep_model_ty'0
  
  axiom deep_model'3_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span41] inv'6 self)
   -> ([%#span43] forall i : int . 0 <= i /\ i < len'2 (shallow_model'3 self)
   -> index_logic'2 (deep_model'3 self) i = deep_model'1 (index_logic'1 self i))
  && ([%#span42] len'2 (shallow_model'3 self) = len'1 (deep_model'3 self))
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  function concat'2 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'2_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span25] forall i : int . 0 <= i
  /\ i < len'2 (concat'2 self other)
   -> index_logic'4 (concat'2 self other) i
  = (if i < len'2 self then index_logic'4 self i else index_logic'4 other (i - len'2 self)))
  && ([%#span24] len'2 (concat'2 self other) = len'2 self + len'2 other)
  
  function singleton'2 (v : t) : Seq'0.t_seq t
  
  axiom singleton'2_spec : forall v : t . ([%#span44] inv'4 v)
   -> ([%#span46] index_logic'4 (singleton'2 v) 0 = v) && ([%#span45] len'2 (singleton'2 v) = 1)
  
  function push'2 [@inline:trivial] (self : Seq'0.t_seq t) (v : t) : Seq'0.t_seq t =
    [%#span47] concat'2 self (singleton'2 v)
  
  function shallow_model'4 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq t =
    [%#span48] shallow_model'3 ( * self)
  
  let rec push'1 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (value:t) (return'  (ret:()))= {[@expl:precondition] [%#span50] inv'4 value}
    {[@expl:precondition] [%#span49] inv'5 self}
    any
    [ return' (result:())-> {[%#span51] shallow_model'3 ( ^ self) = push'2 (shallow_model'4 self) value}
      (! return' {result}) ]
    
  
  predicate is_unique'0 [#"../hillel.rs" 52 0 52 34] (s : Seq'0.t_seq deep_model_ty'0) =
    [%#span52] forall j : int . forall i : int . 0 <= i /\ i < len'1 s /\ 0 <= j /\ j < len'1 s
     -> index_logic'2 s i = index_logic'2 s j  -> i = j
  
  predicate contains'0 [#"../hillel.rs" 59 0 59 44] (seq : Seq'0.t_seq deep_model_ty'0) (elem : deep_model_ty'0) =
    [%#span53] exists i : int . 0 <= i /\ i < len'1 seq /\ index_logic'2 seq i = elem
  
  predicate resolve'10 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span54]  ^ self =  * self
  
  predicate resolve'9 (self : t)
  
  predicate resolve'8 (self : Iter'0.t_iter t)
  
  function deep_model'2 (self : t) : deep_model_ty'0 =
    [%#span55] deep_model'1 self
  
  function deep_model'4 (self : t) : deep_model_ty'0 =
    [%#span55] deep_model'2 self
  
  let rec eq'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span57] inv'11 other}
    {[@expl:precondition] [%#span56] inv'11 self}
    any [ return' (result:bool)-> {[%#span58] result = (deep_model'4 self = deep_model'4 other)} (! return' {result}) ] 
  
  function deref'2 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : borrowed (Vec'0.t_vec t (Global'0.t_global))
    
  
  predicate resolve'7 (self : t)
  
  function singleton'0 (v : t) : Seq'0.t_seq t
  
  axiom singleton'0_spec : forall v : t . ([%#span44] inv'3 v)
   -> ([%#span46] index_logic'3 (singleton'0 v) 0 = v) && ([%#span45] len'0 (singleton'0 v) = 1)
  
  predicate resolve'6 (self : Option'0.t_option t)
  
  predicate resolve'5 (self : borrowed (Iter'0.t_iter t)) =
    [%#span54]  ^ self =  * self
  
  function shallow_model'6 (self : borrowed (Iter'0.t_iter t)) : slice t =
    [%#span48] shallow_model'2 ( * self)
  
  predicate completed'0 (self : borrowed (Iter'0.t_iter t)) =
    [%#span59] resolve'5 self /\ shallow_model'5 (shallow_model'6 self) = (empty'2 : Seq'0.t_seq t)
  
  let rec next'0 (self:borrowed (Iter'0.t_iter t)) (return'  (ret:Option'0.t_option t))= any
    [ return' (result:Option'0.t_option t)-> {[%#span61] inv'2 result}
      {[%#span60] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  function index_logic'0 [@inline:trivial] (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) (ix : int) : t =
    [%#span62] index_logic'3 (deref'1 self) ix
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  function deref'4 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t)) : Iter'0.t_iter t
  
  function inner'0 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t)) : Iter'0.t_iter t
  
  predicate resolve'4 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t))
  
  function new'3 (x : Seq'0.t_seq t) : Snapshot'0.t_snapshot (Seq'0.t_seq t)
  
  axiom new'3_spec : forall x : Seq'0.t_seq t . ([%#span63] inv'10 x)  -> ([%#span64] deref'1 (new'3 x) = x)
  
  predicate resolve'3 (self : Snapshot'0.t_snapshot (Iter'0.t_iter t))
  
  function new'2 (x : Iter'0.t_iter t) : Snapshot'0.t_snapshot (Iter'0.t_iter t)
  
  axiom new'2_spec : forall x : Iter'0.t_iter t . ([%#span63] inv'1 x)  -> ([%#span64] deref'4 (new'2 x) = x)
  
  predicate into_iter_post'0 (self : Iter'0.t_iter t) (res : Iter'0.t_iter t) =
    [%#span65] self = res
  
  predicate into_iter_pre'0 (self : Iter'0.t_iter t) =
    [%#span66] true
  
  let rec into_iter'0 (self:Iter'0.t_iter t) (return'  (ret:Iter'0.t_iter t))= {[@expl:precondition] [%#span68] inv'1 self}
    {[@expl:precondition] [%#span67] into_iter_pre'0 self}
    any
    [ return' (result:Iter'0.t_iter t)-> {[%#span69] inv'1 result}
      {[%#span67] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec iter'0 (self:slice t) (return'  (ret:Iter'0.t_iter t))= {[@expl:precondition] [%#span70] inv'0 self}
    any [ return' (result:Iter'0.t_iter t)-> {[%#span71] shallow_model'2 result = self} (! return' {result}) ] 
  
  predicate resolve'2 (self : slice t)
  
  function shallow_model'1 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t =
    [%#span29] shallow_model'3 self
  
  let rec deref'0 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:slice t))= {[@expl:precondition] [%#span72] inv'9 self}
    any
    [ return' (result:slice t)-> {[%#span74] inv'0 result}
      {[%#span73] shallow_model'0 result = shallow_model'1 self}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  function new'1 (x : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global)))
    
  
  axiom new'1_spec : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . ([%#span63] inv'5 x)
   -> ([%#span64] deref'2 (new'1 x) = x)
  
  predicate is_subset'0 [#"../hillel.rs" 66 0 66 49] (sub : Seq'0.t_seq deep_model_ty'0) (sup : Seq'0.t_seq deep_model_ty'0)
    
   =
    [%#span75] forall i : int . 0 <= i /\ i < len'1 sub  -> contains'0 sup (index_logic'2 sub i)
  
  function concat'1 (self : Seq'0.t_seq deep_model_ty'0) (other : Seq'0.t_seq deep_model_ty'0) : Seq'0.t_seq deep_model_ty'0
    
  
  axiom concat'1_spec : forall self : Seq'0.t_seq deep_model_ty'0, other : Seq'0.t_seq deep_model_ty'0 . ([%#span25] forall i : int . 0
  <= i
  /\ i < len'1 (concat'1 self other)
   -> index_logic'2 (concat'1 self other) i
  = (if i < len'1 self then index_logic'2 self i else index_logic'2 other (i - len'1 self)))
  && ([%#span24] len'1 (concat'1 self other) = len'1 self + len'1 other)
  
  function singleton'1 (v : deep_model_ty'0) : Seq'0.t_seq deep_model_ty'0
  
  axiom singleton'1_spec : forall v : deep_model_ty'0 . ([%#span44] inv'7 v)
   -> ([%#span46] index_logic'2 (singleton'1 v) 0 = v) && ([%#span45] len'1 (singleton'1 v) = 1)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq deep_model_ty'0) (v : deep_model_ty'0) : Seq'0.t_seq deep_model_ty'0
    
   =
    [%#span47] concat'1 self (singleton'1 v)
  
  function deep_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq deep_model_ty'0 =
    [%#span76] deep_model'3 ( * self)
  
  predicate resolve'0 (self : Snapshot'0.t_snapshot ())
  
  function deref'3 (self : Snapshot'0.t_snapshot ()) : ()
  
  function new'0 (x : ()) : Snapshot'0.t_snapshot ()
  
  axiom new'0_spec : forall x : () . ([%#span63] inv'8 x)  -> ([%#span64] deref'3 (new'0 x) = x)
  
  function subset_push'0 [#"../hillel.rs" 74 0 74 37] (s : Seq'0.t_seq deep_model_ty'0) (elem : deep_model_ty'0) : () =
    [%#span79] ()
  
  axiom subset_push'0_spec : forall s : Seq'0.t_seq deep_model_ty'0, elem : deep_model_ty'0 . ([%#span77] inv'7 elem)
   -> ([%#span78] is_subset'0 s (push'0 s elem))
  
  let rec insert_unique (vec:borrowed (Vec'0.t_vec t (Global'0.t_global))) (elem:t) (return'  (ret:()))= {[%#shillel13] inv'4 elem}
    {[%#shillel12] inv'5 vec}
    {[%#shillel11] is_unique'0 (deep_model'0 vec)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_8 <- [%#shillel0] new'0 () ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [%#shillel1] is_subset'0 (deep_model'0 vec) (push'0 (deep_model'0 vec) (deep_model'1 elem))}
        s2
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &ghost_vec <- [%#shillel2] new'1 vec ] s1 | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = -{resolve'1 ghost_vec}- s1
      | s1 = deref'0 { * vec} (fun (_ret':slice t) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 _18} s1
      | s1 = -{resolve'2 _18}- s2
      | s2 = iter'0 {_18} (fun (_ret':Iter'0.t_iter t) ->  [ &_16 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0 [ s0 = into_iter'0 {_16} (fun (_ret':Iter'0.t_iter t) ->  [ &iter <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &iter_old <- [%#shillel3] new'2 iter ] s1 | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = -{resolve'3 iter_old}- s1
      | s1 =  [ &produced <- [%#shillel4] new'3 (empty'0 : Seq'0.t_seq t) ] s2
      | s2 = bb10 ]
      
    | bb10 = s0 [ s0 = -{resolve'4 produced}- s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb12
      [ bb12 = {[@expl:loop invariant] [%#shillel5] forall j : int . 0 <= j /\ j < len'0 (deref'1 produced)
         -> deep_model'2 (index_logic'0 produced j) <> deep_model'1 elem}
        {[@expl:loop invariant] [%#shillel5] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#shillel5] inv'1 iter}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_iter t> {iter}
              (fun (_ret':borrowed (Iter'0.t_iter t)) ->  [ &_30 <- _ret' ]  [ &iter <-  ^ _30 ] s1)
          | s1 = Borrow.borrow_final <Iter'0.t_iter t> { * _30} {Borrow.get_id _30}
              (fun (_ret':borrowed (Iter'0.t_iter t)) ->
                 [ &_29 <- _ret' ] 
                 [ &_30 <- { _30 with current = ( ^ _29) ; } ] 
                s2)
          | s2 = next'0 {_29} (fun (_ret':Option'0.t_option t) ->  [ &_28 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'5 _30}- s1
          | s1 = any [ br0 -> {_28 = Option'0.C_None } (! bb17) | br1 (a:t)-> {_28 = Option'0.C_Some a} (! bb16) ]  ]
          
        | bb16 = bb18
        | bb18 = s0
          [ s0 = Option'0.some <t> {_28} (fun (r0'0:t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = {[@expl:type invariant] inv'2 _28} s2
          | s2 = -{resolve'6 _28}- s3
          | s3 =  [ &_33 <- [%#shillel6] new'3 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ] s4
          | s4 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _33 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq t))-> (!  [ &_33 <- _any ] s1) ] )
          | s1 = -{resolve'4 produced}- s2
          | s2 =  [ &e <- __creusot_proc_iter_elem ] s3
          | s3 = {[@expl:type invariant] inv'3 __creusot_proc_iter_elem} s4
          | s4 = -{resolve'7 __creusot_proc_iter_elem}- s5
          | s5 = {[@expl:assertion] [%#shillel7] e
            = index_logic'1 ( * deref'2 ghost_vec) (len'0 (deref'1 produced) - 1)}
            s6
          | s6 =  [ &_41 <- elem ] s7
          | s7 = eq'0 {e} {_41} (fun (_ret':bool) ->  [ &_38 <- _ret' ] s8)
          | s8 = bb20 ]
          
        | bb20 = any [ br0 -> {_38 = false} (! bb23) | br1 -> {_38} (! bb21) ] 
        | bb23 = s0
          [ s0 = {[@expl:type invariant] inv'3 _41} s1
          | s1 = -{resolve'7 _41}- s2
          | s2 = {[@expl:type invariant] inv'3 e} s3
          | s3 = -{resolve'7 e}- s4
          | s4 = bb12 ]
           ]
         ]
      
    | bb15 = s0
      [ s0 = -{resolve'8 iter}- s1
      | s1 = {[@expl:type invariant] inv'4 elem} s2
      | s2 = -{resolve'9 elem}- s3
      | s3 = {[@expl:type invariant] inv'2 _28} s4
      | s4 = -{resolve'6 _28}- s5
      | s5 = {[@expl:type invariant] inv'5 vec} s6
      | s6 = -{resolve'10 vec}- s7
      | s7 = {[%#shillel5] false} any ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'3 _41} s1
      | s1 = -{resolve'7 _41}- s2
      | s2 = {[@expl:type invariant] inv'3 e} s3
      | s3 = -{resolve'7 e}- s4
      | s4 = -{resolve'8 iter}- s5
      | s5 = {[@expl:type invariant] inv'4 elem} s6
      | s6 = -{resolve'9 elem}- s7
      | s7 = {[@expl:type invariant] inv'5 vec} s8
      | s8 = -{resolve'10 vec}- s9
      | s9 = {[@expl:assertion] [%#shillel8] contains'0 (deep_model'0 vec) (deep_model'1 elem)} s10
      | s10 = bb22 ]
      
    | bb22 = bb26
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv'2 _28} s1
      | s1 = -{resolve'6 _28}- s2
      | s2 = -{resolve'8 iter}- s3
      | s3 = {[@expl:assertion] [%#shillel9]  ^ vec =  ^ deref'2 ghost_vec} s4
      | s4 = {[@expl:assertion] [%#shillel10] is_unique'0 (push'0 (deep_model'0 vec) (deep_model'1 elem))} s5
      | s5 = bb24 ]
      
    | bb24 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec t (Global'0.t_global)> { * vec} {Borrow.get_id vec}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_51 <- _ret' ] 
             [ &vec <- { vec with current = ( ^ _51) ; } ] 
            s1)
      | s1 = -{inv'6 ( ^ _51)}- s2
      | s2 = push'1 {_51} {elem} (fun (_ret':()) ->  [ &_50 <- _ret' ] s3)
      | s3 = bb25 ]
      
    | bb25 = s0 [ s0 = {[@expl:type invariant] inv'5 vec} s1 | s1 = -{resolve'10 vec}- s2 | s2 = bb26 ] 
    | bb26 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & vec : borrowed (Vec'0.t_vec t (Global'0.t_global)) = vec
    | & elem : t = elem
    | & _8 : Snapshot'0.t_snapshot () = any_l ()
    | & ghost_vec : Snapshot'0.t_snapshot (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & iter : Iter'0.t_iter t = any_l ()
    | & _16 : Iter'0.t_iter t = any_l ()
    | & _18 : slice t = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Iter'0.t_iter t) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l ()
    | & _28 : Option'0.t_option t = any_l ()
    | & _29 : borrowed (Iter'0.t_iter t) = any_l ()
    | & _30 : borrowed (Iter'0.t_iter t) = any_l ()
    | & __creusot_proc_iter_elem : t = any_l ()
    | & _33 : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l ()
    | & e : t = any_l ()
    | & _38 : bool = any_l ()
    | & _41 : t = any_l ()
    | & _50 : () = any_l ()
    | & _51 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shillel17] contains'0 (deep_model'3 ( ^ vec)) (deep_model'1 elem)}
      {[@expl:postcondition] [%#shillel16] is_subset'0 (deep_model'3 ( ^ vec)) (push'0 (deep_model'0 vec) (deep_model'1 elem))}
      {[@expl:postcondition] [%#shillel15] is_subset'0 (deep_model'0 vec) (deep_model'3 ( ^ vec))}
      {[@expl:postcondition] [%#shillel14] is_unique'0 (deep_model'3 ( ^ vec))}
      (! return' {result}) ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start [@inline:trivial] (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Hillel_Unique
  type t
  
  let%span shillel0 = "../hillel.rs" 104 21 104 31
  
  let%span shillel1 = "../hillel.rs" 105 40 105 64
  
  let%span shillel2 = "../hillel.rs" 110 13 110 14
  
  let%span shillel3 = "../hillel.rs" 107 4 107 48
  
  let%span shillel4 = "../hillel.rs" 107 4 107 48
  
  let%span shillel5 = "../hillel.rs" 107 4 107 48
  
  let%span shillel6 = "../hillel.rs" 107 16 107 46
  
  let%span shillel7 = "../hillel.rs" 108 16 108 64
  
  let%span shillel8 = "../hillel.rs" 109 16 109 95
  
  let%span shillel9 = "../hillel.rs" 107 4 107 48
  
  let%span shillel10 = "../hillel.rs" 111 22 111 28
  
  let%span shillel11 = "../hillel.rs" 113 18 113 50
  
  let%span shillel12 = "../hillel.rs" 116 20 116 95
  
  let%span shillel13 = "../hillel.rs" 117 20 117 88
  
  let%span shillel14 = "../hillel.rs" 103 36 103 39
  
  let%span shillel15 = "../hillel.rs" 100 10 100 40
  
  let%span shillel16 = "../hillel.rs" 101 10 101 58
  
  let%span shillel17 = "../hillel.rs" 102 10 102 58
  
  let%span shillel18 = "../hillel.rs" 103 50 103 56
  
  let%span span19 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span22 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span24 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span25 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span26 = "../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span27 = "../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span28 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span29 = "../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span30 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span31 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span32 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span33 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span34 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span35 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span36 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span37 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span38 = "../../../../creusot-contracts/src/logic/seq2.rs" 87 4 87 38
  
  let%span span39 = "../../../../creusot-contracts/src/logic/seq2.rs" 88 4 89 81
  
  let%span span40 = "../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span41 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span42 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span44 = "../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span45 = "../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span46 = "../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span47 = "../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span48 = "../../../../creusot-contracts/src/logic/seq2.rs" 98 8 98 39
  
  let%span span49 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span50 = "../hillel.rs" 60 4 62 5
  
  let%span span51 = "../hillel.rs" 67 4 69 5
  
  let%span span52 = "../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22
  
  let%span span53 = "../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56
  
  let%span span54 = "../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53
  
  let%span span55 = "../hillel.rs" 53 4 55 5
  
  let%span span56 = "../../../../creusot-contracts/src/model.rs" 99 8 99 28
  
  let%span span57 = "../hillel.rs" 76 11 76 38
  
  let%span span58 = "../hillel.rs" 81 36 81 39
  
  let%span span59 = "../hillel.rs" 81 54 81 58
  
  let%span span60 = "../hillel.rs" 77 10 77 40
  
  let%span span61 = "../hillel.rs" 78 10 78 58
  
  let%span span62 = "../hillel.rs" 79 10 79 82
  
  let%span span63 = "../hillel.rs" 80 10 80 58
  
  let%span span64 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span65 = "" 0 0 0 0
  
  let%span span66 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "../../../../creusot-contracts/src/logic/seq2.rs" 42 15 42 50
  
  let%span span69 = "../../../../creusot-contracts/src/logic/seq2.rs" 43 14 43 35
  
  let%span span70 = "../../../../creusot-contracts/src/logic/seq2.rs" 44 4 44 87
  
  let%span span71 = "../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span72 = "../../../../creusot-contracts/src/std/slice.rs" 31 18 31 22
  
  let%span span73 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 44
  
  let%span span74 = "../../../../creusot-contracts/src/std/slice.rs" 30 4 30 98
  
  let%span span75 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span76 = "../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span77 = "../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span78 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span79 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span80 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "" 0 0 0 0
  
  let%span span83 = "" 0 0 0 0
  
  let%span span84 = "../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  let%span span85 = "../../../../creusot-contracts/src/std/vec.rs" 69 26 69 44
  
  let%span span86 = "" 0 0 0 0
  
  type deep_model_ty'0
  
  predicate invariant'11 (self : deep_model_ty'0)
  
  predicate inv'11 (_x : deep_model_ty'0)
  
  axiom inv'11 : forall x : deep_model_ty'0 . inv'11 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'10 (self : slice t)
  
  predicate inv'10 (_x : slice t)
  
  axiom inv'10 : forall x : slice t . inv'10 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'9 (self : usize) =
    [%#span19] true
  
  predicate inv'9 (_x : usize)
  
  axiom inv'9 : forall x : usize . inv'9 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'8 (self : Option'0.t_option usize) =
    [%#span19] true
  
  predicate inv'8 (_x : Option'0.t_option usize)
  
  axiom inv'8 : forall x : Option'0.t_option usize . inv'8 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Range'0.t_range usize)) =
    [%#span19] true
  
  predicate inv'7 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'7 : forall x : borrowed (Range'0.t_range usize) . inv'7 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'6 (self : Seq'0.t_seq usize) =
    [%#span19] true
  
  predicate inv'6 (_x : Seq'0.t_seq usize)
  
  axiom inv'6 : forall x : Seq'0.t_seq usize . inv'6 x = true
  
  predicate invariant'5 (self : Seq'0.t_seq t)
  
  predicate inv'5 (_x : Seq'0.t_seq t)
  
  axiom inv'5 : forall x : Seq'0.t_seq t . inv'5 x = true
  
  predicate invariant'4 (self : slice t)
  
  predicate inv'4 (_x : slice t)
  
  axiom inv'4 : forall x : slice t . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  predicate inv'3 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'3 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'3 x = true
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span20] (18446744073709551615 : usize)
  
  function len'2 (self : Seq'0.t_seq t) : int
  
  axiom len'2_spec : forall self : Seq'0.t_seq t . [%#span21] len'2 self >= 0
  
  predicate inv'1 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq t
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span22] inv'1 self)
   -> ([%#span23] len'2 (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'1 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span24] inv'5 (shallow_model'1 self)
  
  axiom inv'1 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'1 x = true
  
  function len'3 (self : Seq'0.t_seq deep_model_ty'0) : int
  
  axiom len'3_spec : forall self : Seq'0.t_seq deep_model_ty'0 . [%#span21] len'3 self >= 0
  
  constant empty'2 : Seq'0.t_seq deep_model_ty'0
  
  function empty_len'2 (_1 : ()) : ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span25] len'3 (empty'2 : Seq'0.t_seq deep_model_ty'0) = 0
  
  function index_logic'0 (self : Seq'0.t_seq usize) (_2 : int) : usize
  
  function len'1 (self : Seq'0.t_seq usize) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq usize . [%#span21] len'1 self >= 0
  
  function concat'0 (self : Seq'0.t_seq usize) (other : Seq'0.t_seq usize) : Seq'0.t_seq usize
  
  axiom concat'0_spec : forall self : Seq'0.t_seq usize, other : Seq'0.t_seq usize . ([%#span27] forall i : int . 0 <= i
  /\ i < len'1 (concat'0 self other)
   -> index_logic'0 (concat'0 self other) i
  = (if i < len'1 self then index_logic'0 self i else index_logic'0 other (i - len'1 self)))
  && ([%#span26] len'1 (concat'0 self other) = len'1 self + len'1 other)
  
  predicate inv'0 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  function deep_model'2 (self : usize) : int =
    [%#span28] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq'0.t_seq usize) (o : Range'0.t_range usize) =
    [%#span29] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'2 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'2 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'1 visited > 0
     -> deep_model'2 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'2 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'1 visited
    = deep_model'2 (Core_Ops_Range_Range_Type.range_start o) - deep_model'2 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'1 visited
     -> deep_model'2 (index_logic'0 visited i) = deep_model'2 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq'0.t_seq usize) (b : Range'0.t_range usize) (bc : Seq'0.t_seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq'0.t_seq usize, b : Range'0.t_range usize, bc : Seq'0.t_seq usize, c : Range'0.t_range usize . ([%#span30] produces'0 a ab b)
   -> ([%#span31] produces'0 b bc c)
   -> ([%#span32] inv'0 a)
   -> ([%#span33] inv'0 b)  -> ([%#span34] inv'0 c)  -> ([%#span35] produces'0 a (concat'0 ab bc) c)
  
  constant empty'1 : Seq'0.t_seq usize
  
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span36] inv'0 self)
   -> ([%#span37] produces'0 self (empty'1 : Seq'0.t_seq usize) self)
  
  predicate invariant'0 (self : Range'0.t_range usize) =
    [%#span19] true
  
  axiom inv'0 : forall x : Range'0.t_range usize . inv'0 x = true
  
  function empty_len'1 (_1 : ()) : ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span25] len'1 (empty'1 : Seq'0.t_seq usize) = 0
  
  constant empty'0 : Seq'0.t_seq t
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span25] len'2 (empty'0 : Seq'0.t_seq t) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  function index_logic'1 (self : Seq'0.t_seq deep_model_ty'0) (_2 : int) : deep_model_ty'0
  
  predicate ext_eq'0 (self : Seq'0.t_seq deep_model_ty'0) (oth : Seq'0.t_seq deep_model_ty'0)
  
  axiom ext_eq'0_spec : forall self : Seq'0.t_seq deep_model_ty'0, oth : Seq'0.t_seq deep_model_ty'0 . ([%#span39] len'3 self
  = len'3 oth
  /\ (forall i : int . 0 <= i /\ i < len'3 self  -> index_logic'1 self i = index_logic'1 oth i)  -> ext_eq'0 self oth)
  && ([%#span38] ext_eq'0 self oth  -> self = oth)
  
  function shallow_model'2 (self : slice t) : Seq'0.t_seq t
  
  axiom shallow_model'2_spec : forall self : slice t . ([%#span40] inv'10 self)
   -> ([%#span41] len'2 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  function shallow_model'0 (self : slice t) : Seq'0.t_seq t =
    [%#span42] shallow_model'2 self
  
  predicate resolve'5 (self : slice t)
  
  predicate resolve'2 (self : t)
  
  function index_logic'3 (self : Seq'0.t_seq t) (_2 : int) : t
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span43] index_logic'3 (shallow_model'1 self) ix
  
  predicate resolve'4 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span44] forall i : int . 0 <= i /\ i < len'2 (shallow_model'1 self)  -> resolve'2 (index_logic'2 self i)
  
  function concat'1 (self : Seq'0.t_seq t) (other : Seq'0.t_seq t) : Seq'0.t_seq t
  
  axiom concat'1_spec : forall self : Seq'0.t_seq t, other : Seq'0.t_seq t . ([%#span27] forall i : int . 0 <= i
  /\ i < len'2 (concat'1 self other)
   -> index_logic'3 (concat'1 self other) i
  = (if i < len'2 self then index_logic'3 self i else index_logic'3 other (i - len'2 self)))
  && ([%#span26] len'2 (concat'1 self other) = len'2 self + len'2 other)
  
  function singleton'1 (v : t) : Seq'0.t_seq t
  
  axiom singleton'1_spec : forall v : t . ([%#span45] inv'2 v)
   -> ([%#span47] index_logic'3 (singleton'1 v) 0 = v) && ([%#span46] len'2 (singleton'1 v) = 1)
  
  function push'0 [@inline:trivial] (self : Seq'0.t_seq t) (v : t) : Seq'0.t_seq t =
    [%#span48] concat'1 self (singleton'1 v)
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t)) : Seq'0.t_seq t
  
  predicate resolve'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span49]  ^ self =  * self
  
  predicate contains'0 [#"../hillel.rs" 59 0 59 44] (seq : Seq'0.t_seq deep_model_ty'0) (elem : deep_model_ty'0) =
    [%#span50] exists i : int . 0 <= i /\ i < len'3 seq /\ index_logic'1 seq i = elem
  
  function concat'2 (self : Seq'0.t_seq deep_model_ty'0) (other : Seq'0.t_seq deep_model_ty'0) : Seq'0.t_seq deep_model_ty'0
    
  
  axiom concat'2_spec : forall self : Seq'0.t_seq deep_model_ty'0, other : Seq'0.t_seq deep_model_ty'0 . ([%#span27] forall i : int . 0
  <= i
  /\ i < len'3 (concat'2 self other)
   -> index_logic'1 (concat'2 self other) i
  = (if i < len'3 self then index_logic'1 self i else index_logic'1 other (i - len'3 self)))
  && ([%#span26] len'3 (concat'2 self other) = len'3 self + len'3 other)
  
  function singleton'2 (v : deep_model_ty'0) : Seq'0.t_seq deep_model_ty'0
  
  axiom singleton'2_spec : forall v : deep_model_ty'0 . ([%#span45] inv'11 v)
   -> ([%#span47] index_logic'1 (singleton'2 v) 0 = v) && ([%#span46] len'3 (singleton'2 v) = 1)
  
  function push'1 [@inline:trivial] (self : Seq'0.t_seq deep_model_ty'0) (v : deep_model_ty'0) : Seq'0.t_seq deep_model_ty'0
    
   =
    [%#span48] concat'2 self (singleton'2 v)
  
  function deep_model'3 (self : t) : deep_model_ty'0
  
  predicate is_subset'0 [#"../hillel.rs" 66 0 66 49] (sub : Seq'0.t_seq deep_model_ty'0) (sup : Seq'0.t_seq deep_model_ty'0)
    
   =
    [%#span51] forall i : int . 0 <= i /\ i < len'3 sub  -> contains'0 sup (index_logic'1 sub i)
  
  function deep_model'0 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq'0.t_seq deep_model_ty'0
  
  axiom deep_model'0_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span52] inv'1 self)
   -> ([%#span54] forall i : int . 0 <= i /\ i < len'2 (shallow_model'1 self)
   -> index_logic'1 (deep_model'0 self) i = deep_model'3 (index_logic'2 self i))
  && ([%#span53] len'2 (shallow_model'1 self) = len'3 (deep_model'0 self))
  
  predicate is_unique'0 [#"../hillel.rs" 52 0 52 34] (s : Seq'0.t_seq deep_model_ty'0) =
    [%#span55] forall j : int . forall i : int . 0 <= i /\ i < len'3 s /\ 0 <= j /\ j < len'3 s
     -> index_logic'1 s i = index_logic'1 s j  -> i = j
  
  function deep_model'5 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq'0.t_seq deep_model_ty'0 =
    [%#span56] deep_model'0 ( * self)
  
  let rec insert_unique'0 (vec:borrowed (Vec'0.t_vec t (Global'0.t_global))) (elem:t) (return'  (ret:()))= {[@expl:precondition] [%#span59] inv'2 elem}
    {[@expl:precondition] [%#span58] inv'3 vec}
    {[@expl:precondition] [%#span57] is_unique'0 (deep_model'5 vec)}
    any
    [ return' (result:())-> {[%#span63] contains'0 (deep_model'0 ( ^ vec)) (deep_model'3 elem)}
      {[%#span62] is_subset'0 (deep_model'0 ( ^ vec)) (push'1 (deep_model'5 vec) (deep_model'3 elem))}
      {[%#span61] is_subset'0 (deep_model'5 vec) (deep_model'0 ( ^ vec))}
      {[%#span60] is_unique'0 (deep_model'0 ( ^ vec))}
      (! return' {result}) ]
    
  
  function singleton'0 (v : usize) : Seq'0.t_seq usize
  
  axiom singleton'0_spec : forall v : usize . ([%#span45] inv'9 v)
   -> ([%#span47] index_logic'0 (singleton'0 v) 0 = v) && ([%#span46] len'1 (singleton'0 v) = 1)
  
  predicate resolve'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span49]  ^ self =  * self
  
  predicate completed'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span64] resolve'1 self
    /\ deep_model'2 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'2 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  let rec next'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span65] inv'7 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span67] inv'8 result}
      {[%#span66] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function subsequence'0 (self : Seq'0.t_seq deep_model_ty'0) (n : int) (m : int) : Seq'0.t_seq deep_model_ty'0
  
  axiom subsequence'0_spec : forall self : Seq'0.t_seq deep_model_ty'0, n : int, m : int . ([%#span68] 0 <= n
  /\ n <= m /\ m <= len'3 self)
   -> ([%#span70] forall i : int . 0 <= i /\ i < len'3 (subsequence'0 self n m)
   -> index_logic'1 (subsequence'0 self n m) i = index_logic'1 self (n + i))
  && ([%#span69] len'3 (subsequence'0 self n m) = m - n)
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function index_logic'4 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span71] index_logic'3 (shallow_model'2 self) ix
  
  function deep_model'4 (self : slice t) : Seq'0.t_seq deep_model_ty'0
  
  axiom deep_model'4_spec : forall self : slice t . ([%#span72] inv'10 self)
   -> ([%#span74] forall i : int . 0 <= i /\ i < len'3 (deep_model'4 self)
   -> index_logic'1 (deep_model'4 self) i = deep_model'3 (index_logic'4 self i))
  && ([%#span73] len'2 (shallow_model'0 self) = len'3 (deep_model'4 self))
  
  function deep_model'1 (self : slice t) : Seq'0.t_seq deep_model_ty'0 =
    [%#span75] deep_model'4 self
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function deref'2 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function inner'0 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function new'3 (x : Seq'0.t_seq usize) : Snapshot'0.t_snapshot (Seq'0.t_seq usize)
  
  axiom new'3_spec : forall x : Seq'0.t_seq usize . ([%#span76] inv'6 x)  -> ([%#span77] deref'0 (new'3 x) = x)
  
  function new'2 (x : Range'0.t_range usize) : Snapshot'0.t_snapshot (Range'0.t_range usize)
  
  axiom new'2_spec : forall x : Range'0.t_range usize . ([%#span76] inv'0 x)  -> ([%#span77] deref'2 (new'2 x) = x)
  
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span78] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span79] true
  
  let rec into_iter'0 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span81] inv'0 self}
    {[@expl:precondition] [%#span80] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span82] inv'0 result}
      {[%#span80] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] [%#span83] inv'4 self}
    any
    [ return' (result:usize)-> {[%#span84] len'2 (shallow_model'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq t))
  
  function new'1 (x : Seq'0.t_seq t) : Snapshot'0.t_snapshot (Seq'0.t_seq t)
  
  axiom new'1_spec : forall x : Seq'0.t_seq t . ([%#span76] inv'5 x)  -> ([%#span77] deref'1 (new'1 x) = x)
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_vec t (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec t (Global'0.t_global))-> {[%#span86] inv'1 result}
      {[%#span85] len'2 (shallow_model'1 result) = 0}
      (! return' {result}) ]
    
  
  let rec unique (str:slice t) (return'  (ret:Vec'0.t_vec t (Global'0.t_global)))= {[%#shillel14] inv'4 str}
    (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#shillel0] ()} (fun (_ret':Vec'0.t_vec t (Global'0.t_global)) ->  [ &unique <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &sub_str <- [%#shillel1] new'1 (empty'0 : Seq'0.t_seq t) ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = -{resolve'0 sub_str}- s1 | s1 = len'0 {str} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s2) | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &_10 <- Range'0.C_Range ([%#shillel2] (0 : usize)) _11 ] 
        (any [ any_ (_any:usize)-> (!  [ &_11 <- _any ] s1) ] )
      | s1 = into_iter'0 {_10} (fun (_ret':Range'0.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#shillel3] new'2 iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#shillel4] new'3 (empty'1 : Seq'0.t_seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb10
      [ bb10 = {[@expl:loop invariant] [%#shillel8] is_subset'0 (subsequence'0 (deep_model'1 str) 0 (len'1 (deref'0 produced))) (deep_model'0 unique)}
        {[@expl:loop invariant] [%#shillel7] is_subset'0 (deep_model'0 unique) (deep_model'1 str)}
        {[@expl:loop invariant] [%#shillel6] is_unique'0 (deep_model'0 unique)}
        {[@expl:loop invariant] [%#shillel5] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#shillel5] inv'0 iter}
        (! s0) [ s0 = bb11 ] 
        [ bb11 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_25 <- _ret' ]  [ &iter <-  ^ _25 ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> { * _25} {Borrow.get_id _25}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_24 <- _ret' ] 
                 [ &_25 <- { _25 with current = ( ^ _24) ; } ] 
                s2)
          | s2 = next'0 {_24} (fun (_ret':Option'0.t_option usize) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb12 ]
          
        | bb12 = s0
          [ s0 = -{resolve'1 _25}- s1
          | s1 = any
            [ br0 -> {_23 = Option'0.C_None } (! bb15) | br1 (a:usize)-> {_23 = Option'0.C_Some a} (! bb14) ]
             ]
          
        | bb14 = bb16
        | bb16 = s0
          [ s0 = Option'0.some <usize> {_23} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_28 <- [%#shillel9] new'3 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ] s2
          | s2 = bb17 ]
          
        | bb17 = s0
          [ s0 =  [ &produced <- _28 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq usize))-> (!  [ &_28 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_32 <- i ] s3
          | s3 =  [ &_33 <- Slice.length str ] s4
          | s4 = UIntSize.lt {_32} {_33} (fun (_ret':bool) ->  [ &_34 <- _ret' ] s5)
          | s5 = {[@expl:index in bounds] [%#shillel10] _34} s6
          | s6 = bb18 ]
          
        | bb18 = s0
          [ s0 = Slice.get <t> {str} {_32} (fun (r'0:t) ->  [ &elem <- r'0 ] s1)
          | s1 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {unique}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->  [ &_37 <- _ret' ]  [ &unique <-  ^ _37 ] s2)
          | s2 = -{inv'1 ( ^ _37)}- s3
          | s3 = Borrow.borrow_final <Vec'0.t_vec t (Global'0.t_global)> { * _37} {Borrow.get_id _37}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_36 <- _ret' ] 
                 [ &_37 <- { _37 with current = ( ^ _36) ; } ] 
                s4)
          | s4 = -{inv'1 ( ^ _36)}- s5
          | s5 = {[@expl:type invariant] inv'2 elem} s6
          | s6 = -{resolve'2 elem}- s7
          | s7 = insert_unique'0 {_36} {elem} (fun (_ret':()) ->  [ &_35 <- _ret' ] s8)
          | s8 = bb19 ]
          
        | bb19 = s0
          [ s0 = {[@expl:type invariant] inv'3 _37} s1
          | s1 = -{resolve'3 _37}- s2
          | s2 =  [ &_39 <- [%#shillel11] new'1 (push'0 (deref'1 sub_str) elem) ] s3
          | s3 = bb20 ]
          
        | bb20 = s0
          [ s0 =  [ &sub_str <- _39 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq t))-> (!  [ &_39 <- _any ] s1) ] )
          | s1 = -{resolve'0 sub_str}- s2
          | s2 = bb10 ]
           ]
         ]
      
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'1 unique} s1
      | s1 = -{resolve'4 unique}- s2
      | s2 = {[@expl:type invariant] inv'4 str} s3
      | s3 = -{resolve'5 str}- s4
      | s4 = {[%#shillel5] false} any ]
      
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'4 str} s1
      | s1 = -{resolve'5 str}- s2
      | s2 = {[@expl:assertion] [%#shillel12] is_subset'0 (subsequence'0 (deep_model'1 str) 0 (len'2 (shallow_model'0 str))) (deep_model'0 unique)}
        s3
      | s3 = bb21 ]
      
    | bb21 = s0
      [ s0 = {[@expl:assertion] [%#shillel13] ext_eq'0 (subsequence'0 (deep_model'1 str) 0 (len'2 (shallow_model'0 str))) (deep_model'1 str)}
        s1
      | s1 =  [ &_0 <- unique ] (any [ any_ (_any:Vec'0.t_vec t (Global'0.t_global))-> (!  [ &unique <- _any ] s2) ] )
      | s2 = bb22 ]
      
    | bb22 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_vec t (Global'0.t_global) = any_l ()
    | & str : slice t = str
    | & unique : Vec'0.t_vec t (Global'0.t_global) = any_l ()
    | & sub_str : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l ()
    | & iter : Range'0.t_range usize = any_l ()
    | & _10 : Range'0.t_range usize = any_l ()
    | & _11 : usize = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Range'0.t_range usize) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & _23 : Option'0.t_option usize = any_l ()
    | & _24 : borrowed (Range'0.t_range usize) = any_l ()
    | & _25 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _28 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & i : usize = any_l ()
    | & elem : t = any_l ()
    | & _32 : usize = any_l ()
    | & _33 : usize = any_l ()
    | & _34 : bool = any_l ()
    | & _35 : () = any_l ()
    | & _36 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _37 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _39 : Snapshot'0.t_snapshot (Seq'0.t_seq t) = any_l () ]
    
    [ return' (result:Vec'0.t_vec t (Global'0.t_global))-> {[@expl:postcondition] [%#shillel18] inv'1 result}
      {[@expl:postcondition] [%#shillel17] is_subset'0 (deep_model'1 str) (deep_model'0 result)}
      {[@expl:postcondition] [%#shillel16] is_subset'0 (deep_model'0 result) (deep_model'1 str)}
      {[@expl:postcondition] [%#shillel15] is_unique'0 (deep_model'0 result)}
      (! return' {result}) ]
    
end
module Hillel_SumRange_Impl
  let%span shillel0 = "../hillel.rs" 123 11 123 53
  
  let%span shillel1 = "../hillel.rs" 124 10 124 21
  
  let%span shillel2 = "../hillel.rs" 122 10 122 19
  
  let%span span3 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span4 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . [%#span3] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq uint32
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span4] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use prelude.prelude.UInt32
  
  function index_logic'0 (self : Seq'0.t_seq uint32) (_2 : int) : uint32
  
  constant seq  : Seq'0.t_seq uint32
  
  constant from  : int
  
  constant to'  : int
  
  function sum_range [#"../hillel.rs" 125 0 125 54] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) : int
  
  goal vc_sum_range : ([%#shillel0] 0 <= from /\ from <= to' /\ to' <= len'0 seq)
   -> match to' - from > 0 with
    | True -> (([%#shillel0] 0 <= from + 1 /\ from + 1 <= to' /\ to' <= len'0 seq)
    /\ 0 <= ([%#shillel2] to' - from) /\ ([%#shillel2] to' - (from + 1)) < ([%#shillel2] to' - from))
    /\ (([%#shillel1] sum_range seq (from + 1) to' >= 0)
     -> ([%#shillel1] UInt32.to_int (index_logic'0 seq from) + sum_range seq (from + 1) to' >= 0))
    | False -> [%#shillel1] 0 >= 0
    end
end
module Hillel_SumRangeSplit_Impl
  let%span shillel0 = "../hillel.rs" 135 11 135 63
  
  let%span shillel1 = "../hillel.rs" 136 10 136 85
  
  let%span shillel2 = "../hillel.rs" 134 10 134 18
  
  let%span span3 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span4 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span5 = "../hillel.rs" 123 11 123 53
  
  let%span span6 = "../hillel.rs" 124 10 124 21
  
  let%span span7 = "../hillel.rs" 122 10 122 19
  
  let%span span8 = "../hillel.rs" 121 0 121 8
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . [%#span3] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq uint32
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span4] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use prelude.prelude.UInt32
  
  function index_logic'0 (self : Seq'0.t_seq uint32) (_2 : int) : uint32
  
  function sum_range'0 [#"../hillel.rs" 125 0 125 54] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq'0.t_seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([%#span8] if to' - from > 0 then UInt32.to_int (index_logic'0 seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq'0.t_seq uint32, from : int, to' : int . ([%#span5] 0 <= from
  /\ from <= to' /\ to' <= len'0 seq)  -> ([%#span6] sum_range'0 seq from to' >= 0)
  
  constant seq  : Seq'0.t_seq uint32
  
  constant from  : int
  
  constant to'  : int
  
  constant i  : int
  
  function sum_range_split [#"../hillel.rs" 137 0 137 61] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) (i : int) : ()
    
  
  goal vc_sum_range_split : ([%#shillel0] 0 <= from /\ from <= i /\ i <= to' /\ to' <= len'0 seq)
   -> match i > from with
    | True -> (([%#shillel0] 0 <= from + 1 /\ from + 1 <= i /\ i <= to' /\ to' <= len'0 seq)
    /\ 0 <= ([%#shillel2] i - from) /\ ([%#shillel2] i - (from + 1)) < ([%#shillel2] i - from))
    /\ (([%#shillel1] sum_range'0 seq (from + 1) to' = sum_range'0 seq (from + 1) i + sum_range'0 seq i to')
     -> (let _ = sum_range_split seq (from + 1) to' i in [%#shillel1] sum_range'0 seq from to'
    = sum_range'0 seq from i + sum_range'0 seq i to'))
    | False -> [%#shillel1] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to'
    end
end
module Hillel_Score_Impl
  let%span shillel0 = "../hillel.rs" 144 11 144 35
  
  let%span shillel1 = "../hillel.rs" 145 10 145 64
  
  let%span shillel2 = "../hillel.rs" 146 0 146 79
  
  let%span sseq23 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span shillel4 = "../hillel.rs" 135 11 135 63
  
  let%span shillel5 = "../hillel.rs" 136 10 136 85
  
  let%span shillel6 = "../hillel.rs" 134 10 134 18
  
  let%span shillel7 = "../hillel.rs" 123 11 123 53
  
  let%span shillel8 = "../hillel.rs" 124 10 124 21
  
  let%span shillel9 = "../hillel.rs" 122 10 122 19
  
  let%span span10 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span11 = "../../../../creusot-contracts/src/logic/int.rs" 55 4 55 12
  
  let%span span12 = "../hillel.rs" 121 0 121 8
  
  let%span span13 = "../hillel.rs" 138 4 140 5
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . [%#sseq23] len'0 self >= 0
  
  constant empty'0 : Seq'0.t_seq uint32
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span10] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  function abs_diff'0 (self : int) (other : int) : int =
    [%#span11] if self < other then other - self else self - other
  
  use prelude.prelude.UInt32
  
  function index_logic'0 (self : Seq'0.t_seq uint32) (_2 : int) : uint32
  
  function sum_range'0 [#"../hillel.rs" 125 0 125 54] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq'0.t_seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([%#span12] if to' - from > 0 then UInt32.to_int (index_logic'0 seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq'0.t_seq uint32, from : int, to' : int . ([%#shillel7] 0 <= from
  /\ from <= to' /\ to' <= len'0 seq)  -> ([%#shillel8] sum_range'0 seq from to' >= 0)
  
  function sum_range_split'0 [#"../hillel.rs" 137 0 137 61] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) (i : int) : ()
    
  
  axiom sum_range_split'0_def : forall seq : Seq'0.t_seq uint32, from : int, to' : int, i : int . sum_range_split'0 seq from to' i
  = ([%#span13] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  
  axiom sum_range_split'0_spec : forall seq : Seq'0.t_seq uint32, from : int, to' : int, i : int . ([%#shillel4] 0
  <= from
  /\ from <= i /\ i <= to' /\ to' <= len'0 seq)
   -> ([%#shillel5] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  
  constant seq  : Seq'0.t_seq uint32
  
  constant i  : int
  
  function score [#"../hillel.rs" 147 0 147 38] (seq : Seq'0.t_seq uint32) (i : int) : int
  
  goal vc_score : ([%#shillel0] 0 <= i /\ i <= len'0 seq)
   -> ([%#sseq23] len'0 seq >= 0)
   -> ([%#shillel4] 0 <= 0 /\ 0 <= i /\ i <= len'0 seq /\ len'0 seq <= len'0 seq)
  /\ (([%#shillel5] sum_range'0 seq 0 (len'0 seq) = sum_range'0 seq 0 i + sum_range'0 seq i (len'0 seq))
   -> (let _ = sum_range_split'0 seq 0 (len'0 seq) i in ([%#shillel7] 0 <= 0 /\ 0 <= i /\ i <= len'0 seq)
  /\ (([%#shillel8] sum_range'0 seq 0 i >= 0)
   -> ([%#sseq23] len'0 seq >= 0)
   -> ([%#shillel7] 0 <= i /\ i <= len'0 seq /\ len'0 seq <= len'0 seq)
  /\ (([%#shillel8] sum_range'0 seq i (len'0 seq) >= 0)
   -> (let result = abs_diff'0 (sum_range'0 seq 0 i) (sum_range'0 seq i (len'0 seq)) in ([%#shillel2] 0 = i
  \/ i = len'0 seq  -> result = sum_range'0 seq 0 (len'0 seq))
  && ([%#shillel1] 0 <= result /\ result <= sum_range'0 seq 0 (len'0 seq)))))))
end
module Hillel_Fulcrum
  let%span shillel0 = "../hillel.rs" 160 25 160 26
  
  let%span shillel1 = "../hillel.rs" 162 4 162 60
  
  let%span shillel2 = "../hillel.rs" 162 4 162 60
  
  let%span shillel3 = "../hillel.rs" 162 4 162 60
  
  let%span shillel4 = "../hillel.rs" 162 16 162 58
  
  let%span shillel5 = "../hillel.rs" 163 16 163 52
  
  let%span shillel6 = "../hillel.rs" 162 4 162 60
  
  let%span shillel7 = "../hillel.rs" 168 20 168 56
  
  let%span shillel8 = "../hillel.rs" 170 27 170 28
  
  let%span shillel9 = "../hillel.rs" 173 23 173 24
  
  let%span shillel10 = "../hillel.rs" 179 13 179 14
  
  let%span shillel11 = "../hillel.rs" 174 4 174 58
  
  let%span shillel12 = "../hillel.rs" 174 4 174 58
  
  let%span shillel13 = "../hillel.rs" 174 4 174 58
  
  let%span shillel14 = "../hillel.rs" 174 16 174 56
  
  let%span shillel15 = "../hillel.rs" 175 16 175 30
  
  let%span shillel16 = "../hillel.rs" 176 16 176 61
  
  let%span shillel17 = "../hillel.rs" 177 16 177 46
  
  let%span shillel18 = "../hillel.rs" 174 4 174 58
  
  let%span shillel19 = "../hillel.rs" 186 15 186 19
  
  let%span shillel20 = "../hillel.rs" 155 11 155 45
  
  let%span shillel21 = "../hillel.rs" 156 11 156 23
  
  let%span shillel22 = "../hillel.rs" 157 10 157 44
  
  let%span shillel23 = "../hillel.rs" 158 0 158 88
  
  let%span span24 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span25 = "../../../../creusot-contracts/src/logic/seq2.rs" 68 14 68 25
  
  let%span span26 = "../../../../creusot-contracts/src/logic/seq2.rs" 104 14 104 54
  
  let%span span27 = "../../../../creusot-contracts/src/logic/seq2.rs" 105 4 106 62
  
  let%span span28 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span29 = "../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span30 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span31 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span32 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span33 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span34 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span35 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span36 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span37 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span38 = "../../../../creusot-contracts/src/logic/seq2.rs" 16 14 16 36
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span41 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span43 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span44 = "../../../../creusot-contracts/src/std/slice.rs" 76 19 76 23
  
  let%span span45 = "../../../../creusot-contracts/src/std/slice.rs" 74 14 74 41
  
  let%span span46 = "../../../../creusot-contracts/src/std/slice.rs" 75 4 75 82
  
  let%span span47 = "../../../../creusot-contracts/src/std/slice.rs" 384 12 384 66
  
  let%span span48 = "../../../../creusot-contracts/src/std/slice.rs" 395 15 395 32
  
  let%span span49 = "../../../../creusot-contracts/src/std/slice.rs" 396 15 396 32
  
  let%span span50 = "../../../../creusot-contracts/src/std/slice.rs" 397 14 397 42
  
  let%span span51 = "../../../../creusot-contracts/src/std/slice.rs" 393 4 393 10
  
  let%span span52 = "../../../../creusot-contracts/src/std/slice.rs" 390 14 390 45
  
  let%span span53 = "../../../../creusot-contracts/src/std/slice.rs" 388 4 388 10
  
  let%span span54 = "../../../../creusot-contracts/src/logic/int.rs" 55 4 55 12
  
  let%span span55 = "../../../../creusot-contracts/src/std/num.rs" 221 26 221 59
  
  let%span span56 = "../../../../creusot-contracts/src/logic/seq2.rs" 54 21 54 22
  
  let%span span57 = "../../../../creusot-contracts/src/logic/seq2.rs" 52 14 52 31
  
  let%span span58 = "../../../../creusot-contracts/src/logic/seq2.rs" 53 14 53 28
  
  let%span span59 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span60 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span63 = "" 0 0 0 0
  
  let%span span64 = "../hillel.rs" 123 11 123 53
  
  let%span span65 = "../hillel.rs" 124 10 124 21
  
  let%span span66 = "../hillel.rs" 122 10 122 19
  
  let%span span67 = "../hillel.rs" 121 0 121 8
  
  let%span span68 = "../hillel.rs" 135 11 135 63
  
  let%span span69 = "../hillel.rs" 136 10 136 85
  
  let%span span70 = "../hillel.rs" 134 10 134 18
  
  let%span span71 = "../hillel.rs" 138 4 140 5
  
  let%span span72 = "../hillel.rs" 144 11 144 35
  
  let%span span73 = "../hillel.rs" 145 10 145 64
  
  let%span span74 = "../hillel.rs" 146 0 146 79
  
  let%span span75 = "../hillel.rs" 148 4 148 41
  
  let%span span76 = "../../../../creusot-contracts/src/snapshot.rs" 45 15 45 16
  
  let%span span77 = "../../../../creusot-contracts/src/snapshot.rs" 43 14 43 28
  
  let%span span78 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span79 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span80 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "" 0 0 0 0
  
  let%span span83 = "" 0 0 0 0
  
  let%span span84 = "../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  let%span span85 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span86 = "../../../../creusot-contracts/src/std/slice.rs" 377 20 377 61
  
  let%span span87 = "" 0 0 0 0
  
  let%span span88 = "../../../../creusot-contracts/src/std/slice.rs" 344 20 344 32
  
  let%span span89 = "../../../../creusot-contracts/src/std/slice.rs" 338 20 338 24
  
  let%span span90 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Slice
  
  predicate invariant'10 (self : slice uint32) =
    [%#span24] true
  
  predicate inv'10 (_x : slice uint32)
  
  axiom inv'10 : forall x : slice uint32 . inv'10 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'9 (self : usize) =
    [%#span24] true
  
  predicate inv'9 (_x : usize)
  
  axiom inv'9 : forall x : usize . inv'9 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'8 (self : Option'0.t_option usize) =
    [%#span24] true
  
  predicate inv'8 (_x : Option'0.t_option usize)
  
  axiom inv'8 : forall x : Option'0.t_option usize . inv'8 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Range'0.t_range usize)) =
    [%#span24] true
  
  predicate inv'7 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'7 : forall x : borrowed (Range'0.t_range usize) . inv'7 x = true
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'6 (self : Seq'0.t_seq usize) =
    [%#span24] true
  
  predicate inv'6 (_x : Seq'0.t_seq usize)
  
  axiom inv'6 : forall x : Seq'0.t_seq usize . inv'6 x = true
  
  predicate invariant'5 (self : uint32) =
    [%#span24] true
  
  predicate inv'5 (_x : uint32)
  
  axiom inv'5 : forall x : uint32 . inv'5 x = true
  
  predicate invariant'4 (self : Option'0.t_option uint32) =
    [%#span24] true
  
  predicate inv'4 (_x : Option'0.t_option uint32)
  
  axiom inv'4 : forall x : Option'0.t_option uint32 . inv'4 x = true
  
  predicate invariant'3 (self : Seq'0.t_seq uint32) =
    [%#span24] true
  
  predicate inv'3 (_x : Seq'0.t_seq uint32)
  
  axiom inv'3 : forall x : Seq'0.t_seq uint32 . inv'3 x = true
  
  predicate invariant'2 (self : slice uint32) =
    [%#span24] true
  
  predicate inv'2 (_x : slice uint32)
  
  axiom inv'2 : forall x : slice uint32 . inv'2 x = true
  
  use prelude.prelude.Int
  
  function index_logic'2 (self : Seq'0.t_seq usize) (_2 : int) : usize
  
  function len'3 (self : Seq'0.t_seq usize) : int
  
  axiom len'3_spec : forall self : Seq'0.t_seq usize . [%#span25] len'3 self >= 0
  
  function concat'1 (self : Seq'0.t_seq usize) (other : Seq'0.t_seq usize) : Seq'0.t_seq usize
  
  axiom concat'1_spec : forall self : Seq'0.t_seq usize, other : Seq'0.t_seq usize . ([%#span27] forall i : int . 0 <= i
  /\ i < len'3 (concat'1 self other)
   -> index_logic'2 (concat'1 self other) i
  = (if i < len'3 self then index_logic'2 self i else index_logic'2 other (i - len'3 self)))
  && ([%#span26] len'3 (concat'1 self other) = len'3 self + len'3 other)
  
  predicate inv'1 (_x : Range'0.t_range usize)
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#span28] UIntSize.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'1 (self : Range'0.t_range usize) (visited : Seq'0.t_seq usize) (o : Range'0.t_range usize) =
    [%#span29] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (len'3 visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ len'3 visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < len'3 visited
     -> deep_model'0 (index_logic'2 visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'1 (a : Range'0.t_range usize) (ab : Seq'0.t_seq usize) (b : Range'0.t_range usize) (bc : Seq'0.t_seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'1_spec : forall a : Range'0.t_range usize, ab : Seq'0.t_seq usize, b : Range'0.t_range usize, bc : Seq'0.t_seq usize, c : Range'0.t_range usize . ([%#span30] produces'1 a ab b)
   -> ([%#span31] produces'1 b bc c)
   -> ([%#span32] inv'1 a)
   -> ([%#span33] inv'1 b)  -> ([%#span34] inv'1 c)  -> ([%#span35] produces'1 a (concat'1 ab bc) c)
  
  constant empty'1 : Seq'0.t_seq usize
  
  function produces_refl'1 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'1_spec : forall self : Range'0.t_range usize . ([%#span36] inv'1 self)
   -> ([%#span37] produces'1 self (empty'1 : Seq'0.t_seq usize) self)
  
  predicate invariant'1 (self : Range'0.t_range usize) =
    [%#span24] true
  
  axiom inv'1 : forall x : Range'0.t_range usize . inv'1 x = true
  
  function empty_len'2 (_1 : ()) : ()
  
  axiom empty_len'2_spec : forall _1 : () . [%#span38] len'3 (empty'1 : Seq'0.t_seq usize) = 0
  
  function len'1 (self : Seq'0.t_seq uint32) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq uint32 . [%#span25] len'1 self >= 0
  
  constant empty'2 : Seq'0.t_seq uint32
  
  function empty_len'1 (_1 : ()) : ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span38] len'1 (empty'2 : Seq'0.t_seq uint32) = 0
  
  use Core_Slice_Iter_Iter_Type as Iter'0
  
  function index_logic'1 (self : Seq'0.t_seq uint32) (_2 : int) : uint32
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . [%#span25] len'0 self >= 0
  
  function concat'0 (self : Seq'0.t_seq uint32) (other : Seq'0.t_seq uint32) : Seq'0.t_seq uint32
  
  axiom concat'0_spec : forall self : Seq'0.t_seq uint32, other : Seq'0.t_seq uint32 . ([%#span27] forall i : int . 0
  <= i
  /\ i < len'0 (concat'0 self other)
   -> index_logic'1 (concat'0 self other) i
  = (if i < len'0 self then index_logic'1 self i else index_logic'1 other (i - len'0 self)))
  && ([%#span26] len'0 (concat'0 self other) = len'0 self + len'0 other)
  
  function index_logic'0 (self : Seq'0.t_seq uint32) (_2 : int) : uint32
  
  constant max'0 : usize = [%#span39] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : slice uint32) : Seq'0.t_seq uint32
  
  axiom shallow_model'2_spec : forall self : slice uint32 . ([%#span40] inv'10 self)
   -> ([%#span41] len'1 (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'3 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#span42] index_logic'0 (shallow_model'2 self) ix
  
  function shallow_model'0 (self : slice uint32) : Seq'0.t_seq uint32 =
    [%#span43] shallow_model'2 self
  
  function to_ref_seq'0 (self : slice uint32) : Seq'0.t_seq uint32
  
  axiom to_ref_seq'0_spec : forall self : slice uint32 . ([%#span44] inv'2 self)
   -> ([%#span46] forall i : int . 0 <= i /\ i < len'0 (to_ref_seq'0 self)
   -> index_logic'1 (to_ref_seq'0 self) i = index_logic'3 self i)
  && ([%#span45] len'0 (to_ref_seq'0 self) = len'1 (shallow_model'0 self))
  
  function shallow_model'1 (self : Iter'0.t_iter uint32) : slice uint32
  
  predicate produces'0 (self : Iter'0.t_iter uint32) (visited : Seq'0.t_seq uint32) (tl : Iter'0.t_iter uint32) =
    [%#span47] to_ref_seq'0 (shallow_model'1 self) = concat'0 visited (to_ref_seq'0 (shallow_model'1 tl))
  
  function produces_trans'0 (a : Iter'0.t_iter uint32) (ab : Seq'0.t_seq uint32) (b : Iter'0.t_iter uint32) (bc : Seq'0.t_seq uint32) (c : Iter'0.t_iter uint32) : ()
    
   =
    [%#span51] ()
  
  axiom produces_trans'0_spec : forall a : Iter'0.t_iter uint32, ab : Seq'0.t_seq uint32, b : Iter'0.t_iter uint32, bc : Seq'0.t_seq uint32, c : Iter'0.t_iter uint32 . ([%#span48] produces'0 a ab b)
   -> ([%#span49] produces'0 b bc c)  -> ([%#span50] produces'0 a (concat'0 ab bc) c)
  
  constant empty'0 : Seq'0.t_seq uint32
  
  function produces_refl'0 (self : Iter'0.t_iter uint32) : () =
    [%#span53] ()
  
  axiom produces_refl'0_spec : forall self : Iter'0.t_iter uint32 . [%#span52] produces'0 self (empty'0 : Seq'0.t_seq uint32) self
  
  predicate invariant'0 (self : Iter'0.t_iter uint32) =
    [%#span24] true
  
  predicate inv'0 (_x : Iter'0.t_iter uint32)
  
  axiom inv'0 : forall x : Iter'0.t_iter uint32 . inv'0 x = true
  
  function empty_len'0 (_1 : ()) : ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span38] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use CreusotContracts_Snapshot_Snapshot_Type as Snapshot'0
  
  use prelude.prelude.Intrinsic
  
  function abs_diff'1 (self : int) (other : int) : int =
    [%#span54] if self < other then other - self else self - other
  
  use prelude.prelude.UInt32
  
  let rec abs_diff'0 (self:uint32) (other:uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#span55] UInt32.to_int result
      = abs_diff'1 (UInt32.to_int self) (UInt32.to_int other)}
      (! return' {result}) ]
    
  
  function singleton'1 (v : usize) : Seq'0.t_seq usize
  
  axiom singleton'1_spec : forall v : usize . ([%#span56] inv'9 v)
   -> ([%#span58] index_logic'2 (singleton'1 v) 0 = v) && ([%#span57] len'3 (singleton'1 v) = 1)
  
  predicate resolve'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span59]  ^ self =  * self
  
  predicate completed'1 (self : borrowed (Range'0.t_range usize)) =
    [%#span60] resolve'1 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  
  let rec next'1 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span61] inv'7 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span63] inv'8 result}
      {[%#span62] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 ( * self) (singleton'1 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function sum_range'0 [#"../hillel.rs" 125 0 125 54] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) : int
  
  axiom sum_range'0_def : forall seq : Seq'0.t_seq uint32, from : int, to' : int . sum_range'0 seq from to'
  = ([%#span67] if to' - from > 0 then UInt32.to_int (index_logic'0 seq from) + sum_range'0 seq (from + 1) to' else 0)
  
  axiom sum_range'0_spec : forall seq : Seq'0.t_seq uint32, from : int, to' : int . ([%#span64] 0 <= from
  /\ from <= to' /\ to' <= len'1 seq)  -> ([%#span65] sum_range'0 seq from to' >= 0)
  
  function sum_range_split'0 [#"../hillel.rs" 137 0 137 61] (seq : Seq'0.t_seq uint32) (from : int) (to' : int) (i : int) : ()
    
  
  axiom sum_range_split'0_def : forall seq : Seq'0.t_seq uint32, from : int, to' : int, i : int . sum_range_split'0 seq from to' i
  = ([%#span71] if i > from then let _ = sum_range_split'0 seq (from + 1) to' i in () else ())
  
  axiom sum_range_split'0_spec : forall seq : Seq'0.t_seq uint32, from : int, to' : int, i : int . ([%#span68] 0 <= from
  /\ from <= i /\ i <= to' /\ to' <= len'1 seq)
   -> ([%#span69] sum_range'0 seq from to' = sum_range'0 seq from i + sum_range'0 seq i to')
  
  function score'0 [#"../hillel.rs" 147 0 147 38] (seq : Seq'0.t_seq uint32) (i : int) : int =
    [%#span75] let _ = sum_range_split'0 seq 0 (len'1 seq) i in abs_diff'1 (sum_range'0 seq 0 i) (sum_range'0 seq i (len'1 seq))
  
  axiom score'0_spec : forall seq : Seq'0.t_seq uint32, i : int . ([%#span72] 0 <= i /\ i <= len'1 seq)
   -> ([%#span74] 0 = i \/ i = len'1 seq  -> score'0 seq i = sum_range'0 seq 0 (len'1 seq))
  && ([%#span73] 0 <= score'0 seq i /\ score'0 seq i <= sum_range'0 seq 0 (len'1 seq))
  
  function deref'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function inner'3 (self : Snapshot'0.t_snapshot (Seq'0.t_seq usize)) : Seq'0.t_seq usize
  
  function deref'3 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function inner'2 (self : Snapshot'0.t_snapshot (Range'0.t_range usize)) : Range'0.t_range usize
  
  function new'3 (x : Seq'0.t_seq usize) : Snapshot'0.t_snapshot (Seq'0.t_seq usize)
  
  axiom new'3_spec : forall x : Seq'0.t_seq usize . ([%#span76] inv'6 x)  -> ([%#span77] deref'1 (new'3 x) = x)
  
  function new'2 (x : Range'0.t_range usize) : Snapshot'0.t_snapshot (Range'0.t_range usize)
  
  axiom new'2_spec : forall x : Range'0.t_range usize . ([%#span76] inv'1 x)  -> ([%#span77] deref'3 (new'2 x) = x)
  
  predicate into_iter_post'1 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span78] self = res
  
  predicate into_iter_pre'1 (self : Range'0.t_range usize) =
    [%#span79] true
  
  let rec into_iter'1 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span81] inv'1 self}
    {[@expl:precondition] [%#span80] into_iter_pre'1 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span82] inv'1 result}
      {[%#span80] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  let rec len'2 (self:slice uint32) (return'  (ret:usize))= {[@expl:precondition] [%#span83] inv'2 self}
    any
    [ return' (result:usize)-> {[%#span84] len'1 (shallow_model'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  function singleton'0 (v : uint32) : Seq'0.t_seq uint32
  
  axiom singleton'0_spec : forall v : uint32 . ([%#span56] inv'5 v)
   -> ([%#span58] index_logic'1 (singleton'0 v) 0 = v) && ([%#span57] len'0 (singleton'0 v) = 1)
  
  predicate resolve'0 (self : borrowed (Iter'0.t_iter uint32)) =
    [%#span59]  ^ self =  * self
  
  function shallow_model'3 (self : borrowed (Iter'0.t_iter uint32)) : slice uint32 =
    [%#span85] shallow_model'1 ( * self)
  
  predicate completed'0 (self : borrowed (Iter'0.t_iter uint32)) =
    [%#span86] resolve'0 self /\ shallow_model'2 (shallow_model'3 self) = (empty'2 : Seq'0.t_seq uint32)
  
  let rec next'0 (self:borrowed (Iter'0.t_iter uint32)) (return'  (ret:Option'0.t_option uint32))= any
    [ return' (result:Option'0.t_option uint32)-> {[%#span87] inv'4 result}
      {[%#span62] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (singleton'0 v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  function deref'0 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  function inner'1 (self : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)) : Seq'0.t_seq uint32
  
  function deref'2 (self : Snapshot'0.t_snapshot (Iter'0.t_iter uint32)) : Iter'0.t_iter uint32
  
  function inner'0 (self : Snapshot'0.t_snapshot (Iter'0.t_iter uint32)) : Iter'0.t_iter uint32
  
  function new'1 (x : Seq'0.t_seq uint32) : Snapshot'0.t_snapshot (Seq'0.t_seq uint32)
  
  axiom new'1_spec : forall x : Seq'0.t_seq uint32 . ([%#span76] inv'3 x)  -> ([%#span77] deref'0 (new'1 x) = x)
  
  function new'0 (x : Iter'0.t_iter uint32) : Snapshot'0.t_snapshot (Iter'0.t_iter uint32)
  
  axiom new'0_spec : forall x : Iter'0.t_iter uint32 . ([%#span76] inv'0 x)  -> ([%#span77] deref'2 (new'0 x) = x)
  
  predicate into_iter_post'0 (self : slice uint32) (res : Iter'0.t_iter uint32) =
    [%#span88] self = shallow_model'1 res
  
  predicate into_iter_pre'0 (self : slice uint32) =
    [%#span89] true
  
  let rec into_iter'0 (self:slice uint32) (return'  (ret:Iter'0.t_iter uint32))= {[@expl:precondition] [%#span90] inv'2 self}
    {[@expl:precondition] [%#span80] into_iter_pre'0 self}
    any [ return' (result:Iter'0.t_iter uint32)-> {[%#span80] into_iter_post'0 self result} (! return' {result}) ] 
  
  let rec fulcrum (s:slice uint32) (return'  (ret:usize))= {[%#shillel21] len'1 (shallow_model'0 s) > 0}
    {[%#shillel20] sum_range'0 (shallow_model'0 s) 0 (len'1 (shallow_model'0 s)) <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &total <- [%#shillel0] (0 : uint32) ] s1
      | s1 = into_iter'0 {s} (fun (_ret':Iter'0.t_iter uint32) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#shillel1] new'0 iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#shillel2] new'1 (empty'0 : Seq'0.t_seq uint32) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#shillel5] UInt32.to_int total
        <= sum_range'0 (shallow_model'0 s) 0 (len'1 (shallow_model'0 s))}
        {[@expl:loop invariant] [%#shillel4] UInt32.to_int total
        = sum_range'0 (shallow_model'0 s) 0 (len'0 (deref'0 produced))}
        {[@expl:loop invariant] [%#shillel3] produces'0 (inner'0 iter_old) (inner'1 produced) iter}
        {[@expl:loop invariant] [%#shillel3] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Iter'0.t_iter uint32> {iter}
              (fun (_ret':borrowed (Iter'0.t_iter uint32)) ->  [ &_21 <- _ret' ]  [ &iter <-  ^ _21 ] s1)
          | s1 = Borrow.borrow_final <Iter'0.t_iter uint32> { * _21} {Borrow.get_id _21}
              (fun (_ret':borrowed (Iter'0.t_iter uint32)) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = ( ^ _20) ; } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':Option'0.t_option uint32) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = Option'0.C_None } (! bb9) | br1 (a:uint32)-> {_19 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <uint32> {_19} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_24 <- [%#shillel6] new'1 (concat'0 (inner'1 produced) (singleton'0 __creusot_proc_iter_elem)) ] s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _24 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq uint32))-> (!  [ &_24 <- _any ] s1) ] )
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {total} {x} (fun (_ret':uint32) ->  [ &total <- _ret' ] s3)
          | s3 = bb4 ]
           ]
         ]
      
    | bb7 = {[%#shillel3] false} any
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#shillel7] UInt32.to_int total
        = sum_range'0 (shallow_model'0 s) 0 (len'1 (shallow_model'0 s))}
        s1
      | s1 =  [ &min_i <- [%#shillel8] (0 : usize) ] s2
      | s2 =  [ &min_dist <- total ] s3
      | s3 =  [ &sum <- [%#shillel9] (0 : uint32) ] s4
      | s4 = len'2 {s} (fun (_ret':usize) ->  [ &_37 <- _ret' ] s5)
      | s5 = bb12 ]
      
    | bb12 = s0
      [ s0 =  [ &_36 <- Range'0.C_Range ([%#shillel10] (0 : usize)) _37 ] 
        (any [ any_ (_any:usize)-> (!  [ &_37 <- _any ] s1) ] )
      | s1 = into_iter'1 {_36} (fun (_ret':Range'0.t_range usize) ->  [ &iter1 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = s0 [ s0 =  [ &iter_old1 <- [%#shillel11] new'2 iter1 ] s1 | s1 = bb14 ] 
    | bb14 = s0 [ s0 =  [ &produced1 <- [%#shillel12] new'3 (empty'1 : Seq'0.t_seq usize) ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = bb16
      [ bb16 = {[@expl:loop invariant] [%#shillel13] forall j : int . 0 <= j /\ j < len'3 (deref'1 produced1)
         -> score'0 (shallow_model'0 s) (UIntSize.to_int min_i) <= score'0 (shallow_model'0 s) j}
        {[@expl:loop invariant] [%#shillel17] UInt32.to_int min_dist
        = score'0 (shallow_model'0 s) (UIntSize.to_int min_i)}
        {[@expl:loop invariant] [%#shillel16] UIntSize.to_int min_i <= len'3 (deref'1 produced1)
        /\ UIntSize.to_int min_i < len'1 (shallow_model'0 s)}
        {[@expl:loop invariant] [%#shillel15] UInt32.to_int sum <= UInt32.to_int total}
        {[@expl:loop invariant] [%#shillel14] UInt32.to_int sum
        = sum_range'0 (shallow_model'0 s) 0 (len'3 (deref'1 produced1))}
        {[@expl:loop invariant] [%#shillel13] produces'1 (inner'2 iter_old1) (inner'3 produced1) iter1}
        {[@expl:loop invariant] [%#shillel13] inv'1 iter1}
        (! s0) [ s0 = bb17 ] 
        [ bb17 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter1}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_52 <- _ret' ]  [ &iter1 <-  ^ _52 ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> { * _52} {Borrow.get_id _52}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_51 <- _ret' ] 
                 [ &_52 <- { _52 with current = ( ^ _51) ; } ] 
                s2)
          | s2 = next'1 {_51} (fun (_ret':Option'0.t_option usize) ->  [ &_50 <- _ret' ] s3)
          | s3 = bb18 ]
          
        | bb18 = s0
          [ s0 = -{resolve'1 _52}- s1
          | s1 = any
            [ br0 -> {_50 = Option'0.C_None } (! bb21) | br1 (a:usize)-> {_50 = Option'0.C_Some a} (! bb20) ]
             ]
          
        | bb20 = bb22
        | bb22 = s0
          [ s0 = Option'0.some <usize> {_50} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
          | s1 = 
            [ &_55 <- [%#shillel18] new'3 (concat'1 (inner'3 produced1) (singleton'1 __creusot_proc_iter_elem1)) ]
            
            s2
          | s2 = bb23 ]
          
        | bb23 = s0
          [ s0 =  [ &produced1 <- _55 ] 
            (any [ any_ (_any:Snapshot'0.t_snapshot (Seq'0.t_seq usize))-> (!  [ &_55 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem1 ] s2
          | s2 = UInt32.sub {total} {sum} (fun (_ret':uint32) ->  [ &_60 <- _ret' ] s3)
          | s3 = abs_diff'0 {sum} {_60} (fun (_ret':uint32) ->  [ &dist <- _ret' ] s4)
          | s4 = bb24 ]
          
        | bb24 = s0
          [ s0 = UInt32.lt {dist} {min_dist} (fun (_ret':bool) ->  [ &_64 <- _ret' ] s1)
          | s1 = any [ br0 -> {_64 = false} (! bb26) | br1 -> {_64} (! bb25) ]  ]
          
        | bb25 = s0 [ s0 =  [ &min_i <- i ] s1 | s1 =  [ &min_dist <- dist ] s2 | s2 = bb27 ] 
        | bb26 = bb27
        | bb27 = s0
          [ s0 =  [ &_70 <- i ] s1
          | s1 =  [ &_71 <- Slice.length s ] s2
          | s2 = UIntSize.lt {_70} {_71} (fun (_ret':bool) ->  [ &_72 <- _ret' ] s3)
          | s3 = {[@expl:index in bounds] [%#shillel19] _72} s4
          | s4 = bb28 ]
          
        | bb28 = s0
          [ s0 = Slice.get <uint32> {s} {_70}
              (fun (r'0:uint32) -> UInt32.add {sum} {r'0} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s1))
          | s1 = bb16 ]
           ]
         ]
      
    | bb19 = {[%#shillel13] false} any
    | bb21 = s0 [ s0 =  [ &_0 <- min_i ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & s : slice uint32 = s
    | & total : uint32 = any_l ()
    | & iter : Iter'0.t_iter uint32 = any_l ()
    | & iter_old : Snapshot'0.t_snapshot (Iter'0.t_iter uint32) = any_l ()
    | & produced : Snapshot'0.t_snapshot (Seq'0.t_seq uint32) = any_l ()
    | & _19 : Option'0.t_option uint32 = any_l ()
    | & _20 : borrowed (Iter'0.t_iter uint32) = any_l ()
    | & _21 : borrowed (Iter'0.t_iter uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _24 : Snapshot'0.t_snapshot (Seq'0.t_seq uint32) = any_l ()
    | & x : uint32 = any_l ()
    | & min_i : usize = any_l ()
    | & min_dist : uint32 = any_l ()
    | & sum : uint32 = any_l ()
    | & iter1 : Range'0.t_range usize = any_l ()
    | & _36 : Range'0.t_range usize = any_l ()
    | & _37 : usize = any_l ()
    | & iter_old1 : Snapshot'0.t_snapshot (Range'0.t_range usize) = any_l ()
    | & produced1 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & _50 : Option'0.t_option usize = any_l ()
    | & _51 : borrowed (Range'0.t_range usize) = any_l ()
    | & _52 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _55 : Snapshot'0.t_snapshot (Seq'0.t_seq usize) = any_l ()
    | & i : usize = any_l ()
    | & dist : uint32 = any_l ()
    | & _60 : uint32 = any_l ()
    | & _64 : bool = any_l ()
    | & _70 : usize = any_l ()
    | & _71 : usize = any_l ()
    | & _72 : bool = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#shillel23] forall i : int . 0 <= i
      /\ i < len'1 (shallow_model'0 s)
       -> score'0 (shallow_model'0 s) (UIntSize.to_int result) <= score'0 (shallow_model'0 s) i}
      {[@expl:postcondition] [%#shillel22] 0 <= UIntSize.to_int result
      /\ UIntSize.to_int result < len'1 (shallow_model'0 s)}
      (! return' {result}) ]
    
end
