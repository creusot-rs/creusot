
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Prophecy_F_Interface
  val f [@cfg:stackify] [#"../prophecy.rs" 3 0 3 10] (_1' : ()) : ()
end
module Prophecy_F
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg f [@cfg:stackify] [#"../prophecy.rs" 3 0 3 10] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : int32;
  var y_2 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    x_1 <- ([#"../prophecy.rs" 4 16 4 17] (0 : int32));
    y_2 <- borrow_mut x_1;
    x_1 <-  ^ y_2;
    y_2 <- { y_2 with current = ([#"../prophecy.rs" 9 9 9 10] (5 : int32)) };
    assume { Resolve0.resolve y_2 };
    _0 <- ();
    return _0
  }
  
end
