
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module TakeFirstMut_TakeFirstMut
  type t
  use seq.Seq
  predicate invariant7 (self : Seq.seq t)
  val invariant7 (self : Seq.seq t) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq t)
  val inv7 (_x : Seq.seq t) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq t . inv7 x = true
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant6 (self : Core_Option_Option_Type.t_option (borrowed t))
  val invariant6 (self : Core_Option_Option_Type.t_option (borrowed t)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option (borrowed t))
  val inv6 (_x : Core_Option_Option_Type.t_option (borrowed t)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option (borrowed t) . inv6 x = true
  predicate invariant5 (self : borrowed t)
  val invariant5 (self : borrowed t) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed t)
  val inv5 (_x : borrowed t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed t . inv5 x = true
  predicate invariant4 (self : t)
  val invariant4 (self : t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : t)
  val inv4 (_x : t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : t . inv4 x = true
  use prelude.Slice
  predicate invariant3 (self : borrowed (borrowed (slice t)))
  val invariant3 (self : borrowed (borrowed (slice t))) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (borrowed (slice t)))
  val inv3 (_x : borrowed (borrowed (slice t))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (borrowed (slice t)) . inv3 x = true
  predicate invariant2 (self : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t)))
  val invariant2 (self : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t)))
  val inv2 (_x : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t)) . inv2 x = true
  predicate invariant1 (self : slice t)
  val invariant1 (self : slice t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : slice t)
  val inv1 (_x : slice t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : slice t . inv1 x = true
  predicate invariant0 (self : borrowed (slice t))
  val invariant0 (self : borrowed (slice t)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (slice t))
  val inv0 (_x : borrowed (slice t)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (slice t) . inv0 x = true
  use seq.Seq
  use seq_ext.SeqExt
  use seq.Seq
  function tail0 (self : Seq.seq t) : Seq.seq t =
    [#"../../../../creusot-contracts/src/logic/seq.rs" 52 8 52 39] SeqExt.subsequence self 1 (Seq.length self)
  val tail0 (self : Seq.seq t) : Seq.seq t
    ensures { result = tail0 self }
    
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model0 (self : slice t) : Seq.seq t
  val shallow_model0 (self : slice t) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv1 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv1 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv7 (shallow_model0 self)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model0 self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model0 self) <= UIntSize.to_int max0)
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  predicate resolve3 (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed t) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed (slice t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (slice t)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (borrowed (slice t))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (borrowed (slice t))) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t)))
  val resolve0 (self : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))) : bool
    ensures { result = resolve0 self }
    
  function shallow_model1 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model0 ( * self)
  val shallow_model1 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  val split_first_mut0 (self : borrowed (slice t)) : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 267 18 275 9] match result with
      | Core_Option_Option_Type.C_Some (first, tail) ->  * first = index_logic0 ( * self) 0 /\  ^ first = index_logic0 ( ^ self) 0 /\ Seq.length (shallow_model0 ( * self)) > 0 /\ Seq.length (shallow_model0 ( ^ self)) > 0 /\ shallow_model0 ( * tail) = tail0 (shallow_model0 ( * self)) /\ shallow_model0 ( ^ tail) = tail0 (shallow_model0 ( ^ self))
      | Core_Option_Option_Type.C_None -> Seq.length (shallow_model1 self) = 0 /\  ^ self =  * self /\ shallow_model1 self = Seq.empty 
      end }
    ensures { inv2 result }
    
  predicate is_default0 (self : borrowed (slice t)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 55 20 55 65] shallow_model1 self = Seq.empty  /\ shallow_model0 ( ^ self) = Seq.empty 
  val is_default0 (self : borrowed (slice t)) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed (borrowed (slice t))) : borrowed (slice t)
    requires {inv3 dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv0 result }
    
  let rec cfg take_first_mut [#"../take_first_mut.rs" 14 0 14 74] [@cfg:stackify] [@cfg:subregion_analysis] (self_ : borrowed (borrowed (slice t))) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../take_first_mut.rs" 14 29 14 34] inv3 self_}
    ensures { [#"../take_first_mut.rs" 6 10 13 1] match result with
      | Core_Option_Option_Type.C_Some r ->  * r = index_logic0 ( *  * self_) 0 /\  ^ r = index_logic0 ( ^  * self_) 0 /\ Seq.length (shallow_model0 ( *  * self_)) > 0 /\ Seq.length (shallow_model0 ( ^  * self_)) > 0 /\ shallow_model0 ( *  ^ self_) = tail0 (shallow_model0 ( *  * self_)) /\ shallow_model0 ( ^  ^ self_) = tail0 (shallow_model0 ( ^  * self_))
      | Core_Option_Option_Type.C_None -> shallow_model0 ( *  ^ self_) = Seq.empty  /\ shallow_model0 ( ^  * self_) = Seq.empty  /\ shallow_model0 ( *  * self_) = Seq.empty  /\ shallow_model0 ( ^  ^ self_) = Seq.empty 
      end }
    ensures { [#"../take_first_mut.rs" 14 57 14 74] inv6 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self_ : borrowed (borrowed (slice t)) = self_;
  var _3 : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t));
  var _4 : borrowed (slice t);
  var _5 : borrowed (slice t);
  var _6 : borrowed (borrowed (slice t));
  var first : borrowed t;
  var rem : borrowed (slice t);
  var _11 : borrowed (slice t);
  var _12 : borrowed t;
  {
    goto BB0
  }
  BB0 {
    [#"../take_first_mut.rs" 15 20 15 25] _6 <- Borrow.borrow_final ( * self_) (Borrow.get_id self_);
    [#"../take_first_mut.rs" 15 20 15 25] self_ <- { self_ with current = ( ^ _6) ; };
    assume { inv0 ( ^ _6) };
    [#"../take_first_mut.rs" 15 10 15 26] _5 <- ([#"../take_first_mut.rs" 15 10 15 26] take0 _6);
    _6 <- any borrowed (borrowed (slice t));
    goto BB1
  }
  BB1 {
    [#"../take_first_mut.rs" 15 10 15 26] _4 <- Borrow.borrow_final ( * _5) (Borrow.get_id _5);
    [#"../take_first_mut.rs" 15 10 15 26] _5 <- { _5 with current = ( ^ _4) ; };
    assume { inv1 ( ^ _4) };
    [#"../take_first_mut.rs" 15 10 15 44] _3 <- ([#"../take_first_mut.rs" 15 10 15 44] split_first_mut0 _4);
    _4 <- any borrowed (slice t);
    goto BB2
  }
  BB2 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB3
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB3 {
    goto BB6
  }
  BB4 {
    [#"../take_first_mut.rs" 17 14 17 19] first <- (let (a, _) = Core_Option_Option_Type.some_0 _3 in a);
    _3 <- (let Core_Option_Option_Type.C_Some x0 = _3 in Core_Option_Option_Type.C_Some (let (x0, x1) = Core_Option_Option_Type.some_0 _3 in (any borrowed t, x1)));
    [#"../take_first_mut.rs" 17 21 17 24] rem <- (let (_, a) = Core_Option_Option_Type.some_0 _3 in a);
    _3 <- (let Core_Option_Option_Type.C_Some x0 = _3 in Core_Option_Option_Type.C_Some (let (x0, x1) = Core_Option_Option_Type.some_0 _3 in (x0, any borrowed (slice t))));
    assert { [@expl:type invariant] inv2 _3 };
    assume { resolve0 _3 };
    [#"../take_first_mut.rs" 18 21 18 24] _11 <- Borrow.borrow_final ( * rem) (Borrow.get_id rem);
    [#"../take_first_mut.rs" 18 21 18 24] rem <- { rem with current = ( ^ _11) ; };
    assume { inv1 ( ^ _11) };
    [#"../take_first_mut.rs" 18 12 18 24] self_ <- { self_ with current = _11 ; };
    _11 <- any borrowed (slice t);
    assert { [@expl:type invariant] inv0 ( * self_) };
    assume { resolve2 ( * self_) };
    assert { [@expl:type invariant] inv3 self_ };
    assume { resolve1 self_ };
    [#"../take_first_mut.rs" 19 17 19 22] _12 <- Borrow.borrow_final ( * first) (Borrow.get_id first);
    [#"../take_first_mut.rs" 19 17 19 22] first <- { first with current = ( ^ _12) ; };
    assume { inv4 ( ^ _12) };
    [#"../take_first_mut.rs" 19 12 19 23] _0 <- Core_Option_Option_Type.C_Some _12;
    _12 <- any borrowed t;
    assert { [@expl:type invariant] inv0 rem };
    assume { resolve2 rem };
    assert { [@expl:type invariant] inv5 first };
    assume { resolve3 first };
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve2 _5 };
    goto BB7
  }
  BB5 {
    assert { [@expl:type invariant] inv3 self_ };
    assume { resolve1 self_ };
    assert { [@expl:type invariant] inv2 _3 };
    assume { resolve0 _3 };
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve2 _5 };
    assert { [#"../take_first_mut.rs" 15 10 15 44] false };
    absurd
  }
  BB6 {
    assert { [@expl:type invariant] inv2 _3 };
    assume { resolve0 _3 };
    assert { [@expl:type invariant] inv3 self_ };
    assume { resolve1 self_ };
    [#"../take_first_mut.rs" 16 23 16 27] _0 <- Core_Option_Option_Type.C_None;
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve2 _5 };
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
