
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Stub
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    SeqExt.subsequence self 1 (Seq.length self)
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures { IsDefault0.is_default ( ^ dest) }
    
end
module Core_Mem_Take
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_Default_IsDefault_Interface as IsDefault0 with
    type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures { IsDefault0.is_default ( ^ dest) }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Core_Slice_Impl0_SplitFirstMut_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  val split_first_mut [@cfg:stackify] (self : borrowed (seq t)) : Core_Option_Option_Type.t_option (borrowed t, borrowed (seq t))
    ensures { result = Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model self) = 0 /\  ^ self =  * self /\ ShallowModel0.shallow_model self = Seq.empty  }
    ensures { forall tail : borrowed (seq t) . forall first : borrowed t . result = Core_Option_Option_Type.C_Some (first, tail) /\  * first = Seq.get (ShallowModel0.shallow_model self) 0 /\  ^ first = Seq.get (ShallowModel1.shallow_model ( ^ self)) 0 /\ Seq.length (ShallowModel0.shallow_model self) > 0 /\ Seq.length (ShallowModel1.shallow_model ( ^ self)) > 0 /\ ShallowModel0.shallow_model tail = Tail0.tail (ShallowModel0.shallow_model self) /\ ShallowModel1.shallow_model ( ^ tail) = Tail0.tail (ShallowModel1.shallow_model ( ^ self)) }
    
end
module Core_Slice_Impl0_SplitFirstMut
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Interface as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  val split_first_mut [@cfg:stackify] (self : borrowed (seq t)) : Core_Option_Option_Type.t_option (borrowed t, borrowed (seq t))
    ensures { result = Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model self) = 0 /\  ^ self =  * self /\ ShallowModel0.shallow_model self = Seq.empty  }
    ensures { forall tail : borrowed (seq t) . forall first : borrowed t . result = Core_Option_Option_Type.C_Some (first, tail) /\  * first = Seq.get (ShallowModel0.shallow_model self) 0 /\  ^ first = Seq.get (ShallowModel1.shallow_model ( ^ self)) 0 /\ Seq.length (ShallowModel0.shallow_model self) > 0 /\ Seq.length (ShallowModel1.shallow_model ( ^ self)) > 0 /\ ShallowModel0.shallow_model tail = Tail0.tail (ShallowModel0.shallow_model self) /\ ShallowModel1.shallow_model ( ^ tail) = Tail0.tail (ShallowModel1.shallow_model ( ^ self)) }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  predicate is_default (self : borrowed (seq t))
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  predicate is_default (self : borrowed (seq t))
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  predicate is_default (self : borrowed (seq t)) =
    ShallowModel0.shallow_model self = Seq.empty  /\ ShallowModel1.shallow_model ( ^ self) = Seq.empty 
  val is_default (self : borrowed (seq t)) : bool
    ensures { result = is_default self }
    
end
module TakeFirstMut_TakeFirstMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val take_first_mut [@cfg:stackify] [#"../take_first_mut.rs" 16 0 16 74] (self_ : borrowed (borrowed (seq t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../take_first_mut.rs" 6 10 15 1] match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = Seq.get (ShallowModel0.shallow_model ( *  * self_)) 0 /\  ^ r = Seq.get (ShallowModel0.shallow_model ( ^  * self_)) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self_)) > 0 /\ ShallowModel0.shallow_model ( *  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( *  * self_)) /\ ShallowModel0.shallow_model ( ^  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( ^  * self_))
      | Core_Option_Option_Type.C_None ->  ^ self_ =  * self_ /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) = 0
      end }
    
end
module TakeFirstMut_TakeFirstMut
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl2_IsDefault as IsDefault0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Core_Option_Option_Type.t_option (borrowed t, borrowed (seq t))
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = borrowed (seq t)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = seq t
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with
    type t = t
  clone Core_Slice_Impl0_SplitFirstMut_Interface as SplitFirstMut0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function Tail0.tail = Tail0.tail,
    val Max0.mAX' = Max0.mAX'
  clone Core_Mem_Take_Interface as Take0 with
    type t = borrowed (seq t),
    predicate IsDefault0.is_default = IsDefault0.is_default
  let rec cfg take_first_mut [@cfg:stackify] [#"../take_first_mut.rs" 16 0 16 74] (self_ : borrowed (borrowed (seq t))) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../take_first_mut.rs" 6 10 15 1] match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = Seq.get (ShallowModel0.shallow_model ( *  * self_)) 0 /\  ^ r = Seq.get (ShallowModel0.shallow_model ( ^  * self_)) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self_)) > 0 /\ ShallowModel0.shallow_model ( *  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( *  * self_)) /\ ShallowModel0.shallow_model ( ^  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( ^  * self_))
      | Core_Option_Option_Type.C_None ->  ^ self_ =  * self_ /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) = 0
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self__1 : borrowed (borrowed (seq t));
  var _3 : Core_Option_Option_Type.t_option (borrowed t, borrowed (seq t));
  var _4 : borrowed (seq t);
  var _5 : borrowed (seq t);
  var _6 : borrowed (borrowed (seq t));
  var _7 : isize;
  var _8 : ();
  var first_9 : borrowed t;
  var rem_10 : borrowed (seq t);
  var _11 : borrowed (seq t);
  var _12 : borrowed t;
  {
    self__1 <- self_;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut ( * self__1);
    self__1 <- { self__1 with current = ( ^ _6) };
    _5 <- ([#"../take_first_mut.rs" 17 10 17 26] Take0.take _6);
    goto BB1
  }
  BB1 {
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _3 <- ([#"../take_first_mut.rs" 17 10 17 44] SplitFirstMut0.split_first_mut _4);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB5
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve3.resolve first_9 };
    first_9 <- (let (a, _) = Core_Option_Option_Type.some_0 _3 in a);
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (let (a, b) = Core_Option_Option_Type.some_0 _3 in (any borrowed t, b)));
    assume { Resolve0.resolve rem_10 };
    rem_10 <- (let (_, a) = Core_Option_Option_Type.some_0 _3 in a);
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (let (a, b) = Core_Option_Option_Type.some_0 _3 in (a, any borrowed (seq t))));
    assume { Resolve2.resolve _3 };
    _11 <- borrow_mut ( * rem_10);
    rem_10 <- { rem_10 with current = ( ^ _11) };
    assume { Resolve0.resolve rem_10 };
    assume { Resolve0.resolve ( * self__1) };
    self__1 <- { self__1 with current = _11 };
    _11 <- any borrowed (seq t);
    assume { Resolve1.resolve self__1 };
    _12 <- borrow_mut ( * first_9);
    first_9 <- { first_9 with current = ( ^ _12) };
    _0 <- Core_Option_Option_Type.C_Some _12;
    assume { Resolve3.resolve first_9 };
    goto BB6
  }
  BB4 {
    assume { Resolve1.resolve self__1 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve self__1 };
    assume { Resolve2.resolve _3 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
