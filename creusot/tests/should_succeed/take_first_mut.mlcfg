
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Stub
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t
  use seq.Seq
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    [#"../../../../creusot-contracts/src/logic/seq.rs" 52 8 52 39] SeqExt.subsequence self 1 (Seq.length self)
  val tail (self : Seq.seq t) : Seq.seq t
    ensures { result = tail self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  val take (dest : borrowed t) : t
    requires {Inv0.inv dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] IsDefault0.is_default ( ^ dest) }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Slice_Impl0_SplitFirstMut_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  val split_first_mut (self : borrowed (slice t)) : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))
    requires {Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 260 18 268 9] match (result) with
      | Core_Option_Option_Type.C_Some (first, tail) ->  * first = IndexLogic0.index_logic ( * self) 0 /\  ^ first = IndexLogic0.index_logic ( ^ self) 0 /\ Seq.length (ShallowModel0.shallow_model ( * self)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^ self)) > 0 /\ ShallowModel0.shallow_model ( * tail) = Tail0.tail (ShallowModel0.shallow_model ( * self)) /\ ShallowModel0.shallow_model ( ^ tail) = Tail0.tail (ShallowModel0.shallow_model ( ^ self))
      | Core_Option_Option_Type.C_None -> Seq.length (ShallowModel1.shallow_model self) = 0 /\  ^ self =  * self /\ ShallowModel1.shallow_model self = Seq.empty 
      end }
    ensures { Inv1.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate is_default (self : borrowed (slice t))
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate is_default (self : borrowed (slice t))
  val is_default (self : borrowed (slice t)) : bool
    ensures { result = is_default self }
    
end
module CreusotContracts_Std1_Slice_Impl2_IsDefault
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate is_default (self : borrowed (slice t)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 48 20 48 65] ShallowModel0.shallow_model self = Seq.empty  /\ ShallowModel1.shallow_model ( ^ self) = Seq.empty 
  val is_default (self : borrowed (slice t)) : bool
    ensures { result = is_default self }
    
end
module TakeFirstMut_TakeFirstMut_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (borrowed t)
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Stub as Tail0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (borrowed (slice t))
  val take_first_mut [#"../take_first_mut.rs" 14 0 14 74] (self_ : borrowed (borrowed (slice t))) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../take_first_mut.rs" 14 29 14 34] Inv0.inv self_}
    ensures { [#"../take_first_mut.rs" 6 10 13 1] match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = IndexLogic0.index_logic ( *  * self_) 0 /\  ^ r = IndexLogic0.index_logic ( ^  * self_) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self_)) > 0 /\ ShallowModel0.shallow_model ( *  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( *  * self_)) /\ ShallowModel0.shallow_model ( ^  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( ^  * self_))
      | Core_Option_Option_Type.C_None ->  ^ self_ =  * self_ /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) = 0
      end }
    ensures { [#"../take_first_mut.rs" 14 57 14 74] Inv1.inv result }
    
end
module TakeFirstMut_TakeFirstMut
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq t
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq t,
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Core_Option_Option_Type.t_option (borrowed t)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Core_Option_Option_Type.t_option (borrowed t),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed t
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed t,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = t,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (borrowed (slice t))
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (borrowed (slice t)),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t)),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = slice t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = slice t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (slice t)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed (slice t),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with
    type t = t
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = borrowed (slice t)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t))
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Core_Slice_Impl0_SplitFirstMut_Interface as SplitFirstMut0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function Tail0.tail = Tail0.tail,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Std1_Slice_Impl2_IsDefault as IsDefault0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Core_Mem_Take_Interface as Take0 with
    type t = borrowed (slice t),
    predicate Inv0.inv = Inv3.inv,
    predicate IsDefault0.is_default = IsDefault0.is_default,
    predicate Inv1.inv = Inv0.inv
  let rec cfg take_first_mut [#"../take_first_mut.rs" 14 0 14 74] [@cfg:stackify] [@cfg:subregion_analysis] (self_ : borrowed (borrowed (slice t))) : Core_Option_Option_Type.t_option (borrowed t)
    requires {[#"../take_first_mut.rs" 14 29 14 34] Inv3.inv self_}
    ensures { [#"../take_first_mut.rs" 6 10 13 1] match (result) with
      | Core_Option_Option_Type.C_Some r ->  * r = IndexLogic0.index_logic ( *  * self_) 0 /\  ^ r = IndexLogic0.index_logic ( ^  * self_) 0 /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) > 0 /\ Seq.length (ShallowModel0.shallow_model ( ^  * self_)) > 0 /\ ShallowModel0.shallow_model ( *  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( *  * self_)) /\ ShallowModel0.shallow_model ( ^  ^ self_) = Tail0.tail (ShallowModel0.shallow_model ( ^  * self_))
      | Core_Option_Option_Type.C_None ->  ^ self_ =  * self_ /\ Seq.length (ShallowModel0.shallow_model ( *  * self_)) = 0
      end }
    ensures { [#"../take_first_mut.rs" 14 57 14 74] Inv6.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed t);
  var self_ : borrowed (borrowed (slice t)) = self_;
  var _3 : Core_Option_Option_Type.t_option (borrowed t, borrowed (slice t));
  var _4 : borrowed (slice t);
  var _5 : borrowed (slice t);
  var _6 : borrowed (borrowed (slice t));
  var first : borrowed t;
  var rem : borrowed (slice t);
  var _11 : borrowed (slice t);
  var _12 : borrowed t;
  {
    goto BB0
  }
  BB0 {
    _6 <- Borrow.borrow_mut ( * self_);
    self_ <- { self_ with current = ( ^ _6) };
    assume { Inv0.inv ( ^ _6) };
    _5 <- ([#"../take_first_mut.rs" 15 10 15 26] Take0.take _6);
    _6 <- any borrowed (borrowed (slice t));
    goto BB1
  }
  BB1 {
    _4 <- Borrow.borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    assume { Inv1.inv ( ^ _4) };
    _3 <- ([#"../take_first_mut.rs" 15 10 15 44] SplitFirstMut0.split_first_mut _4);
    _4 <- any borrowed (slice t);
    goto BB2
  }
  BB2 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB3
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB3 {
    goto BB6
  }
  BB4 {
    first <- (let (a, _) = Core_Option_Option_Type.some_0 _3 in a);
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (let (a, b) = Core_Option_Option_Type.some_0 _3 in (any borrowed t, b)));
    rem <- (let (_, a) = Core_Option_Option_Type.some_0 _3 in a);
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (let (a, b) = Core_Option_Option_Type.some_0 _3 in (a, any borrowed (slice t))));
    assert { [@expl:type invariant] Inv2.inv _3 };
    assume { Resolve0.resolve _3 };
    _11 <- Borrow.borrow_mut ( * rem);
    rem <- { rem with current = ( ^ _11) };
    assume { Inv1.inv ( ^ _11) };
    self_ <- { self_ with current = _11 };
    _11 <- any borrowed (slice t);
    assert { [@expl:type invariant] Inv0.inv ( * self_) };
    assume { Resolve2.resolve ( * self_) };
    assert { [@expl:type invariant] Inv3.inv self_ };
    assume { Resolve1.resolve self_ };
    _12 <- Borrow.borrow_mut ( * first);
    first <- { first with current = ( ^ _12) };
    assume { Inv4.inv ( ^ _12) };
    _0 <- ([#"../take_first_mut.rs" 19 12 19 23] Core_Option_Option_Type.C_Some _12);
    _12 <- any borrowed t;
    assert { [@expl:type invariant] Inv0.inv rem };
    assume { Resolve2.resolve rem };
    assert { [@expl:type invariant] Inv5.inv first };
    assume { Resolve3.resolve first };
    assert { [@expl:type invariant] Inv0.inv _5 };
    assume { Resolve2.resolve _5 };
    goto BB7
  }
  BB5 {
    assert { [@expl:type invariant] Inv2.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:type invariant] Inv3.inv self_ };
    assume { Resolve1.resolve self_ };
    assert { [@expl:type invariant] Inv0.inv _5 };
    assume { Resolve2.resolve _5 };
    absurd
  }
  BB6 {
    assert { [@expl:type invariant] Inv2.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { [@expl:type invariant] Inv3.inv self_ };
    assume { Resolve1.resolve self_ };
    _0 <- ([#"../take_first_mut.rs" 16 23 16 27] Core_Option_Option_Type.C_None);
    assert { [@expl:type invariant] Inv0.inv _5 };
    assume { Resolve2.resolve _5 };
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
