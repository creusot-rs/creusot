
module AllZero_List_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module AllZero_AllZero
  use AllZero_List_Type as AllZero_List_Type
  use prelude.Borrow
  use prelude.Ghost
  predicate resolve2 (self : borrowed (AllZero_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (AllZero_List_Type.t_list)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (AllZero_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (AllZero_List_Type.t_list)) : bool
    ensures { result = resolve1 self }
    
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  function get0 [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../all_zero.rs" 22 8 28 9] match self with
      | AllZero_List_Type.C_Cons x ls -> if ix = 0 then Core_Option_Option_Type.C_Some x else get0 ls (ix - 1)
      | AllZero_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  val get0 [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    ensures { result = get0 self ix }
    
  function len0 [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int =
    [#"../all_zero.rs" 14 8 17 9] match self with
      | AllZero_List_Type.C_Cons _ ls -> 1 + len0 ls
      | AllZero_List_Type.C_Nil -> 0
      end
  val len0 [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int
    ensures { result = len0 self }
    
  use prelude.Ghost
  let rec cfg all_zero [#"../all_zero.rs" 34 0 34 29] [@cfg:stackify] [@cfg:subregion_analysis] (l : borrowed (AllZero_List_Type.t_list)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : int . 0 <= i /\ i < len0 ( * l) -> get0 ( ^ l) i = Core_Option_Option_Type.C_Some (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] len0 ( * l) = len0 ( ^ l) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : borrowed (AllZero_List_Type.t_list) = l;
  var old_l : Ghost.ghost_ty (borrowed (AllZero_List_Type.t_list));
  var loop_l : borrowed (AllZero_List_Type.t_list);
  var value : borrowed uint32;
  var next : borrowed (AllZero_List_Type.t_list);
  var _13 : borrowed (AllZero_List_Type.t_list);
  {
    goto BB0
  }
  BB0 {
    [#"../all_zero.rs" 36 16 36 25] old_l <- ([#"../all_zero.rs" 36 16 36 25] Ghost.new l);
    goto BB1
  }
  BB1 {
    [#"../all_zero.rs" 37 21 37 22] loop_l <- ([#"../all_zero.rs" 37 21 37 22] l);
    [#"../all_zero.rs" 37 21 37 22] l <- any borrowed (AllZero_List_Type.t_list);
    goto BB2
  }
  BB2 {
    invariant { [#"../all_zero.rs" 39 4 41 88] (forall i : int . 0 <= i /\ i < len0 ( * loop_l) -> get0 ( ^ loop_l) i = Core_Option_Option_Type.C_Some (0 : uint32)) -> (forall i : int . 0 <= i /\ i < len0 ( * Ghost.inner old_l) -> get0 ( ^ Ghost.inner old_l) i = Core_Option_Option_Type.C_Some (0 : uint32)) };
    invariant { [#"../all_zero.rs" 39 4 41 88] len0 ( ^ loop_l) = len0 ( * loop_l) -> len0 ( ^ Ghost.inner old_l) = len0 ( * Ghost.inner old_l) };
    goto BB3
  }
  BB3 {
    switch ( * loop_l)
      | AllZero_List_Type.C_Cons _ _ -> goto BB4
      | _ -> goto BB6
      end
  }
  BB4 {
    goto BB5
  }
  BB5 {
    [#"../all_zero.rs" 43 19 43 24] value <- Borrow.borrow_mut (AllZero_List_Type.cons_0 ( * loop_l));
    [#"../all_zero.rs" 43 19 43 24] loop_l <- { loop_l with current = (let AllZero_List_Type.C_Cons x0 x1 =  * loop_l in AllZero_List_Type.C_Cons ( ^ value) x1) };
    [#"../all_zero.rs" 43 26 43 30] next <- Borrow.borrow_mut (AllZero_List_Type.cons_1 ( * loop_l));
    [#"../all_zero.rs" 43 26 43 30] loop_l <- { loop_l with current = (let AllZero_List_Type.C_Cons x0 x1 =  * loop_l in AllZero_List_Type.C_Cons x0 ( ^ next)) };
    [#"../all_zero.rs" 44 8 44 18] value <- { value with current = ([#"../all_zero.rs" 44 8 44 18] [#"../all_zero.rs" 44 17 44 18] (0 : uint32)) };
    assume { resolve0 value };
    [#"../all_zero.rs" 45 17 45 21] _13 <- Borrow.borrow_mut ( * next);
    [#"../all_zero.rs" 45 17 45 21] next <- { next with current =  ^ _13 };
    assume { resolve1 loop_l };
    [#"../all_zero.rs" 45 8 45 21] loop_l <- ([#"../all_zero.rs" 45 8 45 21] _13);
    [#"../all_zero.rs" 45 8 45 21] _13 <- any borrowed (AllZero_List_Type.t_list);
    assume { resolve2 next };
    goto BB2
  }
  BB6 {
    assume { resolve1 loop_l };
    [#"../all_zero.rs" 43 4 46 5] _0 <- ([#"../all_zero.rs" 43 4 46 5] ());
    return _0
  }
  
end
