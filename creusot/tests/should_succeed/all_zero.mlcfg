
module AllZero_List_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module AllZero_Impl0_Len_Stub
  use mach.int.Int
  use AllZero_List_Type as AllZero_List_Type
  function len [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int
end
module AllZero_Impl0_Len_Interface
  use mach.int.Int
  use AllZero_List_Type as AllZero_List_Type
  function len [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int
end
module AllZero_Impl0_Len
  use mach.int.Int
  use AllZero_List_Type as AllZero_List_Type
  function len [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int =
    [#"../all_zero.rs" 14 8 17 9] match (self) with
      | AllZero_List_Type.C_Cons _ ls -> 1 + len ls
      | AllZero_List_Type.C_Nil -> 0
      end
  val len [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int
    ensures { result = len self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module AllZero_Impl0_Get_Stub
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  use AllZero_List_Type as AllZero_List_Type
  function get [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
end
module AllZero_Impl0_Get_Interface
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  use AllZero_List_Type as AllZero_List_Type
  function get [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
end
module AllZero_Impl0_Get
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  use AllZero_List_Type as AllZero_List_Type
  function get [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../all_zero.rs" 22 8 28 9] match (self) with
      | AllZero_List_Type.C_Cons x ls -> if ix = 0 then Core_Option_Option_Type.C_Some x else get ls (ix - 1)
      | AllZero_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  val get [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    ensures { result = get self ix }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module AllZero_AllZero_Interface
  use mach.int.Int
  use prelude.Borrow
  use mach.int.UInt32
  use AllZero_List_Type as AllZero_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone AllZero_Impl0_Get_Stub as Get0
  clone AllZero_Impl0_Len_Stub as Len0
  val all_zero [@cfg:stackify] [#"../all_zero.rs" 34 0 34 29] (l : borrowed (AllZero_List_Type.t_list)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : int . 0 <= i /\ i < Len0.len ( * l) -> Get0.get ( ^ l) i = Core_Option_Option_Type.C_Some (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] Len0.len ( * l) = Len0.len ( ^ l) }
    
end
module AllZero_AllZero
  use prelude.Borrow
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use AllZero_List_Type as AllZero_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = AllZero_List_Type.t_list
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = AllZero_List_Type.t_list
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone AllZero_Impl0_Get as Get0
  clone AllZero_Impl0_Len as Len0
  let rec cfg all_zero [@cfg:stackify] [#"../all_zero.rs" 34 0 34 29] (l : borrowed (AllZero_List_Type.t_list)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : int . 0 <= i /\ i < Len0.len ( * l) -> Get0.get ( ^ l) i = Core_Option_Option_Type.C_Some (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] Len0.len ( * l) = Len0.len ( ^ l) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (AllZero_List_Type.t_list);
  var old_l_4 : Ghost.ghost_ty (borrowed (AllZero_List_Type.t_list));
  var _6 : ();
  var loop_l_7 : borrowed (AllZero_List_Type.t_list);
  var _10 : ();
  var _11 : isize;
  var value_12 : borrowed uint32;
  var next_13 : borrowed (AllZero_List_Type.t_list);
  var _14 : borrowed (AllZero_List_Type.t_list);
  var _15 : ();
  var _16 : ();
  var _17 : ();
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _6 <- ();
    old_l_4 <- ([#"../all_zero.rs" 36 16 36 28] Ghost.new l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve loop_l_7 };
    loop_l_7 <- l_1;
    l_1 <- any borrowed (AllZero_List_Type.t_list);
    goto BB2
  }
  BB2 {
    invariant zeroed { [#"../all_zero.rs" 39 4 41 88] (forall i : int . 0 <= i /\ i < Len0.len ( * loop_l_7) -> Get0.get ( ^ loop_l_7) i = Core_Option_Option_Type.C_Some (0 : uint32)) -> (forall i : int . 0 <= i /\ i < Len0.len ( * Ghost.inner old_l_4) -> Get0.get ( ^ Ghost.inner old_l_4) i = Core_Option_Option_Type.C_Some (0 : uint32)) };
    invariant in_len { [#"../all_zero.rs" 39 4 41 88] Len0.len ( ^ loop_l_7) = Len0.len ( * loop_l_7) -> Len0.len ( ^ Ghost.inner old_l_4) = Len0.len ( * Ghost.inner old_l_4) };
    switch ( * loop_l_7)
      | AllZero_List_Type.C_Cons _ _ -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    value_12 <- borrow_mut (AllZero_List_Type.cons_0 ( * loop_l_7));
    loop_l_7 <- { loop_l_7 with current = (let AllZero_List_Type.C_Cons a b =  * loop_l_7 in AllZero_List_Type.C_Cons ( ^ value_12) b) };
    next_13 <- borrow_mut (AllZero_List_Type.cons_1 ( * loop_l_7));
    loop_l_7 <- { loop_l_7 with current = (let AllZero_List_Type.C_Cons a b =  * loop_l_7 in AllZero_List_Type.C_Cons a ( ^ next_13)) };
    assume { Resolve0.resolve loop_l_7 };
    value_12 <- { value_12 with current = ([#"../all_zero.rs" 44 17 44 18] (0 : uint32)) };
    assume { Resolve1.resolve value_12 };
    _14 <- borrow_mut ( * next_13);
    next_13 <- { next_13 with current = ( ^ _14) };
    assume { Resolve2.resolve next_13 };
    assume { Resolve0.resolve loop_l_7 };
    loop_l_7 <- _14;
    _14 <- any borrowed (AllZero_List_Type.t_list);
    _10 <- ();
    goto BB2
  }
  BB4 {
    assume { Resolve0.resolve loop_l_7 };
    _0 <- ();
    return _0
  }
  
end
