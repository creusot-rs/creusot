
module ListIndexMut_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module ListIndexMut_List_Type
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  type t_list  =
    | C_List uint32 (ListIndexMut_Option_Type.t_option (t_list))
    
  let function list_1 (self : t_list) : ListIndexMut_Option_Type.t_option (t_list) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_List _ a -> a
      end
  let function list_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_List a _ -> a
      end
end
module ListIndexMut_Len_Stub
  use mach.int.Int
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  function len [#"../list_index_mut.rs" 14 0 14 22] (l : ListIndexMut_List_Type.t_list) : int
end
module ListIndexMut_Len_Interface
  use mach.int.Int
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  function len [#"../list_index_mut.rs" 14 0 14 22] (l : ListIndexMut_List_Type.t_list) : int
end
module ListIndexMut_Len
  use mach.int.Int
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  function len [#"../list_index_mut.rs" 14 0 14 22] (l : ListIndexMut_List_Type.t_list) : int =
    [#"../list_index_mut.rs" 13 0 13 8] let ListIndexMut_List_Type.C_List _ ls = l in 1 + match (ls) with
      | ListIndexMut_Option_Type.C_Some ls -> len ls
      | ListIndexMut_Option_Type.C_None -> 0
      end
  val len [#"../list_index_mut.rs" 14 0 14 22] (l : ListIndexMut_List_Type.t_list) : int
    ensures { result = len l }
    
end
module ListIndexMut_Get_Stub
  use mach.int.Int
  use mach.int.UInt32
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  function get [#"../list_index_mut.rs" 25 0 25 39] (l : ListIndexMut_List_Type.t_list) (ix : int) : ListIndexMut_Option_Type.t_option uint32
    
end
module ListIndexMut_Get_Interface
  use mach.int.Int
  use mach.int.UInt32
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  function get [#"../list_index_mut.rs" 25 0 25 39] (l : ListIndexMut_List_Type.t_list) (ix : int) : ListIndexMut_Option_Type.t_option uint32
    
end
module ListIndexMut_Get
  use mach.int.Int
  use mach.int.UInt32
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  function get [#"../list_index_mut.rs" 25 0 25 39] (l : ListIndexMut_List_Type.t_list) (ix : int) : ListIndexMut_Option_Type.t_option uint32
    
   =
    [#"../list_index_mut.rs" 24 0 24 8] let ListIndexMut_List_Type.C_List i ls = l in if ix > 0 then
      match (ls) with
        | ListIndexMut_Option_Type.C_Some ls -> get ls (ix - 1)
        | ListIndexMut_Option_Type.C_None -> ListIndexMut_Option_Type.C_None
        end
    else
      ListIndexMut_Option_Type.C_Some i
    
  val get [#"../list_index_mut.rs" 25 0 25 39] (l : ListIndexMut_List_Type.t_list) (ix : int) : ListIndexMut_Option_Type.t_option uint32
    ensures { result = get l ix }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module ListIndexMut_IndexMut_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt32
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  clone ListIndexMut_Get_Stub as Get0
  clone ListIndexMut_Len_Stub as Len0
  val index_mut [@cfg:stackify] [#"../list_index_mut.rs" 43 0 43 65] (param_l : borrowed (ListIndexMut_List_Type.t_list)) (param_ix : usize) : borrowed uint32
    requires {[#"../list_index_mut.rs" 38 11 38 36] UInt64.to_int param_ix < Len0.len ( * param_l)}
    ensures { [#"../list_index_mut.rs" 39 10 39 51] ListIndexMut_Option_Type.C_Some ( * result) = Get0.get ( * param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 40 10 40 51] ListIndexMut_Option_Type.C_Some ( ^ result) = Get0.get ( ^ param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 41 10 41 40] Len0.len ( ^ param_l) = Len0.len ( * param_l) }
    ensures { [#"../list_index_mut.rs" 42 0 42 114] forall i : int . 0 <= i /\ i < Len0.len ( * param_l) /\ i <> UInt64.to_int param_ix -> Get0.get ( * param_l) i = Get0.get ( ^ param_l) i }
    
end
module ListIndexMut_IndexMut
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  use prelude.Ghost
  use prelude.IntSize
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = ListIndexMut_List_Type.t_list
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = ListIndexMut_List_Type.t_list
  clone ListIndexMut_Get as Get0
  clone ListIndexMut_Len as Len0
  let rec cfg index_mut [@cfg:stackify] [#"../list_index_mut.rs" 43 0 43 65] (param_l : borrowed (ListIndexMut_List_Type.t_list)) (param_ix : usize) : borrowed uint32
    requires {[#"../list_index_mut.rs" 38 11 38 36] UInt64.to_int param_ix < Len0.len ( * param_l)}
    ensures { [#"../list_index_mut.rs" 39 10 39 51] ListIndexMut_Option_Type.C_Some ( * result) = Get0.get ( * param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 40 10 40 51] ListIndexMut_Option_Type.C_Some ( ^ result) = Get0.get ( ^ param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 41 10 41 40] Len0.len ( ^ param_l) = Len0.len ( * param_l) }
    ensures { [#"../list_index_mut.rs" 42 0 42 114] forall i : int . 0 <= i /\ i < Len0.len ( * param_l) /\ i <> UInt64.to_int param_ix -> Get0.get ( * param_l) i = Get0.get ( ^ param_l) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var param_l_1 : borrowed (ListIndexMut_List_Type.t_list);
  var param_ix_2 : usize;
  var _3 : borrowed uint32;
  var old_l_9 : Ghost.ghost_ty (borrowed (ListIndexMut_List_Type.t_list));
  var _11 : ();
  var l_12 : borrowed (ListIndexMut_List_Type.t_list);
  var ix_13 : usize;
  var _14 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : usize;
  var _23 : ();
  var _24 : isize;
  var n_25 : borrowed (ListIndexMut_List_Type.t_list);
  var _26 : borrowed (ListIndexMut_List_Type.t_list);
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : borrowed uint32;
  {
    param_l_1 <- param_l;
    param_ix_2 <- param_ix;
    goto BB0
  }
  BB0 {
    _11 <- ();
    old_l_9 <- ([#"../list_index_mut.rs" 44 16 44 34] Ghost.new param_l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve l_12 };
    l_12 <- param_l_1;
    param_l_1 <- any borrowed (ListIndexMut_List_Type.t_list);
    ix_13 <- param_ix_2;
    goto BB2
  }
  BB2 {
    invariant valid_ix { [#"../list_index_mut.rs" 47 26 47 56] (0 : usize) <= ix_13 /\ UInt64.to_int ix_13 < Len0.len ( * l_12) };
    invariant get_target_now { [#"../list_index_mut.rs" 48 32 48 71] Get0.get ( * l_12) (UInt64.to_int ix_13) = Get0.get ( * Ghost.inner old_l_9) (UInt64.to_int param_ix_2) };
    invariant get_target_fin { [#"../list_index_mut.rs" 49 32 49 71] Get0.get ( ^ l_12) (UInt64.to_int ix_13) = Get0.get ( ^ Ghost.inner old_l_9) (UInt64.to_int param_ix_2) };
    invariant len { [#"../list_index_mut.rs" 47 4 47 58] Len0.len ( ^ l_12) = Len0.len ( * l_12) -> Len0.len ( ^ Ghost.inner old_l_9) = Len0.len ( * Ghost.inner old_l_9) };
    invariant untouched { [#"../list_index_mut.rs" 47 4 47 58] (forall i : int . 0 <= i /\ i < Len0.len ( * l_12) /\ i <> UInt64.to_int ix_13 -> Get0.get ( ^ l_12) i = Get0.get ( * l_12) i) -> (forall i : int . 0 <= i /\ i < Len0.len ( * Ghost.inner old_l_9) /\ i <> UInt64.to_int param_ix_2 -> Get0.get ( ^ Ghost.inner old_l_9) i = Get0.get ( * Ghost.inner old_l_9) i) };
    _22 <- ix_13;
    _21 <- ([#"../list_index_mut.rs" 56 10 56 16] _22 > ([#"../list_index_mut.rs" 56 15 56 16] (0 : usize)));
    switch (_21)
      | False -> goto BB7
      | True -> goto BB3
      end
  }
  BB3 {
    switch (ListIndexMut_List_Type.list_1 ( * l_12))
      | ListIndexMut_Option_Type.C_None -> goto BB4
      | ListIndexMut_Option_Type.C_Some _ -> goto BB6
      end
  }
  BB4 {
    assume { Resolve0.resolve l_12 };
    absurd
  }
  BB5 {
    assume { Resolve0.resolve l_12 };
    absurd
  }
  BB6 {
    n_25 <- borrow_mut (ListIndexMut_Option_Type.some_0 (ListIndexMut_List_Type.list_1 ( * l_12)));
    l_12 <- { l_12 with current = (let ListIndexMut_List_Type.C_List a b =  * l_12 in ListIndexMut_List_Type.C_List a (let ListIndexMut_Option_Type.C_Some a = ListIndexMut_List_Type.list_1 ( * l_12) in ListIndexMut_Option_Type.C_Some ( ^ n_25))) };
    assume { Resolve0.resolve l_12 };
    _26 <- borrow_mut ( * n_25);
    n_25 <- { n_25 with current = ( ^ _26) };
    assume { Resolve1.resolve n_25 };
    assume { Resolve0.resolve l_12 };
    l_12 <- _26;
    _26 <- any borrowed (ListIndexMut_List_Type.t_list);
    _23 <- ();
    ix_13 <- ([#"../list_index_mut.rs" 63 8 63 15] ix_13 - ([#"../list_index_mut.rs" 63 14 63 15] (1 : usize)));
    _20 <- ();
    goto BB2
  }
  BB7 {
    _14 <- ();
    _31 <- borrow_mut (ListIndexMut_List_Type.list_0 ( * l_12));
    l_12 <- { l_12 with current = (let ListIndexMut_List_Type.C_List a b =  * l_12 in ListIndexMut_List_Type.C_List ( ^ _31) b) };
    assume { Resolve0.resolve l_12 };
    _3 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _3) };
    assume { Resolve2.resolve _31 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve2.resolve _3 };
    return _0
  }
  
end
module ListIndexMut_Write_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt32
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  clone ListIndexMut_Get_Stub as Get0
  clone ListIndexMut_Len_Stub as Len0
  val write [@cfg:stackify] [#"../list_index_mut.rs" 74 0 74 45] (l : borrowed (ListIndexMut_List_Type.t_list)) (ix : usize) (v : uint32) : ()
    requires {[#"../list_index_mut.rs" 70 11 70 24] UInt64.to_int ix < Len0.len ( * l)}
    ensures { [#"../list_index_mut.rs" 71 10 71 33] ListIndexMut_Option_Type.C_Some v = Get0.get ( ^ l) (UInt64.to_int ix) }
    ensures { [#"../list_index_mut.rs" 72 10 72 28] Len0.len ( ^ l) = Len0.len ( * l) }
    ensures { [#"../list_index_mut.rs" 73 0 73 88] forall i : int . 0 <= i /\ i < Len0.len ( * l) /\ i <> UInt64.to_int ix -> Get0.get ( * l) i = Get0.get ( ^ l) i }
    
end
module ListIndexMut_Write
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt32
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = ListIndexMut_List_Type.t_list
  clone ListIndexMut_Get as Get0
  clone ListIndexMut_Len as Len0
  clone ListIndexMut_IndexMut_Interface as IndexMut0 with
    function Len0.len = Len0.len,
    function Get0.get = Get0.get
  let rec cfg write [@cfg:stackify] [#"../list_index_mut.rs" 74 0 74 45] (l : borrowed (ListIndexMut_List_Type.t_list)) (ix : usize) (v : uint32) : ()
    requires {[#"../list_index_mut.rs" 70 11 70 24] UInt64.to_int ix < Len0.len ( * l)}
    ensures { [#"../list_index_mut.rs" 71 10 71 33] ListIndexMut_Option_Type.C_Some v = Get0.get ( ^ l) (UInt64.to_int ix) }
    ensures { [#"../list_index_mut.rs" 72 10 72 28] Len0.len ( ^ l) = Len0.len ( * l) }
    ensures { [#"../list_index_mut.rs" 73 0 73 88] forall i : int . 0 <= i /\ i < Len0.len ( * l) /\ i <> UInt64.to_int ix -> Get0.get ( * l) i = Get0.get ( ^ l) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (ListIndexMut_List_Type.t_list);
  var ix_2 : usize;
  var v_3 : uint32;
  var _8 : uint32;
  var _9 : borrowed uint32;
  var _10 : borrowed (ListIndexMut_List_Type.t_list);
  var _11 : usize;
  {
    l_1 <- l;
    ix_2 <- ix;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    _8 <- v_3;
    _10 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _10) };
    _11 <- ix_2;
    _9 <- ([#"../list_index_mut.rs" 75 5 75 21] IndexMut0.index_mut _10 _11);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve l_1 };
    _9 <- { _9 with current = _8 };
    _8 <- any uint32;
    assume { Resolve1.resolve _9 };
    _0 <- ();
    return _0
  }
  
end
module ListIndexMut_F_Interface
  val f [@cfg:stackify] [#"../list_index_mut.rs" 78 0 78 10] (_1' : ()) : ()
end
module ListIndexMut_F
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use ListIndexMut_Option_Type as ListIndexMut_Option_Type
  clone ListIndexMut_Get as Get0
  clone ListIndexMut_Len as Len0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = ListIndexMut_List_Type.t_list
  clone ListIndexMut_Write_Interface as Write0 with
    function Len0.len = Len0.len,
    function Get0.get = Get0.get
  let rec cfg f [@cfg:stackify] [#"../list_index_mut.rs" 78 0 78 10] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : ListIndexMut_List_Type.t_list;
  var _2 : ListIndexMut_Option_Type.t_option (ListIndexMut_List_Type.t_list);
  var _3 : ListIndexMut_List_Type.t_list;
  var _4 : ListIndexMut_List_Type.t_list;
  var _5 : ListIndexMut_Option_Type.t_option (ListIndexMut_List_Type.t_list);
  var _6 : ();
  var _7 : borrowed (ListIndexMut_List_Type.t_list);
  var _8 : borrowed (ListIndexMut_List_Type.t_list);
  {
    goto BB0
  }
  BB0 {
    _5 <- ListIndexMut_Option_Type.C_None;
    _4 <- ListIndexMut_List_Type.C_List ([#"../list_index_mut.rs" 79 43 79 45] (10 : uint32)) _5;
    goto BB1
  }
  BB1 {
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- ListIndexMut_Option_Type.C_Some _3;
    goto BB3
  }
  BB3 {
    l_1 <- ListIndexMut_List_Type.C_List ([#"../list_index_mut.rs" 79 21 79 22] (1 : uint32)) _2;
    goto BB4
  }
  BB4 {
    _8 <- borrow_mut l_1;
    l_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _6 <- ([#"../list_index_mut.rs" 80 4 80 23] Write0.write _7 ([#"../list_index_mut.rs" 80 18 80 19] (0 : usize)) ([#"../list_index_mut.rs" 80 21 80 22] (2 : uint32)));
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _8 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
