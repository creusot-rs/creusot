
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module ListIndexMut_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_List uint32 (Core_Option_Option_Type.t_option (t_list))
    
  let function list_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_List a _ -> a
      end
  let function list_1 (self : t_list) : Core_Option_Option_Type.t_option (t_list) = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_List _ a -> a
      end
end
module ListIndexMut_IndexMut
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list)))
  val inv2 (_x : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list)) . inv2 x = true
  predicate invariant1 (self : borrowed (ListIndexMut_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (ListIndexMut_List_Type.t_list)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (ListIndexMut_List_Type.t_list))
  val inv1 (_x : borrowed (ListIndexMut_List_Type.t_list)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (ListIndexMut_List_Type.t_list) . inv1 x = true
  predicate invariant0 (self : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list)))
  val inv0 (_x : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list)) . inv0 x = true
  use prelude.UInt32
  use prelude.UIntSize
  use prelude.Ghost
  predicate resolve2 (self : borrowed (ListIndexMut_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (ListIndexMut_List_Type.t_list)) : bool
    ensures { result = resolve2 self }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list))) : borrowed (ListIndexMut_List_Type.t_list)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv1 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list))) : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list))
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (ListIndexMut_List_Type.t_list) . inv1 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv2 result }
    
  predicate resolve1 (self : borrowed (ListIndexMut_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (ListIndexMut_List_Type.t_list)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.UIntSize
  use prelude.Int
  function shallow_model2 (self : usize) : int =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] UIntSize.to_int self
  val shallow_model2 (self : usize) : int
    ensures { result = shallow_model2 self }
    
  use prelude.Ghost
  function shallow_model1 (self : Ghost.ghost_ty usize) : int =
    [#"../../../../creusot-contracts/src/ghost.rs" 27 20 27 48] shallow_model2 (Ghost.inner self)
  val shallow_model1 (self : Ghost.ghost_ty usize) : int
    ensures { result = shallow_model1 self }
    
  use prelude.Ghost
  use prelude.Int
  function get0 [#"../list_index_mut.rs" 18 4 18 46] (self : ListIndexMut_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../list_index_mut.rs" 17 4 17 12] let ListIndexMut_List_Type.C_List i ls = self in if ix > 0 then
      match ls with
        | Core_Option_Option_Type.C_Some ls -> get0 ls (ix - 1)
        | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
        end
    else
      Core_Option_Option_Type.C_Some i
    
  val get0 [#"../list_index_mut.rs" 18 4 18 46] (self : ListIndexMut_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    ensures { result = get0 self ix }
    
  function len0 [#"../list_index_mut.rs" 7 4 7 29] (self : ListIndexMut_List_Type.t_list) : int =
    [#"../list_index_mut.rs" 6 4 6 12] let ListIndexMut_List_Type.C_List _ ls = self in 1 + match ls with
      | Core_Option_Option_Type.C_Some ls -> len0 ls
      | Core_Option_Option_Type.C_None -> 0
      end
  val len0 [#"../list_index_mut.rs" 7 4 7 29] (self : ListIndexMut_List_Type.t_list) : int
    ensures { result = len0 self }
    
  use prelude.Ghost
  use prelude.Ghost
  let rec cfg index_mut [#"../list_index_mut.rs" 37 0 37 61] [@cfg:stackify] [@cfg:subregion_analysis] (l : borrowed (ListIndexMut_List_Type.t_list)) (ix : usize) : borrowed uint32
    requires {[#"../list_index_mut.rs" 32 11 32 24] UIntSize.to_int ix < len0 ( * l)}
    ensures { [#"../list_index_mut.rs" 33 10 33 37] Core_Option_Option_Type.C_Some ( * result) = get0 ( * l) (UIntSize.to_int ix) }
    ensures { [#"../list_index_mut.rs" 34 10 34 40] Core_Option_Option_Type.C_Some ( ^ result) = get0 ( ^ l) (UIntSize.to_int ix) }
    ensures { [#"../list_index_mut.rs" 35 10 35 34] len0 ( ^ l) = len0 ( * l) }
    ensures { [#"../list_index_mut.rs" 36 0 36 87] forall i : int . 0 <= i /\ i < len0 ( * l) /\ i <> UIntSize.to_int ix -> get0 ( * l) i = get0 ( ^ l) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var l : borrowed (ListIndexMut_List_Type.t_list) = l;
  var ix : usize = ix;
  var _3 : borrowed uint32;
  var old_l : Ghost.ghost_ty (borrowed (ListIndexMut_List_Type.t_list));
  var old_ix : Ghost.ghost_ty usize;
  var _22 : borrowed (ListIndexMut_List_Type.t_list);
  var _23 : borrowed (ListIndexMut_List_Type.t_list);
  var _24 : Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list));
  var _25 : borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list));
  var _29 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../list_index_mut.rs" 38 16 38 25] old_l <- ([#"../list_index_mut.rs" 38 16 38 25] Ghost.new l);
    goto BB1
  }
  BB1 {
    [#"../list_index_mut.rs" 39 17 39 27] old_ix <- ([#"../list_index_mut.rs" 39 17 39 27] Ghost.new ix);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant { [#"../list_index_mut.rs" 40 16 40 45] (0 : usize) <= ix /\ UIntSize.to_int ix < len0 ( * l) };
    invariant { [#"../list_index_mut.rs" 41 16 41 52] get0 ( * l) (UIntSize.to_int ix) = get0 ( * Ghost.inner old_l) (shallow_model1 old_ix) };
    invariant { [#"../list_index_mut.rs" 42 16 42 55] get0 ( ^ l) (UIntSize.to_int ix) = get0 ( ^ Ghost.inner old_l) (shallow_model1 old_ix) };
    invariant { [#"../list_index_mut.rs" 40 4 40 47] len0 ( ^ l) = len0 ( * l) -> len0 ( ^ Ghost.inner old_l) = len0 ( * Ghost.inner old_l) };
    invariant { [#"../list_index_mut.rs" 40 4 40 47] (forall i : int . 0 <= i /\ i < len0 ( * l) /\ i <> UIntSize.to_int ix -> get0 ( ^ l) i = get0 ( * l) i) -> (forall i : int . 0 <= i /\ i < len0 ( * Ghost.inner old_l) /\ i <> shallow_model1 old_ix -> get0 ( ^ Ghost.inner old_l) i = get0 ( * Ghost.inner old_l) i) };
    goto BB4
  }
  BB4 {
    switch ([#"../list_index_mut.rs" 49 10 49 16] ([#"../list_index_mut.rs" 49 10 49 12] ix) > ([#"../list_index_mut.rs" 49 15 49 16] [#"../list_index_mut.rs" 49 15 49 16] (0 : usize)))
      | False -> goto BB8
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../list_index_mut.rs" 50 12 50 24] _25 <- Borrow.borrow_mut (ListIndexMut_List_Type.list_1 ( * l));
    [#"../list_index_mut.rs" 50 12 50 24] l <- { l with current = (let ListIndexMut_List_Type.C_List x0 x1 =  * l in ListIndexMut_List_Type.C_List x0 ( ^ _25)) };
    [#"../list_index_mut.rs" 50 12 50 24] _24 <- ([#"../list_index_mut.rs" 50 12 50 24] as_mut0 _25);
    _25 <- any borrowed (Core_Option_Option_Type.t_option (ListIndexMut_List_Type.t_list));
    goto BB6
  }
  BB6 {
    [#"../list_index_mut.rs" 50 12 50 33] _23 <- ([#"../list_index_mut.rs" 50 12 50 33] unwrap0 _24);
    _24 <- any Core_Option_Option_Type.t_option (borrowed (ListIndexMut_List_Type.t_list));
    goto BB7
  }
  BB7 {
    [#"../list_index_mut.rs" 50 12 50 33] _22 <- Borrow.borrow_mut ( * _23);
    [#"../list_index_mut.rs" 50 12 50 33] _23 <- { _23 with current =  ^ _22 };
    assume { resolve1 l };
    [#"../list_index_mut.rs" 50 8 50 33] l <- ([#"../list_index_mut.rs" 50 8 50 33] _22);
    [#"../list_index_mut.rs" 50 8 50 33] _22 <- any borrowed (ListIndexMut_List_Type.t_list);
    assume { resolve2 _23 };
    [#"../list_index_mut.rs" 52 8 52 15] ix <- ([#"../list_index_mut.rs" 52 8 52 15] ix - ([#"../list_index_mut.rs" 52 14 52 15] [#"../list_index_mut.rs" 52 14 52 15] (1 : usize)));
    goto BB3
  }
  BB8 {
    [#"../list_index_mut.rs" 55 4 55 12] _29 <- Borrow.borrow_mut (ListIndexMut_List_Type.list_0 ( * l));
    [#"../list_index_mut.rs" 55 4 55 12] l <- { l with current = (let ListIndexMut_List_Type.C_List x0 x1 =  * l in ListIndexMut_List_Type.C_List ( ^ _29) x1) };
    [#"../list_index_mut.rs" 55 4 55 12] _3 <- Borrow.borrow_mut ( * _29);
    [#"../list_index_mut.rs" 55 4 55 12] _29 <- { _29 with current =  ^ _3 };
    [#"../list_index_mut.rs" 55 4 55 12] _0 <- Borrow.borrow_mut ( * _3);
    [#"../list_index_mut.rs" 55 4 55 12] _3 <- { _3 with current =  ^ _0 };
    assume { resolve0 _29 };
    assume { resolve0 _3 };
    assume { resolve1 l };
    return _0
  }
  
end
module ListIndexMut_Write
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.UInt32
  use prelude.Int
  function get0 [#"../list_index_mut.rs" 18 4 18 46] (self : ListIndexMut_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../list_index_mut.rs" 17 4 17 12] let ListIndexMut_List_Type.C_List i ls = self in if ix > 0 then
      match ls with
        | Core_Option_Option_Type.C_Some ls -> get0 ls (ix - 1)
        | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
        end
    else
      Core_Option_Option_Type.C_Some i
    
  val get0 [#"../list_index_mut.rs" 18 4 18 46] (self : ListIndexMut_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    ensures { result = get0 self ix }
    
  function len0 [#"../list_index_mut.rs" 7 4 7 29] (self : ListIndexMut_List_Type.t_list) : int =
    [#"../list_index_mut.rs" 6 4 6 12] let ListIndexMut_List_Type.C_List _ ls = self in 1 + match ls with
      | Core_Option_Option_Type.C_Some ls -> len0 ls
      | Core_Option_Option_Type.C_None -> 0
      end
  val len0 [#"../list_index_mut.rs" 7 4 7 29] (self : ListIndexMut_List_Type.t_list) : int
    ensures { result = len0 self }
    
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Borrow
  predicate resolve1 (self : borrowed (ListIndexMut_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (ListIndexMut_List_Type.t_list)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  val index_mut0 [#"../list_index_mut.rs" 37 0 37 61] (l : borrowed (ListIndexMut_List_Type.t_list)) (ix : usize) : borrowed uint32
    requires {[#"../list_index_mut.rs" 32 11 32 24] UIntSize.to_int ix < len0 ( * l)}
    ensures { [#"../list_index_mut.rs" 33 10 33 37] Core_Option_Option_Type.C_Some ( * result) = get0 ( * l) (UIntSize.to_int ix) }
    ensures { [#"../list_index_mut.rs" 34 10 34 40] Core_Option_Option_Type.C_Some ( ^ result) = get0 ( ^ l) (UIntSize.to_int ix) }
    ensures { [#"../list_index_mut.rs" 35 10 35 34] len0 ( ^ l) = len0 ( * l) }
    ensures { [#"../list_index_mut.rs" 36 0 36 87] forall i : int . 0 <= i /\ i < len0 ( * l) /\ i <> UIntSize.to_int ix -> get0 ( * l) i = get0 ( ^ l) i }
    
  let rec cfg write [#"../list_index_mut.rs" 63 0 63 45] [@cfg:stackify] [@cfg:subregion_analysis] (l : borrowed (ListIndexMut_List_Type.t_list)) (ix : usize) (v : uint32) : ()
    requires {[#"../list_index_mut.rs" 59 11 59 24] UIntSize.to_int ix < len0 ( * l)}
    ensures { [#"../list_index_mut.rs" 60 10 60 34] Core_Option_Option_Type.C_Some v = get0 ( ^ l) (UIntSize.to_int ix) }
    ensures { [#"../list_index_mut.rs" 61 10 61 31] len0 ( ^ l) = len0 ( * l) }
    ensures { [#"../list_index_mut.rs" 62 0 62 87] forall i : int . 0 <= i /\ i < len0 ( * l) /\ i <> UIntSize.to_int ix -> get0 ( * l) i = get0 ( ^ l) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : borrowed (ListIndexMut_List_Type.t_list) = l;
  var ix : usize = ix;
  var v : uint32 = v;
  var _9 : borrowed uint32;
  var _10 : borrowed (ListIndexMut_List_Type.t_list);
  {
    goto BB0
  }
  BB0 {
    [#"../list_index_mut.rs" 64 15 64 16] _10 <- Borrow.borrow_mut ( * l);
    [#"../list_index_mut.rs" 64 15 64 16] l <- { l with current =  ^ _10 };
    [#"../list_index_mut.rs" 64 5 64 21] _9 <- ([#"../list_index_mut.rs" 64 5 64 21] index_mut0 _10 ([#"../list_index_mut.rs" 64 18 64 20] ix));
    _10 <- any borrowed (ListIndexMut_List_Type.t_list);
    goto BB1
  }
  BB1 {
    [#"../list_index_mut.rs" 64 4 64 25] _9 <- { _9 with current = ([#"../list_index_mut.rs" 64 24 64 25] v) };
    assume { resolve0 _9 };
    assume { resolve1 l };
    [#"../list_index_mut.rs" 63 46 65 1] _0 <- ([#"../list_index_mut.rs" 63 46 65 1] ());
    return _0
  }
  
end
module ListIndexMut_F
  use prelude.Borrow
  use ListIndexMut_List_Type as ListIndexMut_List_Type
  predicate resolve0 (self : borrowed (ListIndexMut_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (ListIndexMut_List_Type.t_list)) : bool
    ensures { result = resolve0 self }
    
  use prelude.UInt32
  use prelude.UIntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  function get0 [#"../list_index_mut.rs" 18 4 18 46] (self : ListIndexMut_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../list_index_mut.rs" 17 4 17 12] let ListIndexMut_List_Type.C_List i ls = self in if ix > 0 then
      match ls with
        | Core_Option_Option_Type.C_Some ls -> get0 ls (ix - 1)
        | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
        end
    else
      Core_Option_Option_Type.C_Some i
    
  val get0 [#"../list_index_mut.rs" 18 4 18 46] (self : ListIndexMut_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    ensures { result = get0 self ix }
    
  function len0 [#"../list_index_mut.rs" 7 4 7 29] (self : ListIndexMut_List_Type.t_list) : int =
    [#"../list_index_mut.rs" 6 4 6 12] let ListIndexMut_List_Type.C_List _ ls = self in 1 + match ls with
      | Core_Option_Option_Type.C_Some ls -> len0 ls
      | Core_Option_Option_Type.C_None -> 0
      end
  val len0 [#"../list_index_mut.rs" 7 4 7 29] (self : ListIndexMut_List_Type.t_list) : int
    ensures { result = len0 self }
    
  use prelude.UIntSize
  val write0 [#"../list_index_mut.rs" 63 0 63 45] (l : borrowed (ListIndexMut_List_Type.t_list)) (ix : usize) (v : uint32) : ()
    requires {[#"../list_index_mut.rs" 59 11 59 24] UIntSize.to_int ix < len0 ( * l)}
    ensures { [#"../list_index_mut.rs" 60 10 60 34] Core_Option_Option_Type.C_Some v = get0 ( ^ l) (UIntSize.to_int ix) }
    ensures { [#"../list_index_mut.rs" 61 10 61 31] len0 ( ^ l) = len0 ( * l) }
    ensures { [#"../list_index_mut.rs" 62 0 62 87] forall i : int . 0 <= i /\ i < len0 ( * l) /\ i <> UIntSize.to_int ix -> get0 ( * l) i = get0 ( ^ l) i }
    
  let rec cfg f [#"../list_index_mut.rs" 67 0 67 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l : ListIndexMut_List_Type.t_list;
  var _6 : ();
  var _7 : borrowed (ListIndexMut_List_Type.t_list);
  var _8 : borrowed (ListIndexMut_List_Type.t_list);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../list_index_mut.rs" 68 16 68 55] l <- ([#"../list_index_mut.rs" 68 16 68 55] ListIndexMut_List_Type.C_List ([#"../list_index_mut.rs" 68 21 68 22] [#"../list_index_mut.rs" 68 21 68 22] (1 : uint32)) ([#"../list_index_mut.rs" 68 24 68 54] Core_Option_Option_Type.C_Some ([#"../list_index_mut.rs" 68 38 68 52] ListIndexMut_List_Type.C_List ([#"../list_index_mut.rs" 68 43 68 45] [#"../list_index_mut.rs" 68 43 68 45] (10 : uint32)) ([#"../list_index_mut.rs" 68 47 68 51] Core_Option_Option_Type.C_None))));
    goto BB4
  }
  BB4 {
    [#"../list_index_mut.rs" 69 10 69 16] _8 <- Borrow.borrow_mut l;
    [#"../list_index_mut.rs" 69 10 69 16] l <-  ^ _8;
    [#"../list_index_mut.rs" 69 10 69 16] _7 <- Borrow.borrow_mut ( * _8);
    [#"../list_index_mut.rs" 69 10 69 16] _8 <- { _8 with current =  ^ _7 };
    [#"../list_index_mut.rs" 69 4 69 23] _6 <- ([#"../list_index_mut.rs" 69 4 69 23] write0 _7 ([#"../list_index_mut.rs" 69 18 69 19] [#"../list_index_mut.rs" 69 18 69 19] (0 : usize)) ([#"../list_index_mut.rs" 69 21 69 22] [#"../list_index_mut.rs" 69 21 69 22] (2 : uint32)));
    _7 <- any borrowed (ListIndexMut_List_Type.t_list);
    goto BB5
  }
  BB5 {
    assume { resolve0 _8 };
    [#"../list_index_mut.rs" 67 11 72 1] _0 <- ([#"../list_index_mut.rs" 67 11 72 1] ());
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
