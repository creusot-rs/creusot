module M_mapping_indexing__foo [#"mapping_indexing.rs" 4 0 4 12]
  let%span smapping_indexing0 = "mapping_indexing.rs" 5 22 5 39
  let%span smapping_indexing1 = "mapping_indexing.rs" 7 14 7 43
  let%span smapping_indexing2 = "mapping_indexing.rs" 8 18 8 34
  let%span smapping_indexing3 = "mapping_indexing.rs" 9 18 9 34
  let%span smapping_indexing4 = "mapping_indexing.rs" 10 14 10 43
  let%span smapping_indexing5 = "mapping_indexing.rs" 11 18 11 34
  let%span smapping_indexing6 = "mapping_indexing.rs" 12 18 12 34
  let%span smapping_indexing7 = "mapping_indexing.rs" 13 14 13 43
  let%span smapping_indexing8 = "mapping_indexing.rs" 14 18 14 34
  let%span smapping_indexing9 = "mapping_indexing.rs" 15 18 15 34
  let%span smapping10 = "../../../creusot-contracts/src/logic/mapping.rs" 60 8 60 19
  
  use prelude.prelude.Int
  
  use prelude.prelude.Mapping
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use map.Map
  
  use map.Map
  
  use map.Map
  
  function index_logic'0 (self : Map.map int int) (a : int) : int =
    [%#smapping10] Map.get self a
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &mapping <- [%#smapping_indexing0] Snapshot.new (Mapping.from_fn (fun (_2 : int) -> 42)) ] s1
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_3 <- [%#smapping_indexing1] Snapshot.new (Map.set (Snapshot.inner mapping) 0 10) ] s1 | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &mapping <- _3 ] s1
      | s1 = {[@expl:assertion] [%#smapping_indexing2] index_logic'0 (Snapshot.inner mapping) 0 = 10} s2
      | s2 = {[@expl:assertion] [%#smapping_indexing3] index_logic'0 (Snapshot.inner mapping) 1 = 42} s3
      | s3 =  [ &_9 <- [%#smapping_indexing4] Snapshot.new (Map.set (Snapshot.inner mapping) 1 11) ] s4
      | s4 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &mapping <- _9 ] s1
      | s1 = {[@expl:assertion] [%#smapping_indexing5] index_logic'0 (Snapshot.inner mapping) 0 = 10} s2
      | s2 = {[@expl:assertion] [%#smapping_indexing6] index_logic'0 (Snapshot.inner mapping) 1 = 11} s3
      | s3 =  [ &_15 <- [%#smapping_indexing7] Snapshot.new (Map.set (Snapshot.inner mapping) 0 12) ] s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &mapping <- _15 ] s1
      | s1 = {[@expl:assertion] [%#smapping_indexing8] index_logic'0 (Snapshot.inner mapping) 0 = 12} s2
      | s2 = {[@expl:assertion] [%#smapping_indexing9] index_logic'0 (Snapshot.inner mapping) 1 = 11} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & mapping : Snapshot.snap_ty (Map.map int int) = any_l ()
    | & _3 : Snapshot.snap_ty (Map.map int int) = any_l ()
    | & _9 : Snapshot.snap_ty (Map.map int int) = any_l ()
    | & _15 : Snapshot.snap_ty (Map.map int int) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
