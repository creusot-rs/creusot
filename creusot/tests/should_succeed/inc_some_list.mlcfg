
module IncSomeList_Random_Interface
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSomeList_Random
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSomeList_List_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module IncSomeList_Impl1_Sum_Stub
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  val ghost function sum (self : IncSomeList_List_Type.t_list) : int
end
module IncSomeList_Impl1_Sum_Interface
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  val ghost function sum (self : IncSomeList_List_Type.t_list) : int
end
module IncSomeList_Impl1_Sum
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  use mach.int.UInt32
  let rec ghost function sum [#"../inc_some_list.rs" 18 4 18 23] (self : IncSomeList_List_Type.t_list) : int
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_list.rs" 19 8 22 9] match (self) with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum l
      | IncSomeList_List_Type.C_Nil -> 0
      end
end
module IncSomeList_Impl1_LemmaSumNonneg_Stub
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum_Stub as Sum0
  val ghost function lemma_sum_nonneg (self : IncSomeList_List_Type.t_list) : ()
end
module IncSomeList_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum_Stub as Sum0
  val ghost function lemma_sum_nonneg (self : IncSomeList_List_Type.t_list) : ()
    ensures { [#"../inc_some_list.rs" 27 14 27 29] Sum0.sum self >= 0 }
    
end
module IncSomeList_Impl1_LemmaSumNonneg
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum_Stub as Sum0
  val ghost function lemma_sum_nonneg [#"../inc_some_list.rs" 28 4 28 30] (self : IncSomeList_List_Type.t_list) : ()
  axiom lemma_sum_nonneg_spec : forall self : IncSomeList_List_Type.t_list . [#"../inc_some_list.rs" 27 14 27 29] Sum0.sum self >= 0
end
module IncSomeList_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum as Sum0
  let rec ghost function lemma_sum_nonneg (self : IncSomeList_List_Type.t_list) : ()
    ensures { [#"../inc_some_list.rs" 27 14 27 29] Sum0.sum self >= 0 }
    variant {[#"../inc_some_list.rs" 26 15 26 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_list.rs" 29 8 32 9] match (self) with
      | IncSomeList_List_Type.C_Cons _ l -> lemma_sum_nonneg l
      | IncSomeList_List_Type.C_Nil -> ()
      end
end
module IncSomeList_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum_Stub as Sum0
  val sum_x [@cfg:stackify] (self : IncSomeList_List_Type.t_list) : uint32
    requires {[#"../inc_some_list.rs" 35 15 35 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_list.rs" 36 14 36 35] UInt32.to_int result = Sum0.sum self }
    
end
module IncSomeList_Impl1_SumX
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum as Sum0
  use prelude.IntSize
  let rec cfg sum_x [@cfg:stackify] [#"../inc_some_list.rs" 37 4 37 26] (self : IncSomeList_List_Type.t_list) : uint32
    requires {[#"../inc_some_list.rs" 35 15 35 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_list.rs" 36 14 36 35] UInt32.to_int result = Sum0.sum self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : IncSomeList_List_Type.t_list;
  var _4 : isize;
  var a_5 : uint32;
  var l_6 : IncSomeList_List_Type.t_list;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : IncSomeList_List_Type.t_list;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IncSomeList_List_Type.C_Cons _ _ -> goto BB3
      | IncSomeList_List_Type.C_Nil -> goto BB1
      end
  }
  BB1 {
    _0 <- (0 : uint32);
    goto BB5
  }
  BB2 {
    absurd
  }
  BB3 {
    a_5 <- IncSomeList_List_Type.cons_0 self_1;
    l_6 <- IncSomeList_List_Type.cons_1 self_1;
    _7 <- a_5;
    _9 <- l_6;
    _8 <- ([#"../inc_some_list.rs" 39 31 39 40] sum_x _9);
    goto BB4
  }
  BB4 {
    _0 <- ([#"../inc_some_list.rs" 39 26 39 40] _7 + _8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module CreusotContracts_Logic_Int_Impl12_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl12_Model_Stub
  use mach.int.Int
  use mach.int.UInt32
  val ghost function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  val ghost function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model
  use mach.int.Int
  use mach.int.UInt32
  let rec ghost function model (self : uint32) : int = [@vc:do_not_keep_trace] [@vc:sp]
    UInt32.to_int self
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IncSomeList_Impl1_TakeSome_Interface
  use mach.int.Int
  use prelude.Borrow
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy0
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model0 with type t = uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone IncSomeList_Impl1_Sum_Stub as Sum0
  val take_some [@cfg:stackify] (self : borrowed (IncSomeList_List_Type.t_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 44 14 44 62] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - Model0.model result }
    ensures { [#"../inc_some_list.rs" 45 14 45 35] Model0.model result <= Sum0.sum ( * self) }
    
end
module IncSomeList_Impl1_TakeSome
  use mach.int.Int
  use prelude.Borrow
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl12_Model as Model1
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy0
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone IncSomeList_Impl1_Sum as Sum0
  use prelude.IntSize
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = IncSomeList_List_Type.t_list
  clone IncSomeList_Random_Interface as Random0
  clone IncSomeList_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with val Sum0.sum = Sum0.sum, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = IncSomeList_List_Type.t_list
  let rec cfg take_some [@cfg:stackify] [#"../inc_some_list.rs" 46 4 46 39] (self : borrowed (IncSomeList_List_Type.t_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 44 14 44 62] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - Model0.model result }
    ensures { [#"../inc_some_list.rs" 45 14 45 35] Model0.model result <= Sum0.sum ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self_1 : borrowed (IncSomeList_List_Type.t_list);
  var _2 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : isize;
  var ma_7 : borrowed uint32;
  var ml_8 : borrowed (IncSomeList_List_Type.t_list);
  var _9 : borrowed uint32;
  var _10 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost ();
  var _13 : ();
  var _14 : borrowed uint32;
  var _15 : bool;
  var _16 : borrowed uint32;
  var _17 : borrowed uint32;
  var _18 : borrowed (IncSomeList_List_Type.t_list);
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | IncSomeList_List_Type.C_Cons _ _ -> goto BB3
      | IncSomeList_List_Type.C_Nil -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    goto BB10
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    ma_7 <- borrow_mut (IncSomeList_List_Type.cons_0 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeList_List_Type.C_Cons a b =  * self_1 in IncSomeList_List_Type.C_Cons ( ^ ma_7) b) };
    ml_8 <- borrow_mut (IncSomeList_List_Type.cons_1 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeList_List_Type.C_Cons a b =  * self_1 in IncSomeList_List_Type.C_Cons a ( ^ ml_8)) };
    assume { Resolve0.resolve self_1 };
    _13 <- ();
    _10 <- ([#"../inc_some_list.rs" 49 16 49 48] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (LemmaSumNonneg0.lemma_sum_nonneg ( * ml_8)));
    goto BB4
  }
  BB4 {
    _15 <- ([#"../inc_some_list.rs" 50 19 50 27] Random0.random ());
    goto BB5
  }
  BB5 {
    switch (_15)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve ml_8 };
    _16 <- borrow_mut ( * ma_7);
    ma_7 <- { ma_7 with current = ( ^ _16) };
    assume { Resolve2.resolve ma_7 };
    _14 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _14) };
    assume { Resolve2.resolve _16 };
    goto BB9
  }
  BB7 {
    assume { Resolve2.resolve ma_7 };
    _18 <- borrow_mut ( * ml_8);
    ml_8 <- { ml_8 with current = ( ^ _18) };
    _17 <- ([#"../inc_some_list.rs" 53 20 53 34] take_some _18);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve ml_8 };
    _14 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _14) };
    assume { Resolve2.resolve _17 };
    goto BB9
  }
  BB9 {
    _9 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _9) };
    assume { Resolve2.resolve _14 };
    _5 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _5) };
    assume { Resolve2.resolve _9 };
    _2 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _2) };
    assume { Resolve2.resolve _5 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve2.resolve _2 };
    return _0
  }
  BB10 {
    _20 <- ();
    goto BB10
  }
  
end
module IncSomeList_IncSomeList_Interface
  use mach.int.Int
  use mach.int.UInt32
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum_Stub as Sum0
  val inc_some_list [@cfg:stackify] (l : IncSomeList_List_Type.t_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 61 11 61 36] Sum0.sum l + UInt32.to_int k <= 1000000}
    
end
module IncSomeList_IncSomeList
  use mach.int.Int
  use mach.int.UInt32
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl1_Sum as Sum0
  use prelude.Borrow
  clone CreusotContracts_Logic_Int_Impl12_Model as Model1
  clone CreusotContracts_Logic_Int_Impl12_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone IncSomeList_Impl1_TakeSome_Interface as TakeSome0 with val Sum0.sum = Sum0.sum, val Model0.model = Model0.model
  clone IncSomeList_Impl1_SumX_Interface as SumX0 with val Sum0.sum = Sum0.sum
  let rec cfg inc_some_list [@cfg:stackify] [#"../inc_some_list.rs" 62 0 62 41] (l : IncSomeList_List_Type.t_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 61 11 61 36] Sum0.sum l + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : IncSomeList_List_Type.t_list;
  var k_2 : uint32;
  var sum0_4 : uint32;
  var _5 : IncSomeList_List_Type.t_list;
  var ma_6 : borrowed uint32;
  var _7 : borrowed (IncSomeList_List_Type.t_list);
  var _8 : uint32;
  var _9 : ();
  var _10 : bool;
  var _11 : bool;
  var _12 : uint32;
  var _13 : IncSomeList_List_Type.t_list;
  var _14 : uint32;
  var _15 : uint32;
  var _16 : uint32;
  var _17 : ();
  {
    l_1 <- l;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- l_1;
    sum0_4 <- ([#"../inc_some_list.rs" 63 15 63 24] SumX0.sum_x _5);
    goto BB2
  }
  BB2 {
    _7 <- borrow_mut l_1;
    l_1 <-  ^ _7;
    ma_6 <- ([#"../inc_some_list.rs" 64 13 64 26] TakeSome0.take_some _7);
    goto BB3
  }
  BB3 {
    _8 <- k_2;
    ma_6 <- { ma_6 with current = ([#"../inc_some_list.rs" 65 4 65 12]  * ma_6 + _8) };
    assume { Resolve0.resolve ma_6 };
    _13 <- l_1;
    _12 <- ([#"../inc_some_list.rs" 66 12 66 21] SumX0.sum_x _13);
    goto BB4
  }
  BB4 {
    _15 <- sum0_4;
    _16 <- k_2;
    _14 <- ([#"../inc_some_list.rs" 66 25 66 33] _15 + _16);
    _11 <- ([#"../inc_some_list.rs" 66 12 66 33] _12 = _14);
    _10 <- not _11;
    switch (_10)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _9 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSomeList_Impl0
  
end
