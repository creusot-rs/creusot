
module IncSomeList_Random_Interface
  val random [@cfg:stackify] [#"../inc_some_list.rs" 15 0 15 19] (_1' : ()) : bool
end
module IncSomeList_Random
  val random [@cfg:stackify] [#"../inc_some_list.rs" 15 0 15 19] (_1' : ()) : bool
end
module IncSomeList_List_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  let function cons_0 (self : t_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons a _ -> a
      | C_Nil -> any uint32
      end
  let function cons_1 (self : t_list) : t_list = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons _ a -> a
      | C_Nil -> any t_list
      end
end
module IncSomeList_Impl0_Sum_Stub
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
end
module IncSomeList_Impl0_Sum_Interface
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  function sum [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
end
module IncSomeList_Impl0_Sum
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  use mach.int.UInt32
  function sum [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int =
    [#"../inc_some_list.rs" 23 12 26 13] match (self) with
      | IncSomeList_List_Type.C_Cons a l -> UInt32.to_int a + sum l
      | IncSomeList_List_Type.C_Nil -> 0
      end
  val sum [#"../inc_some_list.rs" 21 4 21 23] (self : IncSomeList_List_Type.t_list) : int
    ensures { result = sum self }
    
end
module IncSomeList_Impl0_LemmaSumNonneg_Stub
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum_Stub as Sum0
  function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
end
module IncSomeList_Impl0_LemmaSumNonneg_Interface
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum_Stub as Sum0
  function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
  axiom lemma_sum_nonneg_spec : forall self : IncSomeList_List_Type.t_list . [#"../inc_some_list.rs" 32 14 32 29] Sum0.sum self >= 0
end
module IncSomeList_Impl0_LemmaSumNonneg
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum_Stub as Sum0
  function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
  val lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
    ensures { result = lemma_sum_nonneg self }
    
  axiom def : forall self : IncSomeList_List_Type.t_list . lemma_sum_nonneg self = ([#"../inc_some_list.rs" 34 8 37 9] match (self) with
    | IncSomeList_List_Type.C_Cons _ l -> lemma_sum_nonneg l
    | IncSomeList_List_Type.C_Nil -> ()
    end)
  axiom lemma_sum_nonneg_spec : forall self : IncSomeList_List_Type.t_list . [#"../inc_some_list.rs" 32 14 32 29] Sum0.sum self >= 0
end
module IncSomeList_Impl0_LemmaSumNonneg_Impl
  use mach.int.Int
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum as Sum0
  let rec ghost function lemma_sum_nonneg [#"../inc_some_list.rs" 33 4 33 30] (self : IncSomeList_List_Type.t_list) : ()
    ensures { [#"../inc_some_list.rs" 32 14 32 29] Sum0.sum self >= 0 }
    variant {[#"../inc_some_list.rs" 31 15 31 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_list.rs" 34 8 37 9] match (self) with
      | IncSomeList_List_Type.C_Cons _ l -> lemma_sum_nonneg l
      | IncSomeList_List_Type.C_Nil -> ()
      end
end
module IncSomeList_Impl0_SumX_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum_Stub as Sum0
  val sum_x [@cfg:stackify] [#"../inc_some_list.rs" 42 4 42 26] (self : IncSomeList_List_Type.t_list) : uint32
    requires {[#"../inc_some_list.rs" 40 15 40 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_list.rs" 41 14 41 35] UInt32.to_int result = Sum0.sum self }
    
end
module IncSomeList_Impl0_SumX
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use prelude.IntSize
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum as Sum0
  let rec cfg sum_x [@cfg:stackify] [#"../inc_some_list.rs" 42 4 42 26] (self : IncSomeList_List_Type.t_list) : uint32
    requires {[#"../inc_some_list.rs" 40 15 40 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_list.rs" 41 14 41 35] UInt32.to_int result = Sum0.sum self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : IncSomeList_List_Type.t_list;
  var _4 : isize;
  var a_5 : uint32;
  var l_6 : IncSomeList_List_Type.t_list;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : IncSomeList_List_Type.t_list;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IncSomeList_List_Type.C_Cons _ _ -> goto BB3
      | IncSomeList_List_Type.C_Nil -> goto BB1
      end
  }
  BB1 {
    _0 <- ([#"../inc_some_list.rs" 45 19 45 20] (0 : uint32));
    goto BB5
  }
  BB2 {
    absurd
  }
  BB3 {
    a_5 <- IncSomeList_List_Type.cons_0 self_1;
    l_6 <- IncSomeList_List_Type.cons_1 self_1;
    _7 <- a_5;
    _9 <- l_6;
    _8 <- ([#"../inc_some_list.rs" 44 31 44 40] sum_x _9);
    goto BB4
  }
  BB4 {
    _0 <- ([#"../inc_some_list.rs" 44 26 44 40] _7 + _8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type
  use mach.int.Int
  type shallowModelTy  =
    int
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel_Stub
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel_Interface
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl11_ShallowModel
  use mach.int.Int
  use mach.int.UInt32
  function shallow_model (self : uint32) : int =
    UInt32.to_int self
  val shallow_model (self : uint32) : int
    ensures { result = shallow_model self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IncSomeList_Impl0_TakeSome_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type as ShallowModelTy0
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone IncSomeList_Impl0_Sum_Stub as Sum0
  val take_some [@cfg:stackify] [#"../inc_some_list.rs" 51 4 51 39] (self : borrowed (IncSomeList_List_Type.t_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 49 14 49 62] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - ShallowModel0.shallow_model result }
    ensures { [#"../inc_some_list.rs" 50 14 50 35] ShallowModel0.shallow_model result <= Sum0.sum ( * self) }
    
end
module IncSomeList_Impl0_TakeSome
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use prelude.IntSize
  use prelude.Ghost
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use IncSomeList_List_Type as IncSomeList_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Int_Impl11_ShallowModel as ShallowModel1
  clone CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = IncSomeList_List_Type.t_list
  clone IncSomeList_Random_Interface as Random0
  clone IncSomeList_Impl0_Sum as Sum0
  clone IncSomeList_Impl0_LemmaSumNonneg as LemmaSumNonneg0 with
    function Sum0.sum = Sum0.sum,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = IncSomeList_List_Type.t_list
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg take_some [@cfg:stackify] [#"../inc_some_list.rs" 51 4 51 39] (self : borrowed (IncSomeList_List_Type.t_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 49 14 49 62] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - ShallowModel0.shallow_model result }
    ensures { [#"../inc_some_list.rs" 50 14 50 35] ShallowModel0.shallow_model result <= Sum0.sum ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self_1 : borrowed (IncSomeList_List_Type.t_list);
  var _2 : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : isize;
  var ma_7 : borrowed uint32;
  var ml_8 : borrowed (IncSomeList_List_Type.t_list);
  var _9 : borrowed uint32;
  var _10 : Ghost.ghost_ty ();
  var _13 : ();
  var _14 : borrowed uint32;
  var _15 : bool;
  var _16 : borrowed uint32;
  var _17 : borrowed uint32;
  var _18 : borrowed (IncSomeList_List_Type.t_list);
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | IncSomeList_List_Type.C_Cons _ _ -> goto BB3
      | IncSomeList_List_Type.C_Nil -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    goto BB10
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    ma_7 <- borrow_mut (IncSomeList_List_Type.cons_0 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeList_List_Type.C_Cons a b =  * self_1 in IncSomeList_List_Type.C_Cons ( ^ ma_7) b) };
    ml_8 <- borrow_mut (IncSomeList_List_Type.cons_1 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeList_List_Type.C_Cons a b =  * self_1 in IncSomeList_List_Type.C_Cons a ( ^ ml_8)) };
    assume { Resolve0.resolve self_1 };
    _13 <- ();
    _10 <- ([#"../inc_some_list.rs" 54 16 54 48] Ghost.new (LemmaSumNonneg0.lemma_sum_nonneg ( * ml_8)));
    goto BB4
  }
  BB4 {
    _15 <- ([#"../inc_some_list.rs" 55 19 55 27] Random0.random ());
    goto BB5
  }
  BB5 {
    switch (_15)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve ml_8 };
    _16 <- borrow_mut ( * ma_7);
    ma_7 <- { ma_7 with current = ( ^ _16) };
    assume { Resolve2.resolve ma_7 };
    _14 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _14) };
    assume { Resolve2.resolve _16 };
    goto BB9
  }
  BB7 {
    assume { Resolve2.resolve ma_7 };
    _18 <- borrow_mut ( * ml_8);
    ml_8 <- { ml_8 with current = ( ^ _18) };
    _17 <- ([#"../inc_some_list.rs" 58 20 58 34] take_some _18);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve ml_8 };
    _14 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _14) };
    assume { Resolve2.resolve _17 };
    goto BB9
  }
  BB9 {
    _9 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _9) };
    assume { Resolve2.resolve _14 };
    _5 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _5) };
    assume { Resolve2.resolve _9 };
    _2 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _2) };
    assume { Resolve2.resolve _5 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve2.resolve _2 };
    return _0
  }
  BB10 {
    _20 <- ();
    goto BB10
  }
  
end
module IncSomeList_IncSomeList_Interface
  use mach.int.UInt32
  use mach.int.Int
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum_Stub as Sum0
  val inc_some_list [@cfg:stackify] [#"../inc_some_list.rs" 67 0 67 41] (l : IncSomeList_List_Type.t_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 66 11 66 36] Sum0.sum l + UInt32.to_int k <= 1000000}
    
end
module IncSomeList_IncSomeList
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Logic_Int_Impl11_ShallowModel as ShallowModel1
  clone CreusotContracts_Logic_Int_Impl11_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  use IncSomeList_List_Type as IncSomeList_List_Type
  clone IncSomeList_Impl0_Sum as Sum0
  clone IncSomeList_Impl0_TakeSome_Interface as TakeSome0 with
    function Sum0.sum = Sum0.sum,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone IncSomeList_Impl0_SumX_Interface as SumX0 with
    function Sum0.sum = Sum0.sum
  let rec cfg inc_some_list [@cfg:stackify] [#"../inc_some_list.rs" 67 0 67 41] (l : IncSomeList_List_Type.t_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 66 11 66 36] Sum0.sum l + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : IncSomeList_List_Type.t_list;
  var k_2 : uint32;
  var sum0_4 : uint32;
  var _5 : IncSomeList_List_Type.t_list;
  var ma_6 : borrowed uint32;
  var _7 : borrowed (IncSomeList_List_Type.t_list);
  var _8 : uint32;
  var _9 : ();
  var _10 : bool;
  var _11 : bool;
  var _12 : uint32;
  var _13 : IncSomeList_List_Type.t_list;
  var _14 : uint32;
  var _15 : uint32;
  var _16 : uint32;
  var _17 : ();
  {
    l_1 <- l;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- l_1;
    sum0_4 <- ([#"../inc_some_list.rs" 68 15 68 24] SumX0.sum_x _5);
    goto BB2
  }
  BB2 {
    _7 <- borrow_mut l_1;
    l_1 <-  ^ _7;
    ma_6 <- ([#"../inc_some_list.rs" 69 13 69 26] TakeSome0.take_some _7);
    goto BB3
  }
  BB3 {
    _8 <- k_2;
    ma_6 <- { ma_6 with current = ([#"../inc_some_list.rs" 70 4 70 12]  * ma_6 + _8) };
    assume { Resolve0.resolve ma_6 };
    _13 <- l_1;
    _12 <- ([#"../inc_some_list.rs" 71 12 71 21] SumX0.sum_x _13);
    goto BB4
  }
  BB4 {
    _15 <- sum0_4;
    _16 <- k_2;
    _14 <- ([#"../inc_some_list.rs" 71 25 71 33] _15 + _16);
    _11 <- ([#"../inc_some_list.rs" 71 12 71 33] _12 = _14);
    _10 <- not _11;
    switch (_10)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _9 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSomeList_Impl1
  
end
