
module M_resolve_uninit__maybe_uninit
  type t
  
  let%span sresolve_uninit0 = "../resolve_uninit.rs" 8 12 8 24
  
  let%span sresolve_uninit1 = "../resolve_uninit.rs" 5 41 5 42
  
  let%span sresolve_uninit2 = "../resolve_uninit.rs" 5 50 5 51
  
  let%span span3 = "../../../../creusot-contracts/src/std/default.rs" 13 26 13 45
  
  let%span span4 = "" 0 0 0 0
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_1 : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : t)
  
  predicate is_default'0 (self : t)
  
  let rec default'0 (_1:()) (return'  (ret:t))= any
    [ return' (result:t)-> {[%#span4] inv'0 result} {[%#span3] is_default'0 result} (! return' {result}) ]
    
  
  let rec maybe_uninit (b:bool) (y:t) (return'  (ret:t))= {[%#sresolve_uninit1] inv'0 y}
    (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb6) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 = default'0 {[%#sresolve_uninit0] ()} (fun (_ret':t) ->  [ &_6 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = s0
      [ s0 =  [ &x <- _6 ] s1 | s1 = {[@expl:type invariant] inv'0 x} s2 | s2 = -{resolve'0 x}- s3 | s3 = bb5 ]
      
    | bb5 = bb7
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = s0 [ s0 =  [ &x <- y ] s1 | s1 = bb10 ] 
    | bb10 = s0 [ s0 =  [ &_0 <- x ] s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = return' {_0} ]
    ) [ & _0 : t = any_l () | & b : bool = b | & y : t = y | & x : t = any_l () | & _6 : t = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sresolve_uninit2] inv'0 result} (! return' {result}) ]
    
end
module M_resolve_uninit__init_join
  let%span sresolve_uninit0 = "../resolve_uninit.rs" 27 9 27 10
  
  let%span sresolve_uninit1 = "../resolve_uninit.rs" 28 17 28 18
  
  let%span sresolve_uninit2 = "../resolve_uninit.rs" 28 4 28 19
  
  let%span span3 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec init_join (b:bool) (x:int32) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_8 <- _ret' ]  [ &x <- _8.final ] s1)
      | s1 = Borrow.borrow_final <int32> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _7.final ; } ] s2)
      | s2 =  [ &z <- _7 ] s3
      | s3 = -{resolve'0 _8}- s4
      | s4 = Borrow.borrow_final <int32> {z.current} {Borrow.get_id z}
          (fun (_ret':borrowed int32) ->  [ &_10 <- _ret' ]  [ &z <- { z with current = _10.final ; } ] s5)
      | s5 = Borrow.borrow_final <int32> {_10.current} {Borrow.get_id _10}
          (fun (_ret':borrowed int32) ->  [ &_9 <- _ret' ]  [ &_10 <- { _10 with current = _9.final ; } ] s6)
      | s6 =  [ &y <- _9 ] s7
      | s7 = -{resolve'0 _10}- s8
      | s8 = bb7 ]
      
    | bb7 = s0 [ s0 = -{resolve'0 z}- s1 | s1 = bb3 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_12 <- _ret' ]  [ &x <- _12.final ] s1)
      | s1 = Borrow.borrow_final <int32> {_12.current} {Borrow.get_id _12}
          (fun (_ret':borrowed int32) ->  [ &_11 <- _ret' ]  [ &_12 <- { _12 with current = _11.final ; } ] s2)
      | s2 =  [ &y <- _11 ] s3
      | s3 = -{resolve'0 _12}- s4
      | s4 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &y <- { y with current = ([%#sresolve_uninit0] (5 : int32)) ; } ] s1
      | s1 = -{resolve'0 y}- s2
      | s2 = Int32.eq {x} {[%#sresolve_uninit1] (5 : int32)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s3)
      | s3 = any [ br0 -> {_14 = false} (! bb5) | br1 -> {_14} (! bb4) ]  ]
      
    | bb4 = return' {_0}
    | bb5 = {[%#sresolve_uninit2] false} any ]
    )
    [ & _0 : () = any_l ()
    | & b : bool = b
    | & x : int32 = x
    | & y : borrowed int32 = any_l ()
    | & z : borrowed int32 = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _8 : borrowed int32 = any_l ()
    | & _9 : borrowed int32 = any_l ()
    | & _10 : borrowed int32 = any_l ()
    | & _11 : borrowed int32 = any_l ()
    | & _12 : borrowed int32 = any_l ()
    | & _14 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
