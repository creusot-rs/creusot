module T_10_tyinv__Zero [#"10_tyinv.rs" 4 0 4 18]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_Zero 't =
    | C_Zero uint32 't
  
  let rec t_Zero < 't > (input:t_Zero 't) (ret  (field_0:uint32) (field_1:'t))= any
    [ good (field_0:uint32) (field_1:'t)-> {C_Zero field_0 field_1 = input} (! ret {field_0} {field_1}) ]
    
  
  function t_Zero__0 (self : t_Zero 't) : uint32 =
    match self with
      | C_Zero a _ -> a
      end
end
module T_10_tyinv__f__qyClosure0__qyClosure1 [#"10_tyinv.rs" 18 20 18 44]
  use T_10_tyinv__Zero as Zero'0
  
  use prelude.prelude.Borrow
  
  type m_10_tyinv__f__qyClosure0__qyClosure1 't =
    | M_10_tyinv__f__qyClosure0__qyClosure1 (Zero'0.t_Zero 't)
  
  let rec m_10_tyinv__f__qyClosure0__qyClosure1 < 't > (input:m_10_tyinv__f__qyClosure0__qyClosure1 't) (ret  (y:Zero'0.t_Zero 't))= any
    [ good (y:Zero'0.t_Zero 't)-> {M_10_tyinv__f__qyClosure0__qyClosure1 y = input} (! ret {y}) ]
    
end
module M_10_tyinv__f__qyClosure0__qyClosure1 [#"10_tyinv.rs" 18 20 18 44]
  type t
  
  let%span s10_tyinv0 = "10_tyinv.rs" 20 26 20 35
  let%span s10_tyinv1 = "10_tyinv.rs" 18 30 18 42
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span s10_tyinv3 = "10_tyinv.rs" 10 20 10 32
  
  predicate inv'4 (_1 : t)
  
  use prelude.prelude.UInt32
  
  use T_10_tyinv__Zero as T_10_tyinv__Zero
  
  use T_10_tyinv__Zero as Zero'0
  
  predicate invariant'2 [#"10_tyinv.rs" 9 4 9 30] (self : Zero'0.t_Zero t) =
    [%#s10_tyinv3] UInt32.to_int (T_10_tyinv__Zero.t_Zero__0 self) = 0
  
  predicate inv'3 (_1 : Zero'0.t_Zero t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Zero'0.t_Zero t [inv'3 x] . inv'3 x
  = (invariant'2 x
  /\ match x with
    | Zero'0.C_Zero a_0 a_1 -> inv'4 a_1
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : Zero'0.t_Zero t) =
    [%#sinvariant2] inv'3 self
  
  predicate inv'2 (_1 : Zero'0.t_Zero t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Zero'0.t_Zero t [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_10_tyinv__f__qyClosure0__qyClosure1 as Closure'0
  
  predicate inv'1 (_1 : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t [inv'1 x] . inv'1 x
  = (let Closure'0.M_10_tyinv__f__qyClosure0__qyClosure1 a = x in inv'2 a)
  
  predicate invariant'0 (self : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t [inv'0 x] . inv'0 x
  = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function field_0'0 [#"10_tyinv.rs" 18 20 18 44] (self : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t) : Zero'0.t_Zero t
    
   =
    let Closure'0.M_10_tyinv__f__qyClosure0__qyClosure1 a = self in a
  
  meta "compute_max_steps" 1000000
  
  let rec m_10_tyinv__f__qyClosure0__qyClosure1 (_1:Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t) (return'  (ret:uint32))= {inv'0 _1}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_tyinv0] UInt32.to_int (T_10_tyinv__Zero.t_Zero__0 (field_0'0 _1)) = 0} s1
      | s1 = Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 <t> {_1}
          (fun (r'0:Zero'0.t_Zero t) -> Zero'0.t_Zero <t> {r'0} (fun (r0'0:uint32) (r1'0:t) ->  [ &res <- r0'0 ] s2))
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : Closure'0.m_10_tyinv__f__qyClosure0__qyClosure1 t = _1
    | & res : uint32 = any_l () ]
     [ return' (result:uint32)-> {[@expl:postcondition] [%#s10_tyinv1] UInt32.to_int result = 0} (! return' {result}) ] 
end
module T_10_tyinv__f__qyClosure0 [#"10_tyinv.rs" 15 15 15 39]
  use T_10_tyinv__Zero as Zero'0
  
  use prelude.prelude.Borrow
  
  type m_10_tyinv__f__qyClosure0 't =
    | M_10_tyinv__f__qyClosure0 (Zero'0.t_Zero 't) (Zero'0.t_Zero 't)
  
  let rec m_10_tyinv__f__qyClosure0 < 't > (input:m_10_tyinv__f__qyClosure0 't) (ret  (x:Zero'0.t_Zero 't) (y:Zero'0.t_Zero 't))= any
    [ good (x:Zero'0.t_Zero 't) (y:Zero'0.t_Zero 't)-> {M_10_tyinv__f__qyClosure0 x y = input} (! ret {x} {y}) ]
    
end
module M_10_tyinv__f__qyClosure0 [#"10_tyinv.rs" 15 15 15 39]
  type t
  
  let%span s10_tyinv0 = "10_tyinv.rs" 17 22 17 31
  let%span s10_tyinv1 = "10_tyinv.rs" 15 25 15 37
  let%span s10_tyinv2 = "10_tyinv.rs" 18 30 18 42
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span s10_tyinv4 = "10_tyinv.rs" 10 20 10 32
  
  predicate inv'6 (_1 : t)
  
  use prelude.prelude.UInt32
  
  use T_10_tyinv__Zero as T_10_tyinv__Zero
  
  use T_10_tyinv__Zero as Zero'0
  
  predicate invariant'3 [#"10_tyinv.rs" 9 4 9 30] (self : Zero'0.t_Zero t) =
    [%#s10_tyinv4] UInt32.to_int (T_10_tyinv__Zero.t_Zero__0 self) = 0
  
  predicate inv'5 (_1 : Zero'0.t_Zero t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Zero'0.t_Zero t [inv'5 x] . inv'5 x
  = (invariant'3 x
  /\ match x with
    | Zero'0.C_Zero a_0 a_1 -> inv'6 a_1
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : Zero'0.t_Zero t) =
    [%#sinvariant3] inv'5 self
  
  predicate inv'4 (_1 : Zero'0.t_Zero t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Zero'0.t_Zero t [inv'4 x] . inv'4 x = invariant'2 x
  
  use T_10_tyinv__f__qyClosure0__qyClosure1 as Closure'1
  
  predicate inv'3 (_1 : Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t [inv'3 x] . inv'3 x
  = (let Closure'1.M_10_tyinv__f__qyClosure0__qyClosure1 a = x in inv'4 a)
  
  use T_10_tyinv__f__qyClosure0 as Closure'0
  
  predicate inv'2 (_1 : Closure'0.m_10_tyinv__f__qyClosure0 t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Closure'0.m_10_tyinv__f__qyClosure0 t [inv'2 x] . inv'2 x
  = (let Closure'0.M_10_tyinv__f__qyClosure0 a b = x in inv'4 a /\ inv'4 b)
  
  predicate invariant'1 (self : Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t) =
    [%#sinvariant3] inv'3 self
  
  predicate inv'1 (_1 : Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t [inv'1 x] . inv'1 x
  = invariant'1 x
  
  predicate invariant'0 (self : Closure'0.m_10_tyinv__f__qyClosure0 t) =
    [%#sinvariant3] inv'2 self
  
  predicate inv'0 (_1 : Closure'0.m_10_tyinv__f__qyClosure0 t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Closure'0.m_10_tyinv__f__qyClosure0 t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  let rec closure1'0 (_1:Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t) (return'  (ret:uint32))= {[@expl:precondition] inv'1 _1}
    any [ return' (result:uint32)-> {[%#s10_tyinv2] UInt32.to_int result = 0} (! return' {result}) ] 
  
  function field_0'0 [#"10_tyinv.rs" 15 15 15 39] (self : Closure'0.m_10_tyinv__f__qyClosure0 t) : Zero'0.t_Zero t =
    let Closure'0.M_10_tyinv__f__qyClosure0 a _ = self in a
  
  meta "compute_max_steps" 1000000
  
  let rec m_10_tyinv__f__qyClosure0 (_1:Closure'0.m_10_tyinv__f__qyClosure0 t) (return'  (ret:uint32))= {inv'0 _1}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_tyinv0] UInt32.to_int (T_10_tyinv__Zero.t_Zero__0 (field_0'0 _1)) = 0} s1
      | s1 = Closure'0.m_10_tyinv__f__qyClosure0 <t> {_1}
          (fun (r'0:Zero'0.t_Zero t) (r'1:Zero'0.t_Zero t) ->
             [ &clos2 <- Closure'1.M_10_tyinv__f__qyClosure0__qyClosure1 r'1 ] 
            s2)
      | s2 = closure1'0 {clos2} (fun (_ret':uint32) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Closure'0.m_10_tyinv__f__qyClosure0 <t> {_1}
          (fun (r'0:Zero'0.t_Zero t) (r'1:Zero'0.t_Zero t) ->
            Zero'0.t_Zero <t> {r'0} (fun (r0'0:uint32) (r1'0:t) ->  [ &res <- r0'0 ] s1))
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : Closure'0.m_10_tyinv__f__qyClosure0 t = _1
    | & res : uint32 = any_l ()
    | & clos2 : Closure'1.m_10_tyinv__f__qyClosure0__qyClosure1 t = any_l ()
    | & _7 : uint32 = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:uint32)-> {[@expl:postcondition] [%#s10_tyinv1] UInt32.to_int result = 0} (! return' {result}) ] 
end
module M_10_tyinv__f [#"10_tyinv.rs" 14 0 14 35]
  type t
  
  let%span s10_tyinv0 = "10_tyinv.rs" 14 12 14 13
  let%span s10_tyinv1 = "10_tyinv.rs" 14 24 14 25
  let%span s10_tyinv2 = "10_tyinv.rs" 15 25 15 37
  let%span s10_tyinv3 = "10_tyinv.rs" 10 20 10 32
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use T_10_tyinv__Zero as Zero'0
  
  predicate inv'0 (_1 : Zero'0.t_Zero t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : Zero'0.t_Zero t) =
    [%#sinvariant4] inv'0 self
  
  predicate inv'4 (_1 : Zero'0.t_Zero t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Zero'0.t_Zero t [inv'4 x] . inv'4 x = invariant'2 x
  
  use T_10_tyinv__f__qyClosure0 as Closure'0
  
  predicate inv'3 (_1 : Closure'0.m_10_tyinv__f__qyClosure0 t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Closure'0.m_10_tyinv__f__qyClosure0 t [inv'3 x] . inv'3 x
  = (let Closure'0.M_10_tyinv__f__qyClosure0 a b = x in inv'4 a /\ inv'4 b)
  
  predicate invariant'1 (self : Closure'0.m_10_tyinv__f__qyClosure0 t) =
    [%#sinvariant4] inv'3 self
  
  predicate inv'1 (_1 : Closure'0.m_10_tyinv__f__qyClosure0 t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Closure'0.m_10_tyinv__f__qyClosure0 t [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'2 (_1 : t)
  
  use prelude.prelude.UInt32
  
  use T_10_tyinv__Zero as T_10_tyinv__Zero
  
  predicate invariant'0 [#"10_tyinv.rs" 9 4 9 30] (self : Zero'0.t_Zero t) =
    [%#s10_tyinv3] UInt32.to_int (T_10_tyinv__Zero.t_Zero__0 self) = 0
  
  axiom inv_axiom'0 [@rewrite] : forall x : Zero'0.t_Zero t [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Zero'0.C_Zero a_0 a_1 -> inv'2 a_1
    end)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  let rec closure0'0 (_1:Closure'0.m_10_tyinv__f__qyClosure0 t) (return'  (ret:uint32))= {[@expl:precondition] inv'1 _1}
    any [ return' (result:uint32)-> {[%#s10_tyinv2] UInt32.to_int result = 0} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec f (x:Zero'0.t_Zero t) (y:Zero'0.t_Zero t) (return'  (ret:()))= {[%#s10_tyinv1] inv'0 y}
    {[%#s10_tyinv0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &clos <- Closure'0.M_10_tyinv__f__qyClosure0 x y ] s1
      | s1 = closure0'0 {clos} (fun (_ret':uint32) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 y} s1 | s1 = {[@expl:type invariant] inv'0 x} s2 | s2 = bb2 ] 
    | bb2 = bb3
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : Zero'0.t_Zero t = x
    | & y : Zero'0.t_Zero t = y
    | & clos : Closure'0.m_10_tyinv__f__qyClosure0 t = any_l ()
    | & _6 : uint32 = any_l ()
    | & _8 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_10_tyinv__qyi17300975140940028654 [#"10_tyinv.rs" 6 0 6 29] (* <Zero<T> as creusot_contracts::Invariant> *)
  type t
end
