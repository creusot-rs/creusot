module M_10_tyinv__f [#"10_tyinv.rs" 14 0 14 35]
  let%span s10_tyinv0 = "10_tyinv.rs" 14 12 14 13
  let%span s10_tyinv1 = "10_tyinv.rs" 14 24 14 25
  let%span s10_tyinv2 = "10_tyinv.rs" 17 22 17 31
  let%span s10_tyinv3 = "10_tyinv.rs" 15 25 15 37
  let%span s10_tyinv4 = "10_tyinv.rs" 20 26 20 35
  let%span s10_tyinv5 = "10_tyinv.rs" 18 30 18 42
  let%span s10_tyinv6 = "10_tyinv.rs" 10 20 10 32
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.UInt32
  
  type t_T'0
  
  type t_Zero'0  =
    { t_Zero__0'0: uint32; t_Zero__1'0: t_T'0 }
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type closure1'1  =
    { field_0'1: t_Zero'0 }
  
  predicate invariant'0 [#"10_tyinv.rs" 9 4 9 30] (self : t_Zero'0) =
    [%#s10_tyinv6] UInt32.to_int self.t_Zero__0'0 = 0
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'0 (_1 : t_Zero'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Zero'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Zero__0'0 = a_0 ; t_Zero__1'0 = a_1} -> inv'3 a_1
    end)
  
  predicate invariant'3 (self : t_Zero'0) =
    [%#sinvariant7] inv'0 self
  
  predicate inv'6 (_1 : t_Zero'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Zero'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate inv'5 (_1 : closure1'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : closure1'1 [inv'5 x] . inv'5 x = (let {field_0'1 = x0} = x in inv'6 x0)
  
  predicate invariant'2 (self : closure1'1) =
    [%#sinvariant7] inv'5 self
  
  predicate inv'2 (_1 : closure1'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : closure1'1 [inv'2 x] . inv'2 x = invariant'2 x
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:uint32))= {[@expl:closure '_1' type invariant] inv'2 _1}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_tyinv4] UInt32.to_int (_1.field_0'1).t_Zero__0'0 = 0} s1
      | s1 =  [ &res <- (_1.field_0'1).t_Zero__0'0 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () | & _1 : closure1'1 = _1 | & res : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:closure ensures] [%#s10_tyinv5] UInt32.to_int result = 0} (! return' {result}) ]
    
  
  type closure0'1  =
    { field_0'0: t_Zero'0; field_1'0: t_Zero'0 }
  
  predicate inv'4 (_1 : closure0'1)
  
  axiom inv_axiom'3 [@rewrite] : forall x : closure0'1 [inv'4 x] . inv'4 x
  = (let {field_0'0 = x0 ; field_1'0 = x1} = x in inv'6 x0 /\ inv'6 x1)
  
  predicate invariant'1 (self : closure0'1) =
    [%#sinvariant7] inv'4 self
  
  predicate inv'1 (_1 : closure0'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : closure0'1 [inv'1 x] . inv'1 x = invariant'1 x
  
  let rec closure0'0 (_1:closure0'1) (return'  (ret:uint32))= {[@expl:closure '_1' type invariant] inv'1 _1}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_tyinv2] UInt32.to_int (_1.field_0'0).t_Zero__0'0 = 0} s1
      | s1 =  [ &clos2 <- { field_0'1 = _1.field_1'0 } ] s2
      | s2 = closure1'0 {clos2} (fun (_ret':uint32) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &res <- (_1.field_0'0).t_Zero__0'0 ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : closure0'1 = _1
    | & res : uint32 = any_l ()
    | & clos2 : closure1'1 = any_l ()
    | & _7 : uint32 = any_l ()
    | & _9 : () = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:closure ensures] [%#s10_tyinv3] UInt32.to_int result = 0} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (x:t_Zero'0) (y:t_Zero'0) (return'  (ret:()))= {[@expl:f 'x' type invariant] [%#s10_tyinv0] inv'0 x}
    {[@expl:f 'y' type invariant] [%#s10_tyinv1] inv'0 y}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &clos <- { field_0'0 = x; field_1'0 = y } ] s1
      | s1 = closure0'0 {clos} (fun (_ret':uint32) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 y} s1 | s1 = {[@expl:type invariant] inv'0 x} s2 | s2 = bb2 ] 
    | bb2 = bb3
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : t_Zero'0 = x
    | & y : t_Zero'0 = y
    | & clos : closure0'1 = any_l ()
    | & _6 : uint32 = any_l ()
    | & _8 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
