
module C01Basic_UsesClosure_Closure0_Interface
  use prelude.Borrow
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
  let function c01basic_usesclosure_closure0_0 (self : c01basic_usesclosure_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_UsesClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : c01basic_usesclosure_closure0) (_ : ()) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : c01basic_usesclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate unnest (self : c01basic_usesclosure_closure0) (_2' : c01basic_usesclosure_closure0) =
    c01basic_usesclosure_closure0_0 _2' = c01basic_usesclosure_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : borrowed c01basic_usesclosure_closure0) (_ : ()) (result : bool)
    
   =
    ([#"../01_basic.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : c01basic_usesclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_usesclosure_closure0) =
    true
  val c01Basic_UsesClosure_Closure0 [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (_1' : c01basic_usesclosure_closure0) : bool
    
end
module C01Basic_UsesClosure_Closure0
  use prelude.Borrow
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
  let function c01basic_usesclosure_closure0_0 (self : c01basic_usesclosure_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_UsesClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : c01basic_usesclosure_closure0) (_ : ()) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : c01basic_usesclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate unnest (self : c01basic_usesclosure_closure0) (_2' : c01basic_usesclosure_closure0) =
    c01basic_usesclosure_closure0_0 _2' = c01basic_usesclosure_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : borrowed c01basic_usesclosure_closure0) (_ : ()) (result : bool)
    
   =
    ([#"../01_basic.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (self : c01basic_usesclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_usesclosure_closure0) =
    true
  let rec cfg c01Basic_UsesClosure_Closure0 [@cfg:stackify] [#"../01_basic.rs" 6 14 6 16] (_1' : c01basic_usesclosure_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : c01basic_usesclosure_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- c01basic_usesclosure_closure0_0 _1;
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C01Basic_UsesClosure_Interface
  val uses_closure [@cfg:stackify] [#"../01_basic.rs" 4 0 4 21] (_1' : ()) : ()
end
module C01Basic_UsesClosure
  use prelude.Borrow
  clone C01Basic_UsesClosure_Closure0_Interface as Closure00 with
    axiom .
  let rec cfg uses_closure [@cfg:stackify] [#"../01_basic.rs" 4 0 4 21] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var y_1 : bool;
  var _x_2 : bool;
  var _3 : Closure00.c01basic_usesclosure_closure0;
  var _4 : Closure00.c01basic_usesclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    y_1 <- ([#"../01_basic.rs" 5 12 5 16] true);
    _5 <- y_1;
    _4 <- Closure00.C01Basic_UsesClosure_Closure0 _5;
    _3 <- _4;
    assume { Closure00.resolve _4 };
    _6 <- ();
    _x_2 <- ([#"../01_basic.rs" 6 13 6 21] let () = _6 in Closure00.c01Basic_UsesClosure_Closure0 _3);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C01Basic_MultiArg_Closure0_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  type c01basic_multiarg_closure0  =
    | C01Basic_MultiArg_Closure0
    
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : c01basic_multiarg_closure0) (args : (int32, int32))
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate unnest (self : c01basic_multiarg_closure0) (_2' : c01basic_multiarg_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : borrowed c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    ([#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate resolve (_1' : c01basic_multiarg_closure0) =
    true
  val c01Basic_MultiArg_Closure0 [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (_1' : c01basic_multiarg_closure0) (a : int32) (b : int32) : int32
    
end
module C01Basic_MultiArg_Closure0
  type c01basic_multiarg_closure0  =
    | C01Basic_MultiArg_Closure0
    
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : c01basic_multiarg_closure0) (args : (int32, int32))
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate unnest (self : c01basic_multiarg_closure0) (_2' : c01basic_multiarg_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : borrowed c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    ([#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (self : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate resolve (_1' : c01basic_multiarg_closure0) =
    true
  let rec cfg c01Basic_MultiArg_Closure0 [@cfg:stackify] [#"../01_basic.rs" 10 12 10 18] (_1' : c01basic_multiarg_closure0) (a : int32) (b : int32) : int32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : c01basic_multiarg_closure0;
  var a_2 : int32;
  var b_3 : int32;
  var _4 : int32;
  var _5 : int32;
  {
    _1 <- _1';
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    _4 <- a_2;
    _5 <- b_3;
    _0 <- ([#"../01_basic.rs" 10 19 10 24] _4 + _5);
    return _0
  }
  
end
module C01Basic_MultiArg_Interface
  val multi_arg [@cfg:stackify] [#"../01_basic.rs" 9 0 9 18] (_1' : ()) : ()
end
module C01Basic_MultiArg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  clone C01Basic_MultiArg_Closure0_Interface as Closure00 with
    axiom .
  let rec cfg multi_arg [@cfg:stackify] [#"../01_basic.rs" 9 0 9 18] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Closure00.c01basic_multiarg_closure0;
  var _a_2 : int32;
  var _3 : Closure00.c01basic_multiarg_closure0;
  var _4 : (int32, int32);
  {
    goto BB0
  }
  BB0 {
    x_1 <- Closure00.C01Basic_MultiArg_Closure0;
    _3 <- x_1;
    assume { Closure00.resolve x_1 };
    _4 <- ([#"../01_basic.rs" 11 17 11 18] (0 : int32), [#"../01_basic.rs" 11 20 11 21] (3 : int32));
    _a_2 <- ([#"../01_basic.rs" 11 13 11 22] let (a, b) = _4 in Closure00.c01Basic_MultiArg_Closure0 _3 a b);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C01Basic_MoveClosure_Closure0_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  type c01basic_moveclosure_closure0  =
    | C01Basic_MoveClosure_Closure0 (borrowed int32)
    
  let function c01basic_moveclosure_closure0_0 (self : c01basic_moveclosure_closure0) : borrowed int32
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_MoveClosure_Closure0 a -> a
      end
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = int32
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (self : c01basic_moveclosure_closure0) (_ : ())
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate unnest (self : c01basic_moveclosure_closure0) (_2' : c01basic_moveclosure_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (self : borrowed c01basic_moveclosure_closure0) (_ : ()) (result : ())
    
   =
    ([#"../01_basic.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (self : c01basic_moveclosure_closure0) (_ : ()) (result : ())
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_moveclosure_closure0) =
    Resolve0.resolve (c01basic_moveclosure_closure0_0 _1')
  val c01Basic_MoveClosure_Closure0 [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (_1' : borrowed c01basic_moveclosure_closure0) : ()
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C01Basic_MoveClosure_Closure0
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  type c01basic_moveclosure_closure0  =
    | C01Basic_MoveClosure_Closure0 (borrowed int32)
    
  let function c01basic_moveclosure_closure0_0 (self : c01basic_moveclosure_closure0) : borrowed int32
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_MoveClosure_Closure0 a -> a
      end
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (self : c01basic_moveclosure_closure0) (_ : ())
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate unnest (self : c01basic_moveclosure_closure0) (_2' : c01basic_moveclosure_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (self : borrowed c01basic_moveclosure_closure0) (_ : ()) (result : ())
    
   =
    ([#"../01_basic.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (self : c01basic_moveclosure_closure0) (_ : ()) (result : ())
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_moveclosure_closure0) =
    Resolve0.resolve (c01basic_moveclosure_closure0_0 _1')
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = c01basic_moveclosure_closure0
  let rec cfg c01Basic_MoveClosure_Closure0 [@cfg:stackify] [#"../01_basic.rs" 19 16 19 23] (_1' : borrowed c01basic_moveclosure_closure0) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed c01basic_moveclosure_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C01Basic_MoveClosure_Closure0 a =  * _1 in C01Basic_MoveClosure_Closure0 ({ (c01basic_moveclosure_closure0_0 ( * _1)) with current = ([#"../01_basic.rs" 20 8 20 15]  * c01basic_moveclosure_closure0_0 ( * _1) + ([#"../01_basic.rs" 20 14 20 15] (1 : int32))) })) };
    assume { Resolve1.resolve _1 };
    _0 <- ();
    return _0
  }
  
end
module C01Basic_MoveClosure_Interface
  val move_closure [@cfg:stackify] [#"../01_basic.rs" 16 0 16 21] (_1' : ()) : ()
end
module C01Basic_MoveClosure
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  clone C01Basic_MoveClosure_Closure0_Interface as Closure00 with
    predicate Resolve0.resolve = Resolve0.resolve,
    axiom .
  let rec cfg move_closure [@cfg:stackify] [#"../01_basic.rs" 16 0 16 21] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : borrowed int32;
  var _2 : int32;
  var x_3 : Closure00.c01basic_moveclosure_closure0;
  var _4 : ();
  var _5 : borrowed Closure00.c01basic_moveclosure_closure0;
  var _6 : ();
  var _7 : ();
  var _8 : borrowed Closure00.c01basic_moveclosure_closure0;
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"../01_basic.rs" 17 17 17 21] (0 : int32));
    a_1 <- borrow_mut _2;
    _2 <-  ^ a_1;
    x_3 <- Closure00.C01Basic_MoveClosure_Closure0 a_1;
    _5 <- borrow_mut x_3;
    x_3 <-  ^ _5;
    _6 <- ();
    _4 <- ([#"../01_basic.rs" 23 4 23 9] let () = _6 in Closure00.c01Basic_MoveClosure_Closure0 _5);
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut x_3;
    x_3 <-  ^ _8;
    assume { Closure00.resolve x_3 };
    _9 <- ();
    _7 <- ([#"../01_basic.rs" 24 4 24 9] let () = _9 in Closure00.c01Basic_MoveClosure_Closure0 _8);
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module C01Basic_NewRef_Interface
  type t
  use prelude.Borrow
  val new_ref [@cfg:stackify] [#"../01_basic.rs" 28 0 28 36] (_1' : ()) : borrowed t
end
module C01Basic_NewRef
  type t
  use prelude.Borrow
  val new_ref [@cfg:stackify] [#"../01_basic.rs" 28 0 28 36] (_1' : ()) : borrowed t
end
module C01Basic_MoveMut_Closure0_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  type c01basic_movemut_closure0  =
    | C01Basic_MoveMut_Closure0 (borrowed uint32)
    
  let function c01basic_movemut_closure0_0 (self : c01basic_movemut_closure0) : borrowed uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_MoveMut_Closure0 a -> a
      end
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = uint32
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (self : c01basic_movemut_closure0) (_ : ()) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate unnest (self : c01basic_movemut_closure0) (_2' : c01basic_movemut_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (self : borrowed c01basic_movemut_closure0) (_ : ()) (result : ())
    
   =
    ([#"../01_basic.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (self : c01basic_movemut_closure0) (_ : ()) (result : ())
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_movemut_closure0) =
    Resolve0.resolve (c01basic_movemut_closure0_0 _1')
  val c01Basic_MoveMut_Closure0 [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (_1' : borrowed c01basic_movemut_closure0) : ()
    ensures { unnest ( * _1') ( ^ _1') }
    
end
module C01Basic_MoveMut_Closure0
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  type c01basic_movemut_closure0  =
    | C01Basic_MoveMut_Closure0 (borrowed uint32)
    
  let function c01basic_movemut_closure0_0 (self : c01basic_movemut_closure0) : borrowed uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_MoveMut_Closure0 a -> a
      end
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  predicate precondition [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (self : c01basic_movemut_closure0) (_ : ()) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate unnest (self : c01basic_movemut_closure0) (_2' : c01basic_movemut_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (self : borrowed c01basic_movemut_closure0) (_ : ()) (result : ())
    
   =
    ([#"../01_basic.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (self : c01basic_movemut_closure0) (_ : ()) (result : ())
    
   =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_movemut_closure0) =
    Resolve0.resolve (c01basic_movemut_closure0_0 _1')
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = c01basic_movemut_closure0
  clone C01Basic_NewRef_Interface as NewRef0 with
    type t = uint32
  let rec cfg c01Basic_MoveMut_Closure0 [@cfg:stackify] [#"../01_basic.rs" 35 16 35 23] (_1' : borrowed c01basic_movemut_closure0) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed c01basic_movemut_closure0;
  var _2 : borrowed uint32;
  var _3 : borrowed uint32;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _3 <- ([#"../01_basic.rs" 36 12 36 21] NewRef0.new_ref ());
    goto BB1
  }
  BB1 {
    _2 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _2) };
    assume { Resolve0.resolve _3 };
    assume { Resolve0.resolve (c01basic_movemut_closure0_0 ( * _1)) };
    _1 <- { _1 with current = (let C01Basic_MoveMut_Closure0 a =  * _1 in C01Basic_MoveMut_Closure0 _2) };
    _2 <- any borrowed uint32;
    assume { Resolve1.resolve _1 };
    _0 <- ();
    return _0
  }
  
end
module C01Basic_MoveMut_Interface
  val move_mut [@cfg:stackify] [#"../01_basic.rs" 32 0 32 17] (_1' : ()) : ()
end
module C01Basic_MoveMut
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  clone C01Basic_MoveMut_Closure0_Interface as Closure00 with
    predicate Resolve0.resolve = Resolve0.resolve,
    axiom .
  let rec cfg move_mut [@cfg:stackify] [#"../01_basic.rs" 32 0 32 17] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : borrowed uint32;
  var _2 : uint32;
  var a_3 : Closure00.c01basic_movemut_closure0;
  var _4 : ();
  var _5 : borrowed Closure00.c01basic_movemut_closure0;
  var _6 : ();
  var _7 : ();
  var _8 : borrowed Closure00.c01basic_movemut_closure0;
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    _2 <- ([#"../01_basic.rs" 33 21 33 25] (0 : uint32));
    x_1 <- borrow_mut _2;
    _2 <-  ^ x_1;
    a_3 <- Closure00.C01Basic_MoveMut_Closure0 x_1;
    _5 <- borrow_mut a_3;
    a_3 <-  ^ _5;
    _6 <- ();
    _4 <- ([#"../01_basic.rs" 38 4 38 9] let () = _6 in Closure00.c01Basic_MoveMut_Closure0 _5);
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut a_3;
    a_3 <-  ^ _8;
    assume { Closure00.resolve a_3 };
    _9 <- ();
    _7 <- ([#"../01_basic.rs" 39 4 39 9] let () = _9 in Closure00.c01Basic_MoveMut_Closure0 _8);
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
