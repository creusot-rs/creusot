
module C01Basic_UsesClosure_Closure0_Interface
  use prelude.Borrow
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
  let function c01basic_usesclosure_closure0_0 (self : c01basic_usesclosure_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_UsesClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_ : ()) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_ : ()) (result : bool) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c01basic_usesclosure_closure0) (_ : ()) (result : bool) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition_once [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_ : ()) (result : bool) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_usesclosure_closure0) =
    true
  val c01Basic_UsesClosure_Closure0 [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) : bool
end
module C01Basic_UsesClosure_Closure0
  use prelude.Borrow
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
  let function c01basic_usesclosure_closure0_0 (self : c01basic_usesclosure_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Basic_UsesClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_ : ()) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_ : ()) (result : bool) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c01basic_usesclosure_closure0) (_ : ()) (result : bool) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate postcondition_once [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_ : ()) (result : bool) =
    [#"../01_basic.rs" 1 0 1 0] true
  predicate resolve (_1' : c01basic_usesclosure_closure0) =
    true
  let rec cfg c01Basic_UsesClosure_Closure0 [@cfg:stackify] [#"../01_basic.rs" 5 14 5 16] (_1' : c01basic_usesclosure_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : c01basic_usesclosure_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- c01basic_usesclosure_closure0_0 _1;
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module C01Basic_UsesClosure_Interface
  val uses_closure [@cfg:stackify] (_ : ()) : ()
end
module C01Basic_UsesClosure
  use prelude.Borrow
  clone C01Basic_UsesClosure_Closure0_Interface as Closure00 with axiom .
  let rec cfg uses_closure [@cfg:stackify] [#"../01_basic.rs" 3 0 3 21] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var y_1 : bool;
  var _x_2 : bool;
  var _3 : Closure00.c01basic_usesclosure_closure0;
  var _4 : Closure00.c01basic_usesclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    y_1 <- true;
    _5 <- y_1;
    _4 <- Closure00.C01Basic_UsesClosure_Closure0 _5;
    _3 <- _4;
    assume { Closure00.resolve _4 };
    _6 <- ();
    _x_2 <- ([#"../01_basic.rs" 5 13 5 21] let () = _6 in Closure00.c01Basic_UsesClosure_Closure0 _3);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C01Basic_MultiArg_Closure0_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  type c01basic_multiarg_closure0  =
    | C01Basic_MultiArg_Closure0
    
  predicate precondition [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (args : (int32, int32)) =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32) =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate resolve (_1' : c01basic_multiarg_closure0) =
    true
  val c01Basic_MultiArg_Closure0 [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (a : int32) (b : int32) : int32
end
module C01Basic_MultiArg_Closure0
  type c01basic_multiarg_closure0  =
    | C01Basic_MultiArg_Closure0
    
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  predicate precondition [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (args : (int32, int32)) =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32) =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c01basic_multiarg_closure0) (args : (int32, int32)) (result : int32)
    
   =
    [#"../01_basic.rs" 1 0 1 0] let (a, b) = args in true
  predicate resolve (_1' : c01basic_multiarg_closure0) =
    true
  let rec cfg c01Basic_MultiArg_Closure0 [@cfg:stackify] [#"../01_basic.rs" 9 12 9 18] (_1' : c01basic_multiarg_closure0) (a : int32) (b : int32) : int32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : c01basic_multiarg_closure0;
  var a_2 : int32;
  var b_3 : int32;
  var _4 : int32;
  var _5 : int32;
  {
    _1 <- _1';
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    _4 <- a_2;
    _5 <- b_3;
    _0 <- ([#"../01_basic.rs" 9 19 9 24] _4 + _5);
    return _0
  }
  
end
module C01Basic_MultiArg_Interface
  val multi_arg [@cfg:stackify] (_ : ()) : ()
end
module C01Basic_MultiArg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  clone C01Basic_MultiArg_Closure0_Interface as Closure00 with axiom .
  let rec cfg multi_arg [@cfg:stackify] [#"../01_basic.rs" 8 0 8 18] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Closure00.c01basic_multiarg_closure0;
  var _a_2 : int32;
  var _3 : Closure00.c01basic_multiarg_closure0;
  var _4 : (int32, int32);
  {
    goto BB0
  }
  BB0 {
    x_1 <- Closure00.C01Basic_MultiArg_Closure0;
    _3 <- x_1;
    assume { Closure00.resolve x_1 };
    _4 <- ((0 : int32), (3 : int32));
    _a_2 <- ([#"../01_basic.rs" 10 13 10 22] let (a, b) = _4 in Closure00.c01Basic_MultiArg_Closure0 _3 a b);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
