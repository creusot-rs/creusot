
module C01Basic_UsesClosure_Closure0_Type
  use prelude.Int8
  use prelude.Borrow
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
end
module C01Basic_UsesClosure_Closure0
  use prelude.Int8
  use C01Basic_UsesClosure_Closure0_Type as C01Basic_UsesClosure_Closure0
  use prelude.Borrow
  function field_00 [#"../01_basic.rs" 6 14 6 16] (self : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) : bool
    
   =
    let C01Basic_UsesClosure_Closure0.C01Basic_UsesClosure_Closure0 a = self in a
  val field_00 [#"../01_basic.rs" 6 14 6 16] (self : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) : bool
    ensures { result = field_00 self }
    
  let rec cfg c01Basic_UsesClosure_Closure0 [#"../01_basic.rs" 6 14 6 16] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0 = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 6 17 6 18] _0 <- ([#"../01_basic.rs" 6 17 6 18] field_00 _1);
    return _0
  }
  
end
module C01Basic_UsesClosure
  use prelude.Int8
  use C01Basic_UsesClosure_Closure0_Type as C01Basic_UsesClosure_Closure0
  predicate resolve0 [#"../01_basic.rs" 6 14 6 16] (_1 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) =
    true
  use prelude.Borrow
  function field_00 [#"../01_basic.rs" 6 14 6 16] (self : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) : bool
    
   =
    let C01Basic_UsesClosure_Closure0.C01Basic_UsesClosure_Closure0 a = self in a
  val field_00 [#"../01_basic.rs" 6 14 6 16] (self : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) : bool
    ensures { result = field_00 self }
    
  val closure00 [#"../01_basic.rs" 6 14 6 16] (_1 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0) : bool
  let rec cfg uses_closure [#"../01_basic.rs" 4 0 4 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var y : bool;
  var _x : bool;
  var _4 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 5 12 5 16] y <- ([#"../01_basic.rs" 5 12 5 16] [#"../01_basic.rs" 5 12 5 16] true);
    [#"../01_basic.rs" 6 13 6 19] _4 <- ([#"../01_basic.rs" 6 13 6 19] C01Basic_UsesClosure_Closure0.C01Basic_UsesClosure_Closure0 ([#"../01_basic.rs" 6 13 6 19] y));
    [#"../01_basic.rs" 6 13 6 21] _x <- ([#"../01_basic.rs" 6 13 6 21] let () = [#"../01_basic.rs" 6 13 6 21] () in closure00 ([#"../01_basic.rs" 6 13 6 19] _4));
    goto BB1
  }
  BB1 {
    assume { resolve0 _4 };
    [#"../01_basic.rs" 4 22 7 1] _0 <- ([#"../01_basic.rs" 4 22 7 1] ());
    return _0
  }
  
end
module C01Basic_MultiArg_Closure0_Type
  use prelude.Int32
  use prelude.Int8
  type c01basic_multiarg_closure0  =
    | C01Basic_MultiArg_Closure0
    
end
module C01Basic_MultiArg_Closure0
  use prelude.Int8
  use prelude.Int32
  use C01Basic_MultiArg_Closure0_Type as C01Basic_MultiArg_Closure0
  use prelude.Borrow
  use prelude.Int
  let rec cfg c01Basic_MultiArg_Closure0 [#"../01_basic.rs" 10 12 10 18] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C01Basic_MultiArg_Closure0.c01basic_multiarg_closure0) (a : int32) (b : int32) : int32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var a : int32 = a;
  var b : int32 = b;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 10 19 10 24] _0 <- ([#"../01_basic.rs" 10 19 10 24] ([#"../01_basic.rs" 10 19 10 20] a) + ([#"../01_basic.rs" 10 23 10 24] b));
    return _0
  }
  
end
module C01Basic_MultiArg
  use prelude.Int32
  use prelude.Int8
  use C01Basic_MultiArg_Closure0_Type as C01Basic_MultiArg_Closure0
  predicate resolve0 [#"../01_basic.rs" 10 12 10 18] (_1 : C01Basic_MultiArg_Closure0.c01basic_multiarg_closure0) =
    true
  use prelude.Borrow
  use prelude.Int
  val closure00 [#"../01_basic.rs" 10 12 10 18] (_1 : C01Basic_MultiArg_Closure0.c01basic_multiarg_closure0) (a : int32) (b : int32) : int32
    
  let rec cfg multi_arg [#"../01_basic.rs" 9 0 9 18] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : C01Basic_MultiArg_Closure0.c01basic_multiarg_closure0;
  var _a : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 10 12 10 24] x <- ([#"../01_basic.rs" 10 12 10 24] C01Basic_MultiArg_Closure0.C01Basic_MultiArg_Closure0);
    [#"../01_basic.rs" 11 13 11 22] _a <- ([#"../01_basic.rs" 11 13 11 22] let (a, b) = [#"../01_basic.rs" 11 13 11 22] (([#"../01_basic.rs" 11 17 11 18] [#"../01_basic.rs" 11 17 11 18] (0 : int32)), ([#"../01_basic.rs" 11 20 11 21] [#"../01_basic.rs" 11 20 11 21] (3 : int32))) in closure00 ([#"../01_basic.rs" 11 13 11 16] x) a b);
    goto BB1
  }
  BB1 {
    assume { resolve0 x };
    [#"../01_basic.rs" 9 19 12 1] _0 <- ([#"../01_basic.rs" 9 19 12 1] ());
    return _0
  }
  
end
module C01Basic_MoveClosure_Closure0_Type
  use prelude.Int16
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  type c01basic_moveclosure_closure0  =
    | C01Basic_MoveClosure_Closure0 (borrowed int32)
    
end
module C01Basic_MoveClosure_Closure0
  use prelude.Int16
  use prelude.Int32
  use prelude.Borrow
  use C01Basic_MoveClosure_Closure0_Type as C01Basic_MoveClosure_Closure0
  predicate unnest0 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) (_2 : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0)
    
   =
    true
  predicate resolve0 (self : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  function field_00 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : borrowed int32
    
   =
    let C01Basic_MoveClosure_Closure0.C01Basic_MoveClosure_Closure0 a = self in a
  val field_00 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : borrowed int32
    ensures { result = field_00 self }
    
  let rec cfg c01Basic_MoveClosure_Closure0 [#"../01_basic.rs" 19 16 19 23] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : ()
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0 = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 20 8 20 15] _1 <- { _1 with current = (let C01Basic_MoveClosure_Closure0.C01Basic_MoveClosure_Closure0 x0 =  * _1 in C01Basic_MoveClosure_Closure0.C01Basic_MoveClosure_Closure0 ({ (field_00 ( * _1)) with current = ([#"../01_basic.rs" 20 8 20 15]  * field_00 ( * _1) + ([#"../01_basic.rs" 20 14 20 15] [#"../01_basic.rs" 20 14 20 15] (1 : int32))) })) };
    assume { resolve0 _1 };
    [#"../01_basic.rs" 19 24 21 5] _0 <- ([#"../01_basic.rs" 19 24 21 5] ());
    return _0
  }
  
end
module C01Basic_MoveClosure
  use prelude.Borrow
  use prelude.Int32
  predicate resolve2 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed int32) : bool
    ensures { result = resolve2 self }
    
  use prelude.Int
  use prelude.Int16
  use C01Basic_MoveClosure_Closure0_Type as C01Basic_MoveClosure_Closure0
  function field_00 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : borrowed int32
    
   =
    let C01Basic_MoveClosure_Closure0.C01Basic_MoveClosure_Closure0 a = self in a
  val field_00 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : borrowed int32
    ensures { result = field_00 self }
    
  predicate resolve0 [#"../01_basic.rs" 19 16 19 23] (_1 : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0)
   =
    resolve2 (field_00 _1)
  predicate unnest0 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) (_2 : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0)
    
   =
    true
  predicate resolve1 (self : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : bool
    ensures { result = resolve1 self }
    
  val closure00 [#"../01_basic.rs" 19 16 19 23] (_1 : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0) : ()
    ensures { unnest0 ( * _1) ( ^ _1) }
    
  let rec cfg move_closure [#"../01_basic.rs" 16 0 16 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed int32;
  var _2 : int32;
  var x : C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0;
  var _4 : ();
  var _5 : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0;
  var _7 : ();
  var _8 : borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 17 17 17 21] _2 <- ([#"../01_basic.rs" 17 17 17 21] [#"../01_basic.rs" 17 17 17 21] (0 : int32));
    [#"../01_basic.rs" 17 12 17 21] a <- Borrow.borrow_mut _2;
    [#"../01_basic.rs" 17 12 17 21] _2 <-  ^ a;
    [#"../01_basic.rs" 19 16 21 5] x <- ([#"../01_basic.rs" 19 16 21 5] C01Basic_MoveClosure_Closure0.C01Basic_MoveClosure_Closure0 a);
    a <- any borrowed int32;
    [#"../01_basic.rs" 23 4 23 7] _5 <- Borrow.borrow_mut x;
    [#"../01_basic.rs" 23 4 23 7] x <-  ^ _5;
    [#"../01_basic.rs" 23 4 23 9] _4 <- ([#"../01_basic.rs" 23 4 23 9] let () = [#"../01_basic.rs" 23 4 23 9] () in closure00 _5);
    _5 <- any borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0;
    goto BB1
  }
  BB1 {
    [#"../01_basic.rs" 24 4 24 7] _8 <- Borrow.borrow_mut x;
    [#"../01_basic.rs" 24 4 24 7] x <-  ^ _8;
    [#"../01_basic.rs" 24 4 24 9] _7 <- ([#"../01_basic.rs" 24 4 24 9] let () = [#"../01_basic.rs" 24 4 24 9] () in closure00 _8);
    _8 <- any borrowed C01Basic_MoveClosure_Closure0.c01basic_moveclosure_closure0;
    goto BB2
  }
  BB2 {
    assume { resolve0 x };
    [#"../01_basic.rs" 16 22 25 1] _0 <- ([#"../01_basic.rs" 16 22 25 1] ());
    return _0
  }
  
end
module C01Basic_MoveMut_Closure0_Type
  use prelude.Int16
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c01basic_movemut_closure0  =
    | C01Basic_MoveMut_Closure0 (borrowed uint32)
    
end
module C01Basic_MoveMut_Closure0
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed uint32)
  val inv0 (_x : borrowed uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed uint32 . inv0 x = true
  use prelude.Int16
  use C01Basic_MoveMut_Closure0_Type as C01Basic_MoveMut_Closure0
  predicate unnest0 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) (_2 : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0)
    
   =
    true
  predicate resolve1 (self : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : bool
    ensures { result = resolve1 self }
    
  use prelude.Int
  function field_00 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : borrowed uint32
    
   =
    let C01Basic_MoveMut_Closure0.C01Basic_MoveMut_Closure0 a = self in a
  val field_00 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : borrowed uint32
    ensures { result = field_00 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  val new_ref0 [#"../01_basic.rs" 28 0 28 36] (_1 : ()) : borrowed uint32
    ensures { [#"../01_basic.rs" 28 27 28 36] inv0 result }
    
  let rec cfg c01Basic_MoveMut_Closure0 [#"../01_basic.rs" 35 16 35 23] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : ()
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0 = _1;
  var _2 : borrowed uint32;
  var _3 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 36 12 36 21] _3 <- ([#"../01_basic.rs" 36 12 36 21] new_ref0 ());
    goto BB1
  }
  BB1 {
    [#"../01_basic.rs" 36 12 36 21] _2 <- Borrow.borrow_mut ( * _3);
    [#"../01_basic.rs" 36 12 36 21] _3 <- { _3 with current =  ^ _2 };
    [#"../01_basic.rs" 36 8 36 21] _1 <- { _1 with current = (let C01Basic_MoveMut_Closure0.C01Basic_MoveMut_Closure0 x0 =  * _1 in C01Basic_MoveMut_Closure0.C01Basic_MoveMut_Closure0 ([#"../01_basic.rs" 36 8 36 21] _2)) };
    [#"../01_basic.rs" 36 8 36 21] _2 <- any borrowed uint32;
    assume { resolve0 (field_00 ( * _1)) };
    assume { resolve1 _1 };
    assume { resolve0 _3 };
    [#"../01_basic.rs" 35 24 37 5] _0 <- ([#"../01_basic.rs" 35 24 37 5] ());
    return _0
  }
  
end
module C01Basic_MoveMut
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed uint32)
  val inv0 (_x : borrowed uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed uint32 . inv0 x = true
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  use prelude.Int
  use prelude.Int16
  use C01Basic_MoveMut_Closure0_Type as C01Basic_MoveMut_Closure0
  function field_00 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : borrowed uint32
    
   =
    let C01Basic_MoveMut_Closure0.C01Basic_MoveMut_Closure0 a = self in a
  val field_00 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : borrowed uint32
    ensures { result = field_00 self }
    
  predicate resolve0 [#"../01_basic.rs" 35 16 35 23] (_1 : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) =
    resolve1 (field_00 _1)
  predicate unnest0 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) (_2 : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0)
    
   =
    true
  predicate resolve2 (self : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : bool
    ensures { result = resolve2 self }
    
  val new_ref0 [#"../01_basic.rs" 28 0 28 36] (_1 : ()) : borrowed uint32
    ensures { [#"../01_basic.rs" 28 27 28 36] inv0 result }
    
  val closure00 [#"../01_basic.rs" 35 16 35 23] (_1 : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0) : ()
    ensures { unnest0 ( * _1) ( ^ _1) }
    
  let rec cfg move_mut [#"../01_basic.rs" 32 0 32 17] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : borrowed uint32;
  var _2 : uint32;
  var a : C01Basic_MoveMut_Closure0.c01basic_movemut_closure0;
  var _4 : ();
  var _5 : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0;
  var _7 : ();
  var _8 : borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0;
  {
    goto BB0
  }
  BB0 {
    [#"../01_basic.rs" 33 21 33 25] _2 <- ([#"../01_basic.rs" 33 21 33 25] [#"../01_basic.rs" 33 21 33 25] (0 : uint32));
    [#"../01_basic.rs" 33 16 33 25] x <- Borrow.borrow_mut _2;
    [#"../01_basic.rs" 33 16 33 25] _2 <-  ^ x;
    [#"../01_basic.rs" 35 16 37 5] a <- ([#"../01_basic.rs" 35 16 37 5] C01Basic_MoveMut_Closure0.C01Basic_MoveMut_Closure0 x);
    x <- any borrowed uint32;
    [#"../01_basic.rs" 38 4 38 7] _5 <- Borrow.borrow_mut a;
    [#"../01_basic.rs" 38 4 38 7] a <-  ^ _5;
    [#"../01_basic.rs" 38 4 38 9] _4 <- ([#"../01_basic.rs" 38 4 38 9] let () = [#"../01_basic.rs" 38 4 38 9] () in closure00 _5);
    _5 <- any borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0;
    goto BB1
  }
  BB1 {
    [#"../01_basic.rs" 39 4 39 7] _8 <- Borrow.borrow_mut a;
    [#"../01_basic.rs" 39 4 39 7] a <-  ^ _8;
    [#"../01_basic.rs" 39 4 39 9] _7 <- ([#"../01_basic.rs" 39 4 39 9] let () = [#"../01_basic.rs" 39 4 39 9] () in closure00 _8);
    _8 <- any borrowed C01Basic_MoveMut_Closure0.c01basic_movemut_closure0;
    goto BB2
  }
  BB2 {
    assume { resolve0 a };
    [#"../01_basic.rs" 32 18 40 1] _0 <- ([#"../01_basic.rs" 32 18 40 1] ());
    return _0
  }
  
end
