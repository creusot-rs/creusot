module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_05_map__Map [#"05_map.rs" 12 0 12 20]
  type t_Map 'i 'f =
    | C_Map 'i 'f
  
  let rec t_Map < 'i > < 'f > (input:t_Map 'i 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Map iter func = input} (! ret {iter} {func}) ]
    
end
module M_05_map__qyi6135204174218663437__next [#"05_map.rs" 20 4 20 44] (* <Map<I, F> as FakeIterator> *)
  type a
  
  type b
  
  type f
  
  type i
  
  let%span s05_map0 = "05_map.rs" 20 17 20 21
  let%span s05_map1 = "05_map.rs" 20 26 20 44
  let%span s05_map2 = "05_map.rs" 8 17 8 21
  let%span s05_map3 = "05_map.rs" 8 26 8 44
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 169 27 169 52
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 151 0 175 1
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 141 14 141 100
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 147 14 147 101
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  
  predicate inv'10 (_1 : f)
  
  predicate inv'0 (_1 : i)
  
  use T_05_map__Map as Map'0
  
  predicate inv'9 (_1 : Map'0.t_Map i f)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Map'0.t_Map i f [inv'9 x] . inv'9 x
  = match x with
    | Map'0.C_Map iter func -> inv'0 iter /\ inv'10 func
    end
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : a) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : b . [%#sops17] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'3 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops14] unnest'0 self b)
   -> ([%#sops15] unnest'0 b c)  -> ([%#sops16] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops13] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : b . ([%#sops11] postcondition_mut'0 self args res)
   -> ([%#sops12] unnest'0 self.current self.final)
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : b)
  
  function fn_once'0 (self : f) (args : a) (res : b) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : b . [%#sops8] postcondition_once'0 self args res
  = (resolve'3 self /\ postcondition'0 self args res)
  
  predicate resolve'2 (self : borrowed f) =
    [%#sresolve6] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : b) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : b . [%#sops7] postcondition_mut'0 self args res
  = (resolve'2 self /\ postcondition'0 self.current args res)
  
  predicate inv'8 (_1 : a)
  
  predicate inv'6 (_1 : a)
  
  axiom inv_axiom'5 [@rewrite] : forall x : a [inv'6 x] . inv'6 x = (let (a) = x in inv'8 a)
  
  predicate invariant'2 (self : f) =
    [%#sinvariant10] inv'10 self
  
  predicate inv'5 (_1 : f)
  
  axiom inv_axiom'4 [@rewrite] : forall x : f [inv'5 x] . inv'5 x = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option a)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option a [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'8 a_0
    end
  
  predicate invariant'1 (self : borrowed i) =
    [%#sinvariant9] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate inv'7 (_1 : b)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option b [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'0 (self : borrowed (Map'0.t_Map i f)) =
    [%#sinvariant9] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'1 (_1 : borrowed (Map'0.t_Map i f))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Map'0.t_Map i f) [inv'1 x] . inv'1 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Map'0.t_Map i f)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Map'0.t_Map i f)) =
    resolve'1 _1
  
  predicate precondition'0 (self : f) (_2 : a)
  
  let rec call'0 (self:f) (args:a) (return'  (ret:b))= {[@expl:precondition] inv'6 args}
    {[@expl:precondition] inv'5 self}
    {[@expl:precondition] [%#sops4] precondition'0 self args}
    any [ return' (result:b)-> {inv'7 result} {[%#sops5] postcondition'0 self args result} (! return' {result}) ] 
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option a))= {[@expl:precondition] [%#s05_map2] inv'3 self}
    any [ return' (result:Option'0.t_Option a)-> {[%#s05_map3] inv'4 result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Map'0.t_Map i f)) (return'  (ret:Option'0.t_Option b))= {[%#s05_map0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Map'0.t_Map <i> <f> {self.current}
          (fun (riter'0:i) (rfunc'0:f) ->
            {inv'0 riter'0}
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_3 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Map'0.C_Map _ret'.final rfunc'0 ; } ] 
                s1))
      | s1 = next'0 {_3} (fun (_ret':Option'0.t_Option a) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_2 = Option'0.C_None } (! bb3) | br1 (a:a)-> {_2 = Option'0.C_Some a} (! bb4) ] 
    | bb4 = s0
      [ s0 = Option'0.v_Some <a> {_2} (fun (r0'0:a) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_8 <- (e) ] s2
      | s2 = Map'0.t_Map <i> <f> {self.current}
          (fun (riter'0:i) (rfunc'0:f) -> call'0 {rfunc'0} {_8} (fun (_ret':b) ->  [ &_6 <- _ret' ] s3))
      | s3 = bb6 ]
      
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb7 ] 
    | bb7 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _6 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = bb10
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option b = any_l ()
    | & self : borrowed (Map'0.t_Map i f) = self
    | & _2 : Option'0.t_Option a = any_l ()
    | & _3 : borrowed i = any_l ()
    | & e : a = any_l ()
    | & _6 : b = any_l ()
    | & _8 : a = any_l () ]
     [ return' (result:Option'0.t_Option b)-> {[@expl:postcondition] [%#s05_map1] inv'2 result} (! return' {result}) ] 
end
module M_05_map__qyi6135204174218663437 [#"05_map.rs" 17 0 17 79] (* <Map<I, F> as FakeIterator> *)
  type a
  
  type b
  
  type f
  
  type i
  
  let%span s05_map0 = "05_map.rs" 20 4 20 44
  let%span sinvariant1 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'5 (_1 : f)
  
  predicate inv'4 (_1 : i)
  
  use T_05_map__Map as Map'0
  
  predicate inv'3 (_1 : Map'0.t_Map i f)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Map'0.t_Map i f [inv'3 x] . inv'3 x
  = match x with
    | Map'0.C_Map iter func -> inv'4 iter /\ inv'5 func
    end
  
  predicate inv'2 (_1 : b)
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option b)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option b [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Map'0.t_Map i f)) =
    [%#sinvariant1] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (Map'0.t_Map i f))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Map'0.t_Map i f) [inv'0 x] . inv'0 x = invariant'0 x
  
  goal next_refn : [%#s05_map0] forall self : borrowed (Map'0.t_Map i f) . inv'0 self
   -> inv'0 self /\ (forall result : Option'0.t_Option b . inv'1 result  -> inv'1 result)
end
