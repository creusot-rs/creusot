
module C05Map_Map_Type
  type t_map 'i 'f =
    | C_Map 'i 'f
    
  function any_l (_ : 'b) : 'a
  let rec t_map < 'i > < 'f > (input:t_map 'i 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Map iter func = input} (! ret {iter} {func})
    | bad (iter:'i) (func:'f)-> {C_Map iter func <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C05Map_Impl0_Next
  type a
  type b
  type f
  type i
  predicate invariant'9 (self : f)
  let rec invariant'9 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'9 self} (! return' {result}) ]
    
  predicate inv'9 (_x : f)
  let rec inv'9 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'9 _x} (! return' {result}) ] 
  axiom inv'9 : forall x : f . inv'9 x = true
  predicate resolve'3 (self : f)
  let rec resolve'3 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:a) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'8 (_x : borrowed f)
  let rec inv'8 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'8 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:a) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'7 (_x : b)
  let rec inv'7 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ] 
  predicate inv'6 (_x : a)
  let rec inv'6 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : a) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'7 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'9 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'8 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'3 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'9 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'9 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'9 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'9 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'9 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'9 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'7 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'8 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'8 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'8 (self : borrowed f)
  let rec invariant'8 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'8 self} (! return' {result}) ]
    
  axiom inv'8 : forall x : borrowed f . inv'8 x = true
  predicate invariant'7 (self : b)
  let rec invariant'7 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  axiom inv'7 : forall x : b . inv'7 x = true
  predicate postcondition'0 (self : f) (_2 : a) (_3 : b)
  let rec postcondition'0 (self:f) (_2:a) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2 _3} (! return' {result}) ]
    
  function fn_once'0 (self : f) (args : a) (res : b) : ()
  let rec fn_once'0 (self:f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'7 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'9 self}
    any [ return' (result:())-> {result = fn_once'0 self args res} (! return' {result}) ] 
  axiom fn_once'0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once'0 self args res
  = (resolve'3 self /\ postcondition'0 self args res))
  predicate resolve'2 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  function fn_mut'0 (self : borrowed f) (args : a) (res : b) : ()
  let rec fn_mut'0 (self:borrowed f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'7 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'6 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'8 self}
    any [ return' (result:())-> {result = fn_mut'0 self args res} (! return' {result}) ] 
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'8 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut'0 self args res
  = (resolve'2 self /\ postcondition'0 ( * self) args res))
  predicate invariant'6 (self : a)
  let rec invariant'6 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  axiom inv'6 : forall x : a . inv'6 x = true
  predicate invariant'5 (self : f)
  let rec invariant'5 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : f)
  let rec inv'5 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : f . inv'5 x = true
  predicate invariant'4 (self : borrowed i)
  let rec invariant'4 (self:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed i)
  let rec inv'4 (_x:borrowed i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option b)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option b)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option b . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option a)
  let rec invariant'2 (self:Core_Option_Option_Type.t_option a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option a)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option a . inv'2 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant'1 (self : borrowed (C05Map_Map_Type.t_map i f))
  let rec invariant'1 (self:borrowed (C05Map_Map_Type.t_map i f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (C05Map_Map_Type.t_map i f))
  let rec inv'1 (_x:borrowed (C05Map_Map_Type.t_map i f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (C05Map_Map_Type.t_map i f) . inv'1 x = true
  predicate invariant'0 (self : i)
  let rec invariant'0 (self:i) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : i)
  let rec inv'0 (_x:i) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : i . inv'0 x = true
  use prelude.Intrinsic
  predicate precondition'0 (self : f) (_2 : a)
  let rec precondition'0 (self:f) (_2:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  let rec call'0 (self:f) (args:a) (return'  (ret:b))= {[@expl:precondition] inv'6 args}
    {[@expl:precondition] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition'0 self args}
    any
    [ return' (result:b)-> {inv'7 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition'0 self args result}
      (! return' {result}) ]
    
  predicate resolve'1 (self : Core_Option_Option_Type.t_option a)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (C05Map_Map_Type.t_map i f)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (C05Map_Map_Type.t_map i f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed i) (return'  (ret:Core_Option_Option_Type.t_option a))= {[@expl:precondition] [#"../05_map.rs" 6 17 6 21] inv'4 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option a)-> {[#"../05_map.rs" 6 26 6 44] inv'2 result}
      (! return' {result}) ]
    
  let rec next (self:borrowed (C05Map_Map_Type.t_map i f)) (return'  (ret:Core_Option_Option_Type.t_option b))= {[#"../05_map.rs" 17 17 17 21] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = C05Map_Map_Type.t_map <i> <f> { * self}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_3 <- _ret' ] 
                C05Map_Map_Type.t_map <i> <f> { * self}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                    
                    [ &self <- { self with current = (C05Map_Map_Type.C_Map ( ^ _3) l_func'0 : C05Map_Map_Type.t_map i f) ; } ]
                    
                    s1)))
      | s1 = -{inv'0 ( ^ _3)}- s2
      | s2 = next'0 {_3} (fun (_ret':Core_Option_Option_Type.t_option a) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = any
        [ br0 -> {_2 = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:a)-> {_2 = Core_Option_Option_Type.C_Some a} (! bb4) ]
         ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[@expl:type invariant] inv'2 _2} s3
      | s3 = -{resolve'1 _2}- s4
      | s4 = {[#"../05_map.rs" 18 14 18 30] false} any ]
      
    | bb4 = s0
      [ s0 = Core_Option_Option_Type.some <a> {_2}
          (fun (r0'0:a) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:a)-> (! Core_Option_Option_Type.some <a> {_2}
                (fun (l_0'0:a) ->
                   [ &_2 <- Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option a ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 _2} s2
      | s2 = -{resolve'1 _2}- s3
      | s3 =  [ &_8 <- (e) ] (any [ any_ (_any:a)-> (!  [ &e <- _any ] s4) ] )
      | s4 = C05Map_Map_Type.t_map <i> <f> { * self}
          (fun (riter'0:i) (rfunc'0:f) -> call'0 {rfunc'0} {_8} (fun (_ret':b) ->  [ &_6 <- _ret' ] s5))
      | s5 = bb6 ]
      
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Core_Option_Option_Type.C_Some _6 : Core_Option_Option_Type.t_option b ] 
        (any [ any_ (_any:b)-> (!  [ &_6 <- _any ] s3) ] )
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb3 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 _2} s1
      | s1 = -{resolve'1 _2}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'0 self}- s4
      | s4 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option b ] s5
      | s5 = bb10 ]
      
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option b = any_l () : Core_Option_Option_Type.t_option b
    | & self : borrowed (C05Map_Map_Type.t_map i f) = self
    | & _2 : Core_Option_Option_Type.t_option a = any_l () : Core_Option_Option_Type.t_option a
    | & _3 : borrowed i = any_l () : borrowed i
    | & e : a = any_l () : a
    | & _6 : b = any_l () : b
    | & _8 : a = any_l () : a ]
    
    [ return' (result:Core_Option_Option_Type.t_option b)-> {[@expl:postcondition] [#"../05_map.rs" 17 26 17 44] inv'3 result}
      (! return' {result}) ]
    
end
module C05Map_Impl0
  type a
  type b
  type f
  type i
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option b)
  let rec invariant'1 (self:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option b)
  let rec inv'1 (_x:Core_Option_Option_Type.t_option b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option b . inv'1 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  use prelude.Borrow
  predicate invariant'0 (self : borrowed (C05Map_Map_Type.t_map i f))
  let rec invariant'0 (self:borrowed (C05Map_Map_Type.t_map i f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (C05Map_Map_Type.t_map i f))
  let rec inv'0 (_x:borrowed (C05Map_Map_Type.t_map i f)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (C05Map_Map_Type.t_map i f) . inv'0 x = true
  goal next_refn : [#"../05_map.rs" 17 4 17 44] forall self : borrowed (C05Map_Map_Type.t_map i f) . inv'0 self
   -> inv'0 self /\ (forall result : Core_Option_Option_Type.t_option b . inv'1 result  -> inv'1 result)
end
