module M_05_map__qyi6135204174218663437__next [#"05_map.rs" 20 4 20 44] (* <Map<I, F> as FakeIterator> *)
  let%span s05_map0 = "05_map.rs" 20 17 20 21
  let%span s05_map1 = "05_map.rs" 20 26 20 44
  let%span s05_map2 = "05_map.rs" 8 17 8 21
  let%span s05_map3 = "05_map.rs" 8 26 8 44
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 164 27 164 52
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 165 26 165 60
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 139 14 139 114
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  predicate invariant'1 (self : borrowed t_I'0) =
    [%#sinvariant9] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  type t_A'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_A'0
  
  predicate inv'8 (_1 : t_A'0)
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'8 a_0
    end
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#s05_map2] inv'3 self}
    any [ return' (result:t_Option'0)-> {[%#s05_map3] inv'4 result} (! return' {result}) ] 
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_A'0))= any
    [ good (field_0:t_A'0)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_A'0 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'10 (_1 : t_F'0)
  
  predicate invariant'2 (self : t_F'0) =
    [%#sinvariant10] inv'10 self
  
  predicate inv'5 (_1 : t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_F'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate inv'6 (_1 : t_A'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_A'0 [inv'6 x] . inv'6 x = (let (x0) = x in inv'8 x0)
  
  predicate precondition'0 (self : t_F'0) (args : t_A'0)
  
  type t_B'0
  
  predicate inv'7 (_1 : t_B'0)
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_A'0) (result : t_B'0)
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_A'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_B'0 . [%#sops17] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops14] unnest'0 self b)
   -> ([%#sops15] unnest'0 b c)  -> ([%#sops16] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops13] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_A'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_A'0, res_state : t_F'0, res : t_B'0 . ([%#sops11] postcondition_mut'0 self args res_state res)
   -> ([%#sops12] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_F'0) (args : t_A'0) (result : t_B'0)
  
  function fn_once'0 (self : t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_B'0 . [%#sops8] postcondition_once'0 self args res
  = (resolve'2 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_F'0) (args : t_A'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom fn_mut'0_spec : forall self : t_F'0, args : t_A'0, res_state : t_F'0, res : t_B'0 . [%#sops7] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec call'0 (self:t_F'0) (args:t_A'0) (return'  (ret:t_B'0))= {[@expl:call 'self' type invariant] inv'5 self}
    {[@expl:call 'args' type invariant] inv'6 args}
    {[@expl:call requires] [%#sops4] precondition'0 self args}
    any [ return' (result:t_B'0)-> {inv'7 result} {[%#sops5] postcondition'0 self args result} (! return' {result}) ] 
  
  predicate inv'9 (_1 : t_Map'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Map'0 [inv'9 x] . inv'9 x
  = match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'0 iter /\ inv'10 func
    end
  
  predicate invariant'0 (self : borrowed (t_Map'0)) =
    [%#sinvariant9] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'1 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed (t_Map'0)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Map'0)) =
    resolve'1 _1
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_B'0
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'2 x] . inv'2 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'7 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Map'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s05_map0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Map__iter'0}
        Borrow.borrow_final <t_I'0> {(self.current).t_Map__iter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_I'0) ->
             [ &_3 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Map__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_3} (fun (_ret':t_Option'0) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = any [ br0 -> {_2 = C_None'0 } (! bb3) | br1 (x0:t_A'0)-> {_2 = C_Some'0 x0} (! bb4) ] 
    | bb4 = s0
      [ s0 = v_Some'0 {_2} (fun (r0'0:t_A'0) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_8 <- (e) ] s2
      | s2 = call'0 {(self.current).t_Map__func'0} {_8} (fun (_ret':t_B'0) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb7 ] 
    | bb7 = s0 [ s0 =  [ &_0 <- C_Some'1 _6 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = bb10
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- C_None'1 ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Map'0) = self
    | & _2 : t_Option'0 = any_l ()
    | & _3 : borrowed t_I'0 = any_l ()
    | & e : t_A'0 = any_l ()
    | & _6 : t_B'0 = any_l ()
    | & _8 : t_A'0 = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s05_map1] inv'2 result}
      (! return' {result}) ]
    
end
module M_05_map__qyi6135204174218663437__next__refines [#"05_map.rs" 20 4 20 44] (* <Map<I, F> as FakeIterator> *)
  let%span s05_map0 = "05_map.rs" 20 4 20 44
  let%span sinvariant1 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_F'0
  
  type t_Map'0  =
    { t_Map__iter'0: t_I'0; t_Map__func'0: t_F'0 }
  
  predicate inv'4 (_1 : t_I'0)
  
  predicate inv'5 (_1 : t_F'0)
  
  predicate inv'3 (_1 : t_Map'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Map'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Map__iter'0 = iter ; t_Map__func'0 = func} -> inv'4 iter /\ inv'5 func
    end
  
  predicate invariant'0 (self : borrowed (t_Map'0)) =
    [%#sinvariant1] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (t_Map'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Map'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_B'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_B'0
  
  predicate inv'2 (_1 : t_B'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s05_map0] forall self : borrowed (t_Map'0) . inv'0 self
   -> inv'0 self /\ (forall result : t_Option'0 . inv'1 result  -> inv'1 result)
end
