
module C06FnSpecs_Weaken3
  type a
  type f
  type output0
  predicate invariant2 (self : output0)
  val invariant2 (self : output0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : output0)
  val inv2 (_x : output0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : output0 . inv2 x = true
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate postcondition_once0 (self : f) (a : a) (res : output0)
  val postcondition_once0 (self : f) (a : a) (res : output0) : bool
    ensures { result = postcondition_once0 self a res }
    
  predicate precondition0 (self : f) (a : a)
  val precondition0 (self : f) (a : a) : bool
    ensures { result = precondition0 self a }
    
  val call_once0 (self : f) (args : a) : output0
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition0 self args}
    requires {inv0 self}
    requires {inv1 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once0 self args result }
    ensures { inv2 result }
    
  let rec cfg weaken_3 [#"../06_fn_specs.rs" 32 0 32 73] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 30 11 30 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 32 49 32 50] inv0 f}
    requires {[#"../06_fn_specs.rs" 32 55 32 56] inv1 a}
    ensures { [#"../06_fn_specs.rs" 31 10 31 41] postcondition_once0 f a result }
    ensures { [#"../06_fn_specs.rs" 32 64 32 73] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : output0;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_fn_specs.rs" 33 4 33 27] _0 <- ([#"../06_fn_specs.rs" 33 4 33 27] call_once0 ([#"../06_fn_specs.rs" 33 22 33 23] f) ([#"../06_fn_specs.rs" 33 25 33 26] a));
    [#"../06_fn_specs.rs" 33 22 33 23] f <- any f;
    [#"../06_fn_specs.rs" 33 25 33 26] a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken2
  type a
  type f
  type output0
  predicate invariant3 (self : output0)
  val invariant3 (self : output0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : output0)
  val inv3 (_x : output0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : output0 . inv3 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0)
  val postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv2 (_x : borrowed f)
  val inv2 (_x : borrowed f) : bool
    ensures { result = inv2 _x }
    
  predicate postcondition_once0 (self : f) (a : a) (res : output0)
  val postcondition_once0 (self : f) (a : a) (res : output0) : bool
    ensures { result = postcondition_once0 self a res }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : f) (args : a) (res : output0) : ()
  val fn_mut_once0 (self : f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv3 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv3 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] postcondition_once0 self args res = (exists s : borrowed f . inv2 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv0 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv0 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv3 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv3 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] unnest0 ( * self) ( ^ self))
  predicate invariant2 (self : borrowed f)
  val invariant2 (self : borrowed f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : borrowed f . inv2 x = true
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (a : a)
  val precondition0 (self : f) (a : a) : bool
    ensures { result = precondition0 self a }
    
  val weaken_30 [#"../06_fn_specs.rs" 32 0 32 73] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 30 11 30 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 32 49 32 50] inv0 f}
    requires {[#"../06_fn_specs.rs" 32 55 32 56] inv1 a}
    ensures { [#"../06_fn_specs.rs" 31 10 31 41] postcondition_once0 f a result }
    ensures { [#"../06_fn_specs.rs" 32 64 32 73] inv3 result }
    
  let rec cfg weaken_2 [#"../06_fn_specs.rs" 20 0 20 62] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 18 11 18 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 20 38 20 39] inv0 f}
    requires {[#"../06_fn_specs.rs" 20 44 20 45] inv1 a}
    ensures { [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f . inv2 f2 /\  * f2 = f /\ postcondition_mut0 f2 a result /\ resolve0 ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 20 53 20 62] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : output0;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_fn_specs.rs" 21 4 21 18] _0 <- ([#"../06_fn_specs.rs" 21 4 21 18] weaken_30 ([#"../06_fn_specs.rs" 21 13 21 14] f) ([#"../06_fn_specs.rs" 21 16 21 17] a));
    [#"../06_fn_specs.rs" 21 13 21 14] f <- any f;
    [#"../06_fn_specs.rs" 21 16 21 17] a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken
  type a
  type f
  type output0
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0)
  val postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv3 (_x : borrowed f)
  val inv3 (_x : borrowed f) : bool
    ensures { result = inv3 _x }
    
  predicate postcondition_once0 (self : f) (a : a) (res : output0)
  val postcondition_once0 (self : f) (a : a) (res : output0) : bool
    ensures { result = postcondition_once0 self a res }
    
  predicate inv2 (_x : output0)
  val inv2 (_x : output0) : bool
    ensures { result = inv2 _x }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : f) (args : a) (res : output0) : ()
  val fn_mut_once0 (self : f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv2 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] postcondition_once0 self args res = (exists s : borrowed f . inv3 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv0 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv0 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv3 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv2 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] unnest0 ( * self) ( ^ self))
  predicate invariant3 (self : borrowed f)
  val invariant3 (self : borrowed f) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : borrowed f . inv3 x = true
  predicate invariant2 (self : output0)
  val invariant2 (self : output0) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : output0 . inv2 x = true
  predicate postcondition0 (self : f) (_2 : a) (_3 : output0)
  val postcondition0 (self : f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition0 self _2 _3 }
    
  function fn_once0 (self : f) (args : a) (res : output0) : ()
  val fn_once0 (self : f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] inv2 res}
    ensures { result = fn_once0 self args res }
    
  axiom fn_once0_spec : forall self : f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101] postcondition_once0 self args res = (resolve0 self /\ postcondition0 self args res))
  predicate resolve1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed f) : bool
    ensures { result = resolve1 self }
    
  function fn_mut0 (self : borrowed f) (args : a) (res : output0) : ()
  val fn_mut0 (self : borrowed f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] inv3 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] inv2 res}
    ensures { result = fn_mut0 self args res }
    
  axiom fn_mut0_spec : forall self : borrowed f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100] postcondition_mut0 self args res = (resolve1 self /\ postcondition0 ( * self) args res))
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (a : a)
  val precondition0 (self : f) (a : a) : bool
    ensures { result = precondition0 self a }
    
  val weaken_20 [#"../06_fn_specs.rs" 20 0 20 62] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 18 11 18 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 20 38 20 39] inv0 f}
    requires {[#"../06_fn_specs.rs" 20 44 20 45] inv1 a}
    ensures { [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f . inv3 f2 /\  * f2 = f /\ postcondition_mut0 f2 a result /\ resolve0 ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 20 53 20 62] inv2 result }
    
  let rec cfg weaken [#"../06_fn_specs.rs" 8 0 8 71] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 6 11 6 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 8 47 8 48] inv0 f}
    requires {[#"../06_fn_specs.rs" 8 53 8 54] inv1 a}
    ensures { [#"../06_fn_specs.rs" 7 10 7 36] postcondition0 f a result }
    ensures { [#"../06_fn_specs.rs" 8 62 8 71] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : output0;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_fn_specs.rs" 9 4 9 18] _0 <- ([#"../06_fn_specs.rs" 9 4 9 18] weaken_20 ([#"../06_fn_specs.rs" 9 13 9 14] f) ([#"../06_fn_specs.rs" 9 16 9 17] a));
    [#"../06_fn_specs.rs" 9 13 9 14] f <- any f;
    [#"../06_fn_specs.rs" 9 16 9 17] a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken3Std
  type a
  type f
  type output0
  predicate invariant2 (self : output0)
  val invariant2 (self : output0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : output0)
  val inv2 (_x : output0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : output0 . inv2 x = true
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate postcondition_once0 (self : f) (_2 : a) (_3 : output0)
  val postcondition_once0 (self : f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate precondition0 (self : f) (_2 : a)
  val precondition0 (self : f) (_2 : a) : bool
    ensures { result = precondition0 self _2 }
    
  val call_once0 (self : f) (args : a) : output0
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition0 self args}
    requires {inv0 self}
    requires {inv1 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once0 self args result }
    ensures { inv2 result }
    
  let rec cfg weaken_3_std [#"../06_fn_specs.rs" 38 0 38 64] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 36 11 36 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 38 40 38 41] inv0 f}
    requires {[#"../06_fn_specs.rs" 38 46 38 47] inv1 a}
    ensures { [#"../06_fn_specs.rs" 37 10 37 41] postcondition_once0 f a result }
    ensures { [#"../06_fn_specs.rs" 38 55 38 64] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : output0;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_fn_specs.rs" 39 4 39 27] _0 <- ([#"../06_fn_specs.rs" 39 4 39 27] call_once0 ([#"../06_fn_specs.rs" 39 22 39 23] f) ([#"../06_fn_specs.rs" 39 25 39 26] a));
    [#"../06_fn_specs.rs" 39 22 39 23] f <- any f;
    [#"../06_fn_specs.rs" 39 25 39 26] a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken2Std
  type a
  type f
  type output0
  predicate invariant3 (self : output0)
  val invariant3 (self : output0) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : output0)
  val inv3 (_x : output0) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : output0 . inv3 x = true
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0)
  val postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv2 (_x : borrowed f)
  val inv2 (_x : borrowed f) : bool
    ensures { result = inv2 _x }
    
  predicate postcondition_once0 (self : f) (_2 : a) (_3 : output0)
  val postcondition_once0 (self : f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : f) (args : a) (res : output0) : ()
  val fn_mut_once0 (self : f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv3 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv3 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv2 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv2 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv3 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv2 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv3 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant2 (self : borrowed f)
  val invariant2 (self : borrowed f) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : borrowed f . inv2 x = true
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (_2 : a)
  val precondition0 (self : f) (_2 : a) : bool
    ensures { result = precondition0 self _2 }
    
  val weaken_3_std0 [#"../06_fn_specs.rs" 38 0 38 64] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 36 11 36 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 38 40 38 41] inv0 f}
    requires {[#"../06_fn_specs.rs" 38 46 38 47] inv1 a}
    ensures { [#"../06_fn_specs.rs" 37 10 37 41] postcondition_once0 f a result }
    ensures { [#"../06_fn_specs.rs" 38 55 38 64] inv3 result }
    
  let rec cfg weaken_2_std [#"../06_fn_specs.rs" 26 0 26 73] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 24 11 24 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 26 49 26 50] inv0 f}
    requires {[#"../06_fn_specs.rs" 26 55 26 56] inv1 a}
    ensures { [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f . inv2 f2 /\  * f2 = f /\ postcondition_mut0 f2 a result /\ resolve0 ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 26 64 26 73] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : output0;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_fn_specs.rs" 27 4 27 22] _0 <- ([#"../06_fn_specs.rs" 27 4 27 22] weaken_3_std0 ([#"../06_fn_specs.rs" 27 17 27 18] f) ([#"../06_fn_specs.rs" 27 20 27 21] a));
    [#"../06_fn_specs.rs" 27 17 27 18] f <- any f;
    [#"../06_fn_specs.rs" 27 20 27 21] a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_WeakenStd
  type a
  type f
  type output0
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0)
  val postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv3 (_x : borrowed f)
  val inv3 (_x : borrowed f) : bool
    ensures { result = inv3 _x }
    
  predicate postcondition_once0 (self : f) (_2 : a) (_3 : output0)
  val postcondition_once0 (self : f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv2 (_x : output0)
  val inv2 (_x : output0) : bool
    ensures { result = inv2 _x }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : f) (args : a) (res : output0) : ()
  val fn_mut_once0 (self : f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv3 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv3 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant3 (self : borrowed f)
  val invariant3 (self : borrowed f) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : borrowed f . inv3 x = true
  predicate invariant2 (self : output0)
  val invariant2 (self : output0) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : output0 . inv2 x = true
  predicate postcondition0 (self : f) (_2 : a) (_3 : output0)
  val postcondition0 (self : f) (_2 : a) (_3 : output0) : bool
    ensures { result = postcondition0 self _2 _3 }
    
  function fn_once0 (self : f) (args : a) (res : output0) : ()
  val fn_once0 (self : f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv2 res}
    ensures { result = fn_once0 self args res }
    
  axiom fn_once0_spec : forall self : f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once0 self args res = (resolve0 self /\ postcondition0 self args res))
  predicate resolve1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed f) : bool
    ensures { result = resolve1 self }
    
  function fn_mut0 (self : borrowed f) (args : a) (res : output0) : ()
  val fn_mut0 (self : borrowed f) (args : a) (res : output0) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv3 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv1 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv2 res}
    ensures { result = fn_mut0 self args res }
    
  axiom fn_mut0_spec : forall self : borrowed f, args : a, res : output0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv3 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv1 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut0 self args res = (resolve1 self /\ postcondition0 ( * self) args res))
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (_2 : a)
  val precondition0 (self : f) (_2 : a) : bool
    ensures { result = precondition0 self _2 }
    
  val weaken_2_std0 [#"../06_fn_specs.rs" 26 0 26 73] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 24 11 24 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 26 49 26 50] inv0 f}
    requires {[#"../06_fn_specs.rs" 26 55 26 56] inv1 a}
    ensures { [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f . inv3 f2 /\  * f2 = f /\ postcondition_mut0 f2 a result /\ resolve0 ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 26 64 26 73] inv2 result }
    
  let rec cfg weaken_std [#"../06_fn_specs.rs" 14 0 14 62] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : output0
    requires {[#"../06_fn_specs.rs" 12 11 12 28] precondition0 f a}
    requires {[#"../06_fn_specs.rs" 14 38 14 39] inv0 f}
    requires {[#"../06_fn_specs.rs" 14 44 14 45] inv1 a}
    ensures { [#"../06_fn_specs.rs" 13 10 13 36] postcondition0 f a result }
    ensures { [#"../06_fn_specs.rs" 14 53 14 62] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : output0;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../06_fn_specs.rs" 15 4 15 22] _0 <- ([#"../06_fn_specs.rs" 15 4 15 22] weaken_2_std0 ([#"../06_fn_specs.rs" 15 17 15 18] f) ([#"../06_fn_specs.rs" 15 20 15 21] a));
    [#"../06_fn_specs.rs" 15 17 15 18] f <- any f;
    [#"../06_fn_specs.rs" 15 20 15 21] a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_FnOnceUser
  type f
  predicate invariant2 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : ()) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : ())
  val inv2 (_x : ()) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : () . inv2 x = true
  use prelude.UIntSize
  predicate invariant1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : usize)
  val inv1 (_x : usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : usize . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (_2 : usize)
  val precondition0 (self : f) (_2 : usize) : bool
    ensures { result = precondition0 self _2 }
    
  predicate postcondition_once0 (self : f) (_2 : usize) (_3 : ())
  val postcondition_once0 (self : f) (_2 : usize) (_3 : ()) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  val call_once0 (self : f) (args : usize) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition0 self args}
    requires {inv0 self}
    requires {inv1 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once0 self args result }
    ensures { inv2 result }
    
  use prelude.Int
  let rec cfg fn_once_user [#"../06_fn_specs.rs" 44 0 44 43] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 43 11 43 36] precondition0 f ((0 : usize))}
    requires {[#"../06_fn_specs.rs" 44 38 44 39] inv0 f}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f : f = f;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../06_fn_specs.rs" 45 4 45 8] _0 <- ([#"../06_fn_specs.rs" 45 4 45 8] call_once0 ([#"../06_fn_specs.rs" 45 4 45 5] f) ([#"../06_fn_specs.rs" 45 4 45 8] (([#"../06_fn_specs.rs" 45 6 45 7] [#"../06_fn_specs.rs" 45 6 45 7] (0 : usize)))));
    [#"../06_fn_specs.rs" 45 4 45 5] f <- any f;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C06FnSpecs_Caller_Closure0_Type
  use prelude.UIntSize
  use prelude.Int32
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
end
module C06FnSpecs_Caller_Closure0
  use prelude.Int32
  use prelude.UIntSize
  use prelude.Int
  use C06FnSpecs_Caller_Closure0_Type as C06FnSpecs_Caller_Closure0
  predicate resolve0 [#"../06_fn_specs.rs" 49 17 49 20] (_1 : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) =
    true
  let rec cfg c06FnSpecs_Caller_Closure0 [#"../06_fn_specs.rs" 49 17 49 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) (_2 : usize) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0 = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../06_fn_specs.rs" 49 21 49 23] _0 <- ([#"../06_fn_specs.rs" 49 21 49 23] ());
    assume { resolve0 _1 };
    return _0
  }
  
end
module C06FnSpecs_Caller
  use prelude.UIntSize
  use prelude.Int32
  use C06FnSpecs_Caller_Closure0_Type as C06FnSpecs_Caller_Closure0
  predicate invariant0 (self : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0)
  val inv0 (_x : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0 . inv0 x = true
  use prelude.Int
  predicate precondition0 [#"../06_fn_specs.rs" 49 17 49 20] (self : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) (args : usize)
    
   =
    let (_2) = args in true
  val fn_once_user0 [#"../06_fn_specs.rs" 44 0 44 43] (f : C06FnSpecs_Caller_Closure0.c06fnspecs_caller_closure0) : ()
    requires {[#"../06_fn_specs.rs" 43 11 43 36] precondition0 f ((0 : usize))}
    requires {[#"../06_fn_specs.rs" 44 38 44 39] inv0 f}
    
  let rec cfg caller [#"../06_fn_specs.rs" 48 0 48 15] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../06_fn_specs.rs" 49 4 49 24] _0 <- ([#"../06_fn_specs.rs" 49 4 49 24] fn_once_user0 ([#"../06_fn_specs.rs" 49 17 49 23] C06FnSpecs_Caller_Closure0.C06FnSpecs_Caller_Closure0));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
