
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface
  type self
  type args
  predicate precondition (self : self) (a : args)
  val precondition (self : self) (a : args) : bool
    ensures { result = precondition self a }
    
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition
  type self
  type args
  predicate precondition (self : self) (a : args)
  val precondition (self : self) (a : args) : bool
    ensures { result = precondition self a }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
  val postcondition (self : self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
  val postcondition (self : self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
  val postcondition_once (self : self) (a : args) (res : Output0.output) : bool
    ensures { result = postcondition_once self a res }
    
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
  val postcondition_once (self : self) (a : args) (res : Output0.output) : bool
    ensures { result = postcondition_once self a res }
    
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = self,
    type args = args
  val call_once (self : self) (args : args) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] Precondition0.precondition self args}
    requires {Inv0.inv self}
    requires {Inv1.inv args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] PostconditionOnce0.postcondition_once self args result }
    ensures { Inv2.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C06FnSpecs_Weaken3_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = f,
    type args = a
  val weaken_3 [#"../06_fn_specs.rs" 32 0 32 73] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 30 11 30 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 32 49 32 50] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 32 55 32 56] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 31 10 31 41] PostconditionOnce0.postcondition_once f a result }
    ensures { [#"../06_fn_specs.rs" 32 64 32 73] Inv2.inv result }
    
end
module C06FnSpecs_Weaken3
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Output0.output
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Output0.output,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv2.inv = Inv2.inv,
    type Output0.output = Output0.output
  let rec cfg weaken_3 [#"../06_fn_specs.rs" 32 0 32 73] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 30 11 30 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 32 49 32 50] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 32 55 32 56] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 31 10 31 41] PostconditionOnce0.postcondition_once f a result }
    ensures { [#"../06_fn_specs.rs" 32 64 32 73] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_fn_specs.rs" 33 4 33 27] CallOnce0.call_once f a);
    f <- any f;
    a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub
  type self
  type args
  predicate unnest (self : self) (_2 : self)
end
module CreusotContracts_Std1_Ops_FnMutExt_Unnest_Interface
  type self
  type args
  predicate unnest (self : self) (_2 : self)
  val unnest (self : self) (_2 : self) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_Unnest
  type self
  type args
  predicate unnest (self : self) (_2 : self)
  val unnest (self : self) (_2 : self) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Stub
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function unnest_refl (self : self) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Interface
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function unnest_refl (self : self) : ()
  val unnest_refl (self : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : self . ([#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function unnest_refl (self : self) : ()
  val unnest_refl (self : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : self . ([#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Stub
  type self
  type args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans (self : self) (b : self) (c : self) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Interface
  type self
  type args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans (self : self) (b : self) (c : self) : ()
  val unnest_trans (self : self) (b : self) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : self, b : self, c : self . ([#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans
  type self
  type args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans (self : self) (b : self) (c : self) : ()
  val unnest_trans (self : self) (b : self) (c : self) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : self, b : self, c : self . ([#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module C06FnSpecs_Weaken2_Interface
  type a
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = f,
    type args = a
  val weaken_2 [#"../06_fn_specs.rs" 20 0 20 62] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 18 11 18 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 20 38 20 39] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 20 44 20 45] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f . Inv2.inv f2 /\  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 20 53 20 62] Inv3.inv result }
    
end
module C06FnSpecs_Weaken2
  type a
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Interface as Unnest0 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Output0.output
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Output0.output,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface as PostconditionMut0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Interface as FnMutOnce0 with
    type self = f,
    type args = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Interface as UnnestTrans0 with
    type self = f,
    type args = a,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Interface as UnnestRefl0 with
    type self = f,
    type args = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type self = f,
    type args = a,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = f,
    type args = a
  clone C06FnSpecs_Weaken3_Interface as Weaken30 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv2.inv = Inv3.inv,
    type Output0.output = Output0.output
  let rec cfg weaken_2 [#"../06_fn_specs.rs" 20 0 20 62] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 18 11 18 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 20 38 20 39] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 20 44 20 45] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f . Inv2.inv f2 /\  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 20 53 20 62] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_fn_specs.rs" 21 4 21 18] Weaken30.weaken_3 f a);
    f <- any f;
    a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_FnExt_FnMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnExt_FnMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res))
end
module CreusotContracts_Std1_Ops_FnExt_FnMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res))
end
module CreusotContracts_Std1_Ops_FnExt_FnOnce_Stub
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnExt_FnOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
  val fn_once (self : self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res))
end
module CreusotContracts_Std1_Ops_FnExt_FnOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
  val fn_once (self : self) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : self, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res))
end
module C06FnSpecs_Weaken_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = f,
    type args = a
  val weaken [#"../06_fn_specs.rs" 8 0 8 71] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 6 11 6 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 8 47 8 48] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 8 53 8 54] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 7 10 7 36] Postcondition0.postcondition f a result }
    ensures { [#"../06_fn_specs.rs" 8 62 8 71] Inv2.inv result }
    
end
module C06FnSpecs_Weaken
  type a
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Interface as Unnest0 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface as PostconditionMut0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Interface as FnMutOnce0 with
    type self = f,
    type args = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv3.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Interface as UnnestTrans0 with
    type self = f,
    type args = a,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Interface as UnnestRefl0 with
    type self = f,
    type args = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type self = f,
    type args = a,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed f,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Output0.output,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface as Postcondition0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnExt_FnOnce_Interface as FnOnce0 with
    type self = f,
    type args = a,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnExt_FnMut_Interface as FnMut0 with
    type self = f,
    type args = a,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = f,
    type args = a
  clone C06FnSpecs_Weaken2_Interface as Weaken20 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Inv3.inv = Inv2.inv,
    type Output0.output = Output0.output
  let rec cfg weaken [#"../06_fn_specs.rs" 8 0 8 71] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 6 11 6 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 8 47 8 48] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 8 53 8 54] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 7 10 7 36] Postcondition0.postcondition f a result }
    ensures { [#"../06_fn_specs.rs" 8 62 8 71] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_fn_specs.rs" 9 4 9 18] Weaken20.weaken_2 f a);
    f <- any f;
    a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module C06FnSpecs_Weaken3Std_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = a,
    type f = f
  val weaken_3_std [#"../06_fn_specs.rs" 38 0 38 64] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 36 11 36 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 38 40 38 41] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 38 46 38 47] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 37 10 37 41] PostconditionOnce0.postcondition_once f a result }
    ensures { [#"../06_fn_specs.rs" 38 55 38 64] Inv2.inv result }
    
end
module C06FnSpecs_Weaken3Std
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Output0.output
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Output0.output,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv2.inv = Inv2.inv,
    type Output0.output = Output0.output
  let rec cfg weaken_3_std [#"../06_fn_specs.rs" 38 0 38 64] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 36 11 36 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 38 40 38 41] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 38 46 38 47] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 37 10 37 41] PostconditionOnce0.postcondition_once f a result }
    ensures { [#"../06_fn_specs.rs" 38 55 38 64] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_fn_specs.rs" 39 4 39 27] CallOnce0.call_once f a);
    f <- any f;
    a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 101 4 101 10] ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 107 4 107 10] ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 112 4 112 10] ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module C06FnSpecs_Weaken2Std_Interface
  type a
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = a,
    type f = f
  val weaken_2_std [#"../06_fn_specs.rs" 26 0 26 73] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 24 11 24 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 26 49 26 50] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 26 55 26 56] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f . Inv2.inv f2 /\  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 26 64 26 73] Inv3.inv result }
    
end
module C06FnSpecs_Weaken2Std
  type a
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Output0.output
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Output0.output,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed f,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = a,
    type f = f
  clone C06FnSpecs_Weaken3Std_Interface as Weaken3Std0 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv2.inv = Inv3.inv,
    type Output0.output = Output0.output
  let rec cfg weaken_2_std [#"../06_fn_specs.rs" 26 0 26 73] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 24 11 24 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 26 49 26 50] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 26 55 26 56] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f . Inv2.inv f2 /\  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    ensures { [#"../06_fn_specs.rs" 26 64 26 73] Inv3.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_fn_specs.rs" 27 4 27 22] Weaken3Std0.weaken_3_std f a);
    f <- any f;
    a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res))
end
module CreusotContracts_Std1_Ops_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res))
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res))
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res))
end
module C06FnSpecs_WeakenStd_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = a,
    type f = f
  val weaken_std [#"../06_fn_specs.rs" 14 0 14 62] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 12 11 12 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 14 38 14 39] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 14 44 14 45] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 13 10 13 36] Postcondition0.postcondition f a result }
    ensures { [#"../06_fn_specs.rs" 14 53 14 62] Inv2.inv result }
    
end
module C06FnSpecs_WeakenStd
  type a
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv3.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed f,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Output0.output,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface as Postcondition0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface as FnOnce0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl2_FnMut_Interface as FnMut0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv2.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = a,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = a,
    type f = f
  clone C06FnSpecs_Weaken2Std_Interface as Weaken2Std0 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Inv3.inv = Inv2.inv,
    type Output0.output = Output0.output
  let rec cfg weaken_std [#"../06_fn_specs.rs" 14 0 14 62] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 12 11 12 28] Precondition0.precondition f a}
    requires {[#"../06_fn_specs.rs" 14 38 14 39] Inv0.inv f}
    requires {[#"../06_fn_specs.rs" 14 44 14 45] Inv1.inv a}
    ensures { [#"../06_fn_specs.rs" 13 10 13 36] Postcondition0.postcondition f a result }
    ensures { [#"../06_fn_specs.rs" 14 53 14 62] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- ([#"../06_fn_specs.rs" 15 4 15 22] Weaken2Std0.weaken_2_std f a);
    f <- any f;
    a <- any a;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_FnOnceUser_Interface
  type f
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = usize,
    type f = f
  val fn_once_user [#"../06_fn_specs.rs" 44 0 44 43] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 43 11 43 36] Precondition0.precondition f ((0 : usize))}
    requires {[#"../06_fn_specs.rs" 44 38 44 39] Inv0.inv f}
    
end
module C06FnSpecs_FnOnceUser
  type f
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = ()
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = (),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = f
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = usize,
    type f = f,
    type Output0.output = ()
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = usize,
    type f = f
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with
    type self = f,
    type args = usize,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv2.inv = Inv2.inv,
    type Output0.output = ()
  let rec cfg fn_once_user [#"../06_fn_specs.rs" 44 0 44 43] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 43 11 43 36] Precondition0.precondition f ((0 : usize))}
    requires {[#"../06_fn_specs.rs" 44 38 44 39] Inv0.inv f}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f : f = f;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _0 <- ([#"../06_fn_specs.rs" 45 4 45 8] CallOnce0.call_once f ([#"../06_fn_specs.rs" 45 6 45 7] (0 : usize)));
    f <- any f;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C06FnSpecs_Caller_Closure0_Type
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
end
module C06FnSpecs_Caller_Closure0_Interface
  use export C06FnSpecs_Caller_Closure0_Type
  use prelude.Int
  use prelude.UIntSize
  predicate resolve [#"../06_fn_specs.rs" 49 17 49 20] (_1 : c06fnspecs_caller_closure0) =
    [#"../06_fn_specs.rs" 1 0 1 0] true
  predicate precondition [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize) =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2) = args in true
  predicate postcondition_once [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize) (result : ())
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2) = args in true
  val c06FnSpecs_Caller_Closure0 [#"../06_fn_specs.rs" 49 17 49 20] (_1 : c06fnspecs_caller_closure0) (_2 : usize) : ()
end
module C06FnSpecs_Caller_Closure0
  use export C06FnSpecs_Caller_Closure0_Type
  use prelude.Int
  use prelude.UIntSize
  predicate resolve [#"../06_fn_specs.rs" 49 17 49 20] (_1 : c06fnspecs_caller_closure0) =
    [#"../06_fn_specs.rs" 1 0 1 0] true
  predicate precondition [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize) =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2) = args in true
  predicate postcondition_once [#"../06_fn_specs.rs" 49 17 49 20] (self : c06fnspecs_caller_closure0) (args : usize) (result : ())
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2) = args in true
  let rec cfg c06FnSpecs_Caller_Closure0 [#"../06_fn_specs.rs" 49 17 49 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : c06fnspecs_caller_closure0) (_2 : usize) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : c06fnspecs_caller_closure0 = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { resolve _1 };
    return _0
  }
  
end
module C06FnSpecs_Caller_Interface
  val caller [#"../06_fn_specs.rs" 48 0 48 15] (_1 : ()) : ()
end
module C06FnSpecs_Caller
  clone C06FnSpecs_Caller_Closure0_Interface as Closure00
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Closure00.c06fnspecs_caller_closure0
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Closure00.c06fnspecs_caller_closure0,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone C06FnSpecs_FnOnceUser_Interface as FnOnceUser0 with
    type f = Closure00.c06fnspecs_caller_closure0,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate Inv0.inv = Inv0.inv
  let rec cfg caller [#"../06_fn_specs.rs" 48 0 48 15] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../06_fn_specs.rs" 49 4 49 24] FnOnceUser0.fn_once_user (Closure00.C06FnSpecs_Caller_Closure0));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
