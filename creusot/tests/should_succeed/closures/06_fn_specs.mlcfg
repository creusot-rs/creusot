
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Stub
  type self
  type args
  val ghost predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface
  type self
  type args
  val ghost predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition
  type self
  type args
  val ghost predicate precondition (self : self) (a : args)
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Std1_Fun_FnSpec_FnMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnSpec_FnMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
    ensures { PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res }
    
end
module CreusotContracts_Std1_Fun_FnSpec_FnMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_spec : forall self : borrowed self, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Std1_Fun_FnSpec_FnOnce_Stub
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnSpec_FnOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_once (self : self) (args : args) (res : Output0.output) : ()
    ensures { PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res }
    
end
module CreusotContracts_Std1_Fun_FnSpec_FnOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
    ensures { PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = self
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  val ghost function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Stub as Precondition0 with type self = self, type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module Core_Ops_Function_FnOnce_CallOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
    type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module C06FnSpecs_Weaken3_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Stub as PostconditionOnce0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Stub as Precondition0 with type self = f, type args = a
  val weaken_3 [@cfg:stackify] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 17 11 17 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 18 10 18 41] PostconditionOnce0.postcondition_once f a result }
    
end
module C06FnSpecs_Weaken3
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = f, type args = a
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with type self = f, type args = a,
    val Precondition0.precondition = Precondition0.precondition,
    val PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = f
  let rec cfg weaken_3 [@cfg:stackify] [#"../06_fn_specs.rs" 19 0 19 67] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 17 11 17 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 18 10 18 41] PostconditionOnce0.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 20 4 20 27] CallOnce0.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken2_Interface
  type a
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = f
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Stub as PostconditionMut0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Stub as Precondition0 with type self = f, type args = a
  val weaken_2 [@cfg:stackify] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 11 11 11 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 12 0 12 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
end
module C06FnSpecs_Weaken2
  type a
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = f
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce as FnMutOnce0 with type self = f, type args = a,
    val PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    val Resolve0.resolve = Resolve0.resolve, type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = f, type args = a
  clone C06FnSpecs_Weaken3_Interface as Weaken30 with type a = a, type f = f,
    val Precondition0.precondition = Precondition0.precondition,
    val PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = a
  let rec cfg weaken_2 [@cfg:stackify] [#"../06_fn_specs.rs" 13 0 13 66] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 11 11 11 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 12 0 12 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 14 4 14 18] Weaken30.weaken_3 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_Weaken_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = a
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = f, type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Stub as Precondition0 with type self = f, type args = a
  val weaken [@cfg:stackify] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 5 11 5 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 6 10 6 36] Postcondition0.postcondition f a result }
    
end
module C06FnSpecs_Weaken
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = f
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = f,
    type args = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce as FnMutOnce0 with type self = f, type args = a,
    val PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    val Resolve0.resolve = Resolve1.resolve, type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = f
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = f, type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnSpec_FnOnce as FnOnce0 with type self = f, type args = a,
    val PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    val Resolve0.resolve = Resolve1.resolve, val Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnSpec_FnMut as FnMut0 with type self = f, type args = a,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    val Resolve0.resolve = Resolve0.resolve, val Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = f, type args = a
  clone C06FnSpecs_Weaken2_Interface as Weaken20 with type a = a, type f = f,
    val Precondition0.precondition = Precondition0.precondition,
    val PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    val Resolve0.resolve = Resolve1.resolve, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = a
  let rec cfg weaken [@cfg:stackify] [#"../06_fn_specs.rs" 7 0 7 65] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 5 11 5 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 6 10 6 36] Postcondition0.postcondition f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve2.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 8 4 8 18] Weaken20.weaken_2 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Stub
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module C06FnSpecs_FnOnceUser_Interface
  type f
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = usize, type f = f
  val fn_once_user [@cfg:stackify] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 24 11 24 36] Precondition0.precondition f ((0 : usize))}
    
end
module C06FnSpecs_FnOnceUser
  type f
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = usize, type f = f
  clone CreusotContracts_Std1_Fun_Impl0_PostconditionOnce as PostconditionOnce0 with type args = usize, type f = f,
    type Output0.output = ()
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with type self = f, type args = usize,
    val Precondition0.precondition = Precondition0.precondition,
    val PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once, type Output0.output = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  let rec cfg fn_once_user [@cfg:stackify] [#"../06_fn_specs.rs" 25 0 25 43] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 24 11 24 36] Precondition0.precondition f ((0 : usize))}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f_1 : f;
  var _3 : f;
  var _4 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _3 };
    _3 <- f_1;
    f_1 <- any f;
    _4 <- ((0 : usize));
    _0 <- ([#"../06_fn_specs.rs" 26 4 26 8] CallOnce0.call_once _3 _4);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module C06FnSpecs_Caller_Closure0_Interface
  use mach.int.Int
  use prelude.UIntSize
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
  predicate precondition [@cfg:stackify] (_1' : c06fnspecs_caller_closure0) (args : usize) =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c06fnspecs_caller_closure0) (args : usize) (result : ()) =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_) = args in true
  predicate resolve (_1' : c06fnspecs_caller_closure0) =
    true
  val c06FnSpecs_Caller_Closure0 [@cfg:stackify] (_1' : c06fnspecs_caller_closure0) (_2' : usize) : ()
end
module C06FnSpecs_Caller_Closure0
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
  use mach.int.Int
  use prelude.UIntSize
  predicate precondition [@cfg:stackify] (_1' : c06fnspecs_caller_closure0) (args : usize) =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c06fnspecs_caller_closure0) (args : usize) (result : ()) =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_) = args in true
  predicate resolve (_1' : c06fnspecs_caller_closure0) =
    true
  let rec cfg c06FnSpecs_Caller_Closure0 [@cfg:stackify] [#"../06_fn_specs.rs" 30 17 30 20] (_1' : c06fnspecs_caller_closure0) (_2' : usize) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : c06fnspecs_caller_closure0;
  var _2 : usize;
  {
    _1 <- _1';
    _2 <- _2';
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { resolve _1 };
    return _0
  }
  
end
module C06FnSpecs_Caller_Interface
  val caller [@cfg:stackify] (_ : ()) : ()
end
module C06FnSpecs_Caller
  clone C06FnSpecs_Caller_Closure0_Interface as Closure00 with axiom .
  clone C06FnSpecs_FnOnceUser_Interface as FnOnceUser0 with type f = Closure00.c06fnspecs_caller_closure0,
    val Precondition0.precondition = Closure00.precondition
  let rec cfg caller [@cfg:stackify] [#"../06_fn_specs.rs" 29 0 29 15] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : Closure00.c06fnspecs_caller_closure0;
  {
    goto BB0
  }
  BB0 {
    _1 <- Closure00.C06FnSpecs_Caller_Closure0;
    _0 <- ([#"../06_fn_specs.rs" 30 4 30 24] FnOnceUser0.fn_once_user _1);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
