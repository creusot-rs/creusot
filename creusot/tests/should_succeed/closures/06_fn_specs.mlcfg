
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Ops_FnOnceExt_Precondition
  type self
  type args
  predicate precondition (self : self) (a : args)
  val precondition (self : self) (a : args) : bool
    ensures { result = precondition self a }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
  val postcondition (self : self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
  val postcondition_once (self : self) (a : args) (res : Output0.output) : bool
    ensures { result = postcondition_once self a res }
    
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = self,
    type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module Core_Ops_Function_FnOnce_CallOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = self,
    type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module C06FnSpecs_Weaken3_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = f,
    type args = a
  val weaken_3 [@cfg:stackify] [#"../06_fn_specs.rs" 31 0 31 66] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 29 11 29 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 30 10 30 41] PostconditionOnce0.postcondition_once f a result }
    
end
module C06FnSpecs_Weaken3
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  let rec cfg weaken_3 [@cfg:stackify] [#"../06_fn_specs.rs" 31 0 31 66] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 29 11 29 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 30 10 30 41] PostconditionOnce0.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 32 4 32 27] CallOnce0.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub
  type self
  type args
  predicate unnest (self : self) (_2' : self)
end
module CreusotContracts_Std1_Ops_FnMutExt_Unnest_Interface
  type self
  type args
  predicate unnest (self : self) (_2' : self)
end
module CreusotContracts_Std1_Ops_FnMutExt_Unnest
  type self
  type args
  predicate unnest (self : self) (_2' : self)
  val unnest (self : self) (_2' : self) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
  axiom postcondition_mut_unnest_spec : forall self : borrowed self, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed self) (args : args) (res : Output0.output) : ()
    requires {PostconditionMut0.postcondition_mut self args res}
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed self, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Stub
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_refl (self : self) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Interface
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_refl (self : self) : ()
  axiom unnest_refl_spec : forall self : self . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_refl (self : self) : ()
  val unnest_refl (self : self) : ()
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : self . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Stub
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans (self : self) (b : self) (c : self) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Interface
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans (self : self) (b : self) (c : self) : ()
  axiom unnest_trans_spec : forall self : self, b : self, c : self . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans
  type self
  type args
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Stub as Unnest0 with
    type self = self,
    type args = args
  function unnest_trans (self : self) (b : self) (c : self) : ()
  val unnest_trans (self : self) (b : self) (c : self) : ()
    requires {Unnest0.unnest self b}
    requires {Unnest0.unnest b c}
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : self, b : self, c : self . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed self .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module C06FnSpecs_Weaken2_Interface
  type a
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = f,
    type args = a
  val weaken_2 [@cfg:stackify] [#"../06_fn_specs.rs" 19 0 19 55] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 17 11 17 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 18 0 18 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
end
module C06FnSpecs_Weaken2
  type a
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Interface as Unnest0 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface as PostconditionMut0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Interface as FnMutOnce0 with
    type self = f,
    type args = a,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Interface as UnnestTrans0 with
    type self = f,
    type args = a,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Interface as UnnestRefl0 with
    type self = f,
    type args = a,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type self = f,
    type args = a,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = f,
    type args = a
  clone C06FnSpecs_Weaken3_Interface as Weaken30 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  let rec cfg weaken_2 [@cfg:stackify] [#"../06_fn_specs.rs" 19 0 19 55] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 17 11 17 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 18 0 18 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 20 4 20 18] Weaken30.weaken_3 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_FnExt_FnMut_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnExt_FnMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_spec : forall self : borrowed self, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Ops_FnExt_FnMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = self
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Stub as PostconditionMut0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed self) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed self, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Ops_FnExt_FnOnce_Stub
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_FnExt_FnOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module CreusotContracts_Std1_Ops_FnExt_FnOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Stub as PostconditionOnce0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  function fn_once (self : self) (args : args) (res : Output0.output) : ()
  val fn_once (self : self) (args : args) (res : Output0.output) : ()
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module C06FnSpecs_Weaken_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Stub as Precondition0 with
    type self = f,
    type args = a
  val weaken [@cfg:stackify] [#"../06_fn_specs.rs" 7 0 7 64] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 5 11 5 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 6 10 6 36] Postcondition0.postcondition f a result }
    
end
module C06FnSpecs_Weaken
  type a
  type f
  clone CreusotContracts_Std1_Ops_FnMutExt_Unnest_Interface as Unnest0 with
    type self = f,
    type args = a
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMut_Interface as PostconditionMut0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnOnceExt_PostconditionOnce_Interface as PostconditionOnce0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnMutExt_FnMutOnce_Interface as FnMutOnce0 with
    type self = f,
    type args = a,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestTrans_Interface as UnnestTrans0 with
    type self = f,
    type args = a,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_UnnestRefl_Interface as UnnestRefl0 with
    type self = f,
    type args = a,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_FnMutExt_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type self = f,
    type args = a,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = f
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface as Postcondition0 with
    type self = f,
    type args = a,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_FnExt_FnOnce_Interface as FnOnce0 with
    type self = f,
    type args = a,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnExt_FnMut_Interface as FnMut0 with
    type self = f,
    type args = a,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_FnOnceExt_Precondition_Interface as Precondition0 with
    type self = f,
    type args = a
  clone C06FnSpecs_Weaken2_Interface as Weaken20 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  let rec cfg weaken [@cfg:stackify] [#"../06_fn_specs.rs" 7 0 7 64] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 5 11 5 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 6 10 6 36] Postcondition0.postcondition f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 8 4 8 18] Weaken20.weaken_2 _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module C06FnSpecs_Weaken3Std_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = a,
    type f = f
  val weaken_3_std [@cfg:stackify] [#"../06_fn_specs.rs" 37 0 37 57] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 35 11 35 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 36 10 36 41] PostconditionOnce0.postcondition_once f a result }
    
end
module C06FnSpecs_Weaken3Std
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  let rec cfg weaken_3_std [@cfg:stackify] [#"../06_fn_specs.rs" 37 0 37 57] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 35 11 35 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 36 10 36 41] PostconditionOnce0.postcondition_once f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 38 4 38 27] CallOnce0.call_once _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {PostconditionMut0.postcondition_mut self args res}
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
  axiom unnest_refl_spec : forall self : f . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : () =
    ()
  val unnest_refl (self : f) : ()
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  axiom unnest_trans_spec : forall self : f, b : f, c : f . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {Unnest0.unnest self b}
    requires {Unnest0.unnest b c}
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module C06FnSpecs_Weaken2Std_Interface
  type a
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = a,
    type f = f
  val weaken_2_std [@cfg:stackify] [#"../06_fn_specs.rs" 25 0 25 66] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 23 11 23 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 24 0 24 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
end
module C06FnSpecs_Weaken2Std
  type a
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = a,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = a,
    type f = f
  clone C06FnSpecs_Weaken3Std_Interface as Weaken3Std0 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  let rec cfg weaken_2_std [@cfg:stackify] [#"../06_fn_specs.rs" 25 0 25 66] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 23 11 23 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 24 0 24 93] exists f2 : borrowed f .  * f2 = f /\ PostconditionMut0.postcondition_mut f2 a result /\ Resolve0.resolve ( ^ f2) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 26 4 26 22] Weaken3Std0.weaken_3_std _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Ops_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module C06FnSpecs_WeakenStd_Interface
  type a
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = a,
    type f = f
  val weaken_std [@cfg:stackify] [#"../06_fn_specs.rs" 13 0 13 55] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 11 11 11 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 12 10 12 36] Postcondition0.postcondition f a result }
    
end
module C06FnSpecs_WeakenStd
  type a
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = a,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition as Postcondition0 with
    type args = a,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl2_FnOnce as FnOnce0 with
    type args = a,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl2_FnMut as FnMut0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = Output0.output,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = a,
    type f = f
  clone C06FnSpecs_Weaken2Std_Interface as Weaken2Std0 with
    type a = a,
    type f = f,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  let rec cfg weaken_std [@cfg:stackify] [#"../06_fn_specs.rs" 13 0 13 55] (f : f) (a : a) : Output0.output
    requires {[#"../06_fn_specs.rs" 11 11 11 28] Precondition0.precondition f a}
    ensures { [#"../06_fn_specs.rs" 12 10 12 36] Postcondition0.postcondition f a result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Output0.output;
  var f_1 : f;
  var a_2 : a;
  var _5 : f;
  var _6 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    _5 <- f_1;
    f_1 <- any f;
    assume { Resolve1.resolve _6 };
    _6 <- a_2;
    a_2 <- any a;
    _0 <- ([#"../06_fn_specs.rs" 14 4 14 22] Weaken2Std0.weaken_2_std _5 _6);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module C06FnSpecs_FnOnceUser_Interface
  type f
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = usize,
    type f = f
  val fn_once_user [@cfg:stackify] [#"../06_fn_specs.rs" 43 0 43 43] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 42 11 42 36] Precondition0.precondition f ((0 : usize))}
    
end
module C06FnSpecs_FnOnceUser
  type f
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = usize,
    type f = f,
    type Output0.output = ()
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = usize,
    type f = f
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with
    type self = f,
    type args = usize,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    type Output0.output = ()
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  let rec cfg fn_once_user [@cfg:stackify] [#"../06_fn_specs.rs" 43 0 43 43] (f : f) : ()
    requires {[#"../06_fn_specs.rs" 42 11 42 36] Precondition0.precondition f ((0 : usize))}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f_1 : f;
  var _3 : f;
  var _4 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _3 };
    _3 <- f_1;
    f_1 <- any f;
    _4 <- ([#"../06_fn_specs.rs" 44 6 44 7] (0 : usize));
    _0 <- ([#"../06_fn_specs.rs" 44 4 44 8] CallOnce0.call_once _3 _4);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C06FnSpecs_Caller_Closure0_Interface
  use mach.int.Int
  use prelude.UIntSize
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
  predicate precondition [@cfg:stackify] [#"../06_fn_specs.rs" 48 17 48 20] (self : c06fnspecs_caller_closure0) (args : usize)
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate postcondition_once [@cfg:stackify] [#"../06_fn_specs.rs" 48 17 48 20] (self : c06fnspecs_caller_closure0) (args : usize) (result : ())
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate resolve (_1' : c06fnspecs_caller_closure0) =
    true
  val c06FnSpecs_Caller_Closure0 [@cfg:stackify] [#"../06_fn_specs.rs" 48 17 48 20] (_1' : c06fnspecs_caller_closure0) (_2' : usize) : ()
    
end
module C06FnSpecs_Caller_Closure0
  type c06fnspecs_caller_closure0  =
    | C06FnSpecs_Caller_Closure0
    
  use mach.int.Int
  use prelude.UIntSize
  predicate precondition [@cfg:stackify] [#"../06_fn_specs.rs" 48 17 48 20] (self : c06fnspecs_caller_closure0) (args : usize)
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate postcondition_once [@cfg:stackify] [#"../06_fn_specs.rs" 48 17 48 20] (self : c06fnspecs_caller_closure0) (args : usize) (result : ())
    
   =
    [#"../06_fn_specs.rs" 1 0 1 0] let (_2') = args in true
  predicate resolve (_1' : c06fnspecs_caller_closure0) =
    true
  let rec cfg c06FnSpecs_Caller_Closure0 [@cfg:stackify] [#"../06_fn_specs.rs" 48 17 48 20] (_1' : c06fnspecs_caller_closure0) (_2' : usize) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : c06fnspecs_caller_closure0;
  var _2 : usize;
  {
    _1 <- _1';
    _2 <- _2';
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { resolve _1 };
    return _0
  }
  
end
module C06FnSpecs_Caller_Interface
  val caller [@cfg:stackify] [#"../06_fn_specs.rs" 47 0 47 15] (_1' : ()) : ()
end
module C06FnSpecs_Caller
  clone C06FnSpecs_Caller_Closure0_Interface as Closure00 with
    axiom .
  clone C06FnSpecs_FnOnceUser_Interface as FnOnceUser0 with
    type f = Closure00.c06fnspecs_caller_closure0,
    predicate Precondition0.precondition = Closure00.precondition
  let rec cfg caller [@cfg:stackify] [#"../06_fn_specs.rs" 47 0 47 15] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : Closure00.c06fnspecs_caller_closure0;
  {
    goto BB0
  }
  BB0 {
    _1 <- Closure00.C06FnSpecs_Caller_Closure0;
    _0 <- ([#"../06_fn_specs.rs" 48 4 48 24] FnOnceUser0.fn_once_user _1);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
