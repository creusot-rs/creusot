
module C05Map_Map_Type
  type t_map 'i 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Map _ a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C05Map_Impl0_Next
  type a
  type b
  type f
  type i
  predicate invariant9 (self : f)
  val invariant9 (self : f) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : f)
  val inv9 (_x : f) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : f . inv9 x = true
  predicate resolve3 (self : f)
  val resolve3 (self : f) : bool
    ensures { result = resolve3 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv8 (_x : borrowed f)
  val inv8 (_x : borrowed f) : bool
    ensures { result = inv8 _x }
    
  predicate postcondition_once0 (self : f) (_2 : a) (_3 : b)
  val postcondition_once0 (self : f) (_2 : a) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv7 (_x : b)
  val inv7 (_x : b) : bool
    ensures { result = inv7 _x }
    
  predicate inv6 (_x : a)
  val inv6 (_x : a) : bool
    ensures { result = inv6 _x }
    
  function fn_mut_once0 (self : f) (args : a) (res : b) : ()
  val fn_mut_once0 (self : f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv9 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv7 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv8 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve3 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv9 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv9 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv9 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv9 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv9 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv9 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv8 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv7 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv8 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant8 (self : borrowed f)
  val invariant8 (self : borrowed f) : bool
    ensures { result = invariant8 self }
    
  axiom inv8 : forall x : borrowed f . inv8 x = true
  predicate invariant7 (self : b)
  val invariant7 (self : b) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : b . inv7 x = true
  predicate postcondition0 (self : f) (_2 : a) (_3 : b)
  val postcondition0 (self : f) (_2 : a) (_3 : b) : bool
    ensures { result = postcondition0 self _2 _3 }
    
  function fn_once0 (self : f) (args : a) (res : b) : ()
  val fn_once0 (self : f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv9 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv7 res}
    ensures { result = fn_once0 self args res }
    
  axiom fn_once0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv9 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once0 self args res = (resolve3 self /\ postcondition0 self args res))
  predicate resolve2 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed f) : bool
    ensures { result = resolve2 self }
    
  function fn_mut0 (self : borrowed f) (args : a) (res : b) : ()
  val fn_mut0 (self : borrowed f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv8 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv6 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv7 res}
    ensures { result = fn_mut0 self args res }
    
  axiom fn_mut0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv8 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv6 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv7 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut0 self args res = (resolve2 self /\ postcondition0 ( * self) args res))
  predicate invariant6 (self : a)
  val invariant6 (self : a) : bool
    ensures { result = invariant6 self }
    
  axiom inv6 : forall x : a . inv6 x = true
  predicate invariant5 (self : f)
  val invariant5 (self : f) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : f)
  val inv5 (_x : f) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : f . inv5 x = true
  predicate invariant4 (self : borrowed i)
  val invariant4 (self : borrowed i) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed i)
  val inv4 (_x : borrowed i) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed i . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option b)
  val invariant3 (self : Core_Option_Option_Type.t_option b) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option b)
  val inv3 (_x : Core_Option_Option_Type.t_option b) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option b . inv3 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  predicate invariant2 (self : borrowed (C05Map_Map_Type.t_map i f))
  val invariant2 (self : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (C05Map_Map_Type.t_map i f))
  val inv2 (_x : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (C05Map_Map_Type.t_map i f) . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option a)
  val invariant1 (self : Core_Option_Option_Type.t_option a) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option a)
  val inv1 (_x : Core_Option_Option_Type.t_option a) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option a . inv1 x = true
  predicate invariant0 (self : i)
  val invariant0 (self : i) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : i)
  val inv0 (_x : i) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : i . inv0 x = true
  predicate precondition0 (self : f) (_2 : a)
  val precondition0 (self : f) (_2 : a) : bool
    ensures { result = precondition0 self _2 }
    
  val call0 (self : f) (args : a) : b
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition0 self args}
    requires {inv5 self}
    requires {inv6 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition0 self args result }
    ensures { inv7 result }
    
  predicate resolve1 (self : borrowed (C05Map_Map_Type.t_map i f)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Core_Option_Option_Type.t_option a)
  val resolve0 (self : Core_Option_Option_Type.t_option a) : bool
    ensures { result = resolve0 self }
    
  val next0 [#"../05_map.rs" 6 4 6 45] (self : borrowed i) : Core_Option_Option_Type.t_option a
    requires {[#"../05_map.rs" 6 17 6 21] inv4 self}
    ensures { [#"../05_map.rs" 6 26 6 44] inv1 result }
    
  let rec cfg next [#"../05_map.rs" 17 4 17 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 17 17 17 21] inv2 self}
    ensures { [#"../05_map.rs" 17 26 17 44] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self : borrowed (C05Map_Map_Type.t_map i f) = self;
  var _2 : Core_Option_Option_Type.t_option a;
  var _3 : borrowed i;
  var e : a;
  var _6 : b;
  var _8 : a;
  {
    goto BB0
  }
  BB0 {
    [#"../05_map.rs" 18 14 18 23] _3 <- Borrow.borrow_final (C05Map_Map_Type.map_iter ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../05_map.rs" 18 14 18 23] self <- { self with current = (let C05Map_Map_Type.C_Map x0 x1 =  * self in C05Map_Map_Type.C_Map ( ^ _3) x1) ; };
    assume { inv0 ( ^ _3) };
    [#"../05_map.rs" 18 14 18 30] _2 <- ([#"../05_map.rs" 18 14 18 30] next0 _3);
    _3 <- any borrowed i;
    goto BB1
  }
  BB1 {
    switch (_2)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    goto BB5
  }
  BB3 {
    [#"../05_map.rs" 20 17 20 18] e <- Core_Option_Option_Type.some_0 _2;
    _2 <- (let Core_Option_Option_Type.C_Some x0 = _2 in Core_Option_Option_Type.C_Some (any a));
    assert { [@expl:type invariant] inv1 _2 };
    assume { resolve0 _2 };
    [#"../05_map.rs" 20 28 20 42] _8 <- (e);
    e <- any a;
    [#"../05_map.rs" 20 28 20 42] _6 <- ([#"../05_map.rs" 20 28 20 42] call0 (C05Map_Map_Type.map_func ( * self)) _8);
    _8 <- any a;
    goto BB6
  }
  BB4 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    assert { [@expl:type invariant] inv1 _2 };
    assume { resolve0 _2 };
    assert { [#"../05_map.rs" 18 14 18 30] false };
    absurd
  }
  BB5 {
    assert { [@expl:type invariant] inv1 _2 };
    assume { resolve0 _2 };
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    [#"../05_map.rs" 19 20 19 24] _0 <- Core_Option_Option_Type.C_None;
    goto BB10
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    [#"../05_map.rs" 20 23 20 43] _0 <- Core_Option_Option_Type.C_Some _6;
    _6 <- any b;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module C05Map_Impl0
  type a
  type b
  type f
  type i
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant1 (self : Core_Option_Option_Type.t_option b)
  val invariant1 (self : Core_Option_Option_Type.t_option b) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option b)
  val inv1 (_x : Core_Option_Option_Type.t_option b) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option b . inv1 x = true
  use C05Map_Map_Type as C05Map_Map_Type
  use prelude.Borrow
  predicate invariant0 (self : borrowed (C05Map_Map_Type.t_map i f))
  val invariant0 (self : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed (C05Map_Map_Type.t_map i f))
  val inv0 (_x : borrowed (C05Map_Map_Type.t_map i f)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed (C05Map_Map_Type.t_map i f) . inv0 x = true
  goal next_refn : [#"../05_map.rs" 17 4 17 44] forall self : borrowed (C05Map_Map_Type.t_map i f) . inv0 self
   -> inv0 self /\ (forall result : Core_Option_Option_Type.t_option b . inv1 result  -> inv1 result)
end
