
module C05Map_Map_Type
  type t_map 'i 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C05Map_FakeIterator_Item_Type
  type self
  type item
end
module C05Map_FakeIterator_Next_Interface
  type self
  use prelude.Borrow
  clone C05Map_FakeIterator_Item_Type as Item0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
end
module C05Map_FakeIterator_Next
  type self
  use prelude.Borrow
  clone C05Map_FakeIterator_Item_Type as Item0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Stub
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = args, type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  let rec ghost function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  let rec ghost function fn_once (self : f) (_2' : args) (_3' : Output0.output) : () = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C05Map_Impl0_Next_Interface
  type a
  type b
  type f
  type i
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C05Map_Map_Type as C05Map_Map_Type
  val next [@cfg:stackify] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
end
module C05Map_Impl0_Next
  type a
  type b
  type f
  type i
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C05Map_Map_Type as C05Map_Map_Type
  use mach.int.Int
  use prelude.IntSize
  clone CreusotContracts_Std1_Fun_Impl2_FnOnce as FnOnce0 with type args = a, type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl2_FnMut as FnMut0 with type args = a, type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition as Postcondition0 with type args = a, type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = a, type f = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Core_Option_Option_Type.t_option a
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with type self = f, type args = a,
    val Precondition0.precondition = Precondition0.precondition,
    val Postcondition0.postcondition = Postcondition0.postcondition, type Output0.output = b
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = C05Map_Map_Type.t_map i f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = a
  clone C05Map_FakeIterator_Next_Interface as Next0 with type self = i, type Item0.item = a
  let rec cfg next [@cfg:stackify] [#"../05_map.rs" 17 4 17 44] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self_1 : borrowed (C05Map_Map_Type.t_map i f);
  var _2 : Core_Option_Option_Type.t_option a;
  var _3 : borrowed i;
  var _4 : isize;
  var e_5 : a;
  var _6 : b;
  var _7 : f;
  var _8 : a;
  var _9 : a;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (C05Map_Map_Type.map_iter ( * self_1));
    self_1 <- { self_1 with current = (let C05Map_Map_Type.C_Map a b =  * self_1 in C05Map_Map_Type.C_Map ( ^ _3) b) };
    _2 <- ([#"../05_map.rs" 18 14 18 30] Next0.next _3);
    goto BB1
  }
  BB1 {
    switch (_2)
      | Core_Option_Option_Type.C_None -> goto BB4
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve e_5 };
    e_5 <- Core_Option_Option_Type.some_0 _2;
    _2 <- (let Core_Option_Option_Type.C_Some a = _2 in Core_Option_Option_Type.C_Some (any a));
    _7 <- C05Map_Map_Type.map_func ( * self_1);
    assume { Resolve1.resolve self_1 };
    assume { Resolve0.resolve _9 };
    _9 <- e_5;
    e_5 <- any a;
    _8 <- (_9);
    _6 <- ([#"../05_map.rs" 20 28 20 42] Call0.call _7 _8);
    goto BB5
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _0 <- Core_Option_Option_Type.C_Some _6;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _2 };
    return _0
  }
  
end
module C05Map_Impl0_Item_Type
  type a
  type b
  type f
  type i
  type item  =
    b
end
module C05Map_Impl0
  type a
  type b
  type f
  type i
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C05Map_Map_Type as C05Map_Map_Type
  clone C05Map_Impl0_Item_Type as Item0 with type a = a, type b = b, type f = f, type i = i
  clone C05Map_Impl0_Next_Interface as Next0 with type a = a, type b = b, type f = f, type i = i
  clone C05Map_FakeIterator_Next_Interface as Next1 with type self = C05Map_Map_Type.t_map i f, val next = Next0.next,
    type Item0.item = Item0.item
  clone C05Map_FakeIterator_Item_Type as Item1 with type self = C05Map_Map_Type.t_map i f, type item = Item0.item
end
