
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
  val postcondition (self : self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
  val postcondition (self : self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call (self : self) (args : args) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] Precondition0.precondition self args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] Postcondition0.postcondition self args result }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res)
end
module CreusotContracts_Std1_Ops_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res)
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 101 4 101 10] ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
  val unnest_refl (self : f) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 107 4 107 10] ()
  val unnest_refl (self : f) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 112 4 112 10] ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module C03GenericBound_ClosureParam_Interface
  type f
  val closure_param [#"../03_generic_bound.rs" 3 0 3 34] (f : f) : ()
end
module C03GenericBound_ClosureParam
  type f
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = uint32,
    type f = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = uint32,
    type f = f,
    type Output0.output = ()
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = uint32,
    type f = f,
    type Output0.output = ()
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = uint32,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve0.resolve,
    type Output0.output = (),
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = uint32,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = uint32,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = uint32,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = (),
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface as Postcondition0 with
    type args = uint32,
    type f = f,
    type Output0.output = ()
  clone CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface as FnOnce0 with
    type args = uint32,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = (),
    axiom .
  clone CreusotContracts_Std1_Ops_Impl2_FnMut_Interface as FnMut0 with
    type args = uint32,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = (),
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = uint32,
    type f = f
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with
    type self = f,
    type args = uint32,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = ()
  let rec cfg closure_param [#"../03_generic_bound.rs" 3 0 3 34] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f : f = f;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../03_generic_bound.rs" 4 4 4 10] Call0.call f ([#"../03_generic_bound.rs" 4 8 4 9] (0 : uint32)));
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve f };
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C03GenericBound_Caller_Closure0_Type
  type c03genericbound_caller_closure0  =
    | C03GenericBound_Caller_Closure0
    
end
module C03GenericBound_Caller_Closure0_Interface
  use export C03GenericBound_Caller_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  predicate resolve [#"../03_generic_bound.rs" 8 18 8 27] (_1 : c03genericbound_caller_closure0) =
    [#"../03_generic_bound.rs" 1 0 1 0] true
  predicate unnest [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (_2 : c03genericbound_caller_closure0)
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] true
  predicate precondition [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (args : uint32)
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_once [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_mut [#"../03_generic_bound.rs" 8 18 8 27] (self : borrowed c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] (let (_x) = args in true) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  val c03GenericBound_Caller_Closure0 [#"../03_generic_bound.rs" 8 18 8 27] (_1 : c03genericbound_caller_closure0) (_x : uint32) : ()
    
end
module C03GenericBound_Caller_Closure0
  use export C03GenericBound_Caller_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  predicate resolve [#"../03_generic_bound.rs" 8 18 8 27] (_1 : c03genericbound_caller_closure0) =
    [#"../03_generic_bound.rs" 1 0 1 0] true
  predicate unnest [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (_2 : c03genericbound_caller_closure0)
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] true
  predicate precondition [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (args : uint32)
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_once [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_mut [#"../03_generic_bound.rs" 8 18 8 27] (self : borrowed c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] (let (_x) = args in true) /\ unnest ( * self) ( ^ self)
  predicate postcondition [#"../03_generic_bound.rs" 8 18 8 27] (self : c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  let rec cfg c03GenericBound_Caller_Closure0 [#"../03_generic_bound.rs" 8 18 8 27] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : c03genericbound_caller_closure0) (_x : uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C03GenericBound_Caller_Interface
  val caller [#"../03_generic_bound.rs" 7 0 7 15] (_1 : ()) : ()
end
module C03GenericBound_Caller
  clone C03GenericBound_Caller_Closure0_Interface as Closure00
  clone C03GenericBound_ClosureParam_Interface as ClosureParam0 with
    type f = Closure00.c03genericbound_caller_closure0
  let rec cfg caller [#"../03_generic_bound.rs" 7 0 7 15] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../03_generic_bound.rs" 8 4 8 31] ClosureParam0.closure_param (Closure00.C03GenericBound_Caller_Closure0));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
