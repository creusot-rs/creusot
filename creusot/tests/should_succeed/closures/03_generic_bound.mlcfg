
module CreusotContracts_Std1_Fun_Impl0_Precondition_Stub
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  val ghost predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Stub as Postcondition0 with type self = self, type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = args, type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  let rec ghost function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost function fn_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  let rec ghost function fn_once (self : f) (_2' : args) (_3' : Output0.output) : () = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C03GenericBound_ClosureParam_Interface
  type f
  val closure_param [@cfg:stackify] (f : f) : ()
end
module C03GenericBound_ClosureParam
  type f
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Std1_Fun_Impl2_FnOnce as FnOnce0 with type args = uint32, type f = f, type Output0.output = ()
  clone CreusotContracts_Std1_Fun_Impl2_FnMut as FnMut0 with type args = uint32, type f = f, type Output0.output = ()
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition as Postcondition0 with type args = uint32, type f = f,
    type Output0.output = ()
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = uint32, type f = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with type self = f, type args = uint32,
    val Precondition0.precondition = Precondition0.precondition,
    val Postcondition0.postcondition = Postcondition0.postcondition, type Output0.output = ()
  let rec cfg closure_param [@cfg:stackify] [#"../03_generic_bound.rs" 3 0 3 34] (f : f) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f_1 : f;
  var _2 : f;
  var _3 : uint32;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _2 <- f_1;
    _3 <- ((0 : uint32));
    _0 <- ([#"../03_generic_bound.rs" 4 4 4 10] Call0.call _2 _3);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve f_1 };
    return _0
  }
  
end
module C03GenericBound_Caller_Closure0_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  type c03genericbound_caller_closure0  =
    | C03GenericBound_Caller_Closure0
    
  predicate precondition [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (args : uint32) =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (args : uint32) (result : ()) =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (args : uint32) (result : ()) =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate resolve (_1' : c03genericbound_caller_closure0) =
    true
  val c03GenericBound_Caller_Closure0 [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (_x : uint32) : ()
end
module C03GenericBound_Caller_Closure0
  type c03genericbound_caller_closure0  =
    | C03GenericBound_Caller_Closure0
    
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  predicate precondition [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (args : uint32) =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (args : uint32) (result : ()) =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c03genericbound_caller_closure0) (args : uint32) (result : ())
    
   =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate postcondition_once [@cfg:stackify] (_1' : c03genericbound_caller_closure0) (args : uint32) (result : ()) =
    [#"../03_generic_bound.rs" 1 0 1 0] let (_x) = args in true
  predicate resolve (_1' : c03genericbound_caller_closure0) =
    true
  let rec cfg c03GenericBound_Caller_Closure0 [@cfg:stackify] [#"../03_generic_bound.rs" 8 18 8 27] (_1' : c03genericbound_caller_closure0) (_x : uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : c03genericbound_caller_closure0;
  var _x_2 : uint32;
  {
    _1 <- _1';
    _x_2 <- _x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C03GenericBound_Caller_Interface
  val caller [@cfg:stackify] (_ : ()) : ()
end
module C03GenericBound_Caller
  clone C03GenericBound_Caller_Closure0_Interface as Closure00 with axiom .
  clone C03GenericBound_ClosureParam_Interface as ClosureParam0 with type f = Closure00.c03genericbound_caller_closure0
  let rec cfg caller [@cfg:stackify] [#"../03_generic_bound.rs" 7 0 7 15] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : Closure00.c03genericbound_caller_closure0;
  {
    goto BB0
  }
  BB0 {
    _1 <- Closure00.C03GenericBound_Caller_Closure0;
    _0 <- ([#"../03_generic_bound.rs" 8 4 8 31] ClosureParam0.closure_param _1);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
