
module C03GenericBound_ClosureParam
  type f
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  predicate postcondition_mut0 (self : borrowed f) (_2 : uint32) (_3 : ())
  val postcondition_mut0 (self : borrowed f) (_2 : uint32) (_3 : ()) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv4 (_x : borrowed f)
  val inv4 (_x : borrowed f) : bool
    ensures { result = inv4 _x }
    
  predicate postcondition_once0 (self : f) (_2 : uint32) (_3 : ())
  val postcondition_once0 (self : f) (_2 : uint32) (_3 : ()) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv3 (_x : ())
  val inv3 (_x : ()) : bool
    ensures { result = inv3 _x }
    
  predicate inv2 (_x : uint32)
  val inv2 (_x : uint32) : bool
    ensures { result = inv2 _x }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : f) (args : uint32) (res : ()) : ()
  val fn_mut_once0 (self : f) (args : uint32) (res : ()) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv2 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv3 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv4 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : uint32) (res : ()) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : uint32) (res : ()) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv2 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv3 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant4 (self : borrowed f)
  val invariant4 (self : borrowed f) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : borrowed f . inv4 x = true
  predicate invariant3 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : ()) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : () . inv3 x = true
  predicate postcondition0 (self : f) (_2 : uint32) (_3 : ())
  val postcondition0 (self : f) (_2 : uint32) (_3 : ()) : bool
    ensures { result = postcondition0 self _2 _3 }
    
  function fn_once0 (self : f) (args : uint32) (res : ()) : ()
  val fn_once0 (self : f) (args : uint32) (res : ()) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv2 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv3 res}
    ensures { result = fn_once0 self args res }
    
  axiom fn_once0_spec : forall self : f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once0 self args res = (resolve0 self /\ postcondition0 self args res))
  predicate resolve1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed f) : bool
    ensures { result = resolve1 self }
    
  function fn_mut0 (self : borrowed f) (args : uint32) (res : ()) : ()
  val fn_mut0 (self : borrowed f) (args : uint32) (res : ()) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv4 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv2 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv3 res}
    ensures { result = fn_mut0 self args res }
    
  axiom fn_mut0_spec : forall self : borrowed f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut0 self args res = (resolve1 self /\ postcondition0 ( * self) args res))
  predicate invariant2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : uint32) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : uint32 . inv2 x = true
  predicate invariant1 (self : f)
  val invariant1 (self : f) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : f)
  val inv1 (_x : f) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : f . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (_2 : uint32)
  val precondition0 (self : f) (_2 : uint32) : bool
    ensures { result = precondition0 self _2 }
    
  val call0 (self : f) (args : uint32) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition0 self args}
    requires {inv1 self}
    requires {inv2 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition0 self args result }
    ensures { inv3 result }
    
  use prelude.Int
  let rec cfg closure_param [#"../03_generic_bound.rs" 3 0 3 34] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) : ()
    requires {[#"../03_generic_bound.rs" 3 29 3 30] inv0 f}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var f : f = f;
  var _3 : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../03_generic_bound.rs" 4 4 4 10] _3 <- (([#"../03_generic_bound.rs" 4 8 4 9] (0 : uint32)));
    [#"../03_generic_bound.rs" 4 4 4 10] _0 <- ([#"../03_generic_bound.rs" 4 4 4 10] call0 f _3);
    _3 <- any uint32;
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 f };
    assume { resolve0 f };
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C03GenericBound_Caller_Closure0_Type
  use prelude.UInt32
  use prelude.Int8
  type c03genericbound_caller_closure0  =
    | C03GenericBound_Caller_Closure0
    
end
module C03GenericBound_Caller_Closure0
  use prelude.Int8
  use prelude.UInt32
  use prelude.Int
  use C03GenericBound_Caller_Closure0_Type as C03GenericBound_Caller_Closure0
  use prelude.Borrow
  let rec cfg c03GenericBound_Caller_Closure0 [#"../03_generic_bound.rs" 8 18 8 27] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0) (_x : uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../03_generic_bound.rs" 8 28 8 30] _0 <- ();
    return _0
  }
  
end
module C03GenericBound_Caller
  use prelude.UInt32
  use prelude.Int8
  use C03GenericBound_Caller_Closure0_Type as C03GenericBound_Caller_Closure0
  predicate invariant0 (self : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0)
  val inv0 (_x : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0 . inv0 x = true
  val closure_param0 [#"../03_generic_bound.rs" 3 0 3 34] (f : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0) : ()
    requires {[#"../03_generic_bound.rs" 3 29 3 30] inv0 f}
    
  let rec cfg caller [#"../03_generic_bound.rs" 7 0 7 15] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0;
  {
    goto BB0
  }
  BB0 {
    [#"../03_generic_bound.rs" 8 18 8 30] _1 <- C03GenericBound_Caller_Closure0.C03GenericBound_Caller_Closure0;
    [#"../03_generic_bound.rs" 8 4 8 31] _0 <- ([#"../03_generic_bound.rs" 8 4 8 31] closure_param0 _1);
    _1 <- any C03GenericBound_Caller_Closure0.c03genericbound_caller_closure0;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
