
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.Borrow
  type c08multiplecalls_multiuse_closure0 't =
    | C08MultipleCalls_MultiUse_Closure0 't
    
end
module C08MultipleCalls_MultiUse_Closure0_Interface
  type t
  use export C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  let function field_0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_multiple_calls.rs" 1 0 1 0] let C08MultipleCalls_MultiUse_Closure0 a = self in a
  predicate resolve [#"../08_multiple_calls.rs" 5 12 5 31] (_1 : c08multiplecalls_multiuse_closure0 t) =
    [#"../08_multiple_calls.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_2 : c08multiplecalls_multiuse_closure0 t)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_ : ()) =
    [#"../08_multiple_calls.rs" 5 23 5 29] field_0 self = field_0 self
  predicate postcondition_once [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate postcondition_mut [#"../08_multiple_calls.rs" 5 12 5 31] (self : borrowed (c08multiplecalls_multiuse_closure0 t)) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  predicate postcondition [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  val c08MultipleCalls_MultiUse_Closure0 [#"../08_multiple_calls.rs" 5 12 5 31] (_1 : c08multiplecalls_multiuse_closure0 t) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] field_0 _1 = field_0 _1}
    
end
module C08MultipleCalls_MultiUse_Closure0
  type t
  use export C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = c08multiplecalls_multiuse_closure0 t
  let function field_0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_multiple_calls.rs" 1 0 1 0] let C08MultipleCalls_MultiUse_Closure0 a = self in a
  predicate resolve [#"../08_multiple_calls.rs" 5 12 5 31] (_1 : c08multiplecalls_multiuse_closure0 t) =
    [#"../08_multiple_calls.rs" 1 0 1 0] Resolve1.resolve (field_0 _1)
  predicate unnest [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_2 : c08multiplecalls_multiuse_closure0 t)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_ : ()) =
    [#"../08_multiple_calls.rs" 5 23 5 29] field_0 self = field_0 self
  predicate postcondition_once [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate postcondition_mut [#"../08_multiple_calls.rs" 5 12 5 31] (self : borrowed (c08multiplecalls_multiuse_closure0 t)) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  predicate postcondition [#"../08_multiple_calls.rs" 5 12 5 31] (self : c08multiplecalls_multiuse_closure0 t) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  let rec cfg c08MultipleCalls_MultiUse_Closure0 [#"../08_multiple_calls.rs" 5 12 5 31] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : c08multiplecalls_multiuse_closure0 t) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] field_0 _1 = field_0 _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : c08multiplecalls_multiuse_closure0 t = _1;
  var res : uint32;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _1 };
    res <- ([#"../08_multiple_calls.rs" 8 8 8 9] (0 : uint32));
    _0 <- res;
    return _0
  }
  
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module C08MultipleCalls_UsesFn_Interface
  type f
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = (),
    type f = f,
    type Output0.output = uint32
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = (),
    type f = f
  val uses_fn [#"../08_multiple_calls.rs" 19 0 19 32] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 17 11 17 29] Precondition0.precondition f ()}
    requires {[#"../08_multiple_calls.rs" 19 27 19 28] Inv0.inv f}
    ensures { [#"../08_multiple_calls.rs" 18 0 18 70] exists r : uint32 . exists f2 : f . Inv1.inv f2 /\ f2 = f /\ Postcondition0.postcondition f2 () r }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module C08MultipleCalls_MultiUse_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val multi_use [#"../08_multiple_calls.rs" 4 0 4 26] (x : t) : ()
    requires {[#"../08_multiple_calls.rs" 4 20 4 21] Inv0.inv x}
    
end
module C08MultipleCalls_MultiUse
  type t
  use prelude.Borrow
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone C08MultipleCalls_MultiUse_Closure0_Interface as Closure00 with
    type t = t,
    predicate Resolve0.resolve = Resolve1.resolve
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Closure00.c08multiplecalls_multiuse_closure0 t
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Closure00.c08multiplecalls_multiuse_closure0 t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Closure00.c08multiplecalls_multiuse_closure0 t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Closure00.c08multiplecalls_multiuse_closure0 t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  clone C08MultipleCalls_UsesFn_Interface as UsesFn0 with
    type f = Closure00.c08multiplecalls_multiuse_closure0 t,
    predicate Precondition0.precondition = Closure00.precondition,
    predicate Postcondition0.postcondition = Closure00.postcondition,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv
  let rec cfg multi_use [#"../08_multiple_calls.rs" 4 0 4 26] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) : ()
    requires {[#"../08_multiple_calls.rs" 4 20 4 21] Inv0.inv x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : t = x;
  var c : Closure00.c08multiplecalls_multiuse_closure0 t;
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    c <- Closure00.C08MultipleCalls_MultiUse_Closure0 x;
    assume { Closure00.resolve c };
    _4 <- ([#"../08_multiple_calls.rs" 11 4 11 14] UsesFn0.uses_fn c);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv x };
    assume { Resolve0.resolve x };
    _0 <- ();
    return _0
  }
  
end
