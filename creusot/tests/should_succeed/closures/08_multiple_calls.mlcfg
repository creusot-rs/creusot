
module CreusotContracts_Std1_Fun_Impl0_Precondition_Stub
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  val ghost predicate precondition (self : f) (_2' : args)
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  val ghost predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module C08MultipleCalls_UsesFn_Interface
  type f
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition_Stub as Postcondition0 with type args = (), type f = f,
    type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Stub as Precondition0 with type args = (), type f = f
  val uses_fn [@cfg:stackify] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 17 11 17 29] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 18 0 18 70] exists r : uint32 . exists f2 : f . f2 = f /\ Postcondition0.postcondition f2 () r }
    
end
module C08MultipleCalls_UsesFn
  type f
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface as Postcondition0 with type args = (), type f = f,
    type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = (), type f = f
  val uses_fn [@cfg:stackify] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 17 11 17 29] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 18 0 18 70] exists r : uint32 . exists f2 : f . f2 = f /\ Postcondition0.postcondition f2 () r }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module C08MultipleCalls_MultiUse_Closure0_Interface
  type t
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  type c08multiplecalls_multiuse_closure0  =
    | C08MultipleCalls_MultiUse_Closure0 t
    
  let function c08multiplecalls_multiuse_closure0_0 (self : c08multiplecalls_multiuse_closure0) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C08MultipleCalls_MultiUse_Closure0 a -> a
      end
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t
  predicate precondition [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) (_ : ()) =
    [#"../08_multiple_calls.rs" 5 23 5 29] c08multiplecalls_multiuse_closure0_0 _1' = c08multiplecalls_multiuse_closure0_0 _1'
  predicate postcondition [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) (_ : ()) (result : uint32) =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c08multiplecalls_multiuse_closure0) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate postcondition_once [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) (_ : ()) (result : uint32) =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate resolve (_1' : c08multiplecalls_multiuse_closure0) =
    Resolve0.resolve (c08multiplecalls_multiuse_closure0_0 _1')
  val c08MultipleCalls_MultiUse_Closure0 [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] c08multiplecalls_multiuse_closure0_0 _1' = c08multiplecalls_multiuse_closure0_0 _1'}
    
end
module C08MultipleCalls_MultiUse_Closure0
  type t
  use prelude.Borrow
  type c08multiplecalls_multiuse_closure0  =
    | C08MultipleCalls_MultiUse_Closure0 t
    
  let function c08multiplecalls_multiuse_closure0_0 (self : c08multiplecalls_multiuse_closure0) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C08MultipleCalls_MultiUse_Closure0 a -> a
      end
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  predicate precondition [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) (_ : ()) =
    [#"../08_multiple_calls.rs" 5 23 5 29] c08multiplecalls_multiuse_closure0_0 _1' = c08multiplecalls_multiuse_closure0_0 _1'
  predicate postcondition [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) (_ : ()) (result : uint32) =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c08multiplecalls_multiuse_closure0) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate postcondition_once [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure0) (_ : ()) (result : uint32) =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  predicate resolve (_1' : c08multiplecalls_multiuse_closure0) =
    Resolve0.resolve (c08multiplecalls_multiuse_closure0_0 _1')
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = c08multiplecalls_multiuse_closure0
  let rec cfg c08MultipleCalls_MultiUse_Closure0 [@cfg:stackify] [#"../08_multiple_calls.rs" 6 4 6 6] (_1' : c08multiplecalls_multiuse_closure0) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] c08multiplecalls_multiuse_closure0_0 _1' = c08multiplecalls_multiuse_closure0_0 _1'}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : c08multiplecalls_multiuse_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- (0 : uint32);
    assume { Resolve1.resolve _1 };
    return _0
  }
  
end
module C08MultipleCalls_MultiUse_Interface
  type t
  use prelude.Borrow
  val multi_use [@cfg:stackify] (x : t) : ()
end
module C08MultipleCalls_MultiUse
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone C08MultipleCalls_MultiUse_Closure0_Interface as Closure00 with type t = t,
    val Resolve0.resolve = Resolve0.resolve, axiom .
  clone C08MultipleCalls_UsesFn_Interface as UsesFn0 with type f = Closure00.c08multiplecalls_multiuse_closure0,
    val Precondition0.precondition = Closure00.precondition, val Postcondition0.postcondition = Closure00.postcondition
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  let rec cfg multi_use [@cfg:stackify] [#"../08_multiple_calls.rs" 4 0 4 26] (x : t) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : t;
  var c_2 : Closure00.c08multiplecalls_multiuse_closure0;
  var closure_3 : Closure00.c08multiplecalls_multiuse_closure0;
  var _4 : t;
  var _6 : ();
  var _7 : Closure00.c08multiplecalls_multiuse_closure0;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    assume { Resolve1.resolve x_1 };
    closure_3 <- Closure00.C08MultipleCalls_MultiUse_Closure0 _4;
    assume { Closure00.resolve c_2 };
    c_2 <- closure_3;
    assume { Closure00.resolve closure_3 };
    assume { Closure00.resolve _7 };
    _7 <- c_2;
    assume { Closure00.resolve c_2 };
    _6 <- ([#"../08_multiple_calls.rs" 11 4 11 14] UsesFn0.uses_fn _7);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
