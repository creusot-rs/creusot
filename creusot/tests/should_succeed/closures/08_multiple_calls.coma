
module C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.UInt32
  use prelude.Int8
  use prelude.Borrow
  type c08multiplecalls_multiuse_closure0 't =
    | C08multiplecalls_multiuse_closure0 't
    
  let rec c08multiplecalls_multiuse_closure0 < 't > (input:c08multiplecalls_multiuse_closure0 't) (ret  (x:'t))= any
    [ good (x:'t)-> {C08multiplecalls_multiuse_closure0 x = input} (! ret {x})
    | bad (x:'t)-> {C08multiplecalls_multiuse_closure0 x <> input} {false} any ]
    
end
module C08MultipleCalls_MultiUse_Closure0
  type t
  use prelude.Int8
  use prelude.Borrow
  use prelude.UInt32
  use C08MultipleCalls_MultiUse_Closure0_Type as C08MultipleCalls_MultiUse_Closure0_Type
  function field_0'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) : t
    
   =
    let C08MultipleCalls_MultiUse_Closure0_Type.C08multiplecalls_multiuse_closure0 a = self in a
  let rec field_0'0 (self:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:t))= any
    [ return' (result:t)-> {result = field_0'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Int
  predicate resolve'0 (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t)
  let rec resolve'0 (self:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c08multiplecalls_multiuse_closure0 (_1:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:uint32))= {[#"../08_multiple_calls.rs" 5 23 5 29] field_0'0 _1
    = field_0'0 _1}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 =  [ &res <- [#"../08_multiple_calls.rs" 8 8 8 9] (0 : uint32) ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & _1 : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t = _1
    | & res : uint32 = any_l () : uint32 ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module C08MultipleCalls_MultiUse
  type t
  use prelude.UInt32
  use prelude.Int8
  use C08MultipleCalls_MultiUse_Closure0_Type as C08MultipleCalls_MultiUse_Closure0_Type
  predicate invariant'2 (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t)
  let rec invariant'2 (self:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t)
  let rec inv'2 (_x:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t . inv'2 x = true
  predicate invariant'1 (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t)
  let rec invariant'1 (self:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t)
  let rec inv'1 (_x:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  predicate postcondition'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (_ : ()) (result : uint32)
    
   =
    true
  function field_0'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) : t
    
   =
    let C08MultipleCalls_MultiUse_Closure0_Type.C08multiplecalls_multiuse_closure0 a = self in a
  let rec field_0'0 (self:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:t))= any
    [ return' (result:t)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate precondition'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (_ : ())
    
   =
    [#"../08_multiple_calls.rs" 5 23 5 29] field_0'0 self = field_0'0 self
  let rec uses_fn'0 (f:C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t) (return'  (ret:()))= {[@expl:precondition] [#"../08_multiple_calls.rs" 19 27 19 28] inv'1 f}
    {[@expl:precondition] [#"../08_multiple_calls.rs" 17 11 17 29] precondition'0 f ()}
    any
    [ return' (result:())-> {[#"../08_multiple_calls.rs" 18 0 18 70] exists r : uint32 . exists f2 : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t . inv'2 f2
      /\ f2 = f /\ postcondition'0 f2 () r}
      (! return' {result}) ]
    
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../08_multiple_calls.rs" 5 12 5 31] (_1 : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t)
    
   =
    resolve'2 (field_0'0 _1)
  let rec multi_use (x:t) (return'  (ret:()))= {[#"../08_multiple_calls.rs" 4 20 4 21] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &c <- C08MultipleCalls_MultiUse_Closure0_Type.C08multiplecalls_multiuse_closure0 x : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t ]
        
        s1
      | s1 = -{resolve'0 c}- s2
      | s2 = uses_fn'0 {c} (fun (_ret':()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 x} s1
      | s1 = -{resolve'1 x}- s2
      | s2 =  [ &_0 <- [#"../08_multiple_calls.rs" 4 27 14 1] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : t = x
    | & c : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t = any_l () : C08MultipleCalls_MultiUse_Closure0_Type.c08multiplecalls_multiuse_closure0 t
    | & _4 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
