
module C07MutableCapture_TestFnmut_Closure1_Type
  use prelude.Int32
  use prelude.Int16
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c07mutablecapture_testfnmut_closure1  =
    | C07MutableCapture_TestFnmut_Closure1 (borrowed uint32)
    
end
module C07MutableCapture_TestFnmut_Closure1
  use prelude.Int16
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Int32
  use C07MutableCapture_TestFnmut_Closure1_Type as C07MutableCapture_TestFnmut_Closure1
  function field_00 [#"../07_mutable_capture.rs" 8 8 8 37] (self : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : borrowed uint32
    
   =
    let C07MutableCapture_TestFnmut_Closure1.C07MutableCapture_TestFnmut_Closure1 a = self in a
  val field_00 [#"../07_mutable_capture.rs" 8 8 8 37] (self : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : borrowed uint32
    ensures { result = field_00 self }
    
  predicate unnest0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) (_2 : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  use prelude.UInt32
  predicate resolve0 (self : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c07MutableCapture_TestFnmut_Closure1 [#"../07_mutable_capture.rs" 8 8 8 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : int32
    requires {[#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_00 ( * _1)) < 1000000}
    ensures { [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_00 ( ^ _1)) = UInt32.to_int ( * field_00 ( * _1)) + 1 }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1 = _1;
  var res : int32;
  var res1 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../07_mutable_capture.rs" 10 12 10 18] _1 <- { _1 with current = (let C07MutableCapture_TestFnmut_Closure1.C07MutableCapture_TestFnmut_Closure1 x0 =  * _1 in C07MutableCapture_TestFnmut_Closure1.C07MutableCapture_TestFnmut_Closure1 ({ (field_00 ( * _1)) with current = ([#"../07_mutable_capture.rs" 10 12 10 18]  * field_00 ( * _1) + ([#"../07_mutable_capture.rs" 10 17 10 18] [#"../07_mutable_capture.rs" 10 17 10 18] (1 : uint32))) })) };
    assume { resolve0 _1 };
    [#"../07_mutable_capture.rs" 11 12 11 13] res1 <- ([#"../07_mutable_capture.rs" 11 12 11 13] [#"../07_mutable_capture.rs" 11 12 11 13] (5 : int32));
    [#"../07_mutable_capture.rs" 7 8 7 35] res <- ([#"../07_mutable_capture.rs" 7 8 7 35] res1);
    [#"../07_mutable_capture.rs" 8 8 8 37] _0 <- ([#"../07_mutable_capture.rs" 8 8 8 37] res);
    return _0
  }
  
end
module C07MutableCapture_TestFnmut
  use prelude.Int32
  use prelude.UInt32
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve2 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed uint32) : bool
    ensures { result = resolve2 self }
    
  use prelude.Int
  use prelude.Int16
  use C07MutableCapture_TestFnmut_Closure1_Type as C07MutableCapture_TestFnmut_Closure1
  function field_00 [#"../07_mutable_capture.rs" 8 8 8 37] (self : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : borrowed uint32
    
   =
    let C07MutableCapture_TestFnmut_Closure1.C07MutableCapture_TestFnmut_Closure1 a = self in a
  val field_00 [#"../07_mutable_capture.rs" 8 8 8 37] (self : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : borrowed uint32
    ensures { result = field_00 self }
    
  predicate resolve0 [#"../07_mutable_capture.rs" 8 8 8 37] (_1 : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1)
    
   =
    resolve2 (field_00 _1)
  predicate unnest0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) (_2 : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1)
    
   =
     ^ field_00 _2 =  ^ field_00 self
  predicate resolve1 (self : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : bool
    ensures { result = resolve1 self }
    
  val closure10 [#"../07_mutable_capture.rs" 8 8 8 37] (_1 : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1) : int32
    requires {[#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_00 ( * _1)) < 1000000}
    ensures { [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_00 ( ^ _1)) = UInt32.to_int ( * field_00 ( * _1)) + 1 }
    ensures { unnest0 ( * _1) ( ^ _1) }
    
  let rec cfg test_fnmut [#"../07_mutable_capture.rs" 5 0 5 29] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : ()
    requires {[#"../07_mutable_capture.rs" 4 11 4 24] UInt32.to_int x = 100000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : uint32 = x;
  var c : C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1;
  var _4 : borrowed uint32;
  var _5 : int32;
  var _6 : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1;
  var _8 : int32;
  var _9 : borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1;
  {
    goto BB0
  }
  BB0 {
    [#"../07_mutable_capture.rs" 8 8 8 37] _4 <- Borrow.borrow_mut x;
    [#"../07_mutable_capture.rs" 8 8 8 37] x <-  ^ _4;
    [#"../07_mutable_capture.rs" 8 8 8 37] c <- ([#"../07_mutable_capture.rs" 8 8 8 37] C07MutableCapture_TestFnmut_Closure1.C07MutableCapture_TestFnmut_Closure1 _4);
    _4 <- any borrowed uint32;
    [#"../07_mutable_capture.rs" 14 4 14 5] _6 <- Borrow.borrow_mut c;
    [#"../07_mutable_capture.rs" 14 4 14 5] c <-  ^ _6;
    [#"../07_mutable_capture.rs" 14 4 14 7] _5 <- ([#"../07_mutable_capture.rs" 14 4 14 7] let () = [#"../07_mutable_capture.rs" 14 4 14 7] () in closure10 _6);
    _6 <- any borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1;
    goto BB1
  }
  BB1 {
    [#"../07_mutable_capture.rs" 15 4 15 5] _9 <- Borrow.borrow_mut c;
    [#"../07_mutable_capture.rs" 15 4 15 5] c <-  ^ _9;
    [#"../07_mutable_capture.rs" 15 4 15 7] _8 <- ([#"../07_mutable_capture.rs" 15 4 15 7] let () = [#"../07_mutable_capture.rs" 15 4 15 7] () in closure10 _9);
    _9 <- any borrowed C07MutableCapture_TestFnmut_Closure1.c07mutablecapture_testfnmut_closure1;
    goto BB2
  }
  BB2 {
    assume { resolve0 c };
    assert { [@expl:assertion] [#"../07_mutable_capture.rs" 17 20 17 33] UInt32.to_int x = 100002 };
    [#"../07_mutable_capture.rs" 5 30 18 1] _0 <- ([#"../07_mutable_capture.rs" 5 30 18 1] ());
    return _0
  }
  
end
