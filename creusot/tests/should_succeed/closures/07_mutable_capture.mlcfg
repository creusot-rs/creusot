
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module C07MutableCapture_TestFnmut_Closure1_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  type c07mutablecapture_testfnmut_closure1  =
    | C07MutableCapture_TestFnmut_Closure1 (borrowed uint32)
    
end
module C07MutableCapture_TestFnmut_Closure1_Interface
  use export C07MutableCapture_TestFnmut_Closure1_Type
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  use prelude.Int32
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = uint32
  let function field_0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) : borrowed uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_mutable_capture.rs" 1 0 1 0] let C07MutableCapture_TestFnmut_Closure1 a = self in a
  predicate resolve [#"../07_mutable_capture.rs" 8 8 8 37] (_1 : c07mutablecapture_testfnmut_closure1) =
    [#"../07_mutable_capture.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_2 : c07mutablecapture_testfnmut_closure1)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ()) =
    [#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 self) < 1000000
  predicate postcondition_once [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ()) (result : int32)
    
   =
    [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( ^ field_0 self) = UInt32.to_int ( * field_0 self) + 1
  predicate postcondition_mut [#"../07_mutable_capture.rs" 8 8 8 37] (self : borrowed c07mutablecapture_testfnmut_closure1) (_ : ()) (result : int32)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0] UInt32.to_int ( * field_0 ( ^ self)) = UInt32.to_int ( * field_0 ( * self)) + 1 /\ unnest ( * self) ( ^ self)
  val c07MutableCapture_TestFnmut_Closure1 [#"../07_mutable_capture.rs" 8 8 8 37] (_1 : borrowed c07mutablecapture_testfnmut_closure1) : int32
    requires {[#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 ( * _1)) < 1000000}
    ensures { [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_0 ( ^ _1)) = UInt32.to_int ( * field_0 ( * _1)) + 1 }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C07MutableCapture_TestFnmut_Closure1
  use export C07MutableCapture_TestFnmut_Closure1_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = c07mutablecapture_testfnmut_closure1
  let function field_0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) : borrowed uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_mutable_capture.rs" 1 0 1 0] let C07MutableCapture_TestFnmut_Closure1 a = self in a
  predicate resolve [#"../07_mutable_capture.rs" 8 8 8 37] (_1 : c07mutablecapture_testfnmut_closure1) =
    [#"../07_mutable_capture.rs" 1 0 1 0] Resolve1.resolve (field_0 _1)
  predicate unnest [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_2 : c07mutablecapture_testfnmut_closure1)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ()) =
    [#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 self) < 1000000
  predicate postcondition_once [#"../07_mutable_capture.rs" 8 8 8 37] (self : c07mutablecapture_testfnmut_closure1) (_ : ()) (result : int32)
    
   =
    [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( ^ field_0 self) = UInt32.to_int ( * field_0 self) + 1
  predicate postcondition_mut [#"../07_mutable_capture.rs" 8 8 8 37] (self : borrowed c07mutablecapture_testfnmut_closure1) (_ : ()) (result : int32)
    
   =
    [#"../07_mutable_capture.rs" 1 0 1 0] UInt32.to_int ( * field_0 ( ^ self)) = UInt32.to_int ( * field_0 ( * self)) + 1 /\ unnest ( * self) ( ^ self)
  let rec cfg c07MutableCapture_TestFnmut_Closure1 [#"../07_mutable_capture.rs" 8 8 8 37] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed c07mutablecapture_testfnmut_closure1) : int32
    requires {[#"../07_mutable_capture.rs" 7 19 7 33] UInt32.to_int ( * field_0 ( * _1)) < 1000000}
    ensures { [#"../07_mutable_capture.rs" 8 18 8 35] UInt32.to_int ( * field_0 ( ^ _1)) = UInt32.to_int ( * field_0 ( * _1)) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : int32;
  var _1 : borrowed c07mutablecapture_testfnmut_closure1 = _1;
  var res : int32;
  var res1 : int32;
  {
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C07MutableCapture_TestFnmut_Closure1 a =  * _1 in C07MutableCapture_TestFnmut_Closure1 ({ (field_0 ( * _1)) with current = ([#"../07_mutable_capture.rs" 10 12 10 18]  * field_0 ( * _1) + ([#"../07_mutable_capture.rs" 10 17 10 18] [#"../07_mutable_capture.rs" 10 17 10 18] (1 : uint32))) })) };
    assume { Resolve0.resolve _1 };
    res1 <- ([#"../07_mutable_capture.rs" 11 12 11 13] [#"../07_mutable_capture.rs" 11 12 11 13] (5 : int32));
    res <- res1;
    _0 <- res;
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl3_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl3_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl3_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C07MutableCapture_TestFnmut_Interface
  use prelude.UInt32
  use prelude.Int
  val test_fnmut [#"../07_mutable_capture.rs" 5 0 5 29] (x : uint32) : ()
    requires {[#"../07_mutable_capture.rs" 4 11 4 24] UInt32.to_int x = 100000}
    
end
module C07MutableCapture_TestFnmut
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use prelude.Int32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  clone C07MutableCapture_TestFnmut_Closure1_Interface as Closure10 with
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg test_fnmut [#"../07_mutable_capture.rs" 5 0 5 29] [@cfg:stackify] [@cfg:subregion_analysis] (x : uint32) : ()
    requires {[#"../07_mutable_capture.rs" 4 11 4 24] UInt32.to_int x = 100000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : uint32 = x;
  var c : Closure10.c07mutablecapture_testfnmut_closure1;
  var _4 : borrowed uint32;
  var _5 : int32;
  var _6 : borrowed Closure10.c07mutablecapture_testfnmut_closure1;
  var _8 : int32;
  var _9 : borrowed Closure10.c07mutablecapture_testfnmut_closure1;
  {
    goto BB0
  }
  BB0 {
    _4 <- Borrow.borrow_mut x;
    x <-  ^ _4;
    c <- ([#"../07_mutable_capture.rs" 8 8 8 37] Closure10.C07MutableCapture_TestFnmut_Closure1 _4);
    _4 <- any borrowed uint32;
    _6 <- Borrow.borrow_mut c;
    c <-  ^ _6;
    _5 <- ([#"../07_mutable_capture.rs" 14 4 14 7] let () = [#"../07_mutable_capture.rs" 14 4 14 7] () in Closure10.c07MutableCapture_TestFnmut_Closure1 _6);
    _6 <- any borrowed Closure10.c07mutablecapture_testfnmut_closure1;
    goto BB1
  }
  BB1 {
    _9 <- Borrow.borrow_mut c;
    c <-  ^ _9;
    _8 <- ([#"../07_mutable_capture.rs" 15 4 15 7] let () = [#"../07_mutable_capture.rs" 15 4 15 7] () in Closure10.c07MutableCapture_TestFnmut_Closure1 _9);
    _9 <- any borrowed Closure10.c07mutablecapture_testfnmut_closure1;
    goto BB2
  }
  BB2 {
    assume { Closure10.resolve c };
    assert { [@expl:assertion] [#"../07_mutable_capture.rs" 17 20 17 33] UInt32.to_int x = 100002 };
    _0 <- ([#"../07_mutable_capture.rs" 5 30 18 1] ());
    return _0
  }
  
end
