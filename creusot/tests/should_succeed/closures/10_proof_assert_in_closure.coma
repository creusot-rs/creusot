
module M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int8
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z  =
    | M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z int32
  
  let rec m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z (input:m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z) (ret  (x:int32))= any
    [ good (x:int32)-> {M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z x = input}
      (! ret {x})
    | bad (x:int32)-> {M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z x <> input}
      {false}
      any ]
    
end
module M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z
  let%span s10_proof_assert_in_closure0 = "../10_proof_assert_in_closure.rs" 8 22 8 31
  
  let%span s10_proof_assert_in_closure1 = "../10_proof_assert_in_closure.rs" 6 16 6 25
  
  use prelude.prelude.Int8
  
  use prelude.prelude.Int32
  
  use M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  function field_0'0 [#"../10_proof_assert_in_closure.rs" 7 4 7 6] (self : Closure'0.m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z) : int32
    
   =
    let Closure'0.M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z a = self in a
  
  let rec m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z (_1:Closure'0.m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[%#s10_proof_assert_in_closure1] field_0'0 _1
    = (1 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_proof_assert_in_closure0] field_0'0 _1 = (1 : int32)} s1 | s1 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : Closure'0.m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z = _1 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_10_proof_assert_in_closure__immutable_capture
  let%span s10_proof_assert_in_closure0 = "../10_proof_assert_in_closure.rs" 5 12 5 13
  
  let%span span1 = "../10_proof_assert_in_closure.rs" 6 16 6 25
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int8
  
  use M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  function field_0'0 [#"../10_proof_assert_in_closure.rs" 7 4 7 6] (self : Closure'0.m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z) : int32
    
   =
    let Closure'0.M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z a = self in a
  
  let rec closure0'0 (_1:Closure'0.m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[@expl:precondition] [%#span1] field_0'0 _1
    = (1 : int32)}
    any [ return' (result:())-> (! return' {result}) ] 
  
  let rec immutable_capture (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s10_proof_assert_in_closure0] (1 : int32) ] s1
      | s1 =  [ &_4 <- Closure'0.M_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z x ] s2
      | s2 = closure0'0 {_4} (fun (_ret':()) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & _2 : () = any_l ()
    | & _4 : Closure'0.m_10_proof_assert_in_closure__immutable_capture__qy123zclosureqy35z0qy125z = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int16
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z  =
    | M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z (borrowed int32)
  
  let rec m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z (input:m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) (ret  (x:borrowed int32))= any
    [ good (x:borrowed int32)-> {M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z x = input}
      (! ret {x})
    | bad (x:borrowed int32)-> {M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z x <> input}
      {false}
      any ]
    
end
module M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z
  let%span s10_proof_assert_in_closure0 = "../10_proof_assert_in_closure.rs" 16 22 16 31
  
  let%span s10_proof_assert_in_closure1 = "../10_proof_assert_in_closure.rs" 17 12 17 13
  
  let%span s10_proof_assert_in_closure2 = "../10_proof_assert_in_closure.rs" 18 22 18 31
  
  let%span s10_proof_assert_in_closure3 = "../10_proof_assert_in_closure.rs" 14 16 14 25
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  use M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  function field_0'0 [#"../10_proof_assert_in_closure.rs" 15 4 15 6] (self : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) : borrowed int32
    
   =
    let Closure'0.M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z a = self in a
  
  predicate unnest'0 [#"../10_proof_assert_in_closure.rs" 15 4 15 6] (self : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z)
    
   =
    [%#span4] self.final = self.current
  
  let rec m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z (_1:borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[%#s10_proof_assert_in_closure3] (field_0'0 _1.current).current
    = (1 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_proof_assert_in_closure0] (field_0'0 _1.current).current = (1 : int32)} s1
      | s1 = Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z {_1.current}
          (fun (l'0:borrowed int32) ->
            
            [ &_1 <- { _1 with current = Closure'0.M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z ({ l'0 with current = ([%#s10_proof_assert_in_closure1] (2 : int32)) ; }) ; } ]
            
            s2)
      | s2 = -{resolve'0 _1}- s3
      | s3 = {[@expl:assertion] [%#s10_proof_assert_in_closure2] (field_0'0 _1.current).current = (2 : int32)} s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z = _1 ]
     [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final} (! return' {result}) ] 
end
module M_10_proof_assert_in_closure__mutable_capture
  let%span s10_proof_assert_in_closure0 = "../10_proof_assert_in_closure.rs" 13 16 13 17
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span2 = "../10_proof_assert_in_closure.rs" 14 16 14 25
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'2 (self : borrowed int32) =
    [%#span1] self.final = self.current
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int16
  
  use M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  function field_0'0 [#"../10_proof_assert_in_closure.rs" 15 4 15 6] (self : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) : borrowed int32
    
   =
    let Closure'0.M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z a = self in a
  
  predicate resolve'0 [#"../10_proof_assert_in_closure.rs" 15 4 15 6] (_1 : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z)
    
   =
    resolve'2 (field_0'0 _1)
  
  predicate unnest'0 [#"../10_proof_assert_in_closure.rs" 15 4 15 6] (self : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  predicate resolve'1 (self : borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z)
    
   =
    [%#span1] self.final = self.current
  
  let rec closure0'0 (_1:borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[@expl:precondition] [%#span2] (field_0'0 _1.current).current
    = (1 : int32)}
    any [ return' (result:())-> {unnest'0 _1.current _1.final} (! return' {result}) ] 
  
  let rec mutable_capture (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s10_proof_assert_in_closure0] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &x <- _5.final ] s2)
      | s2 =  [ &_4 <- Closure'0.M_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z _5 ] s3
      | s3 = Borrow.borrow_mut <Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z> {_4}
          (fun (_ret':borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z) ->
             [ &_3 <- _ret' ] 
             [ &_4 <- _3.final ] 
            s4)
      | s4 = closure0'0 {_3} (fun (_ret':()) ->  [ &_2 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 _4}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & _2 : () = any_l ()
    | & _3 : borrowed Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z = any_l ()
    | & _4 : Closure'0.m_10_proof_assert_in_closure__mutable_capture__qy123zclosureqy35z0qy125z = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int16
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z  =
    | M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z (borrowed int32)
  
  let rec m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z (input:m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) (ret  (x:borrowed int32))= any
    [ good (x:borrowed int32)-> {M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z x = input}
      (! ret {x})
    | bad (x:borrowed int32)-> {M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z x <> input}
      {false}
      any ]
    
end
module M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z
  let%span s10_proof_assert_in_closure0 = "../10_proof_assert_in_closure.rs" 34 22 34 31
  
  let%span s10_proof_assert_in_closure1 = "../10_proof_assert_in_closure.rs" 35 12 35 13
  
  let%span s10_proof_assert_in_closure2 = "../10_proof_assert_in_closure.rs" 36 22 36 31
  
  let%span s10_proof_assert_in_closure3 = "../10_proof_assert_in_closure.rs" 31 26 31 35
  
  let%span s10_proof_assert_in_closure4 = "../10_proof_assert_in_closure.rs" 32 14 32 23
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  use M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  function field_0'0 [#"../10_proof_assert_in_closure.rs" 32 4 32 25] (self : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) : borrowed int32
    
   =
    let Closure'0.M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z a = self in a
  
  predicate unnest'0 [#"../10_proof_assert_in_closure.rs" 32 4 32 25] (self : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z)
    
   =
    [%#span5] self.final = self.current
  
  let rec m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z (_1:borrowed Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[%#s10_proof_assert_in_closure3] (field_0'0 _1.current).current
    = (1 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s10_proof_assert_in_closure0] (field_0'0 _1.current).current = (1 : int32)} s1
      | s1 = Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z {_1.current}
          (fun (l'0:borrowed int32) ->
            
            [ &_1 <- { _1 with current = Closure'0.M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z ({ l'0 with current = ([%#s10_proof_assert_in_closure1] (2 : int32)) ; }) ; } ]
            
            s2)
      | s2 = -{resolve'0 _1}- s3
      | s3 = {[@expl:assertion] [%#s10_proof_assert_in_closure2] (field_0'0 _1.current).current = (2 : int32)} s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z = _1 ]
    
    [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s10_proof_assert_in_closure4] (field_0'0 _1.final).current = (2 : int32)}
      (! return' {result}) ]
    
end
module M_10_proof_assert_in_closure__captures_and_call
  let%span s10_proof_assert_in_closure0 = "../10_proof_assert_in_closure.rs" 30 16 30 17
  
  let%span s10_proof_assert_in_closure1 = "../10_proof_assert_in_closure.rs" 39 18 39 27
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../10_proof_assert_in_closure.rs" 32 14 32 23
  
  let%span span4 = "../10_proof_assert_in_closure.rs" 31 26 31 35
  
  let%span span5 = "../10_proof_assert_in_closure.rs" 23 11 23 29
  
  let%span span6 = "../10_proof_assert_in_closure.rs" 25 36 25 37
  
  let%span span7 = "../10_proof_assert_in_closure.rs" 24 10 24 38
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int16
  
  use M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate invariant'0 (self : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) =
    [%#span2] true
  
  predicate inv'0 (_1 : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z)
  
  axiom inv'0 : forall x : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z . inv'0 x
  = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  function field_0'0 [#"../10_proof_assert_in_closure.rs" 32 4 32 25] (self : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) : borrowed int32
    
   =
    let Closure'0.M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z a = self in a
  
  predicate postcondition_once'0 [#"../10_proof_assert_in_closure.rs" 32 4 32 25] (self : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) (_ : ()) (result : ())
    
   =
    [%#span3] (field_0'0 self).final = (2 : int32)
  
  predicate precondition'0 [#"../10_proof_assert_in_closure.rs" 32 4 32 25] (self : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) (_ : ())
    
   =
    [%#span4] (field_0'0 self).current = (1 : int32)
  
  let rec calls_closure'0 (f:Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[@expl:precondition] [%#span6] inv'0 f}
    {[@expl:precondition] [%#span5] precondition'0 f ()}
    any [ return' (result:())-> {[%#span7] postcondition_once'0 f () ()} (! return' {result}) ] 
  
  let rec captures_and_call (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s10_proof_assert_in_closure0] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_3 <- _ret' ]  [ &x <- _3.final ] s2)
      | s2 =  [ &clos <- Closure'0.M_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z _3 ] s3
      | s3 = calls_closure'0 {clos} (fun (_ret':()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s10_proof_assert_in_closure1] x = (2 : int32)} s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & clos : Closure'0.m_10_proof_assert_in_closure__captures_and_call__qy123zclosureqy35z0qy125z = any_l ()
    | & _3 : borrowed int32 = any_l ()
    | & _4 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
