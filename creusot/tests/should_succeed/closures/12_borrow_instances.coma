module M_12_borrow_instances__test1 [#"12_borrow_instances.rs" 9 0 9 59]
  let%span s12_borrow_instances0 = "12_borrow_instances.rs" 6 10 6 73
  let%span s12_borrow_instances1 = "12_borrow_instances.rs" 7 10 7 112
  let%span s12_borrow_instances2 = "12_borrow_instances.rs" 8 10 8 82
  let%span s12_borrow_instances3 = "12_borrow_instances.rs" 4 0 4 8
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 139 14 139 114
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  
  use prelude.prelude.Borrow
  
  type t_F'0
  
  use prelude.prelude.UInt32
  
  predicate postcondition_once'1 (self : t_F'0) (args : uint32) (result : bool)
  
  predicate resolve'1 (_1 : t_F'0)
  
  predicate postcondition_mut'1 (self : t_F'0) (args : uint32) (result_state : t_F'0) (result : bool)
  
  function fn_mut_once'1 (self : t_F'0) (args : uint32) (res : bool) : ()
  
  axiom fn_mut_once'1_spec : forall self : t_F'0, args : uint32, res : bool . [%#sops12] postcondition_once'1 self args res
  = (exists res_state : t_F'0 . postcondition_mut'1 self args res_state res /\ resolve'1 res_state)
  
  predicate unnest'1 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'1 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'1_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops9] unnest'1 self b)
   -> ([%#sops10] unnest'1 b c)  -> ([%#sops11] unnest'1 self c)
  
  function unnest_refl'1 (self : t_F'0) : ()
  
  axiom unnest_refl'1_spec : forall self : t_F'0 . [%#sops8] unnest'1 self self
  
  function postcondition_mut_unnest'1 (self : t_F'0) (args : uint32) (res_state : t_F'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'1_spec : forall self : t_F'0, args : uint32, res_state : t_F'0, res : bool . ([%#sops6] postcondition_mut'1 self args res_state res)
   -> ([%#sops7] unnest'1 self res_state)
  
  predicate postcondition'1 (self : t_F'0) (args : uint32) (result : bool)
  
  function fn_once'1 (self : t_F'0) (args : uint32) (res : bool) : ()
  
  axiom fn_once'1_spec : forall self : t_F'0, args : uint32, res : bool . [%#sops5] postcondition_once'1 self args res
  = (resolve'1 self /\ postcondition'1 self args res)
  
  function fn_mut'1 (self : t_F'0) (args : uint32) (res_state : t_F'0) (res : bool) : ()
  
  axiom fn_mut'1_spec : forall self : t_F'0, args : uint32, res_state : t_F'0, res : bool . [%#sops4] postcondition_mut'1 self args res_state res
  = (self = res_state /\ postcondition'1 self args res)
  
  predicate postcondition_once'0 (self : t_F'0) (args : uint32) (result : bool) =
    postcondition'1 self args result
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : uint32) (result_state : t_F'0) (result : bool) =
    postcondition'1 self args result /\ self = result_state
  
  function fn_mut_once'0 (self : t_F'0) (args : uint32) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : uint32, res : bool . [%#sops12] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops9] unnest'0 self b)
   -> ([%#sops10] unnest'0 b c)  -> ([%#sops11] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : uint32) (res_state : t_F'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : uint32, res_state : t_F'0, res : bool . ([%#sops6] postcondition_mut'0 self args res_state res)
   -> ([%#sops7] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_F'0) (args : uint32) (result : bool) =
    postcondition'1 self args result
  
  function fn_once'0 (self : t_F'0) (args : uint32) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : uint32, res : bool . [%#sops5] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_F'0) (args : uint32) (res_state : t_F'0) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : t_F'0, args : uint32, res_state : t_F'0, res : bool . [%#sops4] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  constant x  : t_F'0
  
  constant n  : uint32
  
  constant r  : bool
  
  function test1'0 [#"12_borrow_instances.rs" 9 0 9 59] (x : t_F'0) (n : uint32) (r : bool) : ()
  
  goal vc_test1'0 : ([%#s12_borrow_instances0] postcondition'0 x n r = postcondition'1 x n r)
  && ([%#s12_borrow_instances1] forall xx : t_F'0 . postcondition_mut'0 x n xx r = (postcondition'1 x n r /\ x = xx))
  && ([%#s12_borrow_instances2] postcondition_once'0 x n r = postcondition'1 x n r)
end
module M_12_borrow_instances__test2 [#"12_borrow_instances.rs" 15 0 15 66]
  let%span s12_borrow_instances0 = "12_borrow_instances.rs" 13 10 13 130
  let%span s12_borrow_instances1 = "12_borrow_instances.rs" 14 10 14 93
  let%span s12_borrow_instances2 = "12_borrow_instances.rs" 11 0 11 8
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  let%span sresolve10 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  type t_F'0
  
  use prelude.prelude.UInt32
  
  predicate postcondition_once'1 (self : t_F'0) (args : uint32) (result : bool)
  
  predicate resolve'1 (_1 : t_F'0)
  
  predicate postcondition_mut'1 (self : t_F'0) (args : uint32) (result_state : t_F'0) (result : bool)
  
  function fn_mut_once'1 (self : t_F'0) (args : uint32) (res : bool) : ()
  
  axiom fn_mut_once'1_spec : forall self : t_F'0, args : uint32, res : bool . [%#sops9] postcondition_once'1 self args res
  = (exists res_state : t_F'0 . postcondition_mut'1 self args res_state res /\ resolve'1 res_state)
  
  predicate unnest'1 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'1 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'1_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops6] unnest'1 self b)
   -> ([%#sops7] unnest'1 b c)  -> ([%#sops8] unnest'1 self c)
  
  function unnest_refl'1 (self : t_F'0) : ()
  
  axiom unnest_refl'1_spec : forall self : t_F'0 . [%#sops5] unnest'1 self self
  
  function postcondition_mut_unnest'1 (self : t_F'0) (args : uint32) (res_state : t_F'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'1_spec : forall self : t_F'0, args : uint32, res_state : t_F'0, res : bool . ([%#sops3] postcondition_mut'1 self args res_state res)
   -> ([%#sops4] unnest'1 self res_state)
  
  predicate postcondition_once'0 (self : borrowed t_F'0) (args : uint32) (result : bool) =
    postcondition_mut'1 self.current args self.final result
  
  predicate resolve'2 (self : borrowed t_F'0) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_F'0) =
    resolve'2 _1
  
  predicate postcondition_mut'0 (self : borrowed t_F'0) (args : uint32) (result_state : borrowed t_F'0) (result : bool)
   =
    postcondition_mut'1 self.current args result_state.current result /\ self.final = result_state.final
  
  function fn_mut_once'0 (self : borrowed t_F'0) (args : uint32) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : borrowed t_F'0, args : uint32, res : bool . [%#sops9] postcondition_once'0 self args res
  = (exists res_state : borrowed t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : borrowed t_F'0) (_2 : borrowed t_F'0)
  
  function unnest_trans'0 (self : borrowed t_F'0) (b : borrowed t_F'0) (c : borrowed t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : borrowed t_F'0, b : borrowed t_F'0, c : borrowed t_F'0 . ([%#sops6] unnest'0 self b)
   -> ([%#sops7] unnest'0 b c)  -> ([%#sops8] unnest'0 self c)
  
  function unnest_refl'0 (self : borrowed t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : borrowed t_F'0 . [%#sops5] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed t_F'0) (args : uint32) (res_state : borrowed t_F'0) (res : bool) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_F'0, args : uint32, res_state : borrowed t_F'0, res : bool . ([%#sops3] postcondition_mut'0 self args res_state res)
   -> ([%#sops4] unnest'0 self res_state)
  
  constant x  : borrowed t_F'0
  
  constant n  : uint32
  
  constant r  : bool
  
  function test2'0 [#"12_borrow_instances.rs" 15 0 15 66] (x : borrowed t_F'0) (n : uint32) (r : bool) : ()
  
  goal vc_test2'0 : ([%#s12_borrow_instances0] forall xx : borrowed t_F'0 . postcondition_mut'0 x n xx r
  = (postcondition_mut'1 x.current n xx.current r /\ x.final = xx.final))
  && ([%#s12_borrow_instances1] postcondition_once'0 x n r = postcondition_mut'1 x.current n x.final r)
end
