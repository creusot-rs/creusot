module M_11_proof_assert_in_closure__immutable_capture [#"11_proof_assert_in_closure.rs" 4 0 4 26]
  let%span s11_proof_assert_in_closure0 = "11_proof_assert_in_closure.rs" 5 12 5 13
  let%span s11_proof_assert_in_closure1 = "11_proof_assert_in_closure.rs" 8 22 8 31
  let%span s11_proof_assert_in_closure2 = "11_proof_assert_in_closure.rs" 6 16 6 25
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type closure0'1  =
    { field_0'0: int32 }
  
  let rec closure0'0 (_1:closure0'1) (return'  (ret:()))= {[@expl:closure requires] [%#s11_proof_assert_in_closure2] _1.field_0'0
    = (1 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure1] _1.field_0'0 = (1 : int32)} s1 | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : closure0'1 = _1 ]  [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec immutable_capture'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s11_proof_assert_in_closure0] (1 : int32) ] s1
      | s1 =  [ &_4 <- { field_0'0 = x } ] s2
      | s2 = closure0'0 {_4} (fun (_ret':()) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & _2 : () = any_l ()
    | & _4 : closure0'1 = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_11_proof_assert_in_closure__mutable_capture [#"11_proof_assert_in_closure.rs" 12 0 12 24]
  let%span s11_proof_assert_in_closure0 = "11_proof_assert_in_closure.rs" 13 16 13 17
  let%span s11_proof_assert_in_closure1 = "11_proof_assert_in_closure.rs" 16 22 16 31
  let%span s11_proof_assert_in_closure2 = "11_proof_assert_in_closure.rs" 17 12 17 13
  let%span s11_proof_assert_in_closure3 = "11_proof_assert_in_closure.rs" 18 22 18 31
  let%span s11_proof_assert_in_closure4 = "11_proof_assert_in_closure.rs" 14 16 14 25
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  type closure0'1  =
    { field_0'0: borrowed int32 }
  
  predicate resolve'3 (self : borrowed closure0'1) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed closure0'1) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_once'0 (self : closure0'1) (args : ()) (result : ()) =
    let () = args in true
  
  predicate resolve'4 (self : borrowed int32) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed int32) =
    resolve'4 _1
  
  predicate resolve'0 (_1 : closure0'1) =
    resolve'2 _1.field_0'0
  
  predicate unnest'0 (self : closure0'1) (_2 : closure0'1) =
    (_2.field_0'0).final = (self.field_0'0).final
  
  predicate postcondition_mut'0 (self : closure0'1) (args : ()) (result_state : closure0'1) (result : ()) =
    (let () = args in true) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure0'1) (args : ()) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure0'1, args : (), res : () . [%#sops12] postcondition_once'0 self args res
  = (exists res_state : closure0'1 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  function unnest_trans'0 (self : closure0'1) (b : closure0'1) (c : closure0'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure0'1, b : closure0'1, c : closure0'1 . ([%#sops9] unnest'0 self b)
   -> ([%#sops10] unnest'0 b c)  -> ([%#sops11] unnest'0 self c)
  
  function unnest_refl'0 (self : closure0'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure0'1 . [%#sops8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure0'1) (args : ()) (res_state : closure0'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure0'1, args : (), res_state : closure0'1, res : () . ([%#sops6] postcondition_mut'0 self args res_state res)
   -> ([%#sops7] unnest'0 self res_state)
  
  let rec closure0'0 (_1:borrowed closure0'1) (return'  (ret:()))= {[@expl:closure requires] [%#s11_proof_assert_in_closure4] ((_1.current).field_0'0).current
    = (1 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure1] ((_1.current).field_0'0).current = (1 : int32)} s1
      | s1 = 
        [ &_1 <- { _1 with current = { field_0'0 = { (_1.current).field_0'0 with current = ([%#s11_proof_assert_in_closure2] (2 : int32)) } } } ]
        
        s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = {[@expl:assertion] [%#s11_proof_assert_in_closure3] ((_1.current).field_0'0).current = (2 : int32)} s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : borrowed closure0'1 = _1 ] 
    [ return' (result:())-> {[@expl:closure unnest] unnest'0 _1.current _1.final} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec mutable_capture'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s11_proof_assert_in_closure0] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 =  [ &_4 <- { field_0'0 = _5 } ] s3
      | s3 = Borrow.borrow_mut <closure0'1> {_4}
          (fun (_ret':borrowed closure0'1) ->  [ &_3 <- _ret' ]  [ &_4 <- _ret'.final ] s4)
      | s4 = closure0'0 {_3} (fun (_ret':()) ->  [ &_2 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 _4}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & _2 : () = any_l ()
    | & _3 : borrowed closure0'1 = any_l ()
    | & _4 : closure0'1 = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_11_proof_assert_in_closure__captures_and_call [#"11_proof_assert_in_closure.rs" 29 0 29 26]
  let%span s11_proof_assert_in_closure0 = "11_proof_assert_in_closure.rs" 30 16 30 17
  let%span s11_proof_assert_in_closure1 = "11_proof_assert_in_closure.rs" 39 18 39 27
  let%span s11_proof_assert_in_closure2 = "11_proof_assert_in_closure.rs" 34 22 34 31
  let%span s11_proof_assert_in_closure3 = "11_proof_assert_in_closure.rs" 35 12 35 13
  let%span s11_proof_assert_in_closure4 = "11_proof_assert_in_closure.rs" 36 22 36 31
  let%span s11_proof_assert_in_closure5 = "11_proof_assert_in_closure.rs" 31 26 31 35
  let%span s11_proof_assert_in_closure6 = "11_proof_assert_in_closure.rs" 32 14 32 23
  let%span s11_proof_assert_in_closure7 = "11_proof_assert_in_closure.rs" 25 36 25 37
  let%span s11_proof_assert_in_closure8 = "11_proof_assert_in_closure.rs" 23 11 23 29
  let%span s11_proof_assert_in_closure9 = "11_proof_assert_in_closure.rs" 24 10 24 38
  let%span sresolve10 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  type closure0'1  =
    { field_0'0: borrowed int32 }
  
  predicate resolve'1 (self : borrowed closure0'1) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed closure0'1) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_once'0 (self : closure0'1) (args : ()) (result : ()) =
    [%#s11_proof_assert_in_closure6] let () = args in (self.field_0'0).final = (2 : int32)
  
  predicate resolve'4 (self : borrowed int32) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed int32) =
    resolve'4 _1
  
  predicate resolve'2 (_1 : closure0'1) =
    resolve'3 _1.field_0'0
  
  predicate unnest'0 (self : closure0'1) (_2 : closure0'1) =
    (_2.field_0'0).final = (self.field_0'0).final
  
  predicate postcondition_mut'0 (self : closure0'1) (args : ()) (result_state : closure0'1) (result : ()) =
    (let () = args in (result_state.field_0'0).current = (2 : int32)) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure0'1) (args : ()) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure0'1, args : (), res : () . [%#sops17] postcondition_once'0 self args res
  = (exists res_state : closure0'1 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  function unnest_trans'0 (self : closure0'1) (b : closure0'1) (c : closure0'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure0'1, b : closure0'1, c : closure0'1 . ([%#sops14] unnest'0 self b)
   -> ([%#sops15] unnest'0 b c)  -> ([%#sops16] unnest'0 self c)
  
  function unnest_refl'0 (self : closure0'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure0'1 . [%#sops13] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure0'1) (args : ()) (res_state : closure0'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure0'1, args : (), res_state : closure0'1, res : () . ([%#sops11] postcondition_mut'0 self args res_state res)
   -> ([%#sops12] unnest'0 self res_state)
  
  let rec closure0'0 (_1:borrowed closure0'1) (return'  (ret:()))= {[@expl:closure requires] [%#s11_proof_assert_in_closure5] ((_1.current).field_0'0).current
    = (1 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure2] ((_1.current).field_0'0).current = (1 : int32)} s1
      | s1 = 
        [ &_1 <- { _1 with current = { field_0'0 = { (_1.current).field_0'0 with current = ([%#s11_proof_assert_in_closure3] (2 : int32)) } } } ]
        
        s2
      | s2 = -{resolve'0 _1}- s3
      | s3 = {[@expl:assertion] [%#s11_proof_assert_in_closure4] ((_1.current).field_0'0).current = (2 : int32)} s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : borrowed closure0'1 = _1 ] 
    [ return' (result:())-> {[@expl:closure ensures] [%#s11_proof_assert_in_closure6] ((_1.final).field_0'0).current
      = (2 : int32)}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  predicate inv'0 (_1 : closure0'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : closure0'1 [inv'0 x] . inv'0 x = true
  
  predicate precondition'0 (self : closure0'1) (args : ()) =
    [%#s11_proof_assert_in_closure5] let () = args in (self.field_0'0).current = (1 : int32)
  
  let rec calls_closure'0 (f:closure0'1) (return'  (ret:()))= {[@expl:calls_closure 'f' type invariant] [%#s11_proof_assert_in_closure7] inv'0 f}
    {[@expl:calls_closure requires] [%#s11_proof_assert_in_closure8] precondition'0 f ()}
    any [ return' (result:())-> {[%#s11_proof_assert_in_closure9] postcondition_once'0 f () ()} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec captures_and_call'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s11_proof_assert_in_closure0] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_3 <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 =  [ &clos <- { field_0'0 = _3 } ] s3
      | s3 = calls_closure'0 {clos} (fun (_ret':()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s11_proof_assert_in_closure1] x = (2 : int32)} s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & clos : closure0'1 = any_l ()
    | & _3 : borrowed int32 = any_l ()
    | & _4 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
