
module C02Nested_NestedClosure_Closure0_Closure0_Type
  use prelude.Int8
  use prelude.Borrow
  type c02nested_nestedclosure_closure0_closure0  =
    | C02nested_nestedclosure_closure0_closure0 bool
    
  let rec c02nested_nestedclosure_closure0_closure0 (input:c02nested_nestedclosure_closure0_closure0) (ret  (a:bool))= any
    [ good (a:bool)-> {C02nested_nestedclosure_closure0_closure0 a = input} (! ret {a})
    | bad (a:bool)-> {C02nested_nestedclosure_closure0_closure0 a <> input} {false} any ]
    
end
module C02Nested_NestedClosure_Closure0_Closure0
  use prelude.Int8
  use prelude.Intrinsic
  use prelude.Borrow
  use C02Nested_NestedClosure_Closure0_Closure0_Type as C02Nested_NestedClosure_Closure0_Closure0_Type
  let rec c02nested_nestedclosure_closure0_closure0 (_1:C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0 {_1}
          (fun (r'0:bool) ->  [ &_0 <- r'0 ] s1)
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l () : bool
    | & _1 : C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0 = _1 ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
module C02Nested_NestedClosure_Closure0_Type
  use prelude.Int8
  use prelude.Borrow
  type c02nested_nestedclosure_closure0  =
    | C02nested_nestedclosure_closure0 bool
    
  let rec c02nested_nestedclosure_closure0 (input:c02nested_nestedclosure_closure0) (ret  (a:bool))= any
    [ good (a:bool)-> {C02nested_nestedclosure_closure0 a = input} (! ret {a})
    | bad (a:bool)-> {C02nested_nestedclosure_closure0 a <> input} {false} any ]
    
end
module C02Nested_NestedClosure_Closure0
  use prelude.Int8
  use prelude.Intrinsic
  use C02Nested_NestedClosure_Closure0_Closure0_Type as C02Nested_NestedClosure_Closure0_Closure0_Type
  predicate resolve'0 [#"../02_nested.rs" 6 18 6 20] (_1 : C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0)
    
   =
    true
  use prelude.Borrow
  let rec closure0'0 (_1:C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  use C02Nested_NestedClosure_Closure0_Type as C02Nested_NestedClosure_Closure0_Type
  let rec c02nested_nestedclosure_closure0 (_1:C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0 {_1}
          (fun (r'0:bool) ->
            
            [ &omg <- C02Nested_NestedClosure_Closure0_Closure0_Type.C02nested_nestedclosure_closure0_closure0 r'0 : C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0 ]
            
            s1)
      | s1 =  [ &_5 <- () ] s2
      | s2 = closure0'0 {omg} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 omg}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool
    | & _1 : C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0 = _1
    | & omg : C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0 = any_l () : C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0
    | & _5 : () = any_l () : () ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
module C02Nested_NestedClosure
  use prelude.Intrinsic
  use prelude.Int8
  use C02Nested_NestedClosure_Closure0_Type as C02Nested_NestedClosure_Closure0_Type
  predicate resolve'0 [#"../02_nested.rs" 5 14 5 16] (_1 : C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0)
    
   =
    true
  use C02Nested_NestedClosure_Closure0_Closure0_Type as C02Nested_NestedClosure_Closure0_Closure0_Type
  predicate resolve'1 [#"../02_nested.rs" 6 18 6 20] (_1 : C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0)
    
   =
    true
  use prelude.Borrow
  let rec closure0'1 (_1:C02Nested_NestedClosure_Closure0_Closure0_Type.c02nested_nestedclosure_closure0_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  let rec closure0'0 (_1:C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  let rec nested_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [#"../02_nested.rs" 4 12 4 16] true ] s1
      | s1 = 
        [ &_4 <- C02Nested_NestedClosure_Closure0_Type.C02nested_nestedclosure_closure0 a : C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0 ]
        
        s2
      | s2 =  [ &_6 <- () ] s3
      | s3 = closure0'0 {_4} (fun (_ret':bool) ->  [ &_a <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _4}- s1 | s1 =  [ &_0 <- [#"../02_nested.rs" 3 24 9 1] () ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : bool = any_l () : bool
    | & _a : bool = any_l () : bool
    | & _4 : C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0 = any_l () : C02Nested_NestedClosure_Closure0_Type.c02nested_nestedclosure_closure0
    | & _6 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
