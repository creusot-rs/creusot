
module M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z  =
    | M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z (borrowed uint32)
  
  let rec m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z (input:m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) (ret  (x:borrowed uint32))= any
    [ good (x:borrowed uint32)-> {M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z x = input} (! ret {x})
    | bad (x:borrowed uint32)-> {M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z x <> input} {false} any ]
    
end
module M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z
  let%span s07_mutable_capture0 = "../07_mutable_capture.rs" 10 17 10 18
  
  let%span s07_mutable_capture1 = "../07_mutable_capture.rs" 11 12 11 13
  
  let%span s07_mutable_capture2 = "../07_mutable_capture.rs" 7 19 7 33
  
  let%span s07_mutable_capture3 = "../07_mutable_capture.rs" 8 18 8 35
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  use M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  function field_0'0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) : borrowed uint32
    
   =
    let Closure'0.M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z a = self in a
  
  predicate unnest'0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) (_2 : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) =
    [%#span4] self.final = self.current
  
  let rec m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z (_1:borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) (return'  (ret:int32))= {[%#s07_mutable_capture2] UInt32.to_int (field_0'0 _1.current).current
    < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z {_1.current}
          (fun (r'0:borrowed uint32) ->
            UInt32.add {r'0.current} {[%#s07_mutable_capture0] (1 : uint32)}
              (fun (_ret':uint32) ->
                Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z {_1.current}
                  (fun (l'0:borrowed uint32) ->
                    
                    [ &_1 <- { _1 with current = Closure'0.M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z ({ l'0 with current = _ret' ; }) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res1 <- [%#s07_mutable_capture1] (5 : int32) ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : int32 = any_l ()
    | & _1 : borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z = _1
    | & res : int32 = any_l ()
    | & res1 : int32 = any_l () ]
    
    [ return' (result:int32)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s07_mutable_capture3] UInt32.to_int (field_0'0 _1.final).current
      = UInt32.to_int (field_0'0 _1.current).current + 1}
      (! return' {result}) ]
    
end
module M_07_mutable_capture__test_fnmut
  let%span s07_mutable_capture0 = "../07_mutable_capture.rs" 17 20 17 33
  
  let%span s07_mutable_capture1 = "../07_mutable_capture.rs" 4 11 4 24
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span3 = "../07_mutable_capture.rs" 7 19 7 33
  
  let%span span4 = "../07_mutable_capture.rs" 8 18 8 35
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'2 (self : borrowed uint32) =
    [%#span2] self.final = self.current
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int16
  
  use M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  function field_0'0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) : borrowed uint32
    
   =
    let Closure'0.M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z a = self in a
  
  predicate resolve'0 [#"../07_mutable_capture.rs" 8 8 8 37] (_1 : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z)
    
   =
    resolve'2 (field_0'0 _1)
  
  predicate unnest'0 [#"../07_mutable_capture.rs" 8 8 8 37] (self : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) (_2 : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  predicate resolve'1 (self : borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) =
    [%#span2] self.final = self.current
  
  let rec closure1'0 (_1:borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) (return'  (ret:int32))= {[@expl:precondition] [%#span3] UInt32.to_int (field_0'0 _1.current).current
    < 1000000}
    any
    [ return' (result:int32)-> {unnest'0 _1.current _1.final}
      {[%#span4] UInt32.to_int (field_0'0 _1.final).current = UInt32.to_int (field_0'0 _1.current).current + 1}
      (! return' {result}) ]
    
  
  let rec test_fnmut (x:uint32) (return'  (ret:()))= {[%#s07_mutable_capture1] UInt32.to_int x = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <uint32> {x} (fun (_ret':borrowed uint32) ->  [ &_4 <- _ret' ]  [ &x <- _4.final ] s1)
      | s1 =  [ &c <- Closure'0.M_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z _4 ] s2
      | s2 = Borrow.borrow_mut <Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z> {c}
          (fun (_ret':borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) ->
             [ &_6 <- _ret' ] 
             [ &c <- _6.final ] 
            s3)
      | s3 = closure1'0 {_6} (fun (_ret':int32) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z> {c}
          (fun (_ret':borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z) ->
             [ &_9 <- _ret' ] 
             [ &c <- _9.final ] 
            s1)
      | s1 = closure1'0 {_9} (fun (_ret':int32) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 c}- s1
      | s1 = {[@expl:assertion] [%#s07_mutable_capture0] UInt32.to_int x = 100002} s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : uint32 = x
    | & c : Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z = any_l ()
    | & _4 : borrowed uint32 = any_l ()
    | & _5 : int32 = any_l ()
    | & _6 : borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z = any_l ()
    | & _7 : () = any_l ()
    | & _8 : int32 = any_l ()
    | & _9 : borrowed Closure'0.m_07_mutable_capture__test_fnmut__qy123zclosureqy35z1qy125z = any_l ()
    | & _10 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
