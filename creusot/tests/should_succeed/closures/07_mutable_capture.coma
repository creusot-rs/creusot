module M_07_mutable_capture__test_fnmut [#"07_mutable_capture.rs" 5 0 5 29]
  let%span s07_mutable_capture0 = "07_mutable_capture.rs" 17 20 17 33
  let%span s07_mutable_capture1 = "07_mutable_capture.rs" 4 11 4 24
  let%span s07_mutable_capture2 = "07_mutable_capture.rs" 10 17 10 18
  let%span s07_mutable_capture3 = "07_mutable_capture.rs" 11 12 11 13
  let%span s07_mutable_capture4 = "07_mutable_capture.rs" 7 19 7 33
  let%span s07_mutable_capture5 = "07_mutable_capture.rs" 8 18 8 35
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  type closure1'1  =
    { field_0'0: borrowed uint32 }
  
  predicate resolve'3 (self : borrowed closure1'1) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed closure1'1) =
    resolve'3 _1
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate postcondition_once'0 (self : closure1'1) (args : ()) (result : int32) =
    [%#s07_mutable_capture5] let () = args in UInt32.to_int (self.field_0'0).final
    = UInt32.to_int (self.field_0'0).current + 1
  
  predicate resolve'4 (self : borrowed uint32) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed uint32) =
    resolve'4 _1
  
  predicate resolve'0 (_1 : closure1'1) =
    resolve'2 _1.field_0'0
  
  predicate unnest'0 (self : closure1'1) (_2 : closure1'1) =
    (_2.field_0'0).final = (self.field_0'0).final
  
  predicate postcondition_mut'0 (self : closure1'1) (args : ()) (result_state : closure1'1) (result : int32) =
    (let () = args in UInt32.to_int (result_state.field_0'0).current = UInt32.to_int (self.field_0'0).current + 1)
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure1'1) (args : ()) (res : int32) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure1'1, args : (), res : int32 . [%#sops13] postcondition_once'0 self args res
  = (exists res_state : closure1'1 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  function unnest_trans'0 (self : closure1'1) (b : closure1'1) (c : closure1'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure1'1, b : closure1'1, c : closure1'1 . ([%#sops10] unnest'0 self b)
   -> ([%#sops11] unnest'0 b c)  -> ([%#sops12] unnest'0 self c)
  
  function unnest_refl'0 (self : closure1'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure1'1 . [%#sops9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : int32) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : int32 . ([%#sops7] postcondition_mut'0 self args res_state res)
   -> ([%#sops8] unnest'0 self res_state)
  
  let rec closure1'0 (_1:borrowed closure1'1) (return'  (ret:int32))= {[@expl:closure requires] [%#s07_mutable_capture4] UInt32.to_int ((_1.current).field_0'0).current
    < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {((_1.current).field_0'0).current} {[%#s07_mutable_capture2] (1 : uint32)}
          (fun (_ret':uint32) ->
             [ &_1 <- { _1 with current = { field_0'0 = { (_1.current).field_0'0 with current = _ret' } } } ] 
            s1)
      | s1 = -{resolve'1 _1}- s2
      | s2 =  [ &res1 <- [%#s07_mutable_capture3] (5 : int32) ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : int32 = any_l () | & _1 : borrowed closure1'1 = _1 | & res : int32 = any_l () | & res1 : int32 = any_l () ]
    
    [ return' (result:int32)-> {[@expl:closure ensures] [%#s07_mutable_capture5] UInt32.to_int ((_1.final).field_0'0).current
      = UInt32.to_int ((_1.current).field_0'0).current + 1}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec test_fnmut'0 (x:uint32) (return'  (ret:()))= {[@expl:test_fnmut requires] [%#s07_mutable_capture1] UInt32.to_int x
    = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <uint32> {x} (fun (_ret':borrowed uint32) ->  [ &_4 <- _ret' ]  [ &x <- _ret'.final ] s1)
      | s1 =  [ &c <- { field_0'0 = _4 } ] s2
      | s2 = Borrow.borrow_mut <closure1'1> {c}
          (fun (_ret':borrowed closure1'1) ->  [ &_6 <- _ret' ]  [ &c <- _ret'.final ] s3)
      | s3 = closure1'0 {_6} (fun (_ret':int32) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <closure1'1> {c}
          (fun (_ret':borrowed closure1'1) ->  [ &_9 <- _ret' ]  [ &c <- _ret'.final ] s1)
      | s1 = closure1'0 {_9} (fun (_ret':int32) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 c}- s1
      | s1 = {[@expl:assertion] [%#s07_mutable_capture0] UInt32.to_int x = 100002} s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : uint32 = x
    | & c : closure1'1 = any_l ()
    | & _4 : borrowed uint32 = any_l ()
    | & _5 : int32 = any_l ()
    | & _6 : borrowed closure1'1 = any_l ()
    | & _7 : () = any_l ()
    | & _8 : int32 = any_l ()
    | & _9 : borrowed closure1'1 = any_l ()
    | & _10 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
