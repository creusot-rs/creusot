
module M_01_basic__uses_closure__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int8
  
  use prelude.prelude.Borrow
  
  type m_01_basic__uses_closure__qy123zclosureqy35z0qy125z  =
    | M_01_basic__uses_closure__qy123zclosureqy35z0qy125z bool
  
  let rec m_01_basic__uses_closure__qy123zclosureqy35z0qy125z (input:m_01_basic__uses_closure__qy123zclosureqy35z0qy125z) (ret  (y:bool))= any
    [ good (y:bool)-> {M_01_basic__uses_closure__qy123zclosureqy35z0qy125z y = input} (! ret {y})
    | bad (y:bool)-> {M_01_basic__uses_closure__qy123zclosureqy35z0qy125z y <> input} {false} any ]
    
end
module M_01_basic__uses_closure__qy123zclosureqy35z0qy125z
  use prelude.prelude.Int8
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use M_01_basic__uses_closure__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  let rec m_01_basic__uses_closure__qy123zclosureqy35z0qy125z (_1:Closure'0.m_01_basic__uses_closure__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_01_basic__uses_closure__qy123zclosureqy35z0qy125z {_1} (fun (r'0:bool) ->  [ &_0 <- r'0 ] s1)
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & _1 : Closure'0.m_01_basic__uses_closure__qy123zclosureqy35z0qy125z = _1 ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
module M_01_basic__uses_closure
  let%span s01_basic0 = "../01_basic.rs" 7 12 7 16
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int8
  
  use M_01_basic__uses_closure__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_01_basic__uses_closure__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  
  let rec uses_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &y <- [%#s01_basic0] true ] s1
      | s1 =  [ &_4 <- Closure'0.M_01_basic__uses_closure__qy123zclosureqy35z0qy125z y ] s2
      | s2 = closure0'0 {_4} (fun (_ret':bool) ->  [ &_x <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & y : bool = any_l ()
    | & _x : bool = any_l ()
    | & _4 : Closure'0.m_01_basic__uses_closure__qy123zclosureqy35z0qy125z = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_01_basic__multi_arg__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int8
  
  type m_01_basic__multi_arg__qy123zclosureqy35z0qy125z  =
    | M_01_basic__multi_arg__qy123zclosureqy35z0qy125z
  
  let rec m_01_basic__multi_arg__qy123zclosureqy35z0qy125z (input:m_01_basic__multi_arg__qy123zclosureqy35z0qy125z) (ret  )= any
    [ good -> {M_01_basic__multi_arg__qy123zclosureqy35z0qy125z  = input} (! ret)
    | bad -> {M_01_basic__multi_arg__qy123zclosureqy35z0qy125z  <> input} {false} any ]
    
end
module M_01_basic__multi_arg__qy123zclosureqy35z0qy125z
  use prelude.prelude.Int8
  
  use prelude.prelude.Int32
  
  use M_01_basic__multi_arg__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  let rec m_01_basic__multi_arg__qy123zclosureqy35z0qy125z (_1:Closure'0.m_01_basic__multi_arg__qy123zclosureqy35z0qy125z) (a:int32) (b:int32) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 = Int32.add {a} {b} (fun (_ret':int32) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & a : int32 = a | & b : int32 = b ] 
    [ return' (result:int32)-> (! return' {result}) ]
    
end
module M_01_basic__multi_arg
  let%span s01_basic0 = "../01_basic.rs" 13 17 13 18
  
  let%span s01_basic1 = "../01_basic.rs" 13 20 13 21
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int8
  
  use M_01_basic__multi_arg__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  let rec closure0'0 (_1:Closure'0.m_01_basic__multi_arg__qy123zclosureqy35z0qy125z) (a:int32) (b:int32) (return'  (ret:int32))= any
    [ return' (result:int32)-> (! return' {result}) ]
    
  
  let rec multi_arg (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- Closure'0.M_01_basic__multi_arg__qy123zclosureqy35z0qy125z ] s1
      | s1 =  [ &_4 <- (([%#s01_basic0] (0 : int32)), ([%#s01_basic1] (3 : int32))) ] s2
      | s2 = closure0'0 {x} {let (r'0, _) = _4 in r'0} {let (_, r'1) = _4 in r'1}
          (fun (_ret':int32) ->  [ &_a <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : Closure'0.m_01_basic__multi_arg__qy123zclosureqy35z0qy125z = any_l ()
    | & _a : int32 = any_l ()
    | & _4 : (int32, int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_01_basic__move_closure__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int16
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_01_basic__move_closure__qy123zclosureqy35z0qy125z  =
    | M_01_basic__move_closure__qy123zclosureqy35z0qy125z (borrowed int32)
  
  let rec m_01_basic__move_closure__qy123zclosureqy35z0qy125z (input:m_01_basic__move_closure__qy123zclosureqy35z0qy125z) (ret  (a:borrowed int32))= any
    [ good (a:borrowed int32)-> {M_01_basic__move_closure__qy123zclosureqy35z0qy125z a = input} (! ret {a})
    | bad (a:borrowed int32)-> {M_01_basic__move_closure__qy123zclosureqy35z0qy125z a <> input} {false} any ]
    
end
module M_01_basic__move_closure__qy123zclosureqy35z0qy125z
  let%span s01_basic0 = "../01_basic.rs" 22 14 22 15
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  use M_01_basic__move_closure__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate unnest'0 [#"../01_basic.rs" 21 16 21 23] (self : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z)
    
   =
    true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) =
    [%#span1] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec m_01_basic__move_closure__qy123zclosureqy35z0qy125z (_1:borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z {_1.current}
          (fun (r'0:borrowed int32) ->
            Int32.add {r'0.current} {[%#s01_basic0] (1 : int32)}
              (fun (_ret':int32) ->
                Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z {_1.current}
                  (fun (l'0:borrowed int32) ->
                    
                    [ &_1 <- { _1 with current = Closure'0.M_01_basic__move_closure__qy123zclosureqy35z0qy125z ({ l'0 with current = _ret' ; }) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z = _1 ] 
    [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final} (! return' {result}) ]
    
end
module M_01_basic__move_closure
  let%span s01_basic0 = "../01_basic.rs" 19 17 19 21
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'2 (self : borrowed int32) =
    [%#span1] self.final = self.current
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int16
  
  use M_01_basic__move_closure__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  function field_0'0 [#"../01_basic.rs" 21 16 21 23] (self : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) : borrowed int32
    
   =
    let Closure'0.M_01_basic__move_closure__qy123zclosureqy35z0qy125z a = self in a
  
  predicate resolve'0 [#"../01_basic.rs" 21 16 21 23] (_1 : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z)
    
   =
    resolve'2 (field_0'0 _1)
  
  predicate unnest'0 [#"../01_basic.rs" 21 16 21 23] (self : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z)
    
   =
    true
  
  predicate resolve'1 (self : borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) =
    [%#span1] self.final = self.current
  
  let rec closure0'0 (_1:borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) (return'  (ret:()))= any
    [ return' (result:())-> {unnest'0 _1.current _1.final} (! return' {result}) ]
    
  
  let rec move_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [%#s01_basic0] (0 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {_2} (fun (_ret':borrowed int32) ->  [ &a <- _ret' ]  [ &_2 <- a.final ] s2)
      | s2 =  [ &x <- Closure'0.M_01_basic__move_closure__qy123zclosureqy35z0qy125z a ] s3
      | s3 = Borrow.borrow_mut <Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z> {x}
          (fun (_ret':borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) ->
             [ &_5 <- _ret' ] 
             [ &x <- _5.final ] 
            s4)
      | s4 = closure0'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z> {x}
          (fun (_ret':borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z) ->
             [ &_8 <- _ret' ] 
             [ &x <- _8.final ] 
            s1)
      | s1 = closure0'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'0 x}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed int32 = any_l ()
    | & _2 : int32 = any_l ()
    | & x : Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z = any_l ()
    | & _4 : () = any_l ()
    | & _5 : borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z = any_l ()
    | & _6 : () = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed Closure'0.m_01_basic__move_closure__qy123zclosureqy35z0qy125z = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_01_basic__move_mut__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_01_basic__move_mut__qy123zclosureqy35z0qy125z  =
    | M_01_basic__move_mut__qy123zclosureqy35z0qy125z (borrowed uint32)
  
  let rec m_01_basic__move_mut__qy123zclosureqy35z0qy125z (input:m_01_basic__move_mut__qy123zclosureqy35z0qy125z) (ret  (x:borrowed uint32))= any
    [ good (x:borrowed uint32)-> {M_01_basic__move_mut__qy123zclosureqy35z0qy125z x = input} (! ret {x})
    | bad (x:borrowed uint32)-> {M_01_basic__move_mut__qy123zclosureqy35z0qy125z x <> input} {false} any ]
    
end
module M_01_basic__move_mut__qy123zclosureqy35z0qy125z
  let%span s01_basic0 = "../01_basic.rs" 38 12 38 21
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span4 = "../01_basic.rs" 30 27 30 36
  
  use prelude.prelude.UInt32
  
  predicate invariant'1 (self : uint32) =
    [%#span1] true
  
  predicate inv'1 (_1 : uint32)
  
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed uint32) =
    [%#span2] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed uint32)
  
  axiom inv'0 : forall x : borrowed uint32 . inv'0 x = true
  
  use prelude.prelude.Int16
  
  use M_01_basic__move_mut__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate unnest'0 [#"../01_basic.rs" 37 16 37 23] (self : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z)
    
   =
    true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) =
    [%#span3] self.final = self.current
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec new_ref'0 (_1:()) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#span4] inv'0 result} (! return' {result}) ]
    
  
  let rec m_01_basic__move_mut__qy123zclosureqy35z0qy125z (_1:borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new_ref'0 {[%#s01_basic0] ()} (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_final <uint32> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_2 <- _ret' ]  [ &_3 <- { _3 with current = _2.final ; } ] s1)
      | s1 = Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z {_1.current}
          (fun (r'0:borrowed uint32) -> -{resolve'0 r'0}- s2)
      | s2 = Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z {_1.current}
          (fun (l'0:borrowed uint32) ->
             [ &_1 <- { _1 with current = Closure'0.M_01_basic__move_mut__qy123zclosureqy35z0qy125z _2 ; } ] 
            s3)
      | s3 = -{resolve'1 _1}- s4
      | s4 = -{resolve'0 _3}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z = _1
    | & _2 : borrowed uint32 = any_l ()
    | & _3 : borrowed uint32 = any_l () ]
     [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final} (! return' {result}) ] 
end
module M_01_basic__move_mut
  let%span s01_basic0 = "../01_basic.rs" 35 21 35 25
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span4 = "../01_basic.rs" 30 27 30 36
  
  use prelude.prelude.UInt32
  
  predicate invariant'1 (self : uint32) =
    [%#span1] true
  
  predicate inv'1 (_1 : uint32)
  
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed uint32) =
    [%#span2] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed uint32)
  
  axiom inv'0 : forall x : borrowed uint32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span3] self.final = self.current
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int16
  
  use M_01_basic__move_mut__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  function field_0'0 [#"../01_basic.rs" 37 16 37 23] (self : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) : borrowed uint32
    
   =
    let Closure'0.M_01_basic__move_mut__qy123zclosureqy35z0qy125z a = self in a
  
  predicate resolve'0 [#"../01_basic.rs" 37 16 37 23] (_1 : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) =
    resolve'1 (field_0'0 _1)
  
  predicate unnest'0 [#"../01_basic.rs" 37 16 37 23] (self : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) (_2 : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z)
    
   =
    true
  
  predicate resolve'2 (self : borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) =
    [%#span3] self.final = self.current
  
  let rec new_ref'0 (_1:()) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#span4] inv'0 result} (! return' {result}) ]
    
  
  let rec closure0'0 (_1:borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) (return'  (ret:()))= any
    [ return' (result:())-> {unnest'0 _1.current _1.final} (! return' {result}) ]
    
  
  let rec move_mut (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [%#s01_basic0] (0 : uint32) ] s1
      | s1 = Borrow.borrow_mut <uint32> {_2} (fun (_ret':borrowed uint32) ->  [ &x <- _ret' ]  [ &_2 <- x.final ] s2)
      | s2 =  [ &a <- Closure'0.M_01_basic__move_mut__qy123zclosureqy35z0qy125z x ] s3
      | s3 = Borrow.borrow_mut <Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z> {a}
          (fun (_ret':borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) ->
             [ &_5 <- _ret' ] 
             [ &a <- _5.final ] 
            s4)
      | s4 = closure0'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z> {a}
          (fun (_ret':borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z) ->
             [ &_8 <- _ret' ] 
             [ &a <- _8.final ] 
            s1)
      | s1 = closure0'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'0 a}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed uint32 = any_l ()
    | & _2 : uint32 = any_l ()
    | & a : Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z = any_l ()
    | & _4 : () = any_l ()
    | & _5 : borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z = any_l ()
    | & _6 : () = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed Closure'0.m_01_basic__move_mut__qy123zclosureqy35z0qy125z = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
