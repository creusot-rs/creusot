
module C01Basic_UsesClosure_Closure0_Type
  use prelude.Int8
  use prelude.Borrow
  type c01basic_usesclosure_closure0  =
    | C01basic_usesclosure_closure0 bool
    
  let rec c01basic_usesclosure_closure0 (input:c01basic_usesclosure_closure0) (ret  (y:bool))= any
    [ good (y:bool)-> {C01basic_usesclosure_closure0 y = input} (! ret {y})
    | bad (y:bool)-> {C01basic_usesclosure_closure0 y <> input} {false} any ]
    
end
module C01Basic_UsesClosure_Closure0
  use prelude.Int8
  use prelude.Intrinsic
  use prelude.Borrow
  use C01Basic_UsesClosure_Closure0_Type as C01Basic_UsesClosure_Closure0_Type
  let rec c01basic_usesclosure_closure0 (_1:C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0 {_1}
          (fun (r'0:bool) ->  [ &_0 <- r'0 ] s1)
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () : bool | & _1 : C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0 = _1 ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
module C01Basic_UsesClosure
  use prelude.Intrinsic
  use prelude.Int8
  use C01Basic_UsesClosure_Closure0_Type as C01Basic_UsesClosure_Closure0_Type
  predicate resolve'0 [#"../01_basic.rs" 6 14 6 16] (_1 : C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0)
    
   =
    true
  use prelude.Borrow
  let rec closure0'0 (_1:C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  let rec uses_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &y <- [#"../01_basic.rs" 5 12 5 16] true ] s1
      | s1 = 
        [ &_4 <- C01Basic_UsesClosure_Closure0_Type.C01basic_usesclosure_closure0 y : C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0 ]
        
        s2
      | s2 =  [ &_6 <- () ] s3
      | s3 = closure0'0 {_4} (fun (_ret':bool) ->  [ &_x <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 _4}- s1 | s1 =  [ &_0 <- [#"../01_basic.rs" 4 22 7 1] () ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & y : bool = any_l () : bool
    | & _x : bool = any_l () : bool
    | & _4 : C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0 = any_l () : C01Basic_UsesClosure_Closure0_Type.c01basic_usesclosure_closure0
    | & _6 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C01Basic_MultiArg_Closure0_Type
  use prelude.Int32
  use prelude.Int8
  type c01basic_multiarg_closure0  =
    | C01basic_multiarg_closure0
    
  let rec c01basic_multiarg_closure0 (input:c01basic_multiarg_closure0) (ret  )= any
    [ good -> {C01basic_multiarg_closure0  = input} (! ret)
    | bad -> {C01basic_multiarg_closure0  <> input} {false} any ]
    
end
module C01Basic_MultiArg_Closure0
  use prelude.Int8
  use prelude.Int32
  use C01Basic_MultiArg_Closure0_Type as C01Basic_MultiArg_Closure0_Type
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.Int
  let rec c01basic_multiarg_closure0 (_1:C01Basic_MultiArg_Closure0_Type.c01basic_multiarg_closure0) (a:int32) (b:int32) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 = Int32.add {a} {b} (fun (_ret':int32) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () : int32 | & a : int32 = a | & b : int32 = b ] 
    [ return' (result:int32)-> (! return' {result}) ]
    
end
module C01Basic_MultiArg
  use prelude.Intrinsic
  use prelude.Int32
  use prelude.Int8
  use C01Basic_MultiArg_Closure0_Type as C01Basic_MultiArg_Closure0_Type
  predicate resolve'0 [#"../01_basic.rs" 10 12 10 18] (_1 : C01Basic_MultiArg_Closure0_Type.c01basic_multiarg_closure0)
   =
    true
  use prelude.Borrow
  use prelude.Int
  let rec closure0'0 (_1:C01Basic_MultiArg_Closure0_Type.c01basic_multiarg_closure0) (a:int32) (b:int32) (return'  (ret:int32))= any
    [ return' (result:int32)-> (! return' {result}) ]
    
  let rec multi_arg (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &x <- C01Basic_MultiArg_Closure0_Type.C01basic_multiarg_closure0 : C01Basic_MultiArg_Closure0_Type.c01basic_multiarg_closure0 ]
        
        s1
      | s1 =  [ &_4 <- (([#"../01_basic.rs" 11 17 11 18] (0 : int32)), ([#"../01_basic.rs" 11 20 11 21] (3 : int32))) ] 
        s2
      | s2 = closure0'0 {x} {let (r'0, _) = _4 in r'0} {let (_, r'1) = _4 in r'1}
          (fun (_ret':int32) ->  [ &_a <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = -{resolve'0 x}- s1 | s1 =  [ &_0 <- [#"../01_basic.rs" 9 19 12 1] () ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & x : C01Basic_MultiArg_Closure0_Type.c01basic_multiarg_closure0 = any_l () : C01Basic_MultiArg_Closure0_Type.c01basic_multiarg_closure0
    | & _a : int32 = any_l () : int32
    | & _4 : (int32, int32) = any_l () : (int32, int32) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C01Basic_MoveClosure_Closure0_Type
  use prelude.Int16
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  type c01basic_moveclosure_closure0  =
    | C01basic_moveclosure_closure0 (borrowed int32)
    
  let rec c01basic_moveclosure_closure0 (input:c01basic_moveclosure_closure0) (ret  (a:borrowed int32))= any
    [ good (a:borrowed int32)-> {C01basic_moveclosure_closure0 a = input} (! ret {a})
    | bad (a:borrowed int32)-> {C01basic_moveclosure_closure0 a <> input} {false} any ]
    
end
module C01Basic_MoveClosure_Closure0
  use prelude.Int16
  use prelude.Int32
  use prelude.Borrow
  use C01Basic_MoveClosure_Closure0_Type as C01Basic_MoveClosure_Closure0_Type
  predicate unnest'0 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (_2 : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0)
    
   =
    true
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec c01basic_moveclosure_closure0 (_1:borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 { * _1}
          (fun (r'0:borrowed int32) ->
            Int32.add { * r'0} {[#"../01_basic.rs" 20 14 20 15] (1 : int32)}
              (fun (_ret':int32) ->
                C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 { * _1}
                  (fun (l'0:borrowed int32) ->
                    
                    [ &_1 <- { _1 with current = (C01Basic_MoveClosure_Closure0_Type.C01basic_moveclosure_closure0 ({ l'0 with current = _ret' ; }) : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &_0 <- [#"../01_basic.rs" 19 24 21 5] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 = _1 ]
     [ return' (result:())-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)} (! return' {result}) ] 
end
module C01Basic_MoveClosure
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int32
  predicate resolve'2 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Int
  use prelude.Int16
  use C01Basic_MoveClosure_Closure0_Type as C01Basic_MoveClosure_Closure0_Type
  function field_0'0 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) : borrowed int32
    
   =
    let C01Basic_MoveClosure_Closure0_Type.C01basic_moveclosure_closure0 a = self in a
  let rec field_0'0 (self:C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (return'  (ret:borrowed int32))= any
    [ return' (result:borrowed int32)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../01_basic.rs" 19 16 19 23] (_1 : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0)
    
   =
    resolve'2 (field_0'0 _1)
  predicate unnest'0 [#"../01_basic.rs" 19 16 19 23] (self : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (_2 : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0)
    
   =
    true
  predicate resolve'1 (self : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec closure0'0 (_1:borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) (return'  (ret:()))= any
    [ return' (result:())-> {unnest'0 ( * _1) ( ^ _1)} (! return' {result}) ]
    
  let rec move_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [#"../01_basic.rs" 17 17 17 21] (0 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {_2} (fun (_ret':borrowed int32) ->  [ &a <- _ret' ]  [ &_2 <-  ^ a ] s2)
      | s2 = 
        [ &x <- C01Basic_MoveClosure_Closure0_Type.C01basic_moveclosure_closure0 a : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 ]
        
        (any [ any_ (_any:borrowed int32)-> (!  [ &a <- _any ] s3) ] )
      | s3 = Borrow.borrow_mut <C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0> {x}
          (fun (_ret':borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) ->
             [ &_5 <- _ret' ] 
             [ &x <-  ^ _5 ] 
            s4)
      | s4 =  [ &_6 <- () ] s5
      | s5 = closure0'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0> {x}
          (fun (_ret':borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0) ->
             [ &_8 <- _ret' ] 
             [ &x <-  ^ _8 ] 
            s1)
      | s1 =  [ &_9 <- () ] s2
      | s2 = closure0'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 x}- s1 | s1 =  [ &_0 <- [#"../01_basic.rs" 16 22 25 1] () ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : borrowed int32 = any_l () : borrowed int32
    | & _2 : int32 = any_l () : int32
    | & x : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 = any_l () : C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0
    | & _4 : () = any_l () : ()
    | & _5 : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 = any_l () : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0
    | & _6 : () = any_l () : ()
    | & _7 : () = any_l () : ()
    | & _8 : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0 = any_l () : borrowed C01Basic_MoveClosure_Closure0_Type.c01basic_moveclosure_closure0
    | & _9 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C01Basic_MoveMut_Closure0_Type
  use prelude.Int16
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  type c01basic_movemut_closure0  =
    | C01basic_movemut_closure0 (borrowed uint32)
    
  let rec c01basic_movemut_closure0 (input:c01basic_movemut_closure0) (ret  (x:borrowed uint32))= any
    [ good (x:borrowed uint32)-> {C01basic_movemut_closure0 x = input} (! ret {x})
    | bad (x:borrowed uint32)-> {C01basic_movemut_closure0 x <> input} {false} any ]
    
end
module C01Basic_MoveMut_Closure0
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant'0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed uint32)
  let rec inv'0 (_x:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed uint32 . inv'0 x = true
  use prelude.Int16
  use C01Basic_MoveMut_Closure0_Type as C01Basic_MoveMut_Closure0_Type
  predicate unnest'0 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (_2 : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0)
    
   =
    true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec new_ref'0 (_1:()) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[#"../01_basic.rs" 28 27 28 36] inv'0 result} (! return' {result}) ]
    
  let rec c01basic_movemut_closure0 (_1:borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new_ref'0 {[#"../01_basic.rs" 36 12 36 21] ()} (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <uint32> { * _3} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_2 <- _ret' ]  [ &_3 <- { _3 with current = ( ^ _2) ; } ] s1)
      | s1 = C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 { * _1}
          (fun (l'0:borrowed uint32) ->
            
            [ &_1 <- { _1 with current = (C01Basic_MoveMut_Closure0_Type.C01basic_movemut_closure0 _2 : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) ; } ]
            
            (any [ any_ (_any:borrowed uint32)-> (!  [ &_2 <- _any ] s2) ] ))
      | s2 = C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 { * _1}
          (fun (r'0:borrowed uint32) -> -{resolve'0 r'0}- s3)
      | s3 = -{resolve'1 _1}- s4
      | s4 = -{resolve'0 _3}- s5
      | s5 =  [ &_0 <- [#"../01_basic.rs" 35 24 37 5] () ] s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 = _1
    | & _2 : borrowed uint32 = any_l () : borrowed uint32
    | & _3 : borrowed uint32 = any_l () : borrowed uint32 ]
     [ return' (result:())-> {[@expl:postcondition] unnest'0 ( * _1) ( ^ _1)} (! return' {result}) ] 
end
module C01Basic_MoveMut
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant'0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed uint32)
  let rec inv'0 (_x:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed uint32 . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  use prelude.Int16
  use C01Basic_MoveMut_Closure0_Type as C01Basic_MoveMut_Closure0_Type
  function field_0'0 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) : borrowed uint32
    
   =
    let C01Basic_MoveMut_Closure0_Type.C01basic_movemut_closure0 a = self in a
  let rec field_0'0 (self:C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {result = field_0'0 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../01_basic.rs" 35 16 35 23] (_1 : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) =
    resolve'1 (field_0'0 _1)
  predicate unnest'0 [#"../01_basic.rs" 35 16 35 23] (self : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (_2 : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0)
    
   =
    true
  predicate resolve'2 (self : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  let rec new_ref'0 (_1:()) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[#"../01_basic.rs" 28 27 28 36] inv'0 result} (! return' {result}) ]
    
  let rec closure0'0 (_1:borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) (return'  (ret:()))= any
    [ return' (result:())-> {unnest'0 ( * _1) ( ^ _1)} (! return' {result}) ]
    
  let rec move_mut (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [#"../01_basic.rs" 33 21 33 25] (0 : uint32) ] s1
      | s1 = Borrow.borrow_mut <uint32> {_2} (fun (_ret':borrowed uint32) ->  [ &x <- _ret' ]  [ &_2 <-  ^ x ] s2)
      | s2 = 
        [ &a <- C01Basic_MoveMut_Closure0_Type.C01basic_movemut_closure0 x : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 ]
        
        (any [ any_ (_any:borrowed uint32)-> (!  [ &x <- _any ] s3) ] )
      | s3 = Borrow.borrow_mut <C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0> {a}
          (fun (_ret':borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) ->
             [ &_5 <- _ret' ] 
             [ &a <-  ^ _5 ] 
            s4)
      | s4 =  [ &_6 <- () ] s5
      | s5 = closure0'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0> {a}
          (fun (_ret':borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0) ->
             [ &_8 <- _ret' ] 
             [ &a <-  ^ _8 ] 
            s1)
      | s1 =  [ &_9 <- () ] s2
      | s2 = closure0'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 a}- s1 | s1 =  [ &_0 <- [#"../01_basic.rs" 32 18 40 1] () ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : borrowed uint32 = any_l () : borrowed uint32
    | & _2 : uint32 = any_l () : uint32
    | & a : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 = any_l () : C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0
    | & _4 : () = any_l () : ()
    | & _5 : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 = any_l () : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0
    | & _6 : () = any_l () : ()
    | & _7 : () = any_l () : ()
    | & _8 : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0 = any_l () : borrowed C01Basic_MoveMut_Closure0_Type.c01basic_movemut_closure0
    | & _9 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
