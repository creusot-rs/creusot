module M_01_basic__uses_closure [#"01_basic.rs" 6 0 6 21]
  let%span s01_basic0 = "01_basic.rs" 7 12 7 16
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type closure0'1  =
    { field_0'0: bool }
  
  let rec closure0'0 (_1:closure0'1) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- _1.field_0'0 ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & _1 : closure0'1 = _1 ]  [ return' (result:bool)-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec uses_closure'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &y <- [%#s01_basic0] true ] s1
      | s1 =  [ &_4 <- { field_0'0 = y } ] s2
      | s2 = closure0'0 {_4} (fun (_ret':bool) ->  [ &_x <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & y : bool = any_l ()
    | & _x : bool = any_l ()
    | & _4 : closure0'1 = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_01_basic__multi_arg [#"01_basic.rs" 11 0 11 18]
  let%span s01_basic0 = "01_basic.rs" 13 17 13 18
  let%span s01_basic1 = "01_basic.rs" 13 20 13 21
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  let rec closure0'0 (_1:()) (a:int32) (b:int32) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 = Int32.add {a} {b} (fun (_ret':int32) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & a : int32 = a | & b : int32 = b ] 
    [ return' (result:int32)-> (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec multi_arg'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- () ] s1
      | s1 =  [ &_4 <- (([%#s01_basic0] (0 : int32)), ([%#s01_basic1] (3 : int32))) ] s2
      | s2 = closure0'0 {x} {let (r'0, _) = _4 in r'0} {let (_, r'1) = _4 in r'1}
          (fun (_ret':int32) ->  [ &_a <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : () = any_l () | & _a : int32 = any_l () | & _4 : (int32, int32) = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_01_basic__move_closure [#"01_basic.rs" 18 0 18 21]
  let%span s01_basic0 = "01_basic.rs" 19 17 19 21
  let%span s01_basic1 = "01_basic.rs" 22 14 22 15
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  type closure0'1  =
    { field_0'0: borrowed int32 }
  
  predicate resolve'3 (self : borrowed closure0'1) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed closure0'1) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_once'0 (self : closure0'1) (args : ()) (result : ()) =
    let () = args in true
  
  predicate resolve'4 (self : borrowed int32) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed int32) =
    resolve'4 _1
  
  predicate resolve'0 (_1 : closure0'1) =
    resolve'2 _1.field_0'0
  
  predicate unnest'0 (self : closure0'1) (_2 : closure0'1) =
    true
  
  predicate postcondition_mut'0 (self : closure0'1) (args : ()) (result_state : closure0'1) (result : ()) =
    (let () = args in true) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure0'1) (args : ()) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure0'1, args : (), res : () . [%#sops9] postcondition_once'0 self args res
  = (exists res_state : closure0'1 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  function unnest_trans'0 (self : closure0'1) (b : closure0'1) (c : closure0'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure0'1, b : closure0'1, c : closure0'1 . ([%#sops6] unnest'0 self b)
   -> ([%#sops7] unnest'0 b c)  -> ([%#sops8] unnest'0 self c)
  
  function unnest_refl'0 (self : closure0'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure0'1 . [%#sops5] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure0'1) (args : ()) (res_state : closure0'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure0'1, args : (), res_state : closure0'1, res : () . ([%#sops3] postcondition_mut'0 self args res_state res)
   -> ([%#sops4] unnest'0 self res_state)
  
  let rec closure0'0 (_1:borrowed closure0'1) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {((_1.current).field_0'0).current} {[%#s01_basic1] (1 : int32)}
          (fun (_ret':int32) ->
             [ &_1 <- { _1 with current = { field_0'0 = { (_1.current).field_0'0 with current = _ret' } } } ] 
            s1)
      | s1 = -{resolve'1 _1}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _1 : borrowed closure0'1 = _1 ] 
    [ return' (result:())-> {[@expl:closure unnest] unnest'0 _1.current _1.final} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec move_closure'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [%#s01_basic0] (0 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {_2} (fun (_ret':borrowed int32) ->  [ &a <- _ret' ]  [ &_2 <- _ret'.final ] s2)
      | s2 =  [ &x <- { field_0'0 = a } ] s3
      | s3 = Borrow.borrow_mut <closure0'1> {x}
          (fun (_ret':borrowed closure0'1) ->  [ &_5 <- _ret' ]  [ &x <- _ret'.final ] s4)
      | s4 = closure0'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <closure0'1> {x}
          (fun (_ret':borrowed closure0'1) ->  [ &_8 <- _ret' ]  [ &x <- _ret'.final ] s1)
      | s1 = closure0'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'0 x}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed int32 = any_l ()
    | & _2 : int32 = any_l ()
    | & x : closure0'1 = any_l ()
    | & _4 : () = any_l ()
    | & _5 : borrowed closure0'1 = any_l ()
    | & _6 : () = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed closure0'1 = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_01_basic__move_mut [#"01_basic.rs" 34 0 34 17]
  let%span s01_basic0 = "01_basic.rs" 35 21 35 25
  let%span s01_basic1 = "01_basic.rs" 38 12 38 21
  let%span s01_basic2 = "01_basic.rs" 30 27 30 36
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed uint32 [inv'0 x] . inv'0 x = true
  
  let rec new_ref'0 (_1:()) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#s01_basic2] inv'0 result} (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed uint32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed uint32) =
    resolve'3 _1
  
  type closure0'1  =
    { field_0'0: borrowed uint32 }
  
  predicate resolve'4 (self : borrowed closure0'1) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed closure0'1) =
    resolve'4 _1
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_once'0 (self : closure0'1) (args : ()) (result : ()) =
    let () = args in true
  
  predicate resolve'0 (_1 : closure0'1) =
    resolve'1 _1.field_0'0
  
  predicate unnest'0 (self : closure0'1) (_2 : closure0'1) =
    true
  
  predicate postcondition_mut'0 (self : closure0'1) (args : ()) (result_state : closure0'1) (result : ()) =
    (let () = args in true) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure0'1) (args : ()) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure0'1, args : (), res : () . [%#sops10] postcondition_once'0 self args res
  = (exists res_state : closure0'1 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  function unnest_trans'0 (self : closure0'1) (b : closure0'1) (c : closure0'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure0'1, b : closure0'1, c : closure0'1 . ([%#sops7] unnest'0 self b)
   -> ([%#sops8] unnest'0 b c)  -> ([%#sops9] unnest'0 self c)
  
  function unnest_refl'0 (self : closure0'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure0'1 . [%#sops6] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure0'1) (args : ()) (res_state : closure0'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure0'1, args : (), res_state : closure0'1, res : () . ([%#sops4] postcondition_mut'0 self args res_state res)
   -> ([%#sops5] unnest'0 self res_state)
  
  let rec closure0'0 (_1:borrowed closure0'1) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new_ref'0 {[%#s01_basic1] ()} (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Borrow.borrow_final <uint32> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_2 <- _ret' ]  [ &_3 <- { _3 with current = _ret'.final } ] s1)
      | s1 = -{match _1 with
          | {current = {field_0'0 = x'0}} -> resolve'1 x'0
          | _ -> true
          end}-
        s2
      | s2 =  [ &_1 <- { _1 with current = { field_0'0 = _2 } } ] s3
      | s3 = -{resolve'2 _1}- s4
      | s4 = -{resolve'1 _3}- s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed closure0'1 = _1
    | & _2 : borrowed uint32 = any_l ()
    | & _3 : borrowed uint32 = any_l () ]
     [ return' (result:())-> {[@expl:closure unnest] unnest'0 _1.current _1.final} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec move_mut'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- [%#s01_basic0] (0 : uint32) ] s1
      | s1 = Borrow.borrow_mut <uint32> {_2}
          (fun (_ret':borrowed uint32) ->  [ &x <- _ret' ]  [ &_2 <- _ret'.final ] s2)
      | s2 =  [ &a <- { field_0'0 = x } ] s3
      | s3 = Borrow.borrow_mut <closure0'1> {a}
          (fun (_ret':borrowed closure0'1) ->  [ &_5 <- _ret' ]  [ &a <- _ret'.final ] s4)
      | s4 = closure0'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <closure0'1> {a}
          (fun (_ret':borrowed closure0'1) ->  [ &_8 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = closure0'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = -{resolve'0 a}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed uint32 = any_l ()
    | & _2 : uint32 = any_l ()
    | & a : closure0'1 = any_l ()
    | & _4 : () = any_l ()
    | & _5 : borrowed closure0'1 = any_l ()
    | & _6 : () = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed closure0'1 = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
