module M_09_fnonce_resolve__f [#"09_fnonce_resolve.rs" 4 0 4 17]
  let%span s09_fnonce_resolve0 = "09_fnonce_resolve.rs" 5 16 5 20
  let%span s09_fnonce_resolve1 = "09_fnonce_resolve.rs" 6 16 6 20
  let%span s09_fnonce_resolve2 = "09_fnonce_resolve.rs" 27 18 27 28
  let%span s09_fnonce_resolve3 = "09_fnonce_resolve.rs" 16 21 16 22
  let%span s09_fnonce_resolve4 = "09_fnonce_resolve.rs" 22 22 22 23
  let%span s09_fnonce_resolve5 = "09_fnonce_resolve.rs" 9 23 9 52
  let%span s09_fnonce_resolve6 = "09_fnonce_resolve.rs" 10 14 10 47
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 68 8 68 23
  let%span sresolve8 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate resolve'4 (self : borrowed int32) =
    [%#sresolve8] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'4 _1
  
  predicate resolve'5 (self : borrowed int32) =
    [%#sresolve7] resolve'1 self
  
  predicate resolve'2 (_1 : borrowed int32) =
    resolve'5 _1
  
  predicate resolve'3 (self : borrowed int32) =
    [%#sresolve7] resolve'2 self
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  type closure0'1  =
    { field_0'0: bool; field_1'0: borrowed int32; field_2'0: borrowed int32 }
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec closure0'0 (_1:closure0'1) (return'  (ret:()))= {[@expl:closure requires] [%#s09_fnonce_resolve5] Int32.to_int (_1.field_1'0).current
    = 1
    /\ Int32.to_int (_1.field_2'0).current = 1}
    (! bb0
    [ bb0 = any [ br0 -> {_1.field_0'0 = false} (! bb3) | br1 -> {_1.field_0'0} (! bb1) ] 
    | bb1 = s0
      [ s0 = -{match _1 with
          | {field_2'0 = x'0} -> resolve'0 x'0
          | _ -> true
          end}-
        s1
      | s1 =  [ &bx2 <- _1.field_1'0 ] s2
      | s2 = Int32.add {bx2.current} {[%#s09_fnonce_resolve3] (1 : int32)}
          (fun (_ret':int32) ->  [ &bx2 <- { bx2 with current = _ret' } ] s3)
      | s3 = -{resolve'1 bx2}- s4
      | s4 = bb2 ]
      
    | bb2 = bb5
    | bb3 = s0
      [ s0 = -{match _1 with
          | {field_1'0 = x'0} -> resolve'2 x'0
          | _ -> true
          end}-
        s1
      | s1 =  [ &by2 <- _1.field_2'0 ] s2
      | s2 = Int32.add {by2.current} {[%#s09_fnonce_resolve4] (1 : int32)}
          (fun (_ret':int32) ->  [ &by2 <- { by2 with current = _ret' } ] s3)
      | s3 = -{resolve'1 by2}- s4
      | s4 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & _1 : closure0'1 = _1
    | & bx2 : borrowed int32 = any_l ()
    | & by2 : borrowed int32 = any_l () ]
    
    [ return' (result:())-> {[@expl:closure ensures] [%#s09_fnonce_resolve6] Int32.to_int (_1.field_1'0).final
      + Int32.to_int (_1.field_2'0).final
      = 3}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (c:bool) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s09_fnonce_resolve0] (1 : int32) ] s1
      | s1 =  [ &y <- [%#s09_fnonce_resolve1] (1 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &x <- _ret'.final ] s3)
      | s3 =  [ &bx <- _5 ] s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <int32> {y} (fun (_ret':borrowed int32) ->  [ &_8 <- _ret' ]  [ &y <- _ret'.final ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &by' <- _8 ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &f <- { field_0'0 = c; field_1'0 = bx; field_2'0 = by' } ] s1
      | s1 = closure0'0 {f} (fun (_ret':()) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 = {[@expl:assertion] [%#s09_fnonce_resolve2] Int32.to_int x + Int32.to_int y = 3} s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & c : bool = c
    | & x : int32 = any_l ()
    | & y : int32 = any_l ()
    | & bx : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & by' : borrowed int32 = any_l ()
    | & _8 : borrowed int32 = any_l ()
    | & f : closure0'1 = any_l ()
    | & _10 : () = any_l ()
    | & _12 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
