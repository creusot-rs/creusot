
module C03GenericBound_ClosureParam
  type f
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.UInt32
  predicate postcondition_mut'0 (self : borrowed f) (_2 : uint32) (_3 : ())
  let rec postcondition_mut'0 (self:borrowed f) (_2:uint32) (_3:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed f)
  let rec inv'4 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : uint32) (_3 : ())
  let rec postcondition_once'0 (self:f) (_2:uint32) (_3:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'3 (_x : ())
  let rec inv'3 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  predicate inv'2 (_x : uint32)
  let rec inv'2 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : uint32) (res : ()) : ()
  let rec fn_mut_once'0 (self:f) (args:uint32) (res:()) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'2 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'4 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : uint32) (res : ()) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:uint32) (res:()) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'2 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'4 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'4 (self : borrowed f)
  let rec invariant'4 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed f . inv'4 x = true
  predicate invariant'3 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : () . inv'3 x = true
  predicate postcondition'0 (self : f) (_2 : uint32) (_3 : ())
  let rec postcondition'0 (self:f) (_2:uint32) (_3:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2 _3} (! return' {result}) ]
    
  function fn_once'0 (self : f) (args : uint32) (res : ()) : ()
  let rec fn_once'0 (self:f) (args:uint32) (res:()) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'2 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self}
    any [ return' (result:())-> {result = fn_once'0 self args res} (! return' {result}) ] 
  axiom fn_once'0_spec : forall self : f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res))
  predicate resolve'1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function fn_mut'0 (self : borrowed f) (args : uint32) (res : ()) : ()
  let rec fn_mut'0 (self:borrowed f) (args:uint32) (res:()) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'2 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'4 self}
    any [ return' (result:())-> {result = fn_mut'0 self args res} (! return' {result}) ] 
  axiom fn_mut'0_spec : forall self : borrowed f, args : uint32, res : () . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'2 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 ( * self) args res))
  predicate invariant'2 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : uint32 . inv'2 x = true
  predicate invariant'1 (self : f)
  let rec invariant'1 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : f)
  let rec inv'1 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : f . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : f . inv'0 x = true
  use prelude.Intrinsic
  predicate precondition'0 (self : f) (_2 : uint32)
  let rec precondition'0 (self:f) (_2:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  let rec call'0 (self:f) (args:uint32) (return'  (ret:()))= {[@expl:precondition] inv'2 args}
    {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition'0 self args}
    any
    [ return' (result:())-> {inv'3 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition'0 self args result}
      (! return' {result}) ]
    
  use prelude.Int
  let rec closure_param (f:f) (return'  (ret:()))= {[#"../03_generic_bound.rs" 3 29 3 30] inv'0 f}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- (([#"../03_generic_bound.rs" 4 8 4 9] (0 : uint32))) ] s1
      | s1 = call'0 {f} {_3} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb2 ] 
    | bb2 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & f : f = f | & _3 : uint32 = any_l () : uint32 ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C03GenericBound_Caller_Closure0_Type
  use prelude.UInt32
  use prelude.Int8
  type c03genericbound_caller_closure0  =
    | C03genericbound_caller_closure0
    
  let rec c03genericbound_caller_closure0 (input:c03genericbound_caller_closure0) (ret  )= any
    [ good -> {C03genericbound_caller_closure0  = input} (! ret)
    | bad -> {C03genericbound_caller_closure0  <> input} {false} any ]
    
end
module C03GenericBound_Caller_Closure0
  use prelude.Int8
  use prelude.UInt32
  use prelude.Int
  use C03GenericBound_Caller_Closure0_Type as C03GenericBound_Caller_Closure0_Type
  use prelude.Borrow
  use prelude.Intrinsic
  let rec c03genericbound_caller_closure0 (_1:C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0) (_x:uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
module C03GenericBound_Caller
  use prelude.UInt32
  use prelude.Int8
  use C03GenericBound_Caller_Closure0_Type as C03GenericBound_Caller_Closure0_Type
  predicate invariant'0 (self : C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0)
  let rec inv'0 (_x:C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0 . inv'0 x = true
  use prelude.Intrinsic
  let rec closure_param'0 (f:C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0) (return'  (ret:()))= {[@expl:precondition] [#"../03_generic_bound.rs" 3 29 3 30] inv'0 f}
    any [ return' (result:())-> (! return' {result}) ] 
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_1 <- C03GenericBound_Caller_Closure0_Type.C03genericbound_caller_closure0 : C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0 ]
        
        s1
      | s1 = closure_param'0 {_1} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0 = any_l () : C03GenericBound_Caller_Closure0_Type.c03genericbound_caller_closure0 ]
     [ return' (result:())-> (! return' {result}) ] 
end
