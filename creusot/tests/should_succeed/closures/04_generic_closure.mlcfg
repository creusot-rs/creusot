
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
  val postcondition (self : self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = args,
    type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Ops_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res = Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
  val postcondition_once (self : f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_once self _2' _3' }
    
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = Resolve0.resolve self /\ Postcondition0.postcondition self args res
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2' : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2' : f)
  val unnest (self : f) (_2' : f) : bool
    ensures { result = unnest self _2' }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {PostconditionMut0.postcondition_mut self args res}
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . PostconditionMut0.postcondition_mut self args res -> Unnest0.unnest ( * self) ( ^ self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : ()
  axiom unnest_refl_spec : forall self : f . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_refl (self : f) : () =
    ()
  val unnest_refl (self : f) : ()
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . Unnest0.unnest self self
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  axiom unnest_trans_spec : forall self : f, b : f, c : f . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {Unnest0.unnest self b}
    requires {Unnest0.unnest b c}
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . Unnest0.unnest self b -> Unnest0.unnest b c -> Unnest0.unnest self c
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f .  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s))
end
module C04GenericClosure_GenericClosure_Interface
  type a
  type b
  type f
  val generic_closure [@cfg:stackify] [#"../04_generic_closure.rs" 3 0 3 56] (f : f) (a : a) : b
end
module C04GenericClosure_GenericClosure
  type a
  type b
  type f
  use prelude.Borrow
  clone CreusotContracts_Std1_Ops_Impl1_Unnest as Unnest0 with
    type args = a,
    type f = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce as FnMutOnce0 with
    type args = a,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve1.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans as UnnestTrans0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl as UnnestRefl0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest as PostconditionMutUnnest0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Unnest0.unnest = Unnest0.unnest,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition as Postcondition0 with
    type args = a,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl2_FnOnce as FnOnce0 with
    type args = a,
    type f = f,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl2_FnMut as FnMut0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl0_Precondition as Precondition0 with
    type args = a,
    type f = f
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = a
  let rec cfg generic_closure [@cfg:stackify] [#"../04_generic_closure.rs" 3 0 3 56] (f : f) (a : a) : b
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : b;
  var f_1 : f;
  var a_2 : a;
  var _3 : f;
  var _4 : a;
  var _5 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _3 <- f_1;
    assume { Resolve0.resolve _5 };
    _5 <- a_2;
    a_2 <- any a;
    _4 <- (_5);
    _0 <- ([#"../04_generic_closure.rs" 4 4 4 8] Call0.call _3 _4);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve f_1 };
    return _0
  }
  
end
module C04GenericClosure_Mapper_Closure0_Interface
  type a
  use prelude.Borrow
  type c04genericclosure_mapper_closure0  =
    | C04GenericClosure_Mapper_Closure0
    
  predicate precondition [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : c04genericclosure_mapper_closure0) (args : a)
    
   =
    [#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true
  predicate postcondition [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : c04genericclosure_mapper_closure0) (args : a) (result : ())
    
   =
    [#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true
  predicate unnest (self : c04genericclosure_mapper_closure0) (_2' : c04genericclosure_mapper_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : borrowed c04genericclosure_mapper_closure0) (args : a) (result : ())
    
   =
    ([#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : c04genericclosure_mapper_closure0) (args : a) (result : ())
    
   =
    [#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true
  predicate resolve (_1' : c04genericclosure_mapper_closure0) =
    true
  val c04GenericClosure_Mapper_Closure0 [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (_1' : c04genericclosure_mapper_closure0) (_a : a) : ()
    
end
module C04GenericClosure_Mapper_Closure0
  type a
  type c04genericclosure_mapper_closure0  =
    | C04GenericClosure_Mapper_Closure0
    
  use prelude.Borrow
  predicate precondition [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : c04genericclosure_mapper_closure0) (args : a)
    
   =
    [#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true
  predicate postcondition [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : c04genericclosure_mapper_closure0) (args : a) (result : ())
    
   =
    [#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true
  predicate unnest (self : c04genericclosure_mapper_closure0) (_2' : c04genericclosure_mapper_closure0) =
    true
  predicate postcondition_mut [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : borrowed c04genericclosure_mapper_closure0) (args : a) (result : ())
    
   =
    ([#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (self : c04genericclosure_mapper_closure0) (args : a) (result : ())
    
   =
    [#"../04_generic_closure.rs" 1 0 1 0] let (_a) = args in true
  predicate resolve (_1' : c04genericclosure_mapper_closure0) =
    true
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = a
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = c04genericclosure_mapper_closure0
  let rec cfg c04GenericClosure_Mapper_Closure0 [@cfg:stackify] [#"../04_generic_closure.rs" 8 28 8 32] (_1' : c04genericclosure_mapper_closure0) (_a : a) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : c04genericclosure_mapper_closure0;
  var _a_2 : a;
  {
    _1 <- _1';
    _a_2 <- _a;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve _a_2 };
    return _0
  }
  
end
module C04GenericClosure_Mapper_Interface
  type a
  val mapper [@cfg:stackify] [#"../04_generic_closure.rs" 7 0 7 22] (x : a) : ()
end
module C04GenericClosure_Mapper
  type a
  clone C04GenericClosure_Mapper_Closure0_Interface as Closure00 with
    type a = a,
    axiom .
  clone C04GenericClosure_GenericClosure_Interface as GenericClosure0 with
    type a = a,
    type b = (),
    type f = Closure00.c04genericclosure_mapper_closure0
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = a
  let rec cfg mapper [@cfg:stackify] [#"../04_generic_closure.rs" 7 0 7 22] (x : a) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : a;
  var _2 : ();
  var _3 : Closure00.c04genericclosure_mapper_closure0;
  var _4 : a;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- Closure00.C04GenericClosure_Mapper_Closure0;
    assume { Resolve0.resolve _4 };
    _4 <- x_1;
    x_1 <- any a;
    _2 <- ([#"../04_generic_closure.rs" 8 12 8 39] GenericClosure0.generic_closure _3 _4);
    goto BB1
  }
  BB1 {
    _0 <- ();
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
