
module C04GenericClosure_GenericClosure
  type a
  type b
  type f
  predicate resolve0 (self : f)
  val resolve0 (self : f) : bool
    ensures { result = resolve0 self }
    
  use prelude.Borrow
  predicate postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : b)
  val postcondition_mut0 (self : borrowed f) (_2 : a) (_3 : b) : bool
    ensures { result = postcondition_mut0 self _2 _3 }
    
  predicate inv5 (_x : borrowed f)
  val inv5 (_x : borrowed f) : bool
    ensures { result = inv5 _x }
    
  predicate postcondition_once0 (self : f) (_2 : a) (_3 : b)
  val postcondition_once0 (self : f) (_2 : a) (_3 : b) : bool
    ensures { result = postcondition_once0 self _2 _3 }
    
  predicate inv2 (_x : b)
  val inv2 (_x : b) : bool
    ensures { result = inv2 _x }
    
  predicate inv4 (_x : a)
  val inv4 (_x : a) : bool
    ensures { result = inv4 _x }
    
  predicate inv0 (_x : f)
  val inv0 (_x : f) : bool
    ensures { result = inv0 _x }
    
  function fn_mut_once0 (self : f) (args : a) (res : b) : ()
  val fn_mut_once0 (self : f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv4 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res}
    ensures { result = fn_mut_once0 self args res }
    
  axiom fn_mut_once0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv4 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once0 self args res = (exists s : borrowed f . inv5 s /\  * s = self /\ postcondition_mut0 s args res /\ resolve0 ( ^ s)))
  predicate unnest0 (self : f) (_2 : f)
  val unnest0 (self : f) (_2 : f) : bool
    ensures { result = unnest0 self _2 }
    
  function unnest_trans0 (self : f) (b : f) (c : f) : ()
  val unnest_trans0 (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c}
    ensures { result = unnest_trans0 self b c }
    
  axiom unnest_trans0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest0 self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest0 b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv0 b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv0 c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest0 self c)
  function unnest_refl0 (self : f) : ()
  val unnest_refl0 (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self}
    ensures { result = unnest_refl0 self }
    
  axiom unnest_refl0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest0 self self)
  function postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : b) : ()
  val postcondition_mut_unnest0 (self : borrowed f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv4 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res}
    ensures { result = postcondition_mut_unnest0 self args res }
    
  axiom postcondition_mut_unnest0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut0 self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv4 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest0 ( * self) ( ^ self))
  predicate invariant5 (self : borrowed f)
  val invariant5 (self : borrowed f) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : borrowed f . inv5 x = true
  predicate postcondition0 (self : f) (_2 : a) (_3 : b)
  val postcondition0 (self : f) (_2 : a) (_3 : b) : bool
    ensures { result = postcondition0 self _2 _3 }
    
  function fn_once0 (self : f) (args : a) (res : b) : ()
  val fn_once0 (self : f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv4 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv2 res}
    ensures { result = fn_once0 self args res }
    
  axiom fn_once0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv0 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv4 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once0 self args res = (resolve0 self /\ postcondition0 self args res))
  predicate resolve1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed f) : bool
    ensures { result = resolve1 self }
    
  function fn_mut0 (self : borrowed f) (args : a) (res : b) : ()
  val fn_mut0 (self : borrowed f) (args : a) (res : b) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv5 self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv4 args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv2 res}
    ensures { result = fn_mut0 self args res }
    
  axiom fn_mut0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv5 self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv4 args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv2 res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut0 self args res = (resolve1 self /\ postcondition0 ( * self) args res))
  predicate invariant4 (self : a)
  val invariant4 (self : a) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : a . inv4 x = true
  predicate invariant3 (self : f)
  val invariant3 (self : f) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : f)
  val inv3 (_x : f) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : f . inv3 x = true
  predicate invariant2 (self : b)
  val invariant2 (self : b) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : b . inv2 x = true
  predicate invariant1 (self : a)
  val invariant1 (self : a) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : a)
  val inv1 (_x : a) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : a . inv1 x = true
  predicate invariant0 (self : f)
  val invariant0 (self : f) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : f . inv0 x = true
  predicate precondition0 (self : f) (_2 : a)
  val precondition0 (self : f) (_2 : a) : bool
    ensures { result = precondition0 self _2 }
    
  val call0 (self : f) (args : a) : b
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition0 self args}
    requires {inv3 self}
    requires {inv4 args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition0 self args result }
    ensures { inv2 result }
    
  let rec cfg generic_closure [#"../04_generic_closure.rs" 3 0 3 56] [@cfg:stackify] [@cfg:subregion_analysis] (f : f) (a : a) : b
    requires {[#"../04_generic_closure.rs" 3 40 3 41] inv0 f}
    requires {[#"../04_generic_closure.rs" 3 46 3 47] inv1 a}
    ensures { [#"../04_generic_closure.rs" 3 55 3 56] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : b;
  var f : f = f;
  var a : a = a;
  {
    goto BB0
  }
  BB0 {
    [#"../04_generic_closure.rs" 4 4 4 8] _0 <- ([#"../04_generic_closure.rs" 4 4 4 8] call0 ([#"../04_generic_closure.rs" 4 4 4 5] f) ([#"../04_generic_closure.rs" 4 4 4 8] (([#"../04_generic_closure.rs" 4 6 4 7] a))));
    [#"../04_generic_closure.rs" 4 6 4 7] a <- any a;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv0 f };
    assume { resolve0 f };
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C04GenericClosure_Mapper_Closure0_Type
  use prelude.Int8
  type c04genericclosure_mapper_closure0 'a =
    | C04GenericClosure_Mapper_Closure0
    
end
module C04GenericClosure_Mapper_Closure0
  type a
  predicate invariant0 (self : a)
  val invariant0 (self : a) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : a)
  val inv0 (_x : a) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : a . inv0 x = true
  use prelude.Int8
  use C04GenericClosure_Mapper_Closure0_Type as C04GenericClosure_Mapper_Closure0
  use prelude.Borrow
  predicate resolve1 (self : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a)
  val resolve1 (self : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : a)
  val resolve0 (self : a) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c04GenericClosure_Mapper_Closure0 [#"../04_generic_closure.rs" 8 28 8 32] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a) (_a : a) : ()
    requires {[#"../04_generic_closure.rs" 8 29 8 31] inv0 _a}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a = _1;
  var _a : a = _a;
  {
    goto BB0
  }
  BB0 {
    [#"../04_generic_closure.rs" 8 33 8 35] _0 <- ([#"../04_generic_closure.rs" 8 33 8 35] ());
    assert { [@expl:type invariant] inv0 _a };
    assume { resolve0 _a };
    assume { resolve1 _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C04GenericClosure_Mapper
  type a
  predicate invariant2 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : ()) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : ())
  val inv2 (_x : ()) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : () . inv2 x = true
  use prelude.Int8
  use C04GenericClosure_Mapper_Closure0_Type as C04GenericClosure_Mapper_Closure0
  predicate invariant1 (self : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a)
  val invariant1 (self : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a)
  val inv1 (_x : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a . inv1 x = true
  predicate invariant0 (self : a)
  val invariant0 (self : a) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : a)
  val inv0 (_x : a) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : a . inv0 x = true
  val generic_closure0 [#"../04_generic_closure.rs" 3 0 3 56] (f : C04GenericClosure_Mapper_Closure0.c04genericclosure_mapper_closure0 a) (a : a) : ()
    requires {[#"../04_generic_closure.rs" 3 40 3 41] inv1 f}
    requires {[#"../04_generic_closure.rs" 3 46 3 47] inv0 a}
    ensures { [#"../04_generic_closure.rs" 3 55 3 56] inv2 result }
    
  let rec cfg mapper [#"../04_generic_closure.rs" 7 0 7 22] [@cfg:stackify] [@cfg:subregion_analysis] (x : a) : ()
    requires {[#"../04_generic_closure.rs" 7 17 7 18] inv0 x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : a = x;
  var _2 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../04_generic_closure.rs" 8 12 8 39] _2 <- ([#"../04_generic_closure.rs" 8 12 8 39] generic_closure0 ([#"../04_generic_closure.rs" 8 28 8 35] C04GenericClosure_Mapper_Closure0.C04GenericClosure_Mapper_Closure0) ([#"../04_generic_closure.rs" 8 37 8 38] x));
    [#"../04_generic_closure.rs" 8 37 8 38] x <- any a;
    goto BB1
  }
  BB1 {
    [#"../04_generic_closure.rs" 7 23 9 1] _0 <- ([#"../04_generic_closure.rs" 7 23 9 1] ());
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
