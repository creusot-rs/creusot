module M_04_generic_closure__generic_closure [#"04_generic_closure.rs" 5 0 5 56]
  type a
  
  type b
  
  type f
  
  let%span s04_generic_closure0 = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure1 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure2 = "04_generic_closure.rs" 5 55 5 56
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 169 27 169 52
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 151 0 175 1
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 141 14 141 100
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 147 14 147 101
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sresolve8 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 104 15 104 48
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 35
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 29
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 118 15 118 26
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 119 14 119 28
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 125 14 125 133
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : a) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : b . [%#sops15] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#sops12] unnest'0 self b)
   -> ([%#sops13] unnest'0 b c)  -> ([%#sops14] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#sops11] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : b . ([%#sops9] postcondition_mut'0 self args res)
   -> ([%#sops10] unnest'0 self.current self.final)
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : b)
  
  function fn_once'0 (self : f) (args : a) (res : b) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : b . [%#sops6] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate resolve'1 (self : borrowed f) =
    [%#sresolve8] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : b) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : b . [%#sops5] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 self.current args res)
  
  predicate inv'1 (_1 : a)
  
  predicate inv'4 (_1 : a)
  
  axiom inv_axiom'1 [@rewrite] : forall x : a [inv'4 x] . inv'4 x = (let (a) = x in inv'1 a)
  
  predicate inv'0 (_1 : f)
  
  predicate invariant'0 (self : f) =
    [%#sinvariant7] inv'0 self
  
  predicate inv'3 (_1 : f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : f [inv'3 x] . inv'3 x = invariant'0 x
  
  predicate inv'2 (_1 : b)
  
  use prelude.prelude.Intrinsic
  
  predicate precondition'0 (self : f) (_2 : a)
  
  let rec call'0 (self:f) (args:a) (return'  (ret:b))= {[@expl:precondition] inv'4 args}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [%#sops3] precondition'0 self args}
    any [ return' (result:b)-> {inv'2 result} {[%#sops4] postcondition'0 self args result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec generic_closure (f:f) (a:a) (return'  (ret:b))= {[%#s04_generic_closure1] inv'1 a}
    {[%#s04_generic_closure0] inv'0 f}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_4 <- (a) ] s1 | s1 = call'0 {f} {_4} (fun (_ret':b) ->  [ &_0 <- _ret' ] s2) | s2 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb2 ] 
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : b = any_l () | & f : f = f | & a : a = a | & _4 : a = any_l () ] 
    [ return' (result:b)-> {[@expl:postcondition] [%#s04_generic_closure2] inv'2 result} (! return' {result}) ]
    
end
module T_04_generic_closure__mapper__qyClosure0 [#"04_generic_closure.rs" 10 28 10 32]
  type m_04_generic_closure__mapper__qyClosure0 'a =
    | M_04_generic_closure__mapper__qyClosure0
  
  let rec m_04_generic_closure__mapper__qyClosure0 < 'a > (input:m_04_generic_closure__mapper__qyClosure0 'a) (ret  )= any
    [ good -> {M_04_generic_closure__mapper__qyClosure0  = input} (! ret) ]
    
end
module M_04_generic_closure__mapper__qyClosure0 [#"04_generic_closure.rs" 10 28 10 32]
  type a
  
  let%span s04_generic_closure0 = "04_generic_closure.rs" 10 29 10 31
  
  use T_04_generic_closure__mapper__qyClosure0 as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (_1 : a)
  
  predicate inv'0 (_1 : a)
  
  meta "compute_max_steps" 1000000
  
  let rec m_04_generic_closure__mapper__qyClosure0 (_1:Closure'0.m_04_generic_closure__mapper__qyClosure0 a) (_a:a) (return'  (ret:()))= {[%#s04_generic_closure0] inv'0 _a}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _a} s1 | s1 = -{resolve'0 _a}- s2 | s2 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _a : a = _a ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_04_generic_closure__mapper [#"04_generic_closure.rs" 9 0 9 22]
  type a
  
  let%span s04_generic_closure0 = "04_generic_closure.rs" 9 17 9 18
  let%span s04_generic_closure1 = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure2 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure3 = "04_generic_closure.rs" 5 55 5 56
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  use T_04_generic_closure__mapper__qyClosure0 as Closure'0
  
  predicate inv'1 (_1 : Closure'0.m_04_generic_closure__mapper__qyClosure0 a)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Closure'0.m_04_generic_closure__mapper__qyClosure0 a [inv'1 x] . inv'1 x
  = true
  
  predicate inv'0 (_1 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec generic_closure'0 (f:Closure'0.m_04_generic_closure__mapper__qyClosure0 a) (a:a) (return'  (ret:()))= {[@expl:precondition] [%#s04_generic_closure2] inv'0 a}
    {[@expl:precondition] [%#s04_generic_closure1] inv'1 f}
    any [ return' (result:())-> {[%#s04_generic_closure3] inv'2 result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec mapper (x:a) (return'  (ret:()))= {[%#s04_generic_closure0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- Closure'0.M_04_generic_closure__mapper__qyClosure0 ] s1
      | s1 = generic_closure'0 {_3} {x} (fun (_ret':()) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : a = x
    | & _2 : () = any_l ()
    | & _3 : Closure'0.m_04_generic_closure__mapper__qyClosure0 a = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
