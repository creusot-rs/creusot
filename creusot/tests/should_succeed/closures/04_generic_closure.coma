
module C04GenericClosure_GenericClosure
  type a
  type b
  type f
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : b)
  let rec postcondition_mut'0 (self:borrowed f) (_2:a) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'5 (_x : borrowed f)
  let rec inv'5 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : b)
  let rec postcondition_once'0 (self:f) (_2:a) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'2 (_x : b)
  let rec inv'2 (_x:b) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  predicate inv'4 (_x : a)
  let rec inv'4 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : a) (res : b) : ()
  let rec fn_mut_once'0 (self:f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'4 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'4 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'5 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : b) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'4 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'5 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'4 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'5 (self : borrowed f)
  let rec invariant'5 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  predicate postcondition'0 (self : f) (_2 : a) (_3 : b)
  let rec postcondition'0 (self:f) (_2:a) (_3:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2 _3} (! return' {result}) ]
    
  function fn_once'0 (self : f) (args : a) (res : b) : ()
  let rec fn_once'0 (self:f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'4 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self}
    any [ return' (result:())-> {result = fn_once'0 self args res} (! return' {result}) ] 
  axiom fn_once'0_spec : forall self : f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'4 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res))
  predicate resolve'1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function fn_mut'0 (self : borrowed f) (args : a) (res : b) : ()
  let rec fn_mut'0 (self:borrowed f) (args:a) (res:b) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'4 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'5 self}
    any [ return' (result:())-> {result = fn_mut'0 self args res} (! return' {result}) ] 
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : b . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'5 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'4 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 ( * self) args res))
  predicate invariant'4 (self : a)
  let rec invariant'4 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  axiom inv'4 : forall x : a . inv'4 x = true
  predicate invariant'3 (self : f)
  let rec invariant'3 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : f)
  let rec inv'3 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : f . inv'3 x = true
  predicate invariant'2 (self : b)
  let rec invariant'2 (self:b) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : b . inv'2 x = true
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : f . inv'0 x = true
  use prelude.Intrinsic
  predicate precondition'0 (self : f) (_2 : a)
  let rec precondition'0 (self:f) (_2:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  let rec call'0 (self:f) (args:a) (return'  (ret:b))= {[@expl:precondition] inv'4 args}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] precondition'0 self args}
    any
    [ return' (result:b)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition'0 self args result}
      (! return' {result}) ]
    
  let rec generic_closure (f:f) (a:a) (return'  (ret:b))= {[#"../04_generic_closure.rs" 3 46 3 47] inv'1 a}
    {[#"../04_generic_closure.rs" 3 40 3 41] inv'0 f}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (a) ] (any [ any_ (_any:a)-> (!  [ &a <- _any ] s1) ] )
      | s1 = call'0 {f} {_4} (fun (_ret':b) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : b = any_l () : b | & f : f = f | & a : a = a | & _4 : a = any_l () : a ] 
    [ return' (result:b)-> {[@expl:postcondition] [#"../04_generic_closure.rs" 3 55 3 56] inv'2 result}
      (! return' {result}) ]
    
end
module C04GenericClosure_Mapper_Closure0_Type
  use prelude.Int8
  type c04genericclosure_mapper_closure0 'a =
    | C04genericclosure_mapper_closure0
    
  let rec c04genericclosure_mapper_closure0 < 'a > (input:c04genericclosure_mapper_closure0 'a) (ret  )= any
    [ good -> {C04genericclosure_mapper_closure0  = input} (! ret)
    | bad -> {C04genericclosure_mapper_closure0  <> input} {false} any ]
    
end
module C04GenericClosure_Mapper_Closure0
  type a
  predicate invariant'0 (self : a)
  let rec invariant'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : a)
  let rec inv'0 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : a . inv'0 x = true
  use prelude.Int8
  use C04GenericClosure_Mapper_Closure0_Type as C04GenericClosure_Mapper_Closure0_Type
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a)
  let rec resolve'1 (self:C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : a)
  let rec resolve'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec c04genericclosure_mapper_closure0 (_1:C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a) (_a:a) (return'  (ret:()))= {[#"../04_generic_closure.rs" 8 29 8 31] inv'0 _a}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- () ] s1
      | s1 = {[@expl:type invariant] inv'0 _a} s2
      | s2 = -{resolve'0 _a}- s3
      | s3 = -{resolve'1 _1}- s4
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a = _1
    | & _a : a = _a ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C04GenericClosure_Mapper
  type a
  predicate invariant'2 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : ())
  let rec inv'2 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : () . inv'2 x = true
  use prelude.Int8
  use C04GenericClosure_Mapper_Closure0_Type as C04GenericClosure_Mapper_Closure0_Type
  predicate invariant'1 (self : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a)
  let rec invariant'1 (self:C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a)
  let rec inv'1 (_x:C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a . inv'1 x = true
  predicate invariant'0 (self : a)
  let rec invariant'0 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : a)
  let rec inv'0 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : a . inv'0 x = true
  use prelude.Intrinsic
  let rec generic_closure'0 (f:C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a) (a:a) (return'  (ret:()))= {[@expl:precondition] [#"../04_generic_closure.rs" 3 46 3 47] inv'0 a}
    {[@expl:precondition] [#"../04_generic_closure.rs" 3 40 3 41] inv'1 f}
    any [ return' (result:())-> {[#"../04_generic_closure.rs" 3 55 3 56] inv'2 result} (! return' {result}) ] 
  let rec mapper (x:a) (return'  (ret:()))= {[#"../04_generic_closure.rs" 7 17 7 18] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_3 <- C04GenericClosure_Mapper_Closure0_Type.C04genericclosure_mapper_closure0 : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a ]
        
        s1
      | s1 = generic_closure'0 {_3} {x} (fun (_ret':()) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [#"../04_generic_closure.rs" 7 23 9 1] () ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & x : a = x
    | & _2 : () = any_l () : ()
    | & _3 : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a = any_l () : C04GenericClosure_Mapper_Closure0_Type.c04genericclosure_mapper_closure0 a ]
     [ return' (result:())-> (! return' {result}) ] 
end
