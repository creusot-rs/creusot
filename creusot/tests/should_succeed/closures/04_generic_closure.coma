module M_04_generic_closure__generic_closure [#"04_generic_closure.rs" 5 0 5 56]
  let%span s04_generic_closure0 = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure1 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure2 = "04_generic_closure.rs" 5 55 5 56
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 164 27 164 52
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 165 26 165 60
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 139 14 139 114
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 105 15 105 59
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 106 14 106 36
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 111 14 111 31
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 116 15 116 29
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 117 15 117 26
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 118 14 118 28
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 123 14 124 105
  
  use prelude.prelude.Borrow
  
  type t_F'0
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate invariant'0 (self : t_F'0) =
    [%#sinvariant7] inv'0 self
  
  predicate inv'3 (_1 : t_F'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_F'0 [inv'3 x] . inv'3 x = invariant'0 x
  
  type t_A'0
  
  predicate inv'1 (_1 : t_A'0)
  
  predicate inv'4 (_1 : t_A'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_A'0 [inv'4 x] . inv'4 x = (let (x0) = x in inv'1 x0)
  
  predicate precondition'0 (self : t_F'0) (args : t_A'0)
  
  type t_B'0
  
  predicate inv'2 (_1 : t_B'0)
  
  predicate postcondition_once'0 (self : t_F'0) (args : t_A'0) (result : t_B'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : t_A'0) (result_state : t_F'0) (result : t_B'0)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_B'0 . [%#sops14] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops11] unnest'0 self b)
   -> ([%#sops12] unnest'0 b c)  -> ([%#sops13] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops10] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : t_A'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : t_A'0, res_state : t_F'0, res : t_B'0 . ([%#sops8] postcondition_mut'0 self args res_state res)
   -> ([%#sops9] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_F'0) (args : t_A'0) (result : t_B'0)
  
  function fn_once'0 (self : t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_B'0 . [%#sops6] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_F'0) (args : t_A'0) (res_state : t_F'0) (res : t_B'0) : ()
  
  axiom fn_mut'0_spec : forall self : t_F'0, args : t_A'0, res_state : t_F'0, res : t_B'0 . [%#sops5] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec call'0 (self:t_F'0) (args:t_A'0) (return'  (ret:t_B'0))= {[@expl:call 'self' type invariant] inv'3 self}
    {[@expl:call 'args' type invariant] inv'4 args}
    {[@expl:call requires] [%#sops3] precondition'0 self args}
    any [ return' (result:t_B'0)-> {inv'2 result} {[%#sops4] postcondition'0 self args result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec generic_closure'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_B'0))= {[@expl:generic_closure 'f' type invariant] [%#s04_generic_closure0] inv'0 f}
    {[@expl:generic_closure 'a' type invariant] [%#s04_generic_closure1] inv'1 a}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (a) ] s1 | s1 = call'0 {f} {_4} (fun (_ret':t_B'0) ->  [ &_0 <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb2 ] 
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : t_B'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a | & _4 : t_A'0 = any_l () ] 
    [ return' (result:t_B'0)-> {[@expl:generic_closure result type invariant] [%#s04_generic_closure2] inv'2 result}
      (! return' {result}) ]
    
end
module M_04_generic_closure__mapper [#"04_generic_closure.rs" 9 0 9 22]
  let%span s04_generic_closure0 = "04_generic_closure.rs" 9 17 9 18
  let%span s04_generic_closure1 = "04_generic_closure.rs" 10 29 10 31
  let%span s04_generic_closure2 = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure3 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure4 = "04_generic_closure.rs" 5 55 5 56
  
  type t_A'0
  
  predicate inv'0 (_1 : t_A'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_A'0)
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (_a:t_A'0) (return'  (ret:()))= {[@expl:closure '_a' type invariant] [%#s04_generic_closure1] inv'0 _a}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _a} s1 | s1 = -{resolve'0 _a}- s2 | s2 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _a : t_A'0 = _a ]  [ return' (result:())-> (! return' {result}) ] 
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  let rec generic_closure'0 (f:()) (a:t_A'0) (return'  (ret:()))= {[@expl:generic_closure 'f' type invariant] [%#s04_generic_closure2] inv'1 f}
    {[@expl:generic_closure 'a' type invariant] [%#s04_generic_closure3] inv'0 a}
    any [ return' (result:())-> {[%#s04_generic_closure4] inv'2 result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec mapper'0 (x:t_A'0) (return'  (ret:()))= {[@expl:mapper 'x' type invariant] [%#s04_generic_closure0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- () ] s1 | s1 = generic_closure'0 {_3} {x} (fun (_ret':()) ->  [ &_2 <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : t_A'0 = x | & _2 : () = any_l () | & _3 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
