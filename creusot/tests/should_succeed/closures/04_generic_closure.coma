
module C04GenericClosure_GenericClosure
  type a
  
  type b
  
  type f
  
  let%span s04_generic_closure0 = "../04_generic_closure.rs" 3 40 3 41
  
  let%span s04_generic_closure1 = "../04_generic_closure.rs" 3 46 3 47
  
  let%span s04_generic_closure2 = "../04_generic_closure.rs" 3 55 3 56
  
  let%span span3 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span4 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  
  let%span span24 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  
  let%span span29 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "" 0 0 0 0
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span34 = "" 0 0 0 0
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : b)
  
  predicate inv'5 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : b)
  
  predicate inv'2 (_x : b)
  
  predicate inv'4 (_x : a)
  
  predicate inv'0 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : a) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : b . ([%#span3] inv'0 self)
   -> ([%#span4] inv'4 args)
   -> ([%#span5] inv'2 res)
   -> ([%#span6] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'5 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span7] unnest'0 self b)
   -> ([%#span8] unnest'0 b c)
   -> ([%#span9] inv'0 self)  -> ([%#span10] inv'0 b)  -> ([%#span11] inv'0 c)  -> ([%#span12] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span13] inv'0 self)  -> ([%#span14] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : b . ([%#span15] postcondition_mut'0 self args res)
   -> ([%#span16] inv'5 self)
   -> ([%#span17] inv'4 args)  -> ([%#span18] inv'2 res)  -> ([%#span19] unnest'0 ( * self) ( ^ self))
  
  predicate invariant'5 (self : borrowed f)
  
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : b)
  
  function fn_once'0 (self : f) (args : a) (res : b) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : b . ([%#span20] inv'0 self)
   -> ([%#span21] inv'4 args)
   -> ([%#span22] inv'2 res)
   -> ([%#span23] postcondition_once'0 self args res = (resolve'0 self /\ postcondition'0 self args res))
  
  predicate resolve'1 (self : borrowed f) =
    [%#span24]  ^ self =  * self
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : b) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : b . ([%#span25] inv'5 self)
   -> ([%#span26] inv'4 args)
   -> ([%#span27] inv'2 res)
   -> ([%#span28] postcondition_mut'0 self args res = (resolve'1 self /\ postcondition'0 ( * self) args res))
  
  predicate invariant'4 (self : a) =
    [%#span29] true
  
  axiom inv'4 : forall x : a . inv'4 x = true
  
  predicate invariant'3 (self : f)
  
  predicate inv'3 (_x : f)
  
  axiom inv'3 : forall x : f . inv'3 x = true
  
  predicate invariant'2 (self : b)
  
  axiom inv'2 : forall x : b . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_x : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate precondition'0 (self : f) (_2 : a)
  
  let rec call'0 (self:f) (args:a) (return'  (ret:b))= {[@expl:precondition] [%#span32] inv'4 args}
    {[@expl:precondition] [%#span31] inv'3 self}
    {[@expl:precondition] [%#span30] precondition'0 self args}
    any
    [ return' (result:b)-> {[%#span34] inv'2 result}
      {[%#span33] postcondition'0 self args result}
      (! return' {result}) ]
    
  
  let rec generic_closure (f:f) (a:a) (return'  (ret:b))= {[%#s04_generic_closure1] inv'1 a}
    {[%#s04_generic_closure0] inv'0 f}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (a) ] (any [ any_ (_any:a)-> (!  [ &a <- _any ] s1) ] )
      | s1 = call'0 {f} {_4} (fun (_ret':b) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : b = any_l () | & f : f = f | & a : a = a | & _4 : a = any_l () ] 
    [ return' (result:b)-> {[@expl:postcondition] [%#s04_generic_closure2] inv'2 result} (! return' {result}) ]
    
end
module C04GenericClosure_Mapper_Closure0_Type
  use prelude.prelude.Int8
  
  type c04genericclosure_mapper_closure0 'a =
    | C04genericclosure_mapper_closure0
  
  let rec c04genericclosure_mapper_closure0 < 'a > (input:c04genericclosure_mapper_closure0 'a) (ret  )= any
    [ good -> {C04genericclosure_mapper_closure0  = input} (! ret)
    | bad -> {C04genericclosure_mapper_closure0  <> input} {false} any ]
    
end
module C04GenericClosure_Mapper_Closure0
  type a
  
  let%span s04_generic_closure0 = "../04_generic_closure.rs" 8 29 8 31
  
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  predicate invariant'0 (self : a)
  
  predicate inv'0 (_x : a)
  
  axiom inv'0 : forall x : a . inv'0 x = true
  
  use prelude.prelude.Int8
  
  use C04GenericClosure_Mapper_Closure0_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : Closure'0.c04genericclosure_mapper_closure0 a) =
    [%#span1] true
  
  predicate resolve'0 (self : a)
  
  let rec c04genericclosure_mapper_closure0 (_1:Closure'0.c04genericclosure_mapper_closure0 a) (_a:a) (return'  (ret:()))= {[%#s04_generic_closure0] inv'0 _a}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 _a} s1 | s1 = -{resolve'0 _a}- s2 | s2 = -{resolve'1 _1}- s3 | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : Closure'0.c04genericclosure_mapper_closure0 a = _1 | & _a : a = _a ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C04GenericClosure_Mapper
  type a
  
  let%span s04_generic_closure0 = "../04_generic_closure.rs" 7 17 7 18
  
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "../04_generic_closure.rs" 3 40 3 41
  
  let%span span3 = "../04_generic_closure.rs" 3 46 3 47
  
  let%span span4 = "../04_generic_closure.rs" 3 55 3 56
  
  predicate invariant'2 (self : ()) =
    [%#span1] true
  
  predicate inv'2 (_x : ())
  
  axiom inv'2 : forall x : () . inv'2 x = true
  
  use prelude.prelude.Int8
  
  use C04GenericClosure_Mapper_Closure0_Type as Closure'0
  
  predicate invariant'1 (self : Closure'0.c04genericclosure_mapper_closure0 a) =
    [%#span1] true
  
  predicate inv'1 (_x : Closure'0.c04genericclosure_mapper_closure0 a)
  
  axiom inv'1 : forall x : Closure'0.c04genericclosure_mapper_closure0 a . inv'1 x = true
  
  predicate invariant'0 (self : a)
  
  predicate inv'0 (_x : a)
  
  axiom inv'0 : forall x : a . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec generic_closure'0 (f:Closure'0.c04genericclosure_mapper_closure0 a) (a:a) (return'  (ret:()))= {[@expl:precondition] [%#span3] inv'0 a}
    {[@expl:precondition] [%#span2] inv'1 f}
    any [ return' (result:())-> {[%#span4] inv'2 result} (! return' {result}) ] 
  
  let rec mapper (x:a) (return'  (ret:()))= {[%#s04_generic_closure0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- Closure'0.C04genericclosure_mapper_closure0 ] s1
      | s1 = generic_closure'0 {_3} {x} (fun (_ret':()) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : a = x
    | & _2 : () = any_l ()
    | & _3 : Closure'0.c04genericclosure_mapper_closure0 a = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
