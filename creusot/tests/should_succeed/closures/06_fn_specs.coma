
module M_06_fn_specs__weaken_3
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 30 11 30 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 32 49 32 50
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 32 55 32 56
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 31 10 31 41
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 32 64 32 73
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "" 0 0 0 0
  
  type t_Output'0
  
  predicate invariant'2 (self : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  axiom inv'2 : forall x : t_Output'0 . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate postcondition_once'0 (self : f) (a : a) (res : t_Output'0)
  
  predicate precondition'0 (self : f) (a : a)
  
  use prelude.prelude.Intrinsic
  
  let rec call_once'0 (self:f) (args:a) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#span7] inv'1 args}
    {[@expl:precondition] [%#span6] inv'0 self}
    {[@expl:precondition] [%#span5] precondition'0 self args}
    any
    [ return' (result:t_Output'0)-> {[%#span8] inv'2 result}
      {[%#span5] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  let rec weaken_3 (f:f) (a:a) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_2
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 18 11 18 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 20 38 20 39
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 20 44 20 45
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 19 0 19 93
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 20 53 20 62
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35
  
  let%span span12 = "../06_fn_specs.rs" 30 11 30 28
  
  let%span span13 = "../06_fn_specs.rs" 32 49 32 50
  
  let%span span14 = "../06_fn_specs.rs" 32 55 32 56
  
  let%span span15 = "../06_fn_specs.rs" 31 10 31 41
  
  let%span span16 = "../06_fn_specs.rs" 32 64 32 73
  
  type t_Output'0
  
  predicate invariant'2 (self : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  axiom inv'2 : forall x : t_Output'0 . inv'2 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : t_Output'0)
  
  predicate postcondition_once'0 (self : f) (a : a) (res : t_Output'0)
  
  function fn_mut_once'0 (self : f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : t_Output'0 . [%#span5] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span6] unnest'0 self b)
   -> ([%#span7] unnest'0 b c)  -> ([%#span8] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : t_Output'0 . ([%#span10] postcondition_mut'0 self args res)
   -> ([%#span11] unnest'0 self.current self.final)
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (a : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_3'0 (f:f) (a:a) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#span14] inv'1 a}
    {[@expl:precondition] [%#span13] inv'0 f}
    {[@expl:precondition] [%#span12] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#span16] inv'2 result}
      {[%#span15] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  
  let rec weaken_2 (f:f) (a:a) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_3'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] exists f2 : borrowed f . f2.current = f
      /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 6 11 6 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 8 47 8 48
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 8 53 8 54
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 7 10 7 36
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 8 62 8 71
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101
  
  let%span span13 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100
  
  let%span span15 = "../06_fn_specs.rs" 18 11 18 28
  
  let%span span16 = "../06_fn_specs.rs" 20 38 20 39
  
  let%span span17 = "../06_fn_specs.rs" 20 44 20 45
  
  let%span span18 = "../06_fn_specs.rs" 19 0 19 93
  
  let%span span19 = "../06_fn_specs.rs" 20 53 20 62
  
  type t_Output'0
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : t_Output'0)
  
  predicate postcondition_once'0 (self : f) (a : a) (res : t_Output'0)
  
  function fn_mut_once'0 (self : f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : t_Output'0 . [%#span5] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span6] unnest'0 self b)
   -> ([%#span7] unnest'0 b c)  -> ([%#span8] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : t_Output'0 . ([%#span10] postcondition_mut'0 self args res)
   -> ([%#span11] unnest'0 self.current self.final)
  
  predicate invariant'2 (self : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  axiom inv'2 : forall x : t_Output'0 . inv'2 x = true
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : t_Output'0)
  
  function fn_once'0 (self : f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : t_Output'0 . [%#span12] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate resolve'1 (self : borrowed f) =
    [%#span13] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : t_Output'0 . [%#span14] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 self.current args res)
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (a : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_2'0 (f:f) (a:a) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#span17] inv'1 a}
    {[@expl:precondition] [%#span16] inv'0 f}
    {[@expl:precondition] [%#span15] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#span19] inv'2 result}
      {[%#span18] exists f2 : borrowed f . f2.current = f /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
  
  let rec weaken (f:f) (a:a) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_2'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_3_std
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 36 11 36 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 38 40 38 41
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 38 46 38 47
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 37 10 37 41
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 38 55 38 64
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "" 0 0 0 0
  
  type t_Output'0
  
  predicate invariant'2 (self : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  axiom inv'2 : forall x : t_Output'0 . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : t_Output'0)
  
  predicate precondition'0 (self : f) (_2 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec call_once'0 (self:f) (args:a) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#span7] inv'1 args}
    {[@expl:precondition] [%#span6] inv'0 self}
    {[@expl:precondition] [%#span5] precondition'0 self args}
    any
    [ return' (result:t_Output'0)-> {[%#span8] inv'2 result}
      {[%#span5] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  let rec weaken_3_std (f:f) (a:a) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_2_std
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 24 11 24 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 26 49 26 50
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 26 55 26 56
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 25 0 25 93
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 26 64 26 73
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span12 = "../06_fn_specs.rs" 36 11 36 28
  
  let%span span13 = "../06_fn_specs.rs" 38 40 38 41
  
  let%span span14 = "../06_fn_specs.rs" 38 46 38 47
  
  let%span span15 = "../06_fn_specs.rs" 37 10 37 41
  
  let%span span16 = "../06_fn_specs.rs" 38 55 38 64
  
  type t_Output'0
  
  predicate invariant'2 (self : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  axiom inv'2 : forall x : t_Output'0 . inv'2 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : t_Output'0)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : t_Output'0)
  
  function fn_mut_once'0 (self : f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : t_Output'0 . [%#span5] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span6] unnest'0 self b)
   -> ([%#span7] unnest'0 b c)  -> ([%#span8] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : t_Output'0 . ([%#span10] postcondition_mut'0 self args res)
   -> ([%#span11] unnest'0 self.current self.final)
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_3_std'0 (f:f) (a:a) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#span14] inv'1 a}
    {[@expl:precondition] [%#span13] inv'0 f}
    {[@expl:precondition] [%#span12] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#span16] inv'2 result}
      {[%#span15] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  
  let rec weaken_2_std (f:f) (a:a) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_3_std'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] exists f2 : borrowed f . f2.current = f
      /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_std
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 12 11 12 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 14 38 14 39
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 14 44 14 45
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 13 10 13 36
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 14 53 14 62
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  
  let%span span13 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  
  let%span span15 = "../06_fn_specs.rs" 24 11 24 28
  
  let%span span16 = "../06_fn_specs.rs" 26 49 26 50
  
  let%span span17 = "../06_fn_specs.rs" 26 55 26 56
  
  let%span span18 = "../06_fn_specs.rs" 25 0 25 93
  
  let%span span19 = "../06_fn_specs.rs" 26 64 26 73
  
  type t_Output'0
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : t_Output'0)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : t_Output'0)
  
  function fn_mut_once'0 (self : f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : t_Output'0 . [%#span5] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span6] unnest'0 self b)
   -> ([%#span7] unnest'0 b c)  -> ([%#span8] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : t_Output'0 . ([%#span10] postcondition_mut'0 self args res)
   -> ([%#span11] unnest'0 self.current self.final)
  
  predicate invariant'2 (self : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  axiom inv'2 : forall x : t_Output'0 . inv'2 x = true
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : t_Output'0)
  
  function fn_once'0 (self : f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : t_Output'0 . [%#span12] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate resolve'1 (self : borrowed f) =
    [%#span13] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : t_Output'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : t_Output'0 . [%#span14] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 self.current args res)
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_1 : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_2_std'0 (f:f) (a:a) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#span17] inv'1 a}
    {[@expl:precondition] [%#span16] inv'0 f}
    {[@expl:precondition] [%#span15] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#span19] inv'2 result}
      {[%#span18] exists f2 : borrowed f . f2.current = f /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
  
  let rec weaken_std (f:f) (a:a) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_2_std'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__fn_once_user
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 45 6 45 7
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 43 11 43 36
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 44 38 44 39
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  predicate invariant'2 (self : ()) =
    [%#span3] true
  
  predicate inv'2 (_1 : ())
  
  axiom inv'2 : forall x : () . inv'2 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'1 (self : usize) =
    [%#span3] true
  
  predicate inv'1 (_1 : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_1 : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : usize)
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_once'0 (self : f) (_2 : usize) (_3 : ())
  
  let rec call_once'0 (self:f) (args:usize) (return'  (ret:()))= {[@expl:precondition] [%#span6] inv'1 args}
    {[@expl:precondition] [%#span5] inv'0 self}
    {[@expl:precondition] [%#span4] precondition'0 self args}
    any
    [ return' (result:())-> {[%#span7] inv'2 result}
      {[%#span4] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec fn_once_user (f:f) (return'  (ret:()))= {[%#s06_fn_specs2] inv'0 f}
    {[%#s06_fn_specs1] precondition'0 f ((0 : usize))}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_4 <- (([%#s06_fn_specs0] (0 : usize))) ] s1
      | s1 = call_once'0 {f} {_4} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & f : f = f | & _4 : usize = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_06_fn_specs__caller__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int32
  
  type m_06_fn_specs__caller__qy123zclosureqy35z0qy125z  =
    | M_06_fn_specs__caller__qy123zclosureqy35z0qy125z
  
  let rec m_06_fn_specs__caller__qy123zclosureqy35z0qy125z (input:m_06_fn_specs__caller__qy123zclosureqy35z0qy125z) (ret  )= any
    [ good -> {M_06_fn_specs__caller__qy123zclosureqy35z0qy125z  = input} (! ret)
    | bad -> {M_06_fn_specs__caller__qy123zclosureqy35z0qy125z  <> input} {false} any ]
    
end
module M_06_fn_specs__caller__qy123zclosureqy35z0qy125z
  use prelude.prelude.Int32
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use M_06_fn_specs__caller__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  let rec m_06_fn_specs__caller__qy123zclosureqy35z0qy125z (_1:Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z) (_2:usize) (return'  (ret:()))= (! bb0
    [ bb0 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_06_fn_specs__caller
  let%span span0 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../06_fn_specs.rs" 43 11 43 36
  
  let%span span2 = "../06_fn_specs.rs" 44 38 44 39
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int32
  
  use M_06_fn_specs__caller__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate invariant'0 (self : Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z) =
    [%#span0] true
  
  predicate inv'0 (_1 : Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z)
  
  axiom inv'0 : forall x : Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate precondition'0 [#"../06_fn_specs.rs" 49 17 49 20] (self : Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z) (args : usize)
    
   =
    let (_2) = args in true
  
  let rec fn_once_user'0 (f:Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[@expl:precondition] [%#span2] inv'0 f}
    {[@expl:precondition] [%#span1] precondition'0 f ((0 : usize))}
    any [ return' (result:())-> (! return' {result}) ] 
  
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Closure'0.M_06_fn_specs__caller__qy123zclosureqy35z0qy125z ] s1
      | s1 = fn_once_user'0 {_1} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : Closure'0.m_06_fn_specs__caller__qy123zclosureqy35z0qy125z = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
