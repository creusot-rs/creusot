
module C06FnSpecs_Weaken3
  type a
  type f
  type output'0
  predicate invariant'2 (self : output'0)
  let rec invariant'2 (self:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : output'0)
  let rec inv'2 (_x:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate postcondition_once'0 (self : f) (a : a) (res : output'0)
  let rec postcondition_once'0 (self:f) (a:a) (res:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self a res} (! return' {result}) ]
    
  predicate precondition'0 (self : f) (a : a)
  let rec precondition'0 (self:f) (a:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self a} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec call_once'0 (self:f) (args:a) (return'  (ret:output'0))= {[@expl:precondition] inv'1 args}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition'0 self args}
    any
    [ return' (result:output'0)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  let rec weaken_3 (f:f) (a:a) (return'  (ret:output'0))= {[#"../06_fn_specs.rs" 32 55 32 56] inv'1 a}
    {[#"../06_fn_specs.rs" 32 49 32 50] inv'0 f}
    {[#"../06_fn_specs.rs" 30 11 30 28] precondition'0 f a}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : output'0 = any_l () : output'0 | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [#"../06_fn_specs.rs" 32 64 32 73] inv'2 result}
      {[@expl:postcondition] [#"../06_fn_specs.rs" 31 10 31 41] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken2
  type a
  type f
  type output'0
  predicate invariant'3 (self : output'0)
  let rec invariant'3 (self:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : output'0)
  let rec inv'3 (_x:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : output'0 . inv'3 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  let rec postcondition_mut'0 (self:borrowed f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed f)
  let rec inv'2 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (a : a) (res : output'0)
  let rec postcondition_once'0 (self:f) (a:a) (res:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self a res} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  let rec fn_mut_once'0 (self:f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'2 (self : borrowed f)
  let rec invariant'2 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate precondition'0 (self : f) (a : a)
  let rec precondition'0 (self:f) (a:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self a} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec weaken_3'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [#"../06_fn_specs.rs" 32 55 32 56] inv'1 a}
    {[@expl:precondition] [#"../06_fn_specs.rs" 32 49 32 50] inv'0 f}
    {[@expl:precondition] [#"../06_fn_specs.rs" 30 11 30 28] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[#"../06_fn_specs.rs" 32 64 32 73] inv'3 result}
      {[#"../06_fn_specs.rs" 31 10 31 41] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  let rec weaken_2 (f:f) (a:a) (return'  (ret:output'0))= {[#"../06_fn_specs.rs" 20 44 20 45] inv'1 a}
    {[#"../06_fn_specs.rs" 20 38 20 39] inv'0 f}
    {[#"../06_fn_specs.rs" 18 11 18 28] precondition'0 f a}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = weaken_3'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : output'0 = any_l () : output'0 | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [#"../06_fn_specs.rs" 20 53 20 62] inv'3 result}
      {[@expl:postcondition] [#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f . inv'2 f2
      /\  * f2 = f /\ postcondition_mut'0 f2 a result /\ resolve'0 ( ^ f2)}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken
  type a
  type f
  type output'0
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  let rec postcondition_mut'0 (self:borrowed f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed f)
  let rec inv'3 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (a : a) (res : output'0)
  let rec postcondition_once'0 (self:f) (a:a) (res:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self a res} (! return' {result}) ]
    
  predicate inv'2 (_x : output'0)
  let rec inv'2 (_x:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  let rec fn_mut_once'0 (self:f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'3 (self : borrowed f)
  let rec invariant'3 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  predicate invariant'2 (self : output'0)
  let rec invariant'2 (self:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  predicate postcondition'0 (self : f) (_2 : a) (_3 : output'0)
  let rec postcondition'0 (self:f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2 _3} (! return' {result}) ]
    
  function fn_once'0 (self : f) (args : a) (res : output'0) : ()
  let rec fn_once'0 (self:f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] inv'0 self}
    any [ return' (result:())-> {result = fn_once'0 self args res} (! return' {result}) ] 
  axiom fn_once'0_spec : forall self : f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res))
  predicate resolve'1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function fn_mut'0 (self : borrowed f) (args : a) (res : output'0) : ()
  let rec fn_mut'0 (self:borrowed f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] inv'3 self}
    any [ return' (result:())-> {result = fn_mut'0 self args res} (! return' {result}) ] 
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 ( * self) args res))
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate precondition'0 (self : f) (a : a)
  let rec precondition'0 (self:f) (a:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self a} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec weaken_2'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [#"../06_fn_specs.rs" 20 44 20 45] inv'1 a}
    {[@expl:precondition] [#"../06_fn_specs.rs" 20 38 20 39] inv'0 f}
    {[@expl:precondition] [#"../06_fn_specs.rs" 18 11 18 28] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[#"../06_fn_specs.rs" 20 53 20 62] inv'2 result}
      {[#"../06_fn_specs.rs" 19 0 19 93] exists f2 : borrowed f . inv'3 f2
      /\  * f2 = f /\ postcondition_mut'0 f2 a result /\ resolve'0 ( ^ f2)}
      (! return' {result}) ]
    
  let rec weaken (f:f) (a:a) (return'  (ret:output'0))= {[#"../06_fn_specs.rs" 8 53 8 54] inv'1 a}
    {[#"../06_fn_specs.rs" 8 47 8 48] inv'0 f}
    {[#"../06_fn_specs.rs" 6 11 6 28] precondition'0 f a}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = weaken_2'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : output'0 = any_l () : output'0 | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [#"../06_fn_specs.rs" 8 62 8 71] inv'2 result}
      {[@expl:postcondition] [#"../06_fn_specs.rs" 7 10 7 36] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken3Std
  type a
  type f
  type output'0
  predicate invariant'2 (self : output'0)
  let rec invariant'2 (self:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : output'0)
  let rec inv'2 (_x:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : output'0)
  let rec postcondition_once'0 (self:f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate precondition'0 (self : f) (_2 : a)
  let rec precondition'0 (self:f) (_2:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec call_once'0 (self:f) (args:a) (return'  (ret:output'0))= {[@expl:precondition] inv'1 args}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition'0 self args}
    any
    [ return' (result:output'0)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  let rec weaken_3_std (f:f) (a:a) (return'  (ret:output'0))= {[#"../06_fn_specs.rs" 38 46 38 47] inv'1 a}
    {[#"../06_fn_specs.rs" 38 40 38 41] inv'0 f}
    {[#"../06_fn_specs.rs" 36 11 36 28] precondition'0 f a}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : output'0 = any_l () : output'0 | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [#"../06_fn_specs.rs" 38 55 38 64] inv'2 result}
      {[@expl:postcondition] [#"../06_fn_specs.rs" 37 10 37 41] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken2Std
  type a
  type f
  type output'0
  predicate invariant'3 (self : output'0)
  let rec invariant'3 (self:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : output'0)
  let rec inv'3 (_x:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : output'0 . inv'3 x = true
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  let rec postcondition_mut'0 (self:borrowed f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed f)
  let rec inv'2 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : output'0)
  let rec postcondition_once'0 (self:f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  let rec fn_mut_once'0 (self:f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'3 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'2 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'2 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'3 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'2 (self : borrowed f)
  let rec invariant'2 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate precondition'0 (self : f) (_2 : a)
  let rec precondition'0 (self:f) (_2:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec weaken_3_std'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [#"../06_fn_specs.rs" 38 46 38 47] inv'1 a}
    {[@expl:precondition] [#"../06_fn_specs.rs" 38 40 38 41] inv'0 f}
    {[@expl:precondition] [#"../06_fn_specs.rs" 36 11 36 28] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[#"../06_fn_specs.rs" 38 55 38 64] inv'3 result}
      {[#"../06_fn_specs.rs" 37 10 37 41] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  let rec weaken_2_std (f:f) (a:a) (return'  (ret:output'0))= {[#"../06_fn_specs.rs" 26 55 26 56] inv'1 a}
    {[#"../06_fn_specs.rs" 26 49 26 50] inv'0 f}
    {[#"../06_fn_specs.rs" 24 11 24 28] precondition'0 f a}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = weaken_3_std'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : output'0 = any_l () : output'0 | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [#"../06_fn_specs.rs" 26 64 26 73] inv'3 result}
      {[@expl:postcondition] [#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f . inv'2 f2
      /\  * f2 = f /\ postcondition_mut'0 f2 a result /\ resolve'0 ( ^ f2)}
      (! return' {result}) ]
    
end
module C06FnSpecs_WeakenStd
  type a
  type f
  type output'0
  predicate resolve'0 (self : f)
  let rec resolve'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  let rec postcondition_mut'0 (self:borrowed f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_mut'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'3 (_x : borrowed f)
  let rec inv'3 (_x:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : output'0)
  let rec postcondition_once'0 (self:f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  predicate inv'2 (_x : output'0)
  let rec inv'2 (_x:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  predicate inv'1 (_x : a)
  let rec inv'1 (_x:a) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  let rec fn_mut_once'0 (self:f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self}
    any [ return' (result:())-> {result = fn_mut_once'0 self args res} (! return' {result}) ] 
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\  * s = self /\ postcondition_mut'0 s args res /\ resolve'0 ( ^ s)))
  predicate unnest'0 (self : f) (_2 : f)
  let rec unnest'0 (self:f) (_2:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = unnest'0 self _2} (! return' {result}) ]
    
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  let rec unnest_trans'0 (self:f) (b:f) (c:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b}
    any [ return' (result:())-> {result = unnest_trans'0 self b c} (! return' {result}) ] 
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] unnest'0 self b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] unnest'0 b c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] inv'0 b)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] inv'0 c)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] unnest'0 self c)
  function unnest_refl'0 (self : f) : ()
  let rec unnest_refl'0 (self:f) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self}
    any [ return' (result:())-> {result = unnest_refl'0 self} (! return' {result}) ] 
  axiom unnest_refl'0_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] unnest'0 self self)
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  let rec postcondition_mut_unnest'0 (self:borrowed f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res}
    any [ return' (result:())-> {result = postcondition_mut_unnest'0 self args res} (! return' {result}) ] 
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] postcondition_mut'0 self args res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] unnest'0 ( * self) ( ^ self))
  predicate invariant'3 (self : borrowed f)
  let rec invariant'3 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  predicate invariant'2 (self : output'0)
  let rec invariant'2 (self:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  predicate postcondition'0 (self : f) (_2 : a) (_3 : output'0)
  let rec postcondition'0 (self:f) (_2:a) (_3:output'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition'0 self _2 _3} (! return' {result}) ]
    
  function fn_once'0 (self : f) (args : a) (res : output'0) : ()
  let rec fn_once'0 (self:f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self}
    any [ return' (result:())-> {result = fn_once'0 self args res} (! return' {result}) ] 
  axiom fn_once'0_spec : forall self : f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res))
  predicate resolve'1 (self : borrowed f) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  function fn_mut'0 (self : borrowed f) (args : a) (res : output'0) : ()
  let rec fn_mut'0 (self:borrowed f) (args:a) (res:output'0) (return'  (ret:()))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'2 res}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'1 args}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'3 self}
    any [ return' (result:())-> {result = fn_mut'0 self args res} (! return' {result}) ] 
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : output'0 . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] inv'1 args)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] inv'2 res)
   -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 ( * self) args res))
  predicate invariant'1 (self : a)
  let rec invariant'1 (self:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : a . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate precondition'0 (self : f) (_2 : a)
  let rec precondition'0 (self:f) (_2:a) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec weaken_2_std'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [#"../06_fn_specs.rs" 26 55 26 56] inv'1 a}
    {[@expl:precondition] [#"../06_fn_specs.rs" 26 49 26 50] inv'0 f}
    {[@expl:precondition] [#"../06_fn_specs.rs" 24 11 24 28] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[#"../06_fn_specs.rs" 26 64 26 73] inv'2 result}
      {[#"../06_fn_specs.rs" 25 0 25 93] exists f2 : borrowed f . inv'3 f2
      /\  * f2 = f /\ postcondition_mut'0 f2 a result /\ resolve'0 ( ^ f2)}
      (! return' {result}) ]
    
  let rec weaken_std (f:f) (a:a) (return'  (ret:output'0))= {[#"../06_fn_specs.rs" 14 44 14 45] inv'1 a}
    {[#"../06_fn_specs.rs" 14 38 14 39] inv'0 f}
    {[#"../06_fn_specs.rs" 12 11 12 28] precondition'0 f a}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = weaken_2_std'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : output'0 = any_l () : output'0 | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [#"../06_fn_specs.rs" 14 53 14 62] inv'2 result}
      {[@expl:postcondition] [#"../06_fn_specs.rs" 13 10 13 36] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_FnOnceUser
  type f
  predicate invariant'2 (self : ()) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : ())
  let rec inv'2 (_x:()) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : () . inv'2 x = true
  use prelude.UIntSize
  predicate invariant'1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : usize)
  let rec inv'1 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : usize . inv'1 x = true
  predicate invariant'0 (self : f)
  let rec invariant'0 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : f)
  let rec inv'0 (_x:f) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : f . inv'0 x = true
  predicate precondition'0 (self : f) (_2 : usize)
  let rec precondition'0 (self:f) (_2:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = precondition'0 self _2} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate postcondition_once'0 (self : f) (_2 : usize) (_3 : ())
  let rec postcondition_once'0 (self:f) (_2:usize) (_3:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = postcondition_once'0 self _2 _3} (! return' {result}) ]
    
  let rec call_once'0 (self:f) (args:usize) (return'  (ret:()))= {[@expl:precondition] inv'1 args}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] precondition'0 self args}
    any
    [ return' (result:())-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  use prelude.Int
  let rec fn_once_user (f:f) (return'  (ret:()))= {[#"../06_fn_specs.rs" 44 38 44 39] inv'0 f}
    {[#"../06_fn_specs.rs" 43 11 43 36] precondition'0 f ((0 : usize))}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_4 <- (([#"../06_fn_specs.rs" 45 6 45 7] (0 : usize))) ] s1
      | s1 = call_once'0 {f} {_4} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & f : f = f | & _4 : usize = any_l () : usize ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C06FnSpecs_Caller_Closure0_Type
  use prelude.UIntSize
  use prelude.Int32
  type c06fnspecs_caller_closure0  =
    | C06fnspecs_caller_closure0
    
  let rec c06fnspecs_caller_closure0 (input:c06fnspecs_caller_closure0) (ret  )= any
    [ good -> {C06fnspecs_caller_closure0  = input} (! ret)
    | bad -> {C06fnspecs_caller_closure0  <> input} {false} any ]
    
end
module C06FnSpecs_Caller_Closure0
  use prelude.Int32
  use prelude.UIntSize
  use prelude.Int
  use C06FnSpecs_Caller_Closure0_Type as C06FnSpecs_Caller_Closure0_Type
  use prelude.Intrinsic
  predicate resolve'0 [#"../06_fn_specs.rs" 49 17 49 20] (_1 : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0)
    
   =
    true
  let rec c06fnspecs_caller_closure0 (_1:C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0) (_2:usize) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = -{resolve'0 _1}- s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & _1 : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0 = _1 ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C06FnSpecs_Caller
  use prelude.UIntSize
  use prelude.Int32
  use C06FnSpecs_Caller_Closure0_Type as C06FnSpecs_Caller_Closure0_Type
  predicate invariant'0 (self : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0)
  let rec inv'0 (_x:C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0 . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Int
  predicate precondition'0 [#"../06_fn_specs.rs" 49 17 49 20] (self : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0) (args : usize)
    
   =
    let (_2) = args in true
  let rec fn_once_user'0 (f:C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0) (return'  (ret:()))= {[@expl:precondition] [#"../06_fn_specs.rs" 44 38 44 39] inv'0 f}
    {[@expl:precondition] [#"../06_fn_specs.rs" 43 11 43 36] precondition'0 f ((0 : usize))}
    any [ return' (result:())-> (! return' {result}) ] 
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_1 <- C06FnSpecs_Caller_Closure0_Type.C06fnspecs_caller_closure0 : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0 ]
        
        s1
      | s1 = fn_once_user'0 {_1} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0 = any_l () : C06FnSpecs_Caller_Closure0_Type.c06fnspecs_caller_closure0 ]
     [ return' (result:())-> (! return' {result}) ] 
end
