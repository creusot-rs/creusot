
module C06FnSpecs_Weaken3
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 30 11 30 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 32 49 32 50
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 32 55 32 56
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 31 10 31 41
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 32 64 32 73
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "" 0 0 0 0
  
  type output'0
  
  predicate invariant'2 (self : output'0)
  
  predicate inv'2 (_x : output'0)
  
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_x : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_x : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate postcondition_once'0 (self : f) (a : a) (res : output'0)
  
  predicate precondition'0 (self : f) (a : a)
  
  use prelude.prelude.Intrinsic
  
  let rec call_once'0 (self:f) (args:a) (return'  (ret:output'0))= {[@expl:precondition] [%#span7] inv'1 args}
    {[@expl:precondition] [%#span6] inv'0 self}
    {[@expl:precondition] [%#span5] precondition'0 self args}
    any
    [ return' (result:output'0)-> {[%#span8] inv'2 result}
      {[%#span5] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  let rec weaken_3 (f:f) (a:a) (return'  (ret:output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken2
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 18 11 18 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 20 38 20 39
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 20 44 20 45
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 19 0 19 93
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 20 53 20 62
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35
  
  let%span span22 = "../06_fn_specs.rs" 30 11 30 28
  
  let%span span23 = "../06_fn_specs.rs" 32 49 32 50
  
  let%span span24 = "../06_fn_specs.rs" 32 55 32 56
  
  let%span span25 = "../06_fn_specs.rs" 31 10 31 41
  
  let%span span26 = "../06_fn_specs.rs" 32 64 32 73
  
  type output'0
  
  predicate invariant'3 (self : output'0)
  
  predicate inv'3 (_x : output'0)
  
  axiom inv'3 : forall x : output'0 . inv'3 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  
  predicate inv'2 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (a : a) (res : output'0)
  
  predicate inv'1 (_x : a)
  
  predicate inv'0 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([%#span5] inv'0 self)
   -> ([%#span6] inv'1 args)
   -> ([%#span7] inv'3 res)
   -> ([%#span8] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span9] unnest'0 self b)
   -> ([%#span10] unnest'0 b c)
   -> ([%#span11] inv'0 self)  -> ([%#span12] inv'0 b)  -> ([%#span13] inv'0 c)  -> ([%#span14] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span15] inv'0 self)  -> ([%#span16] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([%#span17] postcondition_mut'0 self args res)
   -> ([%#span18] inv'2 self)
   -> ([%#span19] inv'1 args)  -> ([%#span20] inv'3 res)  -> ([%#span21] unnest'0 self.current self.final)
  
  predicate invariant'2 (self : borrowed f)
  
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (a : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_3'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [%#span24] inv'1 a}
    {[@expl:precondition] [%#span23] inv'0 f}
    {[@expl:precondition] [%#span22] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[%#span26] inv'3 result}
      {[%#span25] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  
  let rec weaken_2 (f:f) (a:a) (return'  (ret:output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_3'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'3 result}
      {[@expl:postcondition] [%#s06_fn_specs3] exists f2 : borrowed f . inv'2 f2
      /\ f2.current = f /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 6 11 6 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 8 47 8 48
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 8 53 8 54
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 7 10 7 36
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 8 62 8 71
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 43 19 43 23
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 43 25 43 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 43 37 43 40
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 42 14 42 135
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 39 20 39 24
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 39 26 39 27
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 39 35 39 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 33 19 33 23
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 29 37 29 41
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 29 43 29 47
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 29 55 29 58
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 61 15 61 19
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 61 21 61 25
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 61 33 61 36
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101
  
  let%span span26 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 57 19 57 23
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 57 25 57 29
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 57 37 57 40
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100
  
  let%span span31 = "../06_fn_specs.rs" 18 11 18 28
  
  let%span span32 = "../06_fn_specs.rs" 20 38 20 39
  
  let%span span33 = "../06_fn_specs.rs" 20 44 20 45
  
  let%span span34 = "../06_fn_specs.rs" 19 0 19 93
  
  let%span span35 = "../06_fn_specs.rs" 20 53 20 62
  
  type output'0
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  
  predicate inv'3 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (a : a) (res : output'0)
  
  predicate inv'2 (_x : output'0)
  
  predicate inv'1 (_x : a)
  
  predicate inv'0 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([%#span5] inv'0 self)
   -> ([%#span6] inv'1 args)
   -> ([%#span7] inv'2 res)
   -> ([%#span8] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span9] unnest'0 self b)
   -> ([%#span10] unnest'0 b c)
   -> ([%#span11] inv'0 self)  -> ([%#span12] inv'0 b)  -> ([%#span13] inv'0 c)  -> ([%#span14] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span15] inv'0 self)  -> ([%#span16] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([%#span17] postcondition_mut'0 self args res)
   -> ([%#span18] inv'3 self)
   -> ([%#span19] inv'1 args)  -> ([%#span20] inv'2 res)  -> ([%#span21] unnest'0 self.current self.final)
  
  predicate invariant'3 (self : borrowed f)
  
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  
  predicate invariant'2 (self : output'0)
  
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : output'0)
  
  function fn_once'0 (self : f) (args : a) (res : output'0) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : output'0 . ([%#span22] inv'0 self)
   -> ([%#span23] inv'1 args)
   -> ([%#span24] inv'2 res)
   -> ([%#span25] postcondition_once'0 self args res = (resolve'0 self /\ postcondition'0 self args res))
  
  predicate resolve'1 (self : borrowed f) =
    [%#span26] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : output'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : output'0 . ([%#span27] inv'3 self)
   -> ([%#span28] inv'1 args)
   -> ([%#span29] inv'2 res)
   -> ([%#span30] postcondition_mut'0 self args res = (resolve'1 self /\ postcondition'0 self.current args res))
  
  predicate invariant'1 (self : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (a : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_2'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [%#span33] inv'1 a}
    {[@expl:precondition] [%#span32] inv'0 f}
    {[@expl:precondition] [%#span31] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[%#span35] inv'2 result}
      {[%#span34] exists f2 : borrowed f . inv'3 f2
      /\ f2.current = f /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
  
  let rec weaken (f:f) (a:a) (return'  (ret:output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_2'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken3Std
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 36 11 36 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 38 40 38 41
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 38 46 38 47
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 37 10 37 41
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 38 55 38 64
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "" 0 0 0 0
  
  type output'0
  
  predicate invariant'2 (self : output'0)
  
  predicate inv'2 (_x : output'0)
  
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  predicate inv'1 (_x : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_x : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : output'0)
  
  predicate precondition'0 (self : f) (_2 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec call_once'0 (self:f) (args:a) (return'  (ret:output'0))= {[@expl:precondition] [%#span7] inv'1 args}
    {[@expl:precondition] [%#span6] inv'0 self}
    {[@expl:precondition] [%#span5] precondition'0 self args}
    any
    [ return' (result:output'0)-> {[%#span8] inv'2 result}
      {[%#span5] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  let rec weaken_3_std (f:f) (a:a) (return'  (ret:output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_Weaken2Std
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 24 11 24 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 26 49 26 50
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 26 55 26 56
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 25 0 25 93
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 26 64 26 73
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span22 = "../06_fn_specs.rs" 36 11 36 28
  
  let%span span23 = "../06_fn_specs.rs" 38 40 38 41
  
  let%span span24 = "../06_fn_specs.rs" 38 46 38 47
  
  let%span span25 = "../06_fn_specs.rs" 37 10 37 41
  
  let%span span26 = "../06_fn_specs.rs" 38 55 38 64
  
  type output'0
  
  predicate invariant'3 (self : output'0)
  
  predicate inv'3 (_x : output'0)
  
  axiom inv'3 : forall x : output'0 . inv'3 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  
  predicate inv'2 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : output'0)
  
  predicate inv'1 (_x : a)
  
  predicate inv'0 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([%#span5] inv'0 self)
   -> ([%#span6] inv'1 args)
   -> ([%#span7] inv'3 res)
   -> ([%#span8] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span9] unnest'0 self b)
   -> ([%#span10] unnest'0 b c)
   -> ([%#span11] inv'0 self)  -> ([%#span12] inv'0 b)  -> ([%#span13] inv'0 c)  -> ([%#span14] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span15] inv'0 self)  -> ([%#span16] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([%#span17] postcondition_mut'0 self args res)
   -> ([%#span18] inv'2 self)
   -> ([%#span19] inv'1 args)  -> ([%#span20] inv'3 res)  -> ([%#span21] unnest'0 self.current self.final)
  
  predicate invariant'2 (self : borrowed f)
  
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  
  predicate invariant'1 (self : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_3_std'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [%#span24] inv'1 a}
    {[@expl:precondition] [%#span23] inv'0 f}
    {[@expl:precondition] [%#span22] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[%#span26] inv'3 result}
      {[%#span25] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  
  let rec weaken_2_std (f:f) (a:a) (return'  (ret:output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_3_std'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'3 result}
      {[@expl:postcondition] [%#s06_fn_specs3] exists f2 : borrowed f . inv'2 f2
      /\ f2.current = f /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
end
module C06FnSpecs_WeakenStd
  type a
  
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 12 11 12 28
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 14 38 14 39
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 14 44 14 45
  
  let%span s06_fn_specs3 = "../06_fn_specs.rs" 13 10 13 36
  
  let%span s06_fn_specs4 = "../06_fn_specs.rs" 14 53 14 62
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  
  let%span span26 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  
  let%span span31 = "../06_fn_specs.rs" 24 11 24 28
  
  let%span span32 = "../06_fn_specs.rs" 26 49 26 50
  
  let%span span33 = "../06_fn_specs.rs" 26 55 26 56
  
  let%span span34 = "../06_fn_specs.rs" 25 0 25 93
  
  let%span span35 = "../06_fn_specs.rs" 26 64 26 73
  
  type output'0
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : a) (_3 : output'0)
  
  predicate inv'3 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : a) (_3 : output'0)
  
  predicate inv'2 (_x : output'0)
  
  predicate inv'1 (_x : a)
  
  predicate inv'0 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : a) (res : output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : a, res : output'0 . ([%#span5] inv'0 self)
   -> ([%#span6] inv'1 args)
   -> ([%#span7] inv'2 res)
   -> ([%#span8] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span9] unnest'0 self b)
   -> ([%#span10] unnest'0 b c)
   -> ([%#span11] inv'0 self)  -> ([%#span12] inv'0 b)  -> ([%#span13] inv'0 c)  -> ([%#span14] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span15] inv'0 self)  -> ([%#span16] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : a) (res : output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : a, res : output'0 . ([%#span17] postcondition_mut'0 self args res)
   -> ([%#span18] inv'3 self)
   -> ([%#span19] inv'1 args)  -> ([%#span20] inv'2 res)  -> ([%#span21] unnest'0 self.current self.final)
  
  predicate invariant'3 (self : borrowed f)
  
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  
  predicate invariant'2 (self : output'0)
  
  axiom inv'2 : forall x : output'0 . inv'2 x = true
  
  predicate postcondition'0 (self : f) (_2 : a) (_3 : output'0)
  
  function fn_once'0 (self : f) (args : a) (res : output'0) : ()
  
  axiom fn_once'0_spec : forall self : f, args : a, res : output'0 . ([%#span22] inv'0 self)
   -> ([%#span23] inv'1 args)
   -> ([%#span24] inv'2 res)
   -> ([%#span25] postcondition_once'0 self args res = (resolve'0 self /\ postcondition'0 self args res))
  
  predicate resolve'1 (self : borrowed f) =
    [%#span26] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : a) (res : output'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : a, res : output'0 . ([%#span27] inv'3 self)
   -> ([%#span28] inv'1 args)
   -> ([%#span29] inv'2 res)
   -> ([%#span30] postcondition_mut'0 self args res = (resolve'1 self /\ postcondition'0 self.current args res))
  
  predicate invariant'1 (self : a)
  
  axiom inv'1 : forall x : a . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : a)
  
  use prelude.prelude.Intrinsic
  
  let rec weaken_2_std'0 (f:f) (a:a) (return'  (ret:output'0))= {[@expl:precondition] [%#span33] inv'1 a}
    {[@expl:precondition] [%#span32] inv'0 f}
    {[@expl:precondition] [%#span31] precondition'0 f a}
    any
    [ return' (result:output'0)-> {[%#span35] inv'2 result}
      {[%#span34] exists f2 : borrowed f . inv'3 f2
      /\ f2.current = f /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
  
  let rec weaken_std (f:f) (a:a) (return'  (ret:output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_2_std'0 {f} {a} (fun (_ret':output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : output'0 = any_l () | & f : f = f | & a : a = a ] 
    [ return' (result:output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module C06FnSpecs_FnOnceUser
  type f
  
  let%span s06_fn_specs0 = "../06_fn_specs.rs" 45 6 45 7
  
  let%span s06_fn_specs1 = "../06_fn_specs.rs" 43 11 43 36
  
  let%span s06_fn_specs2 = "../06_fn_specs.rs" 44 38 44 39
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "" 0 0 0 0
  
  predicate invariant'2 (self : ()) =
    [%#span3] true
  
  predicate inv'2 (_x : ())
  
  axiom inv'2 : forall x : () . inv'2 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'1 (self : usize) =
    [%#span3] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : f)
  
  predicate inv'0 (_x : f)
  
  axiom inv'0 : forall x : f . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : usize)
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_once'0 (self : f) (_2 : usize) (_3 : ())
  
  let rec call_once'0 (self:f) (args:usize) (return'  (ret:()))= {[@expl:precondition] [%#span6] inv'1 args}
    {[@expl:precondition] [%#span5] inv'0 self}
    {[@expl:precondition] [%#span4] precondition'0 self args}
    any
    [ return' (result:())-> {[%#span7] inv'2 result}
      {[%#span4] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec fn_once_user (f:f) (return'  (ret:()))= {[%#s06_fn_specs2] inv'0 f}
    {[%#s06_fn_specs1] precondition'0 f ((0 : usize))}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_4 <- (([%#s06_fn_specs0] (0 : usize))) ] s1
      | s1 = call_once'0 {f} {_4} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & f : f = f | & _4 : usize = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module C06FnSpecs_Caller_Closure0_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int32
  
  type c06fnspecs_caller_closure0  =
    | C06fnspecs_caller_closure0
  
  let rec c06fnspecs_caller_closure0 (input:c06fnspecs_caller_closure0) (ret  )= any
    [ good -> {C06fnspecs_caller_closure0  = input} (! ret)
    | bad -> {C06fnspecs_caller_closure0  <> input} {false} any ]
    
end
module C06FnSpecs_Caller_Closure0
  use prelude.prelude.Int32
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use C06FnSpecs_Caller_Closure0_Type as Closure'0
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 [#"../06_fn_specs.rs" 49 17 49 20] (_1 : Closure'0.c06fnspecs_caller_closure0) =
    true
  
  let rec c06fnspecs_caller_closure0 (_1:Closure'0.c06fnspecs_caller_closure0) (_2:usize) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'0 _1}- s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () | & _1 : Closure'0.c06fnspecs_caller_closure0 = _1 ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C06FnSpecs_Caller
  let%span span0 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span1 = "../06_fn_specs.rs" 43 11 43 36
  
  let%span span2 = "../06_fn_specs.rs" 44 38 44 39
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int32
  
  use C06FnSpecs_Caller_Closure0_Type as Closure'0
  
  predicate invariant'0 (self : Closure'0.c06fnspecs_caller_closure0) =
    [%#span0] true
  
  predicate inv'0 (_x : Closure'0.c06fnspecs_caller_closure0)
  
  axiom inv'0 : forall x : Closure'0.c06fnspecs_caller_closure0 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate precondition'0 [#"../06_fn_specs.rs" 49 17 49 20] (self : Closure'0.c06fnspecs_caller_closure0) (args : usize)
    
   =
    let (_2) = args in true
  
  let rec fn_once_user'0 (f:Closure'0.c06fnspecs_caller_closure0) (return'  (ret:()))= {[@expl:precondition] [%#span2] inv'0 f}
    {[@expl:precondition] [%#span1] precondition'0 f ((0 : usize))}
    any [ return' (result:())-> (! return' {result}) ] 
  
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Closure'0.C06fnspecs_caller_closure0 ] s1
      | s1 = fn_once_user'0 {_1} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : Closure'0.c06fnspecs_caller_closure0 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
