
module C02Nested_NestedClosure_Closure0_Closure0_Type
  use prelude.Int8
  use prelude.Borrow
  type c02nested_nestedclosure_closure0_closure0  =
    | C02Nested_NestedClosure_Closure0_Closure0 bool
    
end
module C02Nested_NestedClosure_Closure0_Closure0
  use prelude.Int8
  use C02Nested_NestedClosure_Closure0_Closure0_Type as C02Nested_NestedClosure_Closure0_Closure0
  use prelude.Borrow
  function field_00 [#"../02_nested.rs" 6 18 6 20] (self : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    
   =
    let C02Nested_NestedClosure_Closure0_Closure0.C02Nested_NestedClosure_Closure0_Closure0 a = self in a
  val field_00 [#"../02_nested.rs" 6 18 6 20] (self : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    ensures { result = field_00 self }
    
  let rec cfg c02Nested_NestedClosure_Closure0_Closure0 [#"../02_nested.rs" 6 18 6 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0 = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../02_nested.rs" 6 21 6 22] _0 <- ([#"../02_nested.rs" 6 21 6 22] field_00 _1);
    return _0
  }
  
end
module C02Nested_NestedClosure_Closure0_Type
  use prelude.Int8
  use prelude.Borrow
  type c02nested_nestedclosure_closure0  =
    | C02Nested_NestedClosure_Closure0 bool
    
end
module C02Nested_NestedClosure_Closure0
  use prelude.Int8
  use C02Nested_NestedClosure_Closure0_Type as C02Nested_NestedClosure_Closure0
  use prelude.Borrow
  use C02Nested_NestedClosure_Closure0_Closure0_Type as C02Nested_NestedClosure_Closure0_Closure0
  predicate resolve0 [#"../02_nested.rs" 6 18 6 20] (_1 : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0)
    
   =
    true
  function field_01 [#"../02_nested.rs" 6 18 6 20] (self : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    
   =
    let C02Nested_NestedClosure_Closure0_Closure0.C02Nested_NestedClosure_Closure0_Closure0 a = self in a
  val field_01 [#"../02_nested.rs" 6 18 6 20] (self : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    ensures { result = field_01 self }
    
  val closure00 [#"../02_nested.rs" 6 18 6 20] (_1 : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    
  function field_00 [#"../02_nested.rs" 5 14 5 16] (self : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0) : bool
    
   =
    let C02Nested_NestedClosure_Closure0.C02Nested_NestedClosure_Closure0 a = self in a
  val field_00 [#"../02_nested.rs" 5 14 5 16] (self : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0) : bool
    ensures { result = field_00 self }
    
  let rec cfg c02Nested_NestedClosure_Closure0 [#"../02_nested.rs" 5 14 5 16] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0 = _1;
  var omg : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0;
  {
    goto BB0
  }
  BB0 {
    [#"../02_nested.rs" 6 18 6 22] omg <- ([#"../02_nested.rs" 6 18 6 22] C02Nested_NestedClosure_Closure0_Closure0.C02Nested_NestedClosure_Closure0_Closure0 ([#"../02_nested.rs" 6 18 6 22] field_00 _1));
    [#"../02_nested.rs" 7 8 7 15] _0 <- ([#"../02_nested.rs" 7 8 7 15] let () = [#"../02_nested.rs" 7 8 7 15] () in closure00 ([#"../02_nested.rs" 7 8 7 13] omg));
    goto BB1
  }
  BB1 {
    assume { resolve0 omg };
    return _0
  }
  
end
module C02Nested_NestedClosure
  use prelude.Int8
  use C02Nested_NestedClosure_Closure0_Type as C02Nested_NestedClosure_Closure0
  predicate resolve0 [#"../02_nested.rs" 5 14 5 16] (_1 : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0)
    
   =
    true
  use prelude.Borrow
  use C02Nested_NestedClosure_Closure0_Closure0_Type as C02Nested_NestedClosure_Closure0_Closure0
  predicate resolve1 [#"../02_nested.rs" 6 18 6 20] (_1 : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0)
    
   =
    true
  function field_01 [#"../02_nested.rs" 6 18 6 20] (self : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    
   =
    let C02Nested_NestedClosure_Closure0_Closure0.C02Nested_NestedClosure_Closure0_Closure0 a = self in a
  val field_01 [#"../02_nested.rs" 6 18 6 20] (self : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    ensures { result = field_01 self }
    
  val closure01 [#"../02_nested.rs" 6 18 6 20] (_1 : C02Nested_NestedClosure_Closure0_Closure0.c02nested_nestedclosure_closure0_closure0) : bool
    
  function field_00 [#"../02_nested.rs" 5 14 5 16] (self : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0) : bool
    
   =
    let C02Nested_NestedClosure_Closure0.C02Nested_NestedClosure_Closure0 a = self in a
  val field_00 [#"../02_nested.rs" 5 14 5 16] (self : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0) : bool
    ensures { result = field_00 self }
    
  val closure00 [#"../02_nested.rs" 5 14 5 16] (_1 : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0) : bool
    
  let rec cfg nested_closure [#"../02_nested.rs" 3 0 3 23] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : bool;
  var _a : bool;
  var _4 : C02Nested_NestedClosure_Closure0.c02nested_nestedclosure_closure0;
  {
    goto BB0
  }
  BB0 {
    [#"../02_nested.rs" 4 12 4 16] a <- ([#"../02_nested.rs" 4 12 4 16] [#"../02_nested.rs" 4 12 4 16] true);
    [#"../02_nested.rs" 5 13 8 6] _4 <- ([#"../02_nested.rs" 5 13 8 6] C02Nested_NestedClosure_Closure0.C02Nested_NestedClosure_Closure0 ([#"../02_nested.rs" 5 13 8 6] a));
    [#"../02_nested.rs" 5 13 8 8] _a <- ([#"../02_nested.rs" 5 13 8 8] let () = [#"../02_nested.rs" 5 13 8 8] () in closure00 ([#"../02_nested.rs" 5 13 8 6] _4));
    goto BB1
  }
  BB1 {
    assume { resolve0 _4 };
    [#"../02_nested.rs" 3 24 9 1] _0 <- ([#"../02_nested.rs" 3 24 9 1] ());
    return _0
  }
  
end
