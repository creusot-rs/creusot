
module C02Nested_NestedClosure_Closure0_Closure0_Interface
  use prelude.Borrow
  type c02nested_nestedclosure_closure0_closure0  =
    | C02Nested_NestedClosure_Closure0_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_closure0_0 (self : c02nested_nestedclosure_closure0_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C02Nested_NestedClosure_Closure0_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : c02nested_nestedclosure_closure0_closure0) (_ : ())
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : c02nested_nestedclosure_closure0_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate unnest (self : c02nested_nestedclosure_closure0_closure0) (_2' : c02nested_nestedclosure_closure0_closure0)
   =
    c02nested_nestedclosure_closure0_closure0_0 _2' = c02nested_nestedclosure_closure0_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : borrowed c02nested_nestedclosure_closure0_closure0) (_ : ()) (result : bool)
    
   =
    ([#"../02_nested.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : c02nested_nestedclosure_closure0_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate resolve (_1' : c02nested_nestedclosure_closure0_closure0) =
    true
  val c02Nested_NestedClosure_Closure0_Closure0 [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (_1' : c02nested_nestedclosure_closure0_closure0) : bool
    
end
module C02Nested_NestedClosure_Closure0_Closure0
  use prelude.Borrow
  type c02nested_nestedclosure_closure0_closure0  =
    | C02Nested_NestedClosure_Closure0_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_closure0_0 (self : c02nested_nestedclosure_closure0_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C02Nested_NestedClosure_Closure0_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : c02nested_nestedclosure_closure0_closure0) (_ : ())
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : c02nested_nestedclosure_closure0_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate unnest (self : c02nested_nestedclosure_closure0_closure0) (_2' : c02nested_nestedclosure_closure0_closure0)
   =
    c02nested_nestedclosure_closure0_closure0_0 _2' = c02nested_nestedclosure_closure0_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : borrowed c02nested_nestedclosure_closure0_closure0) (_ : ()) (result : bool)
    
   =
    ([#"../02_nested.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (self : c02nested_nestedclosure_closure0_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate resolve (_1' : c02nested_nestedclosure_closure0_closure0) =
    true
  let rec cfg c02Nested_NestedClosure_Closure0_Closure0 [@cfg:stackify] [#"../02_nested.rs" 6 18 6 20] (_1' : c02nested_nestedclosure_closure0_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : c02nested_nestedclosure_closure0_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- c02nested_nestedclosure_closure0_closure0_0 _1;
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C02Nested_NestedClosure_Closure0_Interface
  use prelude.Borrow
  type c02nested_nestedclosure_closure0  =
    | C02Nested_NestedClosure_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_0 (self : c02nested_nestedclosure_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C02Nested_NestedClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : c02nested_nestedclosure_closure0) (_ : ())
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : c02nested_nestedclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate unnest (self : c02nested_nestedclosure_closure0) (_2' : c02nested_nestedclosure_closure0) =
    c02nested_nestedclosure_closure0_0 _2' = c02nested_nestedclosure_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : borrowed c02nested_nestedclosure_closure0) (_ : ()) (result : bool)
    
   =
    ([#"../02_nested.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : c02nested_nestedclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate resolve (_1' : c02nested_nestedclosure_closure0) =
    true
  val c02Nested_NestedClosure_Closure0 [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (_1' : c02nested_nestedclosure_closure0) : bool
    
end
module C02Nested_NestedClosure_Closure0
  use prelude.Borrow
  type c02nested_nestedclosure_closure0  =
    | C02Nested_NestedClosure_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_0 (self : c02nested_nestedclosure_closure0) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C02Nested_NestedClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : c02nested_nestedclosure_closure0) (_ : ())
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate postcondition [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : c02nested_nestedclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate unnest (self : c02nested_nestedclosure_closure0) (_2' : c02nested_nestedclosure_closure0) =
    c02nested_nestedclosure_closure0_0 _2' = c02nested_nestedclosure_closure0_0 self
  predicate postcondition_mut [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : borrowed c02nested_nestedclosure_closure0) (_ : ()) (result : bool)
    
   =
    ([#"../02_nested.rs" 1 0 1 0] true) && unnest ( * self) ( ^ self)
  predicate postcondition_once [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (self : c02nested_nestedclosure_closure0) (_ : ()) (result : bool)
    
   =
    [#"../02_nested.rs" 1 0 1 0] true
  predicate resolve (_1' : c02nested_nestedclosure_closure0) =
    true
  clone C02Nested_NestedClosure_Closure0_Closure0_Interface as Closure00 with
    axiom .
  let rec cfg c02Nested_NestedClosure_Closure0 [@cfg:stackify] [#"../02_nested.rs" 5 14 5 16] (_1' : c02nested_nestedclosure_closure0) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _1 : c02nested_nestedclosure_closure0;
  var omg_2 : Closure00.c02nested_nestedclosure_closure0_closure0;
  var _3 : bool;
  var _4 : Closure00.c02nested_nestedclosure_closure0_closure0;
  var _5 : ();
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _3 <- c02nested_nestedclosure_closure0_0 _1;
    omg_2 <- Closure00.C02Nested_NestedClosure_Closure0_Closure0 _3;
    _4 <- omg_2;
    assume { Closure00.resolve omg_2 };
    _5 <- ();
    _0 <- ([#"../02_nested.rs" 7 8 7 15] let () = _5 in Closure00.c02Nested_NestedClosure_Closure0_Closure0 _4);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C02Nested_NestedClosure_Interface
  val nested_closure [@cfg:stackify] [#"../02_nested.rs" 3 0 3 23] (_1' : ()) : ()
end
module C02Nested_NestedClosure
  use prelude.Borrow
  clone C02Nested_NestedClosure_Closure0_Interface as Closure00 with
    axiom .
  let rec cfg nested_closure [@cfg:stackify] [#"../02_nested.rs" 3 0 3 23] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : bool;
  var _a_2 : bool;
  var _3 : Closure00.c02nested_nestedclosure_closure0;
  var _4 : Closure00.c02nested_nestedclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../02_nested.rs" 4 12 4 16] true);
    _5 <- a_1;
    _4 <- Closure00.C02Nested_NestedClosure_Closure0 _5;
    _3 <- _4;
    assume { Closure00.resolve _4 };
    _6 <- ();
    _a_2 <- ([#"../02_nested.rs" 5 13 8 8] let () = _6 in Closure00.c02Nested_NestedClosure_Closure0 _3);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
