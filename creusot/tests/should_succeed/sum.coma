module M_sum__sum_first_n [#"sum.rs" 6 0 6 33]
  let%span ssum0 = "sum.rs" 7 18 7 19
  let%span ssum1 = "sum.rs" 9 13 9 14
  let%span ssum2 = "sum.rs" 9 4 9 7
  let%span ssum3 = "sum.rs" 9 4 9 7
  let%span ssum4 = "sum.rs" 8 16 8 65
  let%span ssum5 = "sum.rs" 9 4 9 7
  let%span ssum6 = "sum.rs" 9 4 9 7
  let%span ssum7 = "sum.rs" 4 11 4 20
  let%span ssum8 = "sum.rs" 5 10 5 38
  let%span sops9 = "../../../creusot-contracts/src/std/ops.rs" 219 26 219 53
  let%span sops10 = "../../../creusot-contracts/src/std/ops.rs" 220 26 220 49
  let%span sops11 = "../../../creusot-contracts/src/std/ops.rs" 221 26 221 91
  let%span siter12 = "../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span srange13 = "../../../creusot-contracts/src/std/iter/range.rs" 66 12 70 76
  let%span siter14 = "../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span snum15 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span sops16 = "../../../creusot-contracts/src/std/ops.rs" 205 14 205 86
  let%span siter17 = "../../../creusot-contracts/src/std/iter.rs" 82 20 82 24
  let%span siter18 = "../../../creusot-contracts/src/std/iter.rs" 88 8 88 19
  let%span srange19 = "../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45
  let%span srange20 = "../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10
  let%span srange21 = "../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32
  let%span srange22 = "../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32
  let%span srange23 = "../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42
  let%span srange24 = "../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  let%span srange25 = "../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43
  let%span srange26 = "../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5
  let%span srange27 = "../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57
  let%span sresolve28 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UInt32
  
  predicate inv'2 (_1 : uint32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : uint32 [inv'2 x] . inv'2 x = true
  
  type t_RangeInclusive'0  =
    { t_RangeInclusive__start'0: uint32; t_RangeInclusive__end'0: uint32; t_RangeInclusive__exhausted'0: bool }
  
  predicate inv'0 (_1 : t_RangeInclusive'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_RangeInclusive'0 [inv'0 x] . inv'0 x = true
  
  function start_log'0 (self : t_RangeInclusive'0) : uint32
  
  function end_log'0 (self : t_RangeInclusive'0) : uint32
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function deep_model'0 (self : uint32) : int =
    [%#snum15] UInt32.to_int self
  
  function is_empty_log'0 (self : t_RangeInclusive'0) : bool
  
  axiom is_empty_log'0_spec : forall self : t_RangeInclusive'0 . [%#sops16] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  let rec new'0 (start:uint32) (end':uint32) (return'  (ret:t_RangeInclusive'0))= {[@expl:new 'start' type invariant] inv'2 start}
    {[@expl:new 'end' type invariant] inv'2 end'}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'0 result}
      {[%#sops9] start_log'0 result = start}
      {[%#sops10] end_log'0 result = end'}
      {[%#sops11] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      (! return' {result}) ]
    
  
  predicate into_iter_pre'0 (self : t_RangeInclusive'0) =
    [%#siter17] true
  
  predicate into_iter_post'0 (self : t_RangeInclusive'0) (res : t_RangeInclusive'0) =
    [%#siter18] self = res
  
  let rec into_iter'0 (self:t_RangeInclusive'0) (return'  (ret:t_RangeInclusive'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter12] into_iter_pre'0 self}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'0 result}
      {[%#siter12] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function range_inclusive_len'0 (r : t_RangeInclusive'0) : int =
    [%#srange26] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : t_RangeInclusive'0 . [%#srange25] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  use seq.Seq
  
  predicate produces'0 (self : t_RangeInclusive'0) (visited : Seq.seq uint32) (o : t_RangeInclusive'0) =
    [%#srange13] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'0 (a : t_RangeInclusive'0) (ab : Seq.seq uint32) (b : t_RangeInclusive'0) (bc : Seq.seq uint32) (c : t_RangeInclusive'0) : ()
    
   =
    [%#srange24] ()
  
  axiom produces_trans'0_spec : forall a : t_RangeInclusive'0, ab : Seq.seq uint32, b : t_RangeInclusive'0, bc : Seq.seq uint32, c : t_RangeInclusive'0 . ([%#srange21] produces'0 a ab b)
   -> ([%#srange22] produces'0 b bc c)  -> ([%#srange23] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_RangeInclusive'0) : () =
    [%#srange20] ()
  
  axiom produces_refl'0_spec : forall self : t_RangeInclusive'0 . [%#srange19] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  predicate inv'1 (_1 : Seq.seq uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq uint32 [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : borrowed (t_RangeInclusive'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (t_RangeInclusive'0) [inv'3 x] . inv'3 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 uint32
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  predicate completed'0 (self : borrowed (t_RangeInclusive'0)) =
    [%#srange27] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_RangeInclusive'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {inv'4 result}
      {[%#siter14] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (t_RangeInclusive'0)) =
    [%#sresolve28] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_RangeInclusive'0)) =
    resolve'1 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : uint32 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec sum_first_n'0 (n:uint32) (return'  (ret:uint32))= {[@expl:sum_first_n requires] [%#ssum7] UInt32.to_int n
    < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &sum <- [%#ssum0] (0 : uint32) ] s1
      | s1 = new'0 {[%#ssum1] (1 : uint32)} {n} (fun (_ret':t_RangeInclusive'0) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = into_iter'0 {_7} (fun (_ret':t_RangeInclusive'0) ->  [ &iter <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#ssum2] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#ssum3] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] [%#ssum5] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#ssum5] inv'0 iter}
        {[@expl:for invariant] [%#ssum5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#ssum4] UInt32.to_int sum * 2
        = Seq.length (Snapshot.inner produced) * (Seq.length (Snapshot.inner produced) + 1)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <t_RangeInclusive'0> {iter}
              (fun (_ret':borrowed (t_RangeInclusive'0)) ->  [ &_21 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_RangeInclusive'0> {_21.current} {Borrow.get_id _21}
              (fun (_ret':borrowed (t_RangeInclusive'0)) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':t_Option'0) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = C_None'0 } (! bb10) | br1 (x0:uint32)-> {_19 = C_Some'0 x0} (! bb9) ]  ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = v_Some'0 {_19} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_24 <- [%#ssum6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s3)
          | s3 = bb5 ]
           ]
         ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- sum ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & sum : uint32 = any_l ()
    | & iter : t_RangeInclusive'0 = any_l ()
    | & _7 : t_RangeInclusive'0 = any_l ()
    | & iter_old : Snapshot.snap_ty (t_RangeInclusive'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _19 : t_Option'0 = any_l ()
    | & _20 : borrowed (t_RangeInclusive'0) = any_l ()
    | & _21 : borrowed (t_RangeInclusive'0) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _24 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & i : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:sum_first_n ensures] [%#ssum8] UInt32.to_int result
      = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2}
      (! return' {result}) ]
    
end
