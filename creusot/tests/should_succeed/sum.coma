
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
  function any_l (_ : 'b) : 'a
  let rec t_rangeinclusive < 'idx > (input:t_rangeinclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted})
    | bad (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Sum_SumFirstN
  use prelude.UInt32
  use seq.Seq
  predicate invariant'4 (self : Seq.seq uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Seq.seq uint32)
  let rec inv'4 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Seq.seq uint32 . inv'4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option uint32)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option uint32 . inv'3 x = true
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32))
  let rec inv'2 (_x:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) . inv'2 x = true
  predicate invariant'1 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : uint32)
  let rec inv'1 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
  let rec inv'0 (_x:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  function start_log'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : uint32
  let rec start_log'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = start_log'0 self} (! return' {result}) ]
    
  use prelude.UInt32
  use prelude.Int
  function deep_model'0 (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  let rec deep_model'0 (self:uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  use seq.Seq
  function end_log'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : uint32
  let rec end_log'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = end_log'0 self} (! return' {result}) ]
    
  use int.Int
  function is_empty_log'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
  let rec is_empty_log'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:bool))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv'0 self}
    any [ return' (result:bool)-> {result = is_empty_log'0 self} (! return' {result}) ] 
  axiom is_empty_log'0_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv'0 self)
   -> ([#"../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self))
  function range_inclusive_len'0 (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : int =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5] if is_empty_log'0 r then
      0
    else
      deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
    
  let rec range_inclusive_len'0 (r:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:int))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv'0 r}
    any [ return' (result:int)-> {result = range_inclusive_len'0 r} (! return' {result}) ] 
  axiom range_inclusive_len'0_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv'0 r)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0))
  use seq.Seq
  predicate produces'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9] Seq.length visited
    = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  let rec produces'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (visited:Seq.seq uint32) (o:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10] ()
  let rec produces_trans'0 (a:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (ab:Seq.seq uint32) (b:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (bc:Seq.seq uint32) (c:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv'0 c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv'4 bc}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv'0 b}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv'4 ab}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv'0 a}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32, ab : Seq.seq uint32, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32, bc : Seq.seq uint32, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces'0 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces'0 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv'0 a)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv'4 ab)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv'0 b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv'4 bc)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv'0 c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10] ()
  let rec produces_refl'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25] inv'0 self)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  predicate invariant'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . inv'0 x = true
  use prelude.Intrinsic
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57] is_empty_log'0 ( * self)
    /\ is_empty_log'0 ( ^ self)
  let rec completed'0 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) (return'  (ret:Core_Option_Option_Type.t_option uint32))= {[@expl:precondition] inv'2 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {inv'3 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (res : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (res:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (return'  (ret:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)-> {inv'0 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec new'0 (start:uint32) (end':uint32) (return'  (ret:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32))= {[@expl:precondition] inv'1 end'}
    {[@expl:precondition] inv'1 start}
    any
    [ return' (result:Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)-> {inv'0 result}
      {[#"../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93] deep_model'0 start <= deep_model'0 end'
       -> not is_empty_log'0 result}
      {[#"../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49] end_log'0 result = end'}
      {[#"../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53] start_log'0 result = start}
      (! return' {result}) ]
    
  let rec sum_first_n (n:uint32) (return'  (ret:uint32))= {[#"../sum.rs" 4 11 4 20] UInt32.to_int n < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &sum <- [#"../sum.rs" 7 18 7 19] (0 : uint32) ] s1
      | s1 = new'0 {[#"../sum.rs" 9 13 9 14] (1 : uint32)} {n}
          (fun (_ret':Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_7}
          (fun (_ret':Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &iter_old <- ([#"../sum.rs" 8 4 8 67] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = 
        [ &produced <- ([#"../sum.rs" 8 4 8 67] Snapshot.new (Seq.empty  : Seq.seq uint32)) : Snapshot.snap_ty (Seq.seq uint32) ]
        
        s1
      | s1 = bb4 ]
      
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [#"../sum.rs" 8 16 8 65] UInt32.to_int sum
        = div (Seq.length (Snapshot.inner produced) * (Seq.length (Snapshot.inner produced) + 1)) 2}
        {[@expl:loop invariant] [#"../sum.rs" 8 4 8 67] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../sum.rs" 8 4 8 67] inv'0 iter}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <-  ^ _19 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32>
              { * _19}
              {Borrow.get_id _19}
              (fun (_ret':borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = ( ^ _18) ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Core_Option_Option_Type.t_option uint32) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Core_Option_Option_Type.C_None } (! bb10)
            | br1 (a:uint32)-> {_17 = Core_Option_Option_Type.C_Some a} (! bb9) ]
             ]
          
        | bb9 = s0 [ s0 = bb11 ] 
        | bb11 = s0
          [ s0 = Core_Option_Option_Type.some <uint32> {_17}
              (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- ([#"../sum.rs" 8 4 8 67] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq uint32) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _22 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq uint32))-> (!  [ &_22 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s3)
          | s3 = bb5 ]
           ]
         ]
      
    | bb8 = s0 [ s0 = {[#"../sum.rs" 8 4 8 67] false} any ] 
    | bb10 = s0 [ s0 =  [ &_0 <- sum ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & n : uint32 = n
    | & sum : uint32 = any_l () : uint32
    | & iter : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 = any_l () : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32
    | & _7 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 = any_l () : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) = any_l () : Snapshot.snap_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & _17 : Core_Option_Option_Type.t_option uint32 = any_l () : Core_Option_Option_Type.t_option uint32
    | & _18 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) = any_l () : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    | & _19 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) = any_l () : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    | & __creusot_proc_iter_elem : uint32 = any_l () : uint32
    | & _22 : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & i : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../sum.rs" 5 10 5 38] UInt32.to_int result
      = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2}
      (! return' {result}) ]
    
end
