module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'}) ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_100doors__f [#"100doors.rs" 18 0 18 10]
  let%span s100doors0 = "100doors.rs" 19 40 19 45
  let%span s100doors1 = "100doors.rs" 19 47 19 50
  let%span s100doors2 = "100doors.rs" 21 16 21 17
  let%span s100doors3 = "100doors.rs" 21 19 21 22
  let%span s100doors4 = "100doors.rs" 20 4 20 41
  let%span s100doors5 = "100doors.rs" 20 4 20 41
  let%span s100doors6 = "100doors.rs" 20 4 20 41
  let%span s100doors7 = "100doors.rs" 20 16 20 39
  let%span s100doors8 = "100doors.rs" 20 4 20 41
  let%span s100doors9 = "100doors.rs" 23 20 23 54
  let%span s100doors10 = "100doors.rs" 24 20 24 43
  let%span s100doors11 = "100doors.rs" 25 22 25 25
  let%span s100doors12 = "100doors.rs" 26 52 26 53
  let%span s100doors13 = "100doors.rs" 26 29 26 30
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 183 22 183 41
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 184 12 184 78
  let%span siter16 = "../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span srange17 = "../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span siter19 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span svec23 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span svec26 = "../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span sops27 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span siter28 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter29 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange30 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange31 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange32 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange33 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange34 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange35 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange36 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange37 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum38 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span srange39 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve40 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel41 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice43 = "../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span smodel44 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 140 8 140 96
  
  use prelude.prelude.Borrow
  
  predicate inv'10 (_1 : borrowed bool)
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed bool [inv'10 x] . inv'10 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'9 (_1 : borrowed (Vec'0.t_Vec bool (Global'0.t_Global)))
  
  axiom inv_axiom'9 [@rewrite] : forall x : borrowed (Vec'0.t_Vec bool (Global'0.t_Global)) [inv'9 x] . inv'9 x = true
  
  predicate inv'8 (_1 : bool)
  
  axiom inv_axiom'8 [@rewrite] : forall x : bool [inv'8 x] . inv'8 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  predicate inv'7 (_1 : usize)
  
  axiom inv_axiom'7 [@rewrite] : forall x : usize [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : Vec'0.t_Vec bool (Global'0.t_Global))
  
  axiom inv_axiom'6 [@rewrite] : forall x : Vec'0.t_Vec bool (Global'0.t_Global) [inv'6 x] . inv'6 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'5 (_1 : Option'0.t_Option usize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Option'0.t_Option usize [inv'5 x] . inv'5 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'4 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'4 x] . inv'4 x = true
  
  predicate inv'3 (_1 : Vec'0.t_Vec bool (Global'0.t_Global))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Vec'0.t_Vec bool (Global'0.t_Global) [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : bool [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#snum38] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#srange17] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  predicate inv'1 (_1 : Range'0.t_Range usize)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange32] inv'1 a)
   -> ([%#srange33] inv'1 b)
   -> ([%#srange34] inv'1 c)
   -> ([%#srange35] produces'0 a ab b)
   -> ([%#srange36] produces'0 b bc c)  -> ([%#srange37] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#srange30] inv'1 self)
   -> ([%#srange31] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Range'0.t_Range usize [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed bool) =
    [%#sresolve40] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed bool) =
    resolve'3 _1
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq bool) (fin : Seq.seq bool) =
    [%#sslice45] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec bool (Global'0.t_Global)) : Seq.seq bool
  
  axiom view'0_spec : forall self : Vec'0.t_Vec bool (Global'0.t_Global) . [%#svec18] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq bool) (out : bool) =
    [%#sslice43] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq bool) =
    [%#sslice42] UIntSize.to_int self < Seq.length seq
  
  function view'2 (self : borrowed (Vec'0.t_Vec bool (Global'0.t_Global))) : Seq.seq bool =
    [%#smodel44] view'0 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec bool (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed bool))= {[@expl:precondition] inv'7 index}
    {[@expl:precondition] inv'9 self}
    {[@expl:precondition] [%#svec22] in_bounds'0 index (view'2 self)}
    any
    [ return' (result:borrowed bool)-> {inv'10 result}
      {[%#svec26] Seq.length (view'0 self.final) = Seq.length (view'2 self)}
      {[%#svec25] resolve_elswhere'0 index (view'2 self) (view'0 self.final)}
      {[%#svec24] has_value'0 index (view'0 self.final) result.final}
      {[%#svec23] has_value'0 index (view'2 self) result.current}
      (! return' {result}) ]
    
  
  function view'1 (self : Vec'0.t_Vec bool (Global'0.t_Global)) : Seq.seq bool =
    [%#smodel41] view'0 self
  
  let rec index'0 (self:Vec'0.t_Vec bool (Global'0.t_Global)) (index:usize) (return'  (ret:bool))= {[@expl:precondition] inv'7 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [%#svec20] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:bool)-> {inv'8 result} {[%#svec21] has_value'0 index (view'1 self) result} (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (Range'0.t_Range usize)) =
    [%#sresolve40] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Range'0.t_Range usize)) =
    resolve'2 _1
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#srange39] resolve'2 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {inv'5 result}
      {[%#siter19] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#siter29] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#siter28] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter16] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {inv'1 result}
      {[%#siter16] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec bool (Global'0.t_Global)) (ix : int) : bool =
    [%#sops27] Seq.get (view'0 self) ix
  
  let rec from_elem'0 (elem:bool) (n:usize) (return'  (ret:Vec'0.t_Vec bool (Global'0.t_Global)))= {[@expl:precondition] inv'2 elem}
    any
    [ return' (result:Vec'0.t_Vec bool (Global'0.t_Global))-> {inv'3 result}
      {[%#svec15] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#svec14] Seq.length (view'0 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = from_elem'0 {[%#s100doors0] false} {[%#s100doors1] (100 : usize)}
          (fun (_ret':Vec'0.t_Vec bool (Global'0.t_Global)) ->  [ &door_open <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_3 <- Range'0.C_Range ([%#s100doors2] (1 : usize)) ([%#s100doors3] (101 : usize)) ] s1
      | s1 = into_iter'0 {_3} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s100doors4] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#s100doors5] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] [%#s100doors7] Seq.length (view'0 door_open) = 100}
        {[@expl:loop invariant] [%#s100doors6] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s100doors6] inv'1 iter}
        {[@expl:loop invariant] [%#s100doors6] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_15 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_15.current} {Borrow.get_id _15}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_14 <- _ret' ] 
                 [ &_15 <- { _15 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_14} (fun (_ret':Option'0.t_Option usize) ->  [ &_13 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _15}- s1
          | s1 = any
            [ br0 -> {_13 = Option'0.C_None } (! bb11) | br1 (a:usize)-> {_13 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = Option'0.v_Some <usize> {_13} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_18 <- [%#s100doors8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _18 ] s1
          | s1 =  [ &pass <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &door <- pass ] s3
          | s3 = bb14 ]
          
        | bb14 = bb15
        | bb15 = bb15
          [ bb15 = {[@expl:loop invariant] [%#s100doors10] Seq.length (view'0 door_open) = 100}
            {[@expl:loop invariant] [%#s100doors9] 1 <= UIntSize.to_int door
            /\ UIntSize.to_int door <= 100 + UIntSize.to_int pass}
            (! s0) [ s0 = bb16 ] 
            [ bb16 = s0
              [ s0 = UIntSize.le {door} {[%#s100doors11] (100 : usize)} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s1)
              | s1 = any [ br0 -> {_24 = false} (! bb20) | br1 -> {_24} (! bb17) ]  ]
              
            | bb17 = s0
              [ s0 = UIntSize.sub {door} {[%#s100doors12] (1 : usize)} (fun (_ret':usize) ->  [ &_29 <- _ret' ] s1)
              | s1 = index'0 {door_open} {_29} (fun (_ret':bool) ->  [ &_27 <- _ret' ] s2)
              | s2 = bb18 ]
              
            | bb18 = s0
              [ s0 = Borrow.borrow_mut <Vec'0.t_Vec bool (Global'0.t_Global)> {door_open}
                  (fun (_ret':borrowed (Vec'0.t_Vec bool (Global'0.t_Global))) ->
                     [ &_32 <- _ret' ] 
                     [ &door_open <- _ret'.final ] 
                    s1)
              | s1 = UIntSize.sub {door} {[%#s100doors13] (1 : usize)} (fun (_ret':usize) ->  [ &_33 <- _ret' ] s2)
              | s2 = index_mut'0 {_32} {_33} (fun (_ret':borrowed bool) ->  [ &_31 <- _ret' ] s3)
              | s3 = bb19 ]
              
            | bb19 = s0
              [ s0 =  [ &_31 <- { _31 with current = (not _27) ; } ] s1
              | s1 = -{resolve'1 _31}- s2
              | s2 = UIntSize.add {door} {pass} (fun (_ret':usize) ->  [ &door <- _ret' ] s3)
              | s3 = bb15 ]
               ]
             ]
          
        | bb20 = bb6 ]
         ]
      
    | bb11 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & door_open : Vec'0.t_Vec bool (Global'0.t_Global) = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _3 : Range'0.t_Range usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _13 : Option'0.t_Option usize = any_l ()
    | & _14 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _15 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _18 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & pass : usize = any_l ()
    | & door : usize = any_l ()
    | & _24 : bool = any_l ()
    | & _27 : bool = any_l ()
    | & _29 : usize = any_l ()
    | & _31 : borrowed bool = any_l ()
    | & _32 : borrowed (Vec'0.t_Vec bool (Global'0.t_Global)) = any_l ()
    | & _33 : usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
