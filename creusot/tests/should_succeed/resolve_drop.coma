module M_resolve_drop__f [#"resolve_drop.rs" 4 0 4 10]
  let%span sresolve_drop0 = "resolve_drop.rs" 5 16 5 18
  let%span sresolve_drop1 = "resolve_drop.rs" 7 11 7 12
  let%span sresolve_drop2 = "resolve_drop.rs" 8 18 8 26
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sresolve_drop0] (12 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_3 <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 =  [ &b <- _3 ] s3
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Int32.add {b.current} {[%#sresolve_drop1] (1 : int32)}
          (fun (_ret':int32) ->  [ &b <- { b with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 b}- s2
      | s2 = {[@expl:assertion] [%#sresolve_drop2] Int32.to_int x = 13} s3
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & b : borrowed int32 = any_l ()
    | & _3 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
