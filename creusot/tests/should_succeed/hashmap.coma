module T_hashmap__List [#"hashmap.rs" 9 0 9 12]
  type t_List 't =
    | C_Nil
    | C_Cons 't (t_List 't)
  
  let rec v_Nil < 't > (input:t_List 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} (! {false} any) ]
    
  
  let rec v_Cons < 't > (input:t_List 't) (ret  (field_0:'t) (field_1:t_List 't))= any
    [ good (field_0:'t) (field_1:t_List 't)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : 't, field_1 : t_List 't [C_Cons field_0 field_1 : t_List 't] . C_Cons field_0 field_1
      <> input}
      (! {false}
      any) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_hashmap__qyi9060063638777358169__hash [#"hashmap.rs" 60 4 60 25] (* <usize as Hash> *)
  let%span shashmap0 = "hashmap.rs" 59 14 59 58
  let%span smodel1 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span shashmap2 = "hashmap.rs" 66 20 66 21
  let%span snum3 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  use prelude.prelude.Int
  
  function hash_log'0 [#"hashmap.rs" 65 4 65 30] (x : int) : int =
    [%#shashmap2] x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#snum3] UIntSize.to_int self
  
  use prelude.prelude.Borrow
  
  function deep_model'0 (self : usize) : int =
    [%#smodel1] deep_model'1 self
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  meta "compute_max_steps" 1000000
  
  let rec hash (self:usize) (return'  (ret:uint64))= (! bb0
    [ bb0 = s0
      [ s0 = UInt64.of_int {UIntSize.to_int self} (fun (_res:uint64) ->  [ &_0 <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : uint64 = any_l () | & self : usize = self ] 
    [ return' (result:uint64)-> {[@expl:postcondition] [%#shashmap0] UInt64.to_int result
      = hash_log'0 (deep_model'0 self)}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_hashmap__MyHashMap [#"hashmap.rs" 70 0 70 22]
  use T_alloc__alloc__Global as Global'0
  
  use T_hashmap__List as List'0
  
  use T_alloc__vec__Vec as Vec'0
  
  type t_MyHashMap 'k 'v =
    | C_MyHashMap (Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global))
  
  let rec t_MyHashMap < 'k > < 'v > (input:t_MyHashMap 'k 'v) (ret  (buckets:Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global)))= any
    [ good (buckets:Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global))-> {C_MyHashMap buckets = input}
      (! ret {buckets}) ]
    
  
  function t_MyHashMap__buckets (self : t_MyHashMap 'k 'v) : Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global) =
    match self with
      | C_MyHashMap a -> a
      end
end
module M_hashmap__qyi7664122466964245986__new [#"hashmap.rs" 116 4 116 46] (* MyHashMap<K, V> *)
  type k
  
  type v
  
  let%span shashmap0 = "hashmap.rs" 114 15 114 24
  let%span shashmap1 = "hashmap.rs" 115 4 115 64
  let%span shashmap2 = "hashmap.rs" 116 31 116 46
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 183 22 183 41
  let%span svec4 = "../../../creusot-contracts/src/std/vec.rs" 184 12 184 78
  let%span shashmap5 = "hashmap.rs" 80 8 80 33
  let%span svec6 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops7 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span shashmap8 = "hashmap.rs" 86 8 86 53
  let%span shashmap9 = "hashmap.rs" 31 12 34 13
  let%span shashmap10 = "hashmap.rs" 91 20 91 66
  let%span shashmap11 = "hashmap.rs" 106 8 109 9
  let%span svec12 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span shashmap13 = "hashmap.rs" 96 8 98 9
  let%span shashmap14 = "hashmap.rs" 41 12 44 13
  let%span sboxed15 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq16 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  use T_hashmap__List as List'0
  
  predicate inv'4 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate inv'1 (_1 : List'0.t_List (k, v))
  
  predicate invariant'2 (self : List'0.t_List (k, v)) =
    [%#sboxed15] inv'1 self
  
  axiom inv_axiom'4 [@rewrite] : forall x : List'0.t_List (k, v) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'7 (_1 : v)
  
  predicate inv'6 (_1 : k)
  
  predicate inv'3 (_1 : (k, v))
  
  axiom inv_axiom'3 [@rewrite] : forall x : (k, v) [inv'3 x] . inv'3 x = (let (a, b) = x in inv'6 a /\ inv'7 b)
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
  
  axiom view'1_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#svec6] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'1 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#svec12] inv'5 (view'1 self)
  
  predicate inv'2 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'2 x] . inv'2 x
  = invariant'1 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : List'0.t_List (k, v) [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'3 a_0 /\ inv'4 a_1
    end
  
  use T_core__option__Option as Option'0
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#shashmap9] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#shashmap14] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  function bucket_ix'0 [#"hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#shashmap10] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'1 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  predicate good_bucket'0 [#"hashmap.rs" 95 4 95 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#shashmap13] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#sops7] Seq.get (view'1 self) ix
  
  predicate invariant'0 [#"hashmap.rs" 105 4 105 30] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#shashmap11] 0 < Seq.length (view'1 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  predicate inv'0 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'2 buckets
    end)
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  function bucket'0 [#"hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#shashmap8] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function view'0 [#"hashmap.rs" 79 4 79 33] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#shashmap5] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  use prelude.prelude.Intrinsic
  
  let rec from_elem'0 (elem:List'0.t_List (k, v)) (n:usize) (return'  (ret:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)))= {[@expl:precondition] inv'1 elem}
    any
    [ return' (result:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))-> {inv'2 result}
      {[%#svec4] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#svec3] Seq.length (view'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec new (size:usize) (return'  (ret:MyHashMap'0.t_MyHashMap k v))= {[%#shashmap0] 0 < UIntSize.to_int size}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_6 <- List'0.C_Nil ] s1
      | s1 = from_elem'0 {_6} {size}
          (fun (_ret':Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &res <- MyHashMap'0.C_MyHashMap _5 ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    )
    [ & _0 : MyHashMap'0.t_MyHashMap k v = any_l ()
    | & size : usize = size
    | & res : MyHashMap'0.t_MyHashMap k v = any_l ()
    | & _5 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) = any_l ()
    | & _6 : List'0.t_List (k, v) = any_l () ]
    
    [ return' (result:MyHashMap'0.t_MyHashMap k v)-> {[@expl:postcondition] [%#shashmap2] inv'0 result}
      {[@expl:postcondition] [%#shashmap1] forall i : t_DeepModelTy'0 . Map.get (view'0 result) i = Option'0.C_None}
      (! return' {result}) ]
    
end
module M_hashmap__qyi7664122466964245986__add [#"hashmap.rs" 122 4 122 41] (* MyHashMap<K, V> *)
  type k
  
  type v
  
  let%span shashmap0 = "hashmap.rs" 124 23 124 41
  let%span shashmap1 = "hashmap.rs" 126 27 126 55
  let%span shashmap2 = "hashmap.rs" 128 20 128 35
  let%span shashmap3 = "hashmap.rs" 130 20 130 26
  let%span shashmap4 = "hashmap.rs" 131 20 131 52
  let%span shashmap5 = "hashmap.rs" 130 8 130 28
  let%span shashmap6 = "hashmap.rs" 135 20 135 44
  let%span shashmap7 = "hashmap.rs" 122 20 122 24
  let%span shashmap8 = "hashmap.rs" 122 26 122 29
  let%span shashmap9 = "hashmap.rs" 122 34 122 37
  let%span shashmap10 = "hashmap.rs" 121 4 121 124
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span shashmap12 = "hashmap.rs" 52 13 52 17
  let%span shashmap13 = "hashmap.rs" 51 14 51 58
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span shashmap19 = "hashmap.rs" 96 8 98 9
  let%span shashmap20 = "hashmap.rs" 31 12 34 13
  let%span shashmap21 = "hashmap.rs" 41 12 44 13
  let%span scmp22 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span shashmap23 = "hashmap.rs" 80 8 80 33
  let%span smodel24 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span smodel25 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span smodel26 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span sslice27 = "../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice28 = "../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span svec29 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sslice30 = "../../../creusot-contracts/src/std/slice.rs" 140 8 140 96
  let%span sresolve31 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span shashmap32 = "hashmap.rs" 91 20 91 66
  let%span shashmap33 = "hashmap.rs" 86 8 86 53
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant35 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed36 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sops37 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sinvariant38 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq39 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span shashmap40 = "hashmap.rs" 106 8 109 9
  
  use T_alloc__alloc__Global as Global'0
  
  use T_hashmap__List as List'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  use T_core__option__Option as Option'0
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#shashmap20] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#shashmap21] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  use int.EuclideanDivision
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'4 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
  
  axiom view'4_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#svec29] Seq.length (view'4 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  function bucket_ix'0 [#"hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#shashmap32] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'4 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  predicate good_bucket'0 [#"hashmap.rs" 95 4 95 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#shashmap19] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#sops37] Seq.get (view'4 self) ix
  
  predicate invariant'11 [#"hashmap.rs" 105 4 105 30] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#shashmap40] 0 < Seq.length (view'4 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'4 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  predicate inv'16 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv_axiom'14 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'16 x] . inv'16 x
  = (invariant'11 x
  /\ match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'0 buckets
    end)
  
  predicate inv'5 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#sseq39] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'15 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'15 x] . inv'15 x = invariant'10 x
  
  predicate inv'4 (_1 : v)
  
  predicate inv'3 (_1 : k)
  
  predicate inv'14 (_1 : (k, v))
  
  axiom inv_axiom'12 [@rewrite] : forall x : (k, v) [inv'14 x] . inv'14 x = (let (a, b) = x in inv'3 a /\ inv'4 b)
  
  predicate inv'13 (_1 : usize)
  
  axiom inv_axiom'11 [@rewrite] : forall x : usize [inv'13 x] . inv'13 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) =
    [%#sinvariant35] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'12 (_1 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)))
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) [inv'12 x] . inv'12 x
  = invariant'9 x
  
  predicate invariant'8 (self : k) =
    [%#sinvariant38] inv'3 self
  
  predicate inv'11 (_1 : k)
  
  axiom inv_axiom'9 [@rewrite] : forall x : k [inv'11 x] . inv'11 x = invariant'8 x
  
  predicate invariant'7 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#sinvariant38] inv'0 self
  
  predicate inv'10 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'10 x] . inv'10 x
  = invariant'7 x
  
  predicate invariant'6 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#sinvariant35] inv'16 self.current /\ inv'16 self.final
  
  predicate inv'9 (_1 : borrowed (MyHashMap'0.t_MyHashMap k v))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (MyHashMap'0.t_MyHashMap k v) [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'5 (self : borrowed (List'0.t_List (k, v))) =
    [%#sinvariant35] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'8 (_1 : borrowed (List'0.t_List (k, v)))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (List'0.t_List (k, v)) [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'4 (self : borrowed v) =
    [%#sinvariant35] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed v)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed v [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'3 (self : borrowed k) =
    [%#sinvariant35] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'6 (_1 : borrowed k)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed k [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate inv'1 (_1 : List'0.t_List (k, v))
  
  predicate invariant'2 (self : List'0.t_List (k, v)) =
    [%#sboxed36] inv'1 self
  
  axiom inv_axiom'3 [@rewrite] : forall x : List'0.t_List (k, v) [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (List'0.t_List (k, v))) =
    [%#sinvariant35] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (List'0.t_List (k, v)))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (List'0.t_List (k, v)) [inv'2 x] . inv'2 x = invariant'1 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : List'0.t_List (k, v) [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'14 a_0 /\ inv'5 a_1
    end
  
  predicate invariant'0 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#svec34] inv'15 (view'4 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'0 x] . inv'0 x
  = invariant'0 x
  
  use prelude.prelude.Mapping
  
  function bucket'0 [#"hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#shashmap33] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function view'0 [#"hashmap.rs" 79 4 79 33] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#shashmap23] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  function view'1 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#smodel24] view'0 self.current
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'9 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#sresolve31] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    resolve'9 _1
  
  predicate resolve'8 (self : borrowed (List'0.t_List (k, v))) =
    [%#sresolve31] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (List'0.t_List (k, v))) =
    resolve'8 _1
  
  predicate resolve'7 (self : borrowed v) =
    [%#sresolve31] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed v) =
    resolve'7 _1
  
  predicate resolve'6 (self : borrowed k) =
    [%#sresolve31] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed k) =
    resolve'6 _1
  
  function deep_model'1 (self : k) : t_DeepModelTy'0 =
    [%#smodel26] deep_model'0 self
  
  let rec eq'0 (self:k) (other:k) (return'  (ret:bool))= {[@expl:precondition] inv'11 other}
    {[@expl:precondition] inv'11 self}
    any [ return' (result:bool)-> {[%#scmp22] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'5 (self : borrowed (List'0.t_List (k, v))) =
    [%#sresolve31] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (List'0.t_List (k, v))) =
    resolve'5 _1
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (List'0.t_List (k, v))) (fin : Seq.seq (List'0.t_List (k, v)))
    
   =
    [%#sslice30] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) (out : List'0.t_List (k, v))
    
   =
    [%#sslice28] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) =
    [%#sslice27] UIntSize.to_int self < Seq.length seq
  
  function view'3 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#smodel24] view'4 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (List'0.t_List (k, v))))= {[@expl:precondition] inv'13 index}
    {[@expl:precondition] inv'12 self}
    {[@expl:precondition] [%#svec14] in_bounds'0 index (view'3 self)}
    any
    [ return' (result:borrowed (List'0.t_List (k, v)))-> {inv'2 result}
      {[%#svec18] Seq.length (view'4 self.final) = Seq.length (view'3 self)}
      {[%#svec17] resolve_elswhere'0 index (view'3 self) (view'4 self.final)}
      {[%#svec16] has_value'0 index (view'4 self.final) result.final}
      {[%#svec15] has_value'0 index (view'3 self) result.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  let rec hash'0 (self:k) (return'  (ret:uint64))= {[@expl:precondition] [%#shashmap12] inv'11 self}
    any
    [ return' (result:uint64)-> {[%#shashmap13] UInt64.to_int result = hash_log'0 (deep_model'1 self)}
      (! return' {result}) ]
    
  
  function view'2 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v)) =
    [%#smodel25] view'4 self
  
  let rec len'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'10 self}
    any
    [ return' (result:usize)-> {[%#svec11] UIntSize.to_int result = Seq.length (view'2 self)} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec add (self:borrowed (MyHashMap'0.t_MyHashMap k v)) (key:k) (val':v) (return'  (ret:()))= {[%#shashmap9] inv'4 val'}
    {[%#shashmap8] inv'3 key}
    {[%#shashmap7] inv'9 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#shashmap0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &length <- _ret' ] s1))
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = hash'0 {key} (fun (_ret':uint64) ->  [ &_11 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UIntSize.of_int {UInt64.to_int _11} (fun (_res:usize) ->  [ &_10 <- _res ] s1)
      | s1 =  [ &_13 <- length ] s2
      | s2 = UIntSize.eq {_13} {[%#shashmap1] (0 : usize)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s3)
      | s3 = {[@expl:remainder by zero] [%#shashmap1] not _14} s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = UIntSize.rem {_10} {_13} (fun (_ret':usize) ->  [ &index <- _ret' ] s1)
      | s1 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            {inv'0 rbuckets'0}
            Borrow.borrow_final
              <Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)>
              {rbuckets'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) ->
                 [ &_18 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = MyHashMap'0.C_MyHashMap _ret'.final ; } ] 
                s2))
      | s2 = index_mut'0 {_18} {index} (fun (_ret':borrowed (List'0.t_List (k, v))) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {inv'1 _17.current}
        Borrow.borrow_final <List'0.t_List (k, v)> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (List'0.t_List (k, v))) ->
             [ &_16 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_17 <- { _17 with current = _ret'.final ; } ] 
            s1)
      | s1 = {inv'1 _16.current}
        Borrow.borrow_final <List'0.t_List (k, v)> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (List'0.t_List (k, v))) ->
             [ &l <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_16 <- { _16 with current = _ret'.final ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'2 _16} s3
      | s3 = -{resolve'0 _16}- s4
      | s4 =  [ &old_l <- [%#shashmap2] Snapshot.new l ] s5
      | s5 = bb6 ]
      
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#shashmap5] (forall i : t_DeepModelTy'0 . get'0 l.current i = get'0 l.final i
        \/ i = deep_model'0 key)
        /\ no_double_binding'0 l.final  -> no_double_binding'0 (Snapshot.inner old_l).final}
        {[@expl:loop invariant] [%#shashmap6] no_double_binding'0 l.current}
        {[@expl:loop invariant] [%#shashmap5] forall i : t_DeepModelTy'0 . get'0 l.final i = get'0 l.current i
         -> get'0 (Snapshot.inner old_l).final i = get'0 (Snapshot.inner old_l).current i}
        {[@expl:loop invariant] [%#shashmap5] get'0 l.final (deep_model'0 key) = Option'0.C_Some val'
         -> get'0 (Snapshot.inner old_l).final (deep_model'0 key) = Option'0.C_Some val'}
        {[@expl:loop invariant] [%#shashmap5] good_bucket'0 (Snapshot.inner old_self).current l.final (UIntSize.to_int index)
         -> good_bucket'0 (Snapshot.inner old_self).current (Snapshot.inner old_l).final (UIntSize.to_int index)}
        {[@expl:loop invariant] [%#shashmap4] good_bucket'0 (Snapshot.inner old_self).current l.current (UIntSize.to_int index)}
        {[@expl:loop invariant] [%#shashmap3] inv'2 l}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = any
          [ br0 -> {l.current = List'0.C_Nil } (! bb14)
          | br1 (a:(k, v)) (b:List'0.t_List (k, v))-> {l.current = List'0.C_Cons a b} (! bb9) ]
          
        | bb9 = bb10
        | bb10 = s0
          [ s0 = List'0.v_Cons <(k, v)> {l.current}
              (fun (r0'0:(k, v)) (r1'0:List'0.t_List (k, v)) ->
                {inv'3 (let (r'0, _) = r0'0 in r'0)}
                Borrow.borrow_final
                  <k>
                  {let (r'0, _) = r0'0 in r'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id l) 1) 1}
                  (fun (_ret':borrowed k) ->
                     [ &k <- _ret' ] 
                    -{inv'3 _ret'.final}-
                     [ &l <- { l with current = List'0.C_Cons (let (_, r'2) = r0'0 in (_ret'.final, r'2)) r1'0 ; } ] 
                    s1))
          | s1 = List'0.v_Cons <(k, v)> {l.current}
              (fun (r0'1:(k, v)) (r1'1:List'0.t_List (k, v)) ->
                {inv'4 (let (_, r'3) = r0'1 in r'3)}
                Borrow.borrow_final
                  <v>
                  {let (_, r'3) = r0'1 in r'3}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id l) 1) 2}
                  (fun (_ret':borrowed v) ->
                     [ &v <- _ret' ] 
                    -{inv'4 _ret'.final}-
                     [ &l <- { l with current = List'0.C_Cons (let (r'4, _) = r0'1 in (r'4, _ret'.final)) r1'1 ; } ] 
                    s2))
          | s2 = List'0.v_Cons <(k, v)> {l.current}
              (fun (r0'2:(k, v)) (r1'2:List'0.t_List (k, v)) ->
                {inv'5 r1'2}
                Borrow.borrow_final <List'0.t_List (k, v)> {r1'2} {Borrow.inherit_id (Borrow.get_id l) 2}
                  (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                     [ &tl <- _ret' ] 
                    -{inv'5 _ret'.final}-
                     [ &l <- { l with current = List'0.C_Cons r0'2 _ret'.final ; } ] 
                    s3))
          | s3 =  [ &tl1 <- tl ] s4
          | s4 = eq'0 {k.current} {key} (fun (_ret':bool) ->  [ &_37 <- _ret' ] s5)
          | s5 = bb11 ]
          
        | bb11 = s0
          [ s0 = {[@expl:type invariant] inv'6 k} s1
          | s1 = -{resolve'1 k}- s2
          | s2 = any [ br0 -> {_37 = false} (! bb13) | br1 -> {_37} (! bb12) ]  ]
          
        | bb13 = s0
          [ s0 = {[@expl:type invariant] inv'7 v} s1
          | s1 = -{resolve'2 v}- s2
          | s2 = {inv'1 tl1.current}
            Borrow.borrow_final <List'0.t_List (k, v)> {tl1.current} {Borrow.get_id tl1}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_43 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &tl1 <- { tl1 with current = _ret'.final ; } ] 
                s3)
          | s3 = {inv'1 _43.current}
            Borrow.borrow_final <List'0.t_List (k, v)> {_43.current} {Borrow.get_id _43}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_42 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_43 <- { _43 with current = _ret'.final ; } ] 
                s4)
          | s4 = {[@expl:type invariant] inv'2 l} s5
          | s5 = -{resolve'0 l}- s6
          | s6 =  [ &l <- _42 ] s7
          | s7 = {[@expl:type invariant] inv'2 _43} s8
          | s8 = -{resolve'0 _43}- s9
          | s9 = {[@expl:type invariant] inv'8 tl1} s10
          | s10 = -{resolve'3 tl1}- s11
          | s11 = bb7 ]
           ]
         ]
      
    | bb14 = s0 [ s0 =  [ &_48 <- (key, val') ] s1 | s1 =  [ &_52 <- List'0.C_Nil ] s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_47 <- List'0.C_Cons _48 _52 ] s1 | s1 = bb16 ] 
    | bb16 = bb17
    | bb17 = s0
      [ s0 = {[@expl:type invariant] match l with
          | {current = x'0} -> inv'1 x'0
          | _ -> true
          end}
        s1
      | s1 =  [ &l <- { l with current = _47 ; } ] s2
      | s2 = {[@expl:type invariant] inv'2 l} s3
      | s3 = -{resolve'0 l}- s4
      | s4 = {[@expl:type invariant] inv'2 _17} s5
      | s5 = -{resolve'0 _17}- s6
      | s6 = {[@expl:type invariant] inv'9 self} s7
      | s7 = -{resolve'4 self}- s8
      | s8 = bb19 ]
      
    | bb19 = bb20
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'8 tl1} s1
      | s1 = -{resolve'3 tl1}- s2
      | s2 =  [ &v <- { v with current = val' ; } ] s3
      | s3 = {[@expl:type invariant] inv'7 v} s4
      | s4 = -{resolve'2 v}- s5
      | s5 = {[@expl:type invariant] inv'2 _17} s6
      | s6 = -{resolve'0 _17}- s7
      | s7 = {[@expl:type invariant] inv'2 l} s8
      | s8 = -{resolve'0 l}- s9
      | s9 = {[@expl:type invariant] inv'9 self} s10
      | s10 = -{resolve'4 self}- s11
      | s11 = bb20 ]
      
    | bb20 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (MyHashMap'0.t_MyHashMap k v) = self
    | & key : k = key
    | & val' : v = val'
    | & old_self : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v)) = any_l ()
    | & length : usize = any_l ()
    | & index : usize = any_l ()
    | & _10 : usize = any_l ()
    | & _11 : uint64 = any_l ()
    | & _13 : usize = any_l ()
    | & _14 : bool = any_l ()
    | & l : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _16 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _17 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _18 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) = any_l ()
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_List (k, v))) = any_l ()
    | & k : borrowed k = any_l ()
    | & v : borrowed v = any_l ()
    | & tl : borrowed (List'0.t_List (k, v)) = any_l ()
    | & tl1 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _37 : bool = any_l ()
    | & _42 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _43 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _47 : List'0.t_List (k, v) = any_l ()
    | & _48 : (k, v) = any_l ()
    | & _52 : List'0.t_List (k, v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shashmap10] forall i : t_DeepModelTy'0 . Map.get (view'0 self.final) i
      = (if i = deep_model'0 key then Option'0.C_Some val' else Map.get (view'1 self) i)}
      (! return' {result}) ]
    
end
module M_hashmap__qyi7664122466964245986__get [#"hashmap.rs" 154 4 154 43] (* MyHashMap<K, V> *)
  type k
  
  type v
  
  let%span shashmap0 = "hashmap.rs" 155 27 155 67
  let%span shashmap1 = "hashmap.rs" 158 20 158 26
  let%span shashmap2 = "hashmap.rs" 159 20 159 101
  let%span shashmap3 = "hashmap.rs" 154 16 154 20
  let%span shashmap4 = "hashmap.rs" 154 22 154 25
  let%span shashmap5 = "hashmap.rs" 150 14 153 5
  let%span shashmap6 = "hashmap.rs" 154 33 154 43
  let%span shashmap7 = "hashmap.rs" 52 13 52 17
  let%span shashmap8 = "hashmap.rs" 51 14 51 58
  let%span svec9 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span svec10 = "../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span shashmap12 = "hashmap.rs" 86 8 86 53
  let%span shashmap13 = "hashmap.rs" 31 12 34 13
  let%span scmp14 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel15 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span smodel16 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span sslice17 = "../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice18 = "../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span shashmap19 = "hashmap.rs" 91 20 91 66
  let%span sops20 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span shashmap21 = "hashmap.rs" 80 8 80 33
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sinvariant23 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span shashmap24 = "hashmap.rs" 106 8 109 9
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span shashmap26 = "hashmap.rs" 96 8 98 9
  let%span shashmap27 = "hashmap.rs" 41 12 44 13
  let%span sboxed28 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq29 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  use T_hashmap__List as List'0
  
  predicate inv'12 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'14 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv_axiom'12 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'14 x] . inv'14 x = invariant'8 x
  
  predicate inv'8 (_1 : List'0.t_List (k, v))
  
  predicate invariant'7 (self : List'0.t_List (k, v)) =
    [%#sboxed28] inv'8 self
  
  axiom inv_axiom'11 [@rewrite] : forall x : List'0.t_List (k, v) [inv'12 x] . inv'12 x = invariant'7 x
  
  predicate inv'13 (_1 : v)
  
  predicate inv'2 (_1 : k)
  
  predicate inv'11 (_1 : (k, v))
  
  axiom inv_axiom'10 [@rewrite] : forall x : (k, v) [inv'11 x] . inv'11 x = (let (a, b) = x in inv'2 a /\ inv'13 b)
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'3 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
  
  axiom view'3_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#svec22] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'6 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#svec25] inv'14 (view'3 self)
  
  predicate inv'10 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv_axiom'9 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'10 x] . inv'10 x
  = invariant'6 x
  
  use T_core__option__Option as Option'0
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#shashmap13] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#shashmap27] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  function bucket_ix'0 [#"hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#shashmap19] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  predicate good_bucket'0 [#"hashmap.rs" 95 4 95 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#shashmap26] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#sops20] Seq.get (view'3 self) ix
  
  predicate invariant'5 [#"hashmap.rs" 105 4 105 30] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#shashmap24] 0 < Seq.length (view'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  predicate inv'9 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv_axiom'8 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'9 x] . inv'9 x
  = (invariant'5 x
  /\ match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'10 buckets
    end)
  
  axiom inv_axiom'7 [@rewrite] : forall x : List'0.t_List (k, v) [inv'8 x] . inv'8 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'11 a_0 /\ inv'12 a_1
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : v) =
    [%#sinvariant23] inv'13 self
  
  predicate inv'7 (_1 : v)
  
  axiom inv_axiom'6 [@rewrite] : forall x : v [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'6 (_1 : usize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  predicate invariant'3 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#sinvariant23] inv'10 self
  
  predicate inv'5 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv_axiom'4 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'5 x] . inv'5 x
  = invariant'3 x
  
  predicate invariant'2 (self : k) =
    [%#sinvariant23] inv'2 self
  
  predicate inv'4 (_1 : k)
  
  axiom inv_axiom'3 [@rewrite] : forall x : k [inv'4 x] . inv'4 x = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option v)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option v [inv'3 x] . inv'3 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'1 (self : MyHashMap'0.t_MyHashMap k v) =
    [%#sinvariant23] inv'9 self
  
  predicate inv'1 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : List'0.t_List (k, v)) =
    [%#sinvariant23] inv'8 self
  
  predicate inv'0 (_1 : List'0.t_List (k, v))
  
  axiom inv_axiom'0 [@rewrite] : forall x : List'0.t_List (k, v) [inv'0 x] . inv'0 x = invariant'0 x
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  function bucket'0 [#"hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#shashmap12] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function view'2 [#"hashmap.rs" 79 4 79 33] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#shashmap21] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  function view'0 (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#smodel15] view'2 self
  
  use prelude.prelude.Intrinsic
  
  function deep_model'1 (self : k) : t_DeepModelTy'0 =
    [%#smodel16] deep_model'0 self
  
  let rec eq'0 (self:k) (other:k) (return'  (ret:bool))= {[@expl:precondition] inv'4 other}
    {[@expl:precondition] inv'4 self}
    any [ return' (result:bool)-> {[%#scmp14] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) (out : List'0.t_List (k, v))
    
   =
    [%#sslice18] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) =
    [%#sslice17] UIntSize.to_int self < Seq.length seq
  
  function view'1 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v)) =
    [%#smodel15] view'3 self
  
  let rec index'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (index:usize) (return'  (ret:List'0.t_List (k, v)))= {[@expl:precondition] inv'6 index}
    {[@expl:precondition] inv'5 self}
    {[@expl:precondition] [%#svec10] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:List'0.t_List (k, v))-> {inv'0 result}
      {[%#svec11] has_value'0 index (view'1 self) result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'5 self}
    any [ return' (result:usize)-> {[%#svec9] UIntSize.to_int result = Seq.length (view'1 self)} (! return' {result}) ] 
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  let rec hash'0 (self:k) (return'  (ret:uint64))= {[@expl:precondition] [%#shashmap7] inv'4 self}
    any
    [ return' (result:uint64)-> {[%#shashmap8] UInt64.to_int result = hash_log'0 (deep_model'1 self)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec get (self:MyHashMap'0.t_MyHashMap k v) (key:k) (return'  (ret:Option'0.t_Option v))= {[%#shashmap4] inv'2 key}
    {[%#shashmap3] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = hash'0 {key} (fun (_ret':uint64) ->  [ &_7 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.of_int {UInt64.to_int _7} (fun (_res:usize) ->  [ &_6 <- _res ] s1)
      | s1 = MyHashMap'0.t_MyHashMap <k> <v> {self}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &_9 <- _ret' ] s2))
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.eq {_9} {[%#shashmap0] (0 : usize)} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1)
      | s1 = {[@expl:remainder by zero] [%#shashmap0] not _11} s2
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.rem {_6} {_9} (fun (_ret':usize) ->  [ &index <- _ret' ] s1)
      | s1 = MyHashMap'0.t_MyHashMap <k> <v> {self}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            index'0 {rbuckets'0} {index} (fun (_ret':List'0.t_List (k, v)) ->  [ &_13 <- _ret' ] s2))
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &l <- _13 ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#shashmap2] get'0 (bucket'0 self (deep_model'0 key)) (deep_model'0 key)
        = get'0 l (deep_model'0 key)}
        {[@expl:loop invariant] [%#shashmap1] inv'0 l}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = any
          [ br0 -> {l = List'0.C_Nil } (! bb12)
          | br1 (a:(k, v)) (b:List'0.t_List (k, v))-> {l = List'0.C_Cons a b} (! bb7) ]
          
        | bb7 = bb8
        | bb8 = s0
          [ s0 = List'0.v_Cons <(k, v)> {l}
              (fun (r0'0:(k, v)) (r1'0:List'0.t_List (k, v)) ->  [ &k <- let (r'0, _) = r0'0 in r'0 ] s1)
          | s1 = List'0.v_Cons <(k, v)> {l}
              (fun (r0'1:(k, v)) (r1'1:List'0.t_List (k, v)) ->  [ &v <- let (_, r'1) = r0'1 in r'1 ] s2)
          | s2 = List'0.v_Cons <(k, v)> {l} (fun (r0'2:(k, v)) (r1'2:List'0.t_List (k, v)) ->  [ &tl <- r1'2 ] s3)
          | s3 = eq'0 {k} {key} (fun (_ret':bool) ->  [ &_25 <- _ret' ] s4)
          | s4 = bb9 ]
          
        | bb9 = any [ br0 -> {_25 = false} (! bb11) | br1 -> {_25} (! bb10) ] 
        | bb11 = s0 [ s0 =  [ &_31 <- tl ] s1 | s1 =  [ &l <- _31 ] s2 | s2 = bb5 ]  ]
         ]
      
    | bb12 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb13 ] 
    | bb10 = s0 [ s0 =  [ &_0 <- Option'0.C_Some v ] s1 | s1 = bb13 ] 
    | bb13 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option v = any_l ()
    | & self : MyHashMap'0.t_MyHashMap k v = self
    | & key : k = key
    | & index : usize = any_l ()
    | & _6 : usize = any_l ()
    | & _7 : uint64 = any_l ()
    | & _9 : usize = any_l ()
    | & _11 : bool = any_l ()
    | & l : List'0.t_List (k, v) = any_l ()
    | & _13 : List'0.t_List (k, v) = any_l ()
    | & k : k = any_l ()
    | & v : v = any_l ()
    | & tl : List'0.t_List (k, v) = any_l ()
    | & _25 : bool = any_l ()
    | & _31 : List'0.t_List (k, v) = any_l () ]
    
    [ return' (result:Option'0.t_Option v)-> {[@expl:postcondition] [%#shashmap6] inv'3 result}
      {[@expl:postcondition] [%#shashmap5] match result with
        | Option'0.C_Some v -> Map.get (view'0 self) (deep_model'0 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (view'0 self) (deep_model'0 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
end
module M_hashmap__qyi7664122466964245986__resize [#"hashmap.rs" 173 4 173 24] (* MyHashMap<K, V> *)
  type k
  
  type v
  
  let%span shashmap0 = "hashmap.rs" 174 23 174 41
  let%span shashmap1 = "hashmap.rs" 175 53 175 54
  let%span shashmap2 = "hashmap.rs" 177 27 177 28
  let%span shashmap3 = "hashmap.rs" 178 20 178 29
  let%span shashmap4 = "hashmap.rs" 179 20 179 28
  let%span shashmap5 = "hashmap.rs" 178 8 178 31
  let%span shashmap6 = "hashmap.rs" 186 20 186 66
  let%span shashmap7 = "hashmap.rs" 187 20 187 45
  let%span shashmap8 = "hashmap.rs" 191 24 191 32
  let%span shashmap9 = "hashmap.rs" 192 24 192 30
  let%span shashmap10 = "hashmap.rs" 191 12 191 34
  let%span shashmap11 = "hashmap.rs" 199 24 199 45
  let%span shashmap12 = "hashmap.rs" 200 24 200 51
  let%span shashmap13 = "hashmap.rs" 205 12 205 121
  let%span shashmap14 = "hashmap.rs" 206 17 206 18
  let%span shashmap15 = "hashmap.rs" 170 15 170 41
  let%span shashmap16 = "hashmap.rs" 173 19 173 23
  let%span shashmap17 = "hashmap.rs" 171 4 171 74
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span shashmap19 = "hashmap.rs" 114 15 114 24
  let%span shashmap20 = "hashmap.rs" 115 4 115 64
  let%span shashmap21 = "hashmap.rs" 116 31 116 46
  let%span shashmap22 = "hashmap.rs" 91 20 91 66
  let%span ssnapshot23 = "../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span shashmap24 = "hashmap.rs" 80 8 80 33
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops26 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span svec28 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span svec29 = "../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span svec30 = "../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span svec31 = "../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span smem32 = "../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem33 = "../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span shashmap34 = "hashmap.rs" 31 12 34 13
  let%span shashmap35 = "hashmap.rs" 41 12 44 13
  let%span shashmap36 = "hashmap.rs" 96 8 98 9
  let%span shashmap37 = "hashmap.rs" 122 20 122 24
  let%span shashmap38 = "hashmap.rs" 122 26 122 29
  let%span shashmap39 = "hashmap.rs" 122 34 122 37
  let%span shashmap40 = "hashmap.rs" 121 4 121 124
  let%span smodel41 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span smodel42 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span shashmap43 = "hashmap.rs" 86 8 86 53
  let%span sslice44 = "../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span sslice46 = "../../../creusot-contracts/src/std/slice.rs" 140 8 140 96
  let%span sresolve47 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant48 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span shashmap49 = "hashmap.rs" 106 8 109 9
  let%span svec50 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant51 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed52 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq53 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  use T_hashmap__List as List'0
  
  predicate inv'11 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#sseq53] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'12 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv_axiom'10 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'12 x] . inv'12 x = invariant'7 x
  
  predicate inv'3 (_1 : List'0.t_List (k, v))
  
  predicate invariant'6 (self : List'0.t_List (k, v)) =
    [%#sboxed52] inv'3 self
  
  axiom inv_axiom'9 [@rewrite] : forall x : List'0.t_List (k, v) [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate inv'9 (_1 : v)
  
  predicate inv'8 (_1 : k)
  
  predicate inv'10 (_1 : (k, v))
  
  axiom inv_axiom'8 [@rewrite] : forall x : (k, v) [inv'10 x] . inv'10 x = (let (a, b) = x in inv'8 a /\ inv'9 b)
  
  use prelude.prelude.UIntSize
  
  predicate inv'7 (_1 : usize)
  
  axiom inv_axiom'7 [@rewrite] : forall x : usize [inv'7 x] . inv'7 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) =
    [%#sinvariant48] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) [inv'6 x] . inv'6 x
  = invariant'5 x
  
  predicate invariant'4 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#sinvariant51] inv'2 self
  
  predicate inv'5 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv_axiom'5 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'5 x] . inv'5 x
  = invariant'4 x
  
  predicate invariant'3 (self : borrowed (List'0.t_List (k, v))) =
    [%#sinvariant48] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (List'0.t_List (k, v)))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (List'0.t_List (k, v)) [inv'4 x] . inv'4 x = invariant'3 x
  
  axiom inv_axiom'3 [@rewrite] : forall x : List'0.t_List (k, v) [inv'3 x] . inv'3 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'10 a_0 /\ inv'11 a_1
    end
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'2 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
  
  axiom view'2_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#svec25] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'2 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#svec50] inv'12 (view'2 self)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'2 x] . inv'2 x
  = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#shashmap34] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#shashmap35] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  function bucket_ix'0 [#"hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#shashmap22] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  predicate good_bucket'0 [#"hashmap.rs" 95 4 95 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#shashmap36] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#sops26] Seq.get (view'2 self) ix
  
  predicate invariant'1 [#"hashmap.rs" 105 4 105 30] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#shashmap49] 0 < Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  predicate inv'1 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'2 buckets
    end)
  
  predicate invariant'0 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#sinvariant48] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (MyHashMap'0.t_MyHashMap k v))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (MyHashMap'0.t_MyHashMap k v) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Mapping
  
  function bucket'0 [#"hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#shashmap43] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function view'1 [#"hashmap.rs" 79 4 79 33] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#shashmap24] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  function view'3 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#smodel41] view'1 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#sresolve47] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    resolve'3 _1
  
  use map.Map
  
  let rec add'0 (self:borrowed (MyHashMap'0.t_MyHashMap k v)) (key:k) (val':v) (return'  (ret:()))= {[@expl:precondition] [%#shashmap39] inv'9 val'}
    {[@expl:precondition] [%#shashmap38] inv'8 key}
    {[@expl:precondition] [%#shashmap37] inv'0 self}
    any
    [ return' (result:())-> {[%#shashmap40] forall i : t_DeepModelTy'0 . Map.get (view'1 self.final) i
      = (if i = deep_model'0 key then Option'0.C_Some val' else Map.get (view'3 self) i)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (List'0.t_List (k, v))) =
    [%#sresolve47] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (List'0.t_List (k, v))) =
    resolve'2 _1
  
  let rec replace'0 (dest:borrowed (List'0.t_List (k, v))) (src:List'0.t_List (k, v)) (return'  (ret:List'0.t_List (k, v)))= {[@expl:precondition] inv'3 src}
    {[@expl:precondition] inv'4 dest}
    any
    [ return' (result:List'0.t_List (k, v))-> {inv'3 result}
      {[%#smem33] result = dest.current}
      {[%#smem32] dest.final = src}
      (! return' {result}) ]
    
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (List'0.t_List (k, v))) (fin : Seq.seq (List'0.t_List (k, v)))
    
   =
    [%#sslice46] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) (out : List'0.t_List (k, v))
    
   =
    [%#sslice45] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) =
    [%#sslice44] UIntSize.to_int self < Seq.length seq
  
  function view'6 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#smodel41] view'2 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (List'0.t_List (k, v))))= {[@expl:precondition] inv'7 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [%#svec27] in_bounds'0 index (view'6 self)}
    any
    [ return' (result:borrowed (List'0.t_List (k, v)))-> {inv'4 result}
      {[%#svec31] Seq.length (view'2 self.final) = Seq.length (view'6 self)}
      {[%#svec30] resolve_elswhere'0 index (view'6 self) (view'2 self.final)}
      {[%#svec29] has_value'0 index (view'2 self.final) result.final}
      {[%#svec28] has_value'0 index (view'6 self) result.current}
      (! return' {result}) ]
    
  
  function view'5 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#smodel42] view'3 self
  
  use prelude.prelude.Snapshot
  
  function view'0 (self : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v))) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#ssnapshot23] view'5 (Snapshot.inner self)
  
  let rec new'0 (size:usize) (return'  (ret:MyHashMap'0.t_MyHashMap k v))= {[@expl:precondition] [%#shashmap19] 0
    < UIntSize.to_int size}
    any
    [ return' (result:MyHashMap'0.t_MyHashMap k v)-> {[%#shashmap21] inv'1 result}
      {[%#shashmap20] forall i : t_DeepModelTy'0 . Map.get (view'1 result) i = Option'0.C_None}
      (! return' {result}) ]
    
  
  function view'4 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v)) =
    [%#smodel42] view'2 self
  
  let rec len'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:usize)-> {[%#svec18] UIntSize.to_int result = Seq.length (view'4 self)} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec resize (self:borrowed (MyHashMap'0.t_MyHashMap k v)) (return'  (ret:()))= {[%#shashmap16] inv'0 self}
    {[%#shashmap15] Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current)) < 1000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#shashmap0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1))
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.mul {_8} {[%#shashmap1] (2 : usize)} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s1)
      | s1 = new'0 {_7} (fun (_ret':MyHashMap'0.t_MyHashMap k v) ->  [ &new <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &i <- [%#shashmap2] (0 : usize) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = s0 [ s0 =  [ &old_7_0 <- Snapshot.new self ] s1 | s1 = bb7 ] 
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] (Snapshot.inner old_7_0).final = self.final}
        {[@expl:loop invariant] [%#shashmap7] UIntSize.to_int i
        <= Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current))}
        {[@expl:loop invariant] [%#shashmap6] Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
        = Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current))}
        {[@expl:loop invariant] [%#shashmap5] forall j : int . UIntSize.to_int i <= j
        /\ j < Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
         -> index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current) j
        = index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current) j}
        {[@expl:loop invariant] [%#shashmap5] forall k : t_DeepModelTy'0 . UIntSize.to_int i
        <= bucket_ix'0 (Snapshot.inner old_self).current k
        /\ bucket_ix'0 (Snapshot.inner old_self).current k
        <= Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
         -> Map.get (view'1 new) k = Option'0.C_None}
        {[@expl:loop invariant] [%#shashmap5] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
        < UIntSize.to_int i  -> Map.get (view'0 old_self) k = Map.get (view'1 new) k}
        {[@expl:loop invariant] [%#shashmap4] inv'1 new}
        {[@expl:loop invariant] [%#shashmap3] inv'0 self}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
              (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
                len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1))
          | s1 = bb9 ]
          
        | bb9 = s0
          [ s0 = UIntSize.lt {i} {_22} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1)
          | s1 = any [ br0 -> {_20 = false} (! bb32) | br1 -> {_20} (! bb10) ]  ]
          
        | bb10 = s0
          [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
              (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
                {inv'2 rbuckets'0}
                Borrow.borrow_mut <Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)> {rbuckets'0}
                  (fun (_ret':borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) ->
                     [ &_28 <- _ret' ] 
                    -{inv'2 _ret'.final}-
                     [ &self <- { self with current = MyHashMap'0.C_MyHashMap _ret'.final ; } ] 
                    s1))
          | s1 = index_mut'0 {_28} {i} (fun (_ret':borrowed (List'0.t_List (k, v))) ->  [ &_27 <- _ret' ] s2)
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 = {inv'3 _27.current}
            Borrow.borrow_final <List'0.t_List (k, v)> {_27.current} {Borrow.get_id _27}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_26 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_27 <- { _27 with current = _ret'.final ; } ] 
                s1)
          | s1 = {inv'3 _26.current}
            Borrow.borrow_final <List'0.t_List (k, v)> {_26.current} {Borrow.get_id _26}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_25 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_26 <- { _26 with current = _ret'.final ; } ] 
                s2)
          | s2 =  [ &_30 <- List'0.C_Nil ] s3
          | s3 = replace'0 {_25} {_30} (fun (_ret':List'0.t_List (k, v)) ->  [ &l <- _ret' ] s4)
          | s4 = bb12 ]
          
        | bb12 = s0
          [ s0 = {[@expl:type invariant] inv'4 _27} s1
          | s1 = -{resolve'0 _27}- s2
          | s2 = {[@expl:type invariant] inv'4 _26} s3
          | s3 = -{resolve'0 _26}- s4
          | s4 = bb13 ]
          
        | bb13 = bb14
        | bb14 = bb15
        | bb15 = bb16
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb19
        | bb19 = bb20
        | bb20 = bb20
          [ bb20 = {[@expl:loop invariant] [%#shashmap12] good_bucket'0 (Snapshot.inner old_self).current l (UIntSize.to_int i)}
            {[@expl:loop invariant] [%#shashmap11] no_double_binding'0 l}
            {[@expl:loop invariant] [%#shashmap10] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            = UIntSize.to_int i
             -> Map.get (view'0 old_self) k
            = match get'0 l k with
              | Option'0.C_None -> Map.get (view'1 new) k
              | Option'0.C_Some v -> Option'0.C_Some v
              end}
            {[@expl:loop invariant] [%#shashmap10] forall k : t_DeepModelTy'0 . UIntSize.to_int i
            < bucket_ix'0 (Snapshot.inner old_self).current k
            /\ bucket_ix'0 (Snapshot.inner old_self).current k
            <= Seq.length (view'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
             -> Map.get (view'1 new) k = Option'0.C_None}
            {[@expl:loop invariant] [%#shashmap10] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            < UIntSize.to_int i  -> Map.get (view'0 old_self) k = Map.get (view'1 new) k}
            {[@expl:loop invariant] [%#shashmap9] inv'3 l}
            {[@expl:loop invariant] [%#shashmap8] inv'1 new}
            (! s0) [ s0 = bb21 ] 
            [ bb21 = any
              [ br0 -> {l = List'0.C_Nil } (! bb28)
              | br1 (a:(k, v)) (b:List'0.t_List (k, v))-> {l = List'0.C_Cons a b} (! bb22) ]
              
            | bb22 = bb23
            | bb23 = s0
              [ s0 = List'0.v_Cons <(k, v)> {l}
                  (fun (r0'0:(k, v)) (r1'0:List'0.t_List (k, v)) ->  [ &k <- let (r'0, _) = r0'0 in r'0 ] s1)
              | s1 = List'0.v_Cons <(k, v)> {l}
                  (fun (r0'1:(k, v)) (r1'1:List'0.t_List (k, v)) ->  [ &v <- let (_, r'1) = r0'1 in r'1 ] s2)
              | s2 = List'0.v_Cons <(k, v)> {l} (fun (r0'2:(k, v)) (r1'2:List'0.t_List (k, v)) ->  [ &tl <- r1'2 ] s3)
              | s3 = {inv'1 new}
                Borrow.borrow_mut <MyHashMap'0.t_MyHashMap k v> {new}
                  (fun (_ret':borrowed (MyHashMap'0.t_MyHashMap k v)) ->
                     [ &_44 <- _ret' ] 
                    -{inv'1 _ret'.final}-
                     [ &new <- _ret'.final ] 
                    s4)
              | s4 = add'0 {_44} {k} {v} (fun (_ret':()) ->  [ &_43 <- _ret' ] s5)
              | s5 = bb24 ]
              
            | bb24 = bb25
            | bb25 = s0 [ s0 =  [ &l <- tl ] s1 | s1 = bb27 ] 
            | bb27 = bb29
            | bb29 = bb20 ]
             ]
          
        | bb28 = s0
          [ s0 = {[@expl:type invariant] inv'3 l} s1
          | s1 = {[@expl:assertion] [%#shashmap13] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            = UIntSize.to_int i  -> Map.get (view'0 old_self) k = Map.get (view'1 new) k}
            s2
          | s2 = bb30 ]
          
        | bb30 = s0
          [ s0 = UIntSize.add {i} {[%#shashmap14] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1) | s1 = bb31 ]
          
        | bb31 = bb7 ]
         ]
      
    | bb32 = bb33
    | bb33 = s0
      [ s0 = {[@expl:type invariant] match self with
          | {current = x'0} -> inv'1 x'0
          | _ -> true
          end}
        s1
      | s1 =  [ &self <- { self with current = new ; } ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb35 ]
      
    | bb35 = bb36
    | bb36 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (MyHashMap'0.t_MyHashMap k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v)) = any_l ()
    | & new : MyHashMap'0.t_MyHashMap k v = any_l ()
    | & _7 : usize = any_l ()
    | & _8 : usize = any_l ()
    | & i : usize = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : usize = any_l ()
    | & l : List'0.t_List (k, v) = any_l ()
    | & _25 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _26 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _27 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _28 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) = any_l ()
    | & _30 : List'0.t_List (k, v) = any_l ()
    | & k : k = any_l ()
    | & v : v = any_l ()
    | & tl : List'0.t_List (k, v) = any_l ()
    | & _43 : () = any_l ()
    | & _44 : borrowed (MyHashMap'0.t_MyHashMap k v) = any_l ()
    | & old_7_0 : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shashmap17] forall k : t_DeepModelTy'0 . Map.get (view'1 self.final) k
      = Map.get (view'3 self) k}
      (! return' {result}) ]
    
end
module M_hashmap__main [#"hashmap.rs" 213 0 213 13]
  let%span shashmap0 = "hashmap.rs" 220 57 220 59
  let%span shashmap1 = "hashmap.rs" 221 57 221 59
  let%span shashmap2 = "hashmap.rs" 222 24 222 25
  let%span shashmap3 = "hashmap.rs" 223 24 223 25
  let%span shashmap4 = "hashmap.rs" 224 24 224 25
  let%span shashmap5 = "hashmap.rs" 225 24 225 25
  let%span shashmap6 = "hashmap.rs" 229 11 229 12
  let%span shashmap7 = "hashmap.rs" 229 14 229 16
  let%span shashmap8 = "hashmap.rs" 230 16 230 17
  let%span shashmap9 = "hashmap.rs" 231 16 231 17
  let%span shashmap10 = "hashmap.rs" 232 16 232 17
  let%span shashmap11 = "hashmap.rs" 233 16 233 17
  let%span shashmap12 = "hashmap.rs" 236 11 236 12
  let%span shashmap13 = "hashmap.rs" 236 14 236 16
  let%span shashmap14 = "hashmap.rs" 237 16 237 17
  let%span shashmap15 = "hashmap.rs" 238 16 238 17
  let%span shashmap16 = "hashmap.rs" 239 16 239 17
  let%span shashmap17 = "hashmap.rs" 240 16 240 17
  let%span shashmap18 = "hashmap.rs" 114 15 114 24
  let%span shashmap19 = "hashmap.rs" 115 4 115 64
  let%span shashmap20 = "hashmap.rs" 116 31 116 46
  let%span shashmap21 = "hashmap.rs" 154 16 154 20
  let%span shashmap22 = "hashmap.rs" 154 22 154 25
  let%span shashmap23 = "hashmap.rs" 150 14 153 5
  let%span shashmap24 = "hashmap.rs" 154 33 154 43
  let%span shashmap25 = "hashmap.rs" 122 20 122 24
  let%span shashmap26 = "hashmap.rs" 122 26 122 29
  let%span shashmap27 = "hashmap.rs" 122 34 122 37
  let%span shashmap28 = "hashmap.rs" 121 4 121 124
  let%span shashmap29 = "hashmap.rs" 80 8 80 33
  let%span smodel30 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span snum31 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span smodel32 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span shashmap33 = "hashmap.rs" 86 8 86 53
  let%span shashmap34 = "hashmap.rs" 31 12 34 13
  let%span shashmap35 = "hashmap.rs" 106 8 109 9
  let%span shashmap36 = "hashmap.rs" 91 20 91 66
  let%span sops37 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sinvariant38 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span shashmap40 = "hashmap.rs" 96 8 98 9
  let%span shashmap41 = "hashmap.rs" 41 12 44 13
  let%span sinvariant42 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span shashmap43 = "hashmap.rs" 66 20 66 21
  
  use prelude.prelude.IntSize
  
  use prelude.prelude.Int
  
  predicate inv'5 (_1 : isize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : isize [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.UIntSize
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  predicate inv'0 (_1 : MyHashMap'0.t_MyHashMap usize isize)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (MyHashMap'0.t_MyHashMap usize isize)) =
    [%#sinvariant42] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed (MyHashMap'0.t_MyHashMap usize isize))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (MyHashMap'0.t_MyHashMap usize isize) [inv'4 x] . inv'4 x
  = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option isize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option isize [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  predicate invariant'1 (self : MyHashMap'0.t_MyHashMap usize isize) =
    [%#sinvariant38] inv'0 self
  
  predicate inv'1 (_1 : MyHashMap'0.t_MyHashMap usize isize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap usize isize [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  use prelude.prelude.UIntSize
  
  function deep_model'0 (self : usize) : int =
    [%#snum31] UIntSize.to_int self
  
  use T_hashmap__List as List'0
  
  function get'1 [#"hashmap.rs" 29 4 29 56] (self : List'0.t_List (usize, isize)) (index : int) : Option'0.t_Option isize
    
   =
    [%#shashmap34] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'1 tl index
      end
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : List'0.t_List (usize, isize)) =
    [%#shashmap41] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'1 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  use int.EuclideanDivision
  
  use seq.Seq
  
  use seq.Seq
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'3 (self : Vec'0.t_Vec (List'0.t_List (usize, isize)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (usize, isize))
    
  
  axiom view'3_spec : forall self : Vec'0.t_Vec (List'0.t_List (usize, isize)) (Global'0.t_Global) . [%#svec39] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"hashmap.rs" 65 4 65 30] (x : int) : int =
    [%#shashmap43] x
  
  function bucket_ix'0 [#"hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap usize isize) (k : int) : int =
    [%#shashmap36] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  predicate good_bucket'0 [#"hashmap.rs" 95 4 95 57] (self : MyHashMap'0.t_MyHashMap usize isize) (l : List'0.t_List (usize, isize)) (h : int)
    
   =
    [%#shashmap40] forall k : int, v : isize . get'1 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (usize, isize)) (Global'0.t_Global)) (ix : int) : List'0.t_List (usize, isize)
    
   =
    [%#sops37] Seq.get (view'3 self) ix
  
  predicate invariant'0 [#"hashmap.rs" 105 4 105 30] (self : MyHashMap'0.t_MyHashMap usize isize) =
    [%#shashmap35] 0 < Seq.length (view'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  axiom inv_axiom'0 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap usize isize [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | MyHashMap'0.C_MyHashMap buckets -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Mapping
  
  function bucket'0 [#"hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap usize isize) (k : int) : List'0.t_List (usize, isize)
    
   =
    [%#shashmap33] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function view'0 [#"hashmap.rs" 79 4 79 33] (self : MyHashMap'0.t_MyHashMap usize isize) : Map.map int (Option'0.t_Option isize)
    
   =
    [%#shashmap29] Mapping.from_fn (fun (k : int) -> get'1 (bucket'0 self k) k)
  
  function view'2 (self : borrowed (MyHashMap'0.t_MyHashMap usize isize)) : Map.map int (Option'0.t_Option isize) =
    [%#smodel32] view'0 self.current
  
  use map.Map
  
  let rec add'0 (self:borrowed (MyHashMap'0.t_MyHashMap usize isize)) (key:usize) (val':isize) (return'  (ret:()))= {[@expl:precondition] [%#shashmap27] inv'5 val'}
    {[@expl:precondition] [%#shashmap26] inv'2 key}
    {[@expl:precondition] [%#shashmap25] inv'4 self}
    any
    [ return' (result:())-> {[%#shashmap28] forall i : int . Map.get (view'0 self.final) i
      = (if i = deep_model'0 key then Option'0.C_Some val' else Map.get (view'2 self) i)}
      (! return' {result}) ]
    
  
  function view'1 (self : MyHashMap'0.t_MyHashMap usize isize) : Map.map int (Option'0.t_Option isize) =
    [%#smodel30] view'0 self
  
  let rec get'0 (self:MyHashMap'0.t_MyHashMap usize isize) (key:usize) (return'  (ret:Option'0.t_Option isize))= {[@expl:precondition] [%#shashmap22] inv'2 key}
    {[@expl:precondition] [%#shashmap21] inv'1 self}
    any
    [ return' (result:Option'0.t_Option isize)-> {[%#shashmap24] inv'3 result}
      {[%#shashmap23] match result with
        | Option'0.C_Some v -> Map.get (view'1 self) (deep_model'0 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (view'1 self) (deep_model'0 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
  
  let rec new'0 (size:usize) (return'  (ret:MyHashMap'0.t_MyHashMap usize isize))= {[@expl:precondition] [%#shashmap18] 0
    < UIntSize.to_int size}
    any
    [ return' (result:MyHashMap'0.t_MyHashMap usize isize)-> {[%#shashmap20] inv'0 result}
      {[%#shashmap19] forall i : int . Map.get (view'0 result) i = Option'0.C_None}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec main (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#shashmap0] (17 : usize)}
          (fun (_ret':MyHashMap'0.t_MyHashMap usize isize) ->  [ &h1 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = new'0 {[%#shashmap1] (42 : usize)}
          (fun (_ret':MyHashMap'0.t_MyHashMap usize isize) ->  [ &h2 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = get'0 {h1} {[%#shashmap2] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_x <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = get'0 {h1} {[%#shashmap3] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_y <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = get'0 {h2} {[%#shashmap4] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_z <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = get'0 {h2} {[%#shashmap5] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_t <- _ret' ] s1)
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = {inv'0 h1}
        Borrow.borrow_mut <MyHashMap'0.t_MyHashMap usize isize> {h1}
          (fun (_ret':borrowed (MyHashMap'0.t_MyHashMap usize isize)) ->
             [ &_12 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &h1 <- _ret'.final ] 
            s1)
      | s1 = add'0 {_12} {[%#shashmap6] (1 : usize)} {[%#shashmap7] (17 : isize)}
          (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = get'0 {h1} {[%#shashmap8] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_13 <- _ret' ] s1)
      | s1 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &_x <- _13 ] s1
      | s1 = get'0 {h1} {[%#shashmap9] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &_y <- _15 ] s1
      | s1 = get'0 {h2} {[%#shashmap10] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 =  [ &_z <- _17 ] s1
      | s1 = get'0 {h2} {[%#shashmap11] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_19 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 =  [ &_t <- _19 ] s1
      | s1 = {inv'0 h2}
        Borrow.borrow_mut <MyHashMap'0.t_MyHashMap usize isize> {h2}
          (fun (_ret':borrowed (MyHashMap'0.t_MyHashMap usize isize)) ->
             [ &_22 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &h2 <- _ret'.final ] 
            s2)
      | s2 = add'0 {_22} {[%#shashmap12] (1 : usize)} {[%#shashmap13] (42 : isize)}
          (fun (_ret':()) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = get'0 {h1} {[%#shashmap14] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_23 <- _ret' ] s1)
      | s1 = bb13 ]
      
    | bb13 = s0
      [ s0 =  [ &_x <- _23 ] s1
      | s1 = get'0 {h1} {[%#shashmap15] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_25 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_y <- _25 ] s1
      | s1 = get'0 {h2} {[%#shashmap16] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_27 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0
      [ s0 =  [ &_z <- _27 ] s1
      | s1 = get'0 {h2} {[%#shashmap17] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_29 <- _ret' ] s2)
      | s2 = bb16 ]
      
    | bb16 = s0 [ s0 =  [ &_t <- _29 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & h1 : MyHashMap'0.t_MyHashMap usize isize = any_l ()
    | & h2 : MyHashMap'0.t_MyHashMap usize isize = any_l ()
    | & _x : Option'0.t_Option isize = any_l ()
    | & _y : Option'0.t_Option isize = any_l ()
    | & _z : Option'0.t_Option isize = any_l ()
    | & _t : Option'0.t_Option isize = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (MyHashMap'0.t_MyHashMap usize isize) = any_l ()
    | & _13 : Option'0.t_Option isize = any_l ()
    | & _15 : Option'0.t_Option isize = any_l ()
    | & _17 : Option'0.t_Option isize = any_l ()
    | & _19 : Option'0.t_Option isize = any_l ()
    | & _21 : () = any_l ()
    | & _22 : borrowed (MyHashMap'0.t_MyHashMap usize isize) = any_l ()
    | & _23 : Option'0.t_Option isize = any_l ()
    | & _25 : Option'0.t_Option isize = any_l ()
    | & _27 : Option'0.t_Option isize = any_l ()
    | & _29 : Option'0.t_Option isize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_hashmap__qyi11479661188956547742 [#"hashmap.rs" 14 0 14 32] (* <List<T> as creusot_contracts::Clone> *)
  type t
  
  let%span shashmap0 = "hashmap.rs" 17 4 17 27
  let%span sinvariant1 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed2 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use T_hashmap__List as List'0
  
  predicate inv'1 (_1 : List'0.t_List t)
  
  predicate invariant'1 (self : List'0.t_List t) =
    [%#sboxed2] inv'1 self
  
  predicate inv'3 (_1 : List'0.t_List t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : List'0.t_List t [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate inv'2 (_1 : t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : List'0.t_List t [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : List'0.t_List t) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : List'0.t_List t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : List'0.t_List t [inv'0 x] . inv'0 x = invariant'0 x
  
  goal clone'_refn : [%#shashmap0] forall self : List'0.t_List t . inv'0 self
   -> inv'0 self /\ (forall result : List'0.t_List t . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module M_hashmap__qyi9060063638777358169 [#"hashmap.rs" 58 0 58 19] (* <usize as Hash> *)
  let%span shashmap0 = "hashmap.rs" 60 4 60 25
  let%span smodel1 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span shashmap2 = "hashmap.rs" 66 20 66 21
  let%span snum3 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : usize [inv'0 x] . inv'0 x = true
  
  function hash_log'0 [#"hashmap.rs" 65 4 65 30] (x : int) : int =
    [%#shashmap2] x
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#snum3] UIntSize.to_int self
  
  function deep_model'0 (self : usize) : int =
    [%#smodel1] deep_model'1 self
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  goal hash_refn : [%#shashmap0] forall self : usize . inv'0 self
   -> (forall result : uint64 . UInt64.to_int result = hash_log'0 (deep_model'0 self)
   -> UInt64.to_int result = hash_log'0 (deep_model'0 self))
end
module M_hashmap__qyi11215855950510163561 [#"hashmap.rs" 74 0 74 41] (* <MyHashMap<K, V> as creusot_contracts::View> *)
  type k
  
  type v
end
module M_hashmap__qyi7802044998467894515 [#"hashmap.rs" 102 0 102 46] (* <MyHashMap<K, V> as creusot_contracts::Invariant> *)
  type k
  
  type v
end
