module M_hashmap__qyi15610519155507183510__resolve_coherence [#"hashmap.rs" 63 4 63 31] (* <List<(K, V)> as creusot_contracts::Resolve> *)
  let%span shashmap0 = "hashmap.rs" 61 15 61 39
  let%span shashmap1 = "hashmap.rs" 62 14 62 31
  let%span shashmap2 = "hashmap.rs" 60 4 60 23
  let%span shashmap3 = "hashmap.rs" 55 12 55 59
  let%span shashmap4 = "hashmap.rs" 31 12 34 13
  let%span sresolve5 = "../../../creusot-contracts/src/resolve.rs" 68 8 68 23
  let%span sresolve6 = "../../../creusot-contracts/src/resolve.rs" 40 8 40 44
  let%span sresolve7 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  
  use prelude.prelude.Borrow
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  type t_DeepModelTy'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap4] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  predicate resolve'9 (_1 : t_V'0)
  
  predicate resolve'6 (self : t_Option'0) =
    [%#sresolve7] match self with
      | C_Some'0 x -> resolve'9 x
      | C_None'0 -> true
      end
  
  predicate resolve'3 (_1 : t_Option'0) =
    resolve'6 _1
  
  predicate resolve'0 [#"hashmap.rs" 52 4 52 28] (self : t_List'0) =
    [%#shashmap3] forall k : t_DeepModelTy'0 . resolve'3 (get'0 self k)
  
  predicate resolve'7 (_1 : t_List'0) =
    resolve'0 _1
  
  predicate resolve'4 (self : t_List'0) =
    [%#sresolve5] resolve'7 self
  
  predicate resolve'1 (_1 : t_List'0) =
    resolve'4 _1
  
  predicate resolve'8 (_1 : t_K'0)
  
  predicate resolve'5 (self : (t_K'0, t_V'0)) =
    [%#sresolve6] resolve'8 (let (a, _) = self in a) /\ resolve'9 (let (_, a) = self in a)
  
  predicate resolve'2 (_1 : (t_K'0, t_V'0)) =
    resolve'5 _1
  
  predicate structural_resolve'0 (_1 : t_List'0) =
    match _1 with
      | C_Nil'0 -> true
      | C_Cons'0 x0 x1 -> resolve'1 x1 /\ resolve'2 x0
      end
  
  constant self  : t_List'0
  
  function resolve_coherence'0 [#"hashmap.rs" 63 4 63 31] (self : t_List'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#shashmap0] structural_resolve'0 self)  -> ([%#shashmap1] resolve'0 self)
end
module M_hashmap__qyi9060063638777358169__hash [#"hashmap.rs" 77 4 77 25] (* <usize as Hash> *)
  let%span shashmap0 = "hashmap.rs" 76 14 76 58
  let%span smodel1 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span shashmap2 = "hashmap.rs" 83 20 83 21
  let%span snum3 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#snum3] UIntSize.to_int self
  
  function deep_model'0 (self : usize) : int =
    [%#smodel1] deep_model'1 self
  
  function hash_log'0 [#"hashmap.rs" 82 4 82 30] (x : int) : int =
    [%#shashmap2] x
  
  meta "compute_max_steps" 1000000
  
  let rec hash'0 (self:usize) (return'  (ret:uint64))= (! bb0
    [ bb0 = s0
      [ s0 = UInt64.of_int {UIntSize.to_int self} (fun (_res:uint64) ->  [ &_0 <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : uint64 = any_l () | & self : usize = self ] 
    [ return' (result:uint64)-> {[@expl:hash ensures] [%#shashmap0] UInt64.to_int result
      = hash_log'0 (deep_model'0 self)}
      (! return' {result}) ]
    
end
module M_hashmap__qyi15467499327297494705__resolve_coherence [#"hashmap.rs" 116 4 116 31] (* <MyHashMap<K, V> as creusot_contracts::Resolve> *)
  let%span shashmap0 = "hashmap.rs" 113 15 113 24
  let%span shashmap1 = "hashmap.rs" 114 15 114 39
  let%span shashmap2 = "hashmap.rs" 115 14 115 31
  let%span shashmap3 = "hashmap.rs" 112 4 112 23
  let%span shashmap4 = "hashmap.rs" 107 12 107 60
  let%span shashmap5 = "hashmap.rs" 97 8 97 33
  let%span sinvariant6 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span shashmap8 = "hashmap.rs" 122 8 122 53
  let%span shashmap9 = "hashmap.rs" 31 12 34 13
  let%span sresolve10 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex12 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span shashmap13 = "hashmap.rs" 127 20 127 66
  let%span shashmap14 = "hashmap.rs" 55 12 55 59
  let%span shashmap15 = "hashmap.rs" 143 12 144 139
  let%span shashmap16 = "hashmap.rs" 133 12 133 91
  let%span shashmap17 = "hashmap.rs" 41 12 44 13
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq19 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed20 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec11] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex12] Seq.get (view'1 self) ix
  
  type t_DeepModelTy'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap9] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  function hash_log'0 [#"hashmap.rs" 72 4 72 45] (_1 : t_DeepModelTy'0) : int
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : int =
    [%#shashmap13] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'1 self.t_MyHashMap__buckets'0))
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap16] forall k : t_DeepModelTy'0, v : t_V'0 . get'0 l k = C_Some'0 v  -> bucket_ix'0 self k = h
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap17] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'0 tl (deep_model'0 k) = C_None'0 /\ no_double_binding'0 tl
      end
  
  predicate invariant'1 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap15] 0 < Seq.length (view'1 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  use seq.Seq
  
  predicate inv'7 (_1 : t_K'0)
  
  predicate inv'8 (_1 : t_V'0)
  
  predicate inv'6 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'6 x] . inv'6 x
  = (let (x0, x1) = x in inv'7 x0 /\ inv'8 x1)
  
  predicate inv'5 (_1 : t_List'0)
  
  predicate inv'4 (_1 : t_List'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_List'0 [inv'5 x] . inv'5 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'6 a_0 /\ inv'4 a_1
    end
  
  predicate invariant'4 (self : t_List'0) =
    [%#sboxed20] inv'5 self
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_List'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq (t_List'0)) =
    [%#sseq19] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq (t_List'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (t_List'0) [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec18] inv'3 (view'1 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate inv'1 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_MyHashMap'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> inv'2 buckets
    end)
  
  predicate invariant'0 (self : t_MyHashMap'0) =
    [%#sinvariant6] inv'1 self
  
  predicate inv'0 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_MyHashMap'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'6 (_1 : t_V'0)
  
  predicate resolve'4 (self : t_Option'0) =
    [%#sresolve10] match self with
      | C_Some'0 x -> resolve'6 x
      | C_None'0 -> true
      end
  
  predicate resolve'2 (_1 : t_Option'0) =
    resolve'4 _1
  
  predicate resolve'7 [#"hashmap.rs" 52 4 52 28] (self : t_List'0) =
    [%#shashmap14] forall k : t_DeepModelTy'0 . resolve'2 (get'0 self k)
  
  predicate resolve'5 (_1 : t_List'0) =
    resolve'7 _1
  
  predicate resolve'3 (self : t_Vec'0) =
    [%#svec7] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> resolve'5 (index_logic'0 self i)
  
  predicate resolve'1 (_1 : t_Vec'0) =
    resolve'3 _1
  
  predicate structural_resolve'0 (_1 : t_MyHashMap'0) =
    match _1 with
      | {t_MyHashMap__buckets'0 = x0} -> resolve'1 x0
      end
  
  use map.Map
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : t_List'0 =
    [%#shashmap8] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  use prelude.prelude.Mapping
  
  function view'0 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#shashmap5] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  use map.Map
  
  predicate resolve'0 [#"hashmap.rs" 104 4 104 28] (self : t_MyHashMap'0) =
    [%#shashmap4] forall k : t_DeepModelTy'0 . resolve'2 (Map.get (view'0 self) k)
  
  constant self  : t_MyHashMap'0
  
  function resolve_coherence'0 [#"hashmap.rs" 116 4 116 31] (self : t_MyHashMap'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#shashmap1] structural_resolve'0 self)
   -> ([%#shashmap0] inv'0 self)  -> ([%#shashmap2] resolve'0 self)
end
module M_hashmap__qyi7664122466964245986__new [#"hashmap.rs" 152 4 152 46] (* MyHashMap<K, V> *)
  let%span shashmap0 = "hashmap.rs" 150 15 150 24
  let%span shashmap1 = "hashmap.rs" 152 31 152 46
  let%span shashmap2 = "hashmap.rs" 151 14 151 62
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 180 22 180 41
  let%span svec4 = "../../../creusot-contracts/src/std/vec.rs" 181 22 181 76
  let%span shashmap5 = "hashmap.rs" 97 8 97 33
  let%span svec6 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex7 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span shashmap8 = "hashmap.rs" 122 8 122 53
  let%span shashmap9 = "hashmap.rs" 31 12 34 13
  let%span shashmap10 = "hashmap.rs" 143 12 144 139
  let%span shashmap11 = "hashmap.rs" 127 20 127 66
  let%span svec12 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span shashmap13 = "hashmap.rs" 133 12 133 91
  let%span shashmap14 = "hashmap.rs" 41 12 44 13
  let%span sboxed15 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq16 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  predicate inv'6 (_1 : t_K'0)
  
  predicate inv'7 (_1 : t_V'0)
  
  predicate inv'3 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'3 x] . inv'3 x
  = (let (x0, x1) = x in inv'6 x0 /\ inv'7 x1)
  
  predicate inv'1 (_1 : t_List'0)
  
  predicate invariant'2 (self : t_List'0) =
    [%#sboxed15] inv'1 self
  
  predicate inv'4 (_1 : t_List'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_List'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_List'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'3 a_0 /\ inv'4 a_1
    end
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec6] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq (t_List'0)) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq (t_List'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq (t_List'0) [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate invariant'1 (self : t_Vec'0) =
    [%#svec12] inv'5 (view'1 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex7] Seq.get (view'1 self) ix
  
  let rec from_elem'0 (elem:t_List'0) (n:usize) (return'  (ret:t_Vec'0))= {[@expl:from_elem 'elem' type invariant] inv'1 elem}
    any
    [ return' (result:t_Vec'0)-> {inv'2 result}
      {[%#svec3] Seq.length (view'1 result) = UIntSize.to_int n}
      {[%#svec4] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
    
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use prelude.prelude.Intrinsic
  
  type t_DeepModelTy'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap9] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  function hash_log'0 [#"hashmap.rs" 72 4 72 45] (_1 : t_DeepModelTy'0) : int
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : int =
    [%#shashmap11] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'1 self.t_MyHashMap__buckets'0))
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap13] forall k : t_DeepModelTy'0, v : t_V'0 . get'0 l k = C_Some'0 v  -> bucket_ix'0 self k = h
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap14] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'0 tl (deep_model'0 k) = C_None'0 /\ no_double_binding'0 tl
      end
  
  predicate invariant'0 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap10] 0 < Seq.length (view'1 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  predicate inv'0 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_MyHashMap'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> inv'2 buckets
    end)
  
  use map.Map
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : t_List'0 =
    [%#shashmap8] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  use prelude.prelude.Mapping
  
  function view'0 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#shashmap5] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  let rec new'0 (size:usize) (return'  (ret:t_MyHashMap'0))= {[@expl:new requires] [%#shashmap0] 0
    < UIntSize.to_int size}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_6 <- C_Nil'0 ] s1
      | s1 = from_elem'0 {_6} {size} (fun (_ret':t_Vec'0) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &res <- { t_MyHashMap__buckets'0 = _5 } ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    )
    [ & _0 : t_MyHashMap'0 = any_l ()
    | & size : usize = size
    | & res : t_MyHashMap'0 = any_l ()
    | & _5 : t_Vec'0 = any_l ()
    | & _6 : t_List'0 = any_l () ]
    
    [ return' (result:t_MyHashMap'0)-> {[@expl:new result type invariant] [%#shashmap1] inv'0 result}
      {[@expl:new ensures] [%#shashmap2] forall i : t_DeepModelTy'0 . Map.get (view'0 result) i = C_None'0}
      (! return' {result}) ]
    
end
module M_hashmap__qyi7664122466964245986__add [#"hashmap.rs" 158 4 158 41] (* MyHashMap<K, V> *)
  let%span shashmap0 = "hashmap.rs" 160 23 160 41
  let%span shashmap1 = "hashmap.rs" 162 27 162 55
  let%span shashmap2 = "hashmap.rs" 164 20 164 35
  let%span shashmap3 = "hashmap.rs" 172 20 173 51
  let%span shashmap4 = "hashmap.rs" 171 20 171 44
  let%span shashmap5 = "hashmap.rs" 170 20 170 96
  let%span shashmap6 = "hashmap.rs" 169 20 169 108
  let%span shashmap7 = "hashmap.rs" 168 20 168 101
  let%span shashmap8 = "hashmap.rs" 167 20 167 52
  let%span shashmap9 = "hashmap.rs" 166 20 166 26
  let%span shashmap10 = "hashmap.rs" 158 20 158 24
  let%span shashmap11 = "hashmap.rs" 158 26 158 29
  let%span shashmap12 = "hashmap.rs" 158 34 158 37
  let%span shashmap13 = "hashmap.rs" 157 14 157 122
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span shashmap15 = "hashmap.rs" 69 13 69 17
  let%span shashmap16 = "hashmap.rs" 68 14 68 58
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec19 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span shashmap22 = "hashmap.rs" 31 12 34 13
  let%span shashmap23 = "hashmap.rs" 41 12 44 13
  let%span shashmap24 = "hashmap.rs" 133 12 133 91
  let%span scmp25 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span shashmap26 = "hashmap.rs" 97 8 97 33
  let%span smodel27 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel28 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span smodel29 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice30 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice31 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span svec32 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sslice33 = "../../../creusot-contracts/src/std/slice.rs" 136 20 136 94
  let%span sresolve34 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span shashmap35 = "hashmap.rs" 127 20 127 66
  let%span shashmap36 = "hashmap.rs" 55 12 55 59
  let%span shashmap37 = "hashmap.rs" 122 8 122 53
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant39 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sboxed40 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sindex41 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sinvariant42 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sresolve43 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sseq44 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span shashmap45 = "hashmap.rs" 143 12 144 139
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  use seq.Seq
  
  function view'4 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'4_spec : forall self : t_Vec'0 . [%#svec32] Seq.length (view'4 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_1 : t_K'0)
  
  predicate inv'4 (_1 : t_V'0)
  
  predicate inv'14 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'12 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'14 x] . inv'14 x
  = (let (x0, x1) = x in inv'3 x0 /\ inv'4 x1)
  
  predicate inv'1 (_1 : t_List'0)
  
  predicate inv'5 (_1 : t_List'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_List'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'14 a_0 /\ inv'5 a_1
    end
  
  predicate invariant'2 (self : t_List'0) =
    [%#sboxed40] inv'1 self
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_List'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate invariant'10 (self : Seq.seq (t_List'0)) =
    [%#sseq44] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'15 (_1 : Seq.seq (t_List'0))
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq (t_List'0) [inv'15 x] . inv'15 x = invariant'10 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec38] inv'15 (view'4 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'7 (self : t_Vec'0) =
    [%#sinvariant42] inv'0 self
  
  predicate inv'10 (_1 : t_Vec'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Vec'0 [inv'10 x] . inv'10 x = invariant'7 x
  
  function view'2 (self : t_Vec'0) : Seq.seq (t_List'0) =
    [%#smodel28] view'4 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'10 self}
    any
    [ return' (result:usize)-> {[%#svec14] UIntSize.to_int result = Seq.length (view'2 self)} (! return' {result}) ]
    
  
  predicate invariant'8 (self : t_K'0) =
    [%#sinvariant42] inv'3 self
  
  predicate inv'11 (_1 : t_K'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_K'0 [inv'11 x] . inv'11 x = invariant'8 x
  
  use prelude.prelude.UInt64
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_K'0) : t_DeepModelTy'0 =
    [%#smodel29] deep_model'0 self
  
  function hash_log'0 [#"hashmap.rs" 72 4 72 45] (_1 : t_DeepModelTy'0) : int
  
  use prelude.prelude.UInt64
  
  let rec hash'0 (self:t_K'0) (return'  (ret:uint64))= {[@expl:hash 'self' type invariant] [%#shashmap15] inv'11 self}
    any
    [ return' (result:uint64)-> {[%#shashmap16] UInt64.to_int result = hash_log'0 (deep_model'1 self)}
      (! return' {result}) ]
    
  
  predicate invariant'9 (self : borrowed (t_Vec'0)) =
    [%#sinvariant39] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'12 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'12 x] . inv'12 x = invariant'9 x
  
  predicate inv'13 (_1 : usize)
  
  axiom inv_axiom'11 [@rewrite] : forall x : usize [inv'13 x] . inv'13 x = true
  
  function view'3 (self : borrowed (t_Vec'0)) : Seq.seq (t_List'0) =
    [%#smodel27] view'4 self.current
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_List'0)) =
    [%#sslice30] UIntSize.to_int self < Seq.length seq
  
  predicate invariant'1 (self : borrowed (t_List'0)) =
    [%#sinvariant39] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (t_List'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_List'0) [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_List'0)) (out : t_List'0) =
    [%#sslice31] Seq.get seq (UIntSize.to_int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (t_List'0)) (fin : Seq.seq (t_List'0)) =
    [%#sslice33] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed (t_List'0)))= {[@expl:index_mut 'self' type invariant] inv'12 self}
    {[@expl:index_mut 'index' type invariant] inv'13 index}
    {[@expl:index_mut requires] [%#svec17] in_bounds'0 index (view'3 self)}
    any
    [ return' (result:borrowed (t_List'0))-> {inv'2 result}
      {[%#svec18] has_value'0 index (view'3 self) result.current}
      {[%#svec19] has_value'0 index (view'4 self.final) result.final}
      {[%#svec20] resolve_elswhere'0 index (view'3 self) (view'4 self.final)}
      {[%#svec21] Seq.length (view'4 self.final) = Seq.length (view'3 self)}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (t_List'0)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_List'0)) =
    resolve'6 _1
  
  use prelude.prelude.Snapshot
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap22] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap23] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'0 tl (deep_model'0 k) = C_None'0 /\ no_double_binding'0 tl
      end
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : int =
    [%#shashmap35] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'4 self.t_MyHashMap__buckets'0))
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap24] forall k : t_DeepModelTy'0, v : t_V'0 . get'0 l k = C_Some'0 v  -> bucket_ix'0 self k = h
  
  use prelude.prelude.Snapshot
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:(t_K'0, t_V'0)) (field_1:t_List'0))= any
    [ good (field_0:(t_K'0, t_V'0)) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : (t_K'0, t_V'0), field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  let rec eq'0 (self:t_K'0) (other:t_K'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'11 self}
    {[@expl:eq 'other' type invariant] inv'11 other}
    any [ return' (result:bool)-> {[%#scmp25] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  predicate invariant'3 (self : borrowed t_K'0) =
    [%#sinvariant39] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'6 (_1 : borrowed t_K'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_K'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate resolve'7 (self : borrowed t_K'0) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed t_K'0) =
    resolve'7 _1
  
  predicate invariant'4 (self : borrowed t_V'0) =
    [%#sinvariant39] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed t_V'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed t_V'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate resolve'8 (self : borrowed t_V'0) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed t_V'0) =
    resolve'8 _1
  
  predicate invariant'5 (self : borrowed (t_List'0)) =
    [%#sinvariant39] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'8 (_1 : borrowed (t_List'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (t_List'0) [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate resolve'9 (self : borrowed (t_List'0)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_List'0)) =
    resolve'9 _1
  
  predicate resolve'14 (_1 : t_V'0)
  
  predicate resolve'13 (self : t_Option'0) =
    [%#sresolve43] match self with
      | C_Some'0 x -> resolve'14 x
      | C_None'0 -> true
      end
  
  predicate resolve'12 (_1 : t_Option'0) =
    resolve'13 _1
  
  predicate resolve'10 [#"hashmap.rs" 52 4 52 28] (self : t_List'0) =
    [%#shashmap36] forall k : t_DeepModelTy'0 . resolve'12 (get'0 self k)
  
  predicate resolve'4 (_1 : t_List'0) =
    resolve'10 _1
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex41] Seq.get (view'4 self) ix
  
  predicate invariant'11 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap45] 0 < Seq.length (view'4 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'4 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  predicate inv'16 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'14 [@rewrite] : forall x : t_MyHashMap'0 [inv'16 x] . inv'16 x
  = (invariant'11 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> inv'0 buckets
    end)
  
  predicate invariant'6 (self : borrowed (t_MyHashMap'0)) =
    [%#sinvariant39] inv'16 self.current /\ inv'16 self.final
  
  predicate inv'9 (_1 : borrowed (t_MyHashMap'0))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (t_MyHashMap'0) [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate resolve'11 (self : borrowed (t_MyHashMap'0)) =
    [%#sresolve34] self.final = self.current
  
  predicate resolve'5 (_1 : borrowed (t_MyHashMap'0)) =
    resolve'11 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use map.Map
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : t_List'0 =
    [%#shashmap37] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  use prelude.prelude.Mapping
  
  function view'0 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#shashmap26] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  use map.Map
  
  function view'1 (self : borrowed (t_MyHashMap'0)) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#smodel27] view'0 self.current
  
  meta "compute_max_steps" 1000000
  
  let rec add'0 (self:borrowed (t_MyHashMap'0)) (key:t_K'0) (val':t_V'0) (return'  (ret:()))= {[@expl:add 'self' type invariant] [%#shashmap10] inv'9 self}
    {[@expl:add 'key' type invariant] [%#shashmap11] inv'3 key}
    {[@expl:add 'val' type invariant] [%#shashmap12] inv'4 val'}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#shashmap0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = len'0 {(self.current).t_MyHashMap__buckets'0} (fun (_ret':usize) ->  [ &length <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = hash'0 {key} (fun (_ret':uint64) ->  [ &_11 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UIntSize.of_int {UInt64.to_int _11} (fun (_res:usize) ->  [ &_10 <- _res ] s1)
      | s1 =  [ &_13 <- length ] s2
      | s2 = UIntSize.eq {_13} {[%#shashmap1] (0 : usize)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s3)
      | s3 = {[@expl:remainder by zero] [%#shashmap1] not _14} s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = UIntSize.rem {_10} {_13} (fun (_ret':usize) ->  [ &index <- _ret' ] s1)
      | s1 = {inv'0 (self.current).t_MyHashMap__buckets'0}
        Borrow.borrow_final <t_Vec'0> {(self.current).t_MyHashMap__buckets'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed (t_Vec'0)) ->
             [ &_18 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { t_MyHashMap__buckets'0 = _ret'.final } } ] 
            s2)
      | s2 = index_mut'0 {_18} {index} (fun (_ret':borrowed (t_List'0)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {inv'1 _17.current}
        Borrow.borrow_final <t_List'0> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (t_List'0)) ->
             [ &_16 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_17 <- { _17 with current = _ret'.final } ] 
            s1)
      | s1 = {inv'1 _16.current}
        Borrow.borrow_final <t_List'0> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (t_List'0)) ->
             [ &l <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_16 <- { _16 with current = _ret'.final } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'2 _16} s3
      | s3 = -{resolve'0 _16}- s4
      | s4 =  [ &old_l <- [%#shashmap2] Snapshot.new l ] s5
      | s5 = bb6 ]
      
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant #0] [%#shashmap9] inv'2 l}
        {[@expl:loop invariant #1] [%#shashmap8] good_bucket'0 (Snapshot.inner old_self).current l.current (UIntSize.to_int index)}
        {[@expl:loop invariant #2] [%#shashmap7] good_bucket'0 (Snapshot.inner old_self).current l.final (UIntSize.to_int index)
         -> good_bucket'0 (Snapshot.inner old_self).current (Snapshot.inner old_l).final (UIntSize.to_int index)}
        {[@expl:loop invariant #3] [%#shashmap6] get'0 l.final (deep_model'0 key) = C_Some'0 val'
         -> get'0 (Snapshot.inner old_l).final (deep_model'0 key) = C_Some'0 val'}
        {[@expl:loop invariant #4] [%#shashmap5] forall i : t_DeepModelTy'0 . get'0 l.final i = get'0 l.current i
         -> get'0 (Snapshot.inner old_l).final i = get'0 (Snapshot.inner old_l).current i}
        {[@expl:loop invariant #5] [%#shashmap4] no_double_binding'0 l.current}
        {[@expl:loop invariant #6] [%#shashmap3] (forall i : t_DeepModelTy'0 . get'0 l.current i = get'0 l.final i
        \/ i = deep_model'0 key)
        /\ no_double_binding'0 l.final  -> no_double_binding'0 (Snapshot.inner old_l).final}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = any
          [ br0 -> {l.current = C_Nil'0 } (! bb14)
          | br1 (x0:(t_K'0, t_V'0)) (x1:t_List'0)-> {l.current = C_Cons'0 x0 x1} (! bb9) ]
          
        | bb9 = bb10
        | bb10 = s0
          [ s0 = v_Cons'0 {l.current}
              (fun (r0'0:(t_K'0, t_V'0)) (r1'0:t_List'0) ->
                {inv'3 (let (r'0, _) = r0'0 in r'0)}
                Borrow.borrow_final
                  <t_K'0>
                  {let (r'0, _) = r0'0 in r'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id l) 1) 1}
                  (fun (_ret':borrowed t_K'0) ->
                     [ &k <- _ret' ] 
                    -{inv'3 _ret'.final}-
                     [ &l <- { l with current = C_Cons'0 (let (_, r'2) = r0'0 in (_ret'.final, r'2)) r1'0 } ] 
                    s1))
          | s1 = v_Cons'0 {l.current}
              (fun (r0'1:(t_K'0, t_V'0)) (r1'1:t_List'0) ->
                {inv'4 (let (_, r'3) = r0'1 in r'3)}
                Borrow.borrow_final
                  <t_V'0>
                  {let (_, r'3) = r0'1 in r'3}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id l) 1) 2}
                  (fun (_ret':borrowed t_V'0) ->
                     [ &v <- _ret' ] 
                    -{inv'4 _ret'.final}-
                     [ &l <- { l with current = C_Cons'0 (let (r'4, _) = r0'1 in (r'4, _ret'.final)) r1'1 } ] 
                    s2))
          | s2 = v_Cons'0 {l.current}
              (fun (r0'2:(t_K'0, t_V'0)) (r1'2:t_List'0) ->
                {inv'5 r1'2}
                Borrow.borrow_final <t_List'0> {r1'2} {Borrow.inherit_id (Borrow.get_id l) 2}
                  (fun (_ret':borrowed (t_List'0)) ->
                     [ &tl <- _ret' ] 
                    -{inv'5 _ret'.final}-
                     [ &l <- { l with current = C_Cons'0 r0'2 _ret'.final } ] 
                    s3))
          | s3 =  [ &tl1 <- tl ] s4
          | s4 = eq'0 {k.current} {key} (fun (_ret':bool) ->  [ &_38 <- _ret' ] s5)
          | s5 = bb11 ]
          
        | bb11 = s0
          [ s0 = {[@expl:type invariant] inv'6 k} s1
          | s1 = -{resolve'1 k}- s2
          | s2 = any [ br0 -> {_38 = false} (! bb13) | br1 -> {_38} (! bb12) ]  ]
          
        | bb13 = s0
          [ s0 = {[@expl:type invariant] inv'7 v} s1
          | s1 = -{resolve'2 v}- s2
          | s2 = {inv'1 tl1.current}
            Borrow.borrow_final <t_List'0> {tl1.current} {Borrow.get_id tl1}
              (fun (_ret':borrowed (t_List'0)) ->
                 [ &_44 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &tl1 <- { tl1 with current = _ret'.final } ] 
                s3)
          | s3 = {inv'1 _44.current}
            Borrow.borrow_final <t_List'0> {_44.current} {Borrow.get_id _44}
              (fun (_ret':borrowed (t_List'0)) ->
                 [ &_43 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_44 <- { _44 with current = _ret'.final } ] 
                s4)
          | s4 = {[@expl:type invariant] inv'2 l} s5
          | s5 = -{resolve'0 l}- s6
          | s6 =  [ &l <- _43 ] s7
          | s7 = {[@expl:type invariant] inv'2 _44} s8
          | s8 = -{resolve'0 _44}- s9
          | s9 = {[@expl:type invariant] inv'8 tl1} s10
          | s10 = -{resolve'3 tl1}- s11
          | s11 = bb7 ]
           ]
         ]
      
    | bb14 = s0 [ s0 =  [ &_47 <- (key, val') ] s1 | s1 =  [ &_51 <- C_Nil'0 ] s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_46 <- C_Cons'0 _47 _51 ] s1 | s1 = bb16 ] 
    | bb16 = bb17
    | bb17 = s0
      [ s0 = {[@expl:type invariant] match l with
          | {current = x'0} -> inv'1 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match l with
          | {current = x'1} -> resolve'4 x'1
          | _ -> true
          end}-
        s2
      | s2 =  [ &l <- { l with current = _46 } ] s3
      | s3 = {[@expl:type invariant] inv'2 l} s4
      | s4 = -{resolve'0 l}- s5
      | s5 = {[@expl:type invariant] inv'2 _17} s6
      | s6 = -{resolve'0 _17}- s7
      | s7 = {[@expl:type invariant] inv'9 self} s8
      | s8 = -{resolve'5 self}- s9
      | s9 = bb19 ]
      
    | bb19 = bb20
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'8 tl1} s1
      | s1 = -{resolve'3 tl1}- s2
      | s2 =  [ &v <- { v with current = val' } ] s3
      | s3 = {[@expl:type invariant] inv'7 v} s4
      | s4 = -{resolve'2 v}- s5
      | s5 = {[@expl:type invariant] inv'2 _17} s6
      | s6 = -{resolve'0 _17}- s7
      | s7 = {[@expl:type invariant] inv'2 l} s8
      | s8 = -{resolve'0 l}- s9
      | s9 = {[@expl:type invariant] inv'9 self} s10
      | s10 = -{resolve'5 self}- s11
      | s11 = bb20 ]
      
    | bb20 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (t_MyHashMap'0) = self
    | & key : t_K'0 = key
    | & val' : t_V'0 = val'
    | & old_self : Snapshot.snap_ty (borrowed (t_MyHashMap'0)) = any_l ()
    | & length : usize = any_l ()
    | & index : usize = any_l ()
    | & _10 : usize = any_l ()
    | & _11 : uint64 = any_l ()
    | & _13 : usize = any_l ()
    | & _14 : bool = any_l ()
    | & l : borrowed (t_List'0) = any_l ()
    | & _16 : borrowed (t_List'0) = any_l ()
    | & _17 : borrowed (t_List'0) = any_l ()
    | & _18 : borrowed (t_Vec'0) = any_l ()
    | & old_l : Snapshot.snap_ty (borrowed (t_List'0)) = any_l ()
    | & k : borrowed t_K'0 = any_l ()
    | & v : borrowed t_V'0 = any_l ()
    | & tl : borrowed (t_List'0) = any_l ()
    | & tl1 : borrowed (t_List'0) = any_l ()
    | & _38 : bool = any_l ()
    | & _43 : borrowed (t_List'0) = any_l ()
    | & _44 : borrowed (t_List'0) = any_l ()
    | & _46 : t_List'0 = any_l ()
    | & _47 : (t_K'0, t_V'0) = any_l ()
    | & _51 : t_List'0 = any_l () ]
    
    [ return' (result:())-> {[@expl:add ensures] [%#shashmap13] forall i : t_DeepModelTy'0 . Map.get (view'0 self.final) i
      = (if i = deep_model'0 key then C_Some'0 val' else Map.get (view'1 self) i)}
      (! return' {result}) ]
    
end
module M_hashmap__qyi7664122466964245986__get [#"hashmap.rs" 190 4 190 43] (* MyHashMap<K, V> *)
  let%span shashmap0 = "hashmap.rs" 191 27 191 67
  let%span shashmap1 = "hashmap.rs" 195 20 195 101
  let%span shashmap2 = "hashmap.rs" 194 20 194 26
  let%span shashmap3 = "hashmap.rs" 190 16 190 20
  let%span shashmap4 = "hashmap.rs" 190 22 190 25
  let%span shashmap5 = "hashmap.rs" 190 33 190 43
  let%span shashmap6 = "hashmap.rs" 186 14 189 5
  let%span shashmap7 = "hashmap.rs" 69 13 69 17
  let%span shashmap8 = "hashmap.rs" 68 14 68 58
  let%span svec9 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span svec10 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span shashmap12 = "hashmap.rs" 122 8 122 53
  let%span shashmap13 = "hashmap.rs" 31 12 34 13
  let%span scmp14 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span smodel15 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span smodel16 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice17 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice18 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span shashmap19 = "hashmap.rs" 127 20 127 66
  let%span sindex20 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span shashmap21 = "hashmap.rs" 97 8 97 33
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sinvariant23 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span shashmap24 = "hashmap.rs" 143 12 144 139
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span shashmap26 = "hashmap.rs" 133 12 133 91
  let%span shashmap27 = "hashmap.rs" 41 12 44 13
  let%span sboxed28 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq29 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  
  use prelude.prelude.Borrow
  
  type t_K'0
  
  predicate inv'2 (_1 : t_K'0)
  
  predicate invariant'2 (self : t_K'0) =
    [%#sinvariant23] inv'2 self
  
  predicate inv'4 (_1 : t_K'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_K'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  use prelude.prelude.UInt64
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_K'0) : t_DeepModelTy'0 =
    [%#smodel16] deep_model'0 self
  
  use prelude.prelude.Int
  
  function hash_log'0 [#"hashmap.rs" 72 4 72 45] (_1 : t_DeepModelTy'0) : int
  
  use prelude.prelude.UInt64
  
  let rec hash'0 (self:t_K'0) (return'  (ret:uint64))= {[@expl:hash 'self' type invariant] [%#shashmap7] inv'4 self}
    any
    [ return' (result:uint64)-> {[%#shashmap8] UInt64.to_int result = hash_log'0 (deep_model'1 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  use seq.Seq
  
  function view'3 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'3_spec : forall self : t_Vec'0 . [%#svec22] Seq.length (view'3 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'13 (_1 : t_V'0)
  
  predicate inv'11 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'10 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'11 x] . inv'11 x
  = (let (x0, x1) = x in inv'2 x0 /\ inv'13 x1)
  
  predicate inv'8 (_1 : t_List'0)
  
  predicate inv'12 (_1 : t_List'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_List'0 [inv'8 x] . inv'8 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'11 a_0 /\ inv'12 a_1
    end
  
  predicate invariant'7 (self : t_List'0) =
    [%#sboxed28] inv'8 self
  
  axiom inv_axiom'11 [@rewrite] : forall x : t_List'0 [inv'12 x] . inv'12 x = invariant'7 x
  
  predicate invariant'8 (self : Seq.seq (t_List'0)) =
    [%#sseq29] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'14 (_1 : Seq.seq (t_List'0))
  
  axiom inv_axiom'12 [@rewrite] : forall x : Seq.seq (t_List'0) [inv'14 x] . inv'14 x = invariant'8 x
  
  predicate invariant'6 (self : t_Vec'0) =
    [%#svec25] inv'14 (view'3 self)
  
  predicate inv'10 (_1 : t_Vec'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Vec'0 [inv'10 x] . inv'10 x = invariant'6 x
  
  predicate invariant'3 (self : t_Vec'0) =
    [%#sinvariant23] inv'10 self
  
  predicate inv'5 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  function view'1 (self : t_Vec'0) : Seq.seq (t_List'0) =
    [%#smodel15] view'3 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'5 self}
    any [ return' (result:usize)-> {[%#svec9] UIntSize.to_int result = Seq.length (view'1 self)} (! return' {result}) ] 
  
  predicate inv'6 (_1 : usize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_List'0)) =
    [%#sslice17] UIntSize.to_int self < Seq.length seq
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant23] inv'8 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_List'0)) (out : t_List'0) =
    [%#sslice18] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:t_List'0))= {[@expl:index 'self' type invariant] inv'5 self}
    {[@expl:index 'index' type invariant] inv'6 index}
    {[@expl:index requires] [%#svec10] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:t_List'0)-> {inv'0 result}
      {[%#svec11] has_value'0 index (view'1 self) result}
      (! return' {result}) ]
    
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : int =
    [%#shashmap19] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'3 self.t_MyHashMap__buckets'0))
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex20] Seq.get (view'3 self) ix
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : t_List'0 =
    [%#shashmap12] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_V'0
  
  function get'1 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'1 =
    [%#shashmap13] match self with
      | C_Nil'0 -> C_None'1
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'1 v else get'1 tl index
      end
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:(t_K'0, t_V'0)) (field_1:t_List'0))= any
    [ good (field_0:(t_K'0, t_V'0)) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : (t_K'0, t_V'0), field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  let rec eq'0 (self:t_K'0) (other:t_K'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'4 self}
    {[@expl:eq 'other' type invariant] inv'4 other}
    any [ return' (result:bool)-> {[%#scmp14] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  use prelude.prelude.Intrinsic
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap26] forall k : t_DeepModelTy'0, v : t_V'0 . get'1 l k = C_Some'1 v  -> bucket_ix'0 self k = h
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap27] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'1 tl (deep_model'0 k) = C_None'1 /\ no_double_binding'0 tl
      end
  
  predicate invariant'5 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap24] 0 < Seq.length (view'3 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  predicate inv'9 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_MyHashMap'0 [inv'9 x] . inv'9 x
  = (invariant'5 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> inv'10 buckets
    end)
  
  predicate invariant'1 (self : t_MyHashMap'0) =
    [%#sinvariant23] inv'9 self
  
  predicate inv'1 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_MyHashMap'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'4 (self : t_V'0) =
    [%#sinvariant23] inv'13 self
  
  predicate inv'7 (_1 : t_V'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_V'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'7 a_0
    end
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  function view'2 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'1) =
    [%#shashmap21] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'1 (bucket'0 self k) k)
  
  function view'0 (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'1) =
    [%#smodel15] view'2 self
  
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  let rec get'0 (self:t_MyHashMap'0) (key:t_K'0) (return'  (ret:t_Option'0))= {[@expl:get 'self' type invariant] [%#shashmap3] inv'1 self}
    {[@expl:get 'key' type invariant] [%#shashmap4] inv'2 key}
    (! bb0
    [ bb0 = s0 [ s0 = hash'0 {key} (fun (_ret':uint64) ->  [ &_7 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.of_int {UInt64.to_int _7} (fun (_res:usize) ->  [ &_6 <- _res ] s1)
      | s1 = len'0 {self.t_MyHashMap__buckets'0} (fun (_ret':usize) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.eq {_9} {[%#shashmap0] (0 : usize)} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1)
      | s1 = {[@expl:remainder by zero] [%#shashmap0] not _11} s2
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.rem {_6} {_9} (fun (_ret':usize) ->  [ &index <- _ret' ] s1)
      | s1 = index'0 {self.t_MyHashMap__buckets'0} {index} (fun (_ret':t_List'0) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &l <- _13 ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] [%#shashmap2] inv'0 l}
        {[@expl:loop invariant #1] [%#shashmap1] get'1 (bucket'0 self (deep_model'0 key)) (deep_model'0 key)
        = get'1 l (deep_model'0 key)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = any
          [ br0 -> {l = C_Nil'0 } (! bb12) | br1 (x0:(t_K'0, t_V'0)) (x1:t_List'0)-> {l = C_Cons'0 x0 x1} (! bb7) ]
          
        | bb7 = bb8
        | bb8 = s0
          [ s0 = v_Cons'0 {l} (fun (r0'0:(t_K'0, t_V'0)) (r1'0:t_List'0) ->  [ &k <- let (r'0, _) = r0'0 in r'0 ] s1)
          | s1 = v_Cons'0 {l} (fun (r0'1:(t_K'0, t_V'0)) (r1'1:t_List'0) ->  [ &v <- let (_, r'1) = r0'1 in r'1 ] s2)
          | s2 = v_Cons'0 {l} (fun (r0'2:(t_K'0, t_V'0)) (r1'2:t_List'0) ->  [ &tl <- r1'2 ] s3)
          | s3 = eq'0 {k} {key} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s4)
          | s4 = bb9 ]
          
        | bb9 = any [ br0 -> {_26 = false} (! bb11) | br1 -> {_26} (! bb10) ] 
        | bb11 = s0 [ s0 =  [ &_32 <- tl ] s1 | s1 =  [ &l <- _32 ] s2 | s2 = bb5 ]  ]
         ]
      
    | bb12 = s0 [ s0 =  [ &_0 <- C_None'0 ] s1 | s1 = bb13 ] 
    | bb10 = s0 [ s0 =  [ &_0 <- C_Some'0 v ] s1 | s1 = bb13 ] 
    | bb13 = return' {_0} ]
    )
    [ & _0 : t_Option'0 = any_l ()
    | & self : t_MyHashMap'0 = self
    | & key : t_K'0 = key
    | & index : usize = any_l ()
    | & _6 : usize = any_l ()
    | & _7 : uint64 = any_l ()
    | & _9 : usize = any_l ()
    | & _11 : bool = any_l ()
    | & l : t_List'0 = any_l ()
    | & _13 : t_List'0 = any_l ()
    | & k : t_K'0 = any_l ()
    | & v : t_V'0 = any_l ()
    | & tl : t_List'0 = any_l ()
    | & _26 : bool = any_l ()
    | & _32 : t_List'0 = any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:get result type invariant] [%#shashmap5] inv'3 result}
      {[@expl:get ensures] [%#shashmap6] match result with
        | C_Some'0 v -> Map.get (view'0 self) (deep_model'0 key) = C_Some'1 v
        | C_None'0 -> Map.get (view'0 self) (deep_model'0 key) = C_None'1
        end}
      (! return' {result}) ]
    
end
module M_hashmap__qyi7664122466964245986__resize [#"hashmap.rs" 209 4 209 24] (* MyHashMap<K, V> *)
  let%span shashmap0 = "hashmap.rs" 210 23 210 41
  let%span shashmap1 = "hashmap.rs" 211 53 211 54
  let%span shashmap2 = "hashmap.rs" 213 27 213 28
  let%span shashmap3 = "hashmap.rs" 223 20 223 45
  let%span shashmap4 = "hashmap.rs" 222 20 222 66
  let%span shashmap5 = "hashmap.rs" 221 20 221 117
  let%span shashmap6 = "hashmap.rs" 217 20 219 92
  let%span shashmap7 = "hashmap.rs" 216 20 216 109
  let%span shashmap8 = "hashmap.rs" 215 20 215 28
  let%span shashmap9 = "hashmap.rs" 214 20 214 29
  let%span shashmap10 = "hashmap.rs" 236 24 236 51
  let%span shashmap11 = "hashmap.rs" 235 24 235 45
  let%span shashmap12 = "hashmap.rs" 233 24 234 102
  let%span shashmap13 = "hashmap.rs" 230 24 231 119
  let%span shashmap14 = "hashmap.rs" 229 24 229 113
  let%span shashmap15 = "hashmap.rs" 228 24 228 30
  let%span shashmap16 = "hashmap.rs" 227 24 227 32
  let%span shashmap17 = "hashmap.rs" 241 28 241 119
  let%span shashmap18 = "hashmap.rs" 242 17 242 18
  let%span shashmap19 = "hashmap.rs" 209 19 209 23
  let%span shashmap20 = "hashmap.rs" 206 15 206 41
  let%span shashmap21 = "hashmap.rs" 207 14 207 72
  let%span svec22 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span shashmap23 = "hashmap.rs" 150 15 150 24
  let%span shashmap24 = "hashmap.rs" 152 31 152 46
  let%span shashmap25 = "hashmap.rs" 151 14 151 62
  let%span svec26 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex27 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span shashmap28 = "hashmap.rs" 127 20 127 66
  let%span shashmap29 = "hashmap.rs" 97 8 97 33
  let%span ssnapshot30 = "../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span svec31 = "../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec32 = "../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec33 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span smem36 = "../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem37 = "../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span shashmap38 = "hashmap.rs" 133 12 133 91
  let%span shashmap39 = "hashmap.rs" 41 12 44 13
  let%span shashmap40 = "hashmap.rs" 31 12 34 13
  let%span shashmap41 = "hashmap.rs" 158 20 158 24
  let%span shashmap42 = "hashmap.rs" 158 26 158 29
  let%span shashmap43 = "hashmap.rs" 158 34 158 37
  let%span shashmap44 = "hashmap.rs" 157 14 157 122
  let%span smodel45 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel46 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span shashmap47 = "hashmap.rs" 122 8 122 53
  let%span sslice48 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice49 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sslice50 = "../../../creusot-contracts/src/std/slice.rs" 136 20 136 94
  let%span sresolve51 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span shashmap52 = "hashmap.rs" 55 12 55 59
  let%span shashmap53 = "hashmap.rs" 107 12 107 60
  let%span shashmap54 = "hashmap.rs" 143 12 144 139
  let%span sinvariant55 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec56 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant57 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sresolve58 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sboxed59 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq60 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec26] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'8 (_1 : t_K'0)
  
  predicate inv'9 (_1 : t_V'0)
  
  predicate inv'10 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'8 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'10 x] . inv'10 x
  = (let (x0, x1) = x in inv'8 x0 /\ inv'9 x1)
  
  predicate inv'3 (_1 : t_List'0)
  
  predicate inv'11 (_1 : t_List'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_List'0 [inv'3 x] . inv'3 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'10 a_0 /\ inv'11 a_1
    end
  
  predicate invariant'6 (self : t_List'0) =
    [%#sboxed59] inv'3 self
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_List'0 [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate invariant'7 (self : Seq.seq (t_List'0)) =
    [%#sseq60] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'12 (_1 : Seq.seq (t_List'0))
  
  axiom inv_axiom'10 [@rewrite] : forall x : Seq.seq (t_List'0) [inv'12 x] . inv'12 x = invariant'7 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec56] inv'12 (view'0 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant57] inv'2 self
  
  predicate inv'5 (_1 : t_Vec'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Vec'0 [inv'5 x] . inv'5 x = invariant'4 x
  
  function view'4 (self : t_Vec'0) : Seq.seq (t_List'0) =
    [%#smodel46] view'0 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'5 self}
    any
    [ return' (result:usize)-> {[%#svec22] UIntSize.to_int result = Seq.length (view'4 self)} (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex27] Seq.get (view'0 self) ix
  
  type t_DeepModelTy'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap40] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  function hash_log'0 [#"hashmap.rs" 72 4 72 45] (_1 : t_DeepModelTy'0) : int
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : int =
    [%#shashmap28] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'0 self.t_MyHashMap__buckets'0))
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap38] forall k : t_DeepModelTy'0, v : t_V'0 . get'0 l k = C_Some'0 v  -> bucket_ix'0 self k = h
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap39] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'0 tl (deep_model'0 k) = C_None'0 /\ no_double_binding'0 tl
      end
  
  predicate invariant'0 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap54] 0 < Seq.length (view'0 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  predicate inv'0 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_MyHashMap'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> inv'2 buckets
    end)
  
  use map.Map
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : t_List'0 =
    [%#shashmap47] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  use prelude.prelude.Mapping
  
  function view'1 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#shashmap29] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  use map.Map
  
  let rec new'0 (size:usize) (return'  (ret:t_MyHashMap'0))= {[@expl:new requires] [%#shashmap23] 0
    < UIntSize.to_int size}
    any
    [ return' (result:t_MyHashMap'0)-> {[%#shashmap24] inv'0 result}
      {[%#shashmap25] forall i : t_DeepModelTy'0 . Map.get (view'1 result) i = C_None'0}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : borrowed (t_MyHashMap'0)) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#smodel45] view'1 self.current
  
  function view'5 (self : borrowed (t_MyHashMap'0)) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#smodel46] view'3 self
  
  function view'2 (self : Snapshot.snap_ty (borrowed (t_MyHashMap'0))) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#ssnapshot30] view'5 (Snapshot.inner self)
  
  predicate invariant'1 (self : borrowed (t_MyHashMap'0)) =
    [%#sinvariant55] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (t_MyHashMap'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_MyHashMap'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'5 (self : borrowed (t_Vec'0)) =
    [%#sinvariant55] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'6 x] . inv'6 x = invariant'5 x
  
  predicate inv'7 (_1 : usize)
  
  axiom inv_axiom'7 [@rewrite] : forall x : usize [inv'7 x] . inv'7 x = true
  
  function view'6 (self : borrowed (t_Vec'0)) : Seq.seq (t_List'0) =
    [%#smodel45] view'0 self.current
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_List'0)) =
    [%#sslice48] UIntSize.to_int self < Seq.length seq
  
  predicate invariant'3 (self : borrowed (t_List'0)) =
    [%#sinvariant55] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (t_List'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_List'0) [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_List'0)) (out : t_List'0) =
    [%#sslice49] Seq.get seq (UIntSize.to_int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (t_List'0)) (fin : Seq.seq (t_List'0)) =
    [%#sslice50] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed (t_List'0)))= {[@expl:index_mut 'self' type invariant] inv'6 self}
    {[@expl:index_mut 'index' type invariant] inv'7 index}
    {[@expl:index_mut requires] [%#svec31] in_bounds'0 index (view'6 self)}
    any
    [ return' (result:borrowed (t_List'0))-> {inv'4 result}
      {[%#svec32] has_value'0 index (view'6 self) result.current}
      {[%#svec33] has_value'0 index (view'0 self.final) result.final}
      {[%#svec34] resolve_elswhere'0 index (view'6 self) (view'0 self.final)}
      {[%#svec35] Seq.length (view'0 self.final) = Seq.length (view'6 self)}
      (! return' {result}) ]
    
  
  let rec replace'0 (dest:borrowed (t_List'0)) (src:t_List'0) (return'  (ret:t_List'0))= {[@expl:replace 'dest' type invariant] inv'4 dest}
    {[@expl:replace 'src' type invariant] inv'3 src}
    any
    [ return' (result:t_List'0)-> {inv'3 result}
      {[%#smem36] dest.final = src}
      {[%#smem37] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (t_List'0)) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_List'0)) =
    resolve'4 _1
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:(t_K'0, t_V'0)) (field_1:t_List'0))= any
    [ good (field_0:(t_K'0, t_V'0)) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : (t_K'0, t_V'0), field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
    
  
  let rec add'0 (self:borrowed (t_MyHashMap'0)) (key:t_K'0) (val':t_V'0) (return'  (ret:()))= {[@expl:add 'self' type invariant] [%#shashmap41] inv'1 self}
    {[@expl:add 'key' type invariant] [%#shashmap42] inv'8 key}
    {[@expl:add 'val' type invariant] [%#shashmap43] inv'9 val'}
    any
    [ return' (result:())-> {[%#shashmap44] forall i : t_DeepModelTy'0 . Map.get (view'1 self.final) i
      = (if i = deep_model'0 key then C_Some'0 val' else Map.get (view'3 self) i)}
      (! return' {result}) ]
    
  
  predicate resolve'10 (_1 : t_V'0)
  
  predicate resolve'9 (self : t_Option'0) =
    [%#sresolve58] match self with
      | C_Some'0 x -> resolve'10 x
      | C_None'0 -> true
      end
  
  predicate resolve'8 (_1 : t_Option'0) =
    resolve'9 _1
  
  predicate resolve'5 [#"hashmap.rs" 52 4 52 28] (self : t_List'0) =
    [%#shashmap52] forall k : t_DeepModelTy'0 . resolve'8 (get'0 self k)
  
  predicate resolve'1 (_1 : t_List'0) =
    resolve'5 _1
  
  predicate resolve'6 [#"hashmap.rs" 104 4 104 28] (self : t_MyHashMap'0) =
    [%#shashmap53] forall k : t_DeepModelTy'0 . resolve'8 (Map.get (view'1 self) k)
  
  predicate resolve'2 (_1 : t_MyHashMap'0) =
    resolve'6 _1
  
  predicate resolve'7 (self : borrowed (t_MyHashMap'0)) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_MyHashMap'0)) =
    resolve'7 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec resize'0 (self:borrowed (t_MyHashMap'0)) (return'  (ret:()))= {[@expl:resize 'self' type invariant] [%#shashmap19] inv'1 self}
    {[@expl:resize requires] [%#shashmap20] Seq.length (view'0 (self.current).t_MyHashMap__buckets'0) < 1000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#shashmap0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = len'0 {(self.current).t_MyHashMap__buckets'0} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.mul {_8} {[%#shashmap1] (2 : usize)} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s1)
      | s1 = new'0 {_7} (fun (_ret':t_MyHashMap'0) ->  [ &new <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &i <- [%#shashmap2] (0 : usize) ] s1 | s1 =  [ &old_4_0 <- Snapshot.new self ] s2 | s2 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] (Snapshot.inner old_4_0).final = self.final}
        {[@expl:loop invariant #0] [%#shashmap9] inv'1 self}
        {[@expl:loop invariant #1] [%#shashmap8] inv'0 new}
        {[@expl:loop invariant #2] [%#shashmap7] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
        < UIntSize.to_int i  -> Map.get (view'2 old_self) k = Map.get (view'1 new) k}
        {[@expl:loop invariant #3] [%#shashmap6] forall k : t_DeepModelTy'0 . UIntSize.to_int i
        <= bucket_ix'0 (Snapshot.inner old_self).current k
        /\ bucket_ix'0 (Snapshot.inner old_self).current k
        <= Seq.length (view'0 ((Snapshot.inner old_self).current).t_MyHashMap__buckets'0)
         -> Map.get (view'1 new) k = C_None'0}
        {[@expl:loop invariant #4] [%#shashmap5] forall j : int . UIntSize.to_int i <= j
        /\ j < Seq.length (view'0 ((Snapshot.inner old_self).current).t_MyHashMap__buckets'0)
         -> index_logic'0 (self.current).t_MyHashMap__buckets'0 j
        = index_logic'0 ((Snapshot.inner old_self).current).t_MyHashMap__buckets'0 j}
        {[@expl:loop invariant #5] [%#shashmap4] Seq.length (view'0 ((Snapshot.inner old_self).current).t_MyHashMap__buckets'0)
        = Seq.length (view'0 (self.current).t_MyHashMap__buckets'0)}
        {[@expl:loop invariant #6] [%#shashmap3] UIntSize.to_int i
        <= Seq.length (view'0 (self.current).t_MyHashMap__buckets'0)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = bb6
        | bb6 = bb7
        | bb7 = bb8
        | bb8 = s0
          [ s0 = len'0 {(self.current).t_MyHashMap__buckets'0} (fun (_ret':usize) ->  [ &_23 <- _ret' ] s1) | s1 = bb9 ]
          
        | bb9 = s0
          [ s0 = UIntSize.lt {i} {_23} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
          | s1 = any [ br0 -> {_21 = false} (! bb32) | br1 -> {_21} (! bb10) ]  ]
          
        | bb10 = s0
          [ s0 = {inv'2 (self.current).t_MyHashMap__buckets'0}
            Borrow.borrow_mut <t_Vec'0> {(self.current).t_MyHashMap__buckets'0}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_29 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &self <- { self with current = { t_MyHashMap__buckets'0 = _ret'.final } } ] 
                s1)
          | s1 = index_mut'0 {_29} {i} (fun (_ret':borrowed (t_List'0)) ->  [ &_28 <- _ret' ] s2)
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 = {inv'3 _28.current}
            Borrow.borrow_final <t_List'0> {_28.current} {Borrow.get_id _28}
              (fun (_ret':borrowed (t_List'0)) ->
                 [ &_27 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_28 <- { _28 with current = _ret'.final } ] 
                s1)
          | s1 = {inv'3 _27.current}
            Borrow.borrow_final <t_List'0> {_27.current} {Borrow.get_id _27}
              (fun (_ret':borrowed (t_List'0)) ->
                 [ &_26 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_27 <- { _27 with current = _ret'.final } ] 
                s2)
          | s2 =  [ &_31 <- C_Nil'0 ] s3
          | s3 = replace'0 {_26} {_31} (fun (_ret':t_List'0) ->  [ &l <- _ret' ] s4)
          | s4 = bb12 ]
          
        | bb12 = s0
          [ s0 = {[@expl:type invariant] inv'4 _28} s1
          | s1 = -{resolve'0 _28}- s2
          | s2 = {[@expl:type invariant] inv'4 _27} s3
          | s3 = -{resolve'0 _27}- s4
          | s4 = bb13 ]
          
        | bb13 = bb13
          [ bb13 = {[@expl:loop invariant #0] [%#shashmap16] inv'0 new}
            {[@expl:loop invariant #1] [%#shashmap15] inv'3 l}
            {[@expl:loop invariant #2] [%#shashmap14] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            < UIntSize.to_int i  -> Map.get (view'2 old_self) k = Map.get (view'1 new) k}
            {[@expl:loop invariant #3] [%#shashmap13] forall k : t_DeepModelTy'0 . UIntSize.to_int i
            < bucket_ix'0 (Snapshot.inner old_self).current k
            /\ bucket_ix'0 (Snapshot.inner old_self).current k
            <= Seq.length (view'0 ((Snapshot.inner old_self).current).t_MyHashMap__buckets'0)
             -> Map.get (view'1 new) k = C_None'0}
            {[@expl:loop invariant #4] [%#shashmap12] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            = UIntSize.to_int i
             -> Map.get (view'2 old_self) k
            = match get'0 l k with
              | C_None'0 -> Map.get (view'1 new) k
              | C_Some'0 v -> C_Some'0 v
              end}
            {[@expl:loop invariant #5] [%#shashmap11] no_double_binding'0 l}
            {[@expl:loop invariant #6] [%#shashmap10] good_bucket'0 (Snapshot.inner old_self).current l (UIntSize.to_int i)}
            (! s0) [ s0 = bb14 ] 
            [ bb14 = bb15
            | bb15 = bb16
            | bb16 = bb17
            | bb17 = bb18
            | bb18 = bb19
            | bb19 = bb20
            | bb20 = bb21
            | bb21 = any
              [ br0 -> {l = C_Nil'0 } (! bb28) | br1 (x0:(t_K'0, t_V'0)) (x1:t_List'0)-> {l = C_Cons'0 x0 x1} (! bb22) ]
              
            | bb22 = bb23
            | bb23 = s0
              [ s0 = v_Cons'0 {l}
                  (fun (r0'0:(t_K'0, t_V'0)) (r1'0:t_List'0) ->  [ &k <- let (r'0, _) = r0'0 in r'0 ] s1)
              | s1 = v_Cons'0 {l}
                  (fun (r0'1:(t_K'0, t_V'0)) (r1'1:t_List'0) ->  [ &v <- let (_, r'1) = r0'1 in r'1 ] s2)
              | s2 = v_Cons'0 {l} (fun (r0'2:(t_K'0, t_V'0)) (r1'2:t_List'0) ->  [ &tl <- r1'2 ] s3)
              | s3 = {inv'0 new}
                Borrow.borrow_mut <t_MyHashMap'0> {new}
                  (fun (_ret':borrowed (t_MyHashMap'0)) ->
                     [ &_46 <- _ret' ] 
                    -{inv'0 _ret'.final}-
                     [ &new <- _ret'.final ] 
                    s4)
              | s4 = add'0 {_46} {k} {v} (fun (_ret':()) ->  [ &_45 <- _ret' ] s5)
              | s5 = bb24 ]
              
            | bb24 = bb25
            | bb25 = s0 [ s0 =  [ &l <- tl ] s1 | s1 = bb27 ] 
            | bb27 = bb29
            | bb29 = bb13 ]
             ]
          
        | bb28 = s0
          [ s0 = {[@expl:type invariant] inv'3 l} s1
          | s1 = -{resolve'1 l}- s2
          | s2 = {[@expl:assertion] [%#shashmap17] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            = UIntSize.to_int i  -> Map.get (view'2 old_self) k = Map.get (view'1 new) k}
            s3
          | s3 = bb30 ]
          
        | bb30 = s0
          [ s0 = UIntSize.add {i} {[%#shashmap18] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1) | s1 = bb31 ]
          
        | bb31 = bb4 ]
         ]
      
    | bb32 = bb33
    | bb33 = s0
      [ s0 = {[@expl:type invariant] match self with
          | {current = x'0} -> inv'0 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match self with
          | {current = x'1} -> resolve'2 x'1
          | _ -> true
          end}-
        s2
      | s2 =  [ &self <- { self with current = new } ] s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'3 self}- s5
      | s5 = bb35 ]
      
    | bb35 = bb36
    | bb36 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (t_MyHashMap'0) = self
    | & old_self : Snapshot.snap_ty (borrowed (t_MyHashMap'0)) = any_l ()
    | & new : t_MyHashMap'0 = any_l ()
    | & _7 : usize = any_l ()
    | & _8 : usize = any_l ()
    | & i : usize = any_l ()
    | & _21 : bool = any_l ()
    | & _23 : usize = any_l ()
    | & l : t_List'0 = any_l ()
    | & _26 : borrowed (t_List'0) = any_l ()
    | & _27 : borrowed (t_List'0) = any_l ()
    | & _28 : borrowed (t_List'0) = any_l ()
    | & _29 : borrowed (t_Vec'0) = any_l ()
    | & _31 : t_List'0 = any_l ()
    | & k : t_K'0 = any_l ()
    | & v : t_V'0 = any_l ()
    | & tl : t_List'0 = any_l ()
    | & _45 : () = any_l ()
    | & _46 : borrowed (t_MyHashMap'0) = any_l ()
    | & old_4_0 : Snapshot.snap_ty (borrowed (t_MyHashMap'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:resize ensures] [%#shashmap21] forall k : t_DeepModelTy'0 . Map.get (view'1 self.final) k
      = Map.get (view'3 self) k}
      (! return' {result}) ]
    
end
module M_hashmap__main [#"hashmap.rs" 249 0 249 13]
  let%span shashmap0 = "hashmap.rs" 256 57 256 59
  let%span shashmap1 = "hashmap.rs" 257 57 257 59
  let%span shashmap2 = "hashmap.rs" 258 24 258 25
  let%span shashmap3 = "hashmap.rs" 259 24 259 25
  let%span shashmap4 = "hashmap.rs" 260 24 260 25
  let%span shashmap5 = "hashmap.rs" 261 24 261 25
  let%span shashmap6 = "hashmap.rs" 265 11 265 12
  let%span shashmap7 = "hashmap.rs" 265 14 265 16
  let%span shashmap8 = "hashmap.rs" 266 16 266 17
  let%span shashmap9 = "hashmap.rs" 267 16 267 17
  let%span shashmap10 = "hashmap.rs" 268 16 268 17
  let%span shashmap11 = "hashmap.rs" 269 16 269 17
  let%span shashmap12 = "hashmap.rs" 272 11 272 12
  let%span shashmap13 = "hashmap.rs" 272 14 272 16
  let%span shashmap14 = "hashmap.rs" 273 16 273 17
  let%span shashmap15 = "hashmap.rs" 274 16 274 17
  let%span shashmap16 = "hashmap.rs" 275 16 275 17
  let%span shashmap17 = "hashmap.rs" 276 16 276 17
  let%span shashmap18 = "hashmap.rs" 150 15 150 24
  let%span shashmap19 = "hashmap.rs" 152 31 152 46
  let%span shashmap20 = "hashmap.rs" 151 14 151 62
  let%span shashmap21 = "hashmap.rs" 190 16 190 20
  let%span shashmap22 = "hashmap.rs" 190 22 190 25
  let%span shashmap23 = "hashmap.rs" 190 33 190 43
  let%span shashmap24 = "hashmap.rs" 186 14 189 5
  let%span shashmap25 = "hashmap.rs" 158 20 158 24
  let%span shashmap26 = "hashmap.rs" 158 26 158 29
  let%span shashmap27 = "hashmap.rs" 158 34 158 37
  let%span shashmap28 = "hashmap.rs" 157 14 157 122
  let%span shashmap29 = "hashmap.rs" 97 8 97 33
  let%span smodel30 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span snum31 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span smodel32 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span shashmap33 = "hashmap.rs" 122 8 122 53
  let%span shashmap34 = "hashmap.rs" 31 12 34 13
  let%span shashmap35 = "hashmap.rs" 143 12 144 139
  let%span shashmap36 = "hashmap.rs" 127 20 127 66
  let%span sindex37 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sinvariant38 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span shashmap40 = "hashmap.rs" 133 12 133 91
  let%span shashmap41 = "hashmap.rs" 41 12 44 13
  let%span sinvariant42 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span shashmap43 = "hashmap.rs" 83 20 83 21
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.IntSize
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (usize, isize) (t_List'0)
  
  use seq.Seq
  
  function view'3 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'3_spec : forall self : t_Vec'0 . [%#svec39] Seq.length (view'3 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex37] Seq.get (view'3 self) ix
  
  type t_Option'1  =
    | C_None'0
    | C_Some'1 isize
  
  function deep_model'0 (self : usize) : int =
    [%#snum31] UIntSize.to_int self
  
  function get'1 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : int) : t_Option'1 =
    [%#shashmap34] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'1 v else get'1 tl index
      end
  
  function hash_log'0 [#"hashmap.rs" 82 4 82 30] (x : int) : int =
    [%#shashmap43] x
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : int) : int =
    [%#shashmap36] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'3 self.t_MyHashMap__buckets'0))
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap40] forall k : int, v : isize . get'1 l k = C_Some'1 v  -> bucket_ix'0 self k = h
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap41] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'1 tl (deep_model'0 k) = C_None'0 /\ no_double_binding'0 tl
      end
  
  predicate invariant'0 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap35] 0 < Seq.length (view'3 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  predicate inv'0 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_MyHashMap'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> true
    end)
  
  use map.Map
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : int) : t_List'0 =
    [%#shashmap33] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  use prelude.prelude.Mapping
  
  function view'0 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map int (t_Option'1) =
    [%#shashmap29] Mapping.from_fn (fun (k : int) -> get'1 (bucket'0 self k) k)
  
  use map.Map
  
  let rec new'0 (size:usize) (return'  (ret:t_MyHashMap'0))= {[@expl:new requires] [%#shashmap18] 0
    < UIntSize.to_int size}
    any
    [ return' (result:t_MyHashMap'0)-> {[%#shashmap19] inv'0 result}
      {[%#shashmap20] forall i : int . Map.get (view'0 result) i = C_None'0}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t_MyHashMap'0) =
    [%#sinvariant38] inv'0 self
  
  predicate inv'1 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_MyHashMap'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'2 (_1 : usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  type t_Option'0  =
    | C_None'1
    | C_Some'0 isize
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  function view'1 (self : t_MyHashMap'0) : Map.map int (t_Option'1) =
    [%#smodel30] view'0 self
  
  let rec get'0 (self:t_MyHashMap'0) (key:usize) (return'  (ret:t_Option'0))= {[@expl:get 'self' type invariant] [%#shashmap21] inv'1 self}
    {[@expl:get 'key' type invariant] [%#shashmap22] inv'2 key}
    any
    [ return' (result:t_Option'0)-> {[%#shashmap23] inv'3 result}
      {[%#shashmap24] match result with
        | C_Some'0 v -> Map.get (view'1 self) (deep_model'0 key) = C_Some'1 v
        | C_None'1 -> Map.get (view'1 self) (deep_model'0 key) = C_None'0
        end}
      (! return' {result}) ]
    
  
  predicate invariant'2 (self : borrowed (t_MyHashMap'0)) =
    [%#sinvariant42] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed (t_MyHashMap'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_MyHashMap'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'5 (_1 : isize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : isize [inv'5 x] . inv'5 x = true
  
  function view'2 (self : borrowed (t_MyHashMap'0)) : Map.map int (t_Option'1) =
    [%#smodel32] view'0 self.current
  
  let rec add'0 (self:borrowed (t_MyHashMap'0)) (key:usize) (val':isize) (return'  (ret:()))= {[@expl:add 'self' type invariant] [%#shashmap25] inv'4 self}
    {[@expl:add 'key' type invariant] [%#shashmap26] inv'2 key}
    {[@expl:add 'val' type invariant] [%#shashmap27] inv'5 val'}
    any
    [ return' (result:())-> {[%#shashmap28] forall i : int . Map.get (view'0 self.final) i
      = (if i = deep_model'0 key then C_Some'1 val' else Map.get (view'2 self) i)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec main'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#shashmap0] (17 : usize)} (fun (_ret':t_MyHashMap'0) ->  [ &h1 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = new'0 {[%#shashmap1] (42 : usize)} (fun (_ret':t_MyHashMap'0) ->  [ &h2 <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = get'0 {h1} {[%#shashmap2] (1 : usize)} (fun (_ret':t_Option'0) ->  [ &_x <- _ret' ] s1) | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = get'0 {h1} {[%#shashmap3] (2 : usize)} (fun (_ret':t_Option'0) ->  [ &_y <- _ret' ] s1) | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = get'0 {h2} {[%#shashmap4] (1 : usize)} (fun (_ret':t_Option'0) ->  [ &_z <- _ret' ] s1) | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = get'0 {h2} {[%#shashmap5] (2 : usize)} (fun (_ret':t_Option'0) ->  [ &_t <- _ret' ] s1) | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = {inv'0 h1}
        Borrow.borrow_mut <t_MyHashMap'0> {h1}
          (fun (_ret':borrowed (t_MyHashMap'0)) ->  [ &_12 <- _ret' ] -{inv'0 _ret'.final}-  [ &h1 <- _ret'.final ] s1)
      | s1 = add'0 {_12} {[%#shashmap6] (1 : usize)} {[%#shashmap7] (17 : isize)}
          (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = get'0 {h1} {[%#shashmap8] (1 : usize)} (fun (_ret':t_Option'0) ->  [ &_13 <- _ret' ] s1) | s1 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &_x <- _13 ] s1
      | s1 = get'0 {h1} {[%#shashmap9] (2 : usize)} (fun (_ret':t_Option'0) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &_y <- _15 ] s1
      | s1 = get'0 {h2} {[%#shashmap10] (1 : usize)} (fun (_ret':t_Option'0) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 =  [ &_z <- _17 ] s1
      | s1 = get'0 {h2} {[%#shashmap11] (2 : usize)} (fun (_ret':t_Option'0) ->  [ &_19 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 =  [ &_t <- _19 ] s1
      | s1 = {inv'0 h2}
        Borrow.borrow_mut <t_MyHashMap'0> {h2}
          (fun (_ret':borrowed (t_MyHashMap'0)) ->  [ &_22 <- _ret' ] -{inv'0 _ret'.final}-  [ &h2 <- _ret'.final ] s2)
      | s2 = add'0 {_22} {[%#shashmap12] (1 : usize)} {[%#shashmap13] (42 : isize)}
          (fun (_ret':()) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = get'0 {h1} {[%#shashmap14] (1 : usize)} (fun (_ret':t_Option'0) ->  [ &_23 <- _ret' ] s1) | s1 = bb13 ]
      
    | bb13 = s0
      [ s0 =  [ &_x <- _23 ] s1
      | s1 = get'0 {h1} {[%#shashmap15] (2 : usize)} (fun (_ret':t_Option'0) ->  [ &_25 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_y <- _25 ] s1
      | s1 = get'0 {h2} {[%#shashmap16] (1 : usize)} (fun (_ret':t_Option'0) ->  [ &_27 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0
      [ s0 =  [ &_z <- _27 ] s1
      | s1 = get'0 {h2} {[%#shashmap17] (2 : usize)} (fun (_ret':t_Option'0) ->  [ &_29 <- _ret' ] s2)
      | s2 = bb16 ]
      
    | bb16 = s0 [ s0 =  [ &_t <- _29 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & h1 : t_MyHashMap'0 = any_l ()
    | & h2 : t_MyHashMap'0 = any_l ()
    | & _x : t_Option'0 = any_l ()
    | & _y : t_Option'0 = any_l ()
    | & _z : t_Option'0 = any_l ()
    | & _t : t_Option'0 = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (t_MyHashMap'0) = any_l ()
    | & _13 : t_Option'0 = any_l ()
    | & _15 : t_Option'0 = any_l ()
    | & _17 : t_Option'0 = any_l ()
    | & _19 : t_Option'0 = any_l ()
    | & _21 : () = any_l ()
    | & _22 : borrowed (t_MyHashMap'0) = any_l ()
    | & _23 : t_Option'0 = any_l ()
    | & _25 : t_Option'0 = any_l ()
    | & _27 : t_Option'0 = any_l ()
    | & _29 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_hashmap__qyi11479661188956547742__clone__refines [#"hashmap.rs" 17 4 17 27] (* <List<T> as creusot_contracts::Clone> *)
  let%span shashmap0 = "hashmap.rs" 17 4 17 27
  let%span sinvariant1 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sboxed2 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 t_T'0 (t_List'0)
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_List'0)
  
  predicate invariant'1 (self : t_List'0) =
    [%#sboxed2] inv'1 self
  
  predicate inv'3 (_1 : t_List'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_List'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_List'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    end
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant1] inv'1 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  goal refines : [%#shashmap0] forall self : t_List'0 . inv'0 self
   -> inv'0 self /\ (forall result : t_List'0 . result = self /\ inv'1 result  -> result = self /\ inv'1 result)
end
module M_hashmap__qyi15610519155507183510__resolve_coherence__refines [#"hashmap.rs" 63 4 63 31] (* <List<(K, V)> as creusot_contracts::Resolve> *)
  let%span shashmap0 = "hashmap.rs" 63 4 63 31
  let%span shashmap1 = "hashmap.rs" 55 12 55 59
  let%span shashmap2 = "hashmap.rs" 31 12 34 13
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 68 8 68 23
  let%span sresolve4 = "../../../creusot-contracts/src/resolve.rs" 40 8 40 44
  let%span sinvariant5 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sresolve6 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sboxed7 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  type t_DeepModelTy'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap2] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  predicate resolve'9 (_1 : t_V'0)
  
  predicate resolve'6 (self : t_Option'0) =
    [%#sresolve6] match self with
      | C_Some'0 x -> resolve'9 x
      | C_None'0 -> true
      end
  
  predicate resolve'3 (_1 : t_Option'0) =
    resolve'6 _1
  
  predicate resolve'0 [#"hashmap.rs" 52 4 52 28] (self : t_List'0) =
    [%#shashmap1] forall k : t_DeepModelTy'0 . resolve'3 (get'0 self k)
  
  predicate resolve'7 (_1 : t_List'0) =
    resolve'0 _1
  
  predicate resolve'4 (self : t_List'0) =
    [%#sresolve3] resolve'7 self
  
  predicate resolve'1 (_1 : t_List'0) =
    resolve'4 _1
  
  predicate resolve'8 (_1 : t_K'0)
  
  predicate resolve'5 (self : (t_K'0, t_V'0)) =
    [%#sresolve4] resolve'8 (let (a, _) = self in a) /\ resolve'9 (let (_, a) = self in a)
  
  predicate resolve'2 (_1 : (t_K'0, t_V'0)) =
    resolve'5 _1
  
  predicate structural_resolve'0 (_1 : t_List'0) =
    match _1 with
      | C_Nil'0 -> true
      | C_Cons'0 x0 x1 -> resolve'1 x1 /\ resolve'2 x0
      end
  
  predicate inv'4 (_1 : t_K'0)
  
  predicate inv'5 (_1 : t_V'0)
  
  predicate inv'2 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'2 x] . inv'2 x
  = (let (x0, x1) = x in inv'4 x0 /\ inv'5 x1)
  
  predicate inv'1 (_1 : t_List'0)
  
  predicate invariant'1 (self : t_List'0) =
    [%#sboxed7] inv'1 self
  
  predicate inv'3 (_1 : t_List'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_List'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_List'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    end
  
  predicate invariant'0 (self : t_List'0) =
    [%#sinvariant5] inv'1 self
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  goal refines : [%#shashmap0] forall self : t_List'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_hashmap__qyi15467499327297494705__resolve_coherence__refines [#"hashmap.rs" 116 4 116 31] (* <MyHashMap<K, V> as creusot_contracts::Resolve> *)
  let%span shashmap0 = "hashmap.rs" 116 4 116 31
  let%span shashmap1 = "hashmap.rs" 107 12 107 60
  let%span shashmap2 = "hashmap.rs" 97 8 97 33
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span sinvariant4 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span shashmap5 = "hashmap.rs" 122 8 122 53
  let%span shashmap6 = "hashmap.rs" 31 12 34 13
  let%span sresolve7 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span svec8 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex9 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span shashmap10 = "hashmap.rs" 127 20 127 66
  let%span shashmap11 = "hashmap.rs" 55 12 55 59
  let%span shashmap12 = "hashmap.rs" 143 12 144 139
  let%span shashmap13 = "hashmap.rs" 133 12 133 91
  let%span shashmap14 = "hashmap.rs" 41 12 44 13
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq16 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed17 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_MyHashMap'0  =
    { t_MyHashMap__buckets'0: t_Vec'0 }
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  type t_K'0
  
  type t_V'0
  
  type t_List'0  =
    | C_Nil'0
    | C_Cons'0 (t_K'0, t_V'0) (t_List'0)
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq (t_List'0)
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec8] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_List'0 =
    [%#sindex9] Seq.get (view'1 self) ix
  
  type t_DeepModelTy'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_V'0
  
  function deep_model'0 (self : t_K'0) : t_DeepModelTy'0
  
  function get'0 [#"hashmap.rs" 29 4 29 56] (self : t_List'0) (index : t_DeepModelTy'0) : t_Option'0 =
    [%#shashmap6] match self with
      | C_Nil'0 -> C_None'0
      | C_Cons'0 (k, v) tl -> if deep_model'0 k = index then C_Some'0 v else get'0 tl index
      end
  
  predicate resolve'6 (_1 : t_V'0)
  
  predicate resolve'4 (self : t_Option'0) =
    [%#sresolve7] match self with
      | C_Some'0 x -> resolve'6 x
      | C_None'0 -> true
      end
  
  predicate resolve'2 (_1 : t_Option'0) =
    resolve'4 _1
  
  predicate resolve'7 [#"hashmap.rs" 52 4 52 28] (self : t_List'0) =
    [%#shashmap11] forall k : t_DeepModelTy'0 . resolve'2 (get'0 self k)
  
  predicate resolve'5 (_1 : t_List'0) =
    resolve'7 _1
  
  predicate resolve'3 (self : t_Vec'0) =
    [%#svec3] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> resolve'5 (index_logic'0 self i)
  
  predicate resolve'1 (_1 : t_Vec'0) =
    resolve'3 _1
  
  predicate structural_resolve'0 (_1 : t_MyHashMap'0) =
    match _1 with
      | {t_MyHashMap__buckets'0 = x0} -> resolve'1 x0
      end
  
  function hash_log'0 [#"hashmap.rs" 72 4 72 45] (_1 : t_DeepModelTy'0) : int
  
  use int.EuclideanDivision
  
  function bucket_ix'0 [#"hashmap.rs" 126 4 126 48] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : int =
    [%#shashmap10] EuclideanDivision.mod (hash_log'0 k) (Seq.length (view'1 self.t_MyHashMap__buckets'0))
  
  predicate good_bucket'0 [#"hashmap.rs" 131 4 131 57] (self : t_MyHashMap'0) (l : t_List'0) (h : int) =
    [%#shashmap13] forall k : t_DeepModelTy'0, v : t_V'0 . get'0 l k = C_Some'0 v  -> bucket_ix'0 self k = h
  
  predicate no_double_binding'0 [#"hashmap.rs" 39 4 39 38] (self : t_List'0) =
    [%#shashmap14] match self with
      | C_Nil'0 -> true
      | C_Cons'0 (k, _) tl -> get'0 tl (deep_model'0 k) = C_None'0 /\ no_double_binding'0 tl
      end
  
  predicate invariant'1 [#"hashmap.rs" 141 4 141 30] (self : t_MyHashMap'0) =
    [%#shashmap12] 0 < Seq.length (view'1 self.t_MyHashMap__buckets'0)
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 self.t_MyHashMap__buckets'0)
     -> good_bucket'0 self (index_logic'0 self.t_MyHashMap__buckets'0 i) i
    /\ no_double_binding'0 (index_logic'0 self.t_MyHashMap__buckets'0 i))
  
  use seq.Seq
  
  predicate inv'7 (_1 : t_K'0)
  
  predicate inv'8 (_1 : t_V'0)
  
  predicate inv'6 (_1 : (t_K'0, t_V'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : (t_K'0, t_V'0) [inv'6 x] . inv'6 x
  = (let (x0, x1) = x in inv'7 x0 /\ inv'8 x1)
  
  predicate inv'5 (_1 : t_List'0)
  
  predicate inv'4 (_1 : t_List'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_List'0 [inv'5 x] . inv'5 x
  = match x with
    | C_Nil'0 -> true
    | C_Cons'0 a_0 a_1 -> inv'6 a_0 /\ inv'4 a_1
    end
  
  predicate invariant'4 (self : t_List'0) =
    [%#sboxed17] inv'5 self
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_List'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq (t_List'0)) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq (t_List'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (t_List'0) [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec15] inv'3 (view'1 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate inv'1 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_MyHashMap'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_MyHashMap__buckets'0 = buckets} -> inv'2 buckets
    end)
  
  predicate invariant'0 (self : t_MyHashMap'0) =
    [%#sinvariant4] inv'1 self
  
  predicate inv'0 (_1 : t_MyHashMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_MyHashMap'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use map.Map
  
  function bucket'0 [#"hashmap.rs" 121 4 121 54] (self : t_MyHashMap'0) (k : t_DeepModelTy'0) : t_List'0 =
    [%#shashmap5] index_logic'0 self.t_MyHashMap__buckets'0 (bucket_ix'0 self k)
  
  use prelude.prelude.Mapping
  
  function view'0 [#"hashmap.rs" 96 4 96 33] (self : t_MyHashMap'0) : Map.map t_DeepModelTy'0 (t_Option'0) =
    [%#shashmap2] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  use map.Map
  
  predicate resolve'0 [#"hashmap.rs" 104 4 104 28] (self : t_MyHashMap'0) =
    [%#shashmap1] forall k : t_DeepModelTy'0 . resolve'2 (Map.get (view'0 self) k)
  
  goal refines : [%#shashmap0] forall self : t_MyHashMap'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ inv'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_hashmap__qyi9060063638777358169__hash__refines [#"hashmap.rs" 77 4 77 25] (* <usize as Hash> *)
  let%span shashmap0 = "hashmap.rs" 77 4 77 25
  let%span smodel1 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span shashmap2 = "hashmap.rs" 83 20 83 21
  let%span snum3 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UIntSize
  
  predicate inv'0 (_1 : usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : usize [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#snum3] UIntSize.to_int self
  
  function deep_model'0 (self : usize) : int =
    [%#smodel1] deep_model'1 self
  
  function hash_log'0 [#"hashmap.rs" 82 4 82 30] (x : int) : int =
    [%#shashmap2] x
  
  goal refines : [%#shashmap0] forall self : usize . inv'0 self
   -> (forall result : uint64 . UInt64.to_int result = hash_log'0 (deep_model'0 self)
   -> UInt64.to_int result = hash_log'0 (deep_model'0 self))
end
