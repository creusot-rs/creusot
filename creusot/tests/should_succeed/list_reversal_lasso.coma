
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module ListReversalLasso_Memory_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  type t_memory  =
    | C_Memory (Vec'0.t_vec usize (Global'0.t_global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_memory (input:t_memory) (ret  (field_0:Vec'0.t_vec usize (Global'0.t_global)))= any
    [ good (field_0:Vec'0.t_vec usize (Global'0.t_global))-> {C_Memory field_0 = input} (! ret {field_0})
    | bad (field_0:Vec'0.t_vec usize (Global'0.t_global))-> {C_Memory field_0 <> input} {false} any ]
    
  
  function memory_0 (self : t_memory) : Vec'0.t_vec usize (Global'0.t_global) =
    match self with
      | C_Memory a -> a
      end
end
module ListReversalLasso_Impl1_Index
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 28 15 28 34
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 29 14 29 44
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span5 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span6 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span7 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span9 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span10 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span11 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span12 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span13 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span14 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "" 0 0 0 0
  
  let%span span17 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span18 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq usize) =
    [%#span2] true
  
  predicate inv'4 (_x : Seq.seq usize)
  
  axiom inv'4 : forall x : Seq.seq usize . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span4] inv'3 self)
   -> ([%#span6] inv'4 (shallow_model'1 self))
  && ([%#span5] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span7] inv'4 (shallow_model'1 self)
  
  axiom inv'3 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'3 x = true
  
  predicate invariant'2 (self : usize) =
    [%#span2] true
  
  predicate inv'2 (_x : usize)
  
  axiom inv'2 : forall x : usize . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span2] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span2] true
  
  predicate inv'0 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  axiom inv'0 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span8] Seq.get (shallow_model'1 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'0 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span9] index_logic'1 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span10] Seq.length (shallow_model'1 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'1 (ListReversalLasso_Memory_Type.memory_0 self))
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Slice
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span11] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span12] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize =
    [%#span13] shallow_model'1 self
  
  let rec index'0 (self:Vec'0.t_vec usize (Global'0.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span16] inv'1 index}
    {[@expl:precondition] [%#span15] inv'0 self}
    {[@expl:precondition] [%#span14] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:usize)-> {[%#span18] inv'2 result}
      {[%#span17] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  let rec index (self:Memory'0.t_memory) (i:usize) (return'  (ret:usize))= {[%#slist_reversal_lasso0] nonnull_ptr'0 self i}
    (! bb0
    [ bb0 = s0
      [ s0 = Memory'0.t_memory {self}
          (fun (r0'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            index'0 {r0'0} {i} (fun (_ret':usize) ->  [ &_6 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_5 <- _6 ] s1 | s1 =  [ &_0 <- _5 ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : Memory'0.t_memory = self
    | & i : usize = i
    | & _5 : usize = any_l ()
    | & _6 : usize = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#slist_reversal_lasso1] result = index_logic'0 self i}
      (! return' {result}) ]
    
end
module ListReversalLasso_Impl2_IndexMut
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 36 15 36 34
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 37 14 37 47
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 38 14 38 47
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 39 14 39 47
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 40 4 40 113
  
  let%span span5 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span8 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span9 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span12 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span13 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span14 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span15 = "../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96
  
  let%span span16 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span17 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span18 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span19 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span24 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span25 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span26 = "" 0 0 0 0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq usize) =
    [%#span5] true
  
  predicate inv'4 (_x : Seq.seq usize)
  
  axiom inv'4 : forall x : Seq.seq usize . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span7] inv'3 self)
   -> ([%#span9] inv'4 (shallow_model'0 self))
  && ([%#span8] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span10] inv'4 (shallow_model'0 self)
  
  axiom inv'3 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'3 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed usize) =
    [%#span5] true
  
  predicate inv'2 (_x : borrowed usize)
  
  axiom inv'2 : forall x : borrowed usize . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span5] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span5] true
  
  predicate inv'0 (_x : borrowed (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'0 : forall x : borrowed (Vec'0.t_vec usize (Global'0.t_global)) . inv'0 x = true
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span11] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'0 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span12] index_logic'1 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span13] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Memory'0.t_memory)) =
    [%#span14] self.final = self.current
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span14] self.final = self.current
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span15] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span16] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span17] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) : Seq.seq usize =
    [%#span18] shallow_model'0 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span21] inv'1 index}
    {[@expl:precondition] [%#span20] inv'0 self}
    {[@expl:precondition] [%#span19] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span26] inv'2 result}
      {[%#span25] Seq.length (shallow_model'0 self.final) = Seq.length (shallow_model'1 self)}
      {[%#span24] resolve_elswhere'0 index (shallow_model'1 self) (shallow_model'0 self.final)}
      {[%#span23] has_value'0 index (shallow_model'0 self.final) result.final}
      {[%#span22] has_value'0 index (shallow_model'1 self) result.current}
      (! return' {result}) ]
    
  
  let rec index_mut (self:borrowed (Memory'0.t_memory)) (i:usize) (return'  (ret:borrowed usize))= {[%#slist_reversal_lasso0] nonnull_ptr'0 self.current i}
    (! bb0
    [ bb0 = s0
      [ s0 = Memory'0.t_memory {self.current}
          (fun (r0'0:Vec'0.t_vec usize (Global'0.t_global)) ->
            Borrow.borrow_final
              <Vec'0.t_vec usize (Global'0.t_global)>
              {r0'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
                 [ &_11 <- _ret' ] 
                Memory'0.t_memory {self.current}
                  (fun (l_0'0:Vec'0.t_vec usize (Global'0.t_global)) ->
                     [ &self <- { self with current = Memory'0.C_Memory _11.final ; } ] 
                    s1)))
      | s1 = index_mut'0 {_11} {i} (fun (_ret':borrowed usize) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <usize> {_10.current} {Borrow.get_id _10}
          (fun (_ret':borrowed usize) ->  [ &_9 <- _ret' ]  [ &_10 <- { _10 with current = _9.final ; } ] s1)
      | s1 = Borrow.borrow_final <usize> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed usize) ->  [ &_3 <- _ret' ]  [ &_9 <- { _9 with current = _3.final ; } ] s2)
      | s2 = Borrow.borrow_final <usize> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed usize) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _10}- s4
      | s4 = -{resolve'0 _9}- s5
      | s5 = -{resolve'0 _3}- s6
      | s6 = -{resolve'1 self}- s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed usize = any_l ()
    | & self : borrowed (Memory'0.t_memory) = self
    | & i : usize = i
    | & _3 : borrowed usize = any_l ()
    | & _9 : borrowed usize = any_l ()
    | & _10 : borrowed usize = any_l ()
    | & _11 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l () ]
    
    [ return' (result:borrowed usize)-> {[@expl:postcondition] [%#slist_reversal_lasso4] forall j : usize . nonnull_ptr'0 self.current j
      /\ i <> j  -> index_logic'0 self.final j = index_logic'0 self.current j}
      {[@expl:postcondition] [%#slist_reversal_lasso3] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.current))
      = Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.final))}
      {[@expl:postcondition] [%#slist_reversal_lasso2] result.final = index_logic'0 self.final i}
      {[@expl:postcondition] [%#slist_reversal_lasso1] result.current = index_logic'0 self.current i}
      (! return' {result}) ]
    
end
module ListReversalLasso_Impl4_ListReversalSafe
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 66 20 66 24
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 68 20 68 52
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 69 20 69 52
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 70 20 70 45
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 71 19 71 23
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 63 15 63 40
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 64 15 64 47
  
  let%span span7 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span13 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span15 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span16 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span17 = "../list_reversal_lasso.rs" 36 15 36 34
  
  let%span span18 = "../list_reversal_lasso.rs" 37 14 37 47
  
  let%span span19 = "../list_reversal_lasso.rs" 38 14 38 47
  
  let%span span20 = "../list_reversal_lasso.rs" 39 14 39 47
  
  let%span span21 = "../list_reversal_lasso.rs" 40 4 40 113
  
  let%span span22 = "../list_reversal_lasso.rs" 28 15 28 34
  
  let%span span23 = "../list_reversal_lasso.rs" 29 14 29 44
  
  let%span span24 = "../list_reversal_lasso.rs" 13 0 13 15
  
  let%span span25 = "../list_reversal_lasso.rs" 56 8 58 9
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq usize) =
    [%#span7] true
  
  predicate inv'1 (_x : Seq.seq usize)
  
  axiom inv'1 : forall x : Seq.seq usize . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span9] inv'0 self)
   -> ([%#span11] inv'1 (shallow_model'0 self))
  && ([%#span10] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span12] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'0 x = true
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Memory'0.t_memory)) =
    [%#span13] self.final = self.current
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span13] self.final = self.current
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span14] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  function index_logic'0 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span15] index_logic'1 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span16] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  let rec index_mut'0 (self:borrowed (Memory'0.t_memory)) (i:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span17] nonnull_ptr'0 self.current i}
    any
    [ return' (result:borrowed usize)-> {[%#span21] forall j : usize . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'0 self.final j = index_logic'0 self.current j}
      {[%#span20] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.current))
      = Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.final))}
      {[%#span19] result.final = index_logic'0 self.final i}
      {[%#span18] result.current = index_logic'0 self.current i}
      (! return' {result}) ]
    
  
  let rec index'0 (self:Memory'0.t_memory) (i:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span22] nonnull_ptr'0 self i}
    any [ return' (result:usize)-> {[%#span23] result = index_logic'0 self i} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  constant null'0 : usize = [%#span24] (18446744073709551615 : usize)
  
  predicate mem_is_well_formed'0 [#"../list_reversal_lasso.rs" 55 4 55 43] (self : Memory'0.t_memory) =
    [%#span25] forall i : usize . nonnull_ptr'0 self i
     -> index_logic'0 self i = null'0 \/ nonnull_ptr'0 self (index_logic'0 self i)
  
  use prelude.prelude.Snapshot
  
  let rec list_reversal_safe (self:borrowed (Memory'0.t_memory)) (l:usize) (return'  (ret:usize))= {[%#slist_reversal_lasso6] l
    = null'0
    \/ nonnull_ptr'0 self.current l}
    {[%#slist_reversal_lasso5] mem_is_well_formed'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : usize) ] s1
      | s1 =  [ &old_1_0 <- Snapshot.new self ] s2
      | s2 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] (Snapshot.inner old_1_0).final = self.final}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] mem_is_well_formed'0 self.current}
        {[@expl:loop invariant] [%#slist_reversal_lasso2] l = null'0 \/ nonnull_ptr'0 self.current l}
        {[@expl:loop invariant] [%#slist_reversal_lasso1] r = null'0 \/ nonnull_ptr'0 self.current r}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = UIntSize.ne {l} {[%#slist_reversal_lasso4] (18446744073709551615 : usize)}
              (fun (_ret':bool) ->  [ &_12 <- _ret' ] s1)
          | s1 = any [ br0 -> {_12 = false} (! bb6) | br1 -> {_12} (! bb3) ]  ]
          
        | bb3 = s0
          [ s0 =  [ &tmp <- l ] s1
          | s1 = index'0 {self.current} {l} (fun (_ret':usize) ->  [ &_16 <- _ret' ] s2)
          | s2 = bb4 ]
          
        | bb4 = s0
          [ s0 =  [ &l <- _16 ] s1
          | s1 = Borrow.borrow_mut <Memory'0.t_memory> {self.current}
              (fun (_ret':borrowed (Memory'0.t_memory)) ->
                 [ &_21 <- _ret' ] 
                 [ &self <- { self with current = _21.final ; } ] 
                s2)
          | s2 = index_mut'0 {_21} {tmp} (fun (_ret':borrowed usize) ->  [ &_20 <- _ret' ] s3)
          | s3 = bb5 ]
          
        | bb5 = s0
          [ s0 =  [ &_20 <- { _20 with current = r ; } ] s1
          | s1 = -{resolve'0 _20}- s2
          | s2 =  [ &r <- tmp ] s3
          | s3 = bb1 ]
           ]
         ]
      
    | bb6 = s0 [ s0 = -{resolve'1 self}- s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : borrowed (Memory'0.t_memory) = self
    | & l : usize = l
    | & r : usize = any_l ()
    | & _12 : bool = any_l ()
    | & tmp : usize = any_l ()
    | & _16 : usize = any_l ()
    | & _20 : borrowed usize = any_l ()
    | & _21 : borrowed (Memory'0.t_memory) = any_l ()
    | & old_1_0 : Snapshot.snap_ty (borrowed (Memory'0.t_memory)) = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
module ListReversalLasso_Impl4_ListReversalList
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 100 20 100 24
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 101 20 101 35
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 103 20 103 44
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 104 20 104 59
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 105 20 105 76
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 107 19 107 23
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 109 16 109 36
  
  let%span slist_reversal_lasso7 = "../list_reversal_lasso.rs" 97 15 97 31
  
  let%span slist_reversal_lasso8 = "../list_reversal_lasso.rs" 98 14 98 47
  
  let%span span9 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span13 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span14 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span16 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span17 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span18 = "../list_reversal_lasso.rs" 83 12 85 98
  
  let%span span19 = "../list_reversal_lasso.rs" 13 0 13 15
  
  let%span span20 = "../list_reversal_lasso.rs" 93 12 93 53
  
  let%span span21 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span22 = "" 0 0 0 0
  
  let%span span23 = "" 0 0 0 0
  
  let%span span24 = "../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  
  let%span span25 = "../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  let%span span26 = "" 0 0 0 0
  
  let%span span27 = "../list_reversal_lasso.rs" 36 15 36 34
  
  let%span span28 = "../list_reversal_lasso.rs" 37 14 37 47
  
  let%span span29 = "../list_reversal_lasso.rs" 38 14 38 47
  
  let%span span30 = "../list_reversal_lasso.rs" 39 14 39 47
  
  let%span span31 = "../list_reversal_lasso.rs" 40 4 40 113
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq usize) =
    [%#span9] true
  
  predicate inv'3 (_x : Seq.seq usize)
  
  axiom inv'3 : forall x : Seq.seq usize . inv'3 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'2 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span11] inv'2 self)
   -> ([%#span13] inv'3 (shallow_model'0 self))
  && ([%#span12] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'2 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span14] inv'3 (shallow_model'0 self)
  
  axiom inv'2 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span9] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed usize) =
    [%#span9] true
  
  predicate inv'0 (_x : borrowed usize)
  
  axiom inv'0 : forall x : borrowed usize . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span15] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'0 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span16] index_logic'1 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span17] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  predicate list_seg'0 [#"../list_reversal_lasso.rs" 81 4 81 81] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize) (last : usize) (l : int) (h : int)
    
   =
    [%#span18] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'0 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall j : int . forall i : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  constant null'0 : usize = [%#span19] (18446744073709551615 : usize)
  
  predicate list'0 [#"../list_reversal_lasso.rs" 91 4 91 54] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize)
    
   =
    [%#span20] list_seg'0 self first s null'0 0 (Seq.length s)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Memory'0.t_memory)) =
    [%#span21] self.final = self.current
  
  use prelude.prelude.Int
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span21] self.final = self.current
  
  let rec replace'0 (dest:borrowed usize) (src:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span23] inv'1 src}
    {[@expl:precondition] [%#span22] inv'0 dest}
    any
    [ return' (result:usize)-> {[%#span26] inv'1 result}
      {[%#span25] result = dest.current}
      {[%#span24] dest.final = src}
      (! return' {result}) ]
    
  
  let rec index_mut'0 (self:borrowed (Memory'0.t_memory)) (i:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span27] nonnull_ptr'0 self.current i}
    any
    [ return' (result:borrowed usize)-> {[%#span31] forall j : usize . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'0 self.final j = index_logic'0 self.current j}
      {[%#span30] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.current))
      = Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.final))}
      {[%#span29] result.final = index_logic'0 self.final i}
      {[%#span28] result.current = index_logic'0 self.current i}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Reverse
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec list_reversal_list (self:borrowed (Memory'0.t_memory)) (l:usize) (s:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:usize))= {[%#slist_reversal_lasso7] list'0 self.current l (Snapshot.inner s)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : usize) ] s1
      | s1 =  [ &n <- [%#slist_reversal_lasso1] Snapshot.new 0 ] s2
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &old_2_0 <- Snapshot.new self ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = self.final}
        {[@expl:loop invariant] [%#slist_reversal_lasso4] list_seg'0 self.current r (Reverse.reverse (Snapshot.inner s)) null'0 (Seq.length (Snapshot.inner s)
        - Snapshot.inner n) (Seq.length (Snapshot.inner s))}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] list_seg'0 self.current l (Snapshot.inner s) null'0 (Snapshot.inner n) (Seq.length (Snapshot.inner s))}
        {[@expl:loop invariant] [%#slist_reversal_lasso2] 0 <= Snapshot.inner n
        /\ Snapshot.inner n <= Seq.length (Snapshot.inner s)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.ne {l} {[%#slist_reversal_lasso5] (18446744073709551615 : usize)}
              (fun (_ret':bool) ->  [ &_15 <- _ret' ] s1)
          | s1 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb4) ]  ]
          
        | bb4 = s0
          [ s0 = Borrow.borrow_mut <Memory'0.t_memory> {self.current}
              (fun (_ret':borrowed (Memory'0.t_memory)) ->
                 [ &_21 <- _ret' ] 
                 [ &self <- { self with current = _21.final ; } ] 
                s1)
          | s1 = index_mut'0 {_21} {l} (fun (_ret':borrowed usize) ->  [ &_20 <- _ret' ] s2)
          | s2 = bb5 ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_final <usize> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed usize) ->  [ &_19 <- _ret' ]  [ &_20 <- { _20 with current = _19.final ; } ] s1)
          | s1 = Borrow.borrow_final <usize> {_19.current} {Borrow.get_id _19}
              (fun (_ret':borrowed usize) ->  [ &_18 <- _ret' ]  [ &_19 <- { _19 with current = _18.final ; } ] s2)
          | s2 = Borrow.borrow_mut <usize> {r}
              (fun (_ret':borrowed usize) ->  [ &_25 <- _ret' ]  [ &r <- _25.final ] s3)
          | s3 = Borrow.borrow_final <usize> {_25.current} {Borrow.get_id _25}
              (fun (_ret':borrowed usize) ->  [ &_24 <- _ret' ]  [ &_25 <- { _25 with current = _24.final ; } ] s4)
          | s4 = replace'0 {_24} {l} (fun (_ret':usize) ->  [ &_23 <- _ret' ] s5)
          | s5 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _25}- s1
          | s1 = replace'0 {_18} {_23} (fun (_ret':usize) ->  [ &_17 <- _ret' ] s2)
          | s2 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = -{resolve'0 _19}- s2
          | s2 =  [ &l <- _17 ] (any [ any_ (_any:usize)-> (!  [ &_17 <- _any ] s3) ] )
          | s3 =  [ &_27 <- [%#slist_reversal_lasso6] Snapshot.new (Snapshot.inner n + 1) ] s4
          | s4 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &n <- _27 ] (any [ any_ (_any:Snapshot.snap_ty int)-> (!  [ &_27 <- _any ] s1) ] ) | s1 = bb2 ]
           ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'1 self}- s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : borrowed (Memory'0.t_memory) = self
    | & l : usize = l
    | & s : Snapshot.snap_ty (Seq.seq usize) = s
    | & r : usize = any_l ()
    | & n : Snapshot.snap_ty int = any_l ()
    | & _15 : bool = any_l ()
    | & _17 : usize = any_l ()
    | & _18 : borrowed usize = any_l ()
    | & _19 : borrowed usize = any_l ()
    | & _20 : borrowed usize = any_l ()
    | & _21 : borrowed (Memory'0.t_memory) = any_l ()
    | & _23 : usize = any_l ()
    | & _24 : borrowed usize = any_l ()
    | & _25 : borrowed usize = any_l ()
    | & _27 : Snapshot.snap_ty int = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Memory'0.t_memory)) = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#slist_reversal_lasso8] list'0 self.final result (Reverse.reverse (Snapshot.inner s))}
      (! return' {result}) ]
    
end
module ListReversalLasso_Impl4_ListReversalLoop
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 126 20 126 24
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 127 20 127 35
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 129 20 129 48
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 129 8 129 50
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 137 19 137 23
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 138 12 138 77
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 140 16 140 36
  
  let%span slist_reversal_lasso7 = "../list_reversal_lasso.rs" 143 8 145 54
  
  let%span slist_reversal_lasso8 = "../list_reversal_lasso.rs" 122 15 122 26
  
  let%span slist_reversal_lasso9 = "../list_reversal_lasso.rs" 123 15 123 32
  
  let%span slist_reversal_lasso10 = "../list_reversal_lasso.rs" 124 14 124 101
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span14 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span15 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span16 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span18 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span19 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span20 = "../list_reversal_lasso.rs" 83 12 85 98
  
  let%span span21 = "../list_reversal_lasso.rs" 118 12 118 53
  
  let%span span22 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span23 = "" 0 0 0 0
  
  let%span span24 = "" 0 0 0 0
  
  let%span span25 = "../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  
  let%span span26 = "../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "../list_reversal_lasso.rs" 36 15 36 34
  
  let%span span29 = "../list_reversal_lasso.rs" 37 14 37 47
  
  let%span span30 = "../list_reversal_lasso.rs" 38 14 38 47
  
  let%span span31 = "../list_reversal_lasso.rs" 39 14 39 47
  
  let%span span32 = "../list_reversal_lasso.rs" 40 4 40 113
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  let%span span34 = "../list_reversal_lasso.rs" 13 0 13 15
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq usize) =
    [%#span11] true
  
  predicate inv'3 (_x : Seq.seq usize)
  
  axiom inv'3 : forall x : Seq.seq usize . inv'3 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span12] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'2 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span13] inv'2 self)
   -> ([%#span15] inv'3 (shallow_model'0 self))
  && ([%#span14] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'2 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span16] inv'3 (shallow_model'0 self)
  
  axiom inv'2 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span11] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed usize) =
    [%#span11] true
  
  predicate inv'0 (_x : borrowed usize)
  
  axiom inv'0 : forall x : borrowed usize . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span17] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'1 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span18] index_logic'2 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span19] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  predicate list_seg'0 [#"../list_reversal_lasso.rs" 81 4 81 81] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize) (last : usize) (l : int) (h : int)
    
   =
    [%#span20] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'1 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall j : int . forall i : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  predicate loop'0 [#"../list_reversal_lasso.rs" 116 4 116 55] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize)
    
   =
    [%#span21] list_seg'0 self first s (Seq.get s 0) 0 (Seq.length s)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (Memory'0.t_memory)) =
    [%#span22] self.final = self.current
  
  use prelude.prelude.Int
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span22] self.final = self.current
  
  let rec replace'0 (dest:borrowed usize) (src:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span24] inv'1 src}
    {[@expl:precondition] [%#span23] inv'0 dest}
    any
    [ return' (result:usize)-> {[%#span27] inv'1 result}
      {[%#span26] result = dest.current}
      {[%#span25] dest.final = src}
      (! return' {result}) ]
    
  
  let rec index_mut'0 (self:borrowed (Memory'0.t_memory)) (i:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span28] nonnull_ptr'0 self.current i}
    any
    [ return' (result:borrowed usize)-> {[%#span32] forall j : usize . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'1 self.final j = index_logic'1 self.current j}
      {[%#span31] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.current))
      = Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.final))}
      {[%#span30] result.final = index_logic'1 self.final i}
      {[%#span29] result.current = index_logic'1 self.current i}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Reverse
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq usize)) (ix : int) : usize =
    [%#span33] Seq.get (Snapshot.inner self) ix
  
  constant null'0 : usize = [%#span34] (18446744073709551615 : usize)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec list_reversal_loop (self:borrowed (Memory'0.t_memory)) (l:usize) (s:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:usize))= {[%#slist_reversal_lasso9] loop'0 self.current l (Snapshot.inner s)}
    {[%#slist_reversal_lasso8] Seq.length (Snapshot.inner s) > 0}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : usize) ] s1
      | s1 =  [ &n <- [%#slist_reversal_lasso1] Snapshot.new 0 ] s2
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &old_2_0 <- Snapshot.new self ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = self.final}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] Snapshot.inner n <= Seq.length (Snapshot.inner s)
         -> list_seg'0 self.current r (Reverse.reverse (Snapshot.inner s)) null'0 (Seq.length (Snapshot.inner s)
        - Snapshot.inner n) (Seq.length (Snapshot.inner s))}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] Snapshot.inner n <= Seq.length (Snapshot.inner s)
         -> list_seg'0 self.current l (Snapshot.inner s) (index_logic'0 s 0) (Snapshot.inner n) (Seq.length (Snapshot.inner s))}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] Snapshot.inner n = Seq.length (Snapshot.inner s) + 1
         -> l = null'0
        /\ r = index_logic'0 s 0
        /\ nonnull_ptr'0 self.current r
        /\ index_logic'1 self.current r = index_logic'0 s (Seq.length (Snapshot.inner s) - 1)
        /\ list_seg'0 self.current (index_logic'0 s (Seq.length (Snapshot.inner s)
        - 1)) (Reverse.reverse (Snapshot.inner s)) (index_logic'0 s 0) 0 (Seq.length (Snapshot.inner s) - 1)}
        {[@expl:loop invariant] [%#slist_reversal_lasso2] 0 <= Snapshot.inner n
        /\ Snapshot.inner n <= Seq.length (Snapshot.inner s) + 1}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.ne {l} {[%#slist_reversal_lasso4] (18446744073709551615 : usize)}
              (fun (_ret':bool) ->  [ &_17 <- _ret' ] s1)
          | s1 = any [ br0 -> {_17 = false} (! bb9) | br1 -> {_17} (! bb4) ]  ]
          
        | bb4 = s0
          [ s0 = {[@expl:assertion] [%#slist_reversal_lasso5] Snapshot.inner n = Seq.length (Snapshot.inner s)
             -> l = Seq.get (Reverse.reverse (Snapshot.inner s)) (Seq.length (Snapshot.inner s) - 1)}
            s1
          | s1 = Borrow.borrow_mut <Memory'0.t_memory> {self.current}
              (fun (_ret':borrowed (Memory'0.t_memory)) ->
                 [ &_25 <- _ret' ] 
                 [ &self <- { self with current = _25.final ; } ] 
                s2)
          | s2 = index_mut'0 {_25} {l} (fun (_ret':borrowed usize) ->  [ &_24 <- _ret' ] s3)
          | s3 = bb5 ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_final <usize> {_24.current} {Borrow.get_id _24}
              (fun (_ret':borrowed usize) ->  [ &_23 <- _ret' ]  [ &_24 <- { _24 with current = _23.final ; } ] s1)
          | s1 = Borrow.borrow_final <usize> {_23.current} {Borrow.get_id _23}
              (fun (_ret':borrowed usize) ->  [ &_22 <- _ret' ]  [ &_23 <- { _23 with current = _22.final ; } ] s2)
          | s2 = Borrow.borrow_mut <usize> {r}
              (fun (_ret':borrowed usize) ->  [ &_29 <- _ret' ]  [ &r <- _29.final ] s3)
          | s3 = Borrow.borrow_final <usize> {_29.current} {Borrow.get_id _29}
              (fun (_ret':borrowed usize) ->  [ &_28 <- _ret' ]  [ &_29 <- { _29 with current = _28.final ; } ] s4)
          | s4 = replace'0 {_28} {l} (fun (_ret':usize) ->  [ &_27 <- _ret' ] s5)
          | s5 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _29}- s1
          | s1 = replace'0 {_22} {_27} (fun (_ret':usize) ->  [ &_21 <- _ret' ] s2)
          | s2 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _24}- s1
          | s1 = -{resolve'0 _23}- s2
          | s2 =  [ &l <- _21 ] (any [ any_ (_any:usize)-> (!  [ &_21 <- _any ] s3) ] )
          | s3 =  [ &_31 <- [%#slist_reversal_lasso6] Snapshot.new (Snapshot.inner n + 1) ] s4
          | s4 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &n <- _31 ] (any [ any_ (_any:Snapshot.snap_ty int)-> (!  [ &_31 <- _any ] s1) ] ) | s1 = bb2 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = -{resolve'1 self}- s1
      | s1 = {[@expl:assertion] [%#slist_reversal_lasso7] forall i : int . 0 <= i /\ i < Seq.length (Snapshot.inner s)
         -> Seq.get (Seq.(++) (Seq.singleton (index_logic'0 s 0)) (Reverse.reverse (SeqExt.subsequence (Snapshot.inner s) 1 (Seq.length (Snapshot.inner s))))) i
        = (if i = 0 then index_logic'0 s 0 else Seq.get (Reverse.reverse (Snapshot.inner s)) (i - 1))}
        s2
      | s2 =  [ &_0 <- r ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l ()
    | & self : borrowed (Memory'0.t_memory) = self
    | & l : usize = l
    | & s : Snapshot.snap_ty (Seq.seq usize) = s
    | & r : usize = any_l ()
    | & n : Snapshot.snap_ty int = any_l ()
    | & _17 : bool = any_l ()
    | & _21 : usize = any_l ()
    | & _22 : borrowed usize = any_l ()
    | & _23 : borrowed usize = any_l ()
    | & _24 : borrowed usize = any_l ()
    | & _25 : borrowed (Memory'0.t_memory) = any_l ()
    | & _27 : usize = any_l ()
    | & _28 : borrowed usize = any_l ()
    | & _29 : borrowed usize = any_l ()
    | & _31 : Snapshot.snap_ty int = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Memory'0.t_memory)) = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#slist_reversal_lasso10] loop'0 self.final result (Seq.(++) (Seq.singleton (index_logic'0 s 0)) (Reverse.reverse (SeqExt.subsequence (Snapshot.inner s) 1 (Seq.length (Snapshot.inner s)))))}
      (! return' {result}) ]
    
end
module ListReversalLasso_Impl4_ListReversalLasso
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 169 20 169 24
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 170 20 170 35
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 172 20 172 58
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 172 8 172 60
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 190 19 190 23
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 192 16 192 36
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 161 15 161 38
  
  let%span slist_reversal_lasso7 = "../list_reversal_lasso.rs" 162 14 162 54
  
  let%span span8 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span13 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span15 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span16 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span17 = "../list_reversal_lasso.rs" 83 12 85 98
  
  let%span span18 = "../list_reversal_lasso.rs" 152 8 158 9
  
  let%span span19 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span20 = "" 0 0 0 0
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  
  let%span span23 = "../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  let%span span24 = "" 0 0 0 0
  
  let%span span25 = "../list_reversal_lasso.rs" 36 15 36 34
  
  let%span span26 = "../list_reversal_lasso.rs" 37 14 37 47
  
  let%span span27 = "../list_reversal_lasso.rs" 38 14 38 47
  
  let%span span28 = "../list_reversal_lasso.rs" 39 14 39 47
  
  let%span span29 = "../list_reversal_lasso.rs" 40 4 40 113
  
  let%span span30 = "../list_reversal_lasso.rs" 13 0 13 15
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ops.rs" 87 8 87 33
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq usize) =
    [%#span8] true
  
  predicate inv'3 (_x : Seq.seq usize)
  
  axiom inv'3 : forall x : Seq.seq usize . inv'3 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'2 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span10] inv'2 self)
   -> ([%#span12] inv'3 (shallow_model'0 self))
  && ([%#span11] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'2 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span13] inv'3 (shallow_model'0 self)
  
  axiom inv'2 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'2 x = true
  
  predicate invariant'1 (self : usize) =
    [%#span8] true
  
  predicate inv'1 (_x : usize)
  
  axiom inv'1 : forall x : usize . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed usize) =
    [%#span8] true
  
  predicate inv'0 (_x : borrowed usize)
  
  axiom inv'0 : forall x : borrowed usize . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span14] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'1 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span15] index_logic'2 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span16] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  predicate list_seg'0 [#"../list_reversal_lasso.rs" 81 4 81 81] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize) (last : usize) (l : int) (h : int)
    
   =
    [%#span17] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'1 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall j : int . forall i : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  predicate lasso'0 [#"../list_reversal_lasso.rs" 151 4 151 70] (self : Memory'0.t_memory) (first : usize) (s1 : Seq.seq usize) (s2 : Seq.seq usize)
    
   =
    [%#span18] let mid = if Seq.length s2 = 0 then Seq.get s1 (Seq.length s1 - 1) else Seq.get s2 0 in Seq.length s1 > 0
    /\ (forall j : int . forall i : int . 0 <= i /\ i < Seq.length s1 /\ 0 <= j /\ j < Seq.length s2
     -> Seq.get s1 i <> Seq.get s2 j)
    /\ list_seg'0 self first s1 mid 0 (Seq.length s1)
    /\ list_seg'0 self mid s2 (Seq.get s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Memory'0.t_memory)) =
    [%#span19] self.final = self.current
  
  use prelude.prelude.Int
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span19] self.final = self.current
  
  let rec replace'0 (dest:borrowed usize) (src:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span21] inv'1 src}
    {[@expl:precondition] [%#span20] inv'0 dest}
    any
    [ return' (result:usize)-> {[%#span24] inv'1 result}
      {[%#span23] result = dest.current}
      {[%#span22] dest.final = src}
      (! return' {result}) ]
    
  
  let rec index_mut'0 (self:borrowed (Memory'0.t_memory)) (i:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span25] nonnull_ptr'0 self.current i}
    any
    [ return' (result:borrowed usize)-> {[%#span29] forall j : usize . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'1 self.final j = index_logic'1 self.current j}
      {[%#span28] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.current))
      = Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self.final))}
      {[%#span27] result.final = index_logic'1 self.final i}
      {[%#span26] result.current = index_logic'1 self.current i}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  constant null'0 : usize = [%#span30] (18446744073709551615 : usize)
  
  use seq.Reverse
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq usize)) (ix : int) : usize =
    [%#span31] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec list_reversal_lasso (self:borrowed (Memory'0.t_memory)) (l:usize) (s1:Snapshot.snap_ty (Seq.seq usize)) (s2:Snapshot.snap_ty (Seq.seq usize)) (return'  (ret:usize))= {[%#slist_reversal_lasso6] lasso'0 self.current l (Snapshot.inner s1) (Snapshot.inner s2)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : usize) ] s1
      | s1 =  [ &n <- [%#slist_reversal_lasso1] Snapshot.new 0 ] s2
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &old_2_0 <- Snapshot.new self ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = self.final}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] let mid = if Seq.length (Snapshot.inner s2) = 0 then
          index_logic'0 s1 (Seq.length (Snapshot.inner s1) - 1)
        else
          index_logic'0 s2 (Seq.length (Snapshot.inner s2) - 1)
         in Seq.length (Snapshot.inner s1) + Seq.length (Snapshot.inner s2) < Snapshot.inner n
         -> list_seg'0 self.current l (Reverse.reverse (Snapshot.inner s1)) null'0 (Snapshot.inner n
        - Seq.length (Snapshot.inner s1)
        - Seq.length (Snapshot.inner s2)) (Seq.length (Snapshot.inner s1))
        /\ list_seg'0 self.current r (Snapshot.inner s1) mid (2 * Seq.length (Snapshot.inner s1)
        + Seq.length (Snapshot.inner s2)
        - Snapshot.inner n) (Seq.length (Snapshot.inner s1))
        /\ list_seg'0 self.current mid (Reverse.reverse (Snapshot.inner s2)) (index_logic'0 s1 (Seq.length (Snapshot.inner s1)
        - 1)) 0 (Seq.length (Snapshot.inner s2))}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] Seq.length (Snapshot.inner s1) < Snapshot.inner n
        /\ Snapshot.inner n <= Seq.length (Snapshot.inner s1) + Seq.length (Snapshot.inner s2)
         -> list_seg'0 self.current l (Snapshot.inner s2) (index_logic'0 s1 (Seq.length (Snapshot.inner s1)
        - 1)) (Snapshot.inner n - Seq.length (Snapshot.inner s1)) (Seq.length (Snapshot.inner s2))
        /\ list_seg'0 self.current r (Reverse.reverse (Snapshot.inner s2)) (index_logic'0 s1 (Seq.length (Snapshot.inner s1)
        - 1)) (Seq.length (Snapshot.inner s1) + Seq.length (Snapshot.inner s2)
        - Snapshot.inner n) (Seq.length (Snapshot.inner s2))
        /\ list_seg'0 self.current (index_logic'0 s1 (Seq.length (Snapshot.inner s1)
        - 1)) (Reverse.reverse (Snapshot.inner s1)) null'0 0 (Seq.length (Snapshot.inner s1))}
        {[@expl:loop invariant] [%#slist_reversal_lasso3] let mid = if Seq.length (Snapshot.inner s2) = 0 then
          index_logic'0 s1 (Seq.length (Snapshot.inner s1) - 1)
        else
          index_logic'0 s2 0
         in Snapshot.inner n <= Seq.length (Snapshot.inner s1)
         -> list_seg'0 self.current l (Snapshot.inner s1) mid (Snapshot.inner n) (Seq.length (Snapshot.inner s1))
        /\ list_seg'0 self.current mid (Snapshot.inner s2) (index_logic'0 s1 (Seq.length (Snapshot.inner s1)
        - 1)) 0 (Seq.length (Snapshot.inner s2))
        /\ list_seg'0 self.current r (Reverse.reverse (Snapshot.inner s1)) null'0 (Seq.length (Snapshot.inner s1)
        - Snapshot.inner n) (Seq.length (Snapshot.inner s1))}
        {[@expl:loop invariant] [%#slist_reversal_lasso2] 0 <= Snapshot.inner n
        /\ Snapshot.inner n <= 2 * Seq.length (Snapshot.inner s1) + Seq.length (Snapshot.inner s2)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.ne {l} {[%#slist_reversal_lasso4] (18446744073709551615 : usize)}
              (fun (_ret':bool) ->  [ &_17 <- _ret' ] s1)
          | s1 = any [ br0 -> {_17 = false} (! bb9) | br1 -> {_17} (! bb4) ]  ]
          
        | bb4 = s0
          [ s0 = Borrow.borrow_mut <Memory'0.t_memory> {self.current}
              (fun (_ret':borrowed (Memory'0.t_memory)) ->
                 [ &_23 <- _ret' ] 
                 [ &self <- { self with current = _23.final ; } ] 
                s1)
          | s1 = index_mut'0 {_23} {l} (fun (_ret':borrowed usize) ->  [ &_22 <- _ret' ] s2)
          | s2 = bb5 ]
          
        | bb5 = s0
          [ s0 = Borrow.borrow_final <usize> {_22.current} {Borrow.get_id _22}
              (fun (_ret':borrowed usize) ->  [ &_21 <- _ret' ]  [ &_22 <- { _22 with current = _21.final ; } ] s1)
          | s1 = Borrow.borrow_final <usize> {_21.current} {Borrow.get_id _21}
              (fun (_ret':borrowed usize) ->  [ &_20 <- _ret' ]  [ &_21 <- { _21 with current = _20.final ; } ] s2)
          | s2 = Borrow.borrow_mut <usize> {r}
              (fun (_ret':borrowed usize) ->  [ &_27 <- _ret' ]  [ &r <- _27.final ] s3)
          | s3 = Borrow.borrow_final <usize> {_27.current} {Borrow.get_id _27}
              (fun (_ret':borrowed usize) ->  [ &_26 <- _ret' ]  [ &_27 <- { _27 with current = _26.final ; } ] s4)
          | s4 = replace'0 {_26} {l} (fun (_ret':usize) ->  [ &_25 <- _ret' ] s5)
          | s5 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _27}- s1
          | s1 = replace'0 {_20} {_25} (fun (_ret':usize) ->  [ &_19 <- _ret' ] s2)
          | s2 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _22}- s1
          | s1 = -{resolve'0 _21}- s2
          | s2 =  [ &l <- _19 ] (any [ any_ (_any:usize)-> (!  [ &_19 <- _any ] s3) ] )
          | s3 =  [ &_29 <- [%#slist_reversal_lasso5] Snapshot.new (Snapshot.inner n + 1) ] s4
          | s4 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &n <- _29 ] (any [ any_ (_any:Snapshot.snap_ty int)-> (!  [ &_29 <- _any ] s1) ] ) | s1 = bb2 ]
           ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'1 self}- s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l ()
    | & self : borrowed (Memory'0.t_memory) = self
    | & l : usize = l
    | & s1 : Snapshot.snap_ty (Seq.seq usize) = s1
    | & s2 : Snapshot.snap_ty (Seq.seq usize) = s2
    | & r : usize = any_l ()
    | & n : Snapshot.snap_ty int = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : usize = any_l ()
    | & _20 : borrowed usize = any_l ()
    | & _21 : borrowed usize = any_l ()
    | & _22 : borrowed usize = any_l ()
    | & _23 : borrowed (Memory'0.t_memory) = any_l ()
    | & _25 : usize = any_l ()
    | & _26 : borrowed usize = any_l ()
    | & _27 : borrowed usize = any_l ()
    | & _29 : Snapshot.snap_ty int = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Memory'0.t_memory)) = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#slist_reversal_lasso7] lasso'0 self.final result (Snapshot.inner s1) (Reverse.reverse (Snapshot.inner s2))}
      (! return' {result}) ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module ListReversalLasso_Impl4_FindPtrInSeq_Impl
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 198 15 198 37
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 199 14 202 5
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 203 14 203 25
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s  : Seq.seq usize
  
  constant i  : int
  
  constant p  : int
  
  function find_ptr_in_seq [#"../list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq usize) (i : int) (p : int) : Option'0.t_option int
    
  
  goal vc_find_ptr_in_seq : ([%#slist_reversal_lasso0] 0 <= i /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    [%#slist_reversal_lasso1] match Option'0.C_None with
      | Option'0.C_None -> forall j : int . i <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
      | Option'0.C_Some j -> i <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
      end
  else
    if UIntSize.to_int (Seq.get s i) = p then
      [%#slist_reversal_lasso1] match Option'0.C_Some i with
        | Option'0.C_None -> forall j : int . i <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
        | Option'0.C_Some j -> i <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
        end
    else
      (([%#slist_reversal_lasso0] 0 <= i + 1 /\ i + 1 <= Seq.length s)
      /\ 0 <= ([%#slist_reversal_lasso2] Seq.length s - i)
      /\ ([%#slist_reversal_lasso2] Seq.length s - (i + 1)) < ([%#slist_reversal_lasso2] Seq.length s - i))
      /\ (([%#slist_reversal_lasso1] match find_ptr_in_seq s (i + 1) p with
        | Option'0.C_None -> forall j : int . i + 1 <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
        | Option'0.C_Some j -> i + 1 <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
        end)
       -> ([%#slist_reversal_lasso1] match find_ptr_in_seq s (i + 1) p with
        | Option'0.C_None -> forall j : int . i <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
        | Option'0.C_Some j -> i <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
        end))
    
  )
end
module ListReversalLasso_Impl4_Pigeon_Impl
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 213 15 213 21
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 214 4 214 67
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 215 4 215 113
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 216 14 216 26
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 217 14 217 20
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 218 14 218 15
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 198 15 198 37
  
  let%span slist_reversal_lasso7 = "../list_reversal_lasso.rs" 199 14 202 5
  
  let%span slist_reversal_lasso8 = "../list_reversal_lasso.rs" 203 14 203 25
  
  let%span span9 = "../list_reversal_lasso.rs" 205 8 209 9
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function find_ptr_in_seq'0 [#"../list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq usize) (i : int) (p : int) : Option'0.t_option int
    
  
  axiom find_ptr_in_seq'0_def : forall s : Seq.seq usize, i : int, p : int . find_ptr_in_seq'0 s i p
  = ([%#span9] if i = Seq.length s then
    Option'0.C_None
  else
    if UIntSize.to_int (Seq.get s i) = p then Option'0.C_Some i else find_ptr_in_seq'0 s (i + 1) p
  )
  
  axiom find_ptr_in_seq'0_spec : forall s : Seq.seq usize, i : int, p : int . ([%#slist_reversal_lasso6] 0 <= i
  /\ i <= Seq.length s)
   -> ([%#slist_reversal_lasso7] match find_ptr_in_seq'0 s i p with
    | Option'0.C_None -> forall j : int . i <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
    | Option'0.C_Some j -> i <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
    end)
  
  constant s  : Seq.seq usize
  
  constant n  : int
  
  function pigeon [#"../list_reversal_lasso.rs" 219 4 219 42] (s : Seq.seq usize) (n : int) : bool
  
  goal vc_pigeon : ([%#slist_reversal_lasso2] forall j : int . forall i : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> ([%#slist_reversal_lasso1] forall i : int . 0 <= i /\ i < Seq.length s  -> UIntSize.to_int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso0] 0 <= n)
   -> (if n = 0 then
    ([%#slist_reversal_lasso4] true) && ([%#slist_reversal_lasso3] Seq.length s <= n)
  else
    ([%#slist_reversal_lasso6] 0 <= 0 /\ 0 <= Seq.length s)
    /\ (([%#slist_reversal_lasso7] match find_ptr_in_seq'0 s 0 (n - 1) with
      | Option'0.C_None -> forall j : int . 0 <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> n - 1
      | Option'0.C_Some j -> 0 <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = n - 1
      end)
     -> match find_ptr_in_seq'0 s 0 (n - 1) with
      | Option'0.C_None -> ((([%#slist_reversal_lasso2] forall j : int . forall i : int . 0 <= i
      /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
      && ([%#slist_reversal_lasso1] forall i : int . 0 <= i /\ i < Seq.length s
       -> UIntSize.to_int (Seq.get s i) < n - 1)
      && ([%#slist_reversal_lasso0] 0 <= n - 1))
      /\ 0 <= ([%#slist_reversal_lasso5] n) /\ ([%#slist_reversal_lasso5] n - 1) < ([%#slist_reversal_lasso5] n))
      /\ (([%#slist_reversal_lasso4] pigeon s (n - 1)) && ([%#slist_reversal_lasso3] Seq.length s <= n - 1)
       -> ([%#slist_reversal_lasso4] pigeon s (n - 1)) && ([%#slist_reversal_lasso3] Seq.length s <= n))
      | Option'0.C_Some i -> ([%#slist_reversal_lasso6] 0 <= i + 1 /\ i + 1 <= Seq.length s)
      /\ (([%#slist_reversal_lasso7] match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | Option'0.C_None -> forall j : int . i + 1 <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> n - 1
        | Option'0.C_Some j -> i + 1 <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = n - 1
        end)
       -> match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | Option'0.C_None -> ((([%#slist_reversal_lasso2] forall j : int . forall i' : int . 0 <= i'
        /\ i' < Seq.length (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i + 1) (Seq.length s)))
        /\ 0 <= j
        /\ j < Seq.length (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i + 1) (Seq.length s))) /\ i' <> j
         -> Seq.get (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i + 1) (Seq.length s))) i'
        <> Seq.get (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i + 1) (Seq.length s))) j)
        && ([%#slist_reversal_lasso1] forall i' : int . 0 <= i'
        /\ i' < Seq.length (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i + 1) (Seq.length s)))
         -> UIntSize.to_int (Seq.get (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i
        + 1) (Seq.length s))) i')
        < n - 1)
        && ([%#slist_reversal_lasso0] 0 <= n - 1))
        /\ 0 <= ([%#slist_reversal_lasso5] n) /\ ([%#slist_reversal_lasso5] n - 1) < ([%#slist_reversal_lasso5] n))
        /\ (([%#slist_reversal_lasso4] pigeon (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i
        + 1) (Seq.length s))) (n - 1))
        && ([%#slist_reversal_lasso3] Seq.length (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i
        + 1) (Seq.length s)))
        <= n - 1)
         -> ([%#slist_reversal_lasso4] pigeon (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i
        + 1) (Seq.length s))) (n - 1))
        && ([%#slist_reversal_lasso3] Seq.length s <= n))
        | Option'0.C_Some _ -> ([%#slist_reversal_lasso4] true) && ([%#slist_reversal_lasso3] Seq.length s <= n)
        end)
      end)
  )
end
module ListReversalLasso_Impl4_FindLassoAux_Impl
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 236 15 236 40
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 237 15 237 53
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 238 15 238 56
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 239 14 242 5
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 243 4 243 39
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 198 15 198 37
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 199 14 202 5
  
  let%span slist_reversal_lasso7 = "../list_reversal_lasso.rs" 203 14 203 25
  
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span slist_reversal_lasso11 = "../list_reversal_lasso.rs" 213 15 213 21
  
  let%span slist_reversal_lasso12 = "../list_reversal_lasso.rs" 214 4 214 67
  
  let%span slist_reversal_lasso13 = "../list_reversal_lasso.rs" 215 4 215 113
  
  let%span slist_reversal_lasso14 = "../list_reversal_lasso.rs" 216 14 216 26
  
  let%span slist_reversal_lasso15 = "../list_reversal_lasso.rs" 217 14 217 20
  
  let%span slist_reversal_lasso16 = "../list_reversal_lasso.rs" 218 14 218 15
  
  let%span span17 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span21 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span22 = "../list_reversal_lasso.rs" 205 8 209 9
  
  let%span span23 = "../list_reversal_lasso.rs" 220 8 232 9
  
  let%span span24 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span25 = "../list_reversal_lasso.rs" 83 12 85 98
  
  let%span span26 = "../list_reversal_lasso.rs" 152 8 158 9
  
  let%span span27 = "../list_reversal_lasso.rs" 13 0 13 15
  
  let%span span28 = "../list_reversal_lasso.rs" 93 12 93 53
  
  let%span span29 = "../list_reversal_lasso.rs" 56 8 58 9
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq usize) =
    [%#span17] true
  
  predicate inv'1 (_x : Seq.seq usize)
  
  axiom inv'1 : forall x : Seq.seq usize . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span18] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#svec8] inv'0 self)
   -> ([%#svec10] inv'1 (shallow_model'0 self))
  && ([%#svec9] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span19] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'0 x = true
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span20] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'0 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span21] index_logic'1 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  function find_ptr_in_seq'0 [#"../list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq usize) (i : int) (p : int) : Option'0.t_option int
    
  
  axiom find_ptr_in_seq'0_def : forall s : Seq.seq usize, i : int, p : int . find_ptr_in_seq'0 s i p
  = ([%#span22] if i = Seq.length s then
    Option'0.C_None
  else
    if UIntSize.to_int (Seq.get s i) = p then Option'0.C_Some i else find_ptr_in_seq'0 s (i + 1) p
  )
  
  axiom find_ptr_in_seq'0_spec : forall s : Seq.seq usize, i : int, p : int . ([%#slist_reversal_lasso5] 0 <= i
  /\ i <= Seq.length s)
   -> ([%#slist_reversal_lasso6] match find_ptr_in_seq'0 s i p with
    | Option'0.C_None -> forall j : int . i <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
    | Option'0.C_Some j -> i <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
    end)
  
  use seq.Seq
  
  function pigeon'0 [#"../list_reversal_lasso.rs" 219 4 219 42] (s : Seq.seq usize) (n : int) : bool
  
  axiom pigeon'0_def : forall s : Seq.seq usize, n : int . pigeon'0 s n
  = ([%#span23] if n = 0 then
    true
  else
    match find_ptr_in_seq'0 s 0 (n - 1) with
      | Option'0.C_None -> pigeon'0 s (n - 1)
      | Option'0.C_Some i -> match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | Option'0.C_None -> pigeon'0 (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i
        + 1) (Seq.length s))) (n - 1)
        | Option'0.C_Some _ -> true
        end
      end
  )
  
  axiom pigeon'0_spec : forall s : Seq.seq usize, n : int . ([%#slist_reversal_lasso11] 0 <= n)
   -> ([%#slist_reversal_lasso12] forall i : int . 0 <= i /\ i < Seq.length s  -> UIntSize.to_int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso13] forall j : int . forall i : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> ([%#slist_reversal_lasso15] pigeon'0 s n) && ([%#slist_reversal_lasso14] Seq.length s <= n)
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span24] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  predicate list_seg'0 [#"../list_reversal_lasso.rs" 81 4 81 81] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize) (last : usize) (l : int) (h : int)
    
   =
    [%#span25] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'0 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall j : int . forall i : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  predicate lasso'0 [#"../list_reversal_lasso.rs" 151 4 151 70] (self : Memory'0.t_memory) (first : usize) (s1 : Seq.seq usize) (s2 : Seq.seq usize)
    
   =
    [%#span26] let mid = if Seq.length s2 = 0 then Seq.get s1 (Seq.length s1 - 1) else Seq.get s2 0 in Seq.length s1 > 0
    /\ (forall j : int . forall i : int . 0 <= i /\ i < Seq.length s1 /\ 0 <= j /\ j < Seq.length s2
     -> Seq.get s1 i <> Seq.get s2 j)
    /\ list_seg'0 self first s1 mid 0 (Seq.length s1)
    /\ list_seg'0 self mid s2 (Seq.get s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
  
  constant null'0 : usize = [%#span27] (18446744073709551615 : usize)
  
  predicate list'0 [#"../list_reversal_lasso.rs" 91 4 91 54] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize)
    
   =
    [%#span28] list_seg'0 self first s null'0 0 (Seq.length s)
  
  predicate mem_is_well_formed'0 [#"../list_reversal_lasso.rs" 55 4 55 43] (self : Memory'0.t_memory) =
    [%#span29] forall i : usize . nonnull_ptr'0 self i
     -> index_logic'0 self i = null'0 \/ nonnull_ptr'0 self (index_logic'0 self i)
  
  constant self  : Memory'0.t_memory
  
  constant first  : usize
  
  constant last  : usize
  
  constant s  : Seq.seq usize
  
  function find_lasso_aux [#"../list_reversal_lasso.rs" 244 4 244 95] (self : Memory'0.t_memory) (first : usize) (last : usize) (s : Seq.seq usize) : (Seq.seq usize, Option'0.t_option (Seq.seq usize))
    
  
  goal vc_find_lasso_aux : ([%#slist_reversal_lasso2] list_seg'0 self first s last 0 (Seq.length s))
   -> ([%#slist_reversal_lasso1] last = null'0 \/ nonnull_ptr'0 self last)
   -> ([%#slist_reversal_lasso0] mem_is_well_formed'0 self)
   -> (if last = null'0 then
    [%#slist_reversal_lasso3] match (s, Option'0.C_None) with
      | (s, Option'0.C_None) -> list'0 self first s
      | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
      end
  else
    ([%#slist_reversal_lasso5] 0 <= 0 /\ 0 <= Seq.length s)
    /\ (([%#slist_reversal_lasso6] match find_ptr_in_seq'0 s 0 (UIntSize.to_int last) with
      | Option'0.C_None -> forall j : int . 0 <= j /\ j < Seq.length s
       -> UIntSize.to_int (Seq.get s j) <> UIntSize.to_int last
      | Option'0.C_Some j -> 0 <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = UIntSize.to_int last
      end)
     -> match find_ptr_in_seq'0 s 0 (UIntSize.to_int last) with
      | Option'0.C_None -> ([%#svec8] inv'0 (ListReversalLasso_Memory_Type.memory_0 self))
      /\ (([%#svec10] inv'1 (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self)))
      && ([%#svec9] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
      <= UIntSize.to_int (max'0 : usize))
       -> (([%#slist_reversal_lasso13] forall j : int . forall i : int . 0 <= i
      /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
      && ([%#slist_reversal_lasso12] forall i : int . 0 <= i /\ i < Seq.length s
       -> UIntSize.to_int (Seq.get s i) < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self)))
      && ([%#slist_reversal_lasso11] 0 <= Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))))
      /\ (([%#slist_reversal_lasso15] pigeon'0 s (Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))))
      && ([%#slist_reversal_lasso14] Seq.length s
      <= Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self)))
       -> (if pigeon'0 s (Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))) then
        ((([%#slist_reversal_lasso2] list_seg'0 self first (Seq.snoc s last) (index_logic'0 self last) 0 (Seq.length (Seq.snoc s last)))
        && ([%#slist_reversal_lasso1] index_logic'0 self last = null'0 \/ nonnull_ptr'0 self (index_logic'0 self last))
        && ([%#slist_reversal_lasso0] mem_is_well_formed'0 self))
        /\ 0
        <= ([%#slist_reversal_lasso4] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
        - Seq.length s)
        /\ ([%#slist_reversal_lasso4] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
        - Seq.length (Seq.snoc s last))
        < ([%#slist_reversal_lasso4] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
        - Seq.length s))
        /\ (([%#slist_reversal_lasso3] match find_lasso_aux self first (index_logic'0 self last) (Seq.snoc s last) with
          | (s, Option'0.C_None) -> list'0 self first s
          | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
          end)
         -> ([%#slist_reversal_lasso3] match find_lasso_aux self first (index_logic'0 self last) (Seq.snoc s last) with
          | (s, Option'0.C_None) -> list'0 self first s
          | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
          end))
      else
        [%#slist_reversal_lasso3] match (s, Option'0.C_None) with
          | (s, Option'0.C_None) -> list'0 self first s
          | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
          end
      )))
      | Option'0.C_Some i -> [%#slist_reversal_lasso3] match (SeqExt.subsequence s 0 (i
      + 1), Option'0.C_Some (SeqExt.subsequence s (i + 1) (Seq.length s))) with
        | (s, Option'0.C_None) -> list'0 self first s
        | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
        end
      end)
  )
end
module ListReversalLasso_Impl4_FindLasso_Impl
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 264 15 264 40
  
  let%span slist_reversal_lasso1 = "../list_reversal_lasso.rs" 265 15 265 55
  
  let%span slist_reversal_lasso2 = "../list_reversal_lasso.rs" 266 14 269 5
  
  let%span slist_reversal_lasso3 = "../list_reversal_lasso.rs" 236 15 236 40
  
  let%span slist_reversal_lasso4 = "../list_reversal_lasso.rs" 237 15 237 53
  
  let%span slist_reversal_lasso5 = "../list_reversal_lasso.rs" 238 15 238 56
  
  let%span slist_reversal_lasso6 = "../list_reversal_lasso.rs" 239 14 242 5
  
  let%span slist_reversal_lasso7 = "../list_reversal_lasso.rs" 243 4 243 39
  
  let%span span8 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span13 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ops.rs" 31 8 31 32
  
  let%span span15 = "../list_reversal_lasso.rs" 21 8 21 31
  
  let%span span16 = "../list_reversal_lasso.rs" 50 20 50 70
  
  let%span span17 = "../list_reversal_lasso.rs" 83 12 85 98
  
  let%span span18 = "../list_reversal_lasso.rs" 198 15 198 37
  
  let%span span19 = "../list_reversal_lasso.rs" 199 14 202 5
  
  let%span span20 = "../list_reversal_lasso.rs" 203 14 203 25
  
  let%span span21 = "../list_reversal_lasso.rs" 205 8 209 9
  
  let%span span22 = "../list_reversal_lasso.rs" 213 15 213 21
  
  let%span span23 = "../list_reversal_lasso.rs" 214 4 214 67
  
  let%span span24 = "../list_reversal_lasso.rs" 215 4 215 113
  
  let%span span25 = "../list_reversal_lasso.rs" 216 14 216 26
  
  let%span span26 = "../list_reversal_lasso.rs" 217 14 217 20
  
  let%span span27 = "../list_reversal_lasso.rs" 218 14 218 15
  
  let%span span28 = "../list_reversal_lasso.rs" 220 8 232 9
  
  let%span span29 = "../list_reversal_lasso.rs" 152 8 158 9
  
  let%span span30 = "../list_reversal_lasso.rs" 13 0 13 15
  
  let%span span31 = "../list_reversal_lasso.rs" 93 12 93 53
  
  let%span span32 = "../list_reversal_lasso.rs" 56 8 58 9
  
  let%span span33 = "../list_reversal_lasso.rs" 245 8 259 9
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq usize) =
    [%#span8] true
  
  predicate inv'1 (_x : Seq.seq usize)
  
  axiom inv'1 : forall x : Seq.seq usize . inv'1 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span10] inv'0 self)
   -> ([%#span12] inv'1 (shallow_model'0 self))
  && ([%#span11] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span13] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'0 x = true
  
  use ListReversalLasso_Memory_Type as ListReversalLasso_Memory_Type
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : usize) : usize =
    [%#span14] Seq.get (shallow_model'0 self) (UIntSize.to_int ix)
  
  use ListReversalLasso_Memory_Type as Memory'0
  
  function index_logic'0 [#"../list_reversal_lasso.rs" 20 4 20 39] (self : Memory'0.t_memory) (i : usize) : usize =
    [%#span15] index_logic'1 (ListReversalLasso_Memory_Type.memory_0 self) i
  
  predicate nonnull_ptr'0 [#"../list_reversal_lasso.rs" 49 4 49 44] (self : Memory'0.t_memory) (i : usize) =
    [%#span16] Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
    <= UIntSize.to_int (max'0 : usize)
    /\ UIntSize.to_int i < Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))
  
  predicate list_seg'0 [#"../list_reversal_lasso.rs" 81 4 81 81] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize) (last : usize) (l : int) (h : int)
    
   =
    [%#span17] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'0 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall j : int . forall i : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  function find_ptr_in_seq'0 [#"../list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq usize) (i : int) (p : int) : Option'0.t_option int
    
  
  axiom find_ptr_in_seq'0_def : forall s : Seq.seq usize, i : int, p : int . find_ptr_in_seq'0 s i p
  = ([%#span21] if i = Seq.length s then
    Option'0.C_None
  else
    if UIntSize.to_int (Seq.get s i) = p then Option'0.C_Some i else find_ptr_in_seq'0 s (i + 1) p
  )
  
  axiom find_ptr_in_seq'0_spec : forall s : Seq.seq usize, i : int, p : int . ([%#span18] 0 <= i /\ i <= Seq.length s)
   -> ([%#span19] match find_ptr_in_seq'0 s i p with
    | Option'0.C_None -> forall j : int . i <= j /\ j < Seq.length s  -> UIntSize.to_int (Seq.get s j) <> p
    | Option'0.C_Some j -> i <= j /\ j < Seq.length s /\ UIntSize.to_int (Seq.get s j) = p
    end)
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  function pigeon'0 [#"../list_reversal_lasso.rs" 219 4 219 42] (s : Seq.seq usize) (n : int) : bool
  
  axiom pigeon'0_def : forall s : Seq.seq usize, n : int . pigeon'0 s n
  = ([%#span28] if n = 0 then
    true
  else
    match find_ptr_in_seq'0 s 0 (n - 1) with
      | Option'0.C_None -> pigeon'0 s (n - 1)
      | Option'0.C_Some i -> match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | Option'0.C_None -> pigeon'0 (Seq.(++) (SeqExt.subsequence s 0 i) (SeqExt.subsequence s (i
        + 1) (Seq.length s))) (n - 1)
        | Option'0.C_Some _ -> true
        end
      end
  )
  
  axiom pigeon'0_spec : forall s : Seq.seq usize, n : int . ([%#span22] 0 <= n)
   -> ([%#span23] forall i : int . 0 <= i /\ i < Seq.length s  -> UIntSize.to_int (Seq.get s i) < n)
   -> ([%#span24] forall j : int . forall i : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j
   -> Seq.get s i <> Seq.get s j)  -> ([%#span26] pigeon'0 s n) && ([%#span25] Seq.length s <= n)
  
  predicate lasso'0 [#"../list_reversal_lasso.rs" 151 4 151 70] (self : Memory'0.t_memory) (first : usize) (s1 : Seq.seq usize) (s2 : Seq.seq usize)
    
   =
    [%#span29] let mid = if Seq.length s2 = 0 then Seq.get s1 (Seq.length s1 - 1) else Seq.get s2 0 in Seq.length s1 > 0
    /\ (forall j : int . forall i : int . 0 <= i /\ i < Seq.length s1 /\ 0 <= j /\ j < Seq.length s2
     -> Seq.get s1 i <> Seq.get s2 j)
    /\ list_seg'0 self first s1 mid 0 (Seq.length s1)
    /\ list_seg'0 self mid s2 (Seq.get s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
  
  constant null'0 : usize = [%#span30] (18446744073709551615 : usize)
  
  predicate list'0 [#"../list_reversal_lasso.rs" 91 4 91 54] (self : Memory'0.t_memory) (first : usize) (s : Seq.seq usize)
    
   =
    [%#span31] list_seg'0 self first s null'0 0 (Seq.length s)
  
  predicate mem_is_well_formed'0 [#"../list_reversal_lasso.rs" 55 4 55 43] (self : Memory'0.t_memory) =
    [%#span32] forall i : usize . nonnull_ptr'0 self i
     -> index_logic'0 self i = null'0 \/ nonnull_ptr'0 self (index_logic'0 self i)
  
  function find_lasso_aux'0 [#"../list_reversal_lasso.rs" 244 4 244 95] (self : Memory'0.t_memory) (first : usize) (last : usize) (s : Seq.seq usize) : (Seq.seq usize, Option'0.t_option (Seq.seq usize))
    
  
  axiom find_lasso_aux'0_def : forall self : Memory'0.t_memory, first : usize, last : usize, s : Seq.seq usize . find_lasso_aux'0 self first last s
  = ([%#span33] if last = null'0 then
    (s, Option'0.C_None)
  else
    match find_ptr_in_seq'0 s 0 (UIntSize.to_int last) with
      | Option'0.C_None -> if pigeon'0 s (Seq.length (shallow_model'0 (ListReversalLasso_Memory_Type.memory_0 self))) then
        find_lasso_aux'0 self first (index_logic'0 self last) (Seq.snoc s last)
      else
        (s, Option'0.C_None)
      
      | Option'0.C_Some i -> (SeqExt.subsequence s 0 (i + 1), Option'0.C_Some (SeqExt.subsequence s (i
      + 1) (Seq.length s)))
      end
  )
  
  axiom find_lasso_aux'0_spec : forall self : Memory'0.t_memory, first : usize, last : usize, s : Seq.seq usize . ([%#slist_reversal_lasso3] mem_is_well_formed'0 self)
   -> ([%#slist_reversal_lasso4] last = null'0 \/ nonnull_ptr'0 self last)
   -> ([%#slist_reversal_lasso5] list_seg'0 self first s last 0 (Seq.length s))
   -> ([%#slist_reversal_lasso6] match find_lasso_aux'0 self first last s with
    | (s, Option'0.C_None) -> list'0 self first s
    | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
    end)
  
  use seq.Seq
  
  constant self  : Memory'0.t_memory
  
  constant first  : usize
  
  function find_lasso [#"../list_reversal_lasso.rs" 270 4 270 71] (self : Memory'0.t_memory) (first : usize) : (Seq.seq usize, Option'0.t_option (Seq.seq usize))
    
  
  goal vc_find_lasso : ([%#slist_reversal_lasso1] first = null'0 \/ nonnull_ptr'0 self first)
   -> ([%#slist_reversal_lasso0] mem_is_well_formed'0 self)
   -> (([%#slist_reversal_lasso5] list_seg'0 self first (Seq.empty : Seq.seq usize) first 0 (Seq.length (Seq.empty : Seq.seq usize)))
  && ([%#slist_reversal_lasso4] first = null'0 \/ nonnull_ptr'0 self first)
  && ([%#slist_reversal_lasso3] mem_is_well_formed'0 self))
  /\ (([%#slist_reversal_lasso6] match find_lasso_aux'0 self first first (Seq.empty : Seq.seq usize) with
    | (s, Option'0.C_None) -> list'0 self first s
    | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
    end)
   -> ([%#slist_reversal_lasso2] match find_lasso_aux'0 self first first (Seq.empty : Seq.seq usize) with
    | (s, Option'0.C_None) -> list'0 self first s
    | (s1, Option'0.C_Some s2) -> lasso'0 self first s1 s2
    end))
end
module ListReversalLasso_Impl0
  
end
module ListReversalLasso_Impl1
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 30 4 30 35
  
  goal index_refn : [%#slist_reversal_lasso0] true
end
module ListReversalLasso_Impl2
  let%span slist_reversal_lasso0 = "../list_reversal_lasso.rs" 41 4 41 47
  
  goal index_mut_refn : [%#slist_reversal_lasso0] true
end
