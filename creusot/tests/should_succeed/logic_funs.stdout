module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module LogicFuns_UnaryOp
  use mach.int.Int
  use mach.int.Int32
  function unary_op (n : int32) (b : bool) : int32 = 
    match (not b) with
      | True -> - n
      | False -> n
      end
end
module LogicFuns_DerefPat
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function deref_pat (p : (int32, int32)) : int32 = 
    let (a, b) = p in a + b
end
