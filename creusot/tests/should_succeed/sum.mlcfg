
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Sum_SumFirstN
  use prelude.UInt32
  use seq.Seq
  predicate invariant4 (self : Seq.seq uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Seq.seq uint32) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq uint32)
  val inv4 (_x : Seq.seq uint32) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq uint32 . inv4 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option uint32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option uint32)
  val inv3 (_x : Core_Option_Option_Type.t_option uint32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option uint32 . inv3 x = true
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use prelude.Borrow
  predicate invariant2 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32))
  val inv2 (_x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) . inv2 x = true
  predicate invariant1 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : uint32)
  val inv1 (_x : uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : uint32 . inv1 x = true
  use seq.Seq
  predicate inv0 (_x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
  val inv0 (_x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
    ensures { result = inv0 _x }
    
  use prelude.Int
  function start_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : uint32
  val start_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : uint32
    ensures { result = start_log0 self }
    
  use prelude.UInt32
  use prelude.Int
  function deep_model0 (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model0 (self : uint32) : int
    ensures { result = deep_model0 self }
    
  use seq.Seq
  function end_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : uint32
  val end_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : uint32
    ensures { result = end_log0 self }
    
  use int.Int
  function is_empty_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
  val is_empty_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
    requires {[#"../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv0 self}
    ensures { result = is_empty_log0 self }
    
  axiom is_empty_log0_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv0 self) -> ([#"../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not is_empty_log0 self -> deep_model0 (start_log0 self) <= deep_model0 (end_log0 self))
  function range_inclusive_len0 (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : int =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5] if is_empty_log0 r then
      0
    else
      deep_model0 (end_log0 r) - deep_model0 (start_log0 r) + 1
    
  val range_inclusive_len0 (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : int
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv0 r}
    ensures { result = range_inclusive_len0 r }
    
  axiom range_inclusive_len0_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv0 r) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] is_empty_log0 r = (range_inclusive_len0 r = 0))
  use seq.Seq
  predicate produces0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9] Seq.length visited = range_inclusive_len0 self - range_inclusive_len0 o /\ (is_empty_log0 self -> is_empty_log0 o) /\ (is_empty_log0 o \/ end_log0 self = end_log0 o) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> deep_model0 (Seq.get visited i) = deep_model0 (start_log0 self) + i)
  val produces0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10] ()
  val produces_trans0 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces0 a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces0 b bc c}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv0 a}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv4 ab}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv0 b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv4 bc}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32, ab : Seq.seq uint32, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32, bc : Seq.seq uint32, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces0 a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces0 b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv0 a) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv4 ab) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv0 b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv4 bc) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv0 c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10] ()
  val produces_refl0 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 22] inv0 a}
    ensures { result = produces_refl0 a }
    
  axiom produces_refl0_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 22] inv0 a) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 39] produces0 a (Seq.empty ) a)
  predicate invariant0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32 . inv0 x = true
  use prelude.Ghost
  use seq.Seq
  predicate resolve0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57] is_empty_log0 ( * self) /\ is_empty_log0 ( ^ self)
  val completed0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)) : Core_Option_Option_Type.t_option uint32
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv3 result }
    
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  predicate into_iter_post0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (res : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) (res : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  val new0 (start : uint32) (end' : uint32) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32
    requires {inv1 start}
    requires {inv1 end'}
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53] start_log0 result = start }
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49] end_log0 result = end' }
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93] deep_model0 start <= deep_model0 end' -> not is_empty_log0 result }
    ensures { inv0 result }
    
  let rec cfg sum_first_n [#"../sum.rs" 6 0 6 33] [@cfg:stackify] [@cfg:subregion_analysis] (n : uint32) : uint32
    requires {[#"../sum.rs" 4 11 4 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 5 10 5 38] UInt32.to_int result = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var n : uint32 = n;
  var sum : uint32;
  var iter : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32;
  var _7 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
  var produced : Ghost.ghost_ty (Seq.seq uint32);
  var _17 : Core_Option_Option_Type.t_option uint32;
  var _18 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
  var _19 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
  var __creusot_proc_iter_elem : uint32;
  var _22 : Ghost.ghost_ty (Seq.seq uint32);
  var i : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../sum.rs" 7 18 7 19] sum <- ([#"../sum.rs" 7 18 7 19] [#"../sum.rs" 7 18 7 19] (0 : uint32));
    [#"../sum.rs" 9 13 9 18] _7 <- ([#"../sum.rs" 9 13 9 18] new0 ([#"../sum.rs" 9 13 9 14] [#"../sum.rs" 9 13 9 14] (1 : uint32)) ([#"../sum.rs" 9 17 9 18] n));
    goto BB1
  }
  BB1 {
    [#"../sum.rs" 8 4 8 67] iter <- ([#"../sum.rs" 8 4 8 67] into_iter0 _7);
    _7 <- any Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32;
    goto BB2
  }
  BB2 {
    [#"../sum.rs" 8 4 8 67] iter_old <- ([#"../sum.rs" 8 4 8 67] Ghost.new iter);
    goto BB3
  }
  BB3 {
    [#"../sum.rs" 8 4 8 67] produced <- ([#"../sum.rs" 8 4 8 67] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant { [#"../sum.rs" 8 4 8 67] inv0 iter };
    invariant { [#"../sum.rs" 8 4 8 67] produces0 (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../sum.rs" 8 16 8 65] UInt32.to_int sum = div (Seq.length (Ghost.inner produced) * (Seq.length (Ghost.inner produced) + 1)) 2 };
    goto BB6
  }
  BB6 {
    [#"../sum.rs" 8 4 8 67] _19 <- Borrow.borrow_mut iter;
    [#"../sum.rs" 8 4 8 67] iter <-  ^ _19;
    [#"../sum.rs" 8 4 8 67] _18 <- Borrow.borrow_mut ( * _19);
    [#"../sum.rs" 8 4 8 67] _19 <- { _19 with current =  ^ _18 };
    [#"../sum.rs" 8 4 8 67] _17 <- ([#"../sum.rs" 8 4 8 67] next0 _18);
    _18 <- any borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
    goto BB7
  }
  BB7 {
    assume { resolve0 _19 };
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB8
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB8 {
    [#"../sum.rs" 12 4 12 7] _0 <- ([#"../sum.rs" 12 4 12 7] sum);
    return _0
  }
  BB9 {
    goto BB11
  }
  BB10 {
    assert { [#"../sum.rs" 8 4 8 67] false };
    absurd
  }
  BB11 {
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] Core_Option_Option_Type.some_0 _17);
    [#"../sum.rs" 8 4 8 67] _22 <- ([#"../sum.rs" 8 4 8 67] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB12
  }
  BB12 {
    [#"../sum.rs" 8 4 8 67] produced <- ([#"../sum.rs" 8 4 8 67] _22);
    [#"../sum.rs" 8 4 8 67] _22 <- any Ghost.ghost_ty (Seq.seq uint32);
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] i <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem);
    [#"../sum.rs" 10 8 10 16] sum <- ([#"../sum.rs" 10 8 10 16] sum + ([#"../sum.rs" 10 15 10 16] i));
    goto BB5
  }
  
end
