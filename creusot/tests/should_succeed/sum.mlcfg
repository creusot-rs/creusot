
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
end
module CreusotContracts_Std1_Ops_Impl5_StartLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_StartLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_StartLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = start_log self }
    
end
module CreusotContracts_Std1_Ops_Impl5_EndLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_EndLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_EndLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = end_log self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Interface
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self))
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
  val is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = is_empty_log self }
    
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self))
end
module Core_Ops_Range_Impl7_New_Interface
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val new [@cfg:stackify] (start : idx) (end' : idx) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
    ensures { StartLog0.start_log result = start }
    ensures { EndLog0.end_log result = end' }
    ensures { LeLog0.le_log (DeepModel0.deep_model start) (DeepModel0.deep_model end') -> not IsEmptyLog0.is_empty_log result }
    
end
module Core_Ops_Range_Impl7_New
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Interface as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Interface as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Interface as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val new [@cfg:stackify] (start : idx) (end' : idx) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
    ensures { StartLog0.start_log result = start }
    ensures { EndLog0.end_log result = end' }
    ensures { LeLog0.le_log (DeepModel0.deep_model start) (DeepModel0.deep_model end') -> not IsEmptyLog0.is_empty_log result }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module CreusotContracts_Std1_Ops_Impl4_Invariant_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl4_Invariant_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl4_Invariant
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) =
    true
  val invariant' (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module Core_Iter_Range_Impl12_Item_Type
  type a
  type item  =
    a
end
module Core_Iter_Range_Impl12_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl12_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Range_Impl12_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Range_Impl12_Item_Type as Item1 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Interface as Produces0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a,
    type Item0.item = Item1.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Interface as Completed0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Interface as Invariant0 with
    type idx = a
  val next [@cfg:stackify] (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)) : Core_Option_Option_Type.t_option a
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Stub
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Interface
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog
  use mach.int.Int
  use int.Int
  predicate le_log (self : int) (_2' : int) =
    Int.(<=) self _2'
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub
  type idx
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Interface
  type idx
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0)
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen
  type idx
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int =
    if IsEmptyLog0.is_empty_log r then
      0
    else
      DeepModel0.deep_model (EndLog0.end_log r) - DeepModel0.deep_model (StartLog0.start_log r) + 1
    
  val range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
    ensures { result = range_inclusive_len r }
    
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0)
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub as RangeInclusiveLen0 with
    type idx = idx,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
   =
    Seq.length visited = RangeInclusiveLen0.range_inclusive_len self - RangeInclusiveLen0.range_inclusive_len o /\ (IsEmptyLog0.is_empty_log self -> IsEmptyLog0.is_empty_log o) /\ (IsEmptyLog0.is_empty_log o \/ EndLog0.end_log self = EndLog0.end_log o) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (StartLog0.start_log self) + i)
  val produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Int_Impl12_DeepModel_Stub
  use mach.int.Int
  use mach.int.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_DeepModel_Interface
  use mach.int.Int
  use mach.int.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_DeepModel
  use mach.int.Int
  use mach.int.UInt32
  function deep_model (self : uint32) : int =
    UInt32.to_int self
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl12_DeepModelTy_Type
  use mach.int.Int
  type deepModelTy  =
    int
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl4_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_Impl1_LeLog_Stub as LeLog0
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) =
    IsEmptyLog0.is_empty_log ( * self) /\ IsEmptyLog0.is_empty_log ( ^ self)
  val completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) : bool
    ensures { result = completed self }
    
end
module Sum_SumFirstN_Interface
  use mach.int.UInt32
  use mach.int.Int
  val sum_first_n [@cfg:stackify] [#"../sum.rs" 6 0 6 33] (n : uint32) : uint32
    requires {[#"../sum.rs" 4 11 4 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 5 10 5 38] UInt32.to_int result = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2 }
    
end
module Sum_SumFirstN
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use prelude.IntSize
  clone CreusotContracts_Logic_Ord_Impl1_LeLog as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog as EndLog0 with
    type idx = uint32
  clone CreusotContracts_Logic_Int_Impl12_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Ops_Impl5_StartLog as StartLog0 with
    type idx = uint32
  clone CreusotContracts_Logic_Int_Impl12_DeepModelTy_Type as DeepModelTy0
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog as IsEmptyLog0 with
    type idx = uint32,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Completed as Completed0 with
    type idx = uint32,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log
  clone Core_Iter_Range_Impl12_Item_Type as Item0 with
    type a = uint32
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen as RangeInclusiveLen0 with
    type idx = uint32,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces as Produces0 with
    type idx = uint32,
    function RangeInclusiveLen0.range_inclusive_len = RangeInclusiveLen0.range_inclusive_len,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log,
    predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Std1_Ops_Impl4_Invariant as Invariant0 with
    type idx = uint32
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans as ProducesTrans0 with
    type idx = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl as ProducesRefl0 with
    type idx = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl12_Next_Interface as Next0 with
    type a = uint32,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32
  clone Core_Ops_Range_Impl7_New_Interface as New0 with
    type idx = uint32,
    function StartLog0.start_log = StartLog0.start_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  let rec cfg sum_first_n [@cfg:stackify] [#"../sum.rs" 6 0 6 33] (n : uint32) : uint32
    requires {[#"../sum.rs" 4 11 4 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 5 10 5 38] UInt32.to_int result = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var n_1 : uint32;
  var sum_4 : uint32;
  var _5 : ();
  var iter_6 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32;
  var _7 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32;
  var _8 : uint32;
  var iter_old_9 : Ghost.ghost_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
  var _11 : ();
  var produced_12 : Ghost.ghost_ty (Seq.seq uint32);
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option uint32;
  var _21 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
  var _22 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive uint32);
  var _23 : isize;
  var i_24 : uint32;
  var _25 : Ghost.ghost_ty (Seq.seq uint32);
  var _27 : ();
  var i_28 : uint32;
  var _29 : uint32;
  var _30 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    sum_4 <- ([#"../sum.rs" 7 18 7 19] (0 : uint32));
    _8 <- n_1;
    _7 <- ([#"../sum.rs" 9 13 9 18] New0.new ([#"../sum.rs" 9 13 9 14] (0 : uint32)) _8);
    goto BB1
  }
  BB1 {
    iter_6 <- ([#"../sum.rs" 8 4 8 78] IntoIter0.into_iter _7);
    goto BB2
  }
  BB2 {
    _11 <- ();
    iter_old_9 <- ([#"../sum.rs" 8 4 8 78] Ghost.new iter_6);
    goto BB3
  }
  BB3 {
    _15 <- ();
    produced_12 <- ([#"../sum.rs" 8 4 8 78] Ghost.new (Seq.empty ));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant type_invariant { [#"../sum.rs" 8 4 8 78] Invariant0.invariant' iter_6 };
    invariant structural { [#"../sum.rs" 8 4 8 78] Produces0.produces (Ghost.inner iter_old_9) (Ghost.inner produced_12) iter_6 };
    invariant sum_value { [#"../sum.rs" 8 27 8 76] UInt32.to_int sum_4 = div (Seq.length (Ghost.inner produced_12) * (Seq.length (Ghost.inner produced_12) - 1)) 2 };
    _22 <- borrow_mut iter_6;
    iter_6 <-  ^ _22;
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../sum.rs" 8 4 8 78] Next0.next _21);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _22 };
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      end
  }
  BB7 {
    _5 <- ();
    _0 <- sum_4;
    return _0
  }
  BB8 {
    absurd
  }
  BB9 {
    i_24 <- Core_Option_Option_Type.some_0 _20;
    _27 <- ();
    _25 <- ([#"../sum.rs" 8 4 8 78] Ghost.new (Seq.(++) (Ghost.inner produced_12) (Seq.singleton i_24)));
    goto BB10
  }
  BB10 {
    produced_12 <- _25;
    _25 <- any Ghost.ghost_ty (Seq.seq uint32);
    i_28 <- i_24;
    _29 <- i_28;
    sum_4 <- ([#"../sum.rs" 10 8 10 16] sum_4 + _29);
    _19 <- ();
    goto BB5
  }
  
end
