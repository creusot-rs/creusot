
module Sum_SumFirstN_Interface
  use mach.int.Int
  use mach.int.UInt32
  val sum_first_n [@cfg:stackify] (n : uint32) : uint32
    requires {[#"../sum.rs" 4 11 4 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 5 10 5 38] UInt32.to_int result = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2 }
    
end
module Sum_SumFirstN
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg sum_first_n [@cfg:stackify] [#"../sum.rs" 6 0 6 33] (n : uint32) : uint32
    requires {[#"../sum.rs" 4 11 4 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 5 10 5 38] UInt32.to_int result = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var n_1 : uint32;
  var sum_4 : uint32;
  var i_5 : uint32;
  var _6 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : uint32;
  var _12 : uint32;
  var _13 : uint32;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    sum_4 <- (0 : uint32);
    i_5 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant bound { [#"../sum.rs" 9 23 9 29] i_5 <= n_1 };
    invariant sum_value { [#"../sum.rs" 10 27 10 52] UInt32.to_int sum_4 = div (UInt32.to_int i_5 * (UInt32.to_int i_5 + 1)) 2 };
    _11 <- i_5;
    _12 <- n_1;
    _10 <- ([#"../sum.rs" 11 10 11 15] _11 < _12);
    switch (_10)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    i_5 <- ([#"../sum.rs" 12 8 12 14] i_5 + (1 : uint32));
    _13 <- i_5;
    sum_4 <- ([#"../sum.rs" 13 8 13 16] sum_4 + _13);
    _9 <- ();
    goto BB1
  }
  BB3 {
    _6 <- ();
    _0 <- sum_4;
    return _0
  }
  
end
