
module TwoModules_Mod1_T_Type
  type t_t  =
    | C_A
    | C_B
    | C_C
    
end
module TwoModules_Mod2_X_Interface
  use TwoModules_Mod1_T_Type as TwoModules_Mod1_T_Type
  val x [#"../two_modules.rs" 15 4 15 33] (_t : TwoModules_Mod1_T_Type.t_t) : bool
end
module TwoModules_Mod2_X
  use TwoModules_Mod1_T_Type as TwoModules_Mod1_T_Type
  let rec cfg x [#"../two_modules.rs" 15 4 15 33] [@cfg:stackify] [@cfg:subregion_analysis] (_t : TwoModules_Mod1_T_Type.t_t) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _t_1 : TwoModules_Mod1_T_Type.t_t;
  {
    _t_1 <- _t;
    goto BB0
  }
  BB0 {
    _0 <- ([#"../two_modules.rs" 16 8 16 12] true);
    return _0
  }
  
end
module TwoModules_F_Interface
  val f [#"../two_modules.rs" 22 0 22 10] (_1' : ()) : ()
end
module TwoModules_F
  use TwoModules_Mod1_T_Type as TwoModules_Mod1_T_Type
  clone TwoModules_Mod2_X_Interface as X0
  let rec cfg f [#"../two_modules.rs" 22 0 22 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : bool;
  var _2 : TwoModules_Mod1_T_Type.t_t;
  {
    goto BB0
  }
  BB0 {
    _2 <- TwoModules_Mod1_T_Type.C_B;
    _1 <- ([#"../two_modules.rs" 23 4 23 14] X0.x _2);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
