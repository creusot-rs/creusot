
module MappingTest_T_Type
  use prelude.Int32
  use prelude.Int
  type t_t  =
    | C_T int32
    
  let function t_a (self : t_t) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_T a -> a
      end
end
module MappingTest_Incr
  use prelude.Int
  use map.Map
  use prelude.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  use map.Map
  use prelude.Int
  function shallow_model0 [#"../mapping_test.rs" 22 4 22 50] (self : MappingTest_T_Type.t_t) : Map.map int int
  val shallow_model0 [#"../mapping_test.rs" 22 4 22 50] (self : MappingTest_T_Type.t_t) : Map.map int int
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 19 4 21 74] forall i : int . Map.get (shallow_model0 self) i = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then
    1
  else
    0
  )
  use prelude.Borrow
  function shallow_model3 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int
    ensures { result = shallow_model3 self }
    
  use prelude.Snapshot
  use map.Map
  use prelude.Snapshot
  function shallow_model4 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model3 self
  val shallow_model4 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int
    ensures { result = shallow_model4 self }
    
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t))) : Map.map int int =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model4 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t))) : Map.map int int
    ensures { result = shallow_model1 self }
    
  predicate resolve0 (self : borrowed (MappingTest_T_Type.t_t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (MappingTest_T_Type.t_t)) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int32
  use prelude.Snapshot
  let rec cfg incr [#"../mapping_test.rs" 30 0 30 18] [@cfg:stackify] [@cfg:subregion_analysis] (t : borrowed (MappingTest_T_Type.t_t)) : ()
    requires {[#"../mapping_test.rs" 27 12 27 24] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    requires {[#"../mapping_test.rs" 28 12 28 26] Int32.to_int (MappingTest_T_Type.t_a ( * t)) < 1000}
    ensures { [#"../mapping_test.rs" 29 11 29 37] shallow_model0 ( ^ t) = Map.set (shallow_model3 t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t : borrowed (MappingTest_T_Type.t_t) = t;
  var old_t : Snapshot.snap_ty (borrowed (MappingTest_T_Type.t_t));
  {
    goto BB0
  }
  BB0 {
    [#"../mapping_test.rs" 31 16 31 31] old_t <- ([#"../mapping_test.rs" 31 16 31 31] Snapshot.new t);
    goto BB1
  }
  BB1 {
    [#"../mapping_test.rs" 32 4 32 15] t <- { t with current = (let MappingTest_T_Type.C_T x0 =  * t in MappingTest_T_Type.C_T (MappingTest_T_Type.t_a ( * t) + ([#"../mapping_test.rs" 32 14 32 15] (1 : int32)))) ; };
    assume { resolve0 t };
    assert { [@expl:assertion] [#"../mapping_test.rs" 35 19 35 50] shallow_model0 ( ^ t) = Map.set (shallow_model1 old_t) (Int32.to_int (MappingTest_T_Type.t_a ( * Snapshot.inner old_t))) 1 };
    [#"../mapping_test.rs" 30 19 36 1] _0 <- ([#"../mapping_test.rs" 30 19 36 1] ());
    return _0
  }
  
end
module MappingTest_F
  use prelude.Borrow
  use MappingTest_T_Type as MappingTest_T_Type
  predicate resolve0 (self : borrowed (MappingTest_T_Type.t_t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (MappingTest_T_Type.t_t)) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  use map.Map
  use map.Map
  use prelude.Int32
  use map.Map
  use prelude.Int
  function shallow_model0 [#"../mapping_test.rs" 22 4 22 50] (self : MappingTest_T_Type.t_t) : Map.map int int
  val shallow_model0 [#"../mapping_test.rs" 22 4 22 50] (self : MappingTest_T_Type.t_t) : Map.map int int
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 19 4 21 74] forall i : int . Map.get (shallow_model0 self) i = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then
    1
  else
    0
  )
  function shallow_model2 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model0 ( * self)
  val shallow_model2 (self : borrowed (MappingTest_T_Type.t_t)) : Map.map int int
    ensures { result = shallow_model2 self }
    
  val incr0 [#"../mapping_test.rs" 30 0 30 18] (t : borrowed (MappingTest_T_Type.t_t)) : ()
    requires {[#"../mapping_test.rs" 27 12 27 24] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    requires {[#"../mapping_test.rs" 28 12 28 26] Int32.to_int (MappingTest_T_Type.t_a ( * t)) < 1000}
    ensures { [#"../mapping_test.rs" 29 11 29 37] shallow_model0 ( ^ t) = Map.set (shallow_model2 t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1 }
    
  use prelude.Int32
  let rec cfg f [#"../mapping_test.rs" 38 0 38 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : MappingTest_T_Type.t_t;
  var _6 : ();
  var _7 : borrowed (MappingTest_T_Type.t_t);
  var _8 : borrowed (MappingTest_T_Type.t_t);
  {
    goto BB0
  }
  BB0 {
    [#"../mapping_test.rs" 39 16 39 27] x <- MappingTest_T_Type.C_T ([#"../mapping_test.rs" 39 23 39 25] (42 : int32));
    assert { [@expl:assertion] [#"../mapping_test.rs" 40 19 40 34] Map.get (shallow_model0 x) 13 = 1 };
    assert { [@expl:assertion] [#"../mapping_test.rs" 41 19 41 34] Map.get (shallow_model0 x) 42 = 0 };
    [#"../mapping_test.rs" 42 9 42 15] _8 <- Borrow.borrow_mut x;
    [#"../mapping_test.rs" 42 9 42 15] x <-  ^ _8;
    [#"../mapping_test.rs" 42 9 42 15] _7 <- Borrow.borrow_final ( * _8) (Borrow.get_id _8);
    [#"../mapping_test.rs" 42 9 42 15] _8 <- { _8 with current = ( ^ _7) ; };
    [#"../mapping_test.rs" 42 4 42 16] _6 <- ([#"../mapping_test.rs" 42 4 42 16] incr0 _7);
    _7 <- any borrowed (MappingTest_T_Type.t_t);
    goto BB1
  }
  BB1 {
    assume { resolve0 _8 };
    assert { [@expl:assertion] [#"../mapping_test.rs" 43 19 43 34] Map.get (shallow_model0 x) 13 = 1 };
    assert { [@expl:assertion] [#"../mapping_test.rs" 44 19 44 34] Map.get (shallow_model0 x) 42 = 1 };
    [#"../mapping_test.rs" 38 11 45 1] _0 <- ([#"../mapping_test.rs" 38 11 45 1] ());
    return _0
  }
  
end
module MappingTest_Impl0
  
end
