
module MappingTest_T_Type
  use mach.int.Int
  use mach.int.Int32
  type t_t  =
    | C_T int32
    
  let function t_a (self : t_t) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_T a -> a
      end
end
module MappingTest_Impl0_ShallowModel_Stub
  use mach.int.Int
  use map.Map
  use mach.int.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  function shallow_model [#"../mapping_test.rs" 21 4 21 50] (self : MappingTest_T_Type.t_t) : Map.map int int
end
module MappingTest_Impl0_ShallowModel_Interface
  use mach.int.Int
  use map.Map
  use mach.int.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  function shallow_model [#"../mapping_test.rs" 21 4 21 50] (self : MappingTest_T_Type.t_t) : Map.map int int
  axiom shallow_model_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 18 4 20 74] forall i : int . Map.get (shallow_model self) i = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then
    1
  else
    0
  )
end
module MappingTest_Impl0_ShallowModel
  use mach.int.Int
  use map.Map
  use mach.int.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  function shallow_model [#"../mapping_test.rs" 21 4 21 50] (self : MappingTest_T_Type.t_t) : Map.map int int
  val shallow_model [#"../mapping_test.rs" 21 4 21 50] (self : MappingTest_T_Type.t_t) : Map.map int int
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 18 4 20 74] forall i : int . Map.get (shallow_model self) i = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then
    1
  else
    0
  )
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module MappingTest_Impl0_ShallowModelTy_Type
  use map.Map
  use mach.int.Int
  type shallowModelTy  =
    Map.map int int
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModelTy_Type
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  type shallowModelTy  =
    ShallowModelTy0.shallowModelTy
end
module MappingTest_Incr_Interface
  use prelude.Borrow
  use mach.int.Int32
  use mach.int.Int
  use map.Map
  clone MappingTest_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use MappingTest_T_Type as MappingTest_T_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = MappingTest_T_Type.t_t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone MappingTest_Impl0_ShallowModel_Stub as ShallowModel0 with
    axiom .
  val incr [@cfg:stackify] [#"../mapping_test.rs" 29 0 29 18] (t : borrowed (MappingTest_T_Type.t_t)) : ()
    requires {[#"../mapping_test.rs" 26 12 26 24] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    requires {[#"../mapping_test.rs" 27 12 27 26] Int32.to_int (MappingTest_T_Type.t_a ( * t)) < 1000}
    ensures { [#"../mapping_test.rs" 28 11 28 37] ShallowModel0.shallow_model ( ^ t) = Map.set (ShallowModel1.shallow_model t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1 }
    
end
module MappingTest_Incr
  use prelude.Borrow
  use prelude.Ghost
  use mach.int.Int32
  use mach.int.Int
  use map.Map
  use MappingTest_T_Type as MappingTest_T_Type
  clone MappingTest_Impl0_ShallowModel as ShallowModel0 with
    axiom .
  clone MappingTest_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = MappingTest_T_Type.t_t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModelTy_Type as ShallowModelTy1 with
    type t = MappingTest_T_Type.t_t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (MappingTest_T_Type.t_t),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel2 with
    type t = borrowed (MappingTest_T_Type.t_t),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = MappingTest_T_Type.t_t
  let rec cfg incr [@cfg:stackify] [#"../mapping_test.rs" 29 0 29 18] (t : borrowed (MappingTest_T_Type.t_t)) : ()
    requires {[#"../mapping_test.rs" 26 12 26 24] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    requires {[#"../mapping_test.rs" 27 12 27 26] Int32.to_int (MappingTest_T_Type.t_a ( * t)) < 1000}
    ensures { [#"../mapping_test.rs" 28 11 28 37] ShallowModel0.shallow_model ( ^ t) = Map.set (ShallowModel1.shallow_model t) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t_1 : borrowed (MappingTest_T_Type.t_t);
  var old_t_5 : Ghost.ghost_ty (borrowed (MappingTest_T_Type.t_t));
  var _7 : ();
  var _8 : ();
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_t_5 <- ([#"../mapping_test.rs" 30 16 30 28] Ghost.new t_1);
    goto BB1
  }
  BB1 {
    t_1 <- { t_1 with current = (let MappingTest_T_Type.C_T a =  * t_1 in MappingTest_T_Type.C_T ([#"../mapping_test.rs" 31 4 31 15] MappingTest_T_Type.t_a ( * t_1) + ([#"../mapping_test.rs" 31 14 31 15] (1 : int32)))) };
    assume { Resolve0.resolve t_1 };
    assert { [#"../mapping_test.rs" 34 19 34 50] ShallowModel0.shallow_model ( ^ t_1) = Map.set (ShallowModel2.shallow_model old_t_5) (Int32.to_int (MappingTest_T_Type.t_a ( * Ghost.inner old_t_5))) 1 };
    _8 <- ();
    _0 <- ();
    return _0
  }
  
end
module MappingTest_F_Interface
  val f [@cfg:stackify] [#"../mapping_test.rs" 37 0 37 10] (_1' : ()) : ()
end
module MappingTest_F
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use map.Map
  clone MappingTest_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use MappingTest_T_Type as MappingTest_T_Type
  clone MappingTest_Impl0_ShallowModel as ShallowModel0 with
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = MappingTest_T_Type.t_t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = MappingTest_T_Type.t_t
  clone MappingTest_Incr_Interface as Incr0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  let rec cfg f [@cfg:stackify] [#"../mapping_test.rs" 37 0 37 10] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : MappingTest_T_Type.t_t;
  var _2 : ();
  var _4 : ();
  var _6 : ();
  var _7 : borrowed (MappingTest_T_Type.t_t);
  var _8 : borrowed (MappingTest_T_Type.t_t);
  var _9 : ();
  var _11 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- MappingTest_T_Type.C_T ([#"../mapping_test.rs" 38 23 38 25] (42 : int32));
    assert { [#"../mapping_test.rs" 39 19 39 36] Map.get (ShallowModel0.shallow_model x_1) 13 = 1 };
    _2 <- ();
    assert { [#"../mapping_test.rs" 40 19 40 36] Map.get (ShallowModel0.shallow_model x_1) 42 = 0 };
    _4 <- ();
    _8 <- borrow_mut x_1;
    x_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _6 <- ([#"../mapping_test.rs" 41 4 41 16] Incr0.incr _7);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _8 };
    assert { [#"../mapping_test.rs" 42 19 42 36] Map.get (ShallowModel0.shallow_model x_1) 13 = 1 };
    _9 <- ();
    assert { [#"../mapping_test.rs" 43 19 43 36] Map.get (ShallowModel0.shallow_model x_1) 42 = 1 };
    _11 <- ();
    _0 <- ();
    return _0
  }
  
end
module MappingTest_Impl0
  
end
