
module Knapsack_Max
  use int.MinMax
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg max [#"../knapsack.rs" 15 0 15 35] [@cfg:stackify] [@cfg:subregion_analysis] (a : usize) (b : usize) : usize
    requires {[#"../knapsack.rs" 13 11 13 15] true}
    ensures { [#"../knapsack.rs" 14 10 14 31] UIntSize.to_int result
    = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var a : usize = a;
  var b : usize = b;
  var _5 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../knapsack.rs" 16 7 16 12] _5 <- a < b;
    switch (_5)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../knapsack.rs" 17 8 17 9] _0 <- b;
    goto BB3
  }
  BB2 {
    [#"../knapsack.rs" 19 8 19 9] _0 <- a;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Knapsack_Item_Type
  use prelude.UIntSize
  use prelude.Int
  type t_item 'name =
    | C_Item 'name usize usize
    
  let function item_weight (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Item _ a _ -> a
      end
  let function item_value (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Item _ _ a -> a
      end
end
module Knapsack_M_Impl
  type name
  use Knapsack_Item_Type as Knapsack_Item_Type
  use seq.Seq
  predicate invariant0 (self : Seq.seq (Knapsack_Item_Type.t_item name))
  val invariant0 (self : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Seq.seq (Knapsack_Item_Type.t_item name))
  val inv0 (_x : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Seq.seq (Knapsack_Item_Type.t_item name) . inv0 x = true
  use int.MinMax
  use prelude.UIntSize
  use prelude.UIntSize
  use seq.Seq
  use seq.Seq
  use prelude.Int
  constant items  : Seq.seq (Knapsack_Item_Type.t_item name)
  constant i  : int
  constant w  : int
  function m [#"../knapsack.rs" 34 0 34 57] (items : Seq.seq (Knapsack_Item_Type.t_item name)) (i : int) (w : int) : int
  goal vc_m : ([#"../knapsack.rs" 34 11 34 16] inv0 items)
   -> ([#"../knapsack.rs" 32 11 32 17] 0 <= w)
   -> ([#"../knapsack.rs" 31 11 31 37] 0 <= i /\ i <= Seq.length items)
   -> match i = 0 with
    | True -> [#"../knapsack.rs" 33 10 33 21] 0 >= 0
    | False -> match UIntSize.to_int (Knapsack_Item_Type.item_weight (Seq.get items (i - 1))) > w with
      | True -> ((([#"../knapsack.rs" 34 11 34 16] inv0 items)
      && ([#"../knapsack.rs" 32 11 32 17] 0 <= w)
      && ([#"../knapsack.rs" 31 11 31 37] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([#"../knapsack.rs" 30 10 30 11] i)
      /\ ([#"../knapsack.rs" 30 10 30 11] i - 1) < ([#"../knapsack.rs" 30 10 30 11] i))
      /\ (([#"../knapsack.rs" 33 10 33 21] m items (i - 1) w >= 0)
       -> ([#"../knapsack.rs" 33 10 33 21] m items (i - 1) w >= 0))
      | False -> ((([#"../knapsack.rs" 34 11 34 16] inv0 items)
      && ([#"../knapsack.rs" 32 11 32 17] 0 <= w)
      && ([#"../knapsack.rs" 31 11 31 37] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([#"../knapsack.rs" 30 10 30 11] i)
      /\ ([#"../knapsack.rs" 30 10 30 11] i - 1) < ([#"../knapsack.rs" 30 10 30 11] i))
      /\ (([#"../knapsack.rs" 33 10 33 21] m items (i - 1) w >= 0)
       -> ((([#"../knapsack.rs" 34 11 34 16] inv0 items)
      && ([#"../knapsack.rs" 32 11 32 17] 0
      <= w - UIntSize.to_int (Knapsack_Item_Type.item_weight (Seq.get items (i - 1))))
      && ([#"../knapsack.rs" 31 11 31 37] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([#"../knapsack.rs" 30 10 30 11] i)
      /\ ([#"../knapsack.rs" 30 10 30 11] i - 1) < ([#"../knapsack.rs" 30 10 30 11] i))
      /\ (([#"../knapsack.rs" 33 10 33 21] m items (i - 1) (w
      - UIntSize.to_int (Knapsack_Item_Type.item_weight (Seq.get items (i - 1))))
      >= 0)
       -> ([#"../knapsack.rs" 33 10 33 21] MinMax.max (m items (i - 1) w) (m items (i - 1) (w
      - UIntSize.to_int (Knapsack_Item_Type.item_weight (Seq.get items (i - 1))))
      + UIntSize.to_int (Knapsack_Item_Type.item_value (Seq.get items (i - 1))))
      >= 0)))
      end
    end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Knapsack_Knapsack01Dyn
  type name
  use Knapsack_Item_Type as Knapsack_Item_Type
  use seq.Seq
  predicate invariant17 (self : Seq.seq (Knapsack_Item_Type.t_item name))
  val invariant17 (self : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = invariant17 self }
    
  predicate inv17 (_x : Seq.seq (Knapsack_Item_Type.t_item name))
  val inv17 (_x : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = inv17 _x }
    
  axiom inv17 : forall x : Seq.seq (Knapsack_Item_Type.t_item name) . inv17 x = true
  predicate inv8 (_x : Seq.seq (Knapsack_Item_Type.t_item name))
  val inv8 (_x : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = inv8 _x }
    
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max1  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv16 (_x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
  val inv16 (_x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv16 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Knapsack_Item_Type.t_item name)
    
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Knapsack_Item_Type.t_item name)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv16 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv16 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv8 (shallow_model3 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self)
  <= UIntSize.to_int max1)
  predicate invariant16 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv8 (shallow_model3 self)
  val invariant16 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant16 self }
    
  axiom inv16 : forall x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . inv16 x
  = true
  use prelude.Borrow
  predicate invariant15 (self : borrowed usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant15 (self : borrowed usize) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : borrowed usize)
  val inv15 (_x : borrowed usize) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : borrowed usize . inv15 x = true
  predicate invariant14 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant14 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv14 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv14 x = true
  predicate invariant13 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant13 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv13 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) . inv13 x
  = true
  predicate invariant12 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)))
    
  val invariant12 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv12 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) . inv12 x
  = true
  predicate invariant11 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant11 (self : usize) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : usize)
  val inv11 (_x : usize) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : usize . inv11 x = true
  predicate invariant10 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv10 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv10 x = true
  predicate invariant9 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv9 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv9 x
  = true
  predicate invariant8 (self : Seq.seq (Knapsack_Item_Type.t_item name))
  val invariant8 (self : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = invariant8 self }
    
  axiom inv8 : forall x : Seq.seq (Knapsack_Item_Type.t_item name) . inv8 x = true
  predicate invariant7 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Seq.seq usize) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Seq.seq usize)
  val inv7 (_x : Seq.seq usize) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Seq.seq usize . inv7 x = true
  predicate invariant6 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv6 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv6 x = true
  use seq.Seq
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model1 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self)
  <= UIntSize.to_int max1)
  predicate invariant5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model1 self)
  val invariant5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv5 x
  = true
  use seq.Seq
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv7 (shallow_model2 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max1)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv7 (shallow_model2 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv4 x = true
  predicate invariant3 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : usize)
  val inv3 (_x : usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : usize . inv3 x = true
  use seq.Seq
  predicate inv2 (_x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
  val inv2 (_x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv2 _x }
    
  function shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Knapsack_Item_Type.t_item name)
    
  val shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Knapsack_Item_Type.t_item name)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv2 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv17 (shallow_model4 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model4 self)
  <= UIntSize.to_int max1)
  predicate invariant2 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv17 (shallow_model4 self)
  val invariant2 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . inv2 x
  = true
  predicate invariant1 (self : Knapsack_Item_Type.t_item name)
  val invariant1 (self : Knapsack_Item_Type.t_item name) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Knapsack_Item_Type.t_item name)
  val inv1 (_x : Knapsack_Item_Type.t_item name) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Knapsack_Item_Type.t_item name . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . inv0 x
  = true
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Knapsack_Item_Type.t_item name
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Knapsack_Item_Type.t_item name
    ensures { result = index_logic1 self ix }
    
  predicate resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed usize) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed usize) : bool
    ensures { result = resolve3 self }
    
  use prelude.Slice
  use seq.Seq
  predicate resolve_elswhere1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) : bool
    ensures { result = resolve_elswhere1 self old' fin }
    
  predicate has_value2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) : bool
    ensures { result = has_value2 self seq out }
    
  predicate in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) : bool
    ensures { result = in_bounds2 self seq }
    
  function shallow_model9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model2 ( * self)
  val shallow_model9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model9 self }
    
  val index_mut1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed usize
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds2 index (shallow_model9 self)}
    requires {inv14 self}
    requires {inv3 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value2 index (shallow_model9 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value2 index (shallow_model2 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere1 index (shallow_model9 self) (shallow_model2 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model2 ( ^ self))
    = Seq.length (shallow_model9 self) }
    ensures { inv15 result }
    
  use seq.Seq
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i
    /\ i <> UIntSize.to_int self /\ i < Seq.length old'  -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model8 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model1 ( * self)
  val shallow_model8 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    ensures { result = shallow_model8 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds1 index (shallow_model8 self)}
    requires {inv13 self}
    requires {inv3 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value1 index (shallow_model8 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value1 index (shallow_model1 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model8 self) (shallow_model1 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model1 ( ^ self))
    = Seq.length (shallow_model8 self) }
    ensures { inv14 result }
    
  use int.MinMax
  val max0 [#"../knapsack.rs" 15 0 15 35] (a : usize) (b : usize) : usize
    requires {[#"../knapsack.rs" 13 11 13 15] true}
    ensures { [#"../knapsack.rs" 14 10 14 31] UIntSize.to_int result
    = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b) }
    
  use seq.Seq
  function shallow_model7 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Knapsack_Item_Type.t_item name)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model4 ( * self)
  val shallow_model7 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Knapsack_Item_Type.t_item name)
    ensures { result = shallow_model7 self }
    
  val push0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) (value : Knapsack_Item_Type.t_item name) : ()
    requires {inv12 self}
    requires {inv1 value}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 78 26 78 51] shallow_model4 ( ^ self)
    = Seq.snoc (shallow_model7 self) value }
    
  function shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    ensures { result = shallow_model6 self }
    
  val index2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index : usize) : usize
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds2 index (shallow_model6 self)}
    requires {inv10 self}
    requires {inv3 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value2 index (shallow_model6 self) result }
    ensures { inv11 result }
    
  function shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model1 self
  val shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    ensures { result = shallow_model5 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model5 self)}
    requires {inv9 self}
    requires {inv3 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model5 self) result }
    ensures { inv10 result }
    
  predicate resolve2 (self : Knapsack_Item_Type.t_item name)
  val resolve2 (self : Knapsack_Item_Type.t_item name) : bool
    ensures { result = resolve2 self }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Knapsack_Item_Type.t_item name)) (out : Knapsack_Item_Type.t_item name)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (Knapsack_Item_Type.t_item name)) (out : Knapsack_Item_Type.t_item name) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Knapsack_Item_Type.t_item name)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (Knapsack_Item_Type.t_item name)) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Knapsack_Item_Type.t_item name)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model3 self
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Knapsack_Item_Type.t_item name)
    ensures { result = shallow_model0 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : Knapsack_Item_Type.t_item name
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model0 self)}
    requires {inv0 self}
    requires {inv3 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model0 self) result }
    ensures { inv1 result }
    
  predicate resolve1 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
  val resolve1 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve6 (self : usize) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve6 (self : usize) : bool
    ensures { result = resolve6 self }
    
  function index_logic2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    ensures { result = index_logic2 self ix }
    
  predicate resolve5 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model2 self)  -> resolve6 (index_logic2 self i)
  val resolve5 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve5 self }
    
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic0 self ix }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model1 self)  -> resolve5 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  val with_capacity0 (capacity : usize) : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 71 26 71 44] Seq.length (shallow_model4 result) = 0 }
    ensures { inv2 result }
    
  function m0 [#"../knapsack.rs" 34 0 34 57] (items : Seq.seq (Knapsack_Item_Type.t_item name)) (i : int) (w : int) : int
    
  axiom m0_def : forall items : Seq.seq (Knapsack_Item_Type.t_item name), i : int, w : int . m0 items i w
  = ([#"../knapsack.rs" 35 4 42 5] if i = 0 then
    0
  else
    if UIntSize.to_int (Knapsack_Item_Type.item_weight (Seq.get items (i - 1))) > w then
      m0 items (i - 1) w
    else
      MinMax.max (m0 items (i - 1) w) (m0 items (i - 1) (w
      - UIntSize.to_int (Knapsack_Item_Type.item_weight (Seq.get items (i - 1))))
      + UIntSize.to_int (Knapsack_Item_Type.item_value (Seq.get items (i - 1))))
    
  )
  val m0 [#"../knapsack.rs" 34 0 34 57] (items : Seq.seq (Knapsack_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack.rs" 31 11 31 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack.rs" 32 11 32 17] 0 <= w}
    requires {[#"../knapsack.rs" 34 11 34 16] inv8 items}
    ensures { result = m0 items i w }
    
  axiom m0_spec : forall items : Seq.seq (Knapsack_Item_Type.t_item name), i : int, w : int . ([#"../knapsack.rs" 31 11 31 37] 0
  <= i
  /\ i <= Seq.length items)
   -> ([#"../knapsack.rs" 32 11 32 17] 0 <= w)
   -> ([#"../knapsack.rs" 34 11 34 16] inv8 items)  -> ([#"../knapsack.rs" 33 10 33 21] m0 items i w >= 0)
  val from_elem1 (elem : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (n : usize) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    requires {inv4 elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model1 result)
    = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i
    /\ i < UIntSize.to_int n  -> index_logic0 result i = elem }
    ensures { inv5 result }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model0 self) }
    
  val from_elem0 (elem : usize) (n : usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {inv3 elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model2 result)
    = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i
    /\ i < UIntSize.to_int n  -> index_logic2 result i = elem }
    ensures { inv4 result }
    
  let rec cfg knapsack01_dyn [#"../knapsack.rs" 48 0 48 91] [@cfg:stackify] [@cfg:subregion_analysis] (items : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (max_weight : usize) : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../knapsack.rs" 45 11 45 34] Seq.length (shallow_model0 items) < 10000000}
    requires {[#"../knapsack.rs" 46 11 46 33] UIntSize.to_int max_weight < 10000000}
    requires {[#"../knapsack.rs" 47 0 47 86] forall i : int . 0 <= i /\ i < Seq.length (shallow_model0 items)
     -> UIntSize.to_int (Knapsack_Item_Type.item_value (index_logic1 items i)) <= 10000000}
    requires {[#"../knapsack.rs" 48 28 48 33] inv0 items}
    ensures { [#"../knapsack.rs" 48 75 48 91] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var items : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) = items;
  var max_weight : usize = max_weight;
  var best_value : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _7 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _8 : usize;
  var _10 : usize;
  var _11 : usize;
  var i : usize;
  var _19 : ();
  var _20 : bool;
  var _22 : usize;
  var it : Knapsack_Item_Type.t_item name;
  var _25 : Knapsack_Item_Type.t_item name;
  var w : usize;
  var _35 : bool;
  var _38 : usize;
  var _39 : bool;
  var _42 : usize;
  var _44 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _49 : usize;
  var _51 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _55 : usize;
  var _57 : usize;
  var _59 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _62 : usize;
  var _66 : borrowed usize;
  var _67 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _68 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _69 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _70 : usize;
  var result : Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _80 : usize;
  var left_weight : usize;
  var j : usize;
  var _88 : bool;
  var it1 : Knapsack_Item_Type.t_item name;
  var _91 : Knapsack_Item_Type.t_item name;
  var _94 : bool;
  var _96 : usize;
  var _98 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _100 : usize;
  var _104 : usize;
  var _106 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _110 : ();
  var _111 : borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../knapsack.rs" 49 38 49 52] _8 <- max_weight + ([#"../knapsack.rs" 49 51 49 52] (1 : usize));
    [#"../knapsack.rs" 49 30 49 53] _7 <- ([#"../knapsack.rs" 49 30 49 53] from_elem0 ([#"../knapsack.rs" 49 35 49 36] (0 : usize)) _8);
    _8 <- any usize;
    goto BB1
  }
  BB1 {
    [#"../knapsack.rs" 49 55 49 66] _11 <- ([#"../knapsack.rs" 49 55 49 66] len0 items);
    goto BB2
  }
  BB2 {
    [#"../knapsack.rs" 49 55 49 70] _10 <- _11 + ([#"../knapsack.rs" 49 69 49 70] (1 : usize));
    _11 <- any usize;
    [#"../knapsack.rs" 49 25 49 71] best_value <- ([#"../knapsack.rs" 49 25 49 71] from_elem1 _7 _10);
    _7 <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    _10 <- any usize;
    goto BB3
  }
  BB3 {
    [#"../knapsack.rs" 50 16 50 17] i <- ([#"../knapsack.rs" 50 16 50 17] (0 : usize));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant { [#"../knapsack.rs" 52 16 52 53] Seq.length (shallow_model0 items) + 1
    = Seq.length (shallow_model1 best_value) };
    invariant { [#"../knapsack.rs" 52 4 52 55] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 best_value)
     -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model2 (index_logic0 best_value i)) };
    invariant { [#"../knapsack.rs" 52 4 52 55] forall ww : int . forall ii : int . 0 <= ii
    /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
     -> UIntSize.to_int (Seq.get (shallow_model2 (index_logic0 best_value ii)) ww) = m0 (shallow_model0 items) ii ww };
    invariant { [#"../knapsack.rs" 52 4 52 55] forall ww : int . forall ii : int . 0 <= ii
    /\ ii <= Seq.length (shallow_model0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
     -> UIntSize.to_int (Seq.get (shallow_model2 (index_logic0 best_value ii)) ww) <= 10000000 * ii };
    goto BB9
  }
  BB9 {
    [#"../knapsack.rs" 59 14 59 25] _22 <- ([#"../knapsack.rs" 59 14 59 25] len0 items);
    goto BB10
  }
  BB10 {
    [#"../knapsack.rs" 59 10 59 25] _20 <- i < _22;
    _22 <- any usize;
    switch (_20)
      | False -> goto BB34
      | True -> goto BB11
      end
  }
  BB11 {
    [#"../knapsack.rs" 60 23 60 26] _25 <- ([#"../knapsack.rs" 60 23 60 26] index0 items i);
    goto BB12
  }
  BB12 {
    [#"../knapsack.rs" 60 17 60 26] it <- _25;
    assert { [@expl:type invariant] inv1 _25 };
    assume { resolve2 _25 };
    [#"../knapsack.rs" 64 20 64 21] w <- ([#"../knapsack.rs" 64 20 64 21] (0 : usize));
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    invariant { [#"../knapsack.rs" 66 20 66 57] Seq.length (shallow_model0 items) + 1
    = Seq.length (shallow_model1 best_value) };
    invariant { [#"../knapsack.rs" 66 8 66 59] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 best_value)
     -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model2 (index_logic0 best_value i)) };
    invariant { [#"../knapsack.rs" 66 8 66 59] forall ww : int . forall ii : int . 0 <= ii
    /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
     -> UIntSize.to_int (Seq.get (shallow_model2 (index_logic0 best_value ii)) ww) = m0 (shallow_model0 items) ii ww };
    invariant { [#"../knapsack.rs" 66 8 66 59] forall ww : int . 0 <= ww /\ ww <= UIntSize.to_int w - 1
     -> UIntSize.to_int (Seq.get (shallow_model2 (index_logic0 best_value (UIntSize.to_int i + 1))) ww)
    = m0 (shallow_model0 items) (UIntSize.to_int i + 1) ww };
    invariant { [#"../knapsack.rs" 66 8 66 59] forall ww : int . forall ii : int . 0 <= ii
    /\ ii <= Seq.length (shallow_model0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
     -> UIntSize.to_int (Seq.get (shallow_model2 (index_logic0 best_value ii)) ww) <= 10000000 * ii };
    goto BB19
  }
  BB19 {
    [#"../knapsack.rs" 76 14 76 29] _35 <- w <= max_weight;
    switch (_35)
      | False -> goto BB33
      | True -> goto BB20
      end
  }
  BB20 {
    [#"../knapsack.rs" 77 38 77 51] _39 <- Knapsack_Item_Type.item_weight it > w;
    switch (_39)
      | False -> goto BB24
      | True -> goto BB21
      end
  }
  BB21 {
    [#"../knapsack.rs" 78 26 78 29] _44 <- ([#"../knapsack.rs" 78 26 78 29] index1 best_value i);
    goto BB22
  }
  BB22 {
    [#"../knapsack.rs" 78 29 78 32] _42 <- ([#"../knapsack.rs" 78 29 78 32] index2 _44 w);
    goto BB23
  }
  BB23 {
    [#"../knapsack.rs" 78 16 78 32] _38 <- _42;
    goto BB30
  }
  BB24 {
    [#"../knapsack.rs" 80 30 80 33] _51 <- ([#"../knapsack.rs" 80 30 80 33] index1 best_value i);
    goto BB25
  }
  BB25 {
    [#"../knapsack.rs" 80 33 80 36] _49 <- ([#"../knapsack.rs" 80 33 80 36] index2 _51 w);
    goto BB26
  }
  BB26 {
    [#"../knapsack.rs" 80 48 80 51] _59 <- ([#"../knapsack.rs" 80 48 80 51] index1 best_value i);
    goto BB27
  }
  BB27 {
    [#"../knapsack.rs" 80 52 80 65] _62 <- w - Knapsack_Item_Type.item_weight it;
    [#"../knapsack.rs" 80 51 80 66] _57 <- ([#"../knapsack.rs" 80 51 80 66] index2 _59 _62);
    _62 <- any usize;
    goto BB28
  }
  BB28 {
    [#"../knapsack.rs" 80 38 80 77] _55 <- _57 + Knapsack_Item_Type.item_value it;
    [#"../knapsack.rs" 80 16 80 78] _38 <- ([#"../knapsack.rs" 80 16 80 78] max0 _49 _55);
    _55 <- any usize;
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    [#"../knapsack.rs" 77 12 77 22] _69 <- Borrow.borrow_mut best_value;
    [#"../knapsack.rs" 77 12 77 22] best_value <-  ^ _69;
    [#"../knapsack.rs" 77 23 77 28] _70 <- i + ([#"../knapsack.rs" 77 27 77 28] (1 : usize));
    [#"../knapsack.rs" 77 22 77 29] _68 <- ([#"../knapsack.rs" 77 22 77 29] index_mut0 _69 _70);
    _69 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    _70 <- any usize;
    goto BB31
  }
  BB31 {
    [#"../knapsack.rs" 77 12 77 29] _67 <- Borrow.borrow_final ( * _68) (Borrow.get_id _68);
    [#"../knapsack.rs" 77 12 77 29] _68 <- { _68 with current = ( ^ _67) ; };
    [#"../knapsack.rs" 77 29 77 32] _66 <- ([#"../knapsack.rs" 77 29 77 32] index_mut1 _67 w);
    _67 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB32
  }
  BB32 {
    [#"../knapsack.rs" 77 12 81 13] _66 <- { _66 with current = _38 ; };
    _38 <- any usize;
    assume { resolve3 _66 };
    assume { resolve4 _68 };
    [#"../knapsack.rs" 82 12 82 18] w <- w + ([#"../knapsack.rs" 82 17 82 18] (1 : usize));
    [#"../knapsack.rs" 82 12 82 18] _19 <- ([#"../knapsack.rs" 82 12 82 18] ());
    goto BB18
  }
  BB33 {
    assert { [@expl:type invariant] inv1 it };
    assume { resolve2 it };
    [#"../knapsack.rs" 84 8 84 14] i <- i + ([#"../knapsack.rs" 84 13 84 14] (1 : usize));
    [#"../knapsack.rs" 84 8 84 14] _19 <- ([#"../knapsack.rs" 84 8 84 14] ());
    goto BB8
  }
  BB34 {
    [#"../knapsack.rs" 87 40 87 51] _80 <- ([#"../knapsack.rs" 87 40 87 51] len0 items);
    goto BB35
  }
  BB35 {
    [#"../knapsack.rs" 87 21 87 52] result <- ([#"../knapsack.rs" 87 21 87 52] with_capacity0 _80);
    _80 <- any usize;
    goto BB36
  }
  BB36 {
    [#"../knapsack.rs" 88 26 88 36] left_weight <- max_weight;
    [#"../knapsack.rs" 90 16 90 27] j <- ([#"../knapsack.rs" 90 16 90 27] len0 items);
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    invariant { [#"../knapsack.rs" 91 16 91 34] UIntSize.to_int j <= Seq.length (shallow_model0 items) };
    invariant { [#"../knapsack.rs" 92 16 92 43] UIntSize.to_int left_weight <= UIntSize.to_int max_weight };
    goto BB39
  }
  BB39 {
    [#"../knapsack.rs" 93 10 93 15] _88 <- ([#"../knapsack.rs" 93 10 93 11] (0 : usize)) < j;
    switch (_88)
      | False -> goto BB50
      | True -> goto BB40
      end
  }
  BB40 {
    [#"../knapsack.rs" 94 8 94 14] j <- j - ([#"../knapsack.rs" 94 13 94 14] (1 : usize));
    [#"../knapsack.rs" 95 23 95 26] _91 <- ([#"../knapsack.rs" 95 23 95 26] index0 items j);
    goto BB41
  }
  BB41 {
    [#"../knapsack.rs" 95 17 95 26] it1 <- _91;
    assert { [@expl:type invariant] inv1 _91 };
    assume { resolve2 _91 };
    [#"../knapsack.rs" 96 22 96 27] _100 <- j + ([#"../knapsack.rs" 96 26 96 27] (1 : usize));
    [#"../knapsack.rs" 96 21 96 28] _98 <- ([#"../knapsack.rs" 96 21 96 28] index1 best_value _100);
    _100 <- any usize;
    goto BB42
  }
  BB42 {
    [#"../knapsack.rs" 96 28 96 41] _96 <- ([#"../knapsack.rs" 96 28 96 41] index2 _98 left_weight);
    goto BB43
  }
  BB43 {
    [#"../knapsack.rs" 96 55 96 58] _106 <- ([#"../knapsack.rs" 96 55 96 58] index1 best_value j);
    goto BB44
  }
  BB44 {
    [#"../knapsack.rs" 96 58 96 71] _104 <- ([#"../knapsack.rs" 96 58 96 71] index2 _106 left_weight);
    goto BB45
  }
  BB45 {
    [#"../knapsack.rs" 96 11 96 71] _94 <- _96 <> _104;
    switch (_94)
      | False -> goto BB48
      | True -> goto BB46
      end
  }
  BB46 {
    [#"../knapsack.rs" 97 12 97 18] _111 <- Borrow.borrow_mut result;
    [#"../knapsack.rs" 97 12 97 18] result <-  ^ _111;
    assume { inv2 ( ^ _111) };
    [#"../knapsack.rs" 97 12 97 27] _110 <- ([#"../knapsack.rs" 97 12 97 27] push0 _111 it1);
    _111 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global));
    goto BB47
  }
  BB47 {
    assert { [@expl:type invariant] inv1 it1 };
    assume { resolve2 it1 };
    [#"../knapsack.rs" 98 12 98 36] left_weight <- left_weight - Knapsack_Item_Type.item_weight it1;
    [#"../knapsack.rs" 96 72 99 9] _19 <- ([#"../knapsack.rs" 96 72 99 9] ());
    goto BB49
  }
  BB48 {
    assert { [@expl:type invariant] inv1 it1 };
    assume { resolve2 it1 };
    [#"../knapsack.rs" 99 9 99 9] _19 <- ([#"../knapsack.rs" 99 9 99 9] ());
    goto BB49
  }
  BB49 {
    goto BB38
  }
  BB50 {
    assume { resolve0 best_value };
    assert { [@expl:type invariant] inv0 items };
    assume { resolve1 items };
    [#"../knapsack.rs" 102 4 102 10] _0 <- result;
    result <- any Alloc_Vec_Vec_Type.t_vec (Knapsack_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    return _0
  }
  
end
