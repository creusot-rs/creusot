module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type knapsack_item 'name = 
    | Knapsack_Item 'name usize usize
    
  function knapsack_item_Item_weight (self : knapsack_item 'name) : usize
  val knapsack_item_Item_weight (self : knapsack_item 'name) : usize
    ensures { result = knapsack_item_Item_weight self }
    
  axiom knapsack_item_Item_weight_acc : forall a : 'name, b : usize, c : usize . knapsack_item_Item_weight (Knapsack_Item a b c : knapsack_item 'name) = b
  function knapsack_item_Item_value (self : knapsack_item 'name) : usize
  val knapsack_item_Item_value (self : knapsack_item 'name) : usize
    ensures { result = knapsack_item_Item_value self }
    
  axiom knapsack_item_Item_value_acc : forall a : 'name, b : usize, c : usize . knapsack_item_Item_value (Knapsack_Item a b c : knapsack_item 'name) = c
  type creusotcontracts_std1_vec_vec 't  
end
module Knapsack_MaxLog_Interface
  use mach.int.Int
  function max_log (a : int) (b : int) : int
end
module Knapsack_MaxLog
  use mach.int.Int
  function max_log (a : int) (b : int) : int = 
    if a < b then b else a
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Knapsack_Max_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Knapsack_MaxLog_Interface as MaxLog0
  val max (a : usize) (b : usize) : usize
    requires {true}
    ensures { UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Knapsack_Max
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Knapsack_MaxLog as MaxLog0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg max (a : usize) (b : usize) : usize
    requires {true}
    ensures { UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
   = 
  var _0 : usize;
  var a_1 : usize;
  var b_2 : usize;
  var _3 : bool;
  var _4 : usize;
  var _5 : usize;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _4 };
    _4 <- a_1;
    assume { Resolve0.resolve _5 };
    _5 <- b_2;
    _3 <- _4 < _5;
    switch (_3)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve a_1 };
    assume { Resolve0.resolve _0 };
    _0 <- b_2;
    assume { Resolve0.resolve b_2 };
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve b_2 };
    assume { Resolve0.resolve _0 };
    _0 <- a_1;
    assume { Resolve0.resolve a_1 };
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Knapsack_M_Interface
  type name   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  function m (items : Seq.seq (Type.knapsack_item name)) (i : int) (w : int) : int
end
module Knapsack_M
  type name   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone Knapsack_MaxLog_Interface as MaxLog0
  function m (items : Seq.seq (Type.knapsack_item name)) (i : int) (w : int) : int
  axiom def : forall items : Seq.seq (Type.knapsack_item name), i : int, w : int . m items i w = (if i = 0 then
    0
  else
    if UInt64.to_int (Type.knapsack_item_Item_weight (Seq.get items (i - 1))) > w then
      m items (i - 1) w
    else
      MaxLog0.max_log (m items (i - 1) w) (m items (i - 1) (w - UInt64.to_int (Type.knapsack_item_Item_weight (Seq.get items (i - 1)))) + UInt64.to_int (Type.knapsack_item_Item_value (Seq.get items (i - 1))))
    
  )
  axiom m_spec : forall items : Seq.seq (Type.knapsack_item name), i : int, w : int . 0 <= w -> 0 <= i && i <= Seq.length items -> m items i w >= 0
end
module Knapsack_M_Impl
  type name   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone Knapsack_MaxLog as MaxLog0
  let rec ghost function m (items : Seq.seq (Type.knapsack_item name)) (i : int) (w : int) : int
    requires {0 <= w}
    requires {0 <= i && i <= Seq.length items}
    ensures { result >= 0 }
    variant {i}
    
   = 
    if i = 0 then
      0
    else
      if (let a' = Type.knapsack_item_Item_weight (Seq.get items (i - 1)) in UInt64.to_int a') > w then
        m items (i - 1) w
      else
        let a' = m items (i - 1) w in let b' = (let c' = w - (let a' = Type.knapsack_item_Item_weight (Seq.get items (i - 1)) in UInt64.to_int a') in m items (i - 1) c') + (let a' = Type.knapsack_item_Item_value (Seq.get items (i - 1)) in UInt64.to_int a') in MaxLog0.max_log a' b'
      
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  val from_elem (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl1_WithCapacity_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val with_capacity (capacity : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_WithCapacity
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  val with_capacity (capacity : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val push (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module Knapsack_Knapsack01Dyn_Interface
  type name   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.knapsack_item name
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val knapsack01_dyn (items : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name)) (max_weight : usize) : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name)
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model items) -> UInt64.to_int (Type.knapsack_item_Item_value (Seq.get (Model0.model items) i)) <= 10000000}
    requires {UInt64.to_int max_weight < 10000000}
    requires {Seq.length (Model0.model items) < 10000000}
    
end
module Knapsack_Knapsack01Dyn
  type name   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Knapsack_MaxLog as MaxLog0
  clone Knapsack_M as M0 with type name = name, function MaxLog0.max_log = MaxLog0.max_log, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec usize
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.knapsack_item name
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.knapsack_item name
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.knapsack_item name
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.knapsack_item name
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = Type.knapsack_item name,
  function Model0.model = Model8.model, function Model1.model = Model9.model
  clone CreusotContracts_Std1_Vec_Impl1_WithCapacity_Interface as WithCapacity0 with type t = Type.knapsack_item name,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusotcontracts_std1_vec_vec usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.creusotcontracts_std1_vec_vec usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.creusotcontracts_std1_vec_vec usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.knapsack_item name
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone Knapsack_Max_Interface as Max0 with function MaxLog0.max_log = MaxLog0.max_log
  clone CreusotContracts_Logic_Model_Impl1_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut1 with type t = usize,
  function Model0.model = Model2.model, function Model1.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = usize,
  function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = usize,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.creusotcontracts_std1_vec_vec usize,
  function Model0.model = Model1.model, function Model1.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.creusotcontracts_std1_vec_vec usize,
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem1 with type t = Type.creusotcontracts_std1_vec_vec usize,
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.knapsack_item name,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.knapsack_item name,
  function Model0.model = Model0.model
  let rec cfg knapsack01_dyn (items : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name)) (max_weight : usize) : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name)
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model items) -> UInt64.to_int (Type.knapsack_item_Item_value (Seq.get (Model0.model items) i)) <= 10000000}
    requires {UInt64.to_int max_weight < 10000000}
    requires {Seq.length (Model0.model items) < 10000000}
    
   = 
  var _0 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var items_1 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var max_weight_2 : usize;
  var best_value_3 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize);
  var _4 : Type.creusotcontracts_std1_vec_vec usize;
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var i_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var it_17 : Type.knapsack_item name;
  var _18 : Type.knapsack_item name;
  var _19 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var _20 : usize;
  var w_21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : usize;
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : usize;
  var _31 : Type.creusotcontracts_std1_vec_vec usize;
  var _32 : Type.creusotcontracts_std1_vec_vec usize;
  var _33 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize);
  var _34 : usize;
  var _35 : usize;
  var _36 : usize;
  var _37 : usize;
  var _38 : Type.creusotcontracts_std1_vec_vec usize;
  var _39 : Type.creusotcontracts_std1_vec_vec usize;
  var _40 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize);
  var _41 : usize;
  var _42 : usize;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  var _46 : Type.creusotcontracts_std1_vec_vec usize;
  var _47 : Type.creusotcontracts_std1_vec_vec usize;
  var _48 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize);
  var _49 : usize;
  var _50 : usize;
  var _51 : usize;
  var _52 : usize;
  var _53 : usize;
  var _54 : borrowed usize;
  var _55 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _56 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _57 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize));
  var _58 : usize;
  var _59 : usize;
  var _60 : usize;
  var _61 : ();
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var _66 : ();
  var result_67 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var _68 : usize;
  var _69 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var left_weight_70 : usize;
  var j_71 : usize;
  var _72 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var _73 : ();
  var _74 : bool;
  var _75 : usize;
  var it_76 : Type.knapsack_item name;
  var _77 : Type.knapsack_item name;
  var _78 : Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name);
  var _79 : usize;
  var _80 : bool;
  var _81 : usize;
  var _82 : usize;
  var _83 : Type.creusotcontracts_std1_vec_vec usize;
  var _84 : Type.creusotcontracts_std1_vec_vec usize;
  var _85 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize);
  var _86 : usize;
  var _87 : usize;
  var _88 : usize;
  var _89 : usize;
  var _90 : usize;
  var _91 : Type.creusotcontracts_std1_vec_vec usize;
  var _92 : Type.creusotcontracts_std1_vec_vec usize;
  var _93 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec usize);
  var _94 : usize;
  var _95 : usize;
  var _96 : ();
  var _97 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.knapsack_item name));
  var _98 : Type.knapsack_item name;
  var _99 : usize;
  var _100 : ();
  var _101 : ();
  var _102 : ();
  {
    items_1 <- items;
    max_weight_2 <- max_weight;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <- max_weight_2;
    _5 <- _6 + (1 : usize);
    _4 <- FromElem0.from_elem (0 : usize) _5;
    goto BB1
  }
  BB1 {
    _9 <- items_1;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _7 <- _8 + (1 : usize);
    best_value_3 <- FromElem1.from_elem _4 _7;
    goto BB3
  }
  BB3 {
    i_10 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant items_len { Seq.length (Model0.model items_1) + 1 = Seq.length (Model1.model best_value_3) };
    invariant weight_len { forall i : (int) . 0 <= i && i < Seq.length (Model1.model best_value_3) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model2.model (Seq.get (Model1.model best_value_3) i)) };
    invariant best_value { forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= UInt64.to_int i_10 && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_3) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value_bounds { forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= Seq.length (Model0.model items_1) && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_3) ii)) ww) <= 10000000 * ii };
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve _14 };
    _14 <- i_10;
    _16 <- items_1;
    _15 <- Len0.len _16;
    goto BB10
  }
  BB10 {
    _13 <- _14 < _15;
    switch (_13)
      | False -> goto BB34
      | _ -> goto BB11
      end
  }
  BB11 {
    _19 <- items_1;
    assume { Resolve0.resolve _20 };
    _20 <- i_10;
    _18 <- Index0.index _19 _20;
    goto BB12
  }
  BB12 {
    it_17 <- _18;
    assume { Resolve1.resolve _18 };
    w_21 <- (0 : usize);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    invariant items_len2 { Seq.length (Model0.model items_1) + 1 = Seq.length (Model1.model best_value_3) };
    invariant weight_len2 { forall i : (int) . 0 <= i && i < Seq.length (Model1.model best_value_3) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model2.model (Seq.get (Model1.model best_value_3) i)) };
    invariant best_value2 { forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= UInt64.to_int i_10 && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_3) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value2 { forall ww : (int) . 0 <= ww && ww <= UInt64.to_int w_21 - 1 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_3) (UInt64.to_int i_10 + 1))) ww) = M0.m (Model0.model items_1) (UInt64.to_int i_10 + 1) ww };
    invariant best_value_bounds { forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= Seq.length (Model0.model items_1) && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_3) ii)) ww) <= 10000000 * ii };
    goto BB19
  }
  BB19 {
    assume { Resolve0.resolve _24 };
    _24 <- w_21;
    assume { Resolve0.resolve _25 };
    _25 <- max_weight_2;
    _23 <- _24 <= _25;
    switch (_23)
      | False -> goto BB33
      | _ -> goto BB20
      end
  }
  BB20 {
    assume { Resolve0.resolve _28 };
    _28 <- Type.knapsack_item_Item_weight it_17;
    assume { Resolve0.resolve _29 };
    _29 <- w_21;
    _27 <- _28 > _29;
    switch (_27)
      | False -> goto BB24
      | _ -> goto BB21
      end
  }
  BB21 {
    _33 <- best_value_3;
    assume { Resolve0.resolve _34 };
    _34 <- i_10;
    _32 <- Index1.index _33 _34;
    goto BB22
  }
  BB22 {
    _31 <- _32;
    assume { Resolve2.resolve _32 };
    assume { Resolve0.resolve _35 };
    _35 <- w_21;
    _30 <- Index2.index _31 _35;
    goto BB23
  }
  BB23 {
    assume { Resolve0.resolve _26 };
    _26 <- _30;
    assume { Resolve3.resolve _30 };
    goto BB30
  }
  BB24 {
    _40 <- best_value_3;
    assume { Resolve0.resolve _41 };
    _41 <- i_10;
    _39 <- Index1.index _40 _41;
    goto BB25
  }
  BB25 {
    _38 <- _39;
    assume { Resolve2.resolve _39 };
    assume { Resolve0.resolve _42 };
    _42 <- w_21;
    _37 <- Index2.index _38 _42;
    goto BB26
  }
  BB26 {
    assume { Resolve0.resolve _36 };
    _36 <- _37;
    assume { Resolve3.resolve _37 };
    _48 <- best_value_3;
    assume { Resolve0.resolve _49 };
    _49 <- i_10;
    _47 <- Index1.index _48 _49;
    goto BB27
  }
  BB27 {
    _46 <- _47;
    assume { Resolve2.resolve _47 };
    assume { Resolve0.resolve _51 };
    _51 <- w_21;
    assume { Resolve0.resolve _52 };
    _52 <- Type.knapsack_item_Item_weight it_17;
    _50 <- _51 - _52;
    _45 <- Index2.index _46 _50;
    goto BB28
  }
  BB28 {
    assume { Resolve0.resolve _44 };
    _44 <- _45;
    assume { Resolve3.resolve _45 };
    assume { Resolve0.resolve _53 };
    _53 <- Type.knapsack_item_Item_value it_17;
    _43 <- _44 + _53;
    _26 <- Max0.max _36 _43;
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    _57 <- borrow_mut best_value_3;
    best_value_3 <-  ^ _57;
    assume { Resolve0.resolve _59 };
    _59 <- i_10;
    _58 <- _59 + (1 : usize);
    _56 <- IndexMut0.index_mut _57 _58;
    goto BB31
  }
  BB31 {
    _55 <- borrow_mut ( * _56);
    _56 <- { _56 with current = ( ^ _55) };
    assume { Resolve4.resolve _56 };
    assume { Resolve0.resolve _60 };
    _60 <- w_21;
    _54 <- IndexMut1.index_mut _55 _60;
    goto BB32
  }
  BB32 {
    assume { Resolve0.resolve ( * _54) };
    _54 <- { _54 with current = _26 };
    assume { Resolve5.resolve _54 };
    w_21 <- w_21 + (1 : usize);
    _12 <- ();
    assume { Resolve6.resolve _12 };
    goto BB18
  }
  BB33 {
    assume { Resolve1.resolve it_17 };
    assume { Resolve0.resolve w_21 };
    _22 <- ();
    assume { Resolve6.resolve _22 };
    i_10 <- i_10 + (1 : usize);
    _12 <- ();
    assume { Resolve6.resolve _12 };
    goto BB8
  }
  BB34 {
    assume { Resolve0.resolve i_10 };
    _11 <- ();
    assume { Resolve6.resolve _11 };
    _69 <- items_1;
    _68 <- Len0.len _69;
    goto BB35
  }
  BB35 {
    result_67 <- WithCapacity0.with_capacity _68;
    goto BB36
  }
  BB36 {
    assume { Resolve0.resolve left_weight_70 };
    left_weight_70 <- max_weight_2;
    assume { Resolve0.resolve max_weight_2 };
    _72 <- items_1;
    j_71 <- Len0.len _72;
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    invariant j_items_len { UInt64.to_int j_71 <= Seq.length (Model0.model items_1) };
    invariant left_weight_le_max { UInt64.to_int left_weight_70 <= UInt64.to_int max_weight_2 };
    goto BB39
  }
  BB39 {
    assume { Resolve0.resolve _75 };
    _75 <- j_71;
    _74 <- (0 : usize) < _75;
    switch (_74)
      | False -> goto BB50
      | _ -> goto BB40
      end
  }
  BB40 {
    j_71 <- j_71 - (1 : usize);
    _78 <- items_1;
    assume { Resolve0.resolve _79 };
    _79 <- j_71;
    _77 <- Index0.index _78 _79;
    goto BB41
  }
  BB41 {
    it_76 <- _77;
    assume { Resolve1.resolve _77 };
    _85 <- best_value_3;
    assume { Resolve0.resolve _87 };
    _87 <- j_71;
    _86 <- _87 + (1 : usize);
    _84 <- Index1.index _85 _86;
    goto BB42
  }
  BB42 {
    _83 <- _84;
    assume { Resolve2.resolve _84 };
    assume { Resolve0.resolve _88 };
    _88 <- left_weight_70;
    _82 <- Index2.index _83 _88;
    goto BB43
  }
  BB43 {
    assume { Resolve0.resolve _81 };
    _81 <- _82;
    assume { Resolve3.resolve _82 };
    _93 <- best_value_3;
    assume { Resolve0.resolve _94 };
    _94 <- j_71;
    _92 <- Index1.index _93 _94;
    goto BB44
  }
  BB44 {
    _91 <- _92;
    assume { Resolve2.resolve _92 };
    assume { Resolve0.resolve _95 };
    _95 <- left_weight_70;
    _90 <- Index2.index _91 _95;
    goto BB45
  }
  BB45 {
    assume { Resolve0.resolve _89 };
    _89 <- _90;
    assume { Resolve3.resolve _90 };
    _80 <- _81 <> _89;
    switch (_80)
      | False -> goto BB48
      | _ -> goto BB46
      end
  }
  BB46 {
    _97 <- borrow_mut result_67;
    result_67 <-  ^ _97;
    assume { Resolve1.resolve _98 };
    _98 <- it_76;
    _96 <- Push0.push _97 _98;
    goto BB47
  }
  BB47 {
    assume { Resolve0.resolve _99 };
    _99 <- Type.knapsack_item_Item_weight it_76;
    assume { Resolve1.resolve it_76 };
    left_weight_70 <- left_weight_70 - _99;
    _12 <- ();
    assume { Resolve6.resolve _12 };
    goto BB49
  }
  BB48 {
    assume { Resolve1.resolve it_76 };
    _12 <- ();
    assume { Resolve6.resolve _12 };
    goto BB49
  }
  BB49 {
    goto BB38
  }
  BB50 {
    assume { Resolve7.resolve items_1 };
    assume { Resolve0.resolve left_weight_70 };
    assume { Resolve0.resolve j_71 };
    _73 <- ();
    assume { Resolve6.resolve _73 };
    assume { Resolve8.resolve _0 };
    _0 <- result_67;
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    assume { Resolve9.resolve best_value_3 };
    return _0
  }
  
end
