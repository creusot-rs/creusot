
module Switch_Option_Type
  type t_option 't =
    | C_Some 't
    | C_None
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Some a -> a
      | C_None -> any 't
      end
end
module Switch_Test_Interface
  use mach.int.Int
  use mach.int.UInt32
  use Switch_Option_Type as Switch_Option_Type
  val test [@cfg:stackify] (o : Switch_Option_Type.t_option uint32) : bool
end
module Switch_Test
  use mach.int.Int
  use mach.int.UInt32
  use Switch_Option_Type as Switch_Option_Type
  use prelude.IntSize
  let rec cfg test [@cfg:stackify] [#"../switch.rs" 9 0 9 35] (o : Switch_Option_Type.t_option uint32) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var o_1 : Switch_Option_Type.t_option uint32;
  var _2 : isize;
  var x_3 : uint32;
  var _4 : uint32;
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    switch (o_1)
      | Switch_Option_Type.C_Some _ -> goto BB3
      | Switch_Option_Type.C_None -> goto BB1
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    x_3 <- Switch_Option_Type.some_0 o_1;
    _4 <- x_3;
    _0 <- ([#"../switch.rs" 11 19 11 24] _4 > (0 : uint32));
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t1
  let rec ghost predicate resolve (self : (t1, t2)) = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module Switch_Test2_Interface
  use mach.int.Int
  use mach.int.UInt32
  use Switch_Option_Type as Switch_Option_Type
  val test2 [@cfg:stackify] (o : (Switch_Option_Type.t_option uint32, uint32)) : uint32
end
module Switch_Test2
  use mach.int.Int
  use mach.int.UInt32
  use Switch_Option_Type as Switch_Option_Type
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Switch_Option_Type.t_option uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = Switch_Option_Type.t_option uint32,
    type t2 = uint32, val Resolve0.resolve = Resolve1.resolve, val Resolve1.resolve = Resolve2.resolve
  let rec cfg test2 [@cfg:stackify] [#"../switch.rs" 16 0 16 42] (o : (Switch_Option_Type.t_option uint32, uint32)) : uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var o_1 : (Switch_Option_Type.t_option uint32, uint32);
  var _2 : isize;
  var x_3 : uint32;
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    switch (let (a, _) = o_1 in a)
      | Switch_Option_Type.C_Some _ -> goto BB3
      | Switch_Option_Type.C_None -> goto BB1
      end
  }
  BB1 {
    _0 <- (let (_, a) = o_1 in a);
    assume { Resolve0.resolve o_1 };
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve o_1 };
    absurd
  }
  BB3 {
    x_3 <- Switch_Option_Type.some_0 (let (a, _) = o_1 in a);
    assume { Resolve0.resolve o_1 };
    _0 <- x_3;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
