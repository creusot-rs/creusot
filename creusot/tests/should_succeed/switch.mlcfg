
module Switch_Option_Type
  type t_option 't =
    | C_Some 't
    | C_None
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Some a -> a
      | C_None -> any 't
      end
end
module Switch_Test
  use prelude.UInt32
  use prelude.Int
  use Switch_Option_Type as Switch_Option_Type
  let rec cfg test [#"../switch.rs" 9 0 9 35] [@cfg:stackify] [@cfg:subregion_analysis] (o : Switch_Option_Type.t_option uint32) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var o : Switch_Option_Type.t_option uint32 = o;
  var x : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (o)
      | Switch_Option_Type.C_Some _ -> goto BB2
      | Switch_Option_Type.C_None -> goto BB3
      end
  }
  BB1 {
    assert { [#"../switch.rs" 10 10 10 11] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../switch.rs" 12 16 12 21] _0 <- ([#"../switch.rs" 12 16 12 21] false);
    goto BB5
  }
  BB4 {
    [#"../switch.rs" 11 13 11 14] x <- Switch_Option_Type.some_0 o;
    [#"../switch.rs" 11 19 11 24] _0 <- x > ([#"../switch.rs" 11 23 11 24] (0 : uint32));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Switch_Test2
  use prelude.UInt32
  use prelude.Int
  predicate resolve2 (self : uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve2 (self : uint32) : bool
    ensures { result = resolve2 self }
    
  use Switch_Option_Type as Switch_Option_Type
  predicate resolve1 (self : Switch_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve1 (self : Switch_Option_Type.t_option uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (Switch_Option_Type.t_option uint32, uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a)
    /\ resolve2 (let (_, a) = self in a)
  val resolve0 (self : (Switch_Option_Type.t_option uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg test2 [#"../switch.rs" 16 0 16 42] [@cfg:stackify] [@cfg:subregion_analysis] (o : (Switch_Option_Type.t_option uint32, uint32)) : uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var o : (Switch_Option_Type.t_option uint32, uint32) = o;
  var x : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (let (a, _) = o in a)
      | Switch_Option_Type.C_Some _ -> goto BB2
      | Switch_Option_Type.C_None -> goto BB3
      end
  }
  BB1 {
    assume { resolve0 o };
    assert { [#"../switch.rs" 17 10 17 13] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../switch.rs" 19 16 19 19] _0 <- (let (_, a) = o in a);
    assume { resolve0 o };
    goto BB5
  }
  BB4 {
    [#"../switch.rs" 18 13 18 14] x <- Switch_Option_Type.some_0 (let (a, _) = o in a);
    assume { resolve0 o };
    [#"../switch.rs" 18 19 18 20] _0 <- x;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
