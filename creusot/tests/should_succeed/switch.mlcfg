
module Switch_Option_Type
  type t_option 't =
    | C_Some 't
    | C_None
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Some a -> a
      | C_None -> any 't
      end
end
module Switch_Test_Interface
  use prelude.Int
  use prelude.UInt32
  use Switch_Option_Type as Switch_Option_Type
  val test [#"../switch.rs" 9 0 9 35] (o : Switch_Option_Type.t_option uint32) : bool
end
module Switch_Test
  use prelude.Int
  use prelude.UInt32
  use Switch_Option_Type as Switch_Option_Type
  let rec cfg test [#"../switch.rs" 9 0 9 35] [@cfg:stackify] [@cfg:subregion_analysis] (o : Switch_Option_Type.t_option uint32) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var o : Switch_Option_Type.t_option uint32 = o;
  var x : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (o)
      | Switch_Option_Type.C_Some _ -> goto BB1
      | Switch_Option_Type.C_None -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- ([#"../switch.rs" 12 16 12 21] [#"../switch.rs" 12 16 12 21] false);
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    x <- Switch_Option_Type.some_0 o;
    _0 <- ([#"../switch.rs" 11 19 11 24] x > ([#"../switch.rs" 11 23 11 24] [#"../switch.rs" 11 23 11 24] (0 : uint32)));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl3_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl3_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl3_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Switch_Test2_Interface
  use prelude.Int
  use prelude.UInt32
  use Switch_Option_Type as Switch_Option_Type
  val test2 [#"../switch.rs" 16 0 16 42] (o : (Switch_Option_Type.t_option uint32, uint32)) : uint32
end
module Switch_Test2
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve2 with
    type t = uint32
  use Switch_Option_Type as Switch_Option_Type
  clone CreusotContracts_Resolve_Impl3_Resolve as Resolve1 with
    type t = Switch_Option_Type.t_option uint32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Switch_Option_Type.t_option uint32,
    type t2 = uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg test2 [#"../switch.rs" 16 0 16 42] [@cfg:stackify] [@cfg:subregion_analysis] (o : (Switch_Option_Type.t_option uint32, uint32)) : uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var o : (Switch_Option_Type.t_option uint32, uint32) = o;
  var x : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (let (a, _) = o in a)
      | Switch_Option_Type.C_Some _ -> goto BB1
      | Switch_Option_Type.C_None -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- (let (_, a) = o in a);
    assume { Resolve0.resolve o };
    goto BB5
  }
  BB3 {
    assume { Resolve0.resolve o };
    absurd
  }
  BB4 {
    x <- Switch_Option_Type.some_0 (let (a, _) = o in a);
    assume { Resolve0.resolve o };
    _0 <- x;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
