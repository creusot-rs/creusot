module M_loop__f [#"loop.rs" 3 0 3 10]
  let%span sloop0 = "loop.rs" 4 16 4 18
  let%span sloop1 = "loop.rs" 6 9 6 10
  let%span sloop2 = "loop.rs" 8 11 8 15
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sloop0] (10 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &b <- _ret' ]  [ &a <- _ret'.final ] s2)
      | s2 =  [ &b <- { b with current = ([%#sloop1] (5 : int32)) ; } ] s3
      | s3 = -{resolve'0 b}- s4
      | s4 = bb1 ]
      
    | bb1 = bb1 [ bb1 = (! bb2) [ bb2 = any [ br0 -> {false} (! bb4) | br1 -> {true} (! bb3) ]  | bb4 = bb1 ]  ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & a : int32 = any_l () | & b : borrowed int32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
