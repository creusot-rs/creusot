
module BranchBorrow3_MyInt_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
  let function myint_0 (self : t_myint) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyInt a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module BranchBorrow3_F_Interface
  val f [@cfg:stackify] [#"../branch_borrow_3.rs" 5 0 5 10] (_1' : ()) : ()
end
module BranchBorrow3_F
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use BranchBorrow3_MyInt_Type as BranchBorrow3_MyInt_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = BranchBorrow3_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = BranchBorrow3_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = (BranchBorrow3_MyInt_Type.t_myint, BranchBorrow3_MyInt_Type.t_myint)
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = BranchBorrow3_MyInt_Type.t_myint,
    type t2 = BranchBorrow3_MyInt_Type.t_myint,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  let rec cfg f [@cfg:stackify] [#"../branch_borrow_3.rs" 5 0 5 10] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : (BranchBorrow3_MyInt_Type.t_myint, BranchBorrow3_MyInt_Type.t_myint);
  var _2 : BranchBorrow3_MyInt_Type.t_myint;
  var _3 : BranchBorrow3_MyInt_Type.t_myint;
  var b_4 : borrowed (BranchBorrow3_MyInt_Type.t_myint, BranchBorrow3_MyInt_Type.t_myint);
  var c_5 : borrowed (BranchBorrow3_MyInt_Type.t_myint);
  var d_6 : borrowed (BranchBorrow3_MyInt_Type.t_myint);
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- BranchBorrow3_MyInt_Type.C_MyInt ([#"../branch_borrow_3.rs" 6 23 6 25] (10 : usize));
    _3 <- BranchBorrow3_MyInt_Type.C_MyInt ([#"../branch_borrow_3.rs" 6 34 6 35] (5 : usize));
    a_1 <- (_2, _3);
    b_4 <- borrow_mut a_1;
    a_1 <-  ^ b_4;
    assume { Resolve0.resolve a_1 };
    c_5 <- borrow_mut (let (_, a) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in (a,  ^ c_5)) };
    d_6 <- borrow_mut (let (a, _) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in ( ^ d_6, b)) };
    assume { Resolve1.resolve b_4 };
    _8 <- BranchBorrow3_MyInt_Type.myint_0 ( * c_5);
    assume { Resolve2.resolve c_5 };
    _9 <- BranchBorrow3_MyInt_Type.myint_0 ( * d_6);
    assume { Resolve2.resolve d_6 };
    _7 <- ([#"../branch_borrow_3.rs" 12 12 12 28] _8 <> _9);
    _0 <- ();
    return _0
  }
  
end
