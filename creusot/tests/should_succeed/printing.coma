module M_printing__f [#"printing.rs" 5 0 5 10]
  let%span sprinting0 = "printing.rs" 11 18 11 28
  let%span sprinting1 = "printing.rs" 6 11 6 19
  let%span sfmt2 = "../../../creusot-contracts/src/std/fmt.rs" 25 27 25 31
  let%span sprinting3 = "printing.rs" 7 13 7 21
  let%span sprinting4 = "printing.rs" 8 12 8 20
  let%span sprinting5 = "printing.rs" 9 14 9 23
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted3__f'0 (return'  (ret:array string))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array string)-> (! -{Seq.get __arr_temp.elts 0 = ([%#sprinting1] "Hello ")
          /\ Seq.length __arr_temp.elts = 1}-
           [ &_1 <- __arr_temp ] 
          s1) ]
        
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : array string = any_l () | & _1 : array string = any_l () ] 
    [ return' (result:array string)-> return' {result} ]
    
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Char
  
  type t_Alignment'0  =
    | C_Left'0
    | C_Right'0
    | C_Center'0
    | C_Unknown'0
  
  use prelude.prelude.UInt32
  
  type t_Count'0  =
    | C_Is'0 usize
    | C_Param'0 usize
    | C_Implied'0
  
  type t_Placeholder'0  =
    { t_Placeholder__position'0: usize;
      t_Placeholder__fill'0: char;
      t_Placeholder__align'0: t_Alignment'0;
      t_Placeholder__flags'0: uint32;
      t_Placeholder__precision'0: t_Count'0;
      t_Placeholder__width'0: t_Count'0 }
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (slice (t_Placeholder'0))
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_ArgumentType'0  =
    | C_Placeholder'0 (t_NonNull'0) opaque_ptr ()
    | C_Count'0 usize
  
  type t_Argument'0  =
    { t_Argument__ty'0: t_ArgumentType'0 }
  
  type t_Arguments'0  =
    { t_Arguments__pieces'0: slice string; t_Arguments__fmt'0: t_Option'0; t_Arguments__args'0: slice (t_Argument'0) }
  
  let rec new_const'0 (pieces:array string) (return'  (ret:t_Arguments'0))= {[@expl:new_const requires] [%#sfmt2] true}
    any [ return' (result:t_Arguments'0)-> (! return' {result}) ] 
  
  let rec qy95zprint'0 (args:t_Arguments'0) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  let rec promoted2__f'0 (return'  (ret:array string))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array string)-> (! -{Seq.get __arr_temp.elts 0 = ([%#sprinting3] "world!\n")
          /\ Seq.length __arr_temp.elts = 1}-
           [ &_1 <- __arr_temp ] 
          s1) ]
        
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : array string = any_l () | & _1 : array string = any_l () ] 
    [ return' (result:array string)-> return' {result} ]
    
  
  let rec promoted1__f'0 (return'  (ret:array string))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array string)-> (! -{Seq.get __arr_temp.elts 0 = ([%#sprinting4] "Hello ")
          /\ Seq.length __arr_temp.elts = 1}-
           [ &_1 <- __arr_temp ] 
          s1) ]
        
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : array string = any_l () | & _1 : array string = any_l () ] 
    [ return' (result:array string)-> return' {result} ]
    
  
  let rec qy95zeprint'0 (args:t_Arguments'0) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  let rec promoted0__f'0 (return'  (ret:array string))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array string)-> (! -{Seq.get __arr_temp.elts 0 = ([%#sprinting5] "stderr!\n")
          /\ Seq.length __arr_temp.elts = 1}-
           [ &_1 <- __arr_temp ] 
          s1) ]
        
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : array string = any_l () | & _1 : array string = any_l () ] 
    [ return' (result:array string)-> return' {result} ]
    
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted3__f'0 (fun (pr3:array string) ->  [ &_30 <- pr3 ] s1)
      | s1 =  [ &_5 <- _30 ] s2
      | s2 = new_const'0 {_5} (fun (_ret':t_Arguments'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = qy95zprint'0 {_3} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = promoted2__f'0 (fun (pr2:array string) ->  [ &_29 <- pr2 ] s1)
      | s1 =  [ &_11 <- _29 ] s2
      | s2 = new_const'0 {_11} (fun (_ret':t_Arguments'0) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0 [ s0 = qy95zprint'0 {_9} (fun (_ret':()) ->  [ &_8 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = promoted1__f'0 (fun (pr1:array string) ->  [ &_28 <- pr1 ] s1)
      | s1 =  [ &_17 <- _28 ] s2
      | s2 = new_const'0 {_17} (fun (_ret':t_Arguments'0) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = qy95zeprint'0 {_15} (fun (_ret':()) ->  [ &_14 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 = promoted0__f'0 (fun (pr0:array string) ->  [ &_27 <- pr0 ] s1)
      | s1 =  [ &_23 <- _27 ] s2
      | s2 = new_const'0 {_23} (fun (_ret':t_Arguments'0) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0 [ s0 = qy95zeprint'0 {_21} (fun (_ret':()) ->  [ &_20 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 = {[@expl:assertion] [%#sprinting0] 1 + 1 = 2} s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & _2 : () = any_l ()
    | & _3 : t_Arguments'0 = any_l ()
    | & _5 : array string = any_l ()
    | & _8 : () = any_l ()
    | & _9 : t_Arguments'0 = any_l ()
    | & _11 : array string = any_l ()
    | & _14 : () = any_l ()
    | & _15 : t_Arguments'0 = any_l ()
    | & _17 : array string = any_l ()
    | & _20 : () = any_l ()
    | & _21 : t_Arguments'0 = any_l ()
    | & _23 : array string = any_l ()
    | & _27 : array string = any_l ()
    | & _28 : array string = any_l ()
    | & _29 : array string = any_l ()
    | & _30 : array string = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
