module M_switch__test [#"switch.rs" 9 0 9 35]
  let%span sswitch0 = "switch.rs" 12 16 12 21
  let%span sswitch1 = "switch.rs" 11 23 11 24
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_Option'0  =
    | C_Some'0 UInt32.t
    | C_None'0
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (o:t_Option'0) (return'  (ret:bool))= (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t)-> {o = C_Some'0 x0} (! bb2) | br1 -> {o = C_None'0 } (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sswitch0] false ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {o} (fun (r0'0:UInt32.t) ->  [ &x <- r0'0 ] s1)
      | s1 = UInt32.gt {x} {[%#sswitch1] (0 : UInt32.t)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & o : t_Option'0 = o | & x : UInt32.t = any_l () ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
module M_switch__test2 [#"switch.rs" 16 0 16 42]
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_Option'0  =
    | C_Some'0 UInt32.t
    | C_None'0
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test2'0 (o:(t_Option'0, UInt32.t)) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = any
      [ br0 (x0:UInt32.t)-> {(let (r'0, _) = o in r'0) = C_Some'0 x0} (! bb2)
      | br1 -> {(let (r'0, _) = o in r'0) = C_None'0 } (! bb3) ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- let (_, r'0) = o in r'0 ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {let (r'0, _) = o in r'0} (fun (r0'0:UInt32.t) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &_0 <- x ] s2
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    ) [ & _0 : UInt32.t = any_l () | & o : (t_Option'0, UInt32.t) = o | & x : UInt32.t = any_l () ] 
    [ return' (result:UInt32.t)-> (! return' {result}) ]
    
end
