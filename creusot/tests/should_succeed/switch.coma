
module Switch_Option_Type
  type t_option 't =
    | C_Some 't
    | C_None
    
  function any_l (_ : 'b) : 'a
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
end
module Switch_Test
  use prelude.Intrinsic
  use prelude.UInt32
  use Switch_Option_Type as Switch_Option_Type
  use prelude.Int
  let rec test (o:Switch_Option_Type.t_option uint32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32)-> {o = Switch_Option_Type.C_Some a} (! bb2) | br1 -> {o = Switch_Option_Type.C_None } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../switch.rs" 10 10 10 11] false} any ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../switch.rs" 12 16 12 21] false ] s1 | s1 = bb5 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Switch_Option_Type.some <uint32> {o} (fun (r0'0:uint32) ->  [ &x <- r0'0 ] s1)
      | s1 = UInt32.gt {x} {[#"../switch.rs" 11 23 11 24] (0 : uint32)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool | & o : Switch_Option_Type.t_option uint32 = o | & x : uint32 = any_l () : uint32 ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
module Switch_Test2
  use prelude.Intrinsic
  use prelude.UInt32
  predicate resolve'2 (self : uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use Switch_Option_Type as Switch_Option_Type
  predicate resolve'1 (self : Switch_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:Switch_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (Switch_Option_Type.t_option uint32, uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'2 (let (_, a) = self in a)
  let rec resolve'0 (self:(Switch_Option_Type.t_option uint32, uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec test2 (o:(Switch_Option_Type.t_option uint32, uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:uint32)-> {(let (r'0, _) = o in r'0) = Switch_Option_Type.C_Some a} (! bb2)
        | br1 -> {(let (r'0, _) = o in r'0) = Switch_Option_Type.C_None } (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = -{resolve'0 o}- s1 | s1 = {[#"../switch.rs" 17 10 17 13] false} any ] 
    | bb3 = s0 [ s0 =  [ &_0 <- let (_, r'0) = o in r'0 ] s1 | s1 = -{resolve'0 o}- s2 | s2 = bb5 ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Switch_Option_Type.some <uint32> {let (r'0, _) = o in r'0} (fun (r0'0:uint32) ->  [ &x <- r0'0 ] s1)
      | s1 = -{resolve'0 o}- s2
      | s2 =  [ &_0 <- x ] s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & o : (Switch_Option_Type.t_option uint32, uint32) = o
    | & x : uint32 = any_l () : uint32 ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
