module T_switch__Option [#"switch.rs" 3 0 3 18]
  type t_Option 't =
    | C_Some 't
    | C_None
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
end
module M_switch__test [#"switch.rs" 9 0 9 35]
  let%span sswitch0 = "switch.rs" 12 16 12 21
  let%span sswitch1 = "switch.rs" 11 23 11 24
  
  use prelude.prelude.Intrinsic
  
  use T_switch__Option as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec test (o:Option'0.t_Option uint32) (return'  (ret:bool))= (! bb0
    [ bb0 = any [ br0 (a:uint32)-> {o = Option'0.C_Some a} (! bb2) | br1 -> {o = Option'0.C_None } (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sswitch0] false ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Option'0.v_Some <uint32> {o} (fun (r0'0:uint32) ->  [ &x <- r0'0 ] s1)
      | s1 = UInt32.gt {x} {[%#sswitch1] (0 : uint32)} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & o : Option'0.t_Option uint32 = o | & x : uint32 = any_l () ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
end
module M_switch__test2 [#"switch.rs" 16 0 16 42]
  use prelude.prelude.Intrinsic
  
  use T_switch__Option as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec test2 (o:(Option'0.t_Option uint32, uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = any
      [ br0 (a:uint32)-> {(let (r'0, _) = o in r'0) = Option'0.C_Some a} (! bb2)
      | br1 -> {(let (r'0, _) = o in r'0) = Option'0.C_None } (! bb3) ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- let (_, r'0) = o in r'0 ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Option'0.v_Some <uint32> {let (r'0, _) = o in r'0} (fun (r0'0:uint32) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &_0 <- x ] s2
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    ) [ & _0 : uint32 = any_l () | & o : (Option'0.t_Option uint32, uint32) = o | & x : uint32 = any_l () ] 
    [ return' (result:uint32)-> (! return' {result}) ]
    
end
