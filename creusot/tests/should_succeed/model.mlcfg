
module Model_Seven_Type
  type t_seven  =
    | C_Seven
    
end
module Model_Impl0_Model_Stub
  use mach.int.Int
  use Model_Seven_Type as Model_Seven_Type
  val ghost function model (self : Model_Seven_Type.t_seven) : int
end
module Model_Impl0_Model_Interface
  use mach.int.Int
  use Model_Seven_Type as Model_Seven_Type
  val ghost function model (self : Model_Seven_Type.t_seven) : int
end
module Model_Impl0_Model
  use mach.int.Int
  use Model_Seven_Type as Model_Seven_Type
  val ghost function model [#"../model.rs" 10 4 10 35] (self : Model_Seven_Type.t_seven) : int
end
module Model_Seven_Interface
  use Model_Seven_Type as Model_Seven_Type
  clone Model_Impl0_Model_Stub as Model0
  val seven [@cfg:stackify] (_ : ()) : Model_Seven_Type.t_seven
    ensures { [#"../model.rs" 16 10 16 22] Model0.model result = 7 }
    
end
module Model_Seven
  use Model_Seven_Type as Model_Seven_Type
  clone Model_Impl0_Model_Interface as Model0
  val seven [@cfg:stackify] (_ : ()) : Model_Seven_Type.t_seven
    ensures { [#"../model.rs" 16 10 16 22] Model0.model result = 7 }
    
end
module Model_Pair_Type
  type t_pair 't 'u =
    | C_Pair 't 'u
    
end
module Model_Impl1_Model_Stub
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  val ghost function model (self : Model_Pair_Type.t_pair t u) : (t, u)
end
module Model_Impl1_Model_Interface
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  val ghost function model (self : Model_Pair_Type.t_pair t u) : (t, u)
end
module Model_Impl1_Model
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  val ghost function model [#"../model.rs" 27 4 27 35] (self : Model_Pair_Type.t_pair t u) : (t, u)
end
module Model_Pair_Interface
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  clone Model_Impl1_Model_Stub as Model0 with type t = t, type u = u
  val pair [@cfg:stackify] (a : t) (b : u) : Model_Pair_Type.t_pair t u
    ensures { [#"../model.rs" 33 10 33 27] Model0.model result = (a, b) }
    
end
module Model_Pair
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  clone Model_Impl1_Model_Interface as Model0 with type t = t, type u = u
  val pair [@cfg:stackify] (a : t) (b : u) : Model_Pair_Type.t_pair t u
    ensures { [#"../model.rs" 33 10 33 27] Model0.model result = (a, b) }
    
end
module Model_Impl0_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module Model_Impl0
  use Model_Seven_Type as Model_Seven_Type
  clone Model_Impl0_ModelTy_Type as ModelTy0
  clone Model_Impl0_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Model_Seven_Type.t_seven,
    val model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Model_Seven_Type.t_seven,
    type modelTy = ModelTy0.modelTy
end
module Model_Impl1_ModelTy_Type
  type t
  type u
  type modelTy  =
    (t, u)
end
module Model_Impl1
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  clone Model_Impl1_ModelTy_Type as ModelTy0 with type t = t, type u = u
  clone Model_Impl1_Model as Model0 with type t = t, type u = u
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Model_Pair_Type.t_pair t u,
    val model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Model_Pair_Type.t_pair t u,
    type modelTy = ModelTy0.modelTy
end
