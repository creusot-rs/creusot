
module BinarySearch_List_Type
  type t_list 't =
    | C_Cons 't (t_list 't)
    | C_Nil
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons a _ -> a
      | C_Nil -> any 't
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cons _ a -> a
      | C_Nil -> any t_list 't
      end
end
module BinarySearch_Impl0_LenLogic_Impl
  type t
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant0 (self : BinarySearch_List_Type.t_list t)
  val invariant0 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : BinarySearch_List_Type.t_list t)
  val inv0 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : BinarySearch_List_Type.t_list t . inv0 x = true
  use prelude.Int
  constant self  : BinarySearch_List_Type.t_list t
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
  goal vc_len_logic : ([#"../binary_search.rs" 22 17 22 21] inv0 self)
   -> match self with
    | BinarySearch_List_Type.C_Cons _ ls -> ([#"../binary_search.rs" 22 17 22 21] inv0 ls) /\ (([#"../binary_search.rs" 21 14 21 25] len_logic ls >= 0)
     -> ([#"../binary_search.rs" 21 14 21 25] 1 + len_logic ls >= 0))
    | BinarySearch_List_Type.C_Nil -> [#"../binary_search.rs" 21 14 21 25] 0 >= 0
    end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module BinarySearch_Impl0_Index
  type t
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant3 (self : BinarySearch_List_Type.t_list t)
  val invariant3 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : BinarySearch_List_Type.t_list t)
  val inv3 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : BinarySearch_List_Type.t_list t . inv3 x = true
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  predicate invariant1 (self : BinarySearch_List_Type.t_list t)
  val invariant1 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : BinarySearch_List_Type.t_list t)
  val inv1 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : BinarySearch_List_Type.t_list t . inv1 x = true
  predicate invariant0 (self : BinarySearch_List_Type.t_list t)
  val invariant0 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : BinarySearch_List_Type.t_list t)
  val inv0 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : BinarySearch_List_Type.t_list t . inv0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Borrow
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : BinarySearch_List_Type.t_list t)
  val resolve1 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = resolve1 self }
    
  use prelude.UIntSize
  use prelude.Int
  function get0 [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
   =
    [#"../binary_search.rs" 31 8 40 9] match self with
      | BinarySearch_List_Type.C_Cons t ls -> if ix = 0 then Core_Option_Option_Type.C_Some t else get0 ls (ix - 1)
      | BinarySearch_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  val get0 [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    ensures { result = get0 self ix }
    
  function len_logic0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match self with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic0 ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  val len_logic0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    requires {[#"../binary_search.rs" 22 17 22 21] inv3 self}
    ensures { result = len_logic0 self }
    
  axiom len_logic0_spec : forall self : BinarySearch_List_Type.t_list t . ([#"../binary_search.rs" 22 17 22 21] inv3 self)
   -> ([#"../binary_search.rs" 21 14 21 25] len_logic0 self >= 0)
  use prelude.UIntSize
  predicate resolve0 (self : BinarySearch_List_Type.t_list t)
  val resolve0 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg index [#"../binary_search.rs" 45 4 45 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : BinarySearch_List_Type.t_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UIntSize.to_int ix < len_logic0 self}
    requires {[#"../binary_search.rs" 45 14 45 18] inv0 self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = get0 self (UIntSize.to_int ix) }
    ensures { [#"../binary_search.rs" 45 38 45 40] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self : BinarySearch_List_Type.t_list t = self;
  var ix : usize = ix;
  var orig_ix : usize;
  var l : BinarySearch_List_Type.t_list t;
  var t : t;
  var ls : BinarySearch_List_Type.t_list t;
  var _14 : bool;
  var _17 : BinarySearch_List_Type.t_list t;
  {
    goto BB0
  }
  BB0 {
    [#"../binary_search.rs" 46 22 46 24] orig_ix <- ix;
    [#"../binary_search.rs" 47 20 47 24] l <- self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    goto BB1
  }
  BB1 {
    invariant { [#"../binary_search.rs" 49 20 49 39] UIntSize.to_int ix < len_logic0 l };
    invariant { [#"../binary_search.rs" 50 20 50 52] get0 self (UIntSize.to_int orig_ix) = get0 l (UIntSize.to_int ix) };
    goto BB2
  }
  BB2 {
    switch (l)
      | BinarySearch_List_Type.C_Cons _ _ -> goto BB3
      | _ -> goto BB7
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    [#"../binary_search.rs" 51 23 51 24] t <- BinarySearch_List_Type.cons_0 l;
    [#"../binary_search.rs" 51 26 51 28] ls <- BinarySearch_List_Type.cons_1 l;
    assert { [@expl:type invariant] inv0 l };
    assume { resolve0 l };
    [#"../binary_search.rs" 52 15 52 21] _14 <- ix > ([#"../binary_search.rs" 52 20 52 21] (0 : usize));
    switch (_14)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    assert { [@expl:type invariant] inv2 t };
    assume { resolve2 t };
    [#"../binary_search.rs" 53 20 53 24] _17 <- ls;
    assert { [@expl:type invariant] inv1 ls };
    assume { resolve1 ls };
    assert { [@expl:type invariant] inv1 _17 };
    assume { resolve1 _17 };
    [#"../binary_search.rs" 53 16 53 24] l <- _17;
    [#"../binary_search.rs" 54 16 54 23] ix <- ix - ([#"../binary_search.rs" 54 22 54 23] (1 : usize));
    goto BB1
  }
  BB6 {
    assert { [@expl:type invariant] inv1 ls };
    assume { resolve1 ls };
    [#"../binary_search.rs" 56 23 56 24] _0 <- t;
    assert { [@expl:type invariant] inv2 t };
    assume { resolve2 t };
    return _0
  }
  BB7 {
    assert { [@expl:type invariant] inv0 l };
    assume { resolve0 l };
    assert { [#"../binary_search.rs" 59 8 59 29] false };
    absurd
  }
  
end
module BinarySearch_Impl0_Len
  type t
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant2 (self : BinarySearch_List_Type.t_list t)
  val invariant2 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : BinarySearch_List_Type.t_list t)
  val inv2 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : BinarySearch_List_Type.t_list t . inv2 x = true
  predicate invariant1 (self : BinarySearch_List_Type.t_list t)
  val invariant1 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : BinarySearch_List_Type.t_list t)
  val inv1 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : BinarySearch_List_Type.t_list t . inv1 x = true
  predicate invariant0 (self : BinarySearch_List_Type.t_list t)
  val invariant0 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : BinarySearch_List_Type.t_list t)
  val inv0 (_x : BinarySearch_List_Type.t_list t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : BinarySearch_List_Type.t_list t . inv0 x = true
  use prelude.Borrow
  predicate resolve1 (self : BinarySearch_List_Type.t_list t)
  val resolve1 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = resolve1 self }
    
  use prelude.Int
  function len_logic0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match self with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic0 ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  val len_logic0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    requires {[#"../binary_search.rs" 22 17 22 21] inv2 self}
    ensures { result = len_logic0 self }
    
  axiom len_logic0_spec : forall self : BinarySearch_List_Type.t_list t . ([#"../binary_search.rs" 22 17 22 21] inv2 self)
   -> ([#"../binary_search.rs" 21 14 21 25] len_logic0 self >= 0)
  use prelude.UIntSize
  predicate resolve0 (self : BinarySearch_List_Type.t_list t)
  val resolve0 (self : BinarySearch_List_Type.t_list t) : bool
    ensures { result = resolve0 self }
    
  use prelude.UIntSize
  let rec cfg len [#"../binary_search.rs" 66 4 66 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : BinarySearch_List_Type.t_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] len_logic0 self <= 1000000}
    requires {[#"../binary_search.rs" 66 12 66 16] inv0 self}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UIntSize.to_int result = len_logic0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : BinarySearch_List_Type.t_list t = self;
  var len : usize;
  var l : BinarySearch_List_Type.t_list t;
  var ls : BinarySearch_List_Type.t_list t;
  {
    goto BB0
  }
  BB0 {
    [#"../binary_search.rs" 67 29 67 30] len <- ([#"../binary_search.rs" 67 29 67 30] (0 : usize));
    [#"../binary_search.rs" 68 20 68 24] l <- self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    goto BB1
  }
  BB1 {
    invariant { [#"../binary_search.rs" 69 20 69 60] UIntSize.to_int len + len_logic0 l = len_logic0 self };
    goto BB2
  }
  BB2 {
    switch (l)
      | BinarySearch_List_Type.C_Cons _ _ -> goto BB3
      | _ -> goto BB5
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    [#"../binary_search.rs" 70 26 70 28] ls <- BinarySearch_List_Type.cons_1 l;
    assert { [@expl:type invariant] inv0 l };
    assume { resolve0 l };
    [#"../binary_search.rs" 71 12 71 20] len <- len + ([#"../binary_search.rs" 71 19 71 20] (1 : usize));
    assert { [@expl:type invariant] inv1 ls };
    assume { resolve1 ls };
    [#"../binary_search.rs" 72 12 72 18] l <- ls;
    goto BB1
  }
  BB5 {
    assert { [@expl:type invariant] inv0 l };
    assume { resolve0 l };
    [#"../binary_search.rs" 74 8 74 11] _0 <- len;
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module BinarySearch_BinarySearch
  use prelude.UInt32
  predicate invariant2 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : uint32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : uint32)
  val inv2 (_x : uint32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : uint32 . inv2 x = true
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate invariant1 (self : BinarySearch_List_Type.t_list uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : BinarySearch_List_Type.t_list uint32)
  val inv1 (_x : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : BinarySearch_List_Type.t_list uint32 . inv1 x = true
  predicate invariant0 (self : BinarySearch_List_Type.t_list uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : BinarySearch_List_Type.t_list uint32)
  val inv0 (_x : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : BinarySearch_List_Type.t_list uint32 . inv0 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  function get0 [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list uint32) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../binary_search.rs" 31 8 40 9] match self with
      | BinarySearch_List_Type.C_Cons t ls -> if ix = 0 then Core_Option_Option_Type.C_Some t else get0 ls (ix - 1)
      | BinarySearch_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  val get0 [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list uint32) (ix : int) : Core_Option_Option_Type.t_option uint32
    ensures { result = get0 self ix }
    
  predicate is_sorted0 [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) =
    [#"../binary_search.rs" 90 12 97 13] forall x2 : int . forall x1 : int . x1 <= x2
     -> match (get0 self x1, get0 self x2) with
      | (Core_Option_Option_Type.C_Some v1, Core_Option_Option_Type.C_Some v2) -> v1 <= v2
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> true
      | _ -> false
      end
  val is_sorted0 [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = is_sorted0 self }
    
  use prelude.Borrow
  use prelude.UIntSize
  use Core_Result_Result_Type as Core_Result_Result_Type
  function len_logic0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list uint32) : int =
    [#"../binary_search.rs" 23 8 26 9] match self with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic0 ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  val len_logic0 [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list uint32) : int
    requires {[#"../binary_search.rs" 22 17 22 21] inv1 self}
    ensures { result = len_logic0 self }
    
  axiom len_logic0_spec : forall self : BinarySearch_List_Type.t_list uint32 . ([#"../binary_search.rs" 22 17 22 21] inv1 self)
   -> ([#"../binary_search.rs" 21 14 21 25] len_logic0 self >= 0)
  use prelude.UIntSize
  val index0 [#"../binary_search.rs" 45 4 45 40] (self : BinarySearch_List_Type.t_list uint32) (ix : usize) : uint32
    requires {[#"../binary_search.rs" 43 15 43 37] UIntSize.to_int ix < len_logic0 self}
    requires {[#"../binary_search.rs" 45 14 45 18] inv0 self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = get0 self (UIntSize.to_int ix) }
    ensures { [#"../binary_search.rs" 45 38 45 40] inv2 result }
    
  function get_default0 [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list uint32) (ix : int) (def : uint32) : uint32
    
   =
    [#"../binary_search.rs" 79 8 82 9] match get0 self ix with
      | Core_Option_Option_Type.C_Some v -> v
      | Core_Option_Option_Type.C_None -> def
      end
  val get_default0 [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list uint32) (ix : int) (def : uint32) : uint32
    ensures { result = get_default0 self ix def }
    
  val len0 [#"../binary_search.rs" 66 4 66 26] (self : BinarySearch_List_Type.t_list uint32) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] len_logic0 self <= 1000000}
    requires {[#"../binary_search.rs" 66 12 66 16] inv0 self}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UIntSize.to_int result = len_logic0 self }
    
  let rec cfg binary_search [#"../binary_search.rs" 109 0 109 72] [@cfg:stackify] [@cfg:subregion_analysis] (arr : BinarySearch_List_Type.t_list uint32) (elem : uint32) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] len_logic0 arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] is_sorted0 arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : usize . result = Core_Result_Result_Type.C_Ok x
     -> get0 arr (UIntSize.to_int x) = Core_Option_Option_Type.C_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : usize . result = Core_Result_Result_Type.C_Err x
     -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x
     -> get_default0 arr (UIntSize.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : usize . result = Core_Result_Result_Type.C_Err x
     -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < len_logic0 arr
     -> elem < get_default0 arr (UIntSize.to_int i) (0 : uint32)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result usize usize;
  var arr : BinarySearch_List_Type.t_list uint32 = arr;
  var elem : uint32 = elem;
  var _9 : bool;
  var _10 : usize;
  var size : usize;
  var base : usize;
  var _21 : bool;
  var half : usize;
  var _25 : bool;
  var mid : usize;
  var _29 : usize;
  var _30 : bool;
  var _32 : uint32;
  var cmp : uint32;
  var _41 : uint32;
  var _44 : bool;
  var _48 : bool;
  var _51 : usize;
  {
    goto BB0
  }
  BB0 {
    [#"../binary_search.rs" 110 7 110 16] _10 <- ([#"../binary_search.rs" 110 7 110 16] len0 arr);
    goto BB1
  }
  BB1 {
    [#"../binary_search.rs" 110 7 110 21] _9 <- _10 = ([#"../binary_search.rs" 110 20 110 21] (0 : usize));
    _10 <- any usize;
    switch (_9)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    [#"../binary_search.rs" 111 15 111 21] _0 <- Core_Result_Result_Type.C_Err ([#"../binary_search.rs" 111 19 111 20] (0 : usize));
    goto BB21
  }
  BB3 {
    [#"../binary_search.rs" 113 19 113 28] size <- ([#"../binary_search.rs" 113 19 113 28] len0 arr);
    goto BB4
  }
  BB4 {
    [#"../binary_search.rs" 114 19 114 20] base <- ([#"../binary_search.rs" 114 19 114 20] (0 : usize));
    goto BB5
  }
  BB5 {
    invariant { [#"../binary_search.rs" 116 16 116 63] 0 < UIntSize.to_int size /\ UIntSize.to_int size + UIntSize.to_int base <= len_logic0 arr };
    invariant { [#"../binary_search.rs" 116 4 116 65] forall i : usize . i < base
     -> get_default0 arr (UIntSize.to_int i) (0 : uint32) <= elem };
    invariant { [#"../binary_search.rs" 116 4 116 65] forall i : usize . UIntSize.to_int base + UIntSize.to_int size < UIntSize.to_int i /\ UIntSize.to_int i < len_logic0 arr
     -> elem < get_default0 arr (UIntSize.to_int i) (0 : uint32) };
    goto BB6
  }
  BB6 {
    [#"../binary_search.rs" 119 10 119 18] _21 <- size > ([#"../binary_search.rs" 119 17 119 18] (1 : usize));
    switch (_21)
      | False -> goto BB13
      | True -> goto BB7
      end
  }
  BB7 {
    [#"../binary_search.rs" 120 19 120 27] _25 <- ([#"../binary_search.rs" 120 26 120 27] (2 : usize)) = ([#"../binary_search.rs" 120 19 120 27] (0 : usize));
    assert { [@expl:division by zero] [#"../binary_search.rs" 120 19 120 27] not _25 };
    goto BB8
  }
  BB8 {
    [#"../binary_search.rs" 120 19 120 27] half <- size / ([#"../binary_search.rs" 120 26 120 27] (2 : usize));
    [#"../binary_search.rs" 121 18 121 29] mid <- base + half;
    [#"../binary_search.rs" 123 19 123 33] _32 <- ([#"../binary_search.rs" 123 19 123 33] index0 arr mid);
    goto BB9
  }
  BB9 {
    [#"../binary_search.rs" 123 18 123 40] _30 <- _32 > elem;
    switch (_30)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    [#"../binary_search.rs" 123 43 123 47] _29 <- base;
    goto BB12
  }
  BB11 {
    [#"../binary_search.rs" 123 57 123 60] _29 <- mid;
    goto BB12
  }
  BB12 {
    [#"../binary_search.rs" 123 8 123 62] base <- _29;
    _29 <- any usize;
    [#"../binary_search.rs" 124 8 124 20] size <- size - half;
    goto BB5
  }
  BB13 {
    [#"../binary_search.rs" 127 15 127 30] _41 <- ([#"../binary_search.rs" 127 15 127 30] index0 arr base);
    goto BB14
  }
  BB14 {
    [#"../binary_search.rs" 127 14 127 30] cmp <- _41;
    [#"../binary_search.rs" 128 7 128 18] _44 <- cmp = elem;
    switch (_44)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    [#"../binary_search.rs" 129 8 129 16] _0 <- Core_Result_Result_Type.C_Ok base;
    goto BB20
  }
  BB16 {
    [#"../binary_search.rs" 130 14 130 24] _48 <- cmp < elem;
    switch (_48)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    [#"../binary_search.rs" 131 12 131 20] _51 <- base + ([#"../binary_search.rs" 131 19 131 20] (1 : usize));
    [#"../binary_search.rs" 131 8 131 21] _0 <- Core_Result_Result_Type.C_Err _51;
    _51 <- any usize;
    goto BB19
  }
  BB18 {
    [#"../binary_search.rs" 133 8 133 17] _0 <- Core_Result_Result_Type.C_Err base;
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
