
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module BinarySearch_List_Type
  type t_list 't =
    | C_Cons 't (t_list 't)
    | C_Nil
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons a _ -> a
      | C_Nil -> any 't
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons _ a -> a
      | C_Nil -> any t_list 't
      end
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module BinarySearch_Impl0_LenLogic_Stub
  type t
  use prelude.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
end
module BinarySearch_Impl0_LenLogic_Interface
  type t
  use prelude.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
  val len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    requires {[#"../binary_search.rs" 22 17 22 21] Inv0.inv self}
    ensures { [#"../binary_search.rs" 21 14 21 25] result >= 0 }
    ensures { result = len_logic self }
    
  axiom len_logic_spec : forall self : BinarySearch_List_Type.t_list t . ([#"../binary_search.rs" 22 17 22 21] Inv0.inv self) -> ([#"../binary_search.rs" 21 14 21 25] len_logic self >= 0)
end
module BinarySearch_Impl0_LenLogic
  type t
  use prelude.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match (self) with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  val len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    requires {[#"../binary_search.rs" 22 17 22 21] Inv0.inv self}
    ensures { [#"../binary_search.rs" 21 14 21 25] result >= 0 }
    ensures { result = len_logic self }
    
  axiom len_logic_spec : forall self : BinarySearch_List_Type.t_list t . ([#"../binary_search.rs" 22 17 22 21] Inv0.inv self) -> ([#"../binary_search.rs" 21 14 21 25] len_logic self >= 0)
end
module BinarySearch_Impl0_LenLogic_Impl
  type t
  use prelude.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec ghost function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    requires {[#"../binary_search.rs" 22 17 22 21] Inv0.inv self}
    ensures { [#"../binary_search.rs" 21 14 21 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../binary_search.rs" 23 8 26 9] match (self) with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module BinarySearch_Impl0_Get_Stub
  type t
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
end
module BinarySearch_Impl0_Get_Interface
  type t
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
  val get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    ensures { result = get self ix }
    
end
module BinarySearch_Impl0_Get
  type t
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
   =
    [#"../binary_search.rs" 31 8 40 9] match (self) with
      | BinarySearch_List_Type.C_Cons t ls -> if ix = 0 then Core_Option_Option_Type.C_Some t else get ls (ix - 1)
      | BinarySearch_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  val get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    ensures { result = get self ix }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module BinarySearch_Impl0_Index_Interface
  type t
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = BinarySearch_List_Type.t_list t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  clone BinarySearch_Impl0_LenLogic_Stub as LenLogic0 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  val index [#"../binary_search.rs" 45 4 45 40] (self : BinarySearch_List_Type.t_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UIntSize.to_int ix < LenLogic0.len_logic self}
    requires {[#"../binary_search.rs" 45 14 45 18] Inv0.inv self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = Get0.get self (UIntSize.to_int ix) }
    ensures { [#"../binary_search.rs" 45 38 45 40] Inv1.inv result }
    
end
module BinarySearch_Impl0_Index
  type t
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = BinarySearch_List_Type.t_list t
  clone BinarySearch_Impl0_Get as Get0 with
    type t = t
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with
    type t = t,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = BinarySearch_List_Type.t_list t
  let rec cfg index [#"../binary_search.rs" 45 4 45 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : BinarySearch_List_Type.t_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UIntSize.to_int ix < LenLogic0.len_logic self}
    requires {[#"../binary_search.rs" 45 14 45 18] Inv0.inv self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = Get0.get self (UIntSize.to_int ix) }
    ensures { [#"../binary_search.rs" 45 38 45 40] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self : BinarySearch_List_Type.t_list t = self;
  var ix : usize = ix;
  var orig_ix : usize;
  var l : BinarySearch_List_Type.t_list t;
  var t : t;
  var ls : BinarySearch_List_Type.t_list t;
  var _17 : BinarySearch_List_Type.t_list t;
  {
    goto BB0
  }
  BB0 {
    orig_ix <- ix;
    l <- self;
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    goto BB1
  }
  BB1 {
    invariant { [#"../binary_search.rs" 49 20 49 39] UIntSize.to_int ix < LenLogic0.len_logic l };
    invariant { [#"../binary_search.rs" 50 20 50 52] Get0.get self (UIntSize.to_int orig_ix) = Get0.get l (UIntSize.to_int ix) };
    goto BB2
  }
  BB2 {
    switch (l)
      | BinarySearch_List_Type.C_Cons _ _ -> goto BB3
      | _ -> goto BB7
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    t <- BinarySearch_List_Type.cons_0 l;
    ls <- BinarySearch_List_Type.cons_1 l;
    assert { [@expl:type invariant] Inv0.inv l };
    assume { Resolve0.resolve l };
    switch ([#"../binary_search.rs" 52 15 52 21] ix > ([#"../binary_search.rs" 52 20 52 21] (0 : usize)))
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    assert { [@expl:type invariant] Inv2.inv t };
    assume { Resolve2.resolve t };
    _17 <- ls;
    assert { [@expl:type invariant] Inv1.inv ls };
    assume { Resolve1.resolve ls };
    assert { [@expl:type invariant] Inv1.inv _17 };
    assume { Resolve1.resolve _17 };
    l <- _17;
    ix <- ([#"../binary_search.rs" 54 16 54 23] ix - ([#"../binary_search.rs" 54 22 54 23] (1 : usize)));
    goto BB1
  }
  BB6 {
    assert { [@expl:type invariant] Inv1.inv ls };
    assume { Resolve1.resolve ls };
    _0 <- t;
    assert { [@expl:type invariant] Inv2.inv t };
    assume { Resolve2.resolve t };
    return _0
  }
  BB7 {
    assert { [@expl:type invariant] Inv0.inv l };
    assume { Resolve0.resolve l };
    absurd
  }
  
end
module BinarySearch_Impl0_Len_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = BinarySearch_List_Type.t_list t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  clone BinarySearch_Impl0_LenLogic_Stub as LenLogic0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  val len [#"../binary_search.rs" 66 4 66 26] (self : BinarySearch_List_Type.t_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] LenLogic0.len_logic self <= 1000000}
    requires {[#"../binary_search.rs" 66 12 66 16] Inv0.inv self}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UIntSize.to_int result = LenLogic0.len_logic self }
    
end
module BinarySearch_Impl0_Len
  type t
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = BinarySearch_List_Type.t_list t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = BinarySearch_List_Type.t_list t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = BinarySearch_List_Type.t_list t
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = BinarySearch_List_Type.t_list t
  let rec cfg len [#"../binary_search.rs" 66 4 66 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : BinarySearch_List_Type.t_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] LenLogic0.len_logic self <= 1000000}
    requires {[#"../binary_search.rs" 66 12 66 16] Inv0.inv self}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UIntSize.to_int result = LenLogic0.len_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : BinarySearch_List_Type.t_list t = self;
  var len : usize;
  var l : BinarySearch_List_Type.t_list t;
  var ls : BinarySearch_List_Type.t_list t;
  {
    goto BB0
  }
  BB0 {
    len <- ([#"../binary_search.rs" 67 29 67 30] (0 : usize));
    l <- self;
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    goto BB1
  }
  BB1 {
    invariant { [#"../binary_search.rs" 69 20 69 60] UIntSize.to_int len + LenLogic0.len_logic l = LenLogic0.len_logic self };
    goto BB2
  }
  BB2 {
    switch (l)
      | BinarySearch_List_Type.C_Cons _ _ -> goto BB3
      | _ -> goto BB5
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    ls <- BinarySearch_List_Type.cons_1 l;
    assert { [@expl:type invariant] Inv0.inv l };
    assume { Resolve0.resolve l };
    len <- ([#"../binary_search.rs" 71 12 71 20] len + ([#"../binary_search.rs" 71 19 71 20] (1 : usize)));
    assert { [@expl:type invariant] Inv1.inv ls };
    assume { Resolve1.resolve ls };
    l <- ls;
    goto BB1
  }
  BB5 {
    assert { [@expl:type invariant] Inv0.inv l };
    assume { Resolve0.resolve l };
    _0 <- len;
    return _0
  }
  
end
module BinarySearch_Impl0_GetDefault_Stub
  type t
  use prelude.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    
end
module BinarySearch_Impl0_GetDefault_Interface
  type t
  use prelude.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    
  val get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    ensures { result = get_default self ix def }
    
end
module BinarySearch_Impl0_GetDefault
  type t
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = t
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    
   =
    [#"../binary_search.rs" 79 8 82 9] match (Get0.get self ix) with
      | Core_Option_Option_Type.C_Some v -> v
      | Core_Option_Option_Type.C_None -> def
      end
  val get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    ensures { result = get_default self ix def }
    
end
module BinarySearch_Impl1_IsSorted_Stub
  use prelude.Int
  use prelude.UInt32
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32)
end
module BinarySearch_Impl1_IsSorted_Interface
  use prelude.Int
  use prelude.UInt32
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32)
  val is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = is_sorted self }
    
end
module BinarySearch_Impl1_IsSorted
  use prelude.Int
  use prelude.UInt32
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = uint32
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) =
    [#"../binary_search.rs" 90 12 97 13] forall x2 : int . forall x1 : int . x1 <= x2 -> match ((Get0.get self x1, Get0.get self x2)) with
      | (Core_Option_Option_Type.C_Some v1, Core_Option_Option_Type.C_Some v2) -> v1 <= v2
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> true
      | _ -> false
      end
  val is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = is_sorted self }
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module BinarySearch_BinarySearch_Interface
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = BinarySearch_List_Type.t_list uint32
  clone BinarySearch_Impl0_GetDefault_Stub as GetDefault0 with
    type t = uint32
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = uint32
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone BinarySearch_Impl1_IsSorted_Stub as IsSorted0
  clone BinarySearch_Impl0_LenLogic_Stub as LenLogic0 with
    type t = uint32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  val binary_search [#"../binary_search.rs" 109 0 109 72] (arr : BinarySearch_List_Type.t_list uint32) (elem : uint32) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] LenLogic0.len_logic arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] IsSorted0.is_sorted arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : usize . result = Core_Result_Result_Type.C_Ok x -> Get0.get arr (UIntSize.to_int x) = Core_Option_Option_Type.C_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x -> GetDefault0.get_default arr (UIntSize.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UIntSize.to_int i) (0 : uint32)) }
    
end
module BinarySearch_BinarySearch
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = uint32
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = uint32,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = BinarySearch_List_Type.t_list uint32
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = BinarySearch_List_Type.t_list uint32,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = BinarySearch_List_Type.t_list uint32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = BinarySearch_List_Type.t_list uint32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get as Get0 with
    type t = uint32
  clone BinarySearch_Impl1_IsSorted as IsSorted0 with
    function Get0.get = Get0.get
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with
    type t = uint32,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone BinarySearch_Impl0_Index_Interface as Index0 with
    type t = uint32,
    function LenLogic0.len_logic = LenLogic0.len_logic,
    predicate Inv0.inv = Inv0.inv,
    function Get0.get = Get0.get,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv1.inv
  clone BinarySearch_Impl0_GetDefault as GetDefault0 with
    type t = uint32,
    function Get0.get = Get0.get
  clone BinarySearch_Impl0_Len_Interface as Len0 with
    type t = uint32,
    function LenLogic0.len_logic = LenLogic0.len_logic,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  let rec cfg binary_search [#"../binary_search.rs" 109 0 109 72] [@cfg:stackify] [@cfg:subregion_analysis] (arr : BinarySearch_List_Type.t_list uint32) (elem : uint32) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] LenLogic0.len_logic arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] IsSorted0.is_sorted arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : usize . result = Core_Result_Result_Type.C_Ok x -> Get0.get arr (UIntSize.to_int x) = Core_Option_Option_Type.C_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . 0 <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int x -> GetDefault0.get_default arr (UIntSize.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . UIntSize.to_int x < UIntSize.to_int i /\ UIntSize.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UIntSize.to_int i) (0 : uint32)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result usize usize;
  var arr : BinarySearch_List_Type.t_list uint32 = arr;
  var elem : uint32 = elem;
  var _10 : usize;
  var size : usize;
  var base : usize;
  var half : usize;
  var _25 : bool;
  var mid : usize;
  var _29 : usize;
  var _32 : uint32;
  var cmp : uint32;
  var _41 : uint32;
  {
    goto BB0
  }
  BB0 {
    _10 <- ([#"../binary_search.rs" 110 7 110 16] Len0.len arr);
    goto BB1
  }
  BB1 {
    switch ([#"../binary_search.rs" 110 7 110 21] _10 = ([#"../binary_search.rs" 110 20 110 21] (0 : usize)))
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    _0 <- Core_Result_Result_Type.C_Err ([#"../binary_search.rs" 111 19 111 20] (0 : usize));
    goto BB21
  }
  BB3 {
    size <- ([#"../binary_search.rs" 113 19 113 28] Len0.len arr);
    goto BB4
  }
  BB4 {
    base <- ([#"../binary_search.rs" 114 19 114 20] (0 : usize));
    goto BB5
  }
  BB5 {
    invariant { [#"../binary_search.rs" 116 16 116 63] 0 < UIntSize.to_int size /\ UIntSize.to_int size + UIntSize.to_int base <= LenLogic0.len_logic arr };
    invariant { [#"../binary_search.rs" 116 4 116 65] forall i : usize . i < base -> GetDefault0.get_default arr (UIntSize.to_int i) (0 : uint32) <= elem };
    invariant { [#"../binary_search.rs" 116 4 116 65] forall i : usize . UIntSize.to_int base + UIntSize.to_int size < UIntSize.to_int i /\ UIntSize.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UIntSize.to_int i) (0 : uint32) };
    goto BB6
  }
  BB6 {
    switch ([#"../binary_search.rs" 119 10 119 18] size > ([#"../binary_search.rs" 119 17 119 18] (1 : usize)))
      | False -> goto BB13
      | True -> goto BB7
      end
  }
  BB7 {
    _25 <- ([#"../binary_search.rs" 120 19 120 27] ([#"../binary_search.rs" 120 26 120 27] (2 : usize)) = ([#"../binary_search.rs" 120 19 120 27] (0 : usize)));
    assert { [@expl:division by zero] [#"../binary_search.rs" 120 19 120 27] not _25 };
    goto BB8
  }
  BB8 {
    half <- ([#"../binary_search.rs" 120 19 120 27] size / ([#"../binary_search.rs" 120 26 120 27] (2 : usize)));
    mid <- ([#"../binary_search.rs" 121 18 121 29] base + half);
    _32 <- ([#"../binary_search.rs" 123 19 123 33] Index0.index arr mid);
    goto BB9
  }
  BB9 {
    switch ([#"../binary_search.rs" 123 18 123 40] _32 > elem)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    _29 <- base;
    goto BB12
  }
  BB11 {
    _29 <- mid;
    goto BB12
  }
  BB12 {
    base <- _29;
    _29 <- any usize;
    size <- ([#"../binary_search.rs" 124 8 124 20] size - half);
    goto BB5
  }
  BB13 {
    _41 <- ([#"../binary_search.rs" 127 15 127 30] Index0.index arr base);
    goto BB14
  }
  BB14 {
    cmp <- _41;
    switch ([#"../binary_search.rs" 128 7 128 18] cmp = elem)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    _0 <- Core_Result_Result_Type.C_Ok base;
    goto BB20
  }
  BB16 {
    switch ([#"../binary_search.rs" 130 14 130 24] cmp < elem)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    _0 <- Core_Result_Result_Type.C_Err ([#"../binary_search.rs" 131 12 131 20] base + ([#"../binary_search.rs" 131 19 131 20] (1 : usize)));
    goto BB19
  }
  BB18 {
    _0 <- Core_Result_Result_Type.C_Err base;
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
