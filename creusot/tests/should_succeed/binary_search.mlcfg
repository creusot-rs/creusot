
module BinarySearch_List_Type
  type t_list 't =
    | C_Cons 't (t_list 't)
    | C_Nil
    
  let function cons_0 (self : t_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons a _ -> a
      | C_Nil -> any 't
      end
  let function cons_1 (self : t_list 't) : t_list 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cons _ a -> a
      | C_Nil -> any t_list 't
      end
end
module BinarySearch_Impl0_LenLogic_Stub
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
end
module BinarySearch_Impl0_LenLogic_Interface
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
  axiom len_logic_spec : forall self : BinarySearch_List_Type.t_list t . [#"../binary_search.rs" 21 14 21 25] len_logic self >= 0
end
module BinarySearch_Impl0_LenLogic
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match (self) with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
  val len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    ensures { result = len_logic self }
    
  axiom len_logic_spec : forall self : BinarySearch_List_Type.t_list t . [#"../binary_search.rs" 21 14 21 25] len_logic self >= 0
end
module BinarySearch_Impl0_LenLogic_Impl
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  let rec ghost function len_logic [#"../binary_search.rs" 22 4 22 29] (self : BinarySearch_List_Type.t_list t) : int
    ensures { [#"../binary_search.rs" 21 14 21 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../binary_search.rs" 23 8 26 9] match (self) with
      | BinarySearch_List_Type.C_Cons _ ls -> 1 + len_logic ls
      | BinarySearch_List_Type.C_Nil -> 0
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module BinarySearch_Impl0_Get_Stub
  type t
  use mach.int.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
end
module BinarySearch_Impl0_Get_Interface
  type t
  use mach.int.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
end
module BinarySearch_Impl0_Get
  type t
  use mach.int.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    
   =
    [#"../binary_search.rs" 31 8 40 9] match (self) with
      | BinarySearch_List_Type.C_Cons t ls -> if ix = 0 then Core_Option_Option_Type.C_Some t else get ls (ix - 1)
      | BinarySearch_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  val get [#"../binary_search.rs" 30 4 30 38] (self : BinarySearch_List_Type.t_list t) (ix : int) : Core_Option_Option_Type.t_option t
    ensures { result = get self ix }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module BinarySearch_Impl0_Index_Interface
  type t
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use BinarySearch_List_Type as BinarySearch_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = t
  clone BinarySearch_Impl0_LenLogic_Stub as LenLogic0 with
    type t = t,
    axiom .
  val index [@cfg:stackify] [#"../binary_search.rs" 45 4 45 40] (self : BinarySearch_List_Type.t_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = Get0.get self (UInt64.to_int ix) }
    
end
module BinarySearch_Impl0_Index
  type t
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.IntSize
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = BinarySearch_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = BinarySearch_List_Type.t_list t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get as Get0 with
    type t = t
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with
    type t = t,
    axiom .
  let rec cfg index [@cfg:stackify] [#"../binary_search.rs" 45 4 45 40] (self : BinarySearch_List_Type.t_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Core_Option_Option_Type.C_Some result = Get0.get self (UInt64.to_int ix) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self_1 : BinarySearch_List_Type.t_list t;
  var ix_2 : usize;
  var orig_ix_5 : usize;
  var l_6 : BinarySearch_List_Type.t_list t;
  var _7 : ();
  var _10 : ();
  var _11 : isize;
  var t_12 : t;
  var ls_13 : BinarySearch_List_Type.t_list t;
  var _14 : bool;
  var _15 : usize;
  var _16 : BinarySearch_List_Type.t_list t;
  var _17 : BinarySearch_List_Type.t_list t;
  var _18 : ();
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    self_1 <- self;
    ix_2 <- ix;
    goto BB0
  }
  BB0 {
    orig_ix_5 <- ix_2;
    assume { Resolve0.resolve l_6 };
    l_6 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant ix_valid { [#"../binary_search.rs" 49 30 49 49] UInt64.to_int ix_2 < LenLogic0.len_logic l_6 };
    invariant res_get { [#"../binary_search.rs" 50 29 50 61] Get0.get self_1 (UInt64.to_int orig_ix_5) = Get0.get l_6 (UInt64.to_int ix_2) };
    switch (l_6)
      | BinarySearch_List_Type.C_Cons _ _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB2 {
    t_12 <- BinarySearch_List_Type.cons_0 l_6;
    ls_13 <- BinarySearch_List_Type.cons_1 l_6;
    assume { Resolve0.resolve l_6 };
    _15 <- ix_2;
    _14 <- ([#"../binary_search.rs" 52 15 52 21] _15 > ([#"../binary_search.rs" 52 20 52 21] (0 : usize)));
    switch (_14)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve t_12 };
    _17 <- ls_13;
    assume { Resolve2.resolve ls_13 };
    _16 <- _17;
    assume { Resolve2.resolve _17 };
    assume { Resolve0.resolve l_6 };
    l_6 <- _16;
    _16 <- any BinarySearch_List_Type.t_list t;
    ix_2 <- ([#"../binary_search.rs" 54 16 54 23] ix_2 - ([#"../binary_search.rs" 54 22 54 23] (1 : usize)));
    _10 <- ();
    goto BB1
  }
  BB4 {
    assume { Resolve2.resolve ls_13 };
    _0 <- t_12;
    assume { Resolve1.resolve t_12 };
    return _0
  }
  BB5 {
    assume { Resolve0.resolve l_6 };
    _7 <- ();
    absurd
  }
  
end
module BinarySearch_Impl0_Len_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone BinarySearch_Impl0_LenLogic_Stub as LenLogic0 with
    type t = t,
    axiom .
  val len [@cfg:stackify] [#"../binary_search.rs" 66 4 66 26] (self : BinarySearch_List_Type.t_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] LenLogic0.len_logic self <= 1000000}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UInt64.to_int result = LenLogic0.len_logic self }
    
end
module BinarySearch_Impl0_Len
  type t
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.IntSize
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use BinarySearch_List_Type as BinarySearch_List_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = BinarySearch_List_Type.t_list t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = BinarySearch_List_Type.t_list t
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with
    type t = t,
    axiom .
  let rec cfg len [@cfg:stackify] [#"../binary_search.rs" 66 4 66 26] (self : BinarySearch_List_Type.t_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] LenLogic0.len_logic self <= 1000000}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UInt64.to_int result = LenLogic0.len_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : BinarySearch_List_Type.t_list t;
  var len_5 : usize;
  var l_6 : BinarySearch_List_Type.t_list t;
  var _7 : ();
  var _9 : ();
  var _10 : isize;
  var ls_11 : BinarySearch_List_Type.t_list t;
  var _12 : BinarySearch_List_Type.t_list t;
  var _13 : ();
  var _14 : ();
  var _15 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    len_5 <- ([#"../binary_search.rs" 67 29 67 30] (0 : usize));
    assume { Resolve0.resolve l_6 };
    l_6 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant len_valid { [#"../binary_search.rs" 69 31 69 71] UInt64.to_int len_5 + LenLogic0.len_logic l_6 = LenLogic0.len_logic self_1 };
    switch (l_6)
      | BinarySearch_List_Type.C_Cons _ _ -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    ls_11 <- BinarySearch_List_Type.cons_1 l_6;
    assume { Resolve0.resolve l_6 };
    len_5 <- ([#"../binary_search.rs" 71 12 71 20] len_5 + ([#"../binary_search.rs" 71 19 71 20] (1 : usize)));
    _12 <- ls_11;
    assume { Resolve1.resolve ls_11 };
    assume { Resolve0.resolve l_6 };
    l_6 <- _12;
    _12 <- any BinarySearch_List_Type.t_list t;
    _9 <- ();
    goto BB1
  }
  BB3 {
    assume { Resolve0.resolve l_6 };
    _7 <- ();
    _0 <- len_5;
    return _0
  }
  
end
module BinarySearch_Impl0_GetDefault_Stub
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    
end
module BinarySearch_Impl0_GetDefault_Interface
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    
end
module BinarySearch_Impl0_GetDefault
  type t
  use mach.int.Int
  use BinarySearch_List_Type as BinarySearch_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = t
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    
   =
    [#"../binary_search.rs" 79 8 82 9] match (Get0.get self ix) with
      | Core_Option_Option_Type.C_Some v -> v
      | Core_Option_Option_Type.C_None -> def
      end
  val get_default [#"../binary_search.rs" 78 4 78 46] (self : BinarySearch_List_Type.t_list t) (ix : int) (def : t) : t
    ensures { result = get_default self ix def }
    
end
module BinarySearch_Impl1_IsSorted_Stub
  use mach.int.Int
  use mach.int.UInt32
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32)
end
module BinarySearch_Impl1_IsSorted_Interface
  use mach.int.Int
  use mach.int.UInt32
  use BinarySearch_List_Type as BinarySearch_List_Type
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32)
end
module BinarySearch_Impl1_IsSorted
  use mach.int.Int
  use mach.int.UInt32
  use BinarySearch_List_Type as BinarySearch_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = uint32
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) =
    [#"../binary_search.rs" 90 12 97 13] forall x2 : int . forall x1 : int . x1 <= x2 -> match ((Get0.get self x1, Get0.get self x2)) with
      | (Core_Option_Option_Type.C_Some v1, Core_Option_Option_Type.C_Some v2) -> v1 <= v2
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> true
      | _ -> false
      end
  val is_sorted [#"../binary_search.rs" 88 4 88 30] (self : BinarySearch_List_Type.t_list uint32) : bool
    ensures { result = is_sorted self }
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module BinarySearch_BinarySearch_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use mach.int.UInt32
  use prelude.Borrow
  use BinarySearch_List_Type as BinarySearch_List_Type
  clone BinarySearch_Impl0_GetDefault_Stub as GetDefault0 with
    type t = uint32
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get_Stub as Get0 with
    type t = uint32
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone BinarySearch_Impl1_IsSorted_Stub as IsSorted0
  clone BinarySearch_Impl0_LenLogic_Stub as LenLogic0 with
    type t = uint32,
    axiom .
  val binary_search [@cfg:stackify] [#"../binary_search.rs" 109 0 109 72] (arr : BinarySearch_List_Type.t_list uint32) (elem : uint32) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] LenLogic0.len_logic arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] IsSorted0.is_sorted arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : usize . result = Core_Result_Result_Type.C_Ok x -> Get0.get arr (UInt64.to_int x) = Core_Option_Option_Type.C_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . 0 <= UInt64.to_int i /\ UInt64.to_int i < UInt64.to_int x -> GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . UInt64.to_int x < UInt64.to_int i /\ UInt64.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32)) }
    
end
module BinarySearch_BinarySearch
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use mach.int.UInt32
  use mach.int.UInt64
  use BinarySearch_List_Type as BinarySearch_List_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone BinarySearch_Impl0_Get as Get0 with
    type t = uint32
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with
    type t = uint32,
    axiom .
  clone BinarySearch_Impl0_Index_Interface as Index0 with
    type t = uint32,
    function LenLogic0.len_logic = LenLogic0.len_logic,
    function Get0.get = Get0.get
  clone BinarySearch_Impl0_Len_Interface as Len0 with
    type t = uint32,
    function LenLogic0.len_logic = LenLogic0.len_logic
  clone BinarySearch_Impl0_GetDefault as GetDefault0 with
    type t = uint32,
    function Get0.get = Get0.get
  clone BinarySearch_Impl1_IsSorted as IsSorted0 with
    function Get0.get = Get0.get
  use Core_Result_Result_Type as Core_Result_Result_Type
  let rec cfg binary_search [@cfg:stackify] [#"../binary_search.rs" 109 0 109 72] (arr : BinarySearch_List_Type.t_list uint32) (elem : uint32) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] LenLogic0.len_logic arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] IsSorted0.is_sorted arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : usize . result = Core_Result_Result_Type.C_Ok x -> Get0.get arr (UInt64.to_int x) = Core_Option_Option_Type.C_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . 0 <= UInt64.to_int i /\ UInt64.to_int i < UInt64.to_int x -> GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . UInt64.to_int x < UInt64.to_int i /\ UInt64.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result usize usize;
  var arr_1 : BinarySearch_List_Type.t_list uint32;
  var elem_2 : uint32;
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : BinarySearch_List_Type.t_list uint32;
  var _12 : ();
  var size_13 : usize;
  var _14 : BinarySearch_List_Type.t_list uint32;
  var base_15 : usize;
  var _16 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : usize;
  var half_23 : usize;
  var _24 : usize;
  var _25 : bool;
  var mid_26 : usize;
  var _27 : usize;
  var _28 : usize;
  var _29 : usize;
  var _30 : bool;
  var _31 : uint32;
  var _32 : uint32;
  var _33 : BinarySearch_List_Type.t_list uint32;
  var _34 : usize;
  var _35 : uint32;
  var _36 : usize;
  var _37 : ();
  var _38 : ();
  var _39 : ();
  var cmp_40 : uint32;
  var _41 : uint32;
  var _42 : BinarySearch_List_Type.t_list uint32;
  var _43 : usize;
  var _44 : bool;
  var _45 : uint32;
  var _46 : uint32;
  var _47 : usize;
  var _48 : bool;
  var _49 : uint32;
  var _50 : uint32;
  var _51 : usize;
  var _52 : usize;
  var _53 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    _11 <- arr_1;
    _10 <- ([#"../binary_search.rs" 110 7 110 16] Len0.len _11);
    goto BB1
  }
  BB1 {
    _9 <- ([#"../binary_search.rs" 110 7 110 21] _10 = ([#"../binary_search.rs" 110 20 110 21] (0 : usize)));
    switch (_9)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    _0 <- Core_Result_Result_Type.C_Err ([#"../binary_search.rs" 111 19 111 20] (0 : usize));
    goto BB20
  }
  BB3 {
    _8 <- ();
    _14 <- arr_1;
    size_13 <- ([#"../binary_search.rs" 113 19 113 28] Len0.len _14);
    goto BB4
  }
  BB4 {
    base_15 <- ([#"../binary_search.rs" 114 19 114 20] (0 : usize));
    goto BB5
  }
  BB5 {
    invariant size_valid { [#"../binary_search.rs" 116 28 116 75] 0 < UInt64.to_int size_13 /\ UInt64.to_int size_13 + UInt64.to_int base_15 <= LenLogic0.len_logic arr_1 };
    invariant lower_b { [#"../binary_search.rs" 116 4 116 77] forall i : usize . i < base_15 -> GetDefault0.get_default arr_1 (UInt64.to_int i) (0 : uint32) <= elem_2 };
    invariant lower_b { [#"../binary_search.rs" 116 4 116 77] forall i : usize . UInt64.to_int base_15 + UInt64.to_int size_13 < UInt64.to_int i /\ UInt64.to_int i < LenLogic0.len_logic arr_1 -> elem_2 < GetDefault0.get_default arr_1 (UInt64.to_int i) (0 : uint32) };
    _22 <- size_13;
    _21 <- ([#"../binary_search.rs" 119 10 119 18] _22 > ([#"../binary_search.rs" 119 17 119 18] (1 : usize)));
    switch (_21)
      | False -> goto BB12
      | True -> goto BB6
      end
  }
  BB6 {
    _24 <- size_13;
    _25 <- ([#"../binary_search.rs" 120 19 120 27] ([#"../binary_search.rs" 120 26 120 27] (2 : usize)) = ([#"../binary_search.rs" 120 19 120 27] (0 : usize)));
    assert { [#"../binary_search.rs" 120 19 120 27] not _25 };
    goto BB7
  }
  BB7 {
    half_23 <- ([#"../binary_search.rs" 120 19 120 27] _24 / ([#"../binary_search.rs" 120 26 120 27] (2 : usize)));
    _27 <- base_15;
    _28 <- half_23;
    mid_26 <- ([#"../binary_search.rs" 121 18 121 29] _27 + _28);
    _33 <- arr_1;
    _34 <- mid_26;
    _32 <- ([#"../binary_search.rs" 123 19 123 33] Index0.index _33 _34);
    goto BB8
  }
  BB8 {
    _31 <- _32;
    _35 <- elem_2;
    _30 <- ([#"../binary_search.rs" 123 18 123 40] _31 > _35);
    switch (_30)
      | False -> goto BB10
      | True -> goto BB9
      end
  }
  BB9 {
    _29 <- base_15;
    goto BB11
  }
  BB10 {
    _29 <- mid_26;
    goto BB11
  }
  BB11 {
    base_15 <- _29;
    _29 <- any usize;
    _36 <- half_23;
    size_13 <- ([#"../binary_search.rs" 124 8 124 20] size_13 - _36);
    _20 <- ();
    goto BB5
  }
  BB12 {
    _16 <- ();
    _42 <- arr_1;
    _43 <- base_15;
    _41 <- ([#"../binary_search.rs" 127 15 127 30] Index0.index _42 _43);
    goto BB13
  }
  BB13 {
    cmp_40 <- _41;
    _45 <- cmp_40;
    _46 <- elem_2;
    _44 <- ([#"../binary_search.rs" 128 7 128 18] _45 = _46);
    switch (_44)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    _47 <- base_15;
    _0 <- Core_Result_Result_Type.C_Ok _47;
    goto BB19
  }
  BB15 {
    _49 <- cmp_40;
    _50 <- elem_2;
    _48 <- ([#"../binary_search.rs" 130 14 130 24] _49 < _50);
    switch (_48)
      | False -> goto BB17
      | True -> goto BB16
      end
  }
  BB16 {
    _52 <- base_15;
    _51 <- ([#"../binary_search.rs" 131 12 131 20] _52 + ([#"../binary_search.rs" 131 19 131 20] (1 : usize)));
    _0 <- Core_Result_Result_Type.C_Err _51;
    goto BB18
  }
  BB17 {
    _53 <- base_15;
    _0 <- Core_Result_Result_Type.C_Err _53;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
