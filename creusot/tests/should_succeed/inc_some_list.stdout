module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type incsomelist_list  = 
    | IncSomeList_List_Cons uint32 (incsomelist_list)
    | IncSomeList_List_Nil
    
end
module IncSomeList_SumList_Interface
  use mach.int.Int
  use Type
  function sum_list (l : Type.incsomelist_list) : int
end
module IncSomeList_SumList
  use mach.int.Int
  use Type
  use mach.int.Int32
  function sum_list (l : Type.incsomelist_list) : int = 
    match (l) with
      | Type.IncSomeList_List_Cons a l2 -> a + sum_list l2
      | Type.IncSomeList_List_Nil -> 0
      end
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module IncSomeList_LemmaSumListNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_SumList_Interface as SumList0
  val lemma_sum_list_nonneg (l : Type.incsomelist_list) : ()
    ensures { SumList0.sum_list l >= 0 }
    
end
module IncSomeList_LemmaSumListNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_SumList as SumList0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.incsomelist_list
  let rec cfg lemma_sum_list_nonneg (l : Type.incsomelist_list) : ()
    ensures { SumList0.sum_list l >= 0 }
    
   = 
  var _0 : ();
  var l_1 : Type.incsomelist_list;
  var _2 : isize;
  var l_3 : Type.incsomelist_list;
  var _4 : Type.incsomelist_list;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    switch (l_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB1
      | Type.IncSomeList_List_Nil -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve2.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve l_1 };
    assume { Resolve2.resolve _2 };
    _0 <- ();
    goto BB6
  }
  BB3 {
    assume { Resolve1.resolve l_1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB4 {
    l_3 <- (let Type.IncSomeList_List_Cons _ a = l_1 in a);
    assume { Resolve1.resolve l_1 };
    _4 <- l_3;
    assume { Resolve3.resolve l_3 };
    _0 <- lemma_sum_list_nonneg _4;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module IncSomeList_SumListX_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSomeList_SumList_Interface as SumList0
  val sum_list_x (l : Type.incsomelist_list) : uint32
    requires {SumList0.sum_list l <= 1000000}
    ensures { result = SumList0.sum_list l }
    
end
module IncSomeList_SumListX
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSomeList_SumList as SumList0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve as Resolve4 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.incsomelist_list
  let rec cfg sum_list_x (l : Type.incsomelist_list) : uint32
    requires {SumList0.sum_list l <= 1000000}
    ensures { result = SumList0.sum_list l }
    
   = 
  var _0 : uint32;
  var l_1 : Type.incsomelist_list;
  var _2 : isize;
  var a_3 : uint32;
  var l2_4 : Type.incsomelist_list;
  var _5 : uint32;
  var _6 : uint32;
  var _7 : Type.incsomelist_list;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    switch (l_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB1
      | Type.IncSomeList_List_Nil -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve2.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve l_1 };
    assume { Resolve2.resolve _2 };
    _0 <- (0 : uint32);
    goto BB6
  }
  BB3 {
    assume { Resolve1.resolve l_1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB4 {
    a_3 <- (let Type.IncSomeList_List_Cons a _ = l_1 in a);
    l2_4 <- (let Type.IncSomeList_List_Cons _ a = l_1 in a);
    assume { Resolve1.resolve l_1 };
    assume { Resolve3.resolve _5 };
    _5 <- a_3;
    assume { Resolve4.resolve a_3 };
    _7 <- l2_4;
    assume { Resolve5.resolve l2_4 };
    _6 <- sum_list_x _7;
    goto BB5
  }
  BB5 {
    _0 <- _5 + _6;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Builtins_Impl12_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Impl12_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Rand_Random_Interface
  type t   
  val random () : t
end
module Rand_Random
  type t   
  val random () : t
end
module IncSomeList_TakeSomeList_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use Type
  clone IncSomeList_SumList_Interface as SumList0
  val take_some_list (ml : borrowed (Type.incsomelist_list)) : borrowed uint32
    ensures {  * result <= SumList0.sum_list ( * ml) }
    ensures { SumList0.sum_list ( ^ ml) - SumList0.sum_list ( * ml) =  ^ result -  * result }
    
end
module IncSomeList_TakeSomeList
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use Type
  clone IncSomeList_SumList as SumList0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve9 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve8 with type self = bool
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve7 with type t = Type.incsomelist_list
  clone Rand_Random_Interface as Random6 with type t = bool
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve1 with type t = Type.incsomelist_list
  clone IncSomeList_LemmaSumListNonneg_Interface as LemmaSumListNonneg4 with function SumList0.sum_list = SumList0.sum_list
  let rec cfg take_some_list (ml : borrowed (Type.incsomelist_list)) : borrowed uint32
    ensures {  * result <= SumList0.sum_list ( * ml) }
    ensures { SumList0.sum_list ( ^ ml) - SumList0.sum_list ( * ml) =  ^ result -  * result }
    
   = 
  var _0 : borrowed uint32;
  var ml_1 : borrowed (Type.incsomelist_list);
  var _2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : isize;
  var ma_5 : borrowed uint32;
  var ml2_6 : borrowed (Type.incsomelist_list);
  var _7 : borrowed uint32;
  var _8 : ();
  var _9 : Type.incsomelist_list;
  var _10 : borrowed uint32;
  var _11 : bool;
  var _12 : borrowed uint32;
  var _13 : borrowed uint32;
  var _14 : borrowed (Type.incsomelist_list);
  var _15 : ();
  var _16 : ();
  {
    ml_1 <- ml;
    goto BB0
  }
  BB0 {
    switch ( * ml_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB1
      | Type.IncSomeList_List_Nil -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve2.resolve _4 };
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve ml_1 };
    assume { Resolve2.resolve _4 };
    goto BB11
  }
  BB3 {
    assume { Resolve1.resolve ml_1 };
    assume { Resolve2.resolve _4 };
    absurd
  }
  BB4 {
    ma_5 <- borrow_mut (let Type.IncSomeList_List_Cons a _ =  * ml_1 in a);
    ml_1 <- { ml_1 with current = (let Type.IncSomeList_List_Cons a b =  * ml_1 in Type.IncSomeList_List_Cons ( ^ ma_5) b) };
    ml2_6 <- borrow_mut (let Type.IncSomeList_List_Cons _ a =  * ml_1 in a);
    ml_1 <- { ml_1 with current = (let Type.IncSomeList_List_Cons a b =  * ml_1 in Type.IncSomeList_List_Cons a ( ^ ml2_6)) };
    assume { Resolve1.resolve ml_1 };
    _9 <-  * ml2_6;
    _8 <- LemmaSumListNonneg4.lemma_sum_list_nonneg _9;
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _9 };
    _11 <- Random6.random ();
    goto BB6
  }
  BB6 {
    switch (_11)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve7.resolve ml2_6 };
    assume { Resolve8.resolve _11 };
    _12 <- borrow_mut ( * ma_5);
    ma_5 <- { ma_5 with current = ( ^ _12) };
    assume { Resolve9.resolve ma_5 };
    _10 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _10) };
    assume { Resolve9.resolve _12 };
    goto BB10
  }
  BB8 {
    assume { Resolve9.resolve ma_5 };
    assume { Resolve8.resolve _11 };
    _14 <- borrow_mut ( * ml2_6);
    ml2_6 <- { ml2_6 with current = ( ^ _14) };
    assume { Resolve7.resolve ml2_6 };
    _13 <- take_some_list _14;
    goto BB9
  }
  BB9 {
    _10 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _10) };
    assume { Resolve9.resolve _13 };
    goto BB10
  }
  BB10 {
    _7 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _7) };
    assume { Resolve9.resolve _10 };
    _3 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _3) };
    assume { Resolve9.resolve _7 };
    _2 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _2) };
    assume { Resolve9.resolve _3 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve9.resolve _2 };
    return _0
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _16 <- ();
    assume { Resolve3.resolve _16 };
    goto BB11
  }
  
end
module Core_Panicking_Panic_Interface
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module IncSomeList_IncSomeList_Interface
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSomeList_SumList_Interface as SumList0
  val inc_some_list (l : Type.incsomelist_list) (k : uint32) : ()
    requires {SumList0.sum_list l + k <= 1000000}
    
end
module IncSomeList_IncSomeList
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSomeList_SumList as SumList0
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve10 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve as Resolve9 with type self = ()
  clone Core_Panicking_Panic_Interface as Panic8
  clone CreusotContracts_Builtins_Resolve as Resolve7 with type self = bool
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve6 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = uint32
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve3 with type t = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.incsomelist_list
  clone IncSomeList_TakeSomeList_Interface as TakeSomeList4 with function SumList0.sum_list = SumList0.sum_list
  clone IncSomeList_SumListX_Interface as SumListX2 with function SumList0.sum_list = SumList0.sum_list
  let rec cfg inc_some_list (l : Type.incsomelist_list) (k : uint32) : ()
    requires {SumList0.sum_list l + k <= 1000000}
    
   = 
  var _0 : ();
  var l_1 : Type.incsomelist_list;
  var k_2 : uint32;
  var sum0_3 : uint32;
  var _4 : Type.incsomelist_list;
  var _5 : Type.incsomelist_list;
  var ma_6 : borrowed uint32;
  var _7 : borrowed (Type.incsomelist_list);
  var _8 : borrowed (Type.incsomelist_list);
  var _9 : uint32;
  var _10 : ();
  var _11 : bool;
  var _12 : bool;
  var _13 : uint32;
  var _14 : Type.incsomelist_list;
  var _15 : Type.incsomelist_list;
  var _16 : uint32;
  var _17 : uint32;
  var _18 : uint32;
  var _19 : ();
  {
    l_1 <- l;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    _5 <- l_1;
    _4 <- _5;
    assume { Resolve1.resolve _5 };
    sum0_3 <- SumListX2.sum_list_x _4;
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut l_1;
    l_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { Resolve3.resolve _8 };
    ma_6 <- TakeSomeList4.take_some_list _7;
    goto BB2
  }
  BB2 {
    assume { Resolve5.resolve _9 };
    _9 <- k_2;
    ma_6 <- { ma_6 with current = ( * ma_6 + _9) };
    assume { Resolve6.resolve ma_6 };
    assume { Resolve5.resolve _9 };
    _15 <- l_1;
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _13 <- SumListX2.sum_list_x _14;
    goto BB3
  }
  BB3 {
    assume { Resolve5.resolve _17 };
    _17 <- sum0_3;
    assume { Resolve5.resolve sum0_3 };
    assume { Resolve5.resolve _18 };
    _18 <- k_2;
    assume { Resolve5.resolve k_2 };
    _16 <- _17 + _18;
    _12 <- _13 = _16;
    _11 <- not _12;
    switch (_11)
      | False -> goto BB5
      | True -> goto BB4
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve7.resolve _11 };
    absurd
  }
  BB5 {
    assume { Resolve7.resolve _11 };
    _10 <- ();
    assume { Resolve9.resolve _10 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Resolve10.resolve l_1 };
    return _0
  }
  
end
