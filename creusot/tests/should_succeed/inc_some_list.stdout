module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type incsomelist_list  = 
    | IncSomeList_List_Cons uint32 (incsomelist_list)
    | IncSomeList_List_Nil
    
end
module IncSomeList_Impl1_Sum_Interface
  use Type
  use mach.int.Int
  function sum (self : Type.incsomelist_list) : int
end
module IncSomeList_Impl1_Sum
  use Type
  use mach.int.Int
  use mach.int.Int32
  function sum (self : Type.incsomelist_list) : int = 
    match (self) with
      | Type.IncSomeList_List_Cons a l -> a + sum l
      | Type.IncSomeList_List_Nil -> 0
      end
end
module IncSomeList_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsomelist_list) : ()
end
module IncSomeList_Impl1_LemmaSumNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsomelist_list) : ()
  val lemma_sum_nonneg (self : Type.incsomelist_list) : ()
    ensures { Sum0.sum self >= 0 }
    ensures { result = lemma_sum_nonneg self }
    
  axiom spec : forall self : Type.incsomelist_list . Sum0.sum self >= 0
  axiom def : forall self : Type.incsomelist_list . lemma_sum_nonneg self = match (self) with
    | Type.IncSomeList_List_Cons _ l -> lemma_sum_nonneg l
    | Type.IncSomeList_List_Nil -> ()
    end
end
module IncSomeList_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum as Sum0
  let rec lemma_sum_nonneg (self : Type.incsomelist_list) : ()
    ensures { Sum0.sum self >= 0 }
    variant {self}
    
   = 
    match (self) with
      | Type.IncSomeList_List_Cons _ l -> lemma_sum_nonneg l
      | Type.IncSomeList_List_Nil -> ()
      end
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module IncSomeList_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt32
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  val sum_x (self : Type.incsomelist_list) : uint32
    requires {Sum0.sum self <= 1000000}
    ensures { result = Sum0.sum self }
    
end
module IncSomeList_Impl1_SumX
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt32
  clone IncSomeList_Impl1_Sum as Sum0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = isize
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = Type.incsomelist_list
  let rec cfg sum_x (self : Type.incsomelist_list) : uint32
    requires {Sum0.sum self <= 1000000}
    ensures { result = Sum0.sum self }
    
   = 
  var _0 : uint32;
  var self_1 : Type.incsomelist_list;
  var _2 : isize;
  var a_3 : uint32;
  var l_4 : Type.incsomelist_list;
  var _5 : uint32;
  var _6 : uint32;
  var _7 : Type.incsomelist_list;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB1
      | Type.IncSomeList_List_Nil -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve1.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    _0 <- (0 : uint32);
    goto BB6
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    absurd
  }
  BB4 {
    a_3 <- (let Type.IncSomeList_List_Cons a _ = self_1 in a);
    l_4 <- (let Type.IncSomeList_List_Cons _ a = self_1 in a);
    assume { Resolve0.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _5 <- a_3;
    assume { Resolve3.resolve a_3 };
    _7 <- l_4;
    assume { Resolve4.resolve l_4 };
    _6 <- sum_x _7;
    goto BB5
  }
  BB5 {
    _0 <- _5 + _6;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Builtins_Model_Model
  type self   
  type modelty   
  function model (self : self) : modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Int_Impl3_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int
end
module CreusotContracts_Builtins_Int_Impl3_Model
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int = 
    self
end
module CreusotContracts_Builtins_Int_Impl3_Interface
  use mach.int.Int
  use mach.int.UInt32
  clone export CreusotContracts_Builtins_Int_Impl3_Model_Interface
  type modelty  = 
    int
  clone export CreusotContracts_Builtins_Model_Model with type self = uint32, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Int_Impl3
  use mach.int.Int
  use mach.int.UInt32
  clone export CreusotContracts_Builtins_Int_Impl3_Model
  type modelty  = 
    int
  clone export CreusotContracts_Builtins_Model_Model with type self = uint32, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Rand_Random_Interface
  type t   
  val random () : t
end
module Rand_Random
  type t   
  val random () : t
end
module IncSomeList_Impl1_TakeSome_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  clone CreusotContracts_Builtins_Int_Impl3_Interface as Model1
  clone CreusotContracts_Builtins_Model_Impl1_Model_Interface as Model0 with type t = uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val take_some (self : borrowed (Type.incsomelist_list)) : borrowed uint32
    ensures { Model0.model result <= Sum0.sum ( * self) }
    ensures { Sum0.sum ( ^ self) - Sum0.sum ( * self) =  ^ result - Model0.model result }
    
end
module IncSomeList_Impl1_TakeSome
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone IncSomeList_Impl1_Sum as Sum0
  clone CreusotContracts_Builtins_Int_Impl3 as Model1
  clone CreusotContracts_Builtins_Model_Impl1_Model as Model0 with type t = uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve6 with type t = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve5 with type self = bool
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve4 with type t = Type.incsomelist_list
  clone Rand_Random_Interface as Random0 with type t = bool
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = isize
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve0 with type t = Type.incsomelist_list
  clone IncSomeList_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  let rec cfg take_some (self : borrowed (Type.incsomelist_list)) : borrowed uint32
    ensures { Model0.model result <= Sum0.sum ( * self) }
    ensures { Sum0.sum ( ^ self) - Sum0.sum ( * self) =  ^ result - Model0.model result }
    
   = 
  var _0 : borrowed uint32;
  var self_1 : borrowed (Type.incsomelist_list);
  var _2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : isize;
  var ma_5 : borrowed uint32;
  var ml_6 : borrowed (Type.incsomelist_list);
  var _7 : borrowed uint32;
  var _8 : ();
  var _9 : Type.incsomelist_list;
  var _10 : borrowed uint32;
  var _11 : bool;
  var _12 : borrowed uint32;
  var _13 : borrowed uint32;
  var _14 : borrowed (Type.incsomelist_list);
  var _15 : ();
  var _16 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB1
      | Type.IncSomeList_List_Nil -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve1.resolve _4 };
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _4 };
    goto BB11
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _4 };
    absurd
  }
  BB4 {
    ma_5 <- borrow_mut (let Type.IncSomeList_List_Cons a _ =  * self_1 in a);
    self_1 <- { self_1 with current = (let Type.IncSomeList_List_Cons a b =  * self_1 in Type.IncSomeList_List_Cons ( ^ ma_5) b) };
    ml_6 <- borrow_mut (let Type.IncSomeList_List_Cons _ a =  * self_1 in a);
    self_1 <- { self_1 with current = (let Type.IncSomeList_List_Cons a b =  * self_1 in Type.IncSomeList_List_Cons a ( ^ ml_6)) };
    assume { Resolve0.resolve self_1 };
    _9 <-  * ml_6;
    _8 <- LemmaSumNonneg0.lemma_sum_nonneg _9;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _9 };
    _11 <- Random0.random ();
    goto BB6
  }
  BB6 {
    switch (_11)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve4.resolve ml_6 };
    assume { Resolve5.resolve _11 };
    _12 <- borrow_mut ( * ma_5);
    ma_5 <- { ma_5 with current = ( ^ _12) };
    assume { Resolve6.resolve ma_5 };
    _10 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _10) };
    assume { Resolve6.resolve _12 };
    goto BB10
  }
  BB8 {
    assume { Resolve6.resolve ma_5 };
    assume { Resolve5.resolve _11 };
    _14 <- borrow_mut ( * ml_6);
    ml_6 <- { ml_6 with current = ( ^ _14) };
    assume { Resolve4.resolve ml_6 };
    _13 <- take_some _14;
    goto BB9
  }
  BB9 {
    _10 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _10) };
    assume { Resolve6.resolve _13 };
    goto BB10
  }
  BB10 {
    _7 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _7) };
    assume { Resolve6.resolve _10 };
    _3 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _3) };
    assume { Resolve6.resolve _7 };
    _2 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _2) };
    assume { Resolve6.resolve _3 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve6.resolve _2 };
    return _0
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _16 <- ();
    assume { Resolve2.resolve _16 };
    goto BB11
  }
  
end
module Core_Panicking_Panic_Interface
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module IncSomeList_IncSomeList_Interface
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  val inc_some_list (l : Type.incsomelist_list) (k : uint32) : ()
    requires {Sum0.sum l + k <= 1000000}
    
end
module IncSomeList_IncSomeList
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSomeList_Impl1_Sum as Sum0
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = Type.incsomelist_list
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = ()
  clone Core_Panicking_Panic_Interface as Panic0
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = bool
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Builtins_Int_Impl3 as Model1
  clone CreusotContracts_Builtins_Model_Impl1_Model as Model0 with type t = uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone IncSomeList_Impl1_TakeSome_Interface as TakeSome0 with function Model0.model = Model0.model,
  function Sum0.sum = Sum0.sum, function Model1.model = Model1.model
  clone IncSomeList_Impl1_SumX_Interface as SumX0 with function Sum0.sum = Sum0.sum
  let rec cfg inc_some_list (l : Type.incsomelist_list) (k : uint32) : ()
    requires {Sum0.sum l + k <= 1000000}
    
   = 
  var _0 : ();
  var l_1 : Type.incsomelist_list;
  var k_2 : uint32;
  var sum0_3 : uint32;
  var _4 : Type.incsomelist_list;
  var ma_5 : borrowed uint32;
  var _6 : borrowed (Type.incsomelist_list);
  var _7 : uint32;
  var _8 : ();
  var _9 : bool;
  var _10 : bool;
  var _11 : uint32;
  var _12 : Type.incsomelist_list;
  var _13 : uint32;
  var _14 : uint32;
  var _15 : uint32;
  var _16 : ();
  {
    l_1 <- l;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    _4 <- l_1;
    sum0_3 <- SumX0.sum_x _4;
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut l_1;
    l_1 <-  ^ _6;
    ma_5 <- TakeSome0.take_some _6;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _7 };
    _7 <- k_2;
    ma_5 <- { ma_5 with current = ( * ma_5 + _7) };
    assume { Resolve1.resolve ma_5 };
    assume { Resolve0.resolve _7 };
    _12 <- l_1;
    _11 <- SumX0.sum_x _12;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _14 };
    _14 <- sum0_3;
    assume { Resolve0.resolve sum0_3 };
    assume { Resolve0.resolve _15 };
    _15 <- k_2;
    assume { Resolve0.resolve k_2 };
    _13 <- _14 + _15;
    _10 <- _11 = _13;
    _9 <- not _10;
    switch (_9)
      | False -> goto BB5
      | True -> goto BB4
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve2.resolve _9 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve _9 };
    _8 <- ();
    assume { Resolve3.resolve _8 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve l_1 };
    return _0
  }
  
end
module CreusotContracts_WellFounded
  type self   
end
module IncSomeList_Impl0_Interface
  use Type
  clone export CreusotContracts_WellFounded with type self = Type.incsomelist_list
end
module IncSomeList_Impl0
  use Type
  clone export CreusotContracts_WellFounded with type self = Type.incsomelist_list
end
