
module ProjectionToggle_ProjToggle
  type t
  
  let%span sprojection_toggle0 = "../projection_toggle.rs" 5 47 5 48
  
  let%span sprojection_toggle1 = "../projection_toggle.rs" 5 61 5 62
  
  let%span sprojection_toggle2 = "../projection_toggle.rs" 4 0 4 82
  
  let%span sprojection_toggle3 = "../projection_toggle.rs" 5 78 5 87
  
  let%span span4 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t)
  
  predicate inv'0 (_x : borrowed t)
  
  axiom inv'0 : forall x : borrowed t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span4]  ^ self =  * self
  
  let rec proj_toggle (toggle:bool) (a:borrowed t) (b:borrowed t) (return'  (ret:borrowed t))= {[%#sprojection_toggle1] inv'0 b}
    {[%#sprojection_toggle0] inv'0 a}
    (! bb0
    [ bb0 = any [ br0 -> {toggle = false} (! bb2) | br1 -> {toggle} (! bb1) ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 b} s1
      | s1 = -{resolve'0 b}- s2
      | s2 = Borrow.borrow_final <t> { * a} {Borrow.get_id a}
          (fun (_ret':borrowed t) ->  [ &_8 <- _ret' ]  [ &a <- { a with current = ( ^ _8) ; } ] s3)
      | s3 = -{inv'1 ( ^ _8)}- s4
      | s4 = Borrow.borrow_final <t> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed t) ->  [ &_6 <- _ret' ]  [ &_8 <- { _8 with current = ( ^ _6) ; } ] s5)
      | s5 = -{inv'1 ( ^ _6)}- s6
      | s6 = {[@expl:type invariant] inv'0 _8} s7
      | s7 = -{resolve'0 _8}- s8
      | s8 = bb3 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 = -{resolve'0 a}- s2
      | s2 = Borrow.borrow_final <t> { * b} {Borrow.get_id b}
          (fun (_ret':borrowed t) ->  [ &_6 <- _ret' ]  [ &b <- { b with current = ( ^ _6) ; } ] s3)
      | s3 = -{inv'1 ( ^ _6)}- s4
      | s4 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <t> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed t) ->  [ &_4 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _4) ; } ] s1)
      | s1 = -{inv'1 ( ^ _4)}- s2
      | s2 = Borrow.borrow_final <t> { * _4} {Borrow.get_id _4}
          (fun (_ret':borrowed t) ->  [ &_0 <- _ret' ]  [ &_4 <- { _4 with current = ( ^ _0) ; } ] s3)
      | s3 = -{inv'1 ( ^ _0)}- s4
      | s4 = {[@expl:type invariant] inv'0 _6} s5
      | s5 = -{resolve'0 _6}- s6
      | s6 = {[@expl:type invariant] inv'0 _4} s7
      | s7 = -{resolve'0 _4}- s8
      | s8 = {[@expl:type invariant] inv'0 b} s9
      | s9 = -{resolve'0 b}- s10
      | s10 = {[@expl:type invariant] inv'0 a} s11
      | s11 = -{resolve'0 a}- s12
      | s12 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed t = any_l ()
    | & toggle : bool = toggle
    | & a : borrowed t = a
    | & b : borrowed t = b
    | & _4 : borrowed t = any_l ()
    | & _6 : borrowed t = any_l ()
    | & _8 : borrowed t = any_l () ]
    
    [ return' (result:borrowed t)-> {[@expl:postcondition] [%#sprojection_toggle3] inv'0 result}
      {[@expl:postcondition] [%#sprojection_toggle2] if toggle then
        result = a /\  ^ b =  * b
      else
        result = b /\  ^ a =  * a
      }
      (! return' {result}) ]
    
end
module ProjectionToggle_F
  let%span sprojection_toggle0 = "../projection_toggle.rs" 14 16 14 18
  
  let%span sprojection_toggle1 = "../projection_toggle.rs" 15 16 15 17
  
  let%span sprojection_toggle2 = "../projection_toggle.rs" 17 24 17 28
  
  let%span sprojection_toggle3 = "../projection_toggle.rs" 19 10 19 11
  
  let%span sprojection_toggle4 = "../projection_toggle.rs" 20 17 20 19
  
  let%span sprojection_toggle5 = "../projection_toggle.rs" 20 4 20 20
  
  let%span span6 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../projection_toggle.rs" 5 47 5 48
  
  let%span span9 = "../projection_toggle.rs" 5 61 5 62
  
  let%span span10 = "../projection_toggle.rs" 4 0 4 82
  
  let%span span11 = "../projection_toggle.rs" 5 78 5 87
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed int32) =
    [%#span6] true
  
  predicate inv'0 (_x : borrowed int32)
  
  axiom inv'0 : forall x : borrowed int32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span7]  ^ self =  * self
  
  let rec proj_toggle'0 (toggle:bool) (a:borrowed int32) (b:borrowed int32) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span9] inv'0 b}
    {[@expl:precondition] [%#span8] inv'0 a}
    any
    [ return' (result:borrowed int32)-> {[%#span11] inv'0 result}
      {[%#span10] if toggle then result = a /\  ^ b =  * b else result = b /\  ^ a =  * a}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sprojection_toggle0] (10 : int32) ] s1
      | s1 =  [ &b <- [%#sprojection_toggle1] (5 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &a <-  ^ _5 ] s3)
      | s3 = Borrow.borrow_final <int32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _4) ; } ] s4)
      | s4 = Borrow.borrow_mut <int32> {b} (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &b <-  ^ _7 ] s5)
      | s5 = Borrow.borrow_final <int32> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s6)
      | s6 = proj_toggle'0 {[%#sprojection_toggle2] true} {_4} {_6} (fun (_ret':borrowed int32) ->  [ &x <- _ret' ] s7)
      | s7 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = Int32.add { * x} {[%#sprojection_toggle3] (5 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' ; } ] s3)
      | s3 = -{resolve'0 x}- s4
      | s4 = Int32.eq {a} {[%#sprojection_toggle4] (15 : int32)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s5)
      | s5 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = return' {_0}
    | bb3 = {[%#sprojection_toggle5] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & x : borrowed int32 = any_l ()
    | & _4 : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _9 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
