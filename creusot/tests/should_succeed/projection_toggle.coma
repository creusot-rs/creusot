module M_projection_toggle__proj_toggle [#"projection_toggle.rs" 5 0 5 87]
  type t
  
  let%span sprojection_toggle0 = "projection_toggle.rs" 5 47 5 48
  let%span sprojection_toggle1 = "projection_toggle.rs" 5 61 5 62
  let%span sprojection_toggle2 = "projection_toggle.rs" 4 0 4 82
  let%span sprojection_toggle3 = "projection_toggle.rs" 5 78 5 87
  let%span sresolve4 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant5 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'1 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant5] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec proj_toggle (toggle:bool) (a:borrowed t) (b:borrowed t) (return'  (ret:borrowed t))= {[%#sprojection_toggle1] inv'0 b}
    {[%#sprojection_toggle0] inv'0 a}
    (! bb0
    [ bb0 = any [ br0 -> {toggle = false} (! bb2) | br1 -> {toggle} (! bb1) ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 b} s1
      | s1 = -{resolve'0 b}- s2
      | s2 = {inv'1 a.current}
        Borrow.borrow_final <t> {a.current} {Borrow.get_id a}
          (fun (_ret':borrowed t) ->
             [ &_8 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &a <- { a with current = _ret'.final ; } ] 
            s3)
      | s3 = {inv'1 _8.current}
        Borrow.borrow_final <t> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed t) ->
             [ &_6 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_8 <- { _8 with current = _ret'.final ; } ] 
            s4)
      | s4 = {[@expl:type invariant] inv'0 _8} s5
      | s5 = -{resolve'0 _8}- s6
      | s6 = bb3 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 = -{resolve'0 a}- s2
      | s2 = {inv'1 b.current}
        Borrow.borrow_final <t> {b.current} {Borrow.get_id b}
          (fun (_ret':borrowed t) ->
             [ &_6 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &b <- { b with current = _ret'.final ; } ] 
            s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {inv'1 _6.current}
        Borrow.borrow_final <t> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed t) ->
             [ &_4 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_6 <- { _6 with current = _ret'.final ; } ] 
            s1)
      | s1 = {inv'1 _4.current}
        Borrow.borrow_final <t> {_4.current} {Borrow.get_id _4}
          (fun (_ret':borrowed t) ->
             [ &_0 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_4 <- { _4 with current = _ret'.final ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'0 _6} s3
      | s3 = -{resolve'0 _6}- s4
      | s4 = {[@expl:type invariant] inv'0 _4} s5
      | s5 = -{resolve'0 _4}- s6
      | s6 = {[@expl:type invariant] inv'0 b} s7
      | s7 = -{resolve'0 b}- s8
      | s8 = {[@expl:type invariant] inv'0 a} s9
      | s9 = -{resolve'0 a}- s10
      | s10 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed t = any_l ()
    | & toggle : bool = toggle
    | & a : borrowed t = a
    | & b : borrowed t = b
    | & _4 : borrowed t = any_l ()
    | & _6 : borrowed t = any_l ()
    | & _8 : borrowed t = any_l () ]
    
    [ return' (result:borrowed t)-> {[@expl:postcondition] [%#sprojection_toggle3] inv'0 result}
      {[@expl:postcondition] [%#sprojection_toggle2] if toggle then
        result = a /\ b.final = b.current
      else
        result = b /\ a.final = a.current
      }
      (! return' {result}) ]
    
end
module M_projection_toggle__f [#"projection_toggle.rs" 13 0 13 10]
  let%span sprojection_toggle0 = "projection_toggle.rs" 14 16 14 18
  let%span sprojection_toggle1 = "projection_toggle.rs" 15 16 15 17
  let%span sprojection_toggle2 = "projection_toggle.rs" 17 24 17 28
  let%span sprojection_toggle3 = "projection_toggle.rs" 19 10 19 11
  let%span sprojection_toggle4 = "projection_toggle.rs" 20 17 20 19
  let%span sprojection_toggle5 = "projection_toggle.rs" 20 4 20 20
  let%span sprojection_toggle6 = "projection_toggle.rs" 5 47 5 48
  let%span sprojection_toggle7 = "projection_toggle.rs" 5 61 5 62
  let%span sprojection_toggle8 = "projection_toggle.rs" 4 0 4 82
  let%span sprojection_toggle9 = "projection_toggle.rs" 5 78 5 87
  let%span sresolve10 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  let rec proj_toggle'0 (toggle:bool) (a:borrowed int32) (b:borrowed int32) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#sprojection_toggle7] inv'0 b}
    {[@expl:precondition] [%#sprojection_toggle6] inv'0 a}
    any
    [ return' (result:borrowed int32)-> {[%#sprojection_toggle9] inv'0 result}
      {[%#sprojection_toggle8] if toggle then result = a /\ b.final = b.current else result = b /\ a.final = a.current}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sprojection_toggle0] (10 : int32) ] s1
      | s1 =  [ &b <- [%#sprojection_toggle1] (5 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &a <- _ret'.final ] s3)
      | s3 = Borrow.borrow_final <int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s4)
      | s4 = Borrow.borrow_mut <int32> {b} (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &b <- _ret'.final ] s5)
      | s5 = Borrow.borrow_final <int32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final ; } ] s6)
      | s6 = proj_toggle'0 {[%#sprojection_toggle2] true} {_4} {_6} (fun (_ret':borrowed int32) ->  [ &x <- _ret' ] s7)
      | s7 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = Int32.add {x.current} {[%#sprojection_toggle3] (5 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' ; } ] s3)
      | s3 = -{resolve'0 x}- s4
      | s4 = Int32.eq {a} {[%#sprojection_toggle4] (15 : int32)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s5)
      | s5 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
      
    | bb2 = return' {_0}
    | bb3 = {[%#sprojection_toggle5] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & x : borrowed int32 = any_l ()
    | & _4 : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _9 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
