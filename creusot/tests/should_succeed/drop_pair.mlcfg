
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module DropPair_DropPair_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl0_Resolve_Stub as Resolve0 with
    type t1 = borrowed uint32,
    type t2 = borrowed uint32
  val drop_pair [#"../drop_pair.rs" 7 0 7 42] (_x : (borrowed uint32, borrowed uint32)) : ()
    ensures { [#"../drop_pair.rs" 4 10 4 22] Resolve0.resolve _x }
    ensures { [#"../drop_pair.rs" 5 10 5 24]  ^ (let (a, _) = _x in a) =  * (let (a, _) = _x in a) }
    ensures { [#"../drop_pair.rs" 6 10 6 24]  ^ (let (_, a) = _x in a) =  * (let (_, a) = _x in a) }
    
end
module DropPair_DropPair
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = borrowed uint32,
    type t2 = borrowed uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg drop_pair [#"../drop_pair.rs" 7 0 7 42] [@cfg:stackify] [@cfg:subregion_analysis] (_x : (borrowed uint32, borrowed uint32)) : ()
    ensures { [#"../drop_pair.rs" 4 10 4 22] Resolve0.resolve _x }
    ensures { [#"../drop_pair.rs" 5 10 5 24]  ^ (let (a, _) = _x in a) =  * (let (a, _) = _x in a) }
    ensures { [#"../drop_pair.rs" 6 10 6 24]  ^ (let (_, a) = _x in a) =  * (let (_, a) = _x in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x : (borrowed uint32, borrowed uint32) = _x;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _x };
    _0 <- ();
    return _0
  }
  
end
module DropPair_DropPair2_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val drop_pair2 [#"../drop_pair.rs" 9 0 9 42] (x : (borrowed uint32, borrowed uint32)) : ()
end
module DropPair_DropPair2
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = borrowed uint32,
    type t2 = borrowed uint32,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg drop_pair2 [#"../drop_pair.rs" 9 0 9 42] [@cfg:stackify] [@cfg:subregion_analysis] (x : (borrowed uint32, borrowed uint32)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : (borrowed uint32, borrowed uint32) = x;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve x };
    _0 <- ();
    return _0
  }
  
end
module DropPair_Drop_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val drop [#"../drop_pair.rs" 15 0 15 52] (_x : borrowed uint32) (y : borrowed uint32) : ()
end
module DropPair_Drop
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg drop [#"../drop_pair.rs" 15 0 15 52] [@cfg:stackify] [@cfg:subregion_analysis] (_x : borrowed uint32) (y : borrowed uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x : borrowed uint32 = _x;
  var y : borrowed uint32 = y;
  var _3 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _x };
    _3 <- Borrow.borrow_mut ( * y);
    y <- { y with current = ( ^ _3) };
    _x <- _3;
    _3 <- any borrowed uint32;
    assume { Resolve0.resolve _x };
    _0 <- ();
    assume { Resolve0.resolve y };
    return _0
  }
  
end
