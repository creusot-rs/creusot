
module DropPair_DropPair
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (borrowed uint32, borrowed uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg drop_pair [#"../drop_pair.rs" 7 0 7 42] [@cfg:stackify] [@cfg:subregion_analysis] (_x : (borrowed uint32, borrowed uint32)) : ()
    ensures { [#"../drop_pair.rs" 4 10 4 22] resolve0 _x }
    ensures { [#"../drop_pair.rs" 5 10 5 24]  ^ (let (a, _) = _x in a) =  * (let (a, _) = _x in a) }
    ensures { [#"../drop_pair.rs" 6 10 6 24]  ^ (let (_, a) = _x in a) =  * (let (_, a) = _x in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x : (borrowed uint32, borrowed uint32) = _x;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 _x };
    [#"../drop_pair.rs" 7 43 7 45] _0 <- ([#"../drop_pair.rs" 7 43 7 45] ());
    return _0
  }
  
end
module DropPair_DropPair2
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (borrowed uint32, borrowed uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg drop_pair2 [#"../drop_pair.rs" 9 0 9 42] [@cfg:stackify] [@cfg:subregion_analysis] (x : (borrowed uint32, borrowed uint32)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : (borrowed uint32, borrowed uint32) = x;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 x };
    [#"../drop_pair.rs" 9 43 11 1] _0 <- ([#"../drop_pair.rs" 9 43 11 1] ());
    return _0
  }
  
end
module DropPair_Drop
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  let rec cfg drop [#"../drop_pair.rs" 15 0 15 52] [@cfg:stackify] [@cfg:subregion_analysis] (_x : borrowed uint32) (y : borrowed uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _x : borrowed uint32 = _x;
  var y : borrowed uint32 = y;
  var _3 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 _x };
    [#"../drop_pair.rs" 16 9 16 10] _3 <- Borrow.borrow_mut ( * y);
    [#"../drop_pair.rs" 16 9 16 10] y <- { y with current =  ^ _3 };
    [#"../drop_pair.rs" 16 4 16 10] _x <- ([#"../drop_pair.rs" 16 4 16 10] _3);
    [#"../drop_pair.rs" 16 4 16 10] _3 <- any borrowed uint32;
    assume { resolve0 _x };
    [#"../drop_pair.rs" 15 53 17 1] _0 <- ([#"../drop_pair.rs" 15 53 17 1] ());
    assume { resolve0 y };
    return _0
  }
  
end
