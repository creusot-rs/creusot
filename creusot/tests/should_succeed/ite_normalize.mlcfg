
module IteNormalize_BTreeMap_Type
  type t_btreemap 'k 'v
end
module IteNormalize_Impl0_New_Interface
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val new [#"../ite_normalize.rs" 12 4 12 20] (_1' : ()) : IteNormalize_BTreeMap_Type.t_btreemap k v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 31 8 31 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module IteNormalize_Impl0_Get_Interface
  type k
  type v
  use map.Map
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  val get [#"../ite_normalize.rs" 19 4 21 15] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) (key : k) : Core_Option_Option_Type.t_option v
    ensures { [#"../ite_normalize.rs" 17 4 17 70] result = Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None }
    ensures { [#"../ite_normalize.rs" 18 4 18 91] forall v : v . result = Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v }
    
end
module IteNormalize_Impl2_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  function shallow_model [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module IteNormalize_Impl2_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  function shallow_model [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
  val shallow_model [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module IteNormalize_Impl2_ShallowModel
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  function shallow_model [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
  val shallow_model [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module IteNormalize_Impl0_Insert_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone IteNormalize_Impl2_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val insert [#"../ite_normalize.rs" 28 4 30 15] (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap k v)) (key : k) (value : v) : Core_Option_Option_Type.t_option v
    ensures { [#"../ite_normalize.rs" 27 4 27 125] forall i : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model ( ^ self)) i = (if i = DeepModel0.deep_model key then
      Core_Option_Option_Type.C_Some value
    else
      Map.get (ShallowModel1.shallow_model self) i
    ) }
    
end
module IteNormalize_Impl1_Clone_Interface
  type k
  type v
  use prelude.Borrow
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val clone' [#"../ite_normalize.rs" 39 4 39 27] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : IteNormalize_BTreeMap_Type.t_btreemap k v
    ensures { [#"../ite_normalize.rs" 38 14 38 29] self = result }
    
end
module IteNormalize_Expr_Type
  use prelude.Int
  use prelude.UIntSize
  type t_expr  =
    | C_IfThenElse (t_expr) (t_expr) (t_expr)
    | C_Var usize
    | C_True
    | C_False
    
  let function var_v (self : t_expr) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse _ _ _ -> any usize
      | C_Var a -> a
      | C_True -> any usize
      | C_False -> any usize
      end
  let function ifthenelse_c (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse a _ _ -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function ifthenelse_t (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse _ a _ -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function ifthenelse_e (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse _ _ a -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  val clone' (self : usize) : usize
    ensures { [#"../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' (self : t) : t
    ensures { [#"../ite_normalize.rs" 68 0 77 1] result = self }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IteNormalize_Impl6_Clone_Interface
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val clone' [#"../ite_normalize.rs" 55 9 55 14] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 55 9 55 14] result = self }
    
end
module IteNormalize_Impl6_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone1 with
    type t = IteNormalize_Expr_Type.t_expr,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone0
  let rec cfg clone' [#"../ite_normalize.rs" 55 9 55 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 55 9 55 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var _3 : isize;
  var c_1_4 : IteNormalize_Expr_Type.t_expr;
  var t_1_5 : IteNormalize_Expr_Type.t_expr;
  var e_1_6 : IteNormalize_Expr_Type.t_expr;
  var _7 : IteNormalize_Expr_Type.t_expr;
  var _8 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var _10 : IteNormalize_Expr_Type.t_expr;
  var _11 : IteNormalize_Expr_Type.t_expr;
  var _12 : IteNormalize_Expr_Type.t_expr;
  var _13 : IteNormalize_Expr_Type.t_expr;
  var _14 : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var v_1_16 : usize;
  var _17 : usize;
  var _18 : usize;
  var _19 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB1
      | IteNormalize_Expr_Type.C_Var _ -> goto BB2
      | IteNormalize_Expr_Type.C_True -> goto BB3
      | IteNormalize_Expr_Type.C_False -> goto BB4
      end
  }
  BB1 {
    goto BB6
  }
  BB2 {
    goto BB13
  }
  BB3 {
    goto BB15
  }
  BB4 {
    _0 <- IteNormalize_Expr_Type.C_False;
    goto BB16
  }
  BB5 {
    absurd
  }
  BB6 {
    c_1_4 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    t_1_5 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    e_1_6 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    _9 <- c_1_4;
    _8 <- _9;
    _7 <- ([#"../ite_normalize.rs" 55 9 55 14] Clone1.clone' _8);
    goto BB7
  }
  BB7 {
    _12 <- t_1_5;
    _11 <- _12;
    _10 <- ([#"../ite_normalize.rs" 55 9 55 14] Clone1.clone' _11);
    goto BB8
  }
  BB8 {
    _15 <- e_1_6;
    _14 <- _15;
    _13 <- ([#"../ite_normalize.rs" 55 9 55 14] Clone1.clone' _14);
    goto BB9
  }
  BB9 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _7 _10 _13;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB16
  }
  BB13 {
    v_1_16 <- IteNormalize_Expr_Type.var_v self_1;
    _19 <- v_1_16;
    _18 <- _19;
    _17 <- ([#"../ite_normalize.rs" 55 9 55 14] Clone0.clone' _18);
    goto BB14
  }
  BB14 {
    _0 <- IteNormalize_Expr_Type.C_Var _17;
    goto BB16
  }
  BB15 {
    _0 <- IteNormalize_Expr_Type.C_True;
    goto BB16
  }
  BB16 {
    return _0
  }
  BB20 {
    goto BB4
  }
  
end
module IteNormalize_Impl5_Variable_Interface
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val variable [#"../ite_normalize.rs" 101 4 101 37] (v : usize) : IteNormalize_Expr_Type.t_expr
end
module IteNormalize_Impl5_Variable
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg variable [#"../ite_normalize.rs" 101 4 101 37] [@cfg:stackify] [@cfg:subregion_analysis] (v : usize) : IteNormalize_Expr_Type.t_expr
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var v_1 : usize;
  var _2 : usize;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _2 <- v_1;
    _0 <- IteNormalize_Expr_Type.C_Var _2;
    return _0
  }
  
end
module IteNormalize_Impl3_From_Interface
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val from [#"../ite_normalize.rs" 80 4 80 29] (a : usize) : IteNormalize_Expr_Type.t_expr
end
module IteNormalize_Impl3_From
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_Variable_Interface as Variable0
  let rec cfg from [#"../ite_normalize.rs" 80 4 80 29] [@cfg:stackify] [@cfg:subregion_analysis] (a : usize) : IteNormalize_Expr_Type.t_expr
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var a_1 : usize;
  var _2 : usize;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- ([#"../ite_normalize.rs" 81 8 81 25] Variable0.variable _2);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module IteNormalize_Impl4_From_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val from [#"../ite_normalize.rs" 86 4 86 28] (b : bool) : IteNormalize_Expr_Type.t_expr
end
module IteNormalize_Impl4_From
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg from [#"../ite_normalize.rs" 86 4 86 28] [@cfg:stackify] [@cfg:subregion_analysis] (b : bool) : IteNormalize_Expr_Type.t_expr
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var b_1 : bool;
  var _2 : bool;
  {
    b_1 <- b;
    goto BB0
  }
  BB0 {
    _2 <- b_1;
    switch (_2)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _0 <- IteNormalize_Expr_Type.C_True;
    goto BB3
  }
  BB2 {
    _0 <- IteNormalize_Expr_Type.C_False;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module IteNormalize_Impl5_Ite_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ite [#"../ite_normalize.rs" 97 4 97 49] (c : IteNormalize_Expr_Type.t_expr) (t : IteNormalize_Expr_Type.t_expr) (e : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 96 14 96 91] result = IteNormalize_Expr_Type.C_IfThenElse c t e }
    
end
module IteNormalize_Impl5_Ite
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg ite [#"../ite_normalize.rs" 97 4 97 49] [@cfg:stackify] [@cfg:subregion_analysis] (c : IteNormalize_Expr_Type.t_expr) (t : IteNormalize_Expr_Type.t_expr) (e : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 96 14 96 91] result = IteNormalize_Expr_Type.C_IfThenElse c t e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var c_1 : IteNormalize_Expr_Type.t_expr;
  var t_2 : IteNormalize_Expr_Type.t_expr;
  var e_3 : IteNormalize_Expr_Type.t_expr;
  var _5 : IteNormalize_Expr_Type.t_expr;
  var _6 : IteNormalize_Expr_Type.t_expr;
  var _7 : IteNormalize_Expr_Type.t_expr;
  var _8 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var _10 : IteNormalize_Expr_Type.t_expr;
  {
    c_1 <- c;
    t_2 <- t;
    e_3 <- e;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <- c_1;
    c_1 <- any IteNormalize_Expr_Type.t_expr;
    _5 <- _6;
    goto BB2
  }
  BB2 {
    _8 <- t_2;
    t_2 <- any IteNormalize_Expr_Type.t_expr;
    _7 <- _8;
    goto BB3
  }
  BB3 {
    _10 <- e_3;
    e_3 <- any IteNormalize_Expr_Type.t_expr;
    _9 <- _10;
    goto BB4
  }
  BB4 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _5 _7 _9;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module IteNormalize_Impl5_IsNormalized_Stub
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr)
end
module IteNormalize_Impl5_IsNormalized_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr)
  val is_normalized [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_normalized self }
    
end
module IteNormalize_Impl5_IsNormalized
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match (self) with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized c /\ is_normalized t /\ is_normalized e /\ match (c) with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  val is_normalized [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_normalized self }
    
end
module IteNormalize_Impl5_Transpose_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_IsNormalized_Stub as IsNormalized0
  val transpose [#"../ite_normalize.rs" 110 4 110 52] (self : IteNormalize_Expr_Type.t_expr) (a : IteNormalize_Expr_Type.t_expr) (b : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 105 15 105 35] IsNormalized0.is_normalized self}
    requires {[#"../ite_normalize.rs" 106 15 106 32] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 107 15 107 32] IsNormalized0.is_normalized b}
    ensures { [#"../ite_normalize.rs" 108 14 108 36] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl5_Transpose
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_Clone_Interface as Clone0
  clone IteNormalize_Impl5_IsNormalized as IsNormalized0
  let rec cfg transpose [#"../ite_normalize.rs" 110 4 110 52] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) (a : IteNormalize_Expr_Type.t_expr) (b : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 105 15 105 35] IsNormalized0.is_normalized self}
    requires {[#"../ite_normalize.rs" 106 15 106 32] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 107 15 107 32] IsNormalized0.is_normalized b}
    ensures { [#"../ite_normalize.rs" 108 14 108 36] IsNormalized0.is_normalized result }
    variant {[#"../ite_normalize.rs" 109 14 109 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var a_2 : IteNormalize_Expr_Type.t_expr;
  var b_3 : IteNormalize_Expr_Type.t_expr;
  var _9 : isize;
  var c_10 : IteNormalize_Expr_Type.t_expr;
  var t_11 : IteNormalize_Expr_Type.t_expr;
  var e_12 : IteNormalize_Expr_Type.t_expr;
  var _13 : IteNormalize_Expr_Type.t_expr;
  var _14 : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var _16 : IteNormalize_Expr_Type.t_expr;
  var _17 : IteNormalize_Expr_Type.t_expr;
  var _18 : IteNormalize_Expr_Type.t_expr;
  var _19 : IteNormalize_Expr_Type.t_expr;
  var _20 : IteNormalize_Expr_Type.t_expr;
  var _21 : IteNormalize_Expr_Type.t_expr;
  var _22 : IteNormalize_Expr_Type.t_expr;
  var _23 : IteNormalize_Expr_Type.t_expr;
  var _24 : IteNormalize_Expr_Type.t_expr;
  var _25 : IteNormalize_Expr_Type.t_expr;
  var _26 : IteNormalize_Expr_Type.t_expr;
  var _27 : IteNormalize_Expr_Type.t_expr;
  var _28 : IteNormalize_Expr_Type.t_expr;
  var _29 : IteNormalize_Expr_Type.t_expr;
  var _30 : IteNormalize_Expr_Type.t_expr;
  var _31 : IteNormalize_Expr_Type.t_expr;
  {
    self_1 <- self;
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB5
      | IteNormalize_Expr_Type.C_Var _ -> goto BB6
      | IteNormalize_Expr_Type.C_True -> goto BB7
      | IteNormalize_Expr_Type.C_False -> goto BB8
      end
  }
  BB5 {
    goto BB10
  }
  BB6 {
    goto BB23
  }
  BB7 {
    goto BB30
  }
  BB8 {
    _0 <- b_3;
    b_3 <- any IteNormalize_Expr_Type.t_expr;
    goto BB31
  }
  BB9 {
    absurd
  }
  BB10 {
    c_10 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse (any IteNormalize_Expr_Type.t_expr) b c);
    t_11 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a (any IteNormalize_Expr_Type.t_expr) c);
    e_12 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a b (any IteNormalize_Expr_Type.t_expr));
    _13 <- c_10;
    c_10 <- any IteNormalize_Expr_Type.t_expr;
    _16 <- t_11;
    t_11 <- any IteNormalize_Expr_Type.t_expr;
    _18 <- a_2;
    _17 <- ([#"../ite_normalize.rs" 114 40 114 49] Clone0.clone' _18);
    goto BB11
  }
  BB11 {
    _20 <- b_3;
    _19 <- ([#"../ite_normalize.rs" 114 51 114 60] Clone0.clone' _20);
    goto BB12
  }
  BB12 {
    _15 <- ([#"../ite_normalize.rs" 114 28 114 61] transpose _16 _17 _19);
    goto BB13
  }
  BB13 {
    _14 <- _15;
    goto BB14
  }
  BB14 {
    _23 <- e_12;
    e_12 <- any IteNormalize_Expr_Type.t_expr;
    _24 <- a_2;
    a_2 <- any IteNormalize_Expr_Type.t_expr;
    _25 <- b_3;
    b_3 <- any IteNormalize_Expr_Type.t_expr;
    _22 <- ([#"../ite_normalize.rs" 115 28 115 45] transpose _23 _24 _25);
    goto BB15
  }
  BB15 {
    _21 <- _22;
    goto BB16
  }
  BB16 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _13 _14 _21;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB31
  }
  BB23 {
    _27 <- self_1;
    self_1 <- any IteNormalize_Expr_Type.t_expr;
    _26 <- _27;
    goto BB24
  }
  BB24 {
    _29 <- a_2;
    a_2 <- any IteNormalize_Expr_Type.t_expr;
    _28 <- _29;
    goto BB25
  }
  BB25 {
    _31 <- b_3;
    b_3 <- any IteNormalize_Expr_Type.t_expr;
    _30 <- _31;
    goto BB26
  }
  BB26 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _26 _28 _30;
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB31
  }
  BB30 {
    _0 <- a_2;
    a_2 <- any IteNormalize_Expr_Type.t_expr;
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    return _0
  }
  BB57 {
    goto BB8
  }
  BB58 {
    goto BB8
  }
  
end
module IteNormalize_Impl5_Normalize_Interface
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_IsNormalized_Stub as IsNormalized0
  val normalize [#"../ite_normalize.rs" 145 4 145 35] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 143 14 143 36] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl5_Normalize
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_IsNormalized as IsNormalized0
  clone IteNormalize_Impl5_Transpose_Interface as Transpose0 with
    predicate IsNormalized0.is_normalized = IsNormalized0.is_normalized
  clone IteNormalize_Impl6_Clone_Interface as Clone0
  let rec cfg normalize [#"../ite_normalize.rs" 145 4 145 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 143 14 143 36] IsNormalized0.is_normalized result }
    variant {[#"../ite_normalize.rs" 144 14 144 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var _4 : isize;
  var c_5 : IteNormalize_Expr_Type.t_expr;
  var t_6 : IteNormalize_Expr_Type.t_expr;
  var e_7 : IteNormalize_Expr_Type.t_expr;
  var cp_8 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var tp_10 : IteNormalize_Expr_Type.t_expr;
  var _11 : IteNormalize_Expr_Type.t_expr;
  var ep_12 : IteNormalize_Expr_Type.t_expr;
  var _13 : IteNormalize_Expr_Type.t_expr;
  var _14 : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var _16 : IteNormalize_Expr_Type.t_expr;
  var e_17 : IteNormalize_Expr_Type.t_expr;
  var _18 : IteNormalize_Expr_Type.t_expr;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    goto BB3
  }
  BB2 {
    e_17 <- self_1;
    _18 <- e_17;
    _0 <- ([#"../ite_normalize.rs" 153 17 153 26] Clone0.clone' _18);
    goto BB11
  }
  BB3 {
    c_5 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    t_6 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    e_7 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    _9 <- c_5;
    cp_8 <- ([#"../ite_normalize.rs" 148 25 148 38] normalize _9);
    goto BB4
  }
  BB4 {
    _11 <- t_6;
    tp_10 <- ([#"../ite_normalize.rs" 149 25 149 38] normalize _11);
    goto BB5
  }
  BB5 {
    _13 <- e_7;
    ep_12 <- ([#"../ite_normalize.rs" 150 25 150 38] normalize _13);
    goto BB6
  }
  BB6 {
    _14 <- cp_8;
    cp_8 <- any IteNormalize_Expr_Type.t_expr;
    _15 <- tp_10;
    tp_10 <- any IteNormalize_Expr_Type.t_expr;
    _16 <- ep_12;
    ep_12 <- any IteNormalize_Expr_Type.t_expr;
    _0 <- ([#"../ite_normalize.rs" 151 16 151 36] Transpose0.transpose _14 _15 _16);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB12
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module IteNormalize_Impl5_DoesNotContain_Stub
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
end
module IteNormalize_Impl5_DoesNotContain_Interface
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
  val does_not_contain [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize) : bool
    ensures { result = does_not_contain self vp }
    
end
module IteNormalize_Impl5_DoesNotContain
  use prelude.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize) =
    [#"../ite_normalize.rs" 170 8 176 9] match (self) with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> does_not_contain c vp /\ does_not_contain t vp /\ does_not_contain e vp
      | IteNormalize_Expr_Type.C_Var v -> v <> vp
      | _ -> true
      end
  val does_not_contain [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize) : bool
    ensures { result = does_not_contain self vp }
    
end
module IteNormalize_Impl5_IsSimplified_Stub
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_simplified [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr)
end
module IteNormalize_Impl5_IsSimplified_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_simplified [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr)
  val is_simplified [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_simplified self }
    
end
module IteNormalize_Impl5_IsSimplified
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_DoesNotContain_Stub as DoesNotContain0
  predicate is_simplified [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 159 8 165 9] match (self) with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> match (c) with
        | IteNormalize_Expr_Type.C_Var v -> DoesNotContain0.does_not_contain t v /\ DoesNotContain0.does_not_contain e v
        | c -> is_simplified c /\ is_simplified t /\ is_simplified e
        end
      | _ -> true
      end
  val is_simplified [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_simplified self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module IteNormalize_Impl5_SimplifyHelper_Interface
  use prelude.Int
  use prelude.UIntSize
  use map.Map
  use prelude.Int
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_IsSimplified_Stub as IsSimplified0
  clone IteNormalize_Impl5_DoesNotContain_Stub as DoesNotContain0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone IteNormalize_Impl2_ShallowModel_Stub as ShallowModel0 with
    type k = usize,
    type v = bool,
    type DeepModelTy0.deepModelTy = int
  clone IteNormalize_Impl5_IsNormalized_Stub as IsNormalized0
  val simplify_helper [#"../ite_normalize.rs" 189 4 189 66] (self : IteNormalize_Expr_Type.t_expr) (state : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 185 15 185 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 186 4 186 107] forall i : usize . (exists v : bool . Map.get (ShallowModel0.shallow_model state) (UIntSize.to_int i) = Core_Option_Option_Type.C_Some v) -> DoesNotContain0.does_not_contain result i }
    ensures { [#"../ite_normalize.rs" 187 14 187 36] IsSimplified0.is_simplified result }
    
end
module IteNormalize_Impl5_SimplifyHelper
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Borrow
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone IteNormalize_Impl2_ShallowModel as ShallowModel0 with
    type k = usize,
    type v = bool,
    type DeepModelTy0.deepModelTy = int
  use map.Map
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = IteNormalize_BTreeMap_Type.t_btreemap usize bool,
    type ShallowModelTy0.shallowModelTy = Map.map int (Core_Option_Option_Type.t_option bool),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = IteNormalize_BTreeMap_Type.t_btreemap usize bool,
    type ShallowModelTy0.shallowModelTy = Map.map int (Core_Option_Option_Type.t_option bool),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone IteNormalize_Impl0_Insert_Interface as Insert0 with
    type k = usize,
    type v = bool,
    type DeepModelTy0.deepModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone IteNormalize_Impl1_Clone_Interface as Clone0 with
    type k = usize,
    type v = bool
  clone IteNormalize_Impl0_Get_Interface as Get0 with
    type k = usize,
    type v = bool,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_DoesNotContain as DoesNotContain0
  clone IteNormalize_Impl5_IsSimplified as IsSimplified0 with
    predicate DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain
  clone IteNormalize_Impl5_IsNormalized as IsNormalized0
  let rec cfg simplify_helper [#"../ite_normalize.rs" 189 4 189 66] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) (state : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 185 15 185 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 186 4 186 107] forall i : usize . (exists v : bool . Map.get (ShallowModel0.shallow_model state) (UIntSize.to_int i) = Core_Option_Option_Type.C_Some v) -> DoesNotContain0.does_not_contain result i }
    ensures { [#"../ite_normalize.rs" 187 14 187 36] IsSimplified0.is_simplified result }
    variant {[#"../ite_normalize.rs" 188 14 188 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var state_2 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _7 : isize;
  var c_8 : IteNormalize_Expr_Type.t_expr;
  var t_9 : IteNormalize_Expr_Type.t_expr;
  var e_10 : IteNormalize_Expr_Type.t_expr;
  var _11 : isize;
  var v_12 : usize;
  var _13 : Core_Option_Option_Type.t_option bool;
  var _14 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : isize;
  var b_18 : bool;
  var _19 : bool;
  var _20 : IteNormalize_Expr_Type.t_expr;
  var _21 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _22 : IteNormalize_Expr_Type.t_expr;
  var _23 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var state_t_24 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _25 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _26 : Core_Option_Option_Type.t_option bool;
  var _27 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
  var _28 : usize;
  var tp_29 : IteNormalize_Expr_Type.t_expr;
  var _30 : IteNormalize_Expr_Type.t_expr;
  var _31 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var state_e_32 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _33 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _34 : Core_Option_Option_Type.t_option bool;
  var _35 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
  var _36 : usize;
  var ep_37 : IteNormalize_Expr_Type.t_expr;
  var _38 : IteNormalize_Expr_Type.t_expr;
  var _39 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _40 : IteNormalize_Expr_Type.t_expr;
  var _41 : IteNormalize_Expr_Type.t_expr;
  var _42 : IteNormalize_Expr_Type.t_expr;
  var _43 : IteNormalize_Expr_Type.t_expr;
  var _44 : IteNormalize_Expr_Type.t_expr;
  var c_45 : IteNormalize_Expr_Type.t_expr;
  var _46 : IteNormalize_Expr_Type.t_expr;
  var _47 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var v_48 : usize;
  var _49 : Core_Option_Option_Type.t_option bool;
  var _50 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _51 : usize;
  var _52 : usize;
  var _53 : isize;
  var b_54 : bool;
  var _55 : bool;
  var _56 : usize;
  var c_57 : IteNormalize_Expr_Type.t_expr;
  {
    self_1 <- self;
    state_2 <- state;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB4
      | IteNormalize_Expr_Type.C_Var _ -> goto BB5
      | _ -> goto BB6
      end
  }
  BB4 {
    goto BB7
  }
  BB5 {
    goto BB42
  }
  BB6 {
    c_57 <- self_1;
    self_1 <- any IteNormalize_Expr_Type.t_expr;
    _0 <- c_57;
    c_57 <- any IteNormalize_Expr_Type.t_expr;
    goto BB51
  }
  BB7 {
    c_8 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse (any IteNormalize_Expr_Type.t_expr) b c);
    t_9 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a (any IteNormalize_Expr_Type.t_expr) c);
    e_10 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a b (any IteNormalize_Expr_Type.t_expr));
    switch (c_8)
      | IteNormalize_Expr_Type.C_Var _ -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    c_45 <- c_8;
    c_8 <- any IteNormalize_Expr_Type.t_expr;
    _46 <- c_45;
    c_45 <- any IteNormalize_Expr_Type.t_expr;
    _47 <- state_2;
    state_2 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    _0 <- ([#"../ite_normalize.rs" 215 25 215 49] simplify_helper _46 _47);
    goto BB36
  }
  BB9 {
    goto BB10
  }
  BB10 {
    v_12 <- IteNormalize_Expr_Type.var_v c_8;
    _14 <- state_2;
    _16 <- v_12;
    _15 <- _16;
    _13 <- ([#"../ite_normalize.rs" 194 41 194 54] Get0.get _14 _15);
    goto BB11
  }
  BB11 {
    switch (_13)
      | Core_Option_Option_Type.C_Some _ -> goto BB12
      | _ -> goto BB19
      end
  }
  BB12 {
    goto BB13
  }
  BB13 {
    b_18 <- Core_Option_Option_Type.some_0 _13;
    _19 <- b_18;
    switch (_19)
      | False -> goto BB16
      | True -> goto BB14
      end
  }
  BB14 {
    _20 <- t_9;
    t_9 <- any IteNormalize_Expr_Type.t_expr;
    _21 <- state_2;
    state_2 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    _0 <- ([#"../ite_normalize.rs" 196 32 196 56] simplify_helper _20 _21);
    goto BB15
  }
  BB15 {
    goto BB18
  }
  BB16 {
    _22 <- e_10;
    e_10 <- any IteNormalize_Expr_Type.t_expr;
    _23 <- state_2;
    state_2 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    _0 <- ([#"../ite_normalize.rs" 198 32 198 56] simplify_helper _22 _23);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB35
  }
  BB19 {
    _25 <- state_2;
    state_t_24 <- ([#"../ite_normalize.rs" 202 46 202 59] Clone0.clone' _25);
    goto BB20
  }
  BB20 {
    _27 <- borrow_mut state_t_24;
    state_t_24 <-  ^ _27;
    _28 <- v_12;
    _26 <- ([#"../ite_normalize.rs" 203 28 203 51] Insert0.insert _27 _28 ([#"../ite_normalize.rs" 203 46 203 50] true));
    goto BB21
  }
  BB21 {
    _30 <- t_9;
    t_9 <- any IteNormalize_Expr_Type.t_expr;
    _31 <- state_t_24;
    state_t_24 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    tp_29 <- ([#"../ite_normalize.rs" 204 37 204 63] simplify_helper _30 _31);
    goto BB22
  }
  BB22 {
    _33 <- state_2;
    state_e_32 <- ([#"../ite_normalize.rs" 207 46 207 59] Clone0.clone' _33);
    goto BB23
  }
  BB23 {
    _35 <- borrow_mut state_e_32;
    state_e_32 <-  ^ _35;
    _36 <- v_12;
    _34 <- ([#"../ite_normalize.rs" 208 28 208 52] Insert0.insert _35 _36 ([#"../ite_normalize.rs" 208 46 208 51] false));
    goto BB24
  }
  BB24 {
    _38 <- e_10;
    e_10 <- any IteNormalize_Expr_Type.t_expr;
    _39 <- state_e_32;
    state_e_32 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    ep_37 <- ([#"../ite_normalize.rs" 209 37 209 63] simplify_helper _38 _39);
    goto BB25
  }
  BB25 {
    _40 <- c_8;
    c_8 <- any IteNormalize_Expr_Type.t_expr;
    _42 <- tp_29;
    tp_29 <- any IteNormalize_Expr_Type.t_expr;
    _41 <- _42;
    goto BB26
  }
  BB26 {
    _44 <- ep_37;
    ep_37 <- any IteNormalize_Expr_Type.t_expr;
    _43 <- _44;
    goto BB27
  }
  BB27 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _40 _41 _43;
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    goto BB38
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    goto BB52
  }
  BB42 {
    v_48 <- IteNormalize_Expr_Type.var_v self_1;
    _50 <- state_2;
    _52 <- v_48;
    _51 <- _52;
    _49 <- ([#"../ite_normalize.rs" 219 33 219 46] Get0.get _50 _51);
    goto BB43
  }
  BB43 {
    switch (_49)
      | Core_Option_Option_Type.C_Some _ -> goto BB44
      | _ -> goto BB49
      end
  }
  BB44 {
    goto BB45
  }
  BB45 {
    b_54 <- Core_Option_Option_Type.some_0 _49;
    _55 <- b_54;
    switch (_55)
      | False -> goto BB47
      | True -> goto BB46
      end
  }
  BB46 {
    _0 <- IteNormalize_Expr_Type.C_True;
    goto BB48
  }
  BB47 {
    _0 <- IteNormalize_Expr_Type.C_False;
    goto BB48
  }
  BB48 {
    goto BB50
  }
  BB49 {
    _56 <- v_48;
    _0 <- IteNormalize_Expr_Type.C_Var _56;
    goto BB50
  }
  BB50 {
    goto BB52
  }
  BB51 {
    goto BB52
  }
  BB52 {
    goto BB53
  }
  BB53 {
    goto BB54
  }
  BB54 {
    return _0
  }
  
end
module IteNormalize_Impl5_Simplify_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_IsSimplified_Stub as IsSimplified0
  clone IteNormalize_Impl5_IsNormalized_Stub as IsNormalized0
  val simplify [#"../ite_normalize.rs" 181 4 181 33] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 179 15 179 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 180 14 180 36] IsSimplified0.is_simplified result }
    
end
module IteNormalize_Impl5_Simplify
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone IteNormalize_Impl2_ShallowModel as ShallowModel0 with
    type k = usize,
    type v = bool,
    type DeepModelTy0.deepModelTy = int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_DoesNotContain as DoesNotContain0
  clone IteNormalize_Impl5_IsSimplified as IsSimplified0 with
    predicate DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain
  clone IteNormalize_Impl5_IsNormalized as IsNormalized0
  clone IteNormalize_Impl5_SimplifyHelper_Interface as SimplifyHelper0 with
    predicate IsNormalized0.is_normalized = IsNormalized0.is_normalized,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain,
    predicate IsSimplified0.is_simplified = IsSimplified0.is_simplified
  clone IteNormalize_Impl0_New_Interface as New0 with
    type k = usize,
    type v = bool
  let rec cfg simplify [#"../ite_normalize.rs" 181 4 181 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 179 15 179 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 180 14 180 36] IsSimplified0.is_simplified result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var _4 : IteNormalize_Expr_Type.t_expr;
  var _5 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- self_1;
    self_1 <- any IteNormalize_Expr_Type.t_expr;
    _5 <- ([#"../ite_normalize.rs" 182 29 182 44] New0.new ());
    goto BB2
  }
  BB2 {
    _0 <- ([#"../ite_normalize.rs" 182 8 182 45] SimplifyHelper0.simplify_helper _4 _5);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module IteNormalize_Impl1
  type k
  type v
  use prelude.Borrow
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  goal clone'_refn : [#"../ite_normalize.rs" 39 4 39 27] forall self : IteNormalize_BTreeMap_Type.t_btreemap k v . forall result : IteNormalize_BTreeMap_Type.t_btreemap k v . self = result -> result = self
end
module IteNormalize_Impl6
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  goal clone'_refn : [#"../ite_normalize.rs" 55 9 55 14] forall self : IteNormalize_Expr_Type.t_expr . forall result : IteNormalize_Expr_Type.t_expr . result = self -> result = self
end
module IteNormalize_Impl2
  type k
  type v
end
module IteNormalize_Impl7
  
end
module IteNormalize_Impl3
  
end
module IteNormalize_Impl4
  
end
