
module IteNormalize_BTreeMap_Type
  type t_btreemap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module IteNormalize_Expr_Type
  use prelude.UIntSize
  use prelude.Int
  type t_expr  =
    | C_IfThenElse (t_expr) (t_expr) (t_expr)
    | C_Var usize
    | C_True
    | C_False
    
  let function ifthenelse_c (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_IfThenElse a _ _ -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function ifthenelse_t (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_IfThenElse _ a _ -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function ifthenelse_e (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_IfThenElse _ _ a -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function var_v (self : t_expr) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_IfThenElse _ _ _ -> any usize
      | C_Var a -> a
      | C_True -> any usize
      | C_False -> any usize
      end
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module IteNormalize_Impl6_Clone
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : IteNormalize_Expr_Type.t_expr)
  val inv1 (_x : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : IteNormalize_Expr_Type.t_expr . inv1 x = true
  predicate invariant0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : IteNormalize_Expr_Type.t_expr)
  val inv0 (_x : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : IteNormalize_Expr_Type.t_expr . inv0 x = true
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  val clone1 (self : usize) : usize
    ensures { [#"../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
  val clone0 (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {inv0 self}
    ensures { [#"../ite_normalize.rs" 68 0 77 1] result = self }
    ensures { inv1 result }
    
  let rec cfg clone' [#"../ite_normalize.rs" 55 9 55 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 55 9 55 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self : IteNormalize_Expr_Type.t_expr = self;
  var c_1 : IteNormalize_Expr_Type.t_expr;
  var t_1 : IteNormalize_Expr_Type.t_expr;
  var e_1 : IteNormalize_Expr_Type.t_expr;
  var _7 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var _10 : IteNormalize_Expr_Type.t_expr;
  var _12 : IteNormalize_Expr_Type.t_expr;
  var _13 : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var v_1 : usize;
  var _17 : usize;
  var _19 : usize;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB1
      | IteNormalize_Expr_Type.C_Var _ -> goto BB2
      | IteNormalize_Expr_Type.C_True -> goto BB3
      | IteNormalize_Expr_Type.C_False -> goto BB4
      end
  }
  BB1 {
    goto BB6
  }
  BB2 {
    goto BB13
  }
  BB3 {
    goto BB15
  }
  BB4 {
    [#"../ite_normalize.rs" 56 9 60 9] _0 <- ([#"../ite_normalize.rs" 56 9 60 9] IteNormalize_Expr_Type.C_False);
    goto BB16
  }
  BB5 {
    assert { [#"../ite_normalize.rs" 55 9 55 14] false };
    absurd
  }
  BB6 {
    [#"../ite_normalize.rs" 57 17 57 18] c_1 <- ([#"../ite_normalize.rs" 57 17 57 18] IteNormalize_Expr_Type.ifthenelse_c self);
    [#"../ite_normalize.rs" 57 31 57 32] t_1 <- ([#"../ite_normalize.rs" 57 31 57 32] IteNormalize_Expr_Type.ifthenelse_t self);
    [#"../ite_normalize.rs" 57 45 57 46] e_1 <- ([#"../ite_normalize.rs" 57 45 57 46] IteNormalize_Expr_Type.ifthenelse_e self);
    [#"../ite_normalize.rs" 55 9 55 14] _9 <- ([#"../ite_normalize.rs" 55 9 55 14] c_1);
    [#"../ite_normalize.rs" 55 9 55 14] _7 <- ([#"../ite_normalize.rs" 55 9 55 14] clone0 ([#"../ite_normalize.rs" 55 9 55 14] _9));
    goto BB7
  }
  BB7 {
    [#"../ite_normalize.rs" 55 9 55 14] _12 <- ([#"../ite_normalize.rs" 55 9 55 14] t_1);
    [#"../ite_normalize.rs" 55 9 55 14] _10 <- ([#"../ite_normalize.rs" 55 9 55 14] clone0 ([#"../ite_normalize.rs" 55 9 55 14] _12));
    goto BB8
  }
  BB8 {
    [#"../ite_normalize.rs" 55 9 55 14] _15 <- ([#"../ite_normalize.rs" 55 9 55 14] e_1);
    [#"../ite_normalize.rs" 55 9 55 14] _13 <- ([#"../ite_normalize.rs" 55 9 55 14] clone0 ([#"../ite_normalize.rs" 55 9 55 14] _15));
    goto BB9
  }
  BB9 {
    [#"../ite_normalize.rs" 55 9 55 14] _0 <- ([#"../ite_normalize.rs" 55 9 55 14] IteNormalize_Expr_Type.C_IfThenElse _7 _10 _13);
    _7 <- any IteNormalize_Expr_Type.t_expr;
    _10 <- any IteNormalize_Expr_Type.t_expr;
    _13 <- any IteNormalize_Expr_Type.t_expr;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB16
  }
  BB13 {
    [#"../ite_normalize.rs" 58 10 58 11] v_1 <- ([#"../ite_normalize.rs" 58 10 58 11] IteNormalize_Expr_Type.var_v self);
    [#"../ite_normalize.rs" 55 9 55 14] _19 <- ([#"../ite_normalize.rs" 55 9 55 14] v_1);
    [#"../ite_normalize.rs" 55 9 55 14] _17 <- ([#"../ite_normalize.rs" 55 9 55 14] clone1 ([#"../ite_normalize.rs" 55 9 55 14] _19));
    goto BB14
  }
  BB14 {
    [#"../ite_normalize.rs" 55 9 55 14] _0 <- ([#"../ite_normalize.rs" 55 9 55 14] IteNormalize_Expr_Type.C_Var _17);
    _17 <- any usize;
    goto BB16
  }
  BB15 {
    [#"../ite_normalize.rs" 56 9 59 8] _0 <- ([#"../ite_normalize.rs" 56 9 59 8] IteNormalize_Expr_Type.C_True);
    goto BB16
  }
  BB16 {
    return _0
  }
  BB20 {
    goto BB4
  }
  
end
module IteNormalize_Impl5_Variable
  use prelude.UIntSize
  use prelude.Int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg variable [#"../ite_normalize.rs" 101 4 101 37] [@cfg:stackify] [@cfg:subregion_analysis] (v : usize) : IteNormalize_Expr_Type.t_expr
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var v : usize = v;
  {
    goto BB0
  }
  BB0 {
    [#"../ite_normalize.rs" 102 8 102 23] _0 <- ([#"../ite_normalize.rs" 102 8 102 23] IteNormalize_Expr_Type.C_Var ([#"../ite_normalize.rs" 102 20 102 21] v));
    return _0
  }
  
end
module IteNormalize_Impl3_From
  use prelude.UIntSize
  use prelude.Int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val variable0 [#"../ite_normalize.rs" 101 4 101 37] (v : usize) : IteNormalize_Expr_Type.t_expr
  let rec cfg from [#"../ite_normalize.rs" 80 4 80 29] [@cfg:stackify] [@cfg:subregion_analysis] (a : usize) : IteNormalize_Expr_Type.t_expr
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var a : usize = a;
  {
    goto BB0
  }
  BB0 {
    [#"../ite_normalize.rs" 81 8 81 25] _0 <- ([#"../ite_normalize.rs" 81 8 81 25] variable0 ([#"../ite_normalize.rs" 81 23 81 24] a));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module IteNormalize_Impl4_From
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg from [#"../ite_normalize.rs" 86 4 86 28] [@cfg:stackify] [@cfg:subregion_analysis] (b : bool) : IteNormalize_Expr_Type.t_expr
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var b : bool = b;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../ite_normalize.rs" 87 11 87 12] b)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../ite_normalize.rs" 88 12 88 22] _0 <- ([#"../ite_normalize.rs" 88 12 88 22] IteNormalize_Expr_Type.C_True);
    goto BB3
  }
  BB2 {
    [#"../ite_normalize.rs" 90 12 90 23] _0 <- ([#"../ite_normalize.rs" 90 12 90 23] IteNormalize_Expr_Type.C_False);
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module IteNormalize_Impl5_Ite
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg ite [#"../ite_normalize.rs" 97 4 97 49] [@cfg:stackify] [@cfg:subregion_analysis] (c : IteNormalize_Expr_Type.t_expr) (t : IteNormalize_Expr_Type.t_expr) (e : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 96 14 96 91] result = IteNormalize_Expr_Type.C_IfThenElse c t e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var c : IteNormalize_Expr_Type.t_expr = c;
  var t : IteNormalize_Expr_Type.t_expr = t;
  var e : IteNormalize_Expr_Type.t_expr = e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    [#"../ite_normalize.rs" 98 8 98 75] _0 <- ([#"../ite_normalize.rs" 98 8 98 75] IteNormalize_Expr_Type.C_IfThenElse ([#"../ite_normalize.rs" 98 39 98 40] c) ([#"../ite_normalize.rs" 98 55 98 56] t) ([#"../ite_normalize.rs" 98 71 98 72] e));
    [#"../ite_normalize.rs" 98 39 98 40] c <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 98 55 98 56] t <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 98 71 98 72] e <- any IteNormalize_Expr_Type.t_expr;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module IteNormalize_Impl5_Transpose
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized0 c /\ is_normalized0 t /\ is_normalized0 e /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  val is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_normalized0 self }
    
  use prelude.Borrow
  val clone0 [#"../ite_normalize.rs" 55 9 55 14] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 55 9 55 14] result = self }
    
  predicate resolve1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve1 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve1 self
  val resolve0 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = resolve0 self }
    
  let rec cfg transpose [#"../ite_normalize.rs" 110 4 110 52] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) (a : IteNormalize_Expr_Type.t_expr) (b : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 105 15 105 35] is_normalized0 self}
    requires {[#"../ite_normalize.rs" 106 15 106 32] is_normalized0 a}
    requires {[#"../ite_normalize.rs" 107 15 107 32] is_normalized0 b}
    ensures { [#"../ite_normalize.rs" 108 14 108 36] is_normalized0 result }
    variant {[#"../ite_normalize.rs" 109 14 109 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self : IteNormalize_Expr_Type.t_expr = self;
  var a : IteNormalize_Expr_Type.t_expr = a;
  var b : IteNormalize_Expr_Type.t_expr = b;
  var c : IteNormalize_Expr_Type.t_expr;
  var t : IteNormalize_Expr_Type.t_expr;
  var e : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var _17 : IteNormalize_Expr_Type.t_expr;
  var _19 : IteNormalize_Expr_Type.t_expr;
  var _22 : IteNormalize_Expr_Type.t_expr;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    switch (self)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB5
      | IteNormalize_Expr_Type.C_Var _ -> goto BB6
      | IteNormalize_Expr_Type.C_True -> goto BB7
      | IteNormalize_Expr_Type.C_False -> goto BB8
      end
  }
  BB5 {
    goto BB10
  }
  BB6 {
    goto BB23
  }
  BB7 {
    goto BB30
  }
  BB8 {
    [#"../ite_normalize.rs" 121 27 121 28] _0 <- ([#"../ite_normalize.rs" 121 27 121 28] b);
    [#"../ite_normalize.rs" 121 27 121 28] b <- any IteNormalize_Expr_Type.t_expr;
    goto BB31
  }
  BB9 {
    assert { [#"../ite_normalize.rs" 111 14 111 18] false };
    absurd
  }
  BB10 {
    [#"../ite_normalize.rs" 112 31 112 32] c <- ([#"../ite_normalize.rs" 112 31 112 32] IteNormalize_Expr_Type.ifthenelse_c self);
    [#"../ite_normalize.rs" 112 31 112 32] self <- (let IteNormalize_Expr_Type.C_IfThenElse x0 x1 x2 = self in IteNormalize_Expr_Type.C_IfThenElse (any IteNormalize_Expr_Type.t_expr) x1 x2);
    [#"../ite_normalize.rs" 112 34 112 35] t <- ([#"../ite_normalize.rs" 112 34 112 35] IteNormalize_Expr_Type.ifthenelse_t self);
    [#"../ite_normalize.rs" 112 34 112 35] self <- (let IteNormalize_Expr_Type.C_IfThenElse x0 x1 x2 = self in IteNormalize_Expr_Type.C_IfThenElse x0 (any IteNormalize_Expr_Type.t_expr) x2);
    [#"../ite_normalize.rs" 112 37 112 38] e <- ([#"../ite_normalize.rs" 112 37 112 38] IteNormalize_Expr_Type.ifthenelse_e self);
    [#"../ite_normalize.rs" 112 37 112 38] self <- (let IteNormalize_Expr_Type.C_IfThenElse x0 x1 x2 = self in IteNormalize_Expr_Type.C_IfThenElse x0 x1 (any IteNormalize_Expr_Type.t_expr));
    assume { resolve0 t };
    [#"../ite_normalize.rs" 114 40 114 49] _17 <- ([#"../ite_normalize.rs" 114 40 114 49] clone0 ([#"../ite_normalize.rs" 114 40 114 49] a));
    goto BB11
  }
  BB11 {
    [#"../ite_normalize.rs" 114 51 114 60] _19 <- ([#"../ite_normalize.rs" 114 51 114 60] clone0 ([#"../ite_normalize.rs" 114 51 114 60] b));
    goto BB12
  }
  BB12 {
    [#"../ite_normalize.rs" 114 28 114 61] _15 <- ([#"../ite_normalize.rs" 114 28 114 61] transpose ([#"../ite_normalize.rs" 114 28 114 61] t) _17 _19);
    [#"../ite_normalize.rs" 114 28 114 61] t <- any IteNormalize_Expr_Type.t_expr;
    _17 <- any IteNormalize_Expr_Type.t_expr;
    _19 <- any IteNormalize_Expr_Type.t_expr;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    assume { resolve0 e };
    [#"../ite_normalize.rs" 115 28 115 45] _22 <- ([#"../ite_normalize.rs" 115 28 115 45] transpose ([#"../ite_normalize.rs" 115 28 115 45] e) ([#"../ite_normalize.rs" 115 40 115 41] a) ([#"../ite_normalize.rs" 115 43 115 44] b));
    [#"../ite_normalize.rs" 115 28 115 45] e <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 115 40 115 41] a <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 115 43 115 44] b <- any IteNormalize_Expr_Type.t_expr;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    [#"../ite_normalize.rs" 112 44 116 13] _0 <- ([#"../ite_normalize.rs" 112 44 116 13] IteNormalize_Expr_Type.C_IfThenElse ([#"../ite_normalize.rs" 113 16 113 17] c) _15 _22);
    [#"../ite_normalize.rs" 113 16 113 17] c <- any IteNormalize_Expr_Type.t_expr;
    _15 <- any IteNormalize_Expr_Type.t_expr;
    _22 <- any IteNormalize_Expr_Type.t_expr;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB31
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    [#"../ite_normalize.rs" 118 16 118 86] _0 <- ([#"../ite_normalize.rs" 118 16 118 86] IteNormalize_Expr_Type.C_IfThenElse ([#"../ite_normalize.rs" 118 47 118 51] self) ([#"../ite_normalize.rs" 118 66 118 67] a) ([#"../ite_normalize.rs" 118 82 118 83] b));
    [#"../ite_normalize.rs" 118 47 118 51] self <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 118 66 118 67] a <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 118 82 118 83] b <- any IteNormalize_Expr_Type.t_expr;
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB31
  }
  BB30 {
    [#"../ite_normalize.rs" 120 26 120 27] _0 <- ([#"../ite_normalize.rs" 120 26 120 27] a);
    [#"../ite_normalize.rs" 120 26 120 27] a <- any IteNormalize_Expr_Type.t_expr;
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    return _0
  }
  BB57 {
    goto BB8
  }
  BB58 {
    goto BB8
  }
  
end
module IteNormalize_Impl5_Normalize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized0 c /\ is_normalized0 t /\ is_normalized0 e /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  val is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_normalized0 self }
    
  use prelude.Borrow
  val clone0 [#"../ite_normalize.rs" 55 9 55 14] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 55 9 55 14] result = self }
    
  val transpose0 [#"../ite_normalize.rs" 110 4 110 52] (self : IteNormalize_Expr_Type.t_expr) (a : IteNormalize_Expr_Type.t_expr) (b : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 105 15 105 35] is_normalized0 self}
    requires {[#"../ite_normalize.rs" 106 15 106 32] is_normalized0 a}
    requires {[#"../ite_normalize.rs" 107 15 107 32] is_normalized0 b}
    ensures { [#"../ite_normalize.rs" 108 14 108 36] is_normalized0 result }
    
  let rec cfg normalize [#"../ite_normalize.rs" 145 4 145 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 143 14 143 36] is_normalized0 result }
    variant {[#"../ite_normalize.rs" 144 14 144 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self : IteNormalize_Expr_Type.t_expr = self;
  var c : IteNormalize_Expr_Type.t_expr;
  var t : IteNormalize_Expr_Type.t_expr;
  var e : IteNormalize_Expr_Type.t_expr;
  var cp : IteNormalize_Expr_Type.t_expr;
  var tp : IteNormalize_Expr_Type.t_expr;
  var ep : IteNormalize_Expr_Type.t_expr;
  var e1 : IteNormalize_Expr_Type.t_expr;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    goto BB3
  }
  BB2 {
    [#"../ite_normalize.rs" 153 12 153 13] e1 <- ([#"../ite_normalize.rs" 153 12 153 13] self);
    [#"../ite_normalize.rs" 153 17 153 26] _0 <- ([#"../ite_normalize.rs" 153 17 153 26] clone0 ([#"../ite_normalize.rs" 153 17 153 26] e1));
    goto BB11
  }
  BB3 {
    [#"../ite_normalize.rs" 147 31 147 32] c <- ([#"../ite_normalize.rs" 147 31 147 32] IteNormalize_Expr_Type.ifthenelse_c self);
    [#"../ite_normalize.rs" 147 34 147 35] t <- ([#"../ite_normalize.rs" 147 34 147 35] IteNormalize_Expr_Type.ifthenelse_t self);
    [#"../ite_normalize.rs" 147 37 147 38] e <- ([#"../ite_normalize.rs" 147 37 147 38] IteNormalize_Expr_Type.ifthenelse_e self);
    [#"../ite_normalize.rs" 148 25 148 38] cp <- ([#"../ite_normalize.rs" 148 25 148 38] normalize ([#"../ite_normalize.rs" 148 25 148 38] c));
    goto BB4
  }
  BB4 {
    [#"../ite_normalize.rs" 149 25 149 38] tp <- ([#"../ite_normalize.rs" 149 25 149 38] normalize ([#"../ite_normalize.rs" 149 25 149 38] t));
    goto BB5
  }
  BB5 {
    [#"../ite_normalize.rs" 150 25 150 38] ep <- ([#"../ite_normalize.rs" 150 25 150 38] normalize ([#"../ite_normalize.rs" 150 25 150 38] e));
    goto BB6
  }
  BB6 {
    [#"../ite_normalize.rs" 151 16 151 36] _0 <- ([#"../ite_normalize.rs" 151 16 151 36] transpose0 ([#"../ite_normalize.rs" 151 16 151 18] cp) ([#"../ite_normalize.rs" 151 29 151 31] tp) ([#"../ite_normalize.rs" 151 33 151 35] ep));
    [#"../ite_normalize.rs" 151 16 151 18] cp <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 151 29 151 31] tp <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 151 33 151 35] ep <- any IteNormalize_Expr_Type.t_expr;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB12
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module IteNormalize_Impl5_SimplifyHelper
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant6 (self : Core_Option_Option_Type.t_option bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Core_Option_Option_Type.t_option bool) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option bool)
  val inv6 (_x : Core_Option_Option_Type.t_option bool) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option bool . inv6 x = true
  use prelude.Int
  predicate invariant5 (self : int) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : int) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : int)
  val inv5 (_x : int) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : int . inv5 x = true
  predicate invariant4 (self : bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : bool) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : bool)
  val inv4 (_x : bool) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : bool . inv4 x = true
  use prelude.UIntSize
  predicate invariant3 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : usize)
  val inv3 (_x : usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : usize . inv3 x = true
  predicate invariant2 (self : Core_Option_Option_Type.t_option bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Option_Option_Type.t_option bool) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option bool)
  val inv2 (_x : Core_Option_Option_Type.t_option bool) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option bool . inv2 x = true
  predicate invariant1 (self : bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : bool) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : bool)
  val inv1 (_x : bool) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : bool . inv1 x = true
  predicate invariant0 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : usize) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : usize)
  val inv0 (_x : usize) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : usize . inv0 x = true
  use prelude.Int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain0 [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
   =
    [#"../ite_normalize.rs" 170 8 176 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> does_not_contain0 c vp /\ does_not_contain0 t vp /\ does_not_contain0 e vp
      | IteNormalize_Expr_Type.C_Var v -> v <> vp
      | _ -> true
      end
  val does_not_contain0 [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize) : bool
    ensures { result = does_not_contain0 self vp }
    
  predicate is_simplified0 [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 159 8 165 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> match c with
        | IteNormalize_Expr_Type.C_Var v -> does_not_contain0 t v /\ does_not_contain0 e v
        | c -> is_simplified0 c /\ is_simplified0 t /\ is_simplified0 e
        end
      | _ -> true
      end
  val is_simplified0 [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_simplified0 self }
    
  use map.Map
  use prelude.UIntSize
  use map.Map
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  function shallow_model0 [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    
  val shallow_model0 [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    ensures { result = shallow_model0 self }
    
  predicate is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized0 c /\ is_normalized0 t /\ is_normalized0 e /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  val is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_normalized0 self }
    
  use prelude.Borrow
  function shallow_model3 (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) : Map.map int (Core_Option_Option_Type.t_option bool)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model0 ( * self)
  val shallow_model3 (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) : Map.map int (Core_Option_Option_Type.t_option bool)
    ensures { result = shallow_model3 self }
    
  function deep_model1 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model1 (self : usize) : int
    ensures { result = deep_model1 self }
    
  val insert0 [#"../ite_normalize.rs" 28 4 30 15] (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) (key : usize) (value : bool) : Core_Option_Option_Type.t_option bool
    requires {[#"../ite_normalize.rs" 28 25 28 28] inv3 key}
    requires {[#"../ite_normalize.rs" 28 33 28 38] inv4 value}
    ensures { [#"../ite_normalize.rs" 27 4 27 125] forall i : int . inv5 i -> Map.get (shallow_model0 ( ^ self)) i = (if i = deep_model1 key then
      Core_Option_Option_Type.C_Some value
    else
      Map.get (shallow_model3 self) i
    ) }
    ensures { [#"../ite_normalize.rs" 28 46 28 55] inv6 result }
    
  val clone0 [#"../ite_normalize.rs" 39 4 39 27] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_BTreeMap_Type.t_btreemap usize bool
    ensures { [#"../ite_normalize.rs" 38 14 38 29] self = result }
    
  predicate resolve1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve1 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve1 self
  val resolve0 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = resolve0 self }
    
  function deep_model0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  function shallow_model2 (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model0 self
  val shallow_model2 (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    ensures { result = shallow_model2 self }
    
  val get0 [#"../ite_normalize.rs" 19 4 21 15] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) (key : usize) : Core_Option_Option_Type.t_option bool
    requires {[#"../ite_normalize.rs" 19 25 19 28] inv0 key}
    ensures { [#"../ite_normalize.rs" 17 4 17 70] result = Core_Option_Option_Type.C_None -> Map.get (shallow_model2 self) (deep_model0 key) = Core_Option_Option_Type.C_None }
    ensures { [#"../ite_normalize.rs" 18 4 18 91] forall v : bool . inv1 v -> result = Core_Option_Option_Type.C_Some v -> Map.get (shallow_model2 self) (deep_model0 key) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../ite_normalize.rs" 19 40 19 53] inv2 result }
    
  let rec cfg simplify_helper [#"../ite_normalize.rs" 189 4 189 66] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) (state : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 185 15 185 35] is_normalized0 self}
    ensures { [#"../ite_normalize.rs" 186 4 186 107] forall i : usize . (exists v : bool . Map.get (shallow_model0 state) (UIntSize.to_int i) = Core_Option_Option_Type.C_Some v) -> does_not_contain0 result i }
    ensures { [#"../ite_normalize.rs" 187 14 187 36] is_simplified0 result }
    variant {[#"../ite_normalize.rs" 188 14 188 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self : IteNormalize_Expr_Type.t_expr = self;
  var state : IteNormalize_BTreeMap_Type.t_btreemap usize bool = state;
  var c : IteNormalize_Expr_Type.t_expr;
  var t : IteNormalize_Expr_Type.t_expr;
  var e : IteNormalize_Expr_Type.t_expr;
  var v : usize;
  var _13 : Core_Option_Option_Type.t_option bool;
  var _16 : usize;
  var b : bool;
  var state_t : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _26 : Core_Option_Option_Type.t_option bool;
  var _27 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
  var tp : IteNormalize_Expr_Type.t_expr;
  var state_e : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _34 : Core_Option_Option_Type.t_option bool;
  var _35 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
  var ep : IteNormalize_Expr_Type.t_expr;
  var c1 : IteNormalize_Expr_Type.t_expr;
  var v1 : usize;
  var _49 : Core_Option_Option_Type.t_option bool;
  var _52 : usize;
  var b1 : bool;
  var c2 : IteNormalize_Expr_Type.t_expr;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB4
      | IteNormalize_Expr_Type.C_Var _ -> goto BB5
      | _ -> goto BB6
      end
  }
  BB4 {
    goto BB7
  }
  BB5 {
    goto BB42
  }
  BB6 {
    [#"../ite_normalize.rs" 229 12 229 13] c2 <- ([#"../ite_normalize.rs" 229 12 229 13] self);
    [#"../ite_normalize.rs" 229 12 229 13] self <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 229 17 229 18] _0 <- ([#"../ite_normalize.rs" 229 17 229 18] c2);
    [#"../ite_normalize.rs" 229 17 229 18] c2 <- any IteNormalize_Expr_Type.t_expr;
    goto BB51
  }
  BB7 {
    [#"../ite_normalize.rs" 191 31 191 32] c <- ([#"../ite_normalize.rs" 191 31 191 32] IteNormalize_Expr_Type.ifthenelse_c self);
    [#"../ite_normalize.rs" 191 31 191 32] self <- (let IteNormalize_Expr_Type.C_IfThenElse x0 x1 x2 = self in IteNormalize_Expr_Type.C_IfThenElse (any IteNormalize_Expr_Type.t_expr) x1 x2);
    [#"../ite_normalize.rs" 191 34 191 35] t <- ([#"../ite_normalize.rs" 191 34 191 35] IteNormalize_Expr_Type.ifthenelse_t self);
    [#"../ite_normalize.rs" 191 34 191 35] self <- (let IteNormalize_Expr_Type.C_IfThenElse x0 x1 x2 = self in IteNormalize_Expr_Type.C_IfThenElse x0 (any IteNormalize_Expr_Type.t_expr) x2);
    [#"../ite_normalize.rs" 191 37 191 38] e <- ([#"../ite_normalize.rs" 191 37 191 38] IteNormalize_Expr_Type.ifthenelse_e self);
    [#"../ite_normalize.rs" 191 37 191 38] self <- (let IteNormalize_Expr_Type.C_IfThenElse x0 x1 x2 = self in IteNormalize_Expr_Type.C_IfThenElse x0 x1 (any IteNormalize_Expr_Type.t_expr));
    switch (c)
      | IteNormalize_Expr_Type.C_Var _ -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { resolve0 e };
    assume { resolve0 t };
    [#"../ite_normalize.rs" 215 20 215 21] c1 <- ([#"../ite_normalize.rs" 215 20 215 21] c);
    [#"../ite_normalize.rs" 215 20 215 21] c <- any IteNormalize_Expr_Type.t_expr;
    assume { resolve0 c };
    [#"../ite_normalize.rs" 215 25 215 49] _0 <- ([#"../ite_normalize.rs" 215 25 215 49] simplify_helper ([#"../ite_normalize.rs" 215 25 215 26] c1) ([#"../ite_normalize.rs" 215 43 215 48] state));
    [#"../ite_normalize.rs" 215 25 215 26] c1 <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 215 43 215 48] state <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    goto BB36
  }
  BB9 {
    goto BB10
  }
  BB10 {
    [#"../ite_normalize.rs" 193 32 193 33] v <- ([#"../ite_normalize.rs" 193 32 193 33] IteNormalize_Expr_Type.var_v c);
    [#"../ite_normalize.rs" 194 51 194 53] _16 <- ([#"../ite_normalize.rs" 194 51 194 53] v);
    [#"../ite_normalize.rs" 194 41 194 54] _13 <- ([#"../ite_normalize.rs" 194 41 194 54] get0 ([#"../ite_normalize.rs" 194 41 194 54] state) ([#"../ite_normalize.rs" 194 51 194 53] _16));
    goto BB11
  }
  BB11 {
    switch (_13)
      | Core_Option_Option_Type.C_Some _ -> goto BB12
      | _ -> goto BB19
      end
  }
  BB12 {
    goto BB13
  }
  BB13 {
    assume { resolve0 c };
    [#"../ite_normalize.rs" 194 36 194 37] b <- ([#"../ite_normalize.rs" 194 36 194 37] Core_Option_Option_Type.some_0 _13);
    switch ([#"../ite_normalize.rs" 195 31 195 33] b)
      | False -> goto BB16
      | True -> goto BB14
      end
  }
  BB14 {
    assume { resolve0 e };
    assume { resolve0 t };
    [#"../ite_normalize.rs" 196 32 196 56] _0 <- ([#"../ite_normalize.rs" 196 32 196 56] simplify_helper ([#"../ite_normalize.rs" 196 32 196 56] t) ([#"../ite_normalize.rs" 196 50 196 55] state));
    [#"../ite_normalize.rs" 196 32 196 56] t <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 196 50 196 55] state <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    goto BB15
  }
  BB15 {
    goto BB18
  }
  BB16 {
    assume { resolve0 t };
    assume { resolve0 e };
    [#"../ite_normalize.rs" 198 32 198 56] _0 <- ([#"../ite_normalize.rs" 198 32 198 56] simplify_helper ([#"../ite_normalize.rs" 198 32 198 56] e) ([#"../ite_normalize.rs" 198 50 198 55] state));
    [#"../ite_normalize.rs" 198 32 198 56] e <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 198 50 198 55] state <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB35
  }
  BB19 {
    [#"../ite_normalize.rs" 202 46 202 59] state_t <- ([#"../ite_normalize.rs" 202 46 202 59] clone0 ([#"../ite_normalize.rs" 202 46 202 59] state));
    goto BB20
  }
  BB20 {
    [#"../ite_normalize.rs" 203 28 203 51] _27 <- Borrow.borrow_mut state_t;
    [#"../ite_normalize.rs" 203 28 203 51] state_t <-  ^ _27;
    [#"../ite_normalize.rs" 203 28 203 51] _26 <- ([#"../ite_normalize.rs" 203 28 203 51] insert0 _27 ([#"../ite_normalize.rs" 203 43 203 44] v) ([#"../ite_normalize.rs" 203 46 203 50] [#"../ite_normalize.rs" 203 46 203 50] true));
    _27 <- any borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
    goto BB21
  }
  BB21 {
    assume { resolve0 t };
    [#"../ite_normalize.rs" 204 37 204 63] tp <- ([#"../ite_normalize.rs" 204 37 204 63] simplify_helper ([#"../ite_normalize.rs" 204 37 204 63] t) ([#"../ite_normalize.rs" 204 55 204 62] state_t));
    [#"../ite_normalize.rs" 204 37 204 63] t <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 204 55 204 62] state_t <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    goto BB22
  }
  BB22 {
    [#"../ite_normalize.rs" 207 46 207 59] state_e <- ([#"../ite_normalize.rs" 207 46 207 59] clone0 ([#"../ite_normalize.rs" 207 46 207 59] state));
    goto BB23
  }
  BB23 {
    [#"../ite_normalize.rs" 208 28 208 52] _35 <- Borrow.borrow_mut state_e;
    [#"../ite_normalize.rs" 208 28 208 52] state_e <-  ^ _35;
    [#"../ite_normalize.rs" 208 28 208 52] _34 <- ([#"../ite_normalize.rs" 208 28 208 52] insert0 _35 ([#"../ite_normalize.rs" 208 43 208 44] v) ([#"../ite_normalize.rs" 208 46 208 51] [#"../ite_normalize.rs" 208 46 208 51] false));
    _35 <- any borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
    goto BB24
  }
  BB24 {
    assume { resolve0 e };
    [#"../ite_normalize.rs" 209 37 209 63] ep <- ([#"../ite_normalize.rs" 209 37 209 63] simplify_helper ([#"../ite_normalize.rs" 209 37 209 63] e) ([#"../ite_normalize.rs" 209 55 209 62] state_e));
    [#"../ite_normalize.rs" 209 37 209 63] e <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 209 55 209 62] state_e <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    [#"../ite_normalize.rs" 212 28 212 84] _0 <- ([#"../ite_normalize.rs" 212 28 212 84] IteNormalize_Expr_Type.C_IfThenElse ([#"../ite_normalize.rs" 212 47 212 48] c) ([#"../ite_normalize.rs" 212 62 212 64] tp) ([#"../ite_normalize.rs" 212 79 212 81] ep));
    [#"../ite_normalize.rs" 212 47 212 48] c <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 212 62 212 64] tp <- any IteNormalize_Expr_Type.t_expr;
    [#"../ite_normalize.rs" 212 79 212 81] ep <- any IteNormalize_Expr_Type.t_expr;
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    goto BB38
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    goto BB52
  }
  BB42 {
    [#"../ite_normalize.rs" 218 24 218 25] v1 <- ([#"../ite_normalize.rs" 218 24 218 25] IteNormalize_Expr_Type.var_v self);
    [#"../ite_normalize.rs" 219 43 219 45] _52 <- ([#"../ite_normalize.rs" 219 43 219 45] v1);
    [#"../ite_normalize.rs" 219 33 219 46] _49 <- ([#"../ite_normalize.rs" 219 33 219 46] get0 ([#"../ite_normalize.rs" 219 33 219 46] state) ([#"../ite_normalize.rs" 219 43 219 45] _52));
    goto BB43
  }
  BB43 {
    switch (_49)
      | Core_Option_Option_Type.C_Some _ -> goto BB44
      | _ -> goto BB49
      end
  }
  BB44 {
    goto BB45
  }
  BB45 {
    [#"../ite_normalize.rs" 219 28 219 29] b1 <- ([#"../ite_normalize.rs" 219 28 219 29] Core_Option_Option_Type.some_0 _49);
    switch ([#"../ite_normalize.rs" 220 23 220 25] b1)
      | False -> goto BB47
      | True -> goto BB46
      end
  }
  BB46 {
    [#"../ite_normalize.rs" 221 24 221 34] _0 <- ([#"../ite_normalize.rs" 221 24 221 34] IteNormalize_Expr_Type.C_True);
    goto BB48
  }
  BB47 {
    [#"../ite_normalize.rs" 223 24 223 35] _0 <- ([#"../ite_normalize.rs" 223 24 223 35] IteNormalize_Expr_Type.C_False);
    goto BB48
  }
  BB48 {
    goto BB50
  }
  BB49 {
    [#"../ite_normalize.rs" 226 20 226 35] _0 <- ([#"../ite_normalize.rs" 226 20 226 35] IteNormalize_Expr_Type.C_Var ([#"../ite_normalize.rs" 226 32 226 33] v1));
    goto BB50
  }
  BB50 {
    goto BB52
  }
  BB51 {
    goto BB52
  }
  BB52 {
    goto BB53
  }
  BB53 {
    goto BB54
  }
  BB54 {
    return _0
  }
  
end
module IteNormalize_Impl5_Simplify
  use prelude.UIntSize
  use prelude.Int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain0 [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
   =
    [#"../ite_normalize.rs" 170 8 176 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> does_not_contain0 c vp /\ does_not_contain0 t vp /\ does_not_contain0 e vp
      | IteNormalize_Expr_Type.C_Var v -> v <> vp
      | _ -> true
      end
  val does_not_contain0 [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize) : bool
    ensures { result = does_not_contain0 self vp }
    
  predicate is_simplified0 [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 159 8 165 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> match c with
        | IteNormalize_Expr_Type.C_Var v -> does_not_contain0 t v /\ does_not_contain0 e v
        | c -> is_simplified0 c /\ is_simplified0 t /\ is_simplified0 e
        end
      | _ -> true
      end
  val is_simplified0 [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_simplified0 self }
    
  predicate is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized0 c /\ is_normalized0 t /\ is_normalized0 e /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  val is_normalized0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = is_normalized0 self }
    
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use map.Map
  use prelude.UIntSize
  function shallow_model0 [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    
  val shallow_model0 [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    ensures { result = shallow_model0 self }
    
  val simplify_helper0 [#"../ite_normalize.rs" 189 4 189 66] (self : IteNormalize_Expr_Type.t_expr) (state : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 185 15 185 35] is_normalized0 self}
    ensures { [#"../ite_normalize.rs" 186 4 186 107] forall i : usize . (exists v : bool . Map.get (shallow_model0 state) (UIntSize.to_int i) = Core_Option_Option_Type.C_Some v) -> does_not_contain0 result i }
    ensures { [#"../ite_normalize.rs" 187 14 187 36] is_simplified0 result }
    
  val new0 [#"../ite_normalize.rs" 12 4 12 20] (_1 : ()) : IteNormalize_BTreeMap_Type.t_btreemap usize bool
  let rec cfg simplify [#"../ite_normalize.rs" 181 4 181 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 179 15 179 35] is_normalized0 self}
    ensures { [#"../ite_normalize.rs" 180 14 180 36] is_simplified0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self : IteNormalize_Expr_Type.t_expr = self;
  var _5 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../ite_normalize.rs" 182 29 182 44] _5 <- ([#"../ite_normalize.rs" 182 29 182 44] new0 ());
    goto BB2
  }
  BB2 {
    [#"../ite_normalize.rs" 182 8 182 45] _0 <- ([#"../ite_normalize.rs" 182 8 182 45] simplify_helper0 ([#"../ite_normalize.rs" 182 8 182 12] self) _5);
    [#"../ite_normalize.rs" 182 8 182 12] self <- any IteNormalize_Expr_Type.t_expr;
    _5 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module IteNormalize_Impl1
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  predicate invariant1 (self : IteNormalize_BTreeMap_Type.t_btreemap k v)
  val invariant1 (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : IteNormalize_BTreeMap_Type.t_btreemap k v)
  val inv1 (_x : IteNormalize_BTreeMap_Type.t_btreemap k v) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : IteNormalize_BTreeMap_Type.t_btreemap k v . inv1 x = true
  predicate invariant0 (self : IteNormalize_BTreeMap_Type.t_btreemap k v)
  val invariant0 (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : IteNormalize_BTreeMap_Type.t_btreemap k v)
  val inv0 (_x : IteNormalize_BTreeMap_Type.t_btreemap k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : IteNormalize_BTreeMap_Type.t_btreemap k v . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../ite_normalize.rs" 39 4 39 27] forall self : IteNormalize_BTreeMap_Type.t_btreemap k v . inv0 self -> (forall result : IteNormalize_BTreeMap_Type.t_btreemap k v . self = result -> inv1 result /\ result = self)
end
module IteNormalize_Impl6
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : IteNormalize_Expr_Type.t_expr)
  val inv1 (_x : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : IteNormalize_Expr_Type.t_expr . inv1 x = true
  predicate invariant0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : IteNormalize_Expr_Type.t_expr)
  val inv0 (_x : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : IteNormalize_Expr_Type.t_expr . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../ite_normalize.rs" 55 9 55 14] forall self : IteNormalize_Expr_Type.t_expr . inv0 self -> (forall result : IteNormalize_Expr_Type.t_expr . result = self -> inv1 result /\ result = self)
end
module IteNormalize_Impl2
  type k
  type v
end
module IteNormalize_Impl7
  
end
module IteNormalize_Impl3
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : IteNormalize_Expr_Type.t_expr)
  val inv1 (_x : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : IteNormalize_Expr_Type.t_expr . inv1 x = true
  use prelude.UIntSize
  predicate invariant0 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : usize) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : usize)
  val inv0 (_x : usize) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : usize . inv0 x = true
  use prelude.Int
  goal from_refn : [#"../ite_normalize.rs" 80 4 80 29] forall value : usize . inv0 value -> (forall result : IteNormalize_Expr_Type.t_expr . inv1 result)
end
module IteNormalize_Impl4
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : IteNormalize_Expr_Type.t_expr)
  val inv1 (_x : IteNormalize_Expr_Type.t_expr) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : IteNormalize_Expr_Type.t_expr . inv1 x = true
  predicate invariant0 (self : bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : bool) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : bool)
  val inv0 (_x : bool) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : bool . inv0 x = true
  goal from_refn : [#"../ite_normalize.rs" 86 4 86 28] forall value : bool . inv0 value -> (forall result : IteNormalize_Expr_Type.t_expr . inv1 result)
end
