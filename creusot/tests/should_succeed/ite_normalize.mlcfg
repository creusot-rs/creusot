
module IteNormalize_BTreeMap_Type
  type t_btreemap 'k 'v
end
module IteNormalize_Impl0_New_Interface
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val new [@cfg:stackify] (_ : ()) : IteNormalize_BTreeMap_Type.t_btreemap k v
end
module IteNormalize_Impl0_New
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val new [@cfg:stackify] (_ : ()) : IteNormalize_BTreeMap_Type.t_btreemap k v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl6_Model_Stub
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val ghost function model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option ModelTy0.modelTy
    
end
module CreusotContracts_Logic_Model_Impl6_Model_Interface
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val ghost function model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option ModelTy0.modelTy
    
end
module CreusotContracts_Logic_Model_Impl6_Model
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option ModelTy0.modelTy
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_Type.C_Some t -> Core_Option_Option_Type.C_Some (Model0.model t)
      | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
      end
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy_Type
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module IteNormalize_Impl2_ModelTy_Type
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option ModelTy1.modelTy)
end
module IteNormalize_Impl0_Get_Interface
  type k
  type v
  use map.Map
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy3 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone IteNormalize_Impl2_ModelTy_Type as ModelTy1 with type k = k, type v = v,
    type ModelTy0.modelTy = ModelTy2.modelTy, type ModelTy1.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = v,
    type ModelTy0.modelTy = ModelTy3.modelTy
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model2 with type t = k,
    type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model1 with type t = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl6_Model_Stub as Model0 with type t = v,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val get [@cfg:stackify] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) (key : k) : Core_Option_Option_Type.t_option v
    ensures { [#"../ite_normalize.rs" 17 14 17 42] Model0.model result = Map.get (Model1.model self) (Model2.model key) }
    
end
module IteNormalize_Impl0_Get
  type k
  type v
  use map.Map
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy3 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone IteNormalize_Impl2_ModelTy_Type as ModelTy1 with type k = k, type v = v,
    type ModelTy0.modelTy = ModelTy2.modelTy, type ModelTy1.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = v,
    type ModelTy0.modelTy = ModelTy3.modelTy
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
    type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl6_Model_Interface as Model0 with type t = v,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val get [@cfg:stackify] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) (key : k) : Core_Option_Option_Type.t_option v
    ensures { [#"../ite_normalize.rs" 17 14 17 42] Model0.model result = Map.get (Model1.model self) (Model2.model key) }
    
end
module IteNormalize_Impl2_Model_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val ghost function model (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option ModelTy1.modelTy)
    
end
module IteNormalize_Impl2_Model_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val ghost function model (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option ModelTy1.modelTy)
    
end
module IteNormalize_Impl2_Model
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val ghost function model [#"../ite_normalize.rs" 48 4 48 35] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.t_option ModelTy1.modelTy)
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module IteNormalize_Impl0_Insert_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone IteNormalize_Impl2_ModelTy_Type as ModelTy2 with type k = k, type v = v,
    type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model3 with type t = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model2 with type self = v,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone IteNormalize_Impl2_Model_Stub as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
    type ModelTy1.modelTy = ModelTy1.modelTy
  val insert [@cfg:stackify] (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap k v)) (key : k) (value : v) : Core_Option_Option_Type.t_option v
    ensures { [#"../ite_normalize.rs" 26 4 26 106] forall i : k . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Core_Option_Option_Type.C_Some (Model2.model value)
    else
      Map.get (Model3.model self) (Model1.model i)
    ) }
    
end
module IteNormalize_Impl0_Insert
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone IteNormalize_Impl2_ModelTy_Type as ModelTy2 with type k = k, type v = v,
    type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model3 with type t = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model2 with type self = v,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone IteNormalize_Impl2_Model_Interface as Model0 with type k = k, type v = v,
    type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  val insert [@cfg:stackify] (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap k v)) (key : k) (value : v) : Core_Option_Option_Type.t_option v
    ensures { [#"../ite_normalize.rs" 26 4 26 106] forall i : k . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Core_Option_Option_Type.C_Some (Model2.model value)
    else
      Map.get (Model3.model self) (Model1.model i)
    ) }
    
end
module IteNormalize_Impl1_Clone_Interface
  type k
  type v
  use prelude.Borrow
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val clone' [@cfg:stackify] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : IteNormalize_BTreeMap_Type.t_btreemap k v
    ensures { [#"../ite_normalize.rs" 37 14 37 29] self = result }
    
end
module IteNormalize_Impl1_Clone
  type k
  type v
  use prelude.Borrow
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  val clone' [@cfg:stackify] (self : IteNormalize_BTreeMap_Type.t_btreemap k v) : IteNormalize_BTreeMap_Type.t_btreemap k v
    ensures { [#"../ite_normalize.rs" 37 14 37 29] self = result }
    
end
module IteNormalize_Expr_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_expr  =
    | C_IfThenElse (t_expr) (t_expr) (t_expr)
    | C_Var usize
    | C_True
    | C_False
    
  let function ifthenelse_c (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse a _ _ -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function ifthenelse_t (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse _ a _ -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function ifthenelse_e (self : t_expr) : t_expr = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse _ _ a -> a
      | C_Var _ -> any t_expr
      | C_True -> any t_expr
      | C_False -> any t_expr
      end
  let function var_v (self : t_expr) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IfThenElse _ _ _ -> any usize
      | C_Var a -> a
      | C_True -> any usize
      | C_False -> any usize
      end
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl5_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : t) : t
    ensures { [#"../ite_normalize.rs" 64 0 73 1] result = self }
    
end
module Alloc_Boxed_Impl12_Clone
  type t
  type a
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : t) : t
    ensures { [#"../ite_normalize.rs" 64 0 73 1] result = self }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module IteNormalize_Impl7_Clone_Interface
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val clone' [@cfg:stackify] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 53 9 53 14] result = self }
    
end
module IteNormalize_Impl7_Clone
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  use mach.int.Int
  use prelude.IntSize
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone1
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone0 with type t = IteNormalize_Expr_Type.t_expr,
    type a = Alloc_Alloc_Global_Type.t_global
  let rec cfg clone' [@cfg:stackify] [#"../ite_normalize.rs" 53 9 53 14] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 53 9 53 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var _3 : isize;
  var c_1_4 : IteNormalize_Expr_Type.t_expr;
  var t_1_5 : IteNormalize_Expr_Type.t_expr;
  var e_1_6 : IteNormalize_Expr_Type.t_expr;
  var _7 : IteNormalize_Expr_Type.t_expr;
  var _8 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var _10 : IteNormalize_Expr_Type.t_expr;
  var _11 : IteNormalize_Expr_Type.t_expr;
  var _12 : IteNormalize_Expr_Type.t_expr;
  var v_1_13 : usize;
  var _14 : usize;
  var _15 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB3
      | IteNormalize_Expr_Type.C_Var _ -> goto BB10
      | IteNormalize_Expr_Type.C_True -> goto BB12
      | IteNormalize_Expr_Type.C_False -> goto BB1
      end
  }
  BB1 {
    _0 <- IteNormalize_Expr_Type.C_False;
    goto BB13
  }
  BB2 {
    absurd
  }
  BB3 {
    c_1_4 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    t_1_5 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    e_1_6 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    _8 <- c_1_4;
    _7 <- ([#"../ite_normalize.rs" 53 9 53 14] Clone0.clone' _8);
    goto BB4
  }
  BB4 {
    _10 <- t_1_5;
    _9 <- ([#"../ite_normalize.rs" 53 9 53 14] Clone0.clone' _10);
    goto BB5
  }
  BB5 {
    _12 <- e_1_6;
    _11 <- ([#"../ite_normalize.rs" 53 9 53 14] Clone0.clone' _12);
    goto BB6
  }
  BB6 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _7 _9 _11;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB13
  }
  BB10 {
    v_1_13 <- IteNormalize_Expr_Type.var_v self_1;
    _15 <- v_1_13;
    _14 <- ([#"../ite_normalize.rs" 53 9 53 14] Clone1.clone' _15);
    goto BB11
  }
  BB11 {
    _0 <- IteNormalize_Expr_Type.C_Var _14;
    goto BB13
  }
  BB12 {
    _0 <- IteNormalize_Expr_Type.C_True;
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module IteNormalize_Impl6_Variable_Interface
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val variable [@cfg:stackify] (v : usize) : IteNormalize_Expr_Type.t_expr
end
module IteNormalize_Impl6_Variable
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg variable [@cfg:stackify] [#"../ite_normalize.rs" 97 4 97 37] (v : usize) : IteNormalize_Expr_Type.t_expr
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var v_1 : usize;
  var _2 : usize;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _2 <- v_1;
    _0 <- IteNormalize_Expr_Type.C_Var _2;
    return _0
  }
  
end
module IteNormalize_Impl4_From_Interface
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val from [@cfg:stackify] (a : usize) : IteNormalize_Expr_Type.t_expr
end
module IteNormalize_Impl4_From
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_Variable_Interface as Variable0
  let rec cfg from [@cfg:stackify] [#"../ite_normalize.rs" 76 4 76 29] (a : usize) : IteNormalize_Expr_Type.t_expr
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var a_1 : usize;
  var _2 : usize;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- ([#"../ite_normalize.rs" 77 8 77 25] Variable0.variable _2);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module IteNormalize_Impl5_From_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val from [@cfg:stackify] (b : bool) : IteNormalize_Expr_Type.t_expr
end
module IteNormalize_Impl5_From
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg from [@cfg:stackify] [#"../ite_normalize.rs" 82 4 82 28] (b : bool) : IteNormalize_Expr_Type.t_expr
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var b_1 : bool;
  var _2 : bool;
  {
    b_1 <- b;
    goto BB0
  }
  BB0 {
    _2 <- b_1;
    switch (_2)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _0 <- IteNormalize_Expr_Type.C_True;
    goto BB3
  }
  BB2 {
    _0 <- IteNormalize_Expr_Type.C_False;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module IteNormalize_Impl6_Ite_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ite [@cfg:stackify] (c : IteNormalize_Expr_Type.t_expr) (t : IteNormalize_Expr_Type.t_expr) (e : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 92 14 92 91] result = IteNormalize_Expr_Type.C_IfThenElse c t e }
    
end
module IteNormalize_Impl6_Ite
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec cfg ite [@cfg:stackify] [#"../ite_normalize.rs" 93 4 93 49] (c : IteNormalize_Expr_Type.t_expr) (t : IteNormalize_Expr_Type.t_expr) (e : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 92 14 92 91] result = IteNormalize_Expr_Type.C_IfThenElse c t e }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var c_1 : IteNormalize_Expr_Type.t_expr;
  var t_2 : IteNormalize_Expr_Type.t_expr;
  var e_3 : IteNormalize_Expr_Type.t_expr;
  var _5 : IteNormalize_Expr_Type.t_expr;
  var _6 : IteNormalize_Expr_Type.t_expr;
  var _7 : IteNormalize_Expr_Type.t_expr;
  var _8 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var _10 : IteNormalize_Expr_Type.t_expr;
  {
    c_1 <- c;
    t_2 <- t;
    e_3 <- e;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <- c_1;
    c_1 <- any IteNormalize_Expr_Type.t_expr;
    _5 <- _6;
    goto BB2
  }
  BB2 {
    _8 <- t_2;
    t_2 <- any IteNormalize_Expr_Type.t_expr;
    _7 <- _8;
    goto BB3
  }
  BB3 {
    _10 <- e_3;
    e_3 <- any IteNormalize_Expr_Type.t_expr;
    _9 <- _10;
    goto BB4
  }
  BB4 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _5 _7 _9;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module IteNormalize_Impl6_IsNormalized_Stub
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ghost predicate is_normalized (self : IteNormalize_Expr_Type.t_expr)
end
module IteNormalize_Impl6_IsNormalized_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ghost predicate is_normalized (self : IteNormalize_Expr_Type.t_expr)
end
module IteNormalize_Impl6_IsNormalized
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec ghost predicate is_normalized [#"../ite_normalize.rs" 122 4 122 34] (self : IteNormalize_Expr_Type.t_expr)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../ite_normalize.rs" 123 8 136 9] match (self) with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized c && is_normalized t && is_normalized e && match (c) with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
end
module IteNormalize_Impl6_Transpose_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_IsNormalized_Stub as IsNormalized0
  val transpose [@cfg:stackify] (self : IteNormalize_Expr_Type.t_expr) (a : IteNormalize_Expr_Type.t_expr) (b : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 101 15 101 35] IsNormalized0.is_normalized self}
    requires {[#"../ite_normalize.rs" 102 15 102 32] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 103 15 103 32] IsNormalized0.is_normalized b}
    ensures { [#"../ite_normalize.rs" 104 14 104 36] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl6_Transpose
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_IsNormalized as IsNormalized0
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  clone IteNormalize_Impl7_Clone_Interface as Clone0
  let rec cfg transpose [@cfg:stackify] [#"../ite_normalize.rs" 106 4 106 52] (self : IteNormalize_Expr_Type.t_expr) (a : IteNormalize_Expr_Type.t_expr) (b : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 101 15 101 35] IsNormalized0.is_normalized self}
    requires {[#"../ite_normalize.rs" 102 15 102 32] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 103 15 103 32] IsNormalized0.is_normalized b}
    ensures { [#"../ite_normalize.rs" 104 14 104 36] IsNormalized0.is_normalized result }
    variant {[#"../ite_normalize.rs" 105 14 105 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var a_2 : IteNormalize_Expr_Type.t_expr;
  var b_3 : IteNormalize_Expr_Type.t_expr;
  var _9 : isize;
  var c_10 : IteNormalize_Expr_Type.t_expr;
  var t_11 : IteNormalize_Expr_Type.t_expr;
  var e_12 : IteNormalize_Expr_Type.t_expr;
  var _13 : IteNormalize_Expr_Type.t_expr;
  var _14 : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var _16 : IteNormalize_Expr_Type.t_expr;
  var _17 : IteNormalize_Expr_Type.t_expr;
  var _18 : IteNormalize_Expr_Type.t_expr;
  var _19 : IteNormalize_Expr_Type.t_expr;
  var _20 : IteNormalize_Expr_Type.t_expr;
  var _21 : IteNormalize_Expr_Type.t_expr;
  var _22 : IteNormalize_Expr_Type.t_expr;
  var _23 : IteNormalize_Expr_Type.t_expr;
  var _24 : IteNormalize_Expr_Type.t_expr;
  var _25 : IteNormalize_Expr_Type.t_expr;
  var _26 : IteNormalize_Expr_Type.t_expr;
  var _27 : IteNormalize_Expr_Type.t_expr;
  var _28 : IteNormalize_Expr_Type.t_expr;
  var _29 : IteNormalize_Expr_Type.t_expr;
  var _30 : IteNormalize_Expr_Type.t_expr;
  var _31 : IteNormalize_Expr_Type.t_expr;
  {
    self_1 <- self;
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB7
      | IteNormalize_Expr_Type.C_Var _ -> goto BB20
      | IteNormalize_Expr_Type.C_True -> goto BB27
      | IteNormalize_Expr_Type.C_False -> goto BB5
      end
  }
  BB5 {
    _0 <- b_3;
    b_3 <- any IteNormalize_Expr_Type.t_expr;
    goto BB28
  }
  BB6 {
    absurd
  }
  BB7 {
    c_10 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse (any IteNormalize_Expr_Type.t_expr) b c);
    t_11 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a (any IteNormalize_Expr_Type.t_expr) c);
    e_12 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a b (any IteNormalize_Expr_Type.t_expr));
    _13 <- c_10;
    c_10 <- any IteNormalize_Expr_Type.t_expr;
    _16 <- t_11;
    t_11 <- any IteNormalize_Expr_Type.t_expr;
    _18 <- a_2;
    _17 <- ([#"../ite_normalize.rs" 110 40 110 49] Clone0.clone' _18);
    goto BB8
  }
  BB8 {
    _20 <- b_3;
    _19 <- ([#"../ite_normalize.rs" 110 51 110 60] Clone0.clone' _20);
    goto BB9
  }
  BB9 {
    _15 <- ([#"../ite_normalize.rs" 110 28 110 61] transpose _16 _17 _19);
    goto BB10
  }
  BB10 {
    _14 <- _15;
    goto BB11
  }
  BB11 {
    _23 <- e_12;
    e_12 <- any IteNormalize_Expr_Type.t_expr;
    _24 <- a_2;
    a_2 <- any IteNormalize_Expr_Type.t_expr;
    _25 <- b_3;
    b_3 <- any IteNormalize_Expr_Type.t_expr;
    _22 <- ([#"../ite_normalize.rs" 111 28 111 45] transpose _23 _24 _25);
    goto BB12
  }
  BB12 {
    _21 <- _22;
    goto BB13
  }
  BB13 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _13 _14 _21;
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB28
  }
  BB20 {
    _27 <- self_1;
    self_1 <- any IteNormalize_Expr_Type.t_expr;
    _26 <- _27;
    goto BB21
  }
  BB21 {
    _29 <- a_2;
    a_2 <- any IteNormalize_Expr_Type.t_expr;
    _28 <- _29;
    goto BB22
  }
  BB22 {
    _31 <- b_3;
    b_3 <- any IteNormalize_Expr_Type.t_expr;
    _30 <- _31;
    goto BB23
  }
  BB23 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _26 _28 _30;
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB28
  }
  BB27 {
    _0 <- a_2;
    a_2 <- any IteNormalize_Expr_Type.t_expr;
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module IteNormalize_Impl6_Normalize_Interface
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_IsNormalized_Stub as IsNormalized0
  val normalize [@cfg:stackify] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 139 14 139 36] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl6_Normalize
  use prelude.Borrow
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_IsNormalized as IsNormalized0
  use mach.int.Int
  use prelude.IntSize
  clone IteNormalize_Impl6_Transpose_Interface as Transpose0 with val IsNormalized0.is_normalized = IsNormalized0.is_normalized
  clone IteNormalize_Impl7_Clone_Interface as Clone0
  let rec cfg normalize [@cfg:stackify] [#"../ite_normalize.rs" 141 4 141 35] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    ensures { [#"../ite_normalize.rs" 139 14 139 36] IsNormalized0.is_normalized result }
    variant {[#"../ite_normalize.rs" 140 14 140 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var _4 : isize;
  var c_5 : IteNormalize_Expr_Type.t_expr;
  var t_6 : IteNormalize_Expr_Type.t_expr;
  var e_7 : IteNormalize_Expr_Type.t_expr;
  var cp_8 : IteNormalize_Expr_Type.t_expr;
  var _9 : IteNormalize_Expr_Type.t_expr;
  var tp_10 : IteNormalize_Expr_Type.t_expr;
  var _11 : IteNormalize_Expr_Type.t_expr;
  var ep_12 : IteNormalize_Expr_Type.t_expr;
  var _13 : IteNormalize_Expr_Type.t_expr;
  var _14 : IteNormalize_Expr_Type.t_expr;
  var _15 : IteNormalize_Expr_Type.t_expr;
  var _16 : IteNormalize_Expr_Type.t_expr;
  var e_17 : IteNormalize_Expr_Type.t_expr;
  var _18 : IteNormalize_Expr_Type.t_expr;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    e_17 <- self_1;
    _18 <- e_17;
    _0 <- ([#"../ite_normalize.rs" 149 17 149 26] Clone0.clone' _18);
    goto BB10
  }
  BB2 {
    c_5 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    t_6 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    e_7 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    _9 <- c_5;
    cp_8 <- ([#"../ite_normalize.rs" 144 25 144 38] normalize _9);
    goto BB3
  }
  BB3 {
    _11 <- t_6;
    tp_10 <- ([#"../ite_normalize.rs" 145 25 145 38] normalize _11);
    goto BB4
  }
  BB4 {
    _13 <- e_7;
    ep_12 <- ([#"../ite_normalize.rs" 146 25 146 38] normalize _13);
    goto BB5
  }
  BB5 {
    _14 <- cp_8;
    cp_8 <- any IteNormalize_Expr_Type.t_expr;
    _15 <- tp_10;
    tp_10 <- any IteNormalize_Expr_Type.t_expr;
    _16 <- ep_12;
    ep_12 <- any IteNormalize_Expr_Type.t_expr;
    _0 <- ([#"../ite_normalize.rs" 147 16 147 36] Transpose0.transpose _14 _15 _16);
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB11
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module IteNormalize_Impl6_DoesNotContain_Stub
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ghost predicate does_not_contain (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
end
module IteNormalize_Impl6_DoesNotContain_Interface
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ghost predicate does_not_contain (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
end
module IteNormalize_Impl6_DoesNotContain
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec ghost predicate does_not_contain [#"../ite_normalize.rs" 165 4 165 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../ite_normalize.rs" 166 8 172 9] match (self) with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> does_not_contain c vp && does_not_contain t vp && does_not_contain e vp
      | IteNormalize_Expr_Type.C_Var v -> pure {v <> vp}
      | _ -> true
      end
end
module IteNormalize_Impl6_IsSimplified_Stub
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ghost predicate is_simplified (self : IteNormalize_Expr_Type.t_expr)
end
module IteNormalize_Impl6_IsSimplified_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  val ghost predicate is_simplified (self : IteNormalize_Expr_Type.t_expr)
end
module IteNormalize_Impl6_IsSimplified
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_DoesNotContain_Stub as DoesNotContain0
  let rec ghost predicate is_simplified [#"../ite_normalize.rs" 154 4 154 34] (self : IteNormalize_Expr_Type.t_expr)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../ite_normalize.rs" 155 8 161 9] match (self) with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> match (c) with
        | IteNormalize_Expr_Type.C_Var v -> DoesNotContain0.does_not_contain t v && DoesNotContain0.does_not_contain e v
        | c -> is_simplified c && is_simplified t && is_simplified e
        end
      | _ -> true
      end
end
module CreusotContracts_Logic_Model_Impl5_Model_Stub
  val ghost function model (self : bool) : bool
end
module CreusotContracts_Logic_Model_Impl5_Model_Interface
  val ghost function model (self : bool) : bool
end
module CreusotContracts_Logic_Model_Impl5_Model
  let rec ghost function model (self : bool) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    self
end
module CreusotContracts_Logic_Int_Impl15_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Model_Impl5_ModelTy_Type
  type modelTy  =
    bool
end
module CreusotContracts_Logic_Int_Impl15_Model_Stub
  use mach.int.Int
  use prelude.UIntSize
  val ghost function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl15_Model_Interface
  use mach.int.Int
  use prelude.UIntSize
  val ghost function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl15_Model
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  let rec ghost function model (self : usize) : int = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self
end
module IteNormalize_Impl6_SimplifyHelper_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use map.Map
  clone CreusotContracts_Logic_Model_Impl5_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Int_Impl15_ModelTy_Type as ModelTy0
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_IsSimplified_Stub as IsSimplified0
  clone IteNormalize_Impl6_DoesNotContain_Stub as DoesNotContain0
  clone CreusotContracts_Logic_Model_Impl5_Model_Stub as Model1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone IteNormalize_Impl2_Model_Stub as Model0 with type k = usize, type v = bool,
    type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl6_IsNormalized_Stub as IsNormalized0
  val simplify_helper [@cfg:stackify] (self : IteNormalize_Expr_Type.t_expr) (state : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 181 15 181 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 182 4 182 110] forall i : usize . (exists v : bool . Map.get (Model0.model state) (UInt64.to_int i) = Core_Option_Option_Type.C_Some (Model1.model v)) -> DoesNotContain0.does_not_contain result i }
    ensures { [#"../ite_normalize.rs" 183 14 183 36] IsSimplified0.is_simplified result }
    
end
module IteNormalize_Impl6_SimplifyHelper
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use map.Map
  clone CreusotContracts_Logic_Model_Impl5_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Int_Impl15_ModelTy_Type as ModelTy0
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_DoesNotContain as DoesNotContain0
  clone IteNormalize_Impl6_IsSimplified as IsSimplified0 with val DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain
  clone CreusotContracts_Logic_Model_Impl5_Model as Model1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone IteNormalize_Impl2_Model as Model0 with type k = usize, type v = bool, type ModelTy0.modelTy = ModelTy0.modelTy,
    type ModelTy1.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl6_IsNormalized as IsNormalized0
  use prelude.IntSize
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = bool, type ModelTy0.modelTy = ModelTy1.modelTy,
    val Model0.model = Model1.model
  clone IteNormalize_Impl2_ModelTy_Type as ModelTy3 with type k = usize, type v = bool,
    type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = IteNormalize_BTreeMap_Type.t_btreemap usize bool,
    type ModelTy0.modelTy = ModelTy3.modelTy, val Model0.model = Model0.model
  clone CreusotContracts_Logic_Int_Impl15_Model as Model5
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy2 with type t = bool,
    type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = usize,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = IteNormalize_BTreeMap_Type.t_btreemap usize bool,
    type ModelTy0.modelTy = ModelTy3.modelTy, val Model0.model = Model0.model
  clone CreusotContracts_Logic_Model_Impl6_Model as Model2 with type t = bool, type ModelTy0.modelTy = ModelTy2.modelTy,
    val Model0.model = Model7.model
  clone IteNormalize_Impl0_Insert_Interface as Insert0 with type k = usize, type v = bool,
    val Model0.model = Model0.model, val Model1.model = Model5.model, val Model2.model = Model1.model,
    val Model3.model = Model6.model, type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl1_Clone_Interface as Clone0 with type k = usize, type v = bool
  clone IteNormalize_Impl0_Get_Interface as Get0 with type k = usize, type v = bool, val Model0.model = Model2.model,
    val Model1.model = Model3.model, val Model2.model = Model4.model, type ModelTy2.modelTy = ModelTy0.modelTy,
    type ModelTy3.modelTy = ModelTy1.modelTy
  let rec cfg simplify_helper [@cfg:stackify] [#"../ite_normalize.rs" 185 4 185 66] (self : IteNormalize_Expr_Type.t_expr) (state : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 181 15 181 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 182 4 182 110] forall i : usize . (exists v : bool . Map.get (Model0.model state) (UInt64.to_int i) = Core_Option_Option_Type.C_Some (Model1.model v)) -> DoesNotContain0.does_not_contain result i }
    ensures { [#"../ite_normalize.rs" 183 14 183 36] IsSimplified0.is_simplified result }
    variant {[#"../ite_normalize.rs" 184 14 184 18] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var state_2 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _7 : isize;
  var c_8 : IteNormalize_Expr_Type.t_expr;
  var t_9 : IteNormalize_Expr_Type.t_expr;
  var e_10 : IteNormalize_Expr_Type.t_expr;
  var _11 : isize;
  var v_12 : usize;
  var _13 : Core_Option_Option_Type.t_option bool;
  var _14 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : isize;
  var b_18 : bool;
  var _19 : bool;
  var _20 : IteNormalize_Expr_Type.t_expr;
  var _21 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _22 : IteNormalize_Expr_Type.t_expr;
  var _23 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var state_t_24 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _25 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _26 : Core_Option_Option_Type.t_option bool;
  var _27 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
  var _28 : usize;
  var tp_29 : IteNormalize_Expr_Type.t_expr;
  var _30 : IteNormalize_Expr_Type.t_expr;
  var _31 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var state_e_32 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _33 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _34 : Core_Option_Option_Type.t_option bool;
  var _35 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool);
  var _36 : usize;
  var ep_37 : IteNormalize_Expr_Type.t_expr;
  var _38 : IteNormalize_Expr_Type.t_expr;
  var _39 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _40 : IteNormalize_Expr_Type.t_expr;
  var _41 : IteNormalize_Expr_Type.t_expr;
  var _42 : IteNormalize_Expr_Type.t_expr;
  var _43 : IteNormalize_Expr_Type.t_expr;
  var _44 : IteNormalize_Expr_Type.t_expr;
  var c_45 : IteNormalize_Expr_Type.t_expr;
  var _46 : IteNormalize_Expr_Type.t_expr;
  var _47 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var v_48 : usize;
  var _49 : Core_Option_Option_Type.t_option bool;
  var _50 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  var _51 : usize;
  var _52 : usize;
  var _53 : isize;
  var b_54 : bool;
  var _55 : bool;
  var _56 : usize;
  var c_57 : IteNormalize_Expr_Type.t_expr;
  {
    self_1 <- self;
    state_2 <- state;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self_1)
      | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> goto BB5
      | IteNormalize_Expr_Type.C_Var _ -> goto BB38
      | _ -> goto BB4
      end
  }
  BB4 {
    c_57 <- self_1;
    self_1 <- any IteNormalize_Expr_Type.t_expr;
    _0 <- c_57;
    c_57 <- any IteNormalize_Expr_Type.t_expr;
    goto BB46
  }
  BB5 {
    c_8 <- IteNormalize_Expr_Type.ifthenelse_c self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse (any IteNormalize_Expr_Type.t_expr) b c);
    t_9 <- IteNormalize_Expr_Type.ifthenelse_t self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a (any IteNormalize_Expr_Type.t_expr) c);
    e_10 <- IteNormalize_Expr_Type.ifthenelse_e self_1;
    self_1 <- (let IteNormalize_Expr_Type.C_IfThenElse a b c = self_1 in IteNormalize_Expr_Type.C_IfThenElse a b (any IteNormalize_Expr_Type.t_expr));
    switch (c_8)
      | IteNormalize_Expr_Type.C_Var _ -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    c_45 <- c_8;
    c_8 <- any IteNormalize_Expr_Type.t_expr;
    _46 <- c_45;
    c_45 <- any IteNormalize_Expr_Type.t_expr;
    _47 <- state_2;
    state_2 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    _0 <- ([#"../ite_normalize.rs" 211 25 211 49] simplify_helper _46 _47);
    goto BB32
  }
  BB7 {
    v_12 <- IteNormalize_Expr_Type.var_v c_8;
    _14 <- state_2;
    _16 <- v_12;
    _15 <- _16;
    _13 <- ([#"../ite_normalize.rs" 190 41 190 54] Get0.get _14 _15);
    goto BB8
  }
  BB8 {
    switch (_13)
      | Core_Option_Option_Type.C_Some _ -> goto BB9
      | _ -> goto BB15
      end
  }
  BB9 {
    b_18 <- Core_Option_Option_Type.some_0 _13;
    _19 <- b_18;
    switch (_19)
      | False -> goto BB12
      | True -> goto BB10
      end
  }
  BB10 {
    _20 <- t_9;
    t_9 <- any IteNormalize_Expr_Type.t_expr;
    _21 <- state_2;
    state_2 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    _0 <- ([#"../ite_normalize.rs" 192 32 192 56] simplify_helper _20 _21);
    goto BB11
  }
  BB11 {
    goto BB14
  }
  BB12 {
    _22 <- e_10;
    e_10 <- any IteNormalize_Expr_Type.t_expr;
    _23 <- state_2;
    state_2 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    _0 <- ([#"../ite_normalize.rs" 194 32 194 56] simplify_helper _22 _23);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB31
  }
  BB15 {
    _25 <- state_2;
    state_t_24 <- ([#"../ite_normalize.rs" 198 46 198 59] Clone0.clone' _25);
    goto BB16
  }
  BB16 {
    _27 <- borrow_mut state_t_24;
    state_t_24 <-  ^ _27;
    _28 <- v_12;
    _26 <- ([#"../ite_normalize.rs" 199 28 199 51] Insert0.insert _27 _28 true);
    goto BB17
  }
  BB17 {
    _30 <- t_9;
    t_9 <- any IteNormalize_Expr_Type.t_expr;
    _31 <- state_t_24;
    state_t_24 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    tp_29 <- ([#"../ite_normalize.rs" 200 37 200 63] simplify_helper _30 _31);
    goto BB18
  }
  BB18 {
    _33 <- state_2;
    state_e_32 <- ([#"../ite_normalize.rs" 203 46 203 59] Clone0.clone' _33);
    goto BB19
  }
  BB19 {
    _35 <- borrow_mut state_e_32;
    state_e_32 <-  ^ _35;
    _36 <- v_12;
    _34 <- ([#"../ite_normalize.rs" 204 28 204 52] Insert0.insert _35 _36 false);
    goto BB20
  }
  BB20 {
    _38 <- e_10;
    e_10 <- any IteNormalize_Expr_Type.t_expr;
    _39 <- state_e_32;
    state_e_32 <- any IteNormalize_BTreeMap_Type.t_btreemap usize bool;
    ep_37 <- ([#"../ite_normalize.rs" 205 37 205 63] simplify_helper _38 _39);
    goto BB21
  }
  BB21 {
    _40 <- c_8;
    c_8 <- any IteNormalize_Expr_Type.t_expr;
    _42 <- tp_29;
    tp_29 <- any IteNormalize_Expr_Type.t_expr;
    _41 <- _42;
    goto BB22
  }
  BB22 {
    _44 <- ep_37;
    ep_37 <- any IteNormalize_Expr_Type.t_expr;
    _43 <- _44;
    goto BB23
  }
  BB23 {
    _0 <- IteNormalize_Expr_Type.C_IfThenElse _40 _41 _43;
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB34
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB47
  }
  BB38 {
    v_48 <- IteNormalize_Expr_Type.var_v self_1;
    _50 <- state_2;
    _52 <- v_48;
    _51 <- _52;
    _49 <- ([#"../ite_normalize.rs" 215 33 215 46] Get0.get _50 _51);
    goto BB39
  }
  BB39 {
    switch (_49)
      | Core_Option_Option_Type.C_Some _ -> goto BB40
      | _ -> goto BB44
      end
  }
  BB40 {
    b_54 <- Core_Option_Option_Type.some_0 _49;
    _55 <- b_54;
    switch (_55)
      | False -> goto BB42
      | True -> goto BB41
      end
  }
  BB41 {
    _0 <- IteNormalize_Expr_Type.C_True;
    goto BB43
  }
  BB42 {
    _0 <- IteNormalize_Expr_Type.C_False;
    goto BB43
  }
  BB43 {
    goto BB45
  }
  BB44 {
    _56 <- v_48;
    _0 <- IteNormalize_Expr_Type.C_Var _56;
    goto BB45
  }
  BB45 {
    goto BB47
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB48
  }
  BB48 {
    goto BB49
  }
  BB49 {
    return _0
  }
  
end
module IteNormalize_Impl6_Simplify_Interface
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_IsSimplified_Stub as IsSimplified0
  clone IteNormalize_Impl6_IsNormalized_Stub as IsNormalized0
  val simplify [@cfg:stackify] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 175 15 175 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 176 14 176 36] IsSimplified0.is_simplified result }
    
end
module IteNormalize_Impl6_Simplify
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl6_DoesNotContain as DoesNotContain0
  clone IteNormalize_Impl6_IsSimplified as IsSimplified0 with val DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain
  clone IteNormalize_Impl6_IsNormalized as IsNormalized0
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Logic_Model_Impl5_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Int_Impl15_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl5_Model as Model1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone IteNormalize_Impl2_Model as Model0 with type k = usize, type v = bool, type ModelTy0.modelTy = ModelTy0.modelTy,
    type ModelTy1.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl6_SimplifyHelper_Interface as SimplifyHelper0 with val IsNormalized0.is_normalized = IsNormalized0.is_normalized,
    val Model0.model = Model0.model, val Model1.model = Model1.model,
    val DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain,
    val IsSimplified0.is_simplified = IsSimplified0.is_simplified
  clone IteNormalize_Impl0_New_Interface as New0 with type k = usize, type v = bool
  let rec cfg simplify [@cfg:stackify] [#"../ite_normalize.rs" 177 4 177 33] (self : IteNormalize_Expr_Type.t_expr) : IteNormalize_Expr_Type.t_expr
    requires {[#"../ite_normalize.rs" 175 15 175 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 176 14 176 36] IsSimplified0.is_simplified result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : IteNormalize_Expr_Type.t_expr;
  var self_1 : IteNormalize_Expr_Type.t_expr;
  var _4 : IteNormalize_Expr_Type.t_expr;
  var _5 : IteNormalize_BTreeMap_Type.t_btreemap usize bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- self_1;
    self_1 <- any IteNormalize_Expr_Type.t_expr;
    _5 <- ([#"../ite_normalize.rs" 178 29 178 44] New0.new ());
    goto BB2
  }
  BB2 {
    _0 <- ([#"../ite_normalize.rs" 178 8 178 45] SimplifyHelper0.simplify_helper _4 _5);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module IteNormalize_Impl1
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = IteNormalize_BTreeMap_Type.t_btreemap k v
  clone IteNormalize_Impl1_Clone_Interface as Clone0 with type k = k, type v = v
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = IteNormalize_BTreeMap_Type.t_btreemap k v,
    val clone' = Clone0.clone'
end
module IteNormalize_Impl7
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = IteNormalize_Expr_Type.t_expr
  clone IteNormalize_Impl7_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = IteNormalize_Expr_Type.t_expr,
    val clone' = Clone0.clone'
end
module IteNormalize_Impl2
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy3 with type self = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = k
  clone IteNormalize_Impl2_ModelTy_Type as ModelTy0 with type k = k, type v = v,
    type ModelTy0.modelTy = ModelTy2.modelTy, type ModelTy1.modelTy = ModelTy3.modelTy
  clone IteNormalize_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
    type ModelTy1.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = IteNormalize_BTreeMap_Type.t_btreemap k v,
    val model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = IteNormalize_BTreeMap_Type.t_btreemap k v,
    type modelTy = ModelTy0.modelTy
end
module IteNormalize_Impl3
  
end
module Core_Convert_From_From_Interface
  type self
  type t
  val from [@cfg:stackify] (_1' : t) : self
    requires {false}
    
end
module Core_Convert_From_From
  type self
  type t
  val from [@cfg:stackify] (_1' : t) : self
    requires {false}
    
end
module IteNormalize_Impl4
  use mach.int.Int
  use prelude.UIntSize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl4_From_Interface as From0
  clone Core_Convert_From_From_Interface as From1 with type self = IteNormalize_Expr_Type.t_expr, type t = usize,
    val from = From0.from
end
module IteNormalize_Impl5
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  clone IteNormalize_Impl5_From_Interface as From0
  clone Core_Convert_From_From_Interface as From1 with type self = IteNormalize_Expr_Type.t_expr, type t = bool,
    val from = From0.from
end
