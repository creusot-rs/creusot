module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
  type sparsearray_sparse 't = 
    | SparseArray_Sparse usize usize (creusotcontracts_std1_vec_vec 't) (creusotcontracts_std1_vec_vec usize) (creusotcontracts_std1_vec_vec usize)
    
  function sparsearray_sparse_Sparse_size (self : sparsearray_sparse 't) : usize
  val sparsearray_sparse_Sparse_size (self : sparsearray_sparse 't) : usize
    ensures { result = sparsearray_sparse_Sparse_size self }
    
  axiom sparsearray_sparse_Sparse_size_acc : forall a : usize, b : usize, c : creusotcontracts_std1_vec_vec 't, d : creusotcontracts_std1_vec_vec usize, e : creusotcontracts_std1_vec_vec usize . sparsearray_sparse_Sparse_size (SparseArray_Sparse a b c d e : sparsearray_sparse 't) = a
  function sparsearray_sparse_Sparse_idx (self : sparsearray_sparse 't) : creusotcontracts_std1_vec_vec usize
  val sparsearray_sparse_Sparse_idx (self : sparsearray_sparse 't) : creusotcontracts_std1_vec_vec usize
    ensures { result = sparsearray_sparse_Sparse_idx self }
    
  axiom sparsearray_sparse_Sparse_idx_acc : forall a : usize, b : usize, c : creusotcontracts_std1_vec_vec 't, d : creusotcontracts_std1_vec_vec usize, e : creusotcontracts_std1_vec_vec usize . sparsearray_sparse_Sparse_idx (SparseArray_Sparse a b c d e : sparsearray_sparse 't) = d
  function sparsearray_sparse_Sparse_n (self : sparsearray_sparse 't) : usize
  val sparsearray_sparse_Sparse_n (self : sparsearray_sparse 't) : usize
    ensures { result = sparsearray_sparse_Sparse_n self }
    
  axiom sparsearray_sparse_Sparse_n_acc : forall a : usize, b : usize, c : creusotcontracts_std1_vec_vec 't, d : creusotcontracts_std1_vec_vec usize, e : creusotcontracts_std1_vec_vec usize . sparsearray_sparse_Sparse_n (SparseArray_Sparse a b c d e : sparsearray_sparse 't) = b
  function sparsearray_sparse_Sparse_back (self : sparsearray_sparse 't) : creusotcontracts_std1_vec_vec usize
  val sparsearray_sparse_Sparse_back (self : sparsearray_sparse 't) : creusotcontracts_std1_vec_vec usize
    ensures { result = sparsearray_sparse_Sparse_back self }
    
  axiom sparsearray_sparse_Sparse_back_acc : forall a : usize, b : usize, c : creusotcontracts_std1_vec_vec 't, d : creusotcontracts_std1_vec_vec usize, e : creusotcontracts_std1_vec_vec usize . sparsearray_sparse_Sparse_back (SparseArray_Sparse a b c d e : sparsearray_sparse 't) = e
  function sparsearray_sparse_Sparse_values (self : sparsearray_sparse 't) : creusotcontracts_std1_vec_vec 't
  val sparsearray_sparse_Sparse_values (self : sparsearray_sparse 't) : creusotcontracts_std1_vec_vec 't
    ensures { result = sparsearray_sparse_Sparse_values self }
    
  axiom sparsearray_sparse_Sparse_values_acc : forall a : usize, b : usize, c : creusotcontracts_std1_vec_vec 't, d : creusotcontracts_std1_vec_vec usize, e : creusotcontracts_std1_vec_vec usize . sparsearray_sparse_Sparse_values (SparseArray_Sparse a b c d e : sparsearray_sparse 't) = c
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Int_Impl5_ModelTy
  use mach.int.Int
  type modelTy  = 
    int
end
module CreusotContracts_Logic_Int_Impl5_Model_Interface
  use mach.int.Int
  use mach.int.Int32
  function model (self : int32) : int
end
module CreusotContracts_Logic_Int_Impl5_Model
  use mach.int.Int
  use mach.int.Int32
  function model (self : int32) : int = 
    Int32.to_int self
end
module CreusotContracts_Logic_Int_Impl5
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Int_Impl5_Model as Model0
  clone CreusotContracts_Logic_Int_Impl5_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = int32, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module SparseArray_Impl1_ModelTy
  type t   
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.core_option_option t)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module SparseArray_Impl0_IsElt_Interface
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  predicate is_elt (self : Type.sparsearray_sparse t) (i : int)
end
module SparseArray_Impl0_IsElt
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize
  predicate is_elt (self : Type.sparsearray_sparse t) (i : int) = 
    0 <= i && i < UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && UInt64.to_int (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_idx self)) i) < UInt64.to_int (Type.sparsearray_sparse_Sparse_n self) && UInt64.to_int (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_back self)) (UInt64.to_int (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_idx self)) i))) = i
end
module SparseArray_Impl1_Model_Interface
  type t   
  use mach.int.Int
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  clone SparseArray_Impl0_IsElt_Interface as IsElt0 with type t = t
  function model (self : Type.sparsearray_sparse t) : Seq.seq (Type.core_option_option t)
end
module SparseArray_Impl1_Model
  type t   
  use mach.int.Int
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  clone SparseArray_Impl0_IsElt_Interface as IsElt0 with type t = t
  function model (self : Type.sparsearray_sparse t) : Seq.seq (Type.core_option_option t)
  axiom model_spec : forall self : Type.sparsearray_sparse t . Seq.length (model self) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && (forall i : (int) . Seq.get (model self) i = (if IsElt0.is_elt self i then
    Type.Core_Option_Option_Some (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_values self)) i)
  else
    Type.Core_Option_Option_None
  ))
end
module SparseArray_Impl1
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize
  clone SparseArray_Impl0_IsElt as IsElt0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t
  clone SparseArray_Impl1_Model as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model2.model, axiom .
  clone SparseArray_Impl1_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.sparsearray_sparse t,
  type modelTy = ModelTy0.modelTy
end
module SparseArray_SparseInv_Interface
  type t   
  use Type
  predicate sparse_inv (x : Type.sparsearray_sparse t)
end
module SparseArray_SparseInv
  type t   
  use Type
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone SparseArray_Impl0_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl1_Model_Interface as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  predicate sparse_inv (x : Type.sparsearray_sparse t) = 
    UInt64.to_int (Type.sparsearray_sparse_Sparse_n x) <= UInt64.to_int (Type.sparsearray_sparse_Sparse_size x) && Seq.length (Model0.model x) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size x) && Seq.length (Model1.model (Type.sparsearray_sparse_Sparse_values x)) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size x) && Seq.length (Model2.model (Type.sparsearray_sparse_Sparse_idx x)) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size x) && Seq.length (Model2.model (Type.sparsearray_sparse_Sparse_back x)) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size x) && (forall i : (int) . 0 <= i && i < UInt64.to_int (Type.sparsearray_sparse_Sparse_n x) -> match (Seq.get (Model2.model (Type.sparsearray_sparse_Sparse_back x)) i) with
      | j -> 0 <= UInt64.to_int j && UInt64.to_int j < UInt64.to_int (Type.sparsearray_sparse_Sparse_size x) && UInt64.to_int (Seq.get (Model2.model (Type.sparsearray_sparse_Sparse_idx x)) (UInt64.to_int j)) = i
      end)
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  val from_elem (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module SparseArray_Create_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone SparseArray_SparseInv_Interface as SparseInv0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone SparseArray_Impl0_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl1_Model_Interface as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  val create (sz : usize) (dummy : t) : Type.sparsearray_sparse t
    requires {0 <= UInt64.to_int sz}
    ensures { forall i : (int) . Seq.get (Model0.model result) i = Type.Core_Option_Option_None }
    ensures { Type.sparsearray_sparse_Sparse_size result = sz }
    ensures { SparseInv0.sparse_inv result }
    
end
module SparseArray_Create
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize
  clone SparseArray_Impl0_IsElt as IsElt0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone SparseArray_Impl1_Model as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  clone SparseArray_SparseInv as SparseInv0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Model2.model = Model2.model, predicate IsElt0.is_elt = IsElt0.is_elt
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem1 with type t = usize,
  function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = t, function Model0.model = Model1.model
  let rec cfg create (sz : usize) (dummy : t) : Type.sparsearray_sparse t
    requires {0 <= UInt64.to_int sz}
    ensures { forall i : (int) . Seq.get (Model0.model result) i = Type.Core_Option_Option_None }
    ensures { Type.sparsearray_sparse_Sparse_size result = sz }
    ensures { SparseInv0.sparse_inv result }
    
   = 
  var _0 : Type.sparsearray_sparse t;
  var sz_1 : usize;
  var dummy_2 : t;
  var _3 : usize;
  var _4 : Type.creusotcontracts_std1_vec_vec t;
  var _5 : t;
  var _6 : usize;
  var _7 : Type.creusotcontracts_std1_vec_vec usize;
  var _8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec usize;
  var _10 : usize;
  {
    sz_1 <- sz;
    dummy_2 <- dummy;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- sz_1;
    assume { Resolve1.resolve _5 };
    _5 <- dummy_2;
    assume { Resolve1.resolve dummy_2 };
    assume { Resolve0.resolve _6 };
    _6 <- sz_1;
    _4 <- FromElem0.from_elem _5 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _8 };
    _8 <- sz_1;
    _7 <- FromElem1.from_elem (0 : usize) _8;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _10 };
    _10 <- sz_1;
    assume { Resolve0.resolve sz_1 };
    _9 <- FromElem1.from_elem (0 : usize) _10;
    goto BB3
  }
  BB3 {
    _0 <- Type.SparseArray_Sparse _3 (0 : usize) _4 _7 _9;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module SparseArray_Impl2_Get_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone SparseArray_SparseInv_Interface as SparseInv0 with type t = t
  clone SparseArray_Impl1_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val get (self : Type.sparsearray_sparse t) (i : usize) : Type.core_option_option t
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    requires {SparseInv0.sparse_inv self}
    ensures { match (result) with
      | Type.Core_Option_Option_None -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_None
      | Type.Core_Option_Option_Some x -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_Some x
      end }
    
end
module SparseArray_Impl2_Get
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize
  clone SparseArray_Impl0_IsElt as IsElt0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t
  clone SparseArray_Impl1_Model as Model1 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model2.model, axiom .
  clone SparseArray_SparseInv as SparseInv0 with type t = t, function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model, predicate IsElt0.is_elt = IsElt0.is_elt
  clone SparseArray_Impl1_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.sparsearray_sparse t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = usize,
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = t, function Model0.model = Model5.model
  let rec cfg get (self : Type.sparsearray_sparse t) (i : usize) : Type.core_option_option t
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    requires {SparseInv0.sparse_inv self}
    ensures { match (result) with
      | Type.Core_Option_Option_None -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_None
      | Type.Core_Option_Option_Some x -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_Some x
      end }
    
   = 
  var _0 : Type.core_option_option t;
  var self_1 : Type.sparsearray_sparse t;
  var i_2 : usize;
  var index_3 : usize;
  var _4 : usize;
  var _5 : Type.creusotcontracts_std1_vec_vec usize;
  var _6 : usize;
  var _7 : bool;
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.creusotcontracts_std1_vec_vec usize;
  var _15 : usize;
  var _16 : usize;
  var _17 : t;
  var _18 : t;
  var _19 : t;
  var _20 : Type.creusotcontracts_std1_vec_vec t;
  var _21 : usize;
  {
    self_1 <- self;
    i_2 <- i;
    goto BB0
  }
  BB0 {
    _5 <- Type.sparsearray_sparse_Sparse_idx self_1;
    assume { Resolve0.resolve _6 };
    _6 <- i_2;
    _4 <- Index0.index _5 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve index_3 };
    index_3 <- _4;
    assume { Resolve1.resolve _4 };
    assume { Resolve0.resolve _9 };
    _9 <- index_3;
    assume { Resolve0.resolve _10 };
    _10 <- Type.sparsearray_sparse_Sparse_n self_1;
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    assume { Resolve0.resolve index_3 };
    _7 <- false;
    goto BB4
  }
  BB3 {
    _14 <- Type.sparsearray_sparse_Sparse_back self_1;
    assume { Resolve0.resolve _15 };
    _15 <- index_3;
    assume { Resolve0.resolve index_3 };
    _13 <- Index0.index _14 _15;
    goto BB5
  }
  BB4 {
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB5 {
    assume { Resolve0.resolve _12 };
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    assume { Resolve0.resolve _16 };
    _16 <- i_2;
    _11 <- _12 = _16;
    assume { Resolve2.resolve _7 };
    _7 <- _11;
    goto BB4
  }
  BB6 {
    _20 <- Type.sparsearray_sparse_Sparse_values self_1;
    assume { Resolve3.resolve self_1 };
    assume { Resolve0.resolve _21 };
    _21 <- i_2;
    assume { Resolve0.resolve i_2 };
    _19 <- Index1.index _20 _21;
    goto BB7
  }
  BB7 {
    _18 <- _19;
    assume { Resolve4.resolve _19 };
    _17 <- _18;
    assume { Resolve4.resolve _18 };
    _0 <- Type.Core_Option_Option_Some _17;
    goto BB9
  }
  BB8 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve0.resolve i_2 };
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module SparseArray_Impl2_Set_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone SparseArray_SparseInv_Interface as SparseInv0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone SparseArray_Impl0_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl1_Model_Interface as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  val set (self : borrowed (Type.sparsearray_sparse t)) (i : usize) (v : t) : ()
    requires {UInt64.to_int i < Seq.length (Model0.model ( * self))}
    requires {SparseInv0.sparse_inv ( * self)}
    ensures { Seq.get (Model0.model ( ^ self)) (UInt64.to_int i) = Type.Core_Option_Option_Some v }
    ensures { forall j : (int) . not (j = UInt64.to_int i) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { SparseInv0.sparse_inv ( ^ self) }
    
end
module SparseArray_Impl2_Set
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize
  clone SparseArray_Impl0_IsElt as IsElt0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone SparseArray_Impl1_Model as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  clone SparseArray_SparseInv as SparseInv0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Model2.model = Model2.model, predicate IsElt0.is_elt = IsElt0.is_elt
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.sparsearray_sparse t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut1 with type t = usize,
  function Model0.model = Model2.model, function Model1.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = usize,
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model1.model, function Model1.model = Model3.model
  let rec cfg set (self : borrowed (Type.sparsearray_sparse t)) (i : usize) (v : t) : ()
    requires {UInt64.to_int i < Seq.length (Model0.model ( * self))}
    requires {SparseInv0.sparse_inv ( * self)}
    ensures { Seq.get (Model0.model ( ^ self)) (UInt64.to_int i) = Type.Core_Option_Option_Some v }
    ensures { forall j : (int) . not (j = UInt64.to_int i) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { SparseInv0.sparse_inv ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.sparsearray_sparse t);
  var i_2 : usize;
  var v_3 : t;
  var _4 : t;
  var _5 : borrowed t;
  var _6 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _7 : usize;
  var index_8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec usize;
  var _11 : usize;
  var _12 : bool;
  var _13 : bool;
  var _14 : bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : Type.creusotcontracts_std1_vec_vec usize;
  var _21 : usize;
  var _22 : usize;
  var _23 : ();
  var _24 : bool;
  var _25 : bool;
  var _26 : usize;
  var _27 : usize;
  var _28 : ();
  var _29 : usize;
  var _30 : borrowed usize;
  var _31 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _32 : usize;
  var _33 : usize;
  var _34 : borrowed usize;
  var _35 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _36 : usize;
  {
    self_1 <- self;
    i_2 <- i;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _4 <- v_3;
    _6 <- borrow_mut (Type.sparsearray_sparse_Sparse_values ( * self_1));
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a b ( ^ _6) d e) };
    assume { Resolve1.resolve _7 };
    _7 <- i_2;
    _5 <- IndexMut0.index_mut _6 _7;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve ( * _5) };
    _5 <- { _5 with current = _4 };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _5 };
    goto BB4
  }
  BB4 {
    _10 <- Type.sparsearray_sparse_Sparse_idx ( * self_1);
    assume { Resolve1.resolve _11 };
    _11 <- i_2;
    _9 <- Index0.index _10 _11;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve index_8 };
    index_8 <- _9;
    assume { Resolve3.resolve _9 };
    assume { Resolve1.resolve _15 };
    _15 <- index_8;
    assume { Resolve1.resolve _16 };
    _16 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    _14 <- _15 < _16;
    switch (_14)
      | False -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    assume { Resolve1.resolve index_8 };
    _13 <- false;
    goto BB8
  }
  BB7 {
    _20 <- Type.sparsearray_sparse_Sparse_back ( * self_1);
    assume { Resolve1.resolve _21 };
    _21 <- index_8;
    assume { Resolve1.resolve index_8 };
    _19 <- Index0.index _20 _21;
    goto BB9
  }
  BB8 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB15
      | _ -> goto BB10
      end
  }
  BB9 {
    assume { Resolve1.resolve _18 };
    _18 <- _19;
    assume { Resolve3.resolve _19 };
    assume { Resolve1.resolve _22 };
    _22 <- i_2;
    _17 <- _18 = _22;
    assume { Resolve4.resolve _13 };
    _13 <- _17;
    goto BB8
  }
  BB10 {
    assume { Resolve1.resolve _26 };
    _26 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    assume { Resolve1.resolve _27 };
    _27 <- Type.sparsearray_sparse_Sparse_size ( * self_1);
    _25 <- _26 < _27;
    _24 <- not _25;
    switch (_24)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve5.resolve self_1 };
    assume { Resolve1.resolve i_2 };
    absurd
  }
  BB12 {
    _23 <- ();
    assume { Resolve6.resolve _23 };
    assume { Resolve1.resolve _29 };
    _29 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    _31 <- borrow_mut (Type.sparsearray_sparse_Sparse_idx ( * self_1));
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a b c ( ^ _31) e) };
    assume { Resolve1.resolve _32 };
    _32 <- i_2;
    _30 <- IndexMut1.index_mut _31 _32;
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve ( * _30) };
    _30 <- { _30 with current = _29 };
    assume { Resolve7.resolve _30 };
    assume { Resolve1.resolve _33 };
    _33 <- i_2;
    assume { Resolve1.resolve i_2 };
    _35 <- borrow_mut (Type.sparsearray_sparse_Sparse_back ( * self_1));
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a b c d ( ^ _35)) };
    assume { Resolve1.resolve _36 };
    _36 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    _34 <- IndexMut1.index_mut _35 _36;
    goto BB14
  }
  BB14 {
    assume { Resolve1.resolve ( * _34) };
    _34 <- { _34 with current = _33 };
    assume { Resolve7.resolve _34 };
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a (Type.sparsearray_sparse_Sparse_n ( * self_1) + (1 : usize)) c d e) };
    assume { Resolve5.resolve self_1 };
    _0 <- ();
    goto BB16
  }
  BB15 {
    assume { Resolve5.resolve self_1 };
    assume { Resolve1.resolve i_2 };
    _0 <- ();
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module SparseArray_Main_Interface
  val main () : ()
end
module SparseArray_Main
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Int_Impl5_Model as Model1
  clone CreusotContracts_Logic_Int_Impl5_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize
  clone SparseArray_Impl0_IsElt as IsElt0 with type t = int32, function Model0.model = Model5.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.sparsearray_sparse int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_option_option int32
  clone SparseArray_Impl1_ModelTy as ModelTy1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = int32
  clone SparseArray_Impl1_Model as Model2 with type t = int32, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model3.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.sparsearray_sparse int32,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone SparseArray_SparseInv as SparseInv0 with type t = int32, function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model5.model, predicate IsElt0.is_elt = IsElt0.is_elt
  clone SparseArray_Impl2_Set_Interface as Set0 with type t = int32, function Model0.model = Model2.model,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model1.model = Model3.model
  clone SparseArray_Impl2_Get_Interface as Get0 with type t = int32, function Model0.model = Model4.model,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv
  clone SparseArray_Create_Interface as Create0 with type t = int32, function Model0.model = Model2.model,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model1.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = int32
  let rec cfg main () : () = 
  var _0 : ();
  var default_1 : int32;
  var a_2 : Type.sparsearray_sparse int32;
  var _3 : int32;
  var b_4 : Type.sparsearray_sparse int32;
  var _5 : int32;
  var x1_6 : Type.core_option_option int32;
  var _7 : Type.sparsearray_sparse int32;
  var y1_8 : Type.core_option_option int32;
  var _9 : Type.sparsearray_sparse int32;
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.sparsearray_sparse int32);
  var _13 : ();
  var _14 : borrowed (Type.sparsearray_sparse int32);
  var x2_15 : Type.core_option_option int32;
  var _16 : Type.sparsearray_sparse int32;
  var y2_17 : Type.core_option_option int32;
  var _18 : Type.sparsearray_sparse int32;
  var _19 : ();
  var _20 : ();
  var x3_21 : Type.core_option_option int32;
  var _22 : Type.sparsearray_sparse int32;
  var y3_23 : Type.core_option_option int32;
  var _24 : Type.sparsearray_sparse int32;
  var _25 : ();
  var x4_26 : Type.core_option_option int32;
  var _27 : Type.sparsearray_sparse int32;
  var y4_28 : Type.core_option_option int32;
  var _29 : Type.sparsearray_sparse int32;
  var _30 : ();
  var x5_31 : Type.core_option_option int32;
  var _32 : Type.sparsearray_sparse int32;
  var y5_33 : Type.core_option_option int32;
  var _34 : Type.sparsearray_sparse int32;
  {
    goto BB0
  }
  BB0 {
    default_1 <- (0 : int32);
    assume { Resolve0.resolve _3 };
    _3 <- default_1;
    a_2 <- Create0.create (10 : usize) _3;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    _5 <- default_1;
    assume { Resolve0.resolve default_1 };
    b_4 <- Create0.create (20 : usize) _5;
    goto BB2
  }
  BB2 {
    _7 <- a_2;
    x1_6 <- Get0.get _7 (5 : usize);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve x1_6 };
    _9 <- b_4;
    y1_8 <- Get0.get _9 (7 : usize);
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve y1_8 };
    assert { x1_6 = Type.Core_Option_Option_None && y1_8 = Type.Core_Option_Option_None };
    _10 <- ();
    assume { Resolve2.resolve _10 };
    _12 <- borrow_mut a_2;
    a_2 <-  ^ _12;
    _11 <- Set0.set _12 (5 : usize) (1 : int32);
    goto BB5
  }
  BB5 {
    _14 <- borrow_mut b_4;
    b_4 <-  ^ _14;
    _13 <- Set0.set _14 (7 : usize) (2 : int32);
    goto BB6
  }
  BB6 {
    _16 <- a_2;
    x2_15 <- Get0.get _16 (5 : usize);
    goto BB7
  }
  BB7 {
    _18 <- b_4;
    y2_17 <- Get0.get _18 (7 : usize);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve x2_15 };
    assert { match (x2_15) with
      | Type.Core_Option_Option_None -> false
      | Type.Core_Option_Option_Some z -> Model0.model z = 1
      end };
    _19 <- ();
    assume { Resolve2.resolve _19 };
    assume { Resolve1.resolve y2_17 };
    assert { match (y2_17) with
      | Type.Core_Option_Option_None -> false
      | Type.Core_Option_Option_Some z -> Model0.model z = 2
      end };
    _20 <- ();
    assume { Resolve2.resolve _20 };
    _22 <- a_2;
    x3_21 <- Get0.get _22 (7 : usize);
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve x3_21 };
    _24 <- b_4;
    y3_23 <- Get0.get _24 (5 : usize);
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve y3_23 };
    assert { x3_21 = Type.Core_Option_Option_None && y3_23 = Type.Core_Option_Option_None };
    _25 <- ();
    assume { Resolve2.resolve _25 };
    _27 <- a_2;
    x4_26 <- Get0.get _27 (0 : usize);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve x4_26 };
    _29 <- b_4;
    y4_28 <- Get0.get _29 (0 : usize);
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve y4_28 };
    assert { x4_26 = Type.Core_Option_Option_None && y4_28 = Type.Core_Option_Option_None };
    _30 <- ();
    assume { Resolve2.resolve _30 };
    _32 <- a_2;
    x5_31 <- Get0.get _32 (9 : usize);
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve x5_31 };
    _34 <- b_4;
    y5_33 <- Get0.get _34 (9 : usize);
    goto BB14
  }
  BB14 {
    assume { Resolve1.resolve y5_33 };
    assert { x5_31 = Type.Core_Option_Option_None && y5_33 = Type.Core_Option_Option_None };
    _0 <- ();
    goto BB15
  }
  BB15 {
    assume { Resolve3.resolve b_4 };
    goto BB16
  }
  BB16 {
    assume { Resolve3.resolve a_2 };
    return _0
  }
  
end
