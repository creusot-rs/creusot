
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module HeapsortGeneric_HeapFragMax_Impl
  type t
  
  let%span sheapsort_generic0 = "../heapsort_generic.rs" 21 11 21 31
  
  let%span sheapsort_generic1 = "../heapsort_generic.rs" 22 11 22 28
  
  let%span sheapsort_generic2 = "../heapsort_generic.rs" 25 30 25 31
  
  let%span sheapsort_generic3 = "../heapsort_generic.rs" 23 10 23 22
  
  let%span sheapsort_generic4 = "../heapsort_generic.rs" 24 10 24 11
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span36 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span37 = "../heapsort_generic.rs" 11 4 11 19
  
  let%span span38 = "../heapsort_generic.rs" 16 4 17 26
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : t) (_2 : t) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : t) (y : t) : ()
  
  axiom eq_cmp'0_spec : forall x : t, y : t . ([%#span5] inv'1 x)
   -> ([%#span6] inv'1 y)  -> ([%#span7] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : t) (y : t) : ()
  
  axiom antisym2'0_spec : forall x : t, y : t . ([%#span8] cmp_log'0 x y = Ordering'0.C_Greater)
   -> ([%#span9] inv'1 x)  -> ([%#span10] inv'1 y)  -> ([%#span11] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t) (y : t) : ()
  
  axiom antisym1'0_spec : forall x : t, y : t . ([%#span12] cmp_log'0 x y = Ordering'0.C_Less)
   -> ([%#span13] inv'1 x)  -> ([%#span14] inv'1 y)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t) (y : t) (z : t) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : t, y : t, z : t, o : Ordering'0.t_ordering . ([%#span16] cmp_log'0 x y = o)
   -> ([%#span17] cmp_log'0 y z = o)
   -> ([%#span18] inv'1 x)  -> ([%#span19] inv'1 y)  -> ([%#span20] inv'1 z)  -> ([%#span21] cmp_log'0 x z = o)
  
  function refl'0 (x : t) : ()
  
  axiom refl'0_spec : forall x : t . ([%#span22] inv'1 x)  -> ([%#span23] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : t) (o : t) : bool
  
  function cmp_gt_log'0 (x : t) (y : t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t, y : t . ([%#span24] inv'1 x)
   -> ([%#span25] inv'1 y)  -> ([%#span26] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : t) (o : t) : bool
  
  function cmp_ge_log'0 (x : t) (y : t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t, y : t . ([%#span27] inv'1 x)
   -> ([%#span28] inv'1 y)  -> ([%#span29] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : t) (o : t) : bool
  
  function cmp_lt_log'0 (x : t) (y : t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t, y : t . ([%#span30] inv'1 x)
   -> ([%#span31] inv'1 y)  -> ([%#span32] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : t) (o : t) : bool
  
  function cmp_le_log'0 (x : t) (y : t) : ()
  
  axiom cmp_le_log'0_spec : forall x : t, y : t . ([%#span33] inv'1 x)
   -> ([%#span34] inv'1 y)  -> ([%#span35] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t) =
    [%#span36] true
  
  predicate inv'0 (_x : Seq.seq t)
  
  axiom inv'0 : forall x : Seq.seq t . inv'0 x = true
  
  use prelude.prelude.Int
  
  function parent'0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#span37] div (i + 1) 2 - 1
  
  use seq.Seq
  
  predicate heap_frag'0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t) (start : int) (end' : int) =
    [%#span38] forall i : int . start <= parent'0 i /\ i < end'  -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  constant s  : Seq.seq t
  
  constant i  : int
  
  constant end'  : int
  
  function heap_frag_max [#"../heapsort_generic.rs" 25 0 25 58] (s : Seq.seq t) (i : int) (end' : int) : ()
  
  goal vc_heap_frag_max : ([%#sheapsort_generic2] inv'0 s)
   -> ([%#sheapsort_generic1] 0 <= i /\ i < end')
   -> ([%#sheapsort_generic0] heap_frag'0 s 0 end')
   -> (if i > 0 then
    ((([%#sheapsort_generic2] inv'0 s)
    && ([%#sheapsort_generic1] 0 <= parent'0 i /\ parent'0 i < end') && ([%#sheapsort_generic0] heap_frag'0 s 0 end'))
    /\ 0 <= ([%#sheapsort_generic4] i) /\ ([%#sheapsort_generic4] parent'0 i) < ([%#sheapsort_generic4] i))
    /\ (([%#sheapsort_generic3] le_log'0 (Seq.get s (parent'0 i)) (Seq.get s 0))
     -> ([%#sheapsort_generic3] le_log'0 (Seq.get s i) (Seq.get s 0)))
  else
    [%#sheapsort_generic3] le_log'0 (Seq.get s i) (Seq.get s 0)
  )
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module HeapsortGeneric_SiftDown
  type t
  
  let%span sheapsort_generic0 = "../heapsort_generic.rs" 45 16 45 31
  
  let%span sheapsort_generic1 = "../heapsort_generic.rs" 48 4 48 43
  
  let%span sheapsort_generic2 = "../heapsort_generic.rs" 49 16 49 41
  
  let%span sheapsort_generic3 = "../heapsort_generic.rs" 60 22 60 23
  
  let%span sheapsort_generic4 = "../heapsort_generic.rs" 60 16 60 23
  
  let%span sheapsort_generic5 = "../heapsort_generic.rs" 64 24 64 25
  
  let%span sheapsort_generic6 = "../heapsort_generic.rs" 64 32 64 33
  
  let%span sheapsort_generic7 = "../heapsort_generic.rs" 65 19 65 20
  
  let%span sheapsort_generic8 = "../heapsort_generic.rs" 65 51 65 52
  
  let%span sheapsort_generic9 = "../heapsort_generic.rs" 66 21 66 22
  
  let%span sheapsort_generic10 = "../heapsort_generic.rs" 31 11 31 54
  
  let%span sheapsort_generic11 = "../heapsort_generic.rs" 32 11 32 24
  
  let%span sheapsort_generic12 = "../heapsort_generic.rs" 33 11 33 27
  
  let%span sheapsort_generic13 = "../heapsort_generic.rs" 41 33 41 34
  
  let%span sheapsort_generic14 = "../heapsort_generic.rs" 34 10 34 52
  
  let%span sheapsort_generic15 = "../heapsort_generic.rs" 35 0 35 36
  
  let%span sheapsort_generic16 = "../heapsort_generic.rs" 36 0 37 43
  
  let%span sheapsort_generic17 = "../heapsort_generic.rs" 38 0 40 80
  
  let%span span18 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span21 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span22 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span44 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span45 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span46 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span47 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span48 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span49 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span50 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span51 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span52 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span53 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span54 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span55 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span56 = "../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22
  
  let%span span57 = "../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56
  
  let%span span58 = "../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53
  
  let%span span59 = "../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44
  
  let%span span60 = "../heapsort_generic.rs" 11 4 11 19
  
  let%span span61 = "../heapsort_generic.rs" 16 4 17 26
  
  let%span span62 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span63 = "../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span64 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span65 = "../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span66 = "../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span67 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span68 = "../../../../creusot-contracts/src/std/slice.rs" 250 19 250 35
  
  let%span span69 = "../../../../creusot-contracts/src/std/slice.rs" 251 19 251 35
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "../../../../creusot-contracts/src/std/slice.rs" 252 8 252 52
  
  let%span span72 = "" 0 0 0 0
  
  let%span span73 = "../../../../creusot-contracts/src/std/vec.rs" 169 26 169 42
  
  let%span span74 = "../../../../creusot-contracts/src/std/vec.rs" 170 26 170 48
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span77 = "" 0 0 0 0
  
  let%span span78 = "" 0 0 0 0
  
  let%span span79 = "../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77
  
  let%span span80 = "" 0 0 0 0
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "../../../../creusot-contracts/src/std/cmp.rs" 33 26 33 76
  
  let%span span83 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span84 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span85 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span86 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span87 = "" 0 0 0 0
  
  let%span span88 = "" 0 0 0 0
  
  let%span span89 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span90 = "" 0 0 0 0
  
  let%span span91 = "../../../../creusot-contracts/src/model.rs" 99 8 99 28
  
  let%span span92 = "../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37
  
  let%span span93 = "../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span94 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq t) =
    [%#span18] true
  
  predicate inv'10 (_x : Seq.seq t)
  
  axiom inv'10 : forall x : Seq.seq t . inv'10 x = true
  
  type deep_model_ty'0
  
  predicate invariant'9 (self : Seq.seq deep_model_ty'0) =
    [%#span18] true
  
  predicate inv'9 (_x : Seq.seq deep_model_ty'0)
  
  axiom inv'9 : forall x : Seq.seq deep_model_ty'0 . inv'9 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'8 (self : usize) =
    [%#span18] true
  
  predicate inv'8 (_x : usize)
  
  axiom inv'8 : forall x : usize . inv'8 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'7 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span18] true
  
  predicate inv'7 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'7 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'7 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span18] true
  
  predicate inv'6 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'6 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'6 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'5 (self : borrowed (slice t)) =
    [%#span18] true
  
  predicate inv'5 (_x : borrowed (slice t))
  
  axiom inv'5 : forall x : borrowed (slice t) . inv'5 x = true
  
  predicate invariant'4 (self : slice t) =
    [%#span18] true
  
  predicate inv'4 (_x : slice t)
  
  axiom inv'4 : forall x : slice t . inv'4 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span19] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span20] inv'3 self)
   -> ([%#span22] inv'10 (shallow_model'2 self))
  && ([%#span21] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'3 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span23] inv'10 (shallow_model'2 self)
  
  axiom inv'3 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'3 x = true
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  predicate inv'1 (_x : deep_model_ty'0)
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span24] inv'1 x)
   -> ([%#span25] inv'1 y)  -> ([%#span26] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span27] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span28] inv'1 x)  -> ([%#span29] inv'1 y)  -> ([%#span30] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span31] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span32] inv'1 x)  -> ([%#span33] inv'1 y)  -> ([%#span34] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span35] cmp_log'0 x y
  = o)
   -> ([%#span36] cmp_log'0 y z = o)
   -> ([%#span37] inv'1 x)  -> ([%#span38] inv'1 y)  -> ([%#span39] inv'1 z)  -> ([%#span40] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span41] inv'1 x)
   -> ([%#span42] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span43] inv'1 x)
   -> ([%#span44] inv'1 y)  -> ([%#span45] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span46] inv'1 x)
   -> ([%#span47] inv'1 y)  -> ([%#span48] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span49] inv'1 x)
   -> ([%#span50] inv'1 y)  -> ([%#span51] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span52] inv'1 x)
   -> ([%#span53] inv'1 y)  -> ([%#span54] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'1 (self : deep_model_ty'0)
  
  axiom inv'1 : forall x : deep_model_ty'0 . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span18] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) . inv'0 x = true
  
  function deep_model'3 (self : t) : deep_model_ty'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span55] Seq.get (shallow_model'2 self) ix
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'1 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq deep_model_ty'0
  
  axiom deep_model'1_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span56] inv'3 self)
   -> ([%#span59] inv'9 (deep_model'1 self))
  && ([%#span58] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  && ([%#span57] Seq.length (shallow_model'2 self) = Seq.length (deep_model'1 self))
  
  function parent'0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#span60] div (i + 1) 2 - 1
  
  predicate heap_frag'0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq deep_model_ty'0) (start : int) (end' : int)
   =
    [%#span61] forall i : int . start <= parent'0 i /\ i < end'  -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span62] self.final = self.current
  
  predicate resolve'2 (self : borrowed (slice t)) =
    [%#span62] self.final = self.current
  
  use seq.Permut
  
  use prelude.prelude.Slice
  
  function shallow_model'6 (self : slice t) : Seq.seq t
  
  axiom shallow_model'6_spec : forall self : slice t . ([%#span63] inv'4 self)
   -> ([%#span66] inv'10 (shallow_model'6 self))
  && ([%#span65] shallow_model'6 self = Slice.id self)
  && ([%#span64] Seq.length (shallow_model'6 self) <= UIntSize.to_int (max'0 : usize))
  
  function shallow_model'5 (self : borrowed (slice t)) : Seq.seq t =
    [%#span67] shallow_model'6 self.current
  
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span70] inv'5 self}
    {[@expl:precondition] [%#span69] UIntSize.to_int b < Seq.length (shallow_model'5 self)}
    {[@expl:precondition] [%#span68] UIntSize.to_int a < Seq.length (shallow_model'5 self)}
    any
    [ return' (result:())-> {[%#span71] Permut.exchange (shallow_model'6 self.final) (shallow_model'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span67] shallow_model'2 self.current
  
  let rec deref_mut'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span72] inv'6 self}
    any
    [ return' (result:borrowed (slice t))-> {[%#span75] inv'5 result}
      {[%#span74] shallow_model'6 result.final = shallow_model'2 self.final}
      {[%#span73] shallow_model'5 result = shallow_model'0 self}
      (! return' {result}) ]
    
  
  function deep_model'2 (self : t) : deep_model_ty'0 =
    [%#span76] deep_model'3 self
  
  let rec le'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span78] inv'2 other}
    {[@expl:precondition] [%#span77] inv'2 self}
    any
    [ return' (result:bool)-> {[%#span79] result = le_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
    
  
  let rec lt'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span81] inv'2 other}
    {[@expl:precondition] [%#span80] inv'2 self}
    any
    [ return' (result:bool)-> {[%#span82] result = lt_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : t)
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span83] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span84] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'4 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t =
    [%#span85] shallow_model'2 self
  
  let rec index'0 (self:Vec'0.t_vec t (Global'0.t_global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] [%#span88] inv'8 index}
    {[@expl:precondition] [%#span87] inv'7 self}
    {[@expl:precondition] [%#span86] in_bounds'0 index (shallow_model'4 self)}
    any
    [ return' (result:t)-> {[%#span90] inv'2 result}
      {[%#span89] has_value'0 index (shallow_model'4 self) result}
      (! return' {result}) ]
    
  
  function deep_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq deep_model_ty'0 =
    [%#span91] deep_model'1 self.current
  
  use prelude.prelude.Snapshot
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t) (o : Seq.seq t) =
    [%#span92] Permut.permut self o 0 (Seq.length self)
  
  function shallow_model'3 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span85] shallow_model'0 self
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : Seq.seq t =
    [%#span93] shallow_model'3 (Snapshot.inner self)
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span94] true
  
  use prelude.prelude.Snapshot
  
  let rec sift_down (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (start:usize) (end':usize) (return'  (ret:()))= {[%#sheapsort_generic13] inv'6 v}
    {[%#sheapsort_generic12] UIntSize.to_int end' <= Seq.length (shallow_model'0 v)}
    {[%#sheapsort_generic11] UIntSize.to_int start < UIntSize.to_int end'}
    {[%#sheapsort_generic10] heap_frag'0 (deep_model'0 v) (UIntSize.to_int start + 1) (UIntSize.to_int end')}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sheapsort_generic0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_v} s1
      | s1 = -{resolve'0 old_v}- s2
      | s2 =  [ &i <- start ] s3
      | s3 =  [ &old_2_0 <- Snapshot.new v ] s4
      | s4 = bb2 ]
      
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = v.final}
        {[@expl:loop invariant] [%#sheapsort_generic1] let c = 2 * UIntSize.to_int i + 2 in c < UIntSize.to_int end'
        /\ UIntSize.to_int start <= parent'0 (UIntSize.to_int i)
         -> le_log'0 (Seq.get (deep_model'0 v) c) (Seq.get (deep_model'0 v) (parent'0 (parent'0 c)))}
        {[@expl:loop invariant] [%#sheapsort_generic1] let c = 2 * UIntSize.to_int i + 1 in c < UIntSize.to_int end'
        /\ UIntSize.to_int start <= parent'0 (UIntSize.to_int i)
         -> le_log'0 (Seq.get (deep_model'0 v) c) (Seq.get (deep_model'0 v) (parent'0 (parent'0 c)))}
        {[@expl:loop invariant] [%#sheapsort_generic1] forall j : int . UIntSize.to_int start <= parent'0 j
        /\ j < UIntSize.to_int end' /\ UIntSize.to_int i <> parent'0 j
         -> le_log'0 (Seq.get (deep_model'0 v) j) (Seq.get (deep_model'0 v) (parent'0 j))}
        {[@expl:loop invariant] [%#sheapsort_generic1] forall m : deep_model_ty'0 . inv'1 m
         -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
         -> le_log'0 (Seq.get (deep_model'0 (Snapshot.inner old_v)) j) m)
         -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
         -> le_log'0 (Seq.get (deep_model'0 v) j) m)}
        {[@expl:loop invariant] [%#sheapsort_generic1] forall j : int . 0 <= j /\ j < UIntSize.to_int start
        \/ UIntSize.to_int end' <= j /\ j < Seq.length (shallow_model'0 v)
         -> index_logic'0 (Snapshot.inner old_v).current j = index_logic'0 v.current j}
        {[@expl:loop invariant] [%#sheapsort_generic2] UIntSize.to_int start <= UIntSize.to_int i
        /\ UIntSize.to_int i < UIntSize.to_int end'}
        {[@expl:loop invariant] [%#sheapsort_generic1] permutation_of'0 (shallow_model'0 v) (shallow_model'1 old_v)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.eq {[%#sheapsort_generic3] (2 : usize)} {[%#sheapsort_generic4] (0 : usize)}
              (fun (_ret':bool) ->  [ &_28 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#sheapsort_generic4] not _28} s2
          | s2 = bb4 ]
          
        | bb4 = s0
          [ s0 = UIntSize.div {end'} {[%#sheapsort_generic3] (2 : usize)} (fun (_ret':usize) ->  [ &_26 <- _ret' ] s1)
          | s1 = UIntSize.ge {i} {_26}
              (fun (_ret':bool) ->  [ &_24 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_26 <- _any ] s2) ] ))
          | s2 = any [ br0 -> {_24 = false} (! bb6) | br1 -> {_24} (! bb5) ]  ]
          
        | bb6 = s0
          [ s0 = UIntSize.mul {[%#sheapsort_generic5] (2 : usize)} {i} (fun (_ret':usize) ->  [ &_31 <- _ret' ] s1)
          | s1 = UIntSize.add {_31} {[%#sheapsort_generic6] (1 : usize)}
              (fun (_ret':usize) ->  [ &child <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_31 <- _any ] s2) ] ))
          | s2 = UIntSize.add {child} {[%#sheapsort_generic7] (1 : usize)} (fun (_ret':usize) ->  [ &_35 <- _ret' ] s3)
          | s3 = UIntSize.lt {_35} {end'}
              (fun (_ret':bool) ->  [ &_34 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_35 <- _any ] s4) ] ))
          | s4 = any [ br0 -> {_34 = false} (! bb8) | br1 -> {_34} (! bb7) ]  ]
          
        | bb7 = s0 [ s0 = index'0 {v.current} {child} (fun (_ret':t) ->  [ &_40 <- _ret' ] s1) | s1 = bb9 ] 
        | bb9 = s0
          [ s0 = {[@expl:type invariant] inv'2 _40} s1
          | s1 = -{resolve'1 _40}- s2
          | s2 = UIntSize.add {child} {[%#sheapsort_generic8] (1 : usize)} (fun (_ret':usize) ->  [ &_46 <- _ret' ] s3)
          | s3 = index'0 {v.current} {_46} (fun (_ret':t) ->  [ &_44 <- _ret' ] s4)
          | s4 = bb10 ]
          
        | bb10 = s0
          [ s0 = {[@expl:type invariant] inv'2 _44} s1
          | s1 = -{resolve'1 _44}- s2
          | s2 = lt'0 {_40} {_44} (fun (_ret':bool) ->  [ &_38 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = any [ br0 -> {_38 = false} (! bb13) | br1 -> {_38} (! bb12) ] 
        | bb12 = s0
          [ s0 = UIntSize.add {child} {[%#sheapsort_generic9] (1 : usize)}
              (fun (_ret':usize) ->  [ &child <- _ret' ] s1)
          | s1 = bb15 ]
          
        | bb13 = bb14
        | bb8 = bb14
        | bb14 = bb15
        | bb15 = s0 [ s0 = index'0 {v.current} {child} (fun (_ret':t) ->  [ &_51 <- _ret' ] s1) | s1 = bb16 ] 
        | bb16 = s0
          [ s0 = {[@expl:type invariant] inv'2 _51} s1
          | s1 = -{resolve'1 _51}- s2
          | s2 = index'0 {v.current} {i} (fun (_ret':t) ->  [ &_55 <- _ret' ] s3)
          | s3 = bb17 ]
          
        | bb17 = s0
          [ s0 = {[@expl:type invariant] inv'2 _55} s1
          | s1 = -{resolve'1 _55}- s2
          | s2 = le'0 {_51} {_55} (fun (_ret':bool) ->  [ &_49 <- _ret' ] s3)
          | s3 = bb18 ]
          
        | bb18 = any [ br0 -> {_49 = false} (! bb20) | br1 -> {_49} (! bb19) ] 
        | bb20 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_62 <- _ret' ] 
                 [ &v <- { v with current = _62.final ; } ] 
                s1)
          | s1 = -{inv'3 _62.final}- s2
          | s2 = deref_mut'0 {_62} (fun (_ret':borrowed (slice t)) ->  [ &_61 <- _ret' ] s3)
          | s3 = bb21 ]
          
        | bb21 = s0
          [ s0 = Borrow.borrow_final <slice t> {_61.current} {Borrow.get_id _61}
              (fun (_ret':borrowed (slice t)) ->  [ &_60 <- _ret' ]  [ &_61 <- { _61 with current = _60.final ; } ] s1)
          | s1 = -{inv'4 _60.final}- s2
          | s2 = swap'0 {_60} {i} {child} (fun (_ret':()) ->  [ &_59 <- _ret' ] s3)
          | s3 = bb22 ]
          
        | bb22 = s0
          [ s0 = {[@expl:type invariant] inv'5 _61} s1
          | s1 = -{resolve'2 _61}- s2
          | s2 =  [ &i <- child ] s3
          | s3 = bb2 ]
           ]
         ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'6 v} s1 | s1 = -{resolve'3 v}- s2 | s2 = bb23 ] 
    | bb19 = s0 [ s0 = {[@expl:type invariant] inv'6 v} s1 | s1 = -{resolve'3 v}- s2 | s2 = bb23 ] 
    | bb23 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec t (Global'0.t_global)) = v
    | & start : usize = start
    | & end' : usize = end'
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & i : usize = any_l ()
    | & _24 : bool = any_l ()
    | & _26 : usize = any_l ()
    | & _28 : bool = any_l ()
    | & child : usize = any_l ()
    | & _31 : usize = any_l ()
    | & _34 : bool = any_l ()
    | & _35 : usize = any_l ()
    | & _38 : bool = any_l ()
    | & _40 : t = any_l ()
    | & _44 : t = any_l ()
    | & _46 : usize = any_l ()
    | & _49 : bool = any_l ()
    | & _51 : t = any_l ()
    | & _55 : t = any_l ()
    | & _59 : () = any_l ()
    | & _60 : borrowed (slice t) = any_l ()
    | & _61 : borrowed (slice t) = any_l ()
    | & _62 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sheapsort_generic17] forall m : deep_model_ty'0 . inv'1 m
       -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
       -> le_log'0 (Seq.get (deep_model'0 v) j) m)
       -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
       -> le_log'0 (Seq.get (deep_model'1 v.final) j) m)}
      {[@expl:postcondition] [%#sheapsort_generic16] forall i : int . 0 <= i /\ i < UIntSize.to_int start
      \/ UIntSize.to_int end' <= i /\ i < Seq.length (shallow_model'0 v)
       -> index_logic'0 v.current i = index_logic'0 v.final i}
      {[@expl:postcondition] [%#sheapsort_generic15] permutation_of'0 (shallow_model'2 v.final) (shallow_model'0 v)}
      {[@expl:postcondition] [%#sheapsort_generic14] heap_frag'0 (deep_model'1 v.final) (UIntSize.to_int start) (UIntSize.to_int end')}
      (! return' {result}) ]
    
end
module HeapsortGeneric_HeapSort
  type t
  
  let%span sheapsort_generic0 = "../heapsort_generic.rs" 97 16 97 31
  
  let%span sheapsort_generic1 = "../heapsort_generic.rs" 99 30 99 31
  
  let%span sheapsort_generic2 = "../heapsort_generic.rs" 99 20 99 31
  
  let%span sheapsort_generic3 = "../heapsort_generic.rs" 100 16 100 29
  
  let%span sheapsort_generic4 = "../heapsort_generic.rs" 101 16 101 29
  
  let%span sheapsort_generic5 = "../heapsort_generic.rs" 100 4 100 31
  
  let%span sheapsort_generic6 = "../heapsort_generic.rs" 103 16 103 59
  
  let%span sheapsort_generic7 = "../heapsort_generic.rs" 104 16 104 36
  
  let%span sheapsort_generic8 = "../heapsort_generic.rs" 105 18 105 19
  
  let%span sheapsort_generic9 = "../heapsort_generic.rs" 106 17 106 18
  
  let%span sheapsort_generic10 = "../heapsort_generic.rs" 111 16 111 29
  
  let%span sheapsort_generic11 = "../heapsort_generic.rs" 112 16 112 32
  
  let%span sheapsort_generic12 = "../heapsort_generic.rs" 111 4 111 31
  
  let%span sheapsort_generic13 = "../heapsort_generic.rs" 114 16 114 50
  
  let%span sheapsort_generic14 = "../heapsort_generic.rs" 115 16 115 60
  
  let%span sheapsort_generic15 = "../heapsort_generic.rs" 118 16 118 17
  
  let%span sheapsort_generic16 = "../heapsort_generic.rs" 119 15 119 16
  
  let%span sheapsort_generic17 = "../heapsort_generic.rs" 120 15 120 16
  
  let%span sheapsort_generic18 = "../heapsort_generic.rs" 122 12 122 59
  
  let%span sheapsort_generic19 = "../heapsort_generic.rs" 126 21 126 22
  
  let%span sheapsort_generic20 = "../heapsort_generic.rs" 90 11 90 40
  
  let%span sheapsort_generic21 = "../heapsort_generic.rs" 93 37 93 38
  
  let%span sheapsort_generic22 = "../heapsort_generic.rs" 91 10 91 35
  
  let%span sheapsort_generic23 = "../heapsort_generic.rs" 92 0 92 36
  
  let%span span24 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span44 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span45 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span46 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span47 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span48 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span49 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span50 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span51 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span52 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span53 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span54 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span55 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span56 = "" 0 0 0 0
  
  let%span span57 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span58 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span59 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span60 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span61 = "../heapsort_generic.rs" 78 4 80 5
  
  let%span span62 = "../heapsort_generic.rs" 86 8 86 35
  
  let%span span63 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span64 = "../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22
  
  let%span span65 = "../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56
  
  let%span span66 = "../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53
  
  let%span span67 = "../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span70 = "../heapsort_generic.rs" 11 4 11 19
  
  let%span span71 = "../heapsort_generic.rs" 16 4 17 26
  
  let%span span72 = "../heapsort_generic.rs" 21 11 21 31
  
  let%span span73 = "../heapsort_generic.rs" 22 11 22 28
  
  let%span span74 = "../heapsort_generic.rs" 25 30 25 31
  
  let%span span75 = "../heapsort_generic.rs" 23 10 23 22
  
  let%span span76 = "../heapsort_generic.rs" 24 10 24 11
  
  let%span span77 = "../heapsort_generic.rs" 26 4 28 5
  
  let%span span78 = "../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span79 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span80 = "../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span81 = "../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span82 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span83 = "../../../../creusot-contracts/src/std/slice.rs" 250 19 250 35
  
  let%span span84 = "../../../../creusot-contracts/src/std/slice.rs" 251 19 251 35
  
  let%span span85 = "" 0 0 0 0
  
  let%span span86 = "../../../../creusot-contracts/src/std/slice.rs" 252 8 252 52
  
  let%span span87 = "" 0 0 0 0
  
  let%span span88 = "../../../../creusot-contracts/src/std/vec.rs" 169 26 169 42
  
  let%span span89 = "../../../../creusot-contracts/src/std/vec.rs" 170 26 170 48
  
  let%span span90 = "" 0 0 0 0
  
  let%span span91 = "../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37
  
  let%span span92 = "../../../../creusot-contracts/src/model.rs" 99 8 99 28
  
  let%span span93 = "../heapsort_generic.rs" 31 11 31 54
  
  let%span span94 = "../heapsort_generic.rs" 32 11 32 24
  
  let%span span95 = "../heapsort_generic.rs" 33 11 33 27
  
  let%span span96 = "../heapsort_generic.rs" 41 33 41 34
  
  let%span span97 = "../heapsort_generic.rs" 34 10 34 52
  
  let%span span98 = "../heapsort_generic.rs" 35 0 35 36
  
  let%span span99 = "../heapsort_generic.rs" 36 0 37 43
  
  let%span span100 = "../heapsort_generic.rs" 38 0 40 80
  
  let%span span101 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span102 = "../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span103 = "" 0 0 0 0
  
  let%span span104 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  let%span span105 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq t) =
    [%#span24] true
  
  predicate inv'8 (_x : Seq.seq t)
  
  axiom inv'8 : forall x : Seq.seq t . inv'8 x = true
  
  type deep_model_ty'0
  
  predicate invariant'7 (self : Seq.seq deep_model_ty'0) =
    [%#span24] true
  
  predicate inv'7 (_x : Seq.seq deep_model_ty'0)
  
  axiom inv'7 : forall x : Seq.seq deep_model_ty'0 . inv'7 x = true
  
  predicate invariant'6 (self : deep_model_ty'0)
  
  predicate inv'6 (_x : deep_model_ty'0)
  
  axiom inv'6 : forall x : deep_model_ty'0 . inv'6 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate invariant'5 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span24] true
  
  predicate inv'5 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'5 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'5 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span24] true
  
  predicate inv'4 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'4 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'4 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : borrowed (slice t)) =
    [%#span24] true
  
  predicate inv'3 (_x : borrowed (slice t))
  
  axiom inv'3 : forall x : borrowed (slice t) . inv'3 x = true
  
  predicate invariant'2 (self : slice t) =
    [%#span24] true
  
  predicate inv'2 (_x : slice t)
  
  axiom inv'2 : forall x : slice t . inv'2 x = true
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function cmp_log'0 (self : deep_model_ty'0) (_2 : deep_model_ty'0) : Ordering'0.t_ordering
  
  function eq_cmp'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom eq_cmp'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span25] inv'6 x)
   -> ([%#span26] inv'6 y)  -> ([%#span27] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym2'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span28] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span29] inv'6 x)  -> ([%#span30] inv'6 y)  -> ([%#span31] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom antisym1'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span32] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span33] inv'6 x)  -> ([%#span34] inv'6 y)  -> ([%#span35] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : deep_model_ty'0) (y : deep_model_ty'0) (z : deep_model_ty'0) (o : Ordering'0.t_ordering) : ()
  
  axiom trans'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0, z : deep_model_ty'0, o : Ordering'0.t_ordering . ([%#span36] cmp_log'0 x y
  = o)
   -> ([%#span37] cmp_log'0 y z = o)
   -> ([%#span38] inv'6 x)  -> ([%#span39] inv'6 y)  -> ([%#span40] inv'6 z)  -> ([%#span41] cmp_log'0 x z = o)
  
  function refl'0 (x : deep_model_ty'0) : ()
  
  axiom refl'0_spec : forall x : deep_model_ty'0 . ([%#span42] inv'6 x)
   -> ([%#span43] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_gt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span44] inv'6 x)
   -> ([%#span45] inv'6 y)  -> ([%#span46] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_ge_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span47] inv'6 x)
   -> ([%#span48] inv'6 y)  -> ([%#span49] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_lt_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span50] inv'6 x)
   -> ([%#span51] inv'6 y)  -> ([%#span52] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : deep_model_ty'0) (o : deep_model_ty'0) : bool
  
  function cmp_le_log'0 (x : deep_model_ty'0) (y : deep_model_ty'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : deep_model_ty'0, y : deep_model_ty'0 . ([%#span53] inv'6 x)
   -> ([%#span54] inv'6 y)  -> ([%#span55] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'1 : usize = [%#span56] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'1 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span57] inv'1 self)
   -> ([%#span59] inv'8 (shallow_model'2 self))
  && ([%#span58] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'1 : usize))
  
  predicate invariant'1 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span60] inv'8 (shallow_model'2 self)
  
  axiom inv'1 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span24] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) . inv'0 x = true
  
  use seq.Seq
  
  predicate sorted_range'0 [#"../heapsort_generic.rs" 77 0 77 63] (s : Seq.seq deep_model_ty'0) (l : int) (u : int) =
    [%#span61] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  use seq.Seq
  
  predicate sorted'0 [#"../heapsort_generic.rs" 84 0 84 41] (s : Seq.seq deep_model_ty'0) =
    [%#span62] sorted_range'0 s 0 (Seq.length s)
  
  function deep_model'2 (self : t) : deep_model_ty'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec t (Global'0.t_global)) (ix : int) : t =
    [%#span63] Seq.get (shallow_model'2 self) ix
  
  function deep_model'1 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq deep_model_ty'0
  
  axiom deep_model'1_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span64] inv'1 self)
   -> ([%#span67] inv'7 (deep_model'1 self))
  && ([%#span66] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'2 (index_logic'0 self i))
  && ([%#span65] Seq.length (shallow_model'2 self) = Seq.length (deep_model'1 self))
  
  constant max'0 : usize = [%#span68] (18446744073709551615 : usize)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span69] self.final = self.current
  
  function parent'0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#span70] div (i + 1) 2 - 1
  
  predicate heap_frag'0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq deep_model_ty'0) (start : int) (end' : int)
   =
    [%#span71] forall i : int . start <= parent'0 i /\ i < end'  -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  function heap_frag_max'0 [#"../heapsort_generic.rs" 25 0 25 58] (s : Seq.seq deep_model_ty'0) (i : int) (end' : int) : ()
    
  
  axiom heap_frag_max'0_def : forall s : Seq.seq deep_model_ty'0, i : int, end' : int . heap_frag_max'0 s i end'
  = ([%#span77] if i > 0 then heap_frag_max'0 s (parent'0 i) end' else ())
  
  axiom heap_frag_max'0_spec : forall s : Seq.seq deep_model_ty'0, i : int, end' : int . ([%#span72] heap_frag'0 s 0 end')
   -> ([%#span73] 0 <= i /\ i < end')  -> ([%#span74] inv'7 s)  -> ([%#span75] le_log'0 (Seq.get s i) (Seq.get s 0))
  
  predicate resolve'1 (self : borrowed (slice t)) =
    [%#span69] self.final = self.current
  
  use seq.Permut
  
  use prelude.prelude.Slice
  
  function shallow_model'6 (self : slice t) : Seq.seq t
  
  axiom shallow_model'6_spec : forall self : slice t . ([%#span78] inv'2 self)
   -> ([%#span81] inv'8 (shallow_model'6 self))
  && ([%#span80] shallow_model'6 self = Slice.id self)
  && ([%#span79] Seq.length (shallow_model'6 self) <= UIntSize.to_int (max'1 : usize))
  
  function shallow_model'5 (self : borrowed (slice t)) : Seq.seq t =
    [%#span82] shallow_model'6 self.current
  
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span85] inv'3 self}
    {[@expl:precondition] [%#span84] UIntSize.to_int b < Seq.length (shallow_model'5 self)}
    {[@expl:precondition] [%#span83] UIntSize.to_int a < Seq.length (shallow_model'5 self)}
    any
    [ return' (result:())-> {[%#span86] Permut.exchange (shallow_model'6 self.final) (shallow_model'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span82] shallow_model'2 self.current
  
  let rec deref_mut'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span87] inv'4 self}
    any
    [ return' (result:borrowed (slice t))-> {[%#span90] inv'3 result}
      {[%#span89] shallow_model'6 result.final = shallow_model'2 self.final}
      {[%#span88] shallow_model'5 result = shallow_model'0 self}
      (! return' {result}) ]
    
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t) (o : Seq.seq t) =
    [%#span91] Permut.permut self o 0 (Seq.length self)
  
  function deep_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq deep_model_ty'0 =
    [%#span92] deep_model'1 self.current
  
  let rec sift_down'0 (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (start:usize) (end':usize) (return'  (ret:()))= {[@expl:precondition] [%#span96] inv'4 v}
    {[@expl:precondition] [%#span95] UIntSize.to_int end' <= Seq.length (shallow_model'0 v)}
    {[@expl:precondition] [%#span94] UIntSize.to_int start < UIntSize.to_int end'}
    {[@expl:precondition] [%#span93] heap_frag'0 (deep_model'0 v) (UIntSize.to_int start + 1) (UIntSize.to_int end')}
    any
    [ return' (result:())-> {[%#span100] forall m : deep_model_ty'0 . inv'6 m
       -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
       -> le_log'0 (Seq.get (deep_model'0 v) j) m)
       -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
       -> le_log'0 (Seq.get (deep_model'1 v.final) j) m)}
      {[%#span99] forall i : int . 0 <= i /\ i < UIntSize.to_int start
      \/ UIntSize.to_int end' <= i /\ i < Seq.length (shallow_model'0 v)
       -> index_logic'0 v.current i = index_logic'0 v.final i}
      {[%#span98] permutation_of'0 (shallow_model'2 v.final) (shallow_model'0 v)}
      {[%#span97] heap_frag'0 (deep_model'1 v.final) (UIntSize.to_int start) (UIntSize.to_int end')}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span101] shallow_model'0 self
  
  use prelude.prelude.Snapshot
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) : Seq.seq t =
    [%#span102] shallow_model'4 (Snapshot.inner self)
  
  function shallow_model'3 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t =
    [%#span101] shallow_model'2 self
  
  let rec len'0 (self:Vec'0.t_vec t (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span103] inv'5 self}
    any
    [ return' (result:usize)-> {[%#span104] UIntSize.to_int result = Seq.length (shallow_model'3 self)}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global)))) =
    [%#span105] true
  
  use prelude.prelude.Snapshot
  
  let rec heap_sort (v:borrowed (Vec'0.t_vec t (Global'0.t_global))) (return'  (ret:()))= {[%#sheapsort_generic21] inv'4 v}
    {[%#sheapsort_generic20] Seq.length (shallow_model'0 v) < div (UIntSize.to_int max'0) 2}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sheapsort_generic0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_v} s1
      | s1 = -{resolve'0 old_v}- s2
      | s2 = len'0 {v.current} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.eq {[%#sheapsort_generic1] (2 : usize)} {[%#sheapsort_generic2] (0 : usize)}
          (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = {[@expl:division by zero] [%#sheapsort_generic2] not _10} s2
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.div {_8} {[%#sheapsort_generic1] (2 : usize)}
          (fun (_ret':usize) ->  [ &start <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_8 <- _any ] s1) ] ))
      | s1 =  [ &old_4_0 <- Snapshot.new v ] s2
      | s2 = bb4 ]
      
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] (Snapshot.inner old_4_0).final = v.final}
        {[@expl:loop invariant] [%#sheapsort_generic7] UIntSize.to_int start <= div (Seq.length (shallow_model'0 v)) 2}
        {[@expl:loop invariant] [%#sheapsort_generic6] heap_frag'0 (deep_model'0 v) (UIntSize.to_int start) (Seq.length (shallow_model'0 v))}
        {[@expl:loop invariant] [%#sheapsort_generic5] permutation_of'0 (shallow_model'0 v) (shallow_model'1 old_v)}
        {[@expl:loop invariant] [%#sheapsort_generic4] v.final = (Snapshot.inner old_v).final}
        {[@expl:loop invariant] [%#sheapsort_generic3] (Snapshot.inner old_v).final = v.final}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = UIntSize.gt {start} {[%#sheapsort_generic8] (0 : usize)} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1)
          | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb6) ]  ]
          
        | bb6 = s0
          [ s0 = UIntSize.sub {start} {[%#sheapsort_generic9] (1 : usize)}
              (fun (_ret':usize) ->  [ &start <- _ret' ] s1)
          | s1 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_21 <- _ret' ] 
                 [ &v <- { v with current = _21.final ; } ] 
                s2)
          | s2 = -{inv'1 _21.final}- s3
          | s3 = len'0 {_21.current} (fun (_ret':usize) ->  [ &_23 <- _ret' ] s4)
          | s4 = bb7 ]
          
        | bb7 = s0 [ s0 = sift_down'0 {_21} {start} {_23} (fun (_ret':()) ->  [ &_20 <- _ret' ] s1) | s1 = bb8 ] 
        | bb8 = bb4 ]
         ]
      
    | bb9 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &end' <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0 [ s0 =  [ &old_11_0 <- Snapshot.new v ] s1 | s1 = bb11 ] 
    | bb11 = bb11
      [ bb11 = {[@expl:loop invariant] (Snapshot.inner old_11_0).final = v.final}
        {[@expl:loop invariant] [%#sheapsort_generic12] forall i : int, j : int . 0 <= i
        /\ i < UIntSize.to_int end' /\ UIntSize.to_int end' <= j /\ j < Seq.length (shallow_model'0 v)
         -> le_log'0 (Seq.get (deep_model'0 v) i) (Seq.get (deep_model'0 v) j)}
        {[@expl:loop invariant] [%#sheapsort_generic14] sorted_range'0 (deep_model'0 v) (UIntSize.to_int end') (Seq.length (shallow_model'0 v))}
        {[@expl:loop invariant] [%#sheapsort_generic13] heap_frag'0 (deep_model'0 v) 0 (UIntSize.to_int end')}
        {[@expl:loop invariant] [%#sheapsort_generic12] permutation_of'0 (shallow_model'0 v) (shallow_model'1 old_v)}
        {[@expl:loop invariant] [%#sheapsort_generic11] UIntSize.to_int end' <= Seq.length (shallow_model'0 v)}
        {[@expl:loop invariant] [%#sheapsort_generic10] v.final = (Snapshot.inner old_v).final}
        (! s0) [ s0 = bb12 ] 
        [ bb12 = s0
          [ s0 = UIntSize.gt {end'} {[%#sheapsort_generic15] (1 : usize)} (fun (_ret':bool) ->  [ &_36 <- _ret' ] s1)
          | s1 = any [ br0 -> {_36 = false} (! bb17) | br1 -> {_36} (! bb13) ]  ]
          
        | bb13 = s0
          [ s0 = UIntSize.sub {end'} {[%#sheapsort_generic16] (1 : usize)} (fun (_ret':usize) ->  [ &end' <- _ret' ] s1)
          | s1 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_41 <- _ret' ] 
                 [ &v <- { v with current = _41.final ; } ] 
                s2)
          | s2 = -{inv'1 _41.final}- s3
          | s3 = deref_mut'0 {_41} (fun (_ret':borrowed (slice t)) ->  [ &_40 <- _ret' ] s4)
          | s4 = bb14 ]
          
        | bb14 = s0
          [ s0 = Borrow.borrow_final <slice t> {_40.current} {Borrow.get_id _40}
              (fun (_ret':borrowed (slice t)) ->  [ &_39 <- _ret' ]  [ &_40 <- { _40 with current = _39.final ; } ] s1)
          | s1 = -{inv'2 _39.final}- s2
          | s2 = swap'0 {_39} {[%#sheapsort_generic17] (0 : usize)} {end'} (fun (_ret':()) ->  [ &_38 <- _ret' ] s3)
          | s3 = bb15 ]
          
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'3 _40} s1
          | s1 = -{resolve'1 _40}- s2
          | s2 = {[@expl:assertion] [%#sheapsort_generic18] let _ = heap_frag_max'0 (deep_model'0 v) 0 (UIntSize.to_int end') in forall i : int, j : int . 0
            <= i
            /\ i < UIntSize.to_int end' /\ UIntSize.to_int end' <= j /\ j < Seq.length (shallow_model'0 v)
             -> le_log'0 (Seq.get (deep_model'0 v) i) (Seq.get (deep_model'0 v) j)}
            s3
          | s3 = Borrow.borrow_mut <Vec'0.t_vec t (Global'0.t_global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
                 [ &_46 <- _ret' ] 
                 [ &v <- { v with current = _46.final ; } ] 
                s4)
          | s4 = -{inv'1 _46.final}- s5
          | s5 = sift_down'0 {_46} {[%#sheapsort_generic19] (0 : usize)} {end'}
              (fun (_ret':()) ->  [ &_45 <- _ret' ] s6)
          | s6 = bb16 ]
          
        | bb16 = bb11 ]
         ]
      
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'4 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_vec t (Global'0.t_global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & start : usize = any_l ()
    | & _8 : usize = any_l ()
    | & _10 : bool = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : () = any_l ()
    | & _21 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _23 : usize = any_l ()
    | & end' : usize = any_l ()
    | & _36 : bool = any_l ()
    | & _38 : () = any_l ()
    | & _39 : borrowed (slice t) = any_l ()
    | & _40 : borrowed (slice t) = any_l ()
    | & _41 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _45 : () = any_l ()
    | & _46 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & old_4_0 : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l ()
    | & old_11_0 : Snapshot.snap_ty (borrowed (Vec'0.t_vec t (Global'0.t_global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sheapsort_generic23] permutation_of'0 (shallow_model'2 v.final) (shallow_model'0 v)}
      {[@expl:postcondition] [%#sheapsort_generic22] sorted'0 (deep_model'1 v.final)}
      (! return' {result}) ]
    
end
