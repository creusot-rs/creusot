module M_heapsort_generic__heap_frag_max [#"heapsort_generic.rs" 25 0 25 58]
  let%span sheapsort_generic0 = "heapsort_generic.rs" 21 11 21 31
  let%span sheapsort_generic1 = "heapsort_generic.rs" 22 11 22 28
  let%span sheapsort_generic2 = "heapsort_generic.rs" 23 10 23 22
  let%span sheapsort_generic3 = "heapsort_generic.rs" 24 10 24 11
  let%span sheapsort_generic4 = "heapsort_generic.rs" 26 4 28 5
  let%span sheapsort_generic5 = "heapsort_generic.rs" 16 16 17 24
  let%span sheapsort_generic6 = "heapsort_generic.rs" 11 4 11 19
  let%span sord7 = "../../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord8 = "../../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord9 = "../../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord10 = "../../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord11 = "../../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord12 = "../../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord13 = "../../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord14 = "../../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord15 = "../../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord16 = "../../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord17 = "../../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord18 = "../../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord19 = "../../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function parent'0 [#"heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#sheapsort_generic6] div (i + 1) 2 - 1
  
  use seq.Seq
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_T'0) (other : t_T'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord19] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom antisym2'0_spec : forall x : t_T'0, y : t_T'0 . ([%#sord17] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord18] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom antisym1'0_spec : forall x : t_T'0, y : t_T'0 . ([%#sord15] cmp_log'0 x y = C_Less'0)
   -> ([%#sord16] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_T'0) (y : t_T'0) (z : t_T'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_T'0, y : t_T'0, z : t_T'0, o : t_Ordering'0 . ([%#sord12] cmp_log'0 x y = o)
   -> ([%#sord13] cmp_log'0 y z = o)  -> ([%#sord14] cmp_log'0 x z = o)
  
  function refl'0 (x : t_T'0) : ()
  
  axiom refl'0_spec : forall x : t_T'0 . [%#sord11] cmp_log'0 x x = C_Equal'0
  
  function gt_log'0 (self : t_T'0) (o : t_T'0) : bool
  
  function cmp_gt_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord10] gt_log'0 x y = (cmp_log'0 x y = C_Greater'0)
  
  function ge_log'0 (self : t_T'0) (o : t_T'0) : bool
  
  function cmp_ge_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord9] ge_log'0 x y = (cmp_log'0 x y <> C_Less'0)
  
  function lt_log'0 (self : t_T'0) (o : t_T'0) : bool
  
  function cmp_lt_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord8] lt_log'0 x y = (cmp_log'0 x y = C_Less'0)
  
  function le_log'0 (self : t_T'0) (o : t_T'0) : bool
  
  function cmp_le_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord7] le_log'0 x y = (cmp_log'0 x y <> C_Greater'0)
  
  predicate heap_frag'0 [#"heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t_T'0) (start : int) (end' : int) =
    [%#sheapsort_generic5] forall i : int . start <= parent'0 i /\ i < end'
     -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  constant s  : Seq.seq t_T'0
  
  constant i  : int
  
  constant end'  : int
  
  function heap_frag_max'0 [#"heapsort_generic.rs" 25 0 25 58] (s : Seq.seq t_T'0) (i : int) (end' : int) : ()
  
  goal vc_heap_frag_max'0 : ([%#sheapsort_generic1] 0 <= i /\ i < end')
   -> ([%#sheapsort_generic0] heap_frag'0 s 0 end')
   -> (if i > 0 then
    ((([@expl:heap_frag_max requires #0] [%#sheapsort_generic0] heap_frag'0 s 0 end')
    && ([@expl:heap_frag_max requires #1] [%#sheapsort_generic1] 0 <= parent'0 i /\ parent'0 i < end'))
    /\ 0 <= ([%#sheapsort_generic3] i) /\ ([%#sheapsort_generic3] parent'0 i) < ([%#sheapsort_generic3] i))
    /\ (([%#sheapsort_generic2] le_log'0 (Seq.get s (parent'0 i)) (Seq.get s 0))
     -> ([%#sheapsort_generic2] le_log'0 (Seq.get s i) (Seq.get s 0)))
  else
    [%#sheapsort_generic2] le_log'0 (Seq.get s i) (Seq.get s 0)
  )
end
module M_heapsort_generic__sift_down [#"heapsort_generic.rs" 41 0 43 29]
  let%span sheapsort_generic0 = "heapsort_generic.rs" 45 16 45 31
  let%span sheapsort_generic1 = "heapsort_generic.rs" 48 4 48 24
  let%span sheapsort_generic2 = "heapsort_generic.rs" 56 16 57 58
  let%span sheapsort_generic3 = "heapsort_generic.rs" 53 16 55 75
  let%span sheapsort_generic4 = "heapsort_generic.rs" 51 16 52 43
  let%span sheapsort_generic5 = "heapsort_generic.rs" 50 16 50 41
  let%span sheapsort_generic6 = "heapsort_generic.rs" 49 16 49 41
  let%span sheapsort_generic7 = "heapsort_generic.rs" 48 16 48 22
  let%span sheapsort_generic8 = "heapsort_generic.rs" 61 22 61 23
  let%span sheapsort_generic9 = "heapsort_generic.rs" 61 16 61 23
  let%span sheapsort_generic10 = "heapsort_generic.rs" 65 24 65 25
  let%span sheapsort_generic11 = "heapsort_generic.rs" 65 32 65 33
  let%span sheapsort_generic12 = "heapsort_generic.rs" 66 19 66 20
  let%span sheapsort_generic13 = "heapsort_generic.rs" 66 51 66 52
  let%span sheapsort_generic14 = "heapsort_generic.rs" 67 21 67 22
  let%span sheapsort_generic15 = "heapsort_generic.rs" 41 33 41 34
  let%span sheapsort_generic16 = "heapsort_generic.rs" 31 11 31 54
  let%span sheapsort_generic17 = "heapsort_generic.rs" 32 11 32 24
  let%span sheapsort_generic18 = "heapsort_generic.rs" 33 11 33 27
  let%span sheapsort_generic19 = "heapsort_generic.rs" 34 10 34 52
  let%span sheapsort_generic20 = "heapsort_generic.rs" 35 10 35 34
  let%span sheapsort_generic21 = "heapsort_generic.rs" 36 10 37 41
  let%span sheapsort_generic22 = "heapsort_generic.rs" 38 10 40 78
  let%span sheapsort_generic23 = "heapsort_generic.rs" 11 4 11 19
  let%span smodel24 = "../../../creusot-contracts/src/model.rs" 63 8 63 28
  let%span smodel25 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sindex26 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span ssnapshot27 = "../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span sseq28 = "../../../creusot-contracts/src/logic/seq.rs" 316 8 316 41
  let%span svec29 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec30 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span scmp31 = "../../../creusot-contracts/src/std/cmp.rs" 35 26 35 76
  let%span scmp32 = "../../../creusot-contracts/src/std/cmp.rs" 43 26 43 77
  let%span svec33 = "../../../creusot-contracts/src/std/vec.rs" 175 26 175 42
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 176 26 176 48
  let%span sslice35 = "../../../creusot-contracts/src/std/slice.rs" 257 19 257 35
  let%span sslice36 = "../../../creusot-contracts/src/std/slice.rs" 258 19 258 35
  let%span sslice37 = "../../../creusot-contracts/src/std/slice.rs" 259 18 259 50
  let%span sheapsort_generic38 = "heapsort_generic.rs" 16 16 17 24
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 29 14 29 47
  let%span svec40 = "../../../creusot-contracts/src/std/vec.rs" 30 14 31 51
  let%span svec41 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sord42 = "../../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord43 = "../../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord44 = "../../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord45 = "../../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord46 = "../../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord47 = "../../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord48 = "../../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord49 = "../../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord50 = "../../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord51 = "../../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord52 = "../../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord53 = "../../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord54 = "../../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span smodel55 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice56 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice57 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span smodel58 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice59 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice60 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sresolve61 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant62 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec63 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sslice64 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sinvariant65 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq66 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed67 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function parent'0 [#"heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#sheapsort_generic23] div (i + 1) 2 - 1
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec41] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex26] Seq.get (view'2 self) ix
  
  function deep_model'3 (self : t_T'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : t_Vec'0 . ([%#svec39] Seq.length (view'2 self)
  = Seq.length (deep_model'1 self))
  && ([%#svec40] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  
  function deep_model'0 (self : borrowed (t_Vec'0)) : Seq.seq t_DeepModelTy'0 =
    [%#smodel24] deep_model'1 self.current
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord54] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord52] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord53] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord50] cmp_log'0 x y = C_Less'0)
   -> ([%#sord51] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord47] cmp_log'0 x y
  = o)  -> ([%#sord48] cmp_log'0 y z = o)  -> ([%#sord49] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord46] cmp_log'0 x x = C_Equal'0
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord45] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord44] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord43] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord42] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  use prelude.prelude.Snapshot
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel25] view'2 self.current
  
  use prelude.prelude.Snapshot
  
  function view'3 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel55] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot27] view'3 (Snapshot.inner self)
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (other : Seq.seq t_T'0) =
    [%#sseq28] Permut.permut self other 0 (Seq.length self)
  
  use seq.Seq
  
  predicate inv'8 (_1 : t_T'0)
  
  predicate invariant'7 (self : t_T'0) =
    [%#sboxed67] inv'8 self
  
  predicate inv'9 (_1 : t_T'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_T'0 [inv'9 x] . inv'9 x = invariant'7 x
  
  predicate invariant'6 (self : Seq.seq t_T'0) =
    [%#sseq66] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Seq.seq t_T'0 [inv'7 x] . inv'7 x = invariant'6 x
  
  predicate invariant'1 (self : t_Vec'0) =
    [%#svec63] inv'7 (view'2 self)
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (t_Vec'0)) =
    [%#sinvariant62] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant65] inv'1 self
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  predicate inv'5 (_1 : usize)
  
  axiom inv_axiom'5 [@rewrite] : forall x : usize [inv'5 x] . inv'5 x = true
  
  function view'4 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel55] view'2 self
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t_T'0) =
    [%#sslice56] UIntSize.to_int self < Seq.length seq
  
  predicate invariant'5 (self : t_T'0) =
    [%#sinvariant65] inv'8 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'5 x
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice57] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] inv'4 self}
    {[@expl:index 'index' type invariant] inv'5 index}
    {[@expl:index requires] [%#svec29] in_bounds'0 index (view'4 self)}
    any
    [ return' (result:t_T'0)-> {inv'6 result} {[%#svec30] has_value'0 index (view'4 self) result} (! return' {result}) ]
    
  
  function deep_model'2 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel58] deep_model'3 self
  
  let rec lt'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:lt 'self' type invariant] inv'6 self}
    {[@expl:lt 'other' type invariant] inv'6 other}
    any
    [ return' (result:bool)-> {[%#scmp31] result = lt_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
    
  
  let rec le'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:le 'self' type invariant] inv'6 self}
    {[@expl:le 'other' type invariant] inv'6 other}
    any
    [ return' (result:bool)-> {[%#scmp32] result = le_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  function view'6 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : slice t_T'0 . ([%#sslice59] Seq.length (view'6 self)
  <= UIntSize.to_int (v_MAX'0 : usize))
  && ([%#sslice60] view'6 self = Slice.id self)
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice64] inv'7 (view'6 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'3 (self : borrowed (slice t_T'0)) =
    [%#sinvariant62] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'3 x] . inv'3 x = invariant'3 x
  
  function view'5 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel25] view'6 self.current
  
  let rec deref_mut'0 (self:borrowed (t_Vec'0)) (return'  (ret:borrowed (slice t_T'0)))= {[@expl:deref_mut 'self' type invariant] inv'0 self}
    any
    [ return' (result:borrowed (slice t_T'0))-> {inv'3 result}
      {[%#svec33] view'5 result = view'0 self}
      {[%#svec34] view'6 result.final = view'2 self.final}
      (! return' {result}) ]
    
  
  use seq.Permut
  
  let rec swap'0 (self:borrowed (slice t_T'0)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:swap 'self' type invariant] inv'3 self}
    {[@expl:swap requires #0] [%#sslice35] UIntSize.to_int a < Seq.length (view'5 self)}
    {[@expl:swap requires #1] [%#sslice36] UIntSize.to_int b < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice37] Permut.exchange (view'6 self.final) (view'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (slice t_T'0)) =
    [%#sresolve61] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (slice t_T'0)) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed (t_Vec'0)) =
    [%#sresolve61] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_Vec'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  predicate heap_frag'0 [#"heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t_DeepModelTy'0) (start : int) (end' : int) =
    [%#sheapsort_generic38] forall i : int . start <= parent'0 i /\ i < end'
     -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  meta "compute_max_steps" 1000000
  
  let rec sift_down'0 (v:borrowed (t_Vec'0)) (start:usize) (end':usize) (return'  (ret:()))= {[@expl:sift_down 'v' type invariant] [%#sheapsort_generic15] inv'0 v}
    {[@expl:sift_down requires #0] [%#sheapsort_generic16] heap_frag'0 (deep_model'0 v) (UIntSize.to_int start
    + 1) (UIntSize.to_int end')}
    {[@expl:sift_down requires #1] [%#sheapsort_generic17] UIntSize.to_int start < UIntSize.to_int end'}
    {[@expl:sift_down requires #2] [%#sheapsort_generic18] UIntSize.to_int end' <= Seq.length (view'0 v)}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sheapsort_generic0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &i <- start ] s1 | s1 =  [ &old_2_0 <- Snapshot.new v ] s2 | s2 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] (Snapshot.inner old_2_0).final = v.final}
        {[@expl:loop invariant #0] [%#sheapsort_generic7] inv'0 v}
        {[@expl:loop invariant #1] [%#sheapsort_generic6] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #2] [%#sheapsort_generic5] UIntSize.to_int start <= UIntSize.to_int i
        /\ UIntSize.to_int i < UIntSize.to_int end'}
        {[@expl:loop invariant #3] [%#sheapsort_generic4] forall j : int . 0 <= j /\ j < UIntSize.to_int start
        \/ UIntSize.to_int end' <= j /\ j < Seq.length (view'0 v)
         -> index_logic'0 (Snapshot.inner old_v).current j = index_logic'0 v.current j}
        {[@expl:loop invariant #4] [%#sheapsort_generic3] forall m : t_DeepModelTy'0 . (forall j : int . UIntSize.to_int start
        <= j
        /\ j < UIntSize.to_int end'  -> le_log'0 (Seq.get (deep_model'0 (Snapshot.inner old_v)) j) m)
         -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
         -> le_log'0 (Seq.get (deep_model'0 v) j) m)}
        {[@expl:loop invariant #5] [%#sheapsort_generic2] forall j : int . UIntSize.to_int start <= parent'0 j
        /\ j < UIntSize.to_int end' /\ UIntSize.to_int i <> parent'0 j
         -> le_log'0 (Seq.get (deep_model'0 v) j) (Seq.get (deep_model'0 v) (parent'0 j))}
        {[@expl:loop invariant #6] [%#sheapsort_generic1] let c = 2 * UIntSize.to_int i + 1 in c < UIntSize.to_int end'
        /\ UIntSize.to_int start <= parent'0 (UIntSize.to_int i)
         -> le_log'0 (Seq.get (deep_model'0 v) c) (Seq.get (deep_model'0 v) (parent'0 (parent'0 c)))}
        {[@expl:loop invariant #7] [%#sheapsort_generic1] let c = 2 * UIntSize.to_int i + 2 in c < UIntSize.to_int end'
        /\ UIntSize.to_int start <= parent'0 (UIntSize.to_int i)
         -> le_log'0 (Seq.get (deep_model'0 v) c) (Seq.get (deep_model'0 v) (parent'0 (parent'0 c)))}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = UIntSize.eq {[%#sheapsort_generic8] (2 : usize)} {[%#sheapsort_generic9] (0 : usize)}
              (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#sheapsort_generic9] not _30} s2
          | s2 = bb4 ]
          
        | bb4 = s0
          [ s0 = UIntSize.div {end'} {[%#sheapsort_generic8] (2 : usize)} (fun (_ret':usize) ->  [ &_28 <- _ret' ] s1)
          | s1 = UIntSize.ge {i} {_28} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s2)
          | s2 = any [ br0 -> {_26 = false} (! bb6) | br1 -> {_26} (! bb5) ]  ]
          
        | bb6 = s0
          [ s0 = UIntSize.mul {[%#sheapsort_generic10] (2 : usize)} {i} (fun (_ret':usize) ->  [ &_33 <- _ret' ] s1)
          | s1 = UIntSize.add {_33} {[%#sheapsort_generic11] (1 : usize)} (fun (_ret':usize) ->  [ &child <- _ret' ] s2)
          | s2 = UIntSize.add {child} {[%#sheapsort_generic12] (1 : usize)} (fun (_ret':usize) ->  [ &_37 <- _ret' ] s3)
          | s3 = UIntSize.lt {_37} {end'} (fun (_ret':bool) ->  [ &_36 <- _ret' ] s4)
          | s4 = any [ br0 -> {_36 = false} (! bb8) | br1 -> {_36} (! bb7) ]  ]
          
        | bb7 = s0 [ s0 = index'0 {v.current} {child} (fun (_ret':t_T'0) ->  [ &_42 <- _ret' ] s1) | s1 = bb9 ] 
        | bb9 = s0
          [ s0 = UIntSize.add {child} {[%#sheapsort_generic13] (1 : usize)} (fun (_ret':usize) ->  [ &_48 <- _ret' ] s1)
          | s1 = index'0 {v.current} {_48} (fun (_ret':t_T'0) ->  [ &_46 <- _ret' ] s2)
          | s2 = bb10 ]
          
        | bb10 = s0 [ s0 = lt'0 {_42} {_46} (fun (_ret':bool) ->  [ &_40 <- _ret' ] s1) | s1 = bb11 ] 
        | bb11 = any [ br0 -> {_40 = false} (! bb13) | br1 -> {_40} (! bb12) ] 
        | bb12 = s0
          [ s0 = UIntSize.add {child} {[%#sheapsort_generic14] (1 : usize)}
              (fun (_ret':usize) ->  [ &child <- _ret' ] s1)
          | s1 = bb15 ]
          
        | bb13 = bb14
        | bb8 = bb14
        | bb14 = bb15
        | bb15 = s0 [ s0 = index'0 {v.current} {child} (fun (_ret':t_T'0) ->  [ &_53 <- _ret' ] s1) | s1 = bb16 ] 
        | bb16 = s0 [ s0 = index'0 {v.current} {i} (fun (_ret':t_T'0) ->  [ &_57 <- _ret' ] s1) | s1 = bb17 ] 
        | bb17 = s0 [ s0 = le'0 {_53} {_57} (fun (_ret':bool) ->  [ &_51 <- _ret' ] s1) | s1 = bb18 ] 
        | bb18 = any [ br0 -> {_51 = false} (! bb20) | br1 -> {_51} (! bb19) ] 
        | bb20 = s0
          [ s0 = {inv'1 v.current}
            Borrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_64 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s1)
          | s1 = deref_mut'0 {_64} (fun (_ret':borrowed (slice t_T'0)) ->  [ &_63 <- _ret' ] s2)
          | s2 = bb21 ]
          
        | bb21 = s0
          [ s0 = {inv'2 _63.current}
            Borrow.borrow_final <slice t_T'0> {_63.current} {Borrow.get_id _63}
              (fun (_ret':borrowed (slice t_T'0)) ->
                 [ &_62 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &_63 <- { _63 with current = _ret'.final } ] 
                s1)
          | s1 = swap'0 {_62} {i} {child} (fun (_ret':()) ->  [ &_61 <- _ret' ] s2)
          | s2 = bb22 ]
          
        | bb22 = s0
          [ s0 = {[@expl:type invariant] inv'3 _63} s1
          | s1 = -{resolve'0 _63}- s2
          | s2 =  [ &i <- child ] s3
          | s3 = bb2 ]
           ]
         ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'0 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = bb23 ] 
    | bb19 = s0 [ s0 = {[@expl:type invariant] inv'0 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = bb23 ] 
    | bb23 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (t_Vec'0) = v
    | & start : usize = start
    | & end' : usize = end'
    | & old_v : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & i : usize = any_l ()
    | & _26 : bool = any_l ()
    | & _28 : usize = any_l ()
    | & _30 : bool = any_l ()
    | & child : usize = any_l ()
    | & _33 : usize = any_l ()
    | & _36 : bool = any_l ()
    | & _37 : usize = any_l ()
    | & _40 : bool = any_l ()
    | & _42 : t_T'0 = any_l ()
    | & _46 : t_T'0 = any_l ()
    | & _48 : usize = any_l ()
    | & _51 : bool = any_l ()
    | & _53 : t_T'0 = any_l ()
    | & _57 : t_T'0 = any_l ()
    | & _61 : () = any_l ()
    | & _62 : borrowed (slice t_T'0) = any_l ()
    | & _63 : borrowed (slice t_T'0) = any_l ()
    | & _64 : borrowed (t_Vec'0) = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:sift_down ensures #0] [%#sheapsort_generic19] heap_frag'0 (deep_model'1 v.final) (UIntSize.to_int start) (UIntSize.to_int end')}
      {[@expl:sift_down ensures #1] [%#sheapsort_generic20] permutation_of'0 (view'2 v.final) (view'0 v)}
      {[@expl:sift_down ensures #2] [%#sheapsort_generic21] forall i : int . 0 <= i /\ i < UIntSize.to_int start
      \/ UIntSize.to_int end' <= i /\ i < Seq.length (view'0 v)  -> index_logic'0 v.current i = index_logic'0 v.final i}
      {[@expl:sift_down ensures #3] [%#sheapsort_generic22] forall m : t_DeepModelTy'0 . (forall j : int . UIntSize.to_int start
      <= j
      /\ j < UIntSize.to_int end'  -> le_log'0 (Seq.get (deep_model'0 v) j) m)
       -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
       -> le_log'0 (Seq.get (deep_model'1 v.final) j) m)}
      (! return' {result}) ]
    
end
module M_heapsort_generic__heap_sort [#"heapsort_generic.rs" 94 0 96 29]
  let%span sheapsort_generic0 = "heapsort_generic.rs" 98 16 98 31
  let%span sheapsort_generic1 = "heapsort_generic.rs" 100 30 100 31
  let%span sheapsort_generic2 = "heapsort_generic.rs" 100 20 100 31
  let%span sheapsort_generic3 = "heapsort_generic.rs" 104 16 104 36
  let%span sheapsort_generic4 = "heapsort_generic.rs" 103 16 103 59
  let%span sheapsort_generic5 = "heapsort_generic.rs" 102 16 102 41
  let%span sheapsort_generic6 = "heapsort_generic.rs" 105 18 105 19
  let%span sheapsort_generic7 = "heapsort_generic.rs" 106 17 106 18
  let%span sheapsort_generic8 = "heapsort_generic.rs" 116 16 117 60
  let%span sheapsort_generic9 = "heapsort_generic.rs" 115 16 115 60
  let%span sheapsort_generic10 = "heapsort_generic.rs" 114 16 114 50
  let%span sheapsort_generic11 = "heapsort_generic.rs" 113 16 113 41
  let%span sheapsort_generic12 = "heapsort_generic.rs" 112 16 112 32
  let%span sheapsort_generic13 = "heapsort_generic.rs" 111 16 111 22
  let%span sheapsort_generic14 = "heapsort_generic.rs" 118 16 118 17
  let%span sheapsort_generic15 = "heapsort_generic.rs" 119 15 119 16
  let%span sheapsort_generic16 = "heapsort_generic.rs" 120 15 120 16
  let%span sheapsort_generic17 = "heapsort_generic.rs" 122 12 122 59
  let%span sheapsort_generic18 = "heapsort_generic.rs" 126 21 126 22
  let%span sheapsort_generic19 = "heapsort_generic.rs" 94 37 94 38
  let%span sheapsort_generic20 = "heapsort_generic.rs" 91 11 91 40
  let%span sheapsort_generic21 = "heapsort_generic.rs" 92 10 92 35
  let%span sheapsort_generic22 = "heapsort_generic.rs" 93 10 93 34
  let%span svec23 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span smodel24 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel25 = "../../../creusot-contracts/src/model.rs" 63 8 63 28
  let%span sheapsort_generic26 = "heapsort_generic.rs" 16 16 17 24
  let%span ssnapshot27 = "../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span sseq28 = "../../../creusot-contracts/src/logic/seq.rs" 316 8 316 41
  let%span sheapsort_generic29 = "heapsort_generic.rs" 41 33 41 34
  let%span sheapsort_generic30 = "heapsort_generic.rs" 31 11 31 54
  let%span sheapsort_generic31 = "heapsort_generic.rs" 32 11 32 24
  let%span sheapsort_generic32 = "heapsort_generic.rs" 33 11 33 27
  let%span sheapsort_generic33 = "heapsort_generic.rs" 34 10 34 52
  let%span sheapsort_generic34 = "heapsort_generic.rs" 35 10 35 34
  let%span sheapsort_generic35 = "heapsort_generic.rs" 36 10 37 41
  let%span sheapsort_generic36 = "heapsort_generic.rs" 38 10 40 78
  let%span sheapsort_generic37 = "heapsort_generic.rs" 80 8 80 72
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 175 26 175 42
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 176 26 176 48
  let%span sslice40 = "../../../creusot-contracts/src/std/slice.rs" 257 19 257 35
  let%span sslice41 = "../../../creusot-contracts/src/std/slice.rs" 258 19 258 35
  let%span sslice42 = "../../../creusot-contracts/src/std/slice.rs" 259 18 259 50
  let%span sheapsort_generic43 = "heapsort_generic.rs" 21 11 21 31
  let%span sheapsort_generic44 = "heapsort_generic.rs" 22 11 22 28
  let%span sheapsort_generic45 = "heapsort_generic.rs" 23 10 23 22
  let%span sheapsort_generic46 = "heapsort_generic.rs" 24 10 24 11
  let%span sheapsort_generic47 = "heapsort_generic.rs" 26 4 28 5
  let%span svec48 = "../../../creusot-contracts/src/std/vec.rs" 29 14 29 47
  let%span svec49 = "../../../creusot-contracts/src/std/vec.rs" 30 14 31 51
  let%span sheapsort_generic50 = "heapsort_generic.rs" 87 8 87 35
  let%span svec51 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel52 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sheapsort_generic53 = "heapsort_generic.rs" 11 4 11 19
  let%span sindex54 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sord55 = "../../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord56 = "../../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord57 = "../../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord58 = "../../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord59 = "../../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord60 = "../../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord61 = "../../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord62 = "../../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord63 = "../../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord64 = "../../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord65 = "../../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord66 = "../../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord67 = "../../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sslice68 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice69 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sresolve70 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec71 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant72 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice73 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sinvariant74 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq75 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed76 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'1 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec51] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'1 : usize)
  
  use seq.Seq
  
  predicate inv'7 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed76] inv'7 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'6 x
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq75] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq t_T'0 [inv'5 x] . inv'5 x = invariant'5 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec71] inv'5 (view'2 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant74] inv'0 self
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel52] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] inv'4 self}
    any
    [ return' (result:usize)-> {[%#svec23] UIntSize.to_int result = Seq.length (view'3 self)} (! return' {result}) ]
    
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel24] view'2 self.current
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex54] Seq.get (view'2 self) ix
  
  function deep_model'2 (self : t_T'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : t_Vec'0 . ([%#svec48] Seq.length (view'2 self)
  = Seq.length (deep_model'1 self))
  && ([%#svec49] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'2 (index_logic'0 self i))
  
  function deep_model'0 (self : borrowed (t_Vec'0)) : Seq.seq t_DeepModelTy'0 =
    [%#smodel25] deep_model'1 self.current
  
  function parent'0 [#"heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#sheapsort_generic53] div (i + 1) 2 - 1
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord67] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord65] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord66] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord63] cmp_log'0 x y = C_Less'0)
   -> ([%#sord64] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord60] cmp_log'0 x y
  = o)  -> ([%#sord61] cmp_log'0 y z = o)  -> ([%#sord62] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord59] cmp_log'0 x x = C_Equal'0
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord58] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord57] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord56] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord55] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  predicate heap_frag'0 [#"heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t_DeepModelTy'0) (start : int) (end' : int) =
    [%#sheapsort_generic26] forall i : int . start <= parent'0 i /\ i < end'
     -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'4 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel52] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot27] view'4 (Snapshot.inner self)
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (other : Seq.seq t_T'0) =
    [%#sseq28] Permut.permut self other 0 (Seq.length self)
  
  predicate invariant'1 (self : borrowed (t_Vec'0)) =
    [%#sinvariant72] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  let rec sift_down'0 (v:borrowed (t_Vec'0)) (start:usize) (end':usize) (return'  (ret:()))= {[@expl:sift_down 'v' type invariant] [%#sheapsort_generic29] inv'1 v}
    {[@expl:sift_down requires #0] [%#sheapsort_generic30] heap_frag'0 (deep_model'0 v) (UIntSize.to_int start
    + 1) (UIntSize.to_int end')}
    {[@expl:sift_down requires #1] [%#sheapsort_generic31] UIntSize.to_int start < UIntSize.to_int end'}
    {[@expl:sift_down requires #2] [%#sheapsort_generic32] UIntSize.to_int end' <= Seq.length (view'0 v)}
    any
    [ return' (result:())-> {[%#sheapsort_generic33] heap_frag'0 (deep_model'1 v.final) (UIntSize.to_int start) (UIntSize.to_int end')}
      {[%#sheapsort_generic34] permutation_of'0 (view'2 v.final) (view'0 v)}
      {[%#sheapsort_generic35] forall i : int . 0 <= i /\ i < UIntSize.to_int start
      \/ UIntSize.to_int end' <= i /\ i < Seq.length (view'0 v)  -> index_logic'0 v.current i = index_logic'0 v.final i}
      {[%#sheapsort_generic36] forall m : t_DeepModelTy'0 . (forall j : int . UIntSize.to_int start <= j
      /\ j < UIntSize.to_int end'  -> le_log'0 (Seq.get (deep_model'0 v) j) m)
       -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
       -> le_log'0 (Seq.get (deep_model'1 v.final) j) m)}
      (! return' {result}) ]
    
  
  predicate sorted_range'0 [#"heapsort_generic.rs" 78 0 78 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#sheapsort_generic37] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  function view'6 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : slice t_T'0 . ([%#sslice68] Seq.length (view'6 self)
  <= UIntSize.to_int (v_MAX'1 : usize))
  && ([%#sslice69] view'6 self = Slice.id self)
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice73] inv'5 (view'6 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'3 (self : borrowed (slice t_T'0)) =
    [%#sinvariant72] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'3 x] . inv'3 x = invariant'3 x
  
  function view'5 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel24] view'6 self.current
  
  let rec deref_mut'0 (self:borrowed (t_Vec'0)) (return'  (ret:borrowed (slice t_T'0)))= {[@expl:deref_mut 'self' type invariant] inv'1 self}
    any
    [ return' (result:borrowed (slice t_T'0))-> {inv'3 result}
      {[%#svec38] view'5 result = view'0 self}
      {[%#svec39] view'6 result.final = view'2 self.final}
      (! return' {result}) ]
    
  
  use seq.Permut
  
  let rec swap'0 (self:borrowed (slice t_T'0)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:swap 'self' type invariant] inv'3 self}
    {[@expl:swap requires #0] [%#sslice40] UIntSize.to_int a < Seq.length (view'5 self)}
    {[@expl:swap requires #1] [%#sslice41] UIntSize.to_int b < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice42] Permut.exchange (view'6 self.final) (view'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (slice t_T'0)) =
    [%#sresolve70] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (slice t_T'0)) =
    resolve'2 _1
  
  function heap_frag_max'0 [#"heapsort_generic.rs" 25 0 25 58] (s : Seq.seq t_DeepModelTy'0) (i : int) (end' : int) : ()
  
  axiom heap_frag_max'0_def : forall s : Seq.seq t_DeepModelTy'0, i : int, end' : int . ([%#sheapsort_generic43] heap_frag'0 s 0 end')
   -> ([%#sheapsort_generic44] 0 <= i /\ i < end')
   -> heap_frag_max'0 s i end' = ([%#sheapsort_generic47] if i > 0 then heap_frag_max'0 s (parent'0 i) end' else ())
  
  axiom heap_frag_max'0_spec : forall s : Seq.seq t_DeepModelTy'0, i : int, end' : int . ([%#sheapsort_generic43] heap_frag'0 s 0 end')
   -> ([%#sheapsort_generic44] 0 <= i /\ i < end')  -> ([%#sheapsort_generic45] le_log'0 (Seq.get s i) (Seq.get s 0))
  
  predicate resolve'3 (self : borrowed (t_Vec'0)) =
    [%#sresolve70] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_Vec'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  predicate sorted'0 [#"heapsort_generic.rs" 85 0 85 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#sheapsort_generic50] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec heap_sort'0 (v:borrowed (t_Vec'0)) (return'  (ret:()))= {[@expl:heap_sort 'v' type invariant] [%#sheapsort_generic19] inv'1 v}
    {[@expl:heap_sort requires] [%#sheapsort_generic20] Seq.length (view'0 v) < div (UIntSize.to_int v_MAX'0) 2}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sheapsort_generic0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.eq {[%#sheapsort_generic1] (2 : usize)} {[%#sheapsort_generic2] (0 : usize)}
          (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = {[@expl:division by zero] [%#sheapsort_generic2] not _10} s2
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.div {_8} {[%#sheapsort_generic1] (2 : usize)} (fun (_ret':usize) ->  [ &start <- _ret' ] s1)
      | s1 =  [ &old_4_0 <- Snapshot.new v ] s2
      | s2 = bb4 ]
      
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] (Snapshot.inner old_4_0).final = v.final}
        {[@expl:loop invariant #0] [%#sheapsort_generic5] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #1] [%#sheapsort_generic4] heap_frag'0 (deep_model'0 v) (UIntSize.to_int start) (Seq.length (view'0 v))}
        {[@expl:loop invariant #2] [%#sheapsort_generic3] UIntSize.to_int start <= div (Seq.length (view'0 v)) 2}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = UIntSize.gt {start} {[%#sheapsort_generic6] (0 : usize)} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s1)
          | s1 = any [ br0 -> {_17 = false} (! bb9) | br1 -> {_17} (! bb6) ]  ]
          
        | bb6 = s0
          [ s0 = UIntSize.sub {start} {[%#sheapsort_generic7] (1 : usize)}
              (fun (_ret':usize) ->  [ &start <- _ret' ] s1)
          | s1 = {inv'0 v.current}
            Borrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_20 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s2)
          | s2 = len'0 {_20.current} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0 [ s0 = sift_down'0 {_20} {start} {_22} (fun (_ret':()) ->  [ &_19 <- _ret' ] s1) | s1 = bb8 ] 
        | bb8 = bb4 ]
         ]
      
    | bb9 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &end' <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0 [ s0 =  [ &old_11_0 <- Snapshot.new v ] s1 | s1 = bb11 ] 
    | bb11 = bb11
      [ bb11 = {[@expl:mut invariant] (Snapshot.inner old_11_0).final = v.final}
        {[@expl:loop invariant #0] [%#sheapsort_generic13] inv'1 v}
        {[@expl:loop invariant #1] [%#sheapsort_generic12] UIntSize.to_int end' <= Seq.length (view'0 v)}
        {[@expl:loop invariant #2] [%#sheapsort_generic11] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #3] [%#sheapsort_generic10] heap_frag'0 (deep_model'0 v) 0 (UIntSize.to_int end')}
        {[@expl:loop invariant #4] [%#sheapsort_generic9] sorted_range'0 (deep_model'0 v) (UIntSize.to_int end') (Seq.length (view'0 v))}
        {[@expl:loop invariant #5] [%#sheapsort_generic8] forall i : int, j : int . 0 <= i
        /\ i < UIntSize.to_int end' /\ UIntSize.to_int end' <= j /\ j < Seq.length (view'0 v)
         -> le_log'0 (Seq.get (deep_model'0 v) i) (Seq.get (deep_model'0 v) j)}
        (! s0) [ s0 = bb12 ] 
        [ bb12 = s0
          [ s0 = UIntSize.gt {end'} {[%#sheapsort_generic14] (1 : usize)} (fun (_ret':bool) ->  [ &_34 <- _ret' ] s1)
          | s1 = any [ br0 -> {_34 = false} (! bb17) | br1 -> {_34} (! bb13) ]  ]
          
        | bb13 = s0
          [ s0 = UIntSize.sub {end'} {[%#sheapsort_generic15] (1 : usize)} (fun (_ret':usize) ->  [ &end' <- _ret' ] s1)
          | s1 = {inv'0 v.current}
            Borrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_39 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s2)
          | s2 = deref_mut'0 {_39} (fun (_ret':borrowed (slice t_T'0)) ->  [ &_38 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = {inv'2 _38.current}
            Borrow.borrow_final <slice t_T'0> {_38.current} {Borrow.get_id _38}
              (fun (_ret':borrowed (slice t_T'0)) ->
                 [ &_37 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &_38 <- { _38 with current = _ret'.final } ] 
                s1)
          | s1 = swap'0 {_37} {[%#sheapsort_generic16] (0 : usize)} {end'} (fun (_ret':()) ->  [ &_36 <- _ret' ] s2)
          | s2 = bb15 ]
          
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'3 _38} s1
          | s1 = -{resolve'0 _38}- s2
          | s2 = {[@expl:assertion] [%#sheapsort_generic17] let _ = heap_frag_max'0 (deep_model'0 v) 0 (UIntSize.to_int end') in forall i : int, j : int . 0
            <= i
            /\ i < UIntSize.to_int end' /\ UIntSize.to_int end' <= j /\ j < Seq.length (view'0 v)
             -> le_log'0 (Seq.get (deep_model'0 v) i) (Seq.get (deep_model'0 v) j)}
            s3
          | s3 = {inv'0 v.current}
            Borrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_44 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s4)
          | s4 = sift_down'0 {_44} {[%#sheapsort_generic18] (0 : usize)} {end'}
              (fun (_ret':()) ->  [ &_43 <- _ret' ] s5)
          | s5 = bb16 ]
          
        | bb16 = bb11 ]
         ]
      
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (t_Vec'0) = v
    | & old_v : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & start : usize = any_l ()
    | & _8 : usize = any_l ()
    | & _10 : bool = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : () = any_l ()
    | & _20 : borrowed (t_Vec'0) = any_l ()
    | & _22 : usize = any_l ()
    | & end' : usize = any_l ()
    | & _34 : bool = any_l ()
    | & _36 : () = any_l ()
    | & _37 : borrowed (slice t_T'0) = any_l ()
    | & _38 : borrowed (slice t_T'0) = any_l ()
    | & _39 : borrowed (t_Vec'0) = any_l ()
    | & _43 : () = any_l ()
    | & _44 : borrowed (t_Vec'0) = any_l ()
    | & old_4_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & old_11_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:heap_sort ensures #0] [%#sheapsort_generic21] sorted'0 (deep_model'1 v.final)}
      {[@expl:heap_sort ensures #1] [%#sheapsort_generic22] permutation_of'0 (view'2 v.final) (view'0 v)}
      (! return' {result}) ]
    
end
