
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module ProjectionToggle_ProjToggle_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  val proj_toggle [#"../projection_toggle.rs" 5 0 5 87] (toggle : bool) (a : borrowed t) (b : borrowed t) : borrowed t
    requires {[#"../projection_toggle.rs" 5 47 5 48] Inv0.inv a}
    requires {[#"../projection_toggle.rs" 5 61 5 62] Inv0.inv b}
    ensures { [#"../projection_toggle.rs" 4 0 4 82] if toggle then
      result = a /\  ^ b =  * b
    else
      result = b /\  ^ a =  * a
     }
    ensures { [#"../projection_toggle.rs" 5 78 5 87] Inv0.inv result }
    
end
module ProjectionToggle_ProjToggle
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = t
  let rec cfg proj_toggle [#"../projection_toggle.rs" 5 0 5 87] [@cfg:stackify] [@cfg:subregion_analysis] (toggle : bool) (a : borrowed t) (b : borrowed t) : borrowed t
    requires {[#"../projection_toggle.rs" 5 47 5 48] Inv0.inv a}
    requires {[#"../projection_toggle.rs" 5 61 5 62] Inv0.inv b}
    ensures { [#"../projection_toggle.rs" 4 0 4 82] if toggle then
      result = a /\  ^ b =  * b
    else
      result = b /\  ^ a =  * a
     }
    ensures { [#"../projection_toggle.rs" 5 78 5 87] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed t;
  var toggle : bool = toggle;
  var a : borrowed t = a;
  var b : borrowed t = b;
  var _4 : borrowed t;
  var _6 : borrowed t;
  var _8 : borrowed t;
  {
    goto BB0
  }
  BB0 {
    switch (toggle)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv b };
    assume { Resolve0.resolve b };
    _8 <- Borrow.borrow_mut ( * a);
    a <- { a with current = ( ^ _8) };
    assume { Inv1.inv ( ^ _8) };
    _6 <- Borrow.borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _6) };
    assume { Inv1.inv ( ^ _6) };
    assert { [@expl:type invariant] Inv0.inv _8 };
    assume { Resolve0.resolve _8 };
    goto BB3
  }
  BB2 {
    assert { [@expl:type invariant] Inv0.inv a };
    assume { Resolve0.resolve a };
    _6 <- Borrow.borrow_mut ( * b);
    b <- { b with current = ( ^ _6) };
    assume { Inv1.inv ( ^ _6) };
    goto BB3
  }
  BB3 {
    _4 <- Borrow.borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _4) };
    assume { Inv1.inv ( ^ _4) };
    _0 <- Borrow.borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _0) };
    assume { Inv1.inv ( ^ _0) };
    assert { [@expl:type invariant] Inv0.inv _6 };
    assume { Resolve0.resolve _6 };
    assert { [@expl:type invariant] Inv0.inv _4 };
    assume { Resolve0.resolve _4 };
    assert { [@expl:type invariant] Inv0.inv b };
    assume { Resolve0.resolve b };
    assert { [@expl:type invariant] Inv0.inv a };
    assume { Resolve0.resolve a };
    return _0
  }
  
end
module ProjectionToggle_F_Interface
  val f [#"../projection_toggle.rs" 13 0 13 10] (_1 : ()) : ()
end
module ProjectionToggle_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed int32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed int32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  clone ProjectionToggle_ProjToggle_Interface as ProjToggle0 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv
  let rec cfg f [#"../projection_toggle.rs" 13 0 13 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : int32;
  var x : borrowed int32;
  var _4 : borrowed int32;
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  var _7 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../projection_toggle.rs" 14 16 14 18] (10 : int32));
    b <- ([#"../projection_toggle.rs" 15 16 15 17] (5 : int32));
    _5 <- Borrow.borrow_mut a;
    a <-  ^ _5;
    _4 <- Borrow.borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _7 <- Borrow.borrow_mut b;
    b <-  ^ _7;
    _6 <- Borrow.borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    x <- ([#"../projection_toggle.rs" 17 12 17 45] ProjToggle0.proj_toggle ([#"../projection_toggle.rs" 17 24 17 28] true) _4 _6);
    _4 <- any borrowed int32;
    _6 <- any borrowed int32;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _7 };
    assume { Resolve0.resolve _5 };
    x <- { x with current = ([#"../projection_toggle.rs" 19 4 19 11]  * x + ([#"../projection_toggle.rs" 19 10 19 11] (5 : int32))) };
    assume { Resolve0.resolve x };
    switch (not ([#"../projection_toggle.rs" 20 12 20 19] a = ([#"../projection_toggle.rs" 20 17 20 19] (15 : int32))))
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- ();
    return _0
  }
  
end
