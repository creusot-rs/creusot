
module ProjectionToggle_ProjToggle
  type t
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  use prelude.Borrow
  predicate invariant0 (self : borrowed t)
  val invariant0 (self : borrowed t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed t)
  val inv0 (_x : borrowed t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed t . inv0 x = true
  predicate resolve0 (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg proj_toggle [#"../projection_toggle.rs" 5 0 5 87] [@cfg:stackify] [@cfg:subregion_analysis] (toggle : bool) (a : borrowed t) (b : borrowed t) : borrowed t
    requires {[#"../projection_toggle.rs" 5 47 5 48] inv0 a}
    requires {[#"../projection_toggle.rs" 5 61 5 62] inv0 b}
    ensures { [#"../projection_toggle.rs" 4 0 4 82] if toggle then
      result = a /\  ^ b =  * b
    else
      result = b /\  ^ a =  * a
     }
    ensures { [#"../projection_toggle.rs" 5 78 5 87] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed t;
  var toggle : bool = toggle;
  var a : borrowed t = a;
  var b : borrowed t = b;
  var _4 : borrowed t;
  var _6 : borrowed t;
  var _8 : borrowed t;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../projection_toggle.rs" 6 7 6 13] toggle)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assert { [@expl:type invariant] inv0 b };
    assume { resolve0 b };
    [#"../projection_toggle.rs" 7 8 7 9] _8 <- Borrow.borrow_mut ( * a);
    [#"../projection_toggle.rs" 7 8 7 9] a <- { a with current =  ^ _8 };
    assume { inv1 ( ^ _8) };
    [#"../projection_toggle.rs" 7 8 7 9] _6 <- Borrow.borrow_mut ( * _8);
    [#"../projection_toggle.rs" 7 8 7 9] _8 <- { _8 with current =  ^ _6 };
    assume { inv1 ( ^ _6) };
    assert { [@expl:type invariant] inv0 _8 };
    assume { resolve0 _8 };
    goto BB3
  }
  BB2 {
    assert { [@expl:type invariant] inv0 a };
    assume { resolve0 a };
    [#"../projection_toggle.rs" 9 8 9 9] _6 <- Borrow.borrow_mut ( * b);
    [#"../projection_toggle.rs" 9 8 9 9] b <- { b with current =  ^ _6 };
    assume { inv1 ( ^ _6) };
    goto BB3
  }
  BB3 {
    [#"../projection_toggle.rs" 6 4 10 5] _4 <- Borrow.borrow_mut ( * _6);
    [#"../projection_toggle.rs" 6 4 10 5] _6 <- { _6 with current =  ^ _4 };
    assume { inv1 ( ^ _4) };
    [#"../projection_toggle.rs" 6 4 10 5] _0 <- Borrow.borrow_mut ( * _4);
    [#"../projection_toggle.rs" 6 4 10 5] _4 <- { _4 with current =  ^ _0 };
    assume { inv1 ( ^ _0) };
    assert { [@expl:type invariant] inv0 _6 };
    assume { resolve0 _6 };
    assert { [@expl:type invariant] inv0 _4 };
    assume { resolve0 _4 };
    assert { [@expl:type invariant] inv0 b };
    assume { resolve0 b };
    assert { [@expl:type invariant] inv0 a };
    assume { resolve0 a };
    return _0
  }
  
end
module ProjectionToggle_F
  use prelude.Int32
  use prelude.Borrow
  predicate invariant0 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : borrowed int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : borrowed int32)
  val inv0 (_x : borrowed int32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : borrowed int32 . inv0 x = true
  predicate resolve0 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed int32) : bool
    ensures { result = resolve0 self }
    
  val proj_toggle0 [#"../projection_toggle.rs" 5 0 5 87] (toggle : bool) (a : borrowed int32) (b : borrowed int32) : borrowed int32
    requires {[#"../projection_toggle.rs" 5 47 5 48] inv0 a}
    requires {[#"../projection_toggle.rs" 5 61 5 62] inv0 b}
    ensures { [#"../projection_toggle.rs" 4 0 4 82] if toggle then
      result = a /\  ^ b =  * b
    else
      result = b /\  ^ a =  * a
     }
    ensures { [#"../projection_toggle.rs" 5 78 5 87] inv0 result }
    
  use prelude.Int
  let rec cfg f [#"../projection_toggle.rs" 13 0 13 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : int32;
  var x : borrowed int32;
  var _4 : borrowed int32;
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  var _7 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    [#"../projection_toggle.rs" 14 16 14 18] a <- ([#"../projection_toggle.rs" 14 16 14 18] [#"../projection_toggle.rs" 14 16 14 18] (10 : int32));
    [#"../projection_toggle.rs" 15 16 15 17] b <- ([#"../projection_toggle.rs" 15 16 15 17] [#"../projection_toggle.rs" 15 16 15 17] (5 : int32));
    [#"../projection_toggle.rs" 17 30 17 36] _5 <- Borrow.borrow_mut a;
    [#"../projection_toggle.rs" 17 30 17 36] a <-  ^ _5;
    [#"../projection_toggle.rs" 17 30 17 36] _4 <- Borrow.borrow_mut ( * _5);
    [#"../projection_toggle.rs" 17 30 17 36] _5 <- { _5 with current =  ^ _4 };
    [#"../projection_toggle.rs" 17 38 17 44] _7 <- Borrow.borrow_mut b;
    [#"../projection_toggle.rs" 17 38 17 44] b <-  ^ _7;
    [#"../projection_toggle.rs" 17 38 17 44] _6 <- Borrow.borrow_mut ( * _7);
    [#"../projection_toggle.rs" 17 38 17 44] _7 <- { _7 with current =  ^ _6 };
    [#"../projection_toggle.rs" 17 12 17 45] x <- ([#"../projection_toggle.rs" 17 12 17 45] proj_toggle0 ([#"../projection_toggle.rs" 17 24 17 28] [#"../projection_toggle.rs" 17 24 17 28] true) _4 _6);
    _4 <- any borrowed int32;
    _6 <- any borrowed int32;
    goto BB1
  }
  BB1 {
    assume { resolve0 _7 };
    assume { resolve0 _5 };
    [#"../projection_toggle.rs" 19 4 19 11] x <- { x with current = ([#"../projection_toggle.rs" 19 4 19 11]  * x + ([#"../projection_toggle.rs" 19 10 19 11] [#"../projection_toggle.rs" 19 10 19 11] (5 : int32))) };
    assume { resolve0 x };
    switch ([#"../projection_toggle.rs" 20 4 20 20] not ([#"../projection_toggle.rs" 20 12 20 19] ([#"../projection_toggle.rs" 20 12 20 13] a) = ([#"../projection_toggle.rs" 20 17 20 19] [#"../projection_toggle.rs" 20 17 20 19] (15 : int32))))
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    assert { [#"../projection_toggle.rs" 20 4 20 20] false };
    absurd
  }
  BB3 {
    [#"../projection_toggle.rs" 13 11 21 1] _0 <- ([#"../projection_toggle.rs" 13 11 21 1] ());
    return _0
  }
  
end
