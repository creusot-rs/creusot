
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module MutCall_Kill_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  val kill [@cfg:stackify] [#"../mut_call.rs" 3 0 3 20] (_1' : borrowed uint32) : ()
end
module MutCall_Kill
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg kill [@cfg:stackify] [#"../mut_call.rs" 3 0 3 20] (_1' : borrowed uint32) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed uint32;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve _1 };
    return _0
  }
  
end
module MutCall_Test_Interface
  val test [@cfg:stackify] [#"../mut_call.rs" 4 0 4 13] (_1' : ()) : ()
end
module MutCall_Test
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  clone MutCall_Kill_Interface as Kill0
  let rec cfg test [@cfg:stackify] [#"../mut_call.rs" 4 0 4 13] (_1' : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : uint32;
  var _2 : ();
  var _3 : borrowed uint32;
  var _4 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../mut_call.rs" 5 16 5 18] (10 : uint32));
    _4 <- borrow_mut a_1;
    a_1 <-  ^ _4;
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    _2 <- ([#"../mut_call.rs" 6 4 6 16] Kill0.kill _3);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _0 <- ();
    return _0
  }
  
end
