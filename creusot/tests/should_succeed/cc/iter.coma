module M_iter__test_mut_ref [#"iter.rs" 3 0 3 21]
  let%span siter0 = "iter.rs" 4 17 4 18
  let%span siter1 = "iter.rs" 4 20 4 21
  let%span sslice2 = "../../../../creusot-contracts/src/std/slice.rs" 245 0 354 1
  let%span siter3 = "../../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span siter4 = "iter.rs" 5 38 5 39
  let%span soption5 = "../../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span siter6 = "iter.rs" 6 38 6 39
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 398 20 398 61
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 405 12 405 66
  let%span sresolve9 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel10 = "../../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice11 = "../../../../creusot-contracts/src/std/slice.rs" 411 14 411 45
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 409 4 409 10
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 416 15 416 32
  let%span sslice14 = "../../../../creusot-contracts/src/std/slice.rs" 417 15 417 32
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 418 14 418 42
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 414 4 414 10
  let%span smodel17 = "../../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice18 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice19 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span sslice20 = "../../../../creusot-contracts/src/std/slice.rs" 96 14 96 41
  let%span sslice21 = "../../../../creusot-contracts/src/std/slice.rs" 97 14 97 80
  let%span soption22 = "../../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span smodel23 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex24 = "../../../../creusot-contracts/src/logic/ops/index.rs" 49 8 49 31
  let%span snum25 = "../../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted3__test_mut_ref'0 (return'  (ret:array int32))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#siter0] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#siter1] (2 : int32)) /\ Seq.length __arr_temp.elts = 2}-
           [ &_1 <- __arr_temp ] 
          s1) ]
        
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : array int32 = any_l () | & _1 : array int32 = any_l () ] 
    [ return' (result:array int32)-> return' {result} ]
    
  
  predicate inv'0 (_1 : slice int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : slice int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: opaque_ptr; t_Iter__qy95zmarker'0: () }
  
  function view'0 (self : t_Iter'0) : slice int32
  
  let rec iter'0 (self:slice int32) (return'  (ret:t_Iter'0))= {[@expl:iter 'self' type invariant] inv'0 self}
    any [ return' (result:t_Iter'0)-> {[%#sslice2] view'0 result = self} (! return' {result}) ] 
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Slice
  
  function view'2 (self : slice int32) : Seq.seq int32
  
  axiom view'2_spec : forall self : slice int32 . ([%#sslice18] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize))
  && ([%#sslice19] view'2 self = Slice.id self)
  
  function view'3 (self : slice int32) : Seq.seq int32 =
    [%#smodel23] view'2 self
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice int32) (ix : int) : int32 =
    [%#sindex24] Seq.get (view'2 self) ix
  
  function to_ref_seq'0 (self : slice int32) : Seq.seq int32
  
  axiom to_ref_seq'0_spec : forall self : slice int32 . ([%#sslice20] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'3 self))
  && ([%#sslice21] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Iter'0) (visited : Seq.seq int32) (tl : t_Iter'0) =
    [%#sslice8] to_ref_seq'0 (view'0 self) = Seq.(++) visited (to_ref_seq'0 (view'0 tl))
  
  function produces_trans'0 (a : t_Iter'0) (ab : Seq.seq int32) (b : t_Iter'0) (bc : Seq.seq int32) (c : t_Iter'0) : ()
   =
    [%#sslice16] ()
  
  axiom produces_trans'0_spec : forall a : t_Iter'0, ab : Seq.seq int32, b : t_Iter'0, bc : Seq.seq int32, c : t_Iter'0 . ([%#sslice13] produces'0 a ab b)
   -> ([%#sslice14] produces'0 b bc c)  -> ([%#sslice15] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Iter'0) : () =
    [%#sslice12] ()
  
  axiom produces_refl'0_spec : forall self : t_Iter'0 . [%#sslice11] produces'0 self (Seq.empty  : Seq.seq int32) self
  
  predicate resolve'1 (self : borrowed (t_Iter'0)) =
    [%#sresolve9] self.final = self.current
  
  function view'1 (self : borrowed (t_Iter'0)) : slice int32 =
    [%#smodel17] view'0 self.current
  
  use seq.Seq
  
  predicate completed'0 (self : borrowed (t_Iter'0)) =
    [%#sslice7] resolve'1 self /\ view'2 (view'1 self) = (Seq.empty  : Seq.seq int32)
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Iter'0)) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#siter3] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Iter'0)) =
    resolve'1 _1
  
  let rec promoted2__test_mut_ref'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'0 ([%#siter4] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'3 (self : int32) : int =
    [%#snum25] Int32.to_int self
  
  function deep_model'2 (self : int32) : int =
    [%#smodel10] deep_model'3 self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption22] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel10] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption5] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec promoted1__test_mut_ref'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'0 ([%#siter6] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted0__test_mut_ref'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  type t_AssertKind'0  =
    | C_Eq'0
    | C_Ne'0
    | C_Match'0
  
  meta "compute_max_steps" 1000000
  
  let rec test_mut_ref'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted3__test_mut_ref'0 (fun (pr3:array int32) ->  [ &_78 <- pr3 ] s1)
      | s1 = iter'0 {_78} (fun (_ret':t_Iter'0) ->  [ &a <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':borrowed (t_Iter'0)) ->  [ &_10 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <t_Iter'0> {_10.current} {Borrow.get_id _10}
          (fun (_ret':borrowed (t_Iter'0)) ->  [ &_9 <- _ret' ]  [ &_10 <- { _10 with current = _ret'.final } ] s2)
      | s2 = next'0 {_9} (fun (_ret':t_Option'0) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _10}- s1
      | s1 = promoted2__test_mut_ref'0 (fun (pr2:t_Option'0) ->  [ &_77 <- pr2 ] s2)
      | s2 =  [ &_6 <- (_8, _77) ] s3
      | s3 =  [ &left_val <- let (r'0, _) = _6 in r'0 ] s4
      | s4 =  [ &right_val <- let (_, r'1) = _6 in r'1 ] s5
      | s5 = eq'0 {left_val} {right_val} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s6)
      | s6 = bb3 ]
      
    | bb3 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb4) ] 
    | bb4 = s0
      [ s0 = Borrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':borrowed (t_Iter'0)) ->  [ &_34 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <t_Iter'0> {_34.current} {Borrow.get_id _34}
          (fun (_ret':borrowed (t_Iter'0)) ->  [ &_33 <- _ret' ]  [ &_34 <- { _34 with current = _ret'.final } ] s2)
      | s2 = next'0 {_33} (fun (_ret':t_Option'0) ->  [ &_32 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _34}- s1
      | s1 = promoted1__test_mut_ref'0 (fun (pr1:t_Option'0) ->  [ &_76 <- pr1 ] s2)
      | s2 =  [ &_30 <- (_32, _76) ] s3
      | s3 =  [ &left_val1 <- let (r'0, _) = _30 in r'0 ] s4
      | s4 =  [ &right_val1 <- let (_, r'1) = _30 in r'1 ] s5
      | s5 = eq'0 {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_41 <- _ret' ] s6)
      | s6 = bb7 ]
      
    | bb7 = any [ br0 -> {_41 = false} (! bb9) | br1 -> {_41} (! bb8) ] 
    | bb8 = s0
      [ s0 = Borrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':borrowed (t_Iter'0)) ->  [ &_58 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = Borrow.borrow_final <t_Iter'0> {_58.current} {Borrow.get_id _58}
          (fun (_ret':borrowed (t_Iter'0)) ->  [ &_57 <- _ret' ]  [ &_58 <- { _58 with current = _ret'.final } ] s2)
      | s2 = next'0 {_57} (fun (_ret':t_Option'0) ->  [ &_56 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = -{resolve'0 _58}- s1
      | s1 = promoted0__test_mut_ref'0 (fun (pr0:t_Option'0) ->  [ &_75 <- pr0 ] s2)
      | s2 =  [ &_54 <- (_56, _75) ] s3
      | s3 =  [ &left_val2 <- let (r'0, _) = _54 in r'0 ] s4
      | s4 =  [ &right_val2 <- let (_, r'1) = _54 in r'1 ] s5
      | s5 = eq'0 {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_63 <- _ret' ] s6)
      | s6 = bb11 ]
      
    | bb11 = any [ br0 -> {_63 = false} (! bb13) | br1 -> {_63} (! bb12) ] 
    | bb12 = return' {_0}
    | bb13 = s0
      [ s0 =  [ &kind2 <- C_Eq'0 ] s1
      | s1 =  [ &_71 <- left_val2 ] s2
      | s2 =  [ &_73 <- right_val2 ] s3
      | s3 = {false} any ]
      
    | bb9 = s0
      [ s0 =  [ &kind1 <- C_Eq'0 ] s1
      | s1 =  [ &_49 <- left_val1 ] s2
      | s2 =  [ &_51 <- right_val1 ] s3
      | s3 = {false} any ]
      
    | bb5 = s0
      [ s0 =  [ &kind <- C_Eq'0 ] s1
      | s1 =  [ &_25 <- left_val ] s2
      | s2 =  [ &_27 <- right_val ] s3
      | s3 = {false} any ]
       ]
    )
    [ & _0 : () = any_l ()
    | & a : t_Iter'0 = any_l ()
    | & _6 : (t_Option'0, t_Option'0) = any_l ()
    | & _8 : t_Option'0 = any_l ()
    | & _9 : borrowed (t_Iter'0) = any_l ()
    | & _10 : borrowed (t_Iter'0) = any_l ()
    | & left_val : t_Option'0 = any_l ()
    | & right_val : t_Option'0 = any_l ()
    | & _17 : bool = any_l ()
    | & kind : t_AssertKind'0 = any_l ()
    | & _25 : t_Option'0 = any_l ()
    | & _27 : t_Option'0 = any_l ()
    | & _30 : (t_Option'0, t_Option'0) = any_l ()
    | & _32 : t_Option'0 = any_l ()
    | & _33 : borrowed (t_Iter'0) = any_l ()
    | & _34 : borrowed (t_Iter'0) = any_l ()
    | & left_val1 : t_Option'0 = any_l ()
    | & right_val1 : t_Option'0 = any_l ()
    | & _41 : bool = any_l ()
    | & kind1 : t_AssertKind'0 = any_l ()
    | & _49 : t_Option'0 = any_l ()
    | & _51 : t_Option'0 = any_l ()
    | & _54 : (t_Option'0, t_Option'0) = any_l ()
    | & _56 : t_Option'0 = any_l ()
    | & _57 : borrowed (t_Iter'0) = any_l ()
    | & _58 : borrowed (t_Iter'0) = any_l ()
    | & left_val2 : t_Option'0 = any_l ()
    | & right_val2 : t_Option'0 = any_l ()
    | & _63 : bool = any_l ()
    | & kind2 : t_AssertKind'0 = any_l ()
    | & _71 : t_Option'0 = any_l ()
    | & _73 : t_Option'0 = any_l ()
    | & _75 : t_Option'0 = any_l ()
    | & _76 : t_Option'0 = any_l ()
    | & _77 : t_Option'0 = any_l ()
    | & _78 : array int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
