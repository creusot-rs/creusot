module M_linked_list__qyi14323471455460008969__new [#"linked_list.rs" 72 4 72 27] (* List<T> *)
  let%span slinked_list0 = "linked_list.rs" 73 22 73 38
  let%span slinked_list1 = "linked_list.rs" 73 46 73 62
  let%span slinked_list2 = "linked_list.rs" 73 69 73 79
  let%span slinked_list3 = "linked_list.rs" 72 20 72 27
  let%span slinked_list4 = "linked_list.rs" 71 14 71 35
  let%span sptr5 = "../../../creusot-contracts/src/std/ptr.rs" 121 22 121 44
  let%span sseq6 = "../../../creusot-contracts/src/logic/seq.rs" 431 4 431 34
  let%span sseq7 = "../../../creusot-contracts/src/logic/seq.rs" 429 14 429 36
  let%span slinked_list8 = "linked_list.rs" 48 12 48 74
  let%span sptr9 = "../../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr10 = "../../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span sghost11 = "../../../creusot-contracts/src/ghost.rs" 217 9 217 15
  let%span slinked_list12 = "linked_list.rs" 67 4 67 41
  let%span slinked_list13 = "linked_list.rs" 26 12 36 69
  let%span sboxed14 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq15 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sptr_own16 = "../../../creusot-contracts/src/ptr_own.rs" 44 20 44 66
  
  use prelude.prelude.Opaque
  
  use prelude.prelude.Int
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function is_null_logic'0 (self : opaque_ptr) : bool =
    [%#sptr10] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : opaque_ptr . [%#sptr9] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  let rec null'0 (_1:()) (return'  (ret:opaque_ptr))= any
    [ return' (result:opaque_ptr)-> {[%#sptr5] is_null_logic'0 result} (! return' {result}) ]
    
  
  type t_PtrOwn'0
  
  use seq.Seq
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: Seq.seq (t_PtrOwn'0) }
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  function ptr'0 (self : t_PtrOwn'0) : opaque_ptr
  
  type t_T'0
  
  type t_Cell'0  =
    { t_Cell__v'0: t_T'0; t_Cell__next'0: opaque_ptr }
  
  function val'0 (self : t_PtrOwn'0) : t_Cell'0
  
  predicate inv'8 (_1 : t_T'0)
  
  predicate inv'7 (_1 : t_Cell'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Cell'0 [inv'7 x] . inv'7 x
  = match x with
    | {t_Cell__v'0 = v ; t_Cell__next'0 = next} -> inv'8 v
    end
  
  predicate invariant'5 (self : t_Cell'0) =
    [%#sboxed14] inv'7 self
  
  predicate inv'6 (_1 : t_Cell'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Cell'0 [inv'6 x] . inv'6 x = invariant'5 x
  
  predicate invariant'4 (self : t_PtrOwn'0) =
    [%#sptr_own16] not is_null_logic'0 (ptr'0 self) /\ inv'6 (val'0 self)
  
  predicate inv'5 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_PtrOwn'0 [inv'5 x] . inv'5 x = invariant'4 x
  
  predicate invariant'3 (self : t_PtrOwn'0) =
    [%#sboxed14] inv'5 self
  
  predicate inv'4 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_PtrOwn'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sseq15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sboxed14] inv'3 self
  
  predicate inv'2 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_GhostBox__0'0 = a_0} -> inv'2 a_0
    end
  
  function inner_logic'0 (self : t_GhostBox'0) : Seq.seq (t_PtrOwn'0) =
    [%#sghost11] self.t_GhostBox__0'0
  
  use seq.Seq
  
  let rec new'1 (_1:()) (return'  (ret:t_GhostBox'0))= any
    [ return' (result:t_GhostBox'0)-> {[%#sseq6] inv'1 result}
      {[%#sseq7] inner_logic'0 result = (Seq.empty  : Seq.seq (t_PtrOwn'0))}
      (! return' {result}) ]
    
  
  type t_List'0  =
    { t_List__first'0: opaque_ptr; t_List__last'0: opaque_ptr; t_List__seq'0: t_GhostBox'0 }
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate invariant'0 [#"linked_list.rs" 24 4 24 30] (self : t_List'0) =
    [%#slinked_list13] inner_logic'0 self.t_List__seq'0 = (Seq.empty  : Seq.seq (t_PtrOwn'0))
    /\ is_null_logic'0 self.t_List__first'0 /\ is_null_logic'0 self.t_List__last'0
    \/ Seq.length (inner_logic'0 self.t_List__seq'0) > 0
    /\ self.t_List__first'0 = ptr'0 (Seq.get (inner_logic'0 self.t_List__seq'0) 0)
    /\ self.t_List__last'0
    = ptr'0 (Seq.get (inner_logic'0 self.t_List__seq'0) (Seq.length (inner_logic'0 self.t_List__seq'0) - 1))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (inner_logic'0 self.t_List__seq'0) - 1
     -> (val'0 (Seq.get (inner_logic'0 self.t_List__seq'0) i)).t_Cell__next'0
    = ptr'0 (Seq.get (inner_logic'0 self.t_List__seq'0) (i + 1)))
    /\ is_null_logic'0 (val'0 (Seq.get (inner_logic'0 self.t_List__seq'0) (Seq.length (inner_logic'0 self.t_List__seq'0)
    - 1))).t_Cell__next'0
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_List__first'0 = first ; t_List__last'0 = last ; t_List__seq'0 = seq} -> inv'1 seq
    end)
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use map.Map
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function seq_map'0 [#"linked_list.rs" 66 0 66 66] (s : Seq.seq (t_PtrOwn'0)) (f : Map.map (t_PtrOwn'0) t_T'0) : Seq.seq t_T'0
    
   =
    [%#slinked_list12] Seq.create (Seq.length s) (Mapping.from_fn (fun (i : int) -> Map.get f (Seq.get s i)))
  
  function view'0 [#"linked_list.rs" 46 4 46 33] (self : t_List'0) : Seq.seq t_T'0 =
    [%#slinked_list8] seq_map'0 (inner_logic'0 self.t_List__seq'0) (Mapping.from_fn (fun (ptr_own : t_PtrOwn'0) -> (val'0 ptr_own).t_Cell__v'0))
  
  use seq.Seq
  
  meta "compute_max_steps" 1000000
  
  let rec new'0 (_1:()) (return'  (ret:t_List'0))= (! bb0
    [ bb0 = s0 [ s0 = null'0 {[%#slinked_list0] ()} (fun (_ret':opaque_ptr) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = null'0 {[%#slinked_list1] ()} (fun (_ret':opaque_ptr) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'1 {[%#slinked_list2] ()} (fun (_ret':t_GhostBox'0) ->  [ &_4 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &_0 <- { t_List__first'0 = _2; t_List__last'0 = _3; t_List__seq'0 = _4 } ] s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    )
    [ & _0 : t_List'0 = any_l ()
    | & _2 : opaque_ptr = any_l ()
    | & _3 : opaque_ptr = any_l ()
    | & _4 : t_GhostBox'0 = any_l () ]
    
    [ return' (result:t_List'0)-> {[@expl:new result type invariant] [%#slinked_list3] inv'0 result}
      {[@expl:new ensures] [%#slinked_list4] view'0 result = (Seq.empty  : Seq.seq t_T'0)}
      (! return' {result}) ]
    
end
module M_linked_list__qyi14323471455460008969__push_back [#"linked_list.rs" 77 4 77 37] (* List<T> *)
  let%span slinked_list0 = "linked_list.rs" 78 47 78 63
  let%span slinked_list1 = "linked_list.rs" 77 26 77 30
  let%span slinked_list2 = "linked_list.rs" 77 32 77 33
  let%span slinked_list3 = "linked_list.rs" 76 14 76 47
  let%span sptr4 = "../../../creusot-contracts/src/std/ptr.rs" 121 22 121 44
  let%span sptr_own5 = "../../../creusot-contracts/src/ptr_own.rs" 61 20 61 23
  let%span sptr_own6 = "../../../creusot-contracts/src/ptr_own.rs" 61 4 61 68
  let%span sptr_own7 = "../../../creusot-contracts/src/ptr_own.rs" 60 14 60 67
  let%span sptr8 = "../../../creusot-contracts/src/std/ptr.rs" 107 18 107 48
  let%span sghost9 = "../../../creusot-contracts/src/ghost.rs" 138 27 138 31
  let%span sghost10 = "../../../creusot-contracts/src/ghost.rs" 138 4 138 52
  let%span sghost11 = "../../../creusot-contracts/src/ghost.rs" 137 14 137 39
  let%span slinked_list12 = "linked_list.rs" 89 16 92 17
  let%span sptr_own13 = "../../../creusot-contracts/src/ptr_own.rs" 83 34 83 37
  let%span sptr_own14 = "../../../creusot-contracts/src/ptr_own.rs" 78 15 78 31
  let%span sptr_own15 = "../../../creusot-contracts/src/ptr_own.rs" 83 4 83 74
  let%span sptr_own16 = "../../../creusot-contracts/src/ptr_own.rs" 79 14 79 35
  let%span sptr_own17 = "../../../creusot-contracts/src/ptr_own.rs" 81 14 81 53
  let%span sptr_own18 = "../../../creusot-contracts/src/ptr_own.rs" 82 14 82 52
  let%span slinked_list19 = "linked_list.rs" 48 12 48 74
  let%span sptr20 = "../../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr21 = "../../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span sghost22 = "../../../creusot-contracts/src/ghost.rs" 217 9 217 15
  let%span sghost23 = "../../../creusot-contracts/src/ghost.rs" 85 22 85 26
  let%span sghost24 = "../../../creusot-contracts/src/ghost.rs" 85 4 85 48
  let%span sghost25 = "../../../creusot-contracts/src/ghost.rs" 84 14 84 36
  let%span sghost26 = "../../../creusot-contracts/src/ghost.rs" 199 22 199 26
  let%span sghost27 = "../../../creusot-contracts/src/ghost.rs" 199 4 199 32
  let%span sghost28 = "../../../creusot-contracts/src/ghost.rs" 197 14 197 31
  let%span sseq29 = "../../../creusot-contracts/src/logic/seq.rs" 498 32 498 36
  let%span sseq30 = "../../../creusot-contracts/src/logic/seq.rs" 498 38 498 39
  let%span sseq31 = "../../../creusot-contracts/src/logic/seq.rs" 497 14 497 40
  let%span sghost32 = "../../../creusot-contracts/src/ghost.rs" 181 15 181 16
  let%span sghost33 = "../../../creusot-contracts/src/ghost.rs" 181 4 181 28
  let%span sghost34 = "../../../creusot-contracts/src/ghost.rs" 179 14 179 28
  let%span sghost35 = "../../../creusot-contracts/src/ghost.rs" 110 8 110 24
  let%span sresolve36 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sghost37 = "../../../creusot-contracts/src/ghost.rs" 69 14 69 18
  let%span sghost38 = "../../../creusot-contracts/src/ghost.rs" 69 4 69 36
  let%span sghost39 = "../../../creusot-contracts/src/ghost.rs" 68 14 68 35
  let%span sseq40 = "../../../creusot-contracts/src/logic/seq.rs" 455 22 455 26
  let%span sseq41 = "../../../creusot-contracts/src/logic/seq.rs" 454 14 454 34
  let%span slinked_list42 = "linked_list.rs" 56 10 56 25
  let%span sseq43 = "../../../creusot-contracts/src/logic/seq.rs" 557 30 557 34
  let%span sseq44 = "../../../creusot-contracts/src/logic/seq.rs" 557 4 557 65
  let%span sseq45 = "../../../creusot-contracts/src/logic/seq.rs" 551 14 554 5
  let%span sseq46 = "../../../creusot-contracts/src/logic/seq.rs" 555 14 555 84
  let%span sseq47 = "../../../creusot-contracts/src/logic/seq.rs" 556 14 556 44
  let%span soption48 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span slinked_list49 = "linked_list.rs" 67 4 67 41
  let%span sinvariant50 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq51 = "../../../creusot-contracts/src/logic/seq.rs" 80 4 80 12
  let%span sboxed52 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sseq53 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sresolve54 = "../../../creusot-contracts/src/resolve.rs" 68 8 68 23
  let%span sptr_own55 = "../../../creusot-contracts/src/ptr_own.rs" 44 20 44 66
  let%span sinvariant56 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span slinked_list57 = "linked_list.rs" 26 12 36 69
  
  use prelude.prelude.Opaque
  
  use prelude.prelude.Int
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function is_null_logic'0 (self : opaque_ptr) : bool =
    [%#sptr21] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : opaque_ptr . [%#sptr20] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  let rec null'0 (_1:()) (return'  (ret:opaque_ptr))= any
    [ return' (result:opaque_ptr)-> {[%#sptr4] is_null_logic'0 result} (! return' {result}) ]
    
  
  type t_T'0
  
  type t_Cell'0  =
    { t_Cell__v'0: t_T'0; t_Cell__next'0: opaque_ptr }
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate inv'29 (_1 : t_Cell'0)
  
  axiom inv_axiom'28 [@rewrite] : forall x : t_Cell'0 [inv'29 x] . inv'29 x
  = match x with
    | {t_Cell__v'0 = v ; t_Cell__next'0 = next} -> inv'5 v
    end
  
  predicate invariant'2 (self : t_Cell'0) =
    [%#sboxed52] inv'29 self
  
  predicate inv'6 (_1 : t_Cell'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Cell'0 [inv'6 x] . inv'6 x = invariant'2 x
  
  type t_PtrOwn'0
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: t_PtrOwn'0 }
  
  use prelude.prelude.Borrow
  
  function ptr'0 (self : t_PtrOwn'0) : opaque_ptr
  
  function val'0 (self : t_PtrOwn'0) : t_Cell'0
  
  predicate invariant'7 (self : t_PtrOwn'0) =
    [%#sptr_own55] not is_null_logic'0 (ptr'0 self) /\ inv'6 (val'0 self)
  
  predicate inv'13 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_PtrOwn'0 [inv'13 x] . inv'13 x = invariant'7 x
  
  predicate invariant'12 (self : t_PtrOwn'0) =
    [%#sboxed52] inv'13 self
  
  predicate inv'22 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'21 [@rewrite] : forall x : t_PtrOwn'0 [inv'22 x] . inv'22 x = invariant'12 x
  
  predicate inv'3 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_GhostBox'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_GhostBox__0'0 = a_0} -> inv'22 a_0
    end
  
  predicate inv'7 (_1 : (opaque_ptr, t_GhostBox'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : (opaque_ptr, t_GhostBox'0) [inv'7 x] . inv'7 x
  = (let (x0, x1) = x in inv'3 x1)
  
  function inner_logic'0 (self : t_GhostBox'0) : t_PtrOwn'0 =
    [%#sghost22] self.t_GhostBox__0'0
  
  let rec from_box'0 (val':t_Cell'0) (return'  (ret:(opaque_ptr, t_GhostBox'0)))= {[@expl:from_box 'val' type invariant] [%#sptr_own5] inv'6 val'}
    any
    [ return' (result:(opaque_ptr, t_GhostBox'0))-> {[%#sptr_own6] inv'7 result}
      {[%#sptr_own7] ptr'0 (inner_logic'0 (let (_, a) = result in a)) = (let (a, _) = result in a)
      /\ val'0 (inner_logic'0 (let (_, a) = result in a)) = val'}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: Seq.seq (t_PtrOwn'0) }
  
  type t_List'0  =
    { t_List__first'0: opaque_ptr; t_List__last'0: opaque_ptr; t_List__seq'0: t_GhostBox'1 }
  
  let rec is_null'0 (self:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sptr8] result = is_null_logic'0 self} (! return' {result}) ]
    
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sseq53] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'22 (Seq.get self i)
  
  predicate inv'9 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'9 x] . inv'9 x = invariant'4 x
  
  predicate invariant'10 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sboxed52] inv'9 self
  
  predicate inv'18 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'17 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'18 x] . inv'18 x = invariant'10 x
  
  predicate inv'0 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'1 [inv'0 x] . inv'0 x
  = match x with
    | {t_GhostBox__0'1 = a_0} -> inv'18 a_0
    end
  
  predicate invariant'3 (self : borrowed (t_GhostBox'1)) =
    [%#sinvariant50] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'8 (_1 : borrowed (t_GhostBox'1))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (t_GhostBox'1) [inv'8 x] . inv'8 x = invariant'3 x
  
  type t_GhostBox'2  =
    { t_GhostBox__0'2: borrowed (Seq.seq (t_PtrOwn'0)) }
  
  predicate invariant'8 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sinvariant50] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'14 (_1 : borrowed (Seq.seq (t_PtrOwn'0)))
  
  axiom inv_axiom'13 [@rewrite] : forall x : borrowed (Seq.seq (t_PtrOwn'0)) [inv'14 x] . inv'14 x = invariant'8 x
  
  predicate invariant'11 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sboxed52] inv'14 self
  
  predicate inv'19 (_1 : borrowed (Seq.seq (t_PtrOwn'0)))
  
  axiom inv_axiom'18 [@rewrite] : forall x : borrowed (Seq.seq (t_PtrOwn'0)) [inv'19 x] . inv'19 x = invariant'11 x
  
  predicate inv'1 (_1 : t_GhostBox'2)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'2 [inv'1 x] . inv'1 x
  = match x with
    | {t_GhostBox__0'2 = a_0} -> inv'19 a_0
    end
  
  let rec borrow_mut'0 (self:borrowed (t_GhostBox'1)) (return'  (ret:t_GhostBox'2))= {[@expl:borrow_mut 'self' type invariant] [%#sghost9] inv'8 self}
    any
    [ return' (result:t_GhostBox'2)-> {[%#sghost10] inv'1 result}
      {[%#sghost11] result.t_GhostBox__0'2
      = Borrow.borrow_logic (self.current).t_GhostBox__0'1 (self.final).t_GhostBox__0'1 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  predicate invariant'6 (self : borrowed (t_GhostBox'2)) =
    [%#sinvariant50] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'11 (_1 : borrowed (t_GhostBox'2))
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed (t_GhostBox'2) [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate invariant'5 (self : borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) =
    [%#sinvariant50] inv'14 self.current /\ inv'14 self.final
  
  predicate inv'10 (_1 : borrowed (borrowed (Seq.seq (t_PtrOwn'0))))
  
  axiom inv_axiom'9 [@rewrite] : forall x : borrowed (borrowed (Seq.seq (t_PtrOwn'0))) [inv'10 x] . inv'10 x
  = invariant'5 x
  
  let rec deref_mut'0 (self:borrowed (t_GhostBox'2)) (return'  (ret:borrowed (borrowed (Seq.seq (t_PtrOwn'0)))))= {[@expl:deref_mut 'self' type invariant] [%#sghost23] inv'11 self}
    any
    [ return' (result:borrowed (borrowed (Seq.seq (t_PtrOwn'0))))-> {[%#sghost24] inv'10 result}
      {[%#sghost25] result
      = Borrow.borrow_logic (self.current).t_GhostBox__0'2 (self.final).t_GhostBox__0'2 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  let rec into_inner'0 (self:t_GhostBox'0) (return'  (ret:t_PtrOwn'0))= {[@expl:into_inner 'self' type invariant] [%#sghost26] inv'3 self}
    any
    [ return' (result:t_PtrOwn'0)-> {[%#sghost27] inv'13 result}
      {[%#sghost28] result = self.t_GhostBox__0'0}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  let rec push_back_ghost'0 (self:borrowed (Seq.seq (t_PtrOwn'0))) (x:t_PtrOwn'0) (return'  (ret:()))= {[@expl:push_back_ghost 'self' type invariant] [%#sseq29] inv'14 self}
    {[@expl:push_back_ghost 'x' type invariant] [%#sseq30] inv'13 x}
    any [ return' (result:())-> {[%#sseq31] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  predicate resolve'12 (self : borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) =
    resolve'12 _1
  
  predicate resolve'13 (self : borrowed (t_GhostBox'2)) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'5 (_1 : borrowed (t_GhostBox'2)) =
    resolve'13 _1
  
  predicate inv'20 (_1 : ())
  
  axiom inv_axiom'19 [@rewrite] : forall x : () [inv'20 x] . inv'20 x = true
  
  type t_GhostBox'3  =
    { t_GhostBox__0'3: () }
  
  predicate inv'21 (_1 : t_GhostBox'3)
  
  axiom inv_axiom'20 [@rewrite] : forall x : t_GhostBox'3 [inv'21 x] . inv'21 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'3))= {[@expl:new 'x' type invariant] [%#sghost32] inv'20 x}
    any
    [ return' (result:t_GhostBox'3)-> {[%#sghost33] inv'21 result}
      {[%#sghost34] result.t_GhostBox__0'3 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  type closure1'1  =
    { field_0'0: borrowed (t_GhostBox'2); field_1'0: t_GhostBox'0 }
  
  predicate inv'12 (_1 : closure1'1)
  
  axiom inv_axiom'11 [@rewrite] : forall x : closure1'1 [inv'12 x] . inv'12 x
  = (let {field_0'0 = x0 ; field_1'0 = x1} = x in inv'11 x0 /\ inv'3 x1)
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:t_GhostBox'3))= {[@expl:closure '_1' type invariant] inv'12 _1}
    bb0
    [ bb0 = s0
      [ s0 = {inv'1 (_1.field_0'0).current}
        Borrow.borrow_final <t_GhostBox'2> {(_1.field_0'0).current} {Borrow.get_id _1.field_0'0}
          (fun (_ret':borrowed (t_GhostBox'2)) ->
             [ &_5 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_1 <- { _1 with field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_5} (fun (_ret':borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = {inv'9 (_4.current).current}
        Borrow.borrow_mut <Seq.seq (t_PtrOwn'0)> {(_4.current).current}
          (fun (_ret':borrowed (Seq.seq (t_PtrOwn'0))) ->
             [ &_3 <- _ret' ] 
            -{inv'9 _ret'.final}-
             [ &_4 <- { _4 with current = { _4.current with current = _ret'.final } } ] 
            s1)
      | s1 = into_inner'0 {_1.field_1'0} (fun (_ret':t_PtrOwn'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = push_back_ghost'0 {_3} {_6} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'10 _4} s1
      | s1 = -{resolve'4 _4}- s2
      | s2 = {[@expl:type invariant] match _1 with
          | {field_0'0 = x'2} -> inv'11 x'2
          | _ -> true
          end}
        s3
      | s3 = -{match _1 with
          | {field_0'0 = x'3} -> resolve'5 x'3
          | _ -> true
          end}-
        s4
      | s4 = new'0 {_2} (fun (_ret':t_GhostBox'3) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb4 ]
      
    | bb4 = bb5
    | bb5 = return' {_0} ]
    
    [ & _0 : t_GhostBox'3 = any_l ()
    | & _1 : closure1'1 = _1
    | & _2 : () = any_l ()
    | & _3 : borrowed (Seq.seq (t_PtrOwn'0)) = any_l ()
    | & _4 : borrowed (borrowed (Seq.seq (t_PtrOwn'0))) = any_l ()
    | & _5 : borrowed (t_GhostBox'2) = any_l ()
    | & _6 : t_PtrOwn'0 = any_l () ]
     [ return' (result:t_GhostBox'3)-> return' {result} ] 
  
  predicate resolve'16 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'9 (_1 : borrowed (Seq.seq (t_PtrOwn'0))) =
    resolve'16 _1
  
  predicate resolve'18 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sresolve54] resolve'9 self
  
  predicate resolve'14 (_1 : borrowed (Seq.seq (t_PtrOwn'0))) =
    resolve'18 _1
  
  predicate resolve'6 (self : t_GhostBox'2) =
    [%#sghost35] resolve'14 self.t_GhostBox__0'2
  
  predicate resolve'0 (_1 : t_GhostBox'2) =
    resolve'6 _1
  
  function inner_logic'2 (self : t_GhostBox'1) : Seq.seq (t_PtrOwn'0) =
    [%#sghost22] self.t_GhostBox__0'1
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'16 [#"linked_list.rs" 24 4 24 30] (self : t_List'0) =
    [%#slinked_list57] inner_logic'2 self.t_List__seq'0 = (Seq.empty  : Seq.seq (t_PtrOwn'0))
    /\ is_null_logic'0 self.t_List__first'0 /\ is_null_logic'0 self.t_List__last'0
    \/ Seq.length (inner_logic'2 self.t_List__seq'0) > 0
    /\ self.t_List__first'0 = ptr'0 (Seq.get (inner_logic'2 self.t_List__seq'0) 0)
    /\ self.t_List__last'0
    = ptr'0 (Seq.get (inner_logic'2 self.t_List__seq'0) (Seq.length (inner_logic'2 self.t_List__seq'0) - 1))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (inner_logic'2 self.t_List__seq'0) - 1
     -> (val'0 (Seq.get (inner_logic'2 self.t_List__seq'0) i)).t_Cell__next'0
    = ptr'0 (Seq.get (inner_logic'2 self.t_List__seq'0) (i + 1)))
    /\ is_null_logic'0 (val'0 (Seq.get (inner_logic'2 self.t_List__seq'0) (Seq.length (inner_logic'2 self.t_List__seq'0)
    - 1))).t_Cell__next'0
  
  predicate inv'27 (_1 : t_List'0)
  
  axiom inv_axiom'26 [@rewrite] : forall x : t_List'0 [inv'27 x] . inv'27 x
  = (invariant'16 x
  /\ match x with
    | {t_List__first'0 = first ; t_List__last'0 = last ; t_List__seq'0 = seq} -> inv'0 seq
    end)
  
  predicate invariant'0 (self : borrowed (t_List'0)) =
    [%#sinvariant50] inv'27 self.current /\ inv'27 self.final
  
  predicate inv'2 (_1 : borrowed (t_List'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_List'0) [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate resolve'7 (self : borrowed (t_List'0)) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_List'0)) =
    resolve'7 _1
  
  predicate resolve'20 (_1 : t_PtrOwn'0) =
    true
  
  predicate resolve'19 (self : t_PtrOwn'0) =
    [%#sresolve54] resolve'20 self
  
  predicate resolve'15 (_1 : t_PtrOwn'0) =
    resolve'19 _1
  
  predicate resolve'8 (self : t_GhostBox'0) =
    [%#sghost35] resolve'15 self.t_GhostBox__0'0
  
  predicate resolve'2 (_1 : t_GhostBox'0) =
    resolve'8 _1
  
  predicate invariant'13 (self : t_GhostBox'2) =
    [%#sinvariant56] inv'1 self
  
  predicate inv'23 (_1 : t_GhostBox'2)
  
  axiom inv_axiom'22 [@rewrite] : forall x : t_GhostBox'2 [inv'23 x] . inv'23 x = invariant'13 x
  
  predicate invariant'14 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sinvariant56] inv'14 self
  
  predicate inv'24 (_1 : borrowed (Seq.seq (t_PtrOwn'0)))
  
  axiom inv_axiom'23 [@rewrite] : forall x : borrowed (Seq.seq (t_PtrOwn'0)) [inv'24 x] . inv'24 x = invariant'14 x
  
  let rec deref'0 (self:t_GhostBox'2) (return'  (ret:borrowed (Seq.seq (t_PtrOwn'0))))= {[@expl:deref 'self' type invariant] [%#sghost37] inv'23 self}
    any
    [ return' (result:borrowed (Seq.seq (t_PtrOwn'0)))-> {[%#sghost38] inv'24 result}
      {[%#sghost39] self.t_GhostBox__0'2 = result}
      (! return' {result}) ]
    
  
  predicate invariant'15 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sinvariant56] inv'9 self
  
  predicate inv'25 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'24 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'25 x] . inv'25 x = invariant'15 x
  
  let rec len_ghost'0 (self:Seq.seq (t_PtrOwn'0)) (return'  (ret:int))= {[@expl:len_ghost 'self' type invariant] [%#sseq40] inv'25 self}
    any [ return' (result:int)-> {[%#sseq41] result = Seq.length self} (! return' {result}) ] 
  
  let rec minus_one'0 (x:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#slinked_list42] result = x - 1} (! return' {result}) ]
    
  
  let rec into_inner'1 (self:t_GhostBox'2) (return'  (ret:borrowed (Seq.seq (t_PtrOwn'0))))= {[@expl:into_inner 'self' type invariant] [%#sghost26] inv'1 self}
    any
    [ return' (result:borrowed (Seq.seq (t_PtrOwn'0)))-> {[%#sghost27] inv'14 result}
      {[%#sghost28] result = self.t_GhostBox__0'2}
      (! return' {result}) ]
    
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (borrowed (t_PtrOwn'0))
  
  predicate invariant'9 (self : borrowed (t_PtrOwn'0)) =
    [%#sinvariant50] inv'13 self.current /\ inv'13 self.final
  
  predicate inv'15 (_1 : borrowed (t_PtrOwn'0))
  
  axiom inv_axiom'14 [@rewrite] : forall x : borrowed (t_PtrOwn'0) [inv'15 x] . inv'15 x = invariant'9 x
  
  predicate inv'26 (_1 : t_Option'0)
  
  axiom inv_axiom'25 [@rewrite] : forall x : t_Option'0 [inv'26 x] . inv'26 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'15 a_0
    end
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 (t_PtrOwn'0)
  
  function get'0 (self : Seq.seq (t_PtrOwn'0)) (ix : int) : t_Option'1 =
    [%#sseq51] if 0 <= ix /\ ix < Seq.length self then C_Some'1 (Seq.get self ix) else C_None'1
  
  let rec get_mut_ghost'0 (self:borrowed (Seq.seq (t_PtrOwn'0))) (index:int) (return'  (ret:t_Option'0))= {[@expl:get_mut_ghost 'self' type invariant] [%#sseq43] inv'14 self}
    any
    [ return' (result:t_Option'0)-> {[%#sseq44] inv'26 result}
      {[%#sseq45] match result with
        | C_None'0 -> get'0 self.current index = C_None'1 /\ self.current = self.final
        | C_Some'0 r -> get'0 self.current index = C_Some'1 (r.current) /\ r.final = Seq.get self.final index
        end}
      {[%#sseq46] forall i : int . i <> index  -> get'0 self.current index = get'0 self.final index}
      {[%#sseq47] Seq.length self.current = Seq.length self.final}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:borrowed (t_PtrOwn'0)))= {[@expl:unwrap 'self' type invariant] inv'26 self}
    {[@expl:unwrap requires] [%#soption48] self <> C_None'0}
    any
    [ return' (result:borrowed (t_PtrOwn'0))-> {inv'15 result}
      {[%#soption48] C_Some'0 result = self}
      (! return' {result}) ]
    
  
  type t_GhostBox'4  =
    { t_GhostBox__0'4: borrowed (t_PtrOwn'0) }
  
  predicate invariant'17 (self : borrowed (t_PtrOwn'0)) =
    [%#sboxed52] inv'15 self
  
  predicate inv'28 (_1 : borrowed (t_PtrOwn'0))
  
  axiom inv_axiom'27 [@rewrite] : forall x : borrowed (t_PtrOwn'0) [inv'28 x] . inv'28 x = invariant'17 x
  
  predicate inv'17 (_1 : t_GhostBox'4)
  
  axiom inv_axiom'16 [@rewrite] : forall x : t_GhostBox'4 [inv'17 x] . inv'17 x
  = match x with
    | {t_GhostBox__0'4 = a_0} -> inv'28 a_0
    end
  
  let rec new'1 (x:borrowed (t_PtrOwn'0)) (return'  (ret:t_GhostBox'4))= {[@expl:new 'x' type invariant] [%#sghost32] inv'15 x}
    any
    [ return' (result:t_GhostBox'4)-> {[%#sghost33] inv'17 result}
      {[%#sghost34] result.t_GhostBox__0'4 = x}
      (! return' {result}) ]
    
  
  predicate resolve'17 (self : borrowed (t_PtrOwn'0)) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'10 (_1 : borrowed (t_PtrOwn'0)) =
    resolve'17 _1
  
  type closure2'1  =
    { field_0'1: t_GhostBox'2 }
  
  predicate inv'16 (_1 : closure2'1)
  
  axiom inv_axiom'15 [@rewrite] : forall x : closure2'1 [inv'16 x] . inv'16 x = (let {field_0'1 = x0} = x in inv'1 x0)
  
  let rec closure2'0 (_1:closure2'1) (return'  (ret:t_GhostBox'4))= {[@expl:closure '_1' type invariant] inv'16 _1}
    bb0
    [ bb0 = s0
      [ s0 = deref'0 {_1.field_0'1} (fun (_ret':borrowed (Seq.seq (t_PtrOwn'0))) ->  [ &_7 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = len_ghost'0 {_7.current} (fun (_ret':int) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = minus_one'0 {_5} (fun (_ret':int) ->  [ &off <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = into_inner'1 {_1.field_0'1} (fun (_ret':borrowed (Seq.seq (t_PtrOwn'0))) ->  [ &_11 <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = {inv'9 _11.current}
        Borrow.borrow_final <Seq.seq (t_PtrOwn'0)> {_11.current} {Borrow.get_id _11}
          (fun (_ret':borrowed (Seq.seq (t_PtrOwn'0))) ->
             [ &_10 <- _ret' ] 
            -{inv'9 _ret'.final}-
             [ &_11 <- { _11 with current = _ret'.final } ] 
            s1)
      | s1 = get_mut_ghost'0 {_10} {off} (fun (_ret':t_Option'0) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 = unwrap'0 {_9} (fun (_ret':borrowed (t_PtrOwn'0)) ->  [ &_3 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 = {inv'13 _3.current}
        Borrow.borrow_final <t_PtrOwn'0> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed (t_PtrOwn'0)) ->
             [ &_2 <- _ret' ] 
            -{inv'13 _ret'.final}-
             [ &_3 <- { _3 with current = _ret'.final } ] 
            s1)
      | s1 = new'1 {_2} (fun (_ret':t_GhostBox'4) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'14 _11} s1
      | s1 = -{resolve'9 _11}- s2
      | s2 = {[@expl:type invariant] inv'15 _3} s3
      | s3 = -{resolve'10 _3}- s4
      | s4 = bb8 ]
      
    | bb8 = return' {_0} ]
    
    [ & _0 : t_GhostBox'4 = any_l ()
    | & _1 : closure2'1 = _1
    | & _2 : borrowed (t_PtrOwn'0) = any_l ()
    | & _3 : borrowed (t_PtrOwn'0) = any_l ()
    | & off : int = any_l ()
    | & _5 : int = any_l ()
    | & _7 : borrowed (Seq.seq (t_PtrOwn'0)) = any_l ()
    | & _9 : t_Option'0 = any_l ()
    | & _10 : borrowed (Seq.seq (t_PtrOwn'0)) = any_l ()
    | & _11 : borrowed (Seq.seq (t_PtrOwn'0)) = any_l () ]
    
    [ return' (result:t_GhostBox'4)-> {[@expl:closure result type invariant] [%#slinked_list12] inv'17 result}
      return' {result} ]
    
  
  function inner_logic'1 (self : t_GhostBox'4) : borrowed (t_PtrOwn'0) =
    [%#sghost22] self.t_GhostBox__0'4
  
  predicate invariant'1 (self : borrowed (t_Cell'0)) =
    [%#sinvariant50] inv'29 self.current /\ inv'29 self.final
  
  predicate inv'4 (_1 : borrowed (t_Cell'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_Cell'0) [inv'4 x] . inv'4 x = invariant'1 x
  
  let rec as_mut'0 (ptr:opaque_ptr) (own:t_GhostBox'4) (return'  (ret:borrowed (t_Cell'0)))= {[@expl:as_mut 'own' type invariant] [%#sptr_own13] inv'17 own}
    {[@expl:as_mut requires] [%#sptr_own14] ptr = ptr'0 (inner_logic'1 own).current}
    any
    [ return' (result:borrowed (t_Cell'0))-> {[%#sptr_own15] inv'4 result}
      {[%#sptr_own16] result.current = val'0 (inner_logic'1 own).current}
      {[%#sptr_own17] ptr'0 (inner_logic'1 own).final = ptr'0 (inner_logic'1 own).current}
      {[%#sptr_own18] val'0 (inner_logic'1 own).final = result.final}
      (! return' {result}) ]
    
  
  predicate resolve'11 (self : borrowed (t_Cell'0)) =
    [%#sresolve36] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_Cell'0)) =
    resolve'11 _1
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use map.Map
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function seq_map'0 [#"linked_list.rs" 66 0 66 66] (s : Seq.seq (t_PtrOwn'0)) (f : Map.map (t_PtrOwn'0) t_T'0) : Seq.seq t_T'0
    
   =
    [%#slinked_list49] Seq.create (Seq.length s) (Mapping.from_fn (fun (i : int) -> Map.get f (Seq.get s i)))
  
  function view'0 [#"linked_list.rs" 46 4 46 33] (self : t_List'0) : Seq.seq t_T'0 =
    [%#slinked_list19] seq_map'0 (inner_logic'2 self.t_List__seq'0) (Mapping.from_fn (fun (ptr_own : t_PtrOwn'0) -> (val'0 ptr_own).t_Cell__v'0))
  
  use seq.Seq
  
  meta "compute_max_steps" 1000000
  
  let rec push_back'0 (self:borrowed (t_List'0)) (x:t_T'0) (return'  (ret:()))= {[@expl:push_back 'self' type invariant] [%#slinked_list1] inv'2 self}
    {[@expl:push_back 'x' type invariant] [%#slinked_list2] inv'5 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = null'0 {[%#slinked_list0] ()} (fun (_ret':opaque_ptr) ->  [ &_7 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_5 <- { t_Cell__v'0 = x; t_Cell__next'0 = _7 } ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &cell <- _5 ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 = from_box'0 {cell} (fun (_ret':(opaque_ptr, t_GhostBox'0)) ->  [ &_10 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 =  [ &cell_ptr <- let (r'0, _) = _10 in r'0 ] s1
      | s1 =  [ &cell_own <- let (_, r'1) = _10 in r'1 ] s2
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = is_null'0 {(self.current).t_List__last'0} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s1) | s1 = bb7 ]
      
    | bb7 = any [ br0 -> {_12 = false} (! bb13) | br1 -> {_12} (! bb8) ] 
    | bb8 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_List__first'0 = cell_ptr } } ] s1
      | s1 =  [ &self <- { self with current = { self.current with t_List__last'0 = cell_ptr } } ] s2
      | s2 = {inv'0 (self.current).t_List__seq'0}
        Borrow.borrow_final <t_GhostBox'1> {(self.current).t_List__seq'0} {Borrow.inherit_id (Borrow.get_id self) 3}
          (fun (_ret':borrowed (t_GhostBox'1)) ->
             [ &_17 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_List__seq'0 = _ret'.final } } ] 
            s3)
      | s3 = borrow_mut'0 {_17} (fun (_ret':t_GhostBox'2) ->  [ &seq <- _ret' ] s4)
      | s4 = bb9 ]
      
    | bb9 = s0
      [ s0 = {inv'1 seq}
        Borrow.borrow_mut <t_GhostBox'2> {seq}
          (fun (_ret':borrowed (t_GhostBox'2)) ->  [ &_20 <- _ret' ] -{inv'1 _ret'.final}-  [ &seq <- _ret'.final ] s1)
      | s1 =  [ &_19 <- { field_0'0 = _20; field_1'0 = cell_own } ] s2
      | s2 = closure1'0 {_19} (fun (_ret':t_GhostBox'3) ->  [ &_18 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'1 seq} s1
      | s1 = -{resolve'0 seq}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb11 ]
      
    | bb11 = bb12
    | bb12 = bb18
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'3 cell_own} s1
      | s1 = -{resolve'2 cell_own}- s2
      | s2 = {inv'0 (self.current).t_List__seq'0}
        Borrow.borrow_final <t_GhostBox'1> {(self.current).t_List__seq'0} {Borrow.inherit_id (Borrow.get_id self) 3}
          (fun (_ret':borrowed (t_GhostBox'1)) ->
             [ &_23 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_List__seq'0 = _ret'.final } } ] 
            s3)
      | s3 = borrow_mut'0 {_23} (fun (_ret':t_GhostBox'2) ->  [ &seq1 <- _ret' ] s4)
      | s4 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_27 <- { field_0'1 = seq1 } ] s1
      | s1 = closure2'0 {_27} (fun (_ret':t_GhostBox'4) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0
      [ s0 = as_mut'0 {(self.current).t_List__last'0} {_26}
          (fun (_ret':borrowed (t_Cell'0)) ->  [ &cell_last <- _ret' ] s1)
      | s1 = bb16 ]
      
    | bb16 = s0
      [ s0 =  [ &cell_last <- { cell_last with current = { cell_last.current with t_Cell__next'0 = cell_ptr } } ] s1
      | s1 = {[@expl:type invariant] inv'4 cell_last} s2
      | s2 = -{resolve'3 cell_last}- s3
      | s3 =  [ &self <- { self with current = { self.current with t_List__last'0 = cell_ptr } } ] s4
      | s4 = {[@expl:type invariant] inv'2 self} s5
      | s5 = -{resolve'1 self}- s6
      | s6 = bb17 ]
      
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (t_List'0) = self
    | & x : t_T'0 = x
    | & cell : t_Cell'0 = any_l ()
    | & _5 : t_Cell'0 = any_l ()
    | & _7 : opaque_ptr = any_l ()
    | & cell_ptr : opaque_ptr = any_l ()
    | & cell_own : t_GhostBox'0 = any_l ()
    | & _10 : (opaque_ptr, t_GhostBox'0) = any_l ()
    | & _12 : bool = any_l ()
    | & seq : t_GhostBox'2 = any_l ()
    | & _17 : borrowed (t_GhostBox'1) = any_l ()
    | & _18 : t_GhostBox'3 = any_l ()
    | & _19 : closure1'1 = any_l ()
    | & _20 : borrowed (t_GhostBox'2) = any_l ()
    | & _21 : () = any_l ()
    | & seq1 : t_GhostBox'2 = any_l ()
    | & _23 : borrowed (t_GhostBox'1) = any_l ()
    | & cell_last : borrowed (t_Cell'0) = any_l ()
    | & _26 : t_GhostBox'4 = any_l ()
    | & _27 : closure2'1 = any_l ()
    | & _28 : () = any_l () ]
    
    [ return' (result:())-> {[@expl:push_back ensures] [%#slinked_list3] view'0 self.final
      = Seq.snoc (view'0 self.current) x}
      (! return' {result}) ]
    
end
module M_linked_list__qyi14323471455460008969__push_front [#"linked_list.rs" 100 4 100 38] (* List<T> *)
  let%span slinked_list0 = "linked_list.rs" 100 27 100 31
  let%span slinked_list1 = "linked_list.rs" 100 33 100 34
  let%span slinked_list2 = "linked_list.rs" 99 14 99 48
  let%span sptr_own3 = "../../../creusot-contracts/src/ptr_own.rs" 52 15 52 16
  let%span sptr_own4 = "../../../creusot-contracts/src/ptr_own.rs" 52 4 52 56
  let%span sptr_own5 = "../../../creusot-contracts/src/ptr_own.rs" 51 14 51 64
  let%span sptr6 = "../../../creusot-contracts/src/std/ptr.rs" 107 18 107 48
  let%span sghost7 = "../../../creusot-contracts/src/ghost.rs" 138 27 138 31
  let%span sghost8 = "../../../creusot-contracts/src/ghost.rs" 138 4 138 52
  let%span sghost9 = "../../../creusot-contracts/src/ghost.rs" 137 14 137 39
  let%span slinked_list10 = "linked_list.rs" 48 12 48 74
  let%span sseq11 = "../../../creusot-contracts/src/logic/seq.rs" 251 8 251 27
  let%span sghost12 = "../../../creusot-contracts/src/ghost.rs" 217 9 217 15
  let%span sptr13 = "../../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr14 = "../../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span sghost15 = "../../../creusot-contracts/src/ghost.rs" 85 22 85 26
  let%span sghost16 = "../../../creusot-contracts/src/ghost.rs" 85 4 85 48
  let%span sghost17 = "../../../creusot-contracts/src/ghost.rs" 84 14 84 36
  let%span sghost18 = "../../../creusot-contracts/src/ghost.rs" 199 22 199 26
  let%span sghost19 = "../../../creusot-contracts/src/ghost.rs" 199 4 199 32
  let%span sghost20 = "../../../creusot-contracts/src/ghost.rs" 197 14 197 31
  let%span sseq21 = "../../../creusot-contracts/src/logic/seq.rs" 476 33 476 37
  let%span sseq22 = "../../../creusot-contracts/src/logic/seq.rs" 476 39 476 40
  let%span sseq23 = "../../../creusot-contracts/src/logic/seq.rs" 475 14 475 41
  let%span sghost24 = "../../../creusot-contracts/src/ghost.rs" 181 15 181 16
  let%span sghost25 = "../../../creusot-contracts/src/ghost.rs" 181 4 181 28
  let%span sghost26 = "../../../creusot-contracts/src/ghost.rs" 179 14 179 28
  let%span sghost27 = "../../../creusot-contracts/src/ghost.rs" 110 8 110 24
  let%span sresolve28 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span slinked_list29 = "linked_list.rs" 67 4 67 41
  let%span sinvariant30 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq31 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sresolve32 = "../../../creusot-contracts/src/resolve.rs" 68 8 68 23
  let%span sboxed33 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sptr_own34 = "../../../creusot-contracts/src/ptr_own.rs" 44 20 44 66
  let%span slinked_list35 = "linked_list.rs" 26 12 36 69
  
  use prelude.prelude.Opaque
  
  type t_PtrOwn'0
  
  use seq.Seq
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: Seq.seq (t_PtrOwn'0) }
  
  type t_List'0  =
    { t_List__first'0: opaque_ptr; t_List__last'0: opaque_ptr; t_List__seq'0: t_GhostBox'1 }
  
  type t_T'0
  
  type t_Cell'0  =
    { t_Cell__v'0: t_T'0; t_Cell__next'0: opaque_ptr }
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'4 (_1 : t_Cell'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Cell'0 [inv'4 x] . inv'4 x
  = match x with
    | {t_Cell__v'0 = v ; t_Cell__next'0 = next} -> inv'3 v
    end
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: t_PtrOwn'0 }
  
  use prelude.prelude.Borrow
  
  function ptr'0 (self : t_PtrOwn'0) : opaque_ptr
  
  use prelude.prelude.Int
  
  function addr_logic'0 (self : opaque_ptr) : int
  
  function is_null_logic'0 (self : opaque_ptr) : bool =
    [%#sptr14] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : opaque_ptr . [%#sptr13] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  function val'0 (self : t_PtrOwn'0) : t_Cell'0
  
  predicate invariant'11 (self : t_Cell'0) =
    [%#sboxed33] inv'4 self
  
  predicate inv'20 (_1 : t_Cell'0)
  
  axiom inv_axiom'19 [@rewrite] : forall x : t_Cell'0 [inv'20 x] . inv'20 x = invariant'11 x
  
  predicate invariant'7 (self : t_PtrOwn'0) =
    [%#sptr_own34] not is_null_logic'0 (ptr'0 self) /\ inv'20 (val'0 self)
  
  predicate inv'14 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'13 [@rewrite] : forall x : t_PtrOwn'0 [inv'14 x] . inv'14 x = invariant'7 x
  
  predicate invariant'10 (self : t_PtrOwn'0) =
    [%#sboxed33] inv'14 self
  
  predicate inv'19 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'18 [@rewrite] : forall x : t_PtrOwn'0 [inv'19 x] . inv'19 x = invariant'10 x
  
  predicate inv'13 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_GhostBox'0 [inv'13 x] . inv'13 x
  = match x with
    | {t_GhostBox__0'0 = a_0} -> inv'19 a_0
    end
  
  predicate inv'5 (_1 : (opaque_ptr, t_GhostBox'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : (opaque_ptr, t_GhostBox'0) [inv'5 x] . inv'5 x
  = (let (x0, x1) = x in inv'13 x1)
  
  function inner_logic'0 (self : t_GhostBox'0) : t_PtrOwn'0 =
    [%#sghost12] self.t_GhostBox__0'0
  
  let rec new'0 (v:t_Cell'0) (return'  (ret:(opaque_ptr, t_GhostBox'0)))= {[@expl:new 'v' type invariant] [%#sptr_own3] inv'4 v}
    any
    [ return' (result:(opaque_ptr, t_GhostBox'0))-> {[%#sptr_own4] inv'5 result}
      {[%#sptr_own5] ptr'0 (inner_logic'0 (let (_, a) = result in a)) = (let (a, _) = result in a)
      /\ val'0 (inner_logic'0 (let (_, a) = result in a)) = v}
      (! return' {result}) ]
    
  
  let rec is_null'0 (self:opaque_ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sptr6] result = is_null_logic'0 self} (! return' {result}) ]
    
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sseq31] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'19 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'7 x] . inv'7 x = invariant'2 x
  
  predicate invariant'5 (self : Seq.seq (t_PtrOwn'0)) =
    [%#sboxed33] inv'7 self
  
  predicate inv'11 (_1 : Seq.seq (t_PtrOwn'0))
  
  axiom inv_axiom'10 [@rewrite] : forall x : Seq.seq (t_PtrOwn'0) [inv'11 x] . inv'11 x = invariant'5 x
  
  predicate inv'0 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'1 [inv'0 x] . inv'0 x
  = match x with
    | {t_GhostBox__0'1 = a_0} -> inv'11 a_0
    end
  
  predicate invariant'1 (self : borrowed (t_GhostBox'1)) =
    [%#sinvariant30] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'6 (_1 : borrowed (t_GhostBox'1))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_GhostBox'1) [inv'6 x] . inv'6 x = invariant'1 x
  
  type t_GhostBox'2  =
    { t_GhostBox__0'2: borrowed (Seq.seq (t_PtrOwn'0)) }
  
  predicate invariant'8 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sinvariant30] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'15 (_1 : borrowed (Seq.seq (t_PtrOwn'0)))
  
  axiom inv_axiom'14 [@rewrite] : forall x : borrowed (Seq.seq (t_PtrOwn'0)) [inv'15 x] . inv'15 x = invariant'8 x
  
  predicate invariant'6 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sboxed33] inv'15 self
  
  predicate inv'12 (_1 : borrowed (Seq.seq (t_PtrOwn'0)))
  
  axiom inv_axiom'11 [@rewrite] : forall x : borrowed (Seq.seq (t_PtrOwn'0)) [inv'12 x] . inv'12 x = invariant'6 x
  
  predicate inv'1 (_1 : t_GhostBox'2)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'2 [inv'1 x] . inv'1 x
  = match x with
    | {t_GhostBox__0'2 = a_0} -> inv'12 a_0
    end
  
  let rec borrow_mut'0 (self:borrowed (t_GhostBox'1)) (return'  (ret:t_GhostBox'2))= {[@expl:borrow_mut 'self' type invariant] [%#sghost7] inv'6 self}
    any
    [ return' (result:t_GhostBox'2)-> {[%#sghost8] inv'1 result}
      {[%#sghost9] result.t_GhostBox__0'2
      = Borrow.borrow_logic (self.current).t_GhostBox__0'1 (self.final).t_GhostBox__0'1 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  predicate invariant'4 (self : borrowed (t_GhostBox'2)) =
    [%#sinvariant30] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'9 (_1 : borrowed (t_GhostBox'2))
  
  axiom inv_axiom'8 [@rewrite] : forall x : borrowed (t_GhostBox'2) [inv'9 x] . inv'9 x = invariant'4 x
  
  predicate invariant'3 (self : borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) =
    [%#sinvariant30] inv'15 self.current /\ inv'15 self.final
  
  predicate inv'8 (_1 : borrowed (borrowed (Seq.seq (t_PtrOwn'0))))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (borrowed (Seq.seq (t_PtrOwn'0))) [inv'8 x] . inv'8 x
  = invariant'3 x
  
  let rec deref_mut'0 (self:borrowed (t_GhostBox'2)) (return'  (ret:borrowed (borrowed (Seq.seq (t_PtrOwn'0)))))= {[@expl:deref_mut 'self' type invariant] [%#sghost15] inv'9 self}
    any
    [ return' (result:borrowed (borrowed (Seq.seq (t_PtrOwn'0))))-> {[%#sghost16] inv'8 result}
      {[%#sghost17] result
      = Borrow.borrow_logic (self.current).t_GhostBox__0'2 (self.final).t_GhostBox__0'2 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  let rec into_inner'0 (self:t_GhostBox'0) (return'  (ret:t_PtrOwn'0))= {[@expl:into_inner 'self' type invariant] [%#sghost18] inv'13 self}
    any
    [ return' (result:t_PtrOwn'0)-> {[%#sghost19] inv'14 result}
      {[%#sghost20] result = self.t_GhostBox__0'0}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function push_front'2 [@inline:trivial] (self : Seq.seq (t_PtrOwn'0)) (x : t_PtrOwn'0) : Seq.seq (t_PtrOwn'0) =
    [%#sseq11] Seq.cons x self
  
  let rec push_front_ghost'0 (self:borrowed (Seq.seq (t_PtrOwn'0))) (x:t_PtrOwn'0) (return'  (ret:()))= {[@expl:push_front_ghost 'self' type invariant] [%#sseq21] inv'15 self}
    {[@expl:push_front_ghost 'x' type invariant] [%#sseq22] inv'14 x}
    any [ return' (result:())-> {[%#sseq23] self.final = push_front'2 self.current x} (! return' {result}) ] 
  
  predicate resolve'6 (self : borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) =
    [%#sresolve28] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) =
    resolve'6 _1
  
  predicate resolve'7 (self : borrowed (t_GhostBox'2)) =
    [%#sresolve28] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_GhostBox'2)) =
    resolve'7 _1
  
  predicate inv'16 (_1 : ())
  
  axiom inv_axiom'15 [@rewrite] : forall x : () [inv'16 x] . inv'16 x = true
  
  type t_GhostBox'3  =
    { t_GhostBox__0'3: () }
  
  predicate inv'17 (_1 : t_GhostBox'3)
  
  axiom inv_axiom'16 [@rewrite] : forall x : t_GhostBox'3 [inv'17 x] . inv'17 x = true
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'3))= {[@expl:new 'x' type invariant] [%#sghost24] inv'16 x}
    any
    [ return' (result:t_GhostBox'3)-> {[%#sghost25] inv'17 result}
      {[%#sghost26] result.t_GhostBox__0'3 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  type closure1'1  =
    { field_0'0: borrowed (t_GhostBox'2); field_1'0: t_GhostBox'0 }
  
  predicate inv'10 (_1 : closure1'1)
  
  axiom inv_axiom'9 [@rewrite] : forall x : closure1'1 [inv'10 x] . inv'10 x
  = (let {field_0'0 = x0 ; field_1'0 = x1} = x in inv'9 x0 /\ inv'13 x1)
  
  let rec closure1'0 (_1:closure1'1) (return'  (ret:t_GhostBox'3))= {[@expl:closure '_1' type invariant] inv'10 _1}
    bb0
    [ bb0 = s0
      [ s0 = {inv'1 (_1.field_0'0).current}
        Borrow.borrow_final <t_GhostBox'2> {(_1.field_0'0).current} {Borrow.get_id _1.field_0'0}
          (fun (_ret':borrowed (t_GhostBox'2)) ->
             [ &_5 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_1 <- { _1 with field_0'0 = { _1.field_0'0 with current = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_5} (fun (_ret':borrowed (borrowed (Seq.seq (t_PtrOwn'0)))) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = {inv'7 (_4.current).current}
        Borrow.borrow_mut <Seq.seq (t_PtrOwn'0)> {(_4.current).current}
          (fun (_ret':borrowed (Seq.seq (t_PtrOwn'0))) ->
             [ &_3 <- _ret' ] 
            -{inv'7 _ret'.final}-
             [ &_4 <- { _4 with current = { _4.current with current = _ret'.final } } ] 
            s1)
      | s1 = into_inner'0 {_1.field_1'0} (fun (_ret':t_PtrOwn'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0 [ s0 = push_front_ghost'0 {_3} {_6} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'8 _4} s1
      | s1 = -{resolve'2 _4}- s2
      | s2 = {[@expl:type invariant] match _1 with
          | {field_0'0 = x'2} -> inv'9 x'2
          | _ -> true
          end}
        s3
      | s3 = -{match _1 with
          | {field_0'0 = x'3} -> resolve'3 x'3
          | _ -> true
          end}-
        s4
      | s4 = new'1 {_2} (fun (_ret':t_GhostBox'3) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb4 ]
      
    | bb4 = bb5
    | bb5 = return' {_0} ]
    
    [ & _0 : t_GhostBox'3 = any_l ()
    | & _1 : closure1'1 = _1
    | & _2 : () = any_l ()
    | & _3 : borrowed (Seq.seq (t_PtrOwn'0)) = any_l ()
    | & _4 : borrowed (borrowed (Seq.seq (t_PtrOwn'0))) = any_l ()
    | & _5 : borrowed (t_GhostBox'2) = any_l ()
    | & _6 : t_PtrOwn'0 = any_l () ]
     [ return' (result:t_GhostBox'3)-> return' {result} ] 
  
  predicate resolve'11 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sresolve28] self.final = self.current
  
  predicate resolve'10 (_1 : borrowed (Seq.seq (t_PtrOwn'0))) =
    resolve'11 _1
  
  predicate resolve'9 (self : borrowed (Seq.seq (t_PtrOwn'0))) =
    [%#sresolve32] resolve'10 self
  
  predicate resolve'8 (_1 : borrowed (Seq.seq (t_PtrOwn'0))) =
    resolve'9 _1
  
  predicate resolve'4 (self : t_GhostBox'2) =
    [%#sghost27] resolve'8 self.t_GhostBox__0'2
  
  predicate resolve'0 (_1 : t_GhostBox'2) =
    resolve'4 _1
  
  function inner_logic'1 (self : t_GhostBox'1) : Seq.seq (t_PtrOwn'0) =
    [%#sghost12] self.t_GhostBox__0'1
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'9 [#"linked_list.rs" 24 4 24 30] (self : t_List'0) =
    [%#slinked_list35] inner_logic'1 self.t_List__seq'0 = (Seq.empty  : Seq.seq (t_PtrOwn'0))
    /\ is_null_logic'0 self.t_List__first'0 /\ is_null_logic'0 self.t_List__last'0
    \/ Seq.length (inner_logic'1 self.t_List__seq'0) > 0
    /\ self.t_List__first'0 = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) 0)
    /\ self.t_List__last'0
    = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (Seq.length (inner_logic'1 self.t_List__seq'0) - 1))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (inner_logic'1 self.t_List__seq'0) - 1
     -> (val'0 (Seq.get (inner_logic'1 self.t_List__seq'0) i)).t_Cell__next'0
    = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (i + 1)))
    /\ is_null_logic'0 (val'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (Seq.length (inner_logic'1 self.t_List__seq'0)
    - 1))).t_Cell__next'0
  
  predicate inv'18 (_1 : t_List'0)
  
  axiom inv_axiom'17 [@rewrite] : forall x : t_List'0 [inv'18 x] . inv'18 x
  = (invariant'9 x
  /\ match x with
    | {t_List__first'0 = first ; t_List__last'0 = last ; t_List__seq'0 = seq} -> inv'0 seq
    end)
  
  predicate invariant'0 (self : borrowed (t_List'0)) =
    [%#sinvariant30] inv'18 self.current /\ inv'18 self.final
  
  predicate inv'2 (_1 : borrowed (t_List'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_List'0) [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate resolve'5 (self : borrowed (t_List'0)) =
    [%#sresolve28] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_List'0)) =
    resolve'5 _1
  
  use seq.Seq
  
  use prelude.prelude.Mapping
  
  use map.Map
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  use seq.Seq
  
  function seq_map'0 [#"linked_list.rs" 66 0 66 66] (s : Seq.seq (t_PtrOwn'0)) (f : Map.map (t_PtrOwn'0) t_T'0) : Seq.seq t_T'0
    
   =
    [%#slinked_list29] Seq.create (Seq.length s) (Mapping.from_fn (fun (i : int) -> Map.get f (Seq.get s i)))
  
  function view'0 [#"linked_list.rs" 46 4 46 33] (self : t_List'0) : Seq.seq t_T'0 =
    [%#slinked_list10] seq_map'0 (inner_logic'1 self.t_List__seq'0) (Mapping.from_fn (fun (ptr_own : t_PtrOwn'0) -> (val'0 ptr_own).t_Cell__v'0))
  
  use seq.Seq
  
  function push_front'1 [@inline:trivial] (self : Seq.seq t_T'0) (x : t_T'0) : Seq.seq t_T'0 =
    [%#sseq11] Seq.cons x self
  
  meta "compute_max_steps" 1000000
  
  let rec push_front'0 (self:borrowed (t_List'0)) (x:t_T'0) (return'  (ret:()))= {[@expl:push_front 'self' type invariant] [%#slinked_list0] inv'2 self}
    {[@expl:push_front 'x' type invariant] [%#slinked_list1] inv'3 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &_7 <- { t_Cell__v'0 = x; t_Cell__next'0 = (self.current).t_List__first'0 } ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'0 {_7} (fun (_ret':(opaque_ptr, t_GhostBox'0)) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &cell_ptr <- let (r'0, _) = _6 in r'0 ] s1
      | s1 =  [ &cell_own <- let (_, r'1) = _6 in r'1 ] s2
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_List__first'0 = cell_ptr } } ] s1
      | s1 = is_null'0 {(self.current).t_List__last'0} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = any [ br0 -> {_12 = false} (! bb7) | br1 -> {_12} (! bb6) ] 
    | bb6 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_List__last'0 = cell_ptr } } ] s1 | s1 = bb8 ]
      
    | bb7 = bb8
    | bb8 = s0
      [ s0 = {inv'0 (self.current).t_List__seq'0}
        Borrow.borrow_final <t_GhostBox'1> {(self.current).t_List__seq'0} {Borrow.inherit_id (Borrow.get_id self) 3}
          (fun (_ret':borrowed (t_GhostBox'1)) ->
             [ &_16 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_List__seq'0 = _ret'.final } } ] 
            s1)
      | s1 = borrow_mut'0 {_16} (fun (_ret':t_GhostBox'2) ->  [ &seq <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 = {inv'1 seq}
        Borrow.borrow_mut <t_GhostBox'2> {seq}
          (fun (_ret':borrowed (t_GhostBox'2)) ->  [ &_19 <- _ret' ] -{inv'1 _ret'.final}-  [ &seq <- _ret'.final ] s1)
      | s1 =  [ &_18 <- { field_0'0 = _19; field_1'0 = cell_own } ] s2
      | s2 = closure1'0 {_18} (fun (_ret':t_GhostBox'3) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'1 seq} s1
      | s1 = -{resolve'0 seq}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb11 ]
      
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (t_List'0) = self
    | & x : t_T'0 = x
    | & cell_ptr : opaque_ptr = any_l ()
    | & cell_own : t_GhostBox'0 = any_l ()
    | & _6 : (opaque_ptr, t_GhostBox'0) = any_l ()
    | & _7 : t_Cell'0 = any_l ()
    | & _12 : bool = any_l ()
    | & seq : t_GhostBox'2 = any_l ()
    | & _16 : borrowed (t_GhostBox'1) = any_l ()
    | & _17 : t_GhostBox'3 = any_l ()
    | & _18 : closure1'1 = any_l ()
    | & _19 : borrowed (t_GhostBox'2) = any_l ()
    | & _20 : () = any_l () ]
    
    [ return' (result:())-> {[@expl:push_front ensures] [%#slinked_list2] view'0 self.final
      = push_front'1 (view'0 self.current) x}
      (! return' {result}) ]
    
end
