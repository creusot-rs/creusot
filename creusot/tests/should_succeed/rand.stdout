module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Rand_Random_Interface
  type t   
  val random () : t
    requires {false}
    
end
module Rand_Random
  type t   
  val random () : t
    requires {false}
    
end
module Rand_TryRand_Interface
  use mach.int.Int
  use mach.int.UInt32
  val try_rand () : uint32
    ensures { result >= (0 : uint32) }
    
end
module Rand_TryRand
  use mach.int.Int
  use mach.int.UInt32
  clone Rand_Random_Interface as Random1 with type t = uint32
  clone Rand_Random_Interface as Random0 with type t = bool
  let rec cfg try_rand () : uint32
    ensures { result >= (0 : uint32) }
    
   = 
  var _0 : uint32;
  var _1 : bool;
  {
    goto BB0
  }
  BB0 {
    _1 <- Random0.random ();
    goto BB1
  }
  BB1 {
    switch (_1)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- (7 : uint32);
    goto BB4
  }
  BB3 {
    _0 <- Random1.random ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
