module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type spectests_t  = 
    | SpecTests_T_A
    | SpecTests_T_B
    
  type spectests_s 'a 'b = 
    | SpecTests_S('a, 'b)
    
end
module SpecTests_TestSpecs_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val test_specs () : ()
    ensures { Type.SpecTests_S((0 : uint32), true) = Type.SpecTests_S((1 : uint32), false) }
    ensures { Type.SpecTests_T_A = Type.SpecTests_T_B }
    
end
module SpecTests_TestSpecs
  use Type
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg test_specs () : ()
    ensures { Type.SpecTests_S((0 : uint32), true) = Type.SpecTests_S((1 : uint32), false) }
    ensures { Type.SpecTests_T_A = Type.SpecTests_T_B }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module SpecTests_Main_Interface
  val main () : ()
end
module SpecTests_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
