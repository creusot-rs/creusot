
module AllZero_List_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
  
  function any_l (_ : 'b) : 'a
  
  let rec cons (input:t_list) (ret  (field_0:uint32) (field_1:t_list))= any
    [ good (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  
  let rec nil (input:t_list) (ret  )= any [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ] 
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module AllZero_AllZero
  let%span sall_zero0 = "../all_zero.rs" 36 16 36 31
  
  let%span sall_zero1 = "../all_zero.rs" 39 4 41 88
  
  let%span sall_zero2 = "../all_zero.rs" 44 17 44 18
  
  let%span sall_zero3 = "../all_zero.rs" 32 0 32 77
  
  let%span sall_zero4 = "../all_zero.rs" 33 10 33 34
  
  let%span span5 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "../all_zero.rs" 22 8 28 9
  
  let%span span7 = "../all_zero.rs" 14 8 17 9
  
  use AllZero_List_Type as List'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (List'0.t_list)) =
    [%#span5]  ^ self =  * self
  
  predicate resolve'1 (self : borrowed (List'0.t_list)) =
    [%#span5]  ^ self =  * self
  
  use prelude.prelude.UInt32
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span5]  ^ self =  * self
  
  use prelude.prelude.Snapshot
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Int
  
  function get'0 [#"../all_zero.rs" 21 4 21 40] (self : List'0.t_list) (ix : int) : Option'0.t_option uint32 =
    [%#span6] match self with
      | List'0.C_Cons x ls -> if ix = 0 then Option'0.C_Some x else get'0 ls (ix - 1)
      | List'0.C_Nil -> Option'0.C_None
      end
  
  function len'0 [#"../all_zero.rs" 13 4 13 23] (self : List'0.t_list) : int =
    [%#span7] match self with
      | List'0.C_Cons _ ls -> 1 + len'0 ls
      | List'0.C_Nil -> 0
      end
  
  use prelude.prelude.Snapshot
  
  let rec all_zero (l:borrowed (List'0.t_list)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [%#sall_zero0] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &loop_l <- l ] (any [ any_ (_any:borrowed (List'0.t_list))-> (!  [ &l <- _any ] s1) ] ) | s1 = bb2 ]
      
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [%#sall_zero1] len'0 ( ^ loop_l) = len'0 ( * loop_l)
         -> len'0 ( ^ Snapshot.inner old_l) = len'0 ( * Snapshot.inner old_l)}
        {[@expl:loop invariant] [%#sall_zero1] (forall i : int . 0 <= i /\ i < len'0 ( * loop_l)
         -> get'0 ( ^ loop_l) i = Option'0.C_Some (0 : uint32))
         -> (forall i : int . 0 <= i /\ i < len'0 ( * Snapshot.inner old_l)
         -> get'0 ( ^ Snapshot.inner old_l) i = Option'0.C_Some (0 : uint32))}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = any
          [ br0 (a:uint32) (b:List'0.t_list)-> { * loop_l = List'0.C_Cons a b} (! bb4)
          | br1 -> { * loop_l = List'0.C_Nil } (! bb6) ]
          
        | bb4 = bb5
        | bb5 = s0
          [ s0 = List'0.cons { * loop_l}
              (fun (r0'0:uint32) (r1'0:List'0.t_list) ->
                Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id loop_l) 1}
                  (fun (_ret':borrowed uint32) ->
                     [ &value <- _ret' ] 
                    List'0.cons { * loop_l}
                      (fun (l_0'0:uint32) (l_1'0:List'0.t_list) ->
                         [ &loop_l <- { loop_l with current = List'0.C_Cons ( ^ value) l_1'0 ; } ] 
                        s1)))
          | s1 = List'0.cons { * loop_l}
              (fun (r0'1:uint32) (r1'1:List'0.t_list) ->
                Borrow.borrow_final <List'0.t_list> {r1'1} {Borrow.inherit_id (Borrow.get_id loop_l) 2}
                  (fun (_ret':borrowed (List'0.t_list)) ->
                     [ &next <- _ret' ] 
                    List'0.cons { * loop_l}
                      (fun (l_0'1:uint32) (l_1'1:List'0.t_list) ->
                         [ &loop_l <- { loop_l with current = List'0.C_Cons l_0'1 ( ^ next) ; } ] 
                        s2)))
          | s2 =  [ &value <- { value with current = ([%#sall_zero2] (0 : uint32)) ; } ] s3
          | s3 = -{resolve'0 value}- s4
          | s4 = Borrow.borrow_mut <List'0.t_list> { * next}
              (fun (_ret':borrowed (List'0.t_list)) ->
                 [ &_13 <- _ret' ] 
                 [ &next <- { next with current = ( ^ _13) ; } ] 
                s5)
          | s5 = -{resolve'1 loop_l}- s6
          | s6 =  [ &loop_l <- _13 ] (any [ any_ (_any:borrowed (List'0.t_list))-> (!  [ &_13 <- _any ] s7) ] )
          | s7 = -{resolve'2 next}- s8
          | s8 = bb2 ]
           ]
         ]
      
    | bb6 = s0 [ s0 = -{resolve'1 loop_l}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & l : borrowed (List'0.t_list) = l
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_list)) = any_l ()
    | & loop_l : borrowed (List'0.t_list) = any_l ()
    | & value : borrowed uint32 = any_l ()
    | & next : borrowed (List'0.t_list) = any_l ()
    | & _13 : borrowed (List'0.t_list) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sall_zero4] len'0 ( * l) = len'0 ( ^ l)}
      {[@expl:postcondition] [%#sall_zero3] forall i : int . 0 <= i /\ i < len'0 ( * l)
       -> get'0 ( ^ l) i = Option'0.C_Some (0 : uint32)}
      (! return' {result}) ]
    
end
