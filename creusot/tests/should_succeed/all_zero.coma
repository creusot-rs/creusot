
module AllZero_List_Type
  use prelude.UInt32
  use prelude.Int
  type t_list  =
    | C_Cons uint32 (t_list)
    | C_Nil
    
  function any_l (_ : 'b) : 'a
  let rec cons (input:t_list) (ret  (field_0:uint32) (field_1:t_list))= any
    [ good (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:t_list)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
  let rec nil (input:t_list) (ret  )= any [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ] 
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module AllZero_AllZero
  use AllZero_List_Type as AllZero_List_Type
  use prelude.Borrow
  use prelude.Snapshot
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (AllZero_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (AllZero_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (AllZero_List_Type.t_list)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (AllZero_List_Type.t_list)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.UInt32
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  function get'0 [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.t_list) (ix : int) : Core_Option_Option_Type.t_option uint32
    
   =
    [#"../all_zero.rs" 22 8 28 9] match self with
      | AllZero_List_Type.C_Cons x ls -> if ix = 0 then Core_Option_Option_Type.C_Some x else get'0 ls (ix - 1)
      | AllZero_List_Type.C_Nil -> Core_Option_Option_Type.C_None
      end
  let rec get'0 (self:AllZero_List_Type.t_list) (ix:int) (return'  (ret:Core_Option_Option_Type.t_option uint32))= any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {result = get'0 self ix} (! return' {result}) ]
    
  function len'0 [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.t_list) : int =
    [#"../all_zero.rs" 14 8 17 9] match self with
      | AllZero_List_Type.C_Cons _ ls -> 1 + len'0 ls
      | AllZero_List_Type.C_Nil -> 0
      end
  let rec len'0 (self:AllZero_List_Type.t_list) (return'  (ret:int))= any
    [ return' (result:int)-> {result = len'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec all_zero (l:borrowed (AllZero_List_Type.t_list)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [#"../all_zero.rs" 36 16 36 31] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &loop_l <- l ] (any [ any_ (_any:borrowed (AllZero_List_Type.t_list))-> (!  [ &l <- _any ] s1) ] )
      | s1 = bb2 ]
      
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [#"../all_zero.rs" 39 4 41 88] len'0 ( ^ loop_l) = len'0 ( * loop_l)
         -> len'0 ( ^ Snapshot.inner old_l) = len'0 ( * Snapshot.inner old_l)}
        {[@expl:loop invariant] [#"../all_zero.rs" 39 4 41 88] (forall i : int . 0 <= i /\ i < len'0 ( * loop_l)
         -> get'0 ( ^ loop_l) i = Core_Option_Option_Type.C_Some (0 : uint32))
         -> (forall i : int . 0 <= i /\ i < len'0 ( * Snapshot.inner old_l)
         -> get'0 ( ^ Snapshot.inner old_l) i = Core_Option_Option_Type.C_Some (0 : uint32))}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = any
            [ br0 (a:uint32) (b:AllZero_List_Type.t_list)-> { * loop_l = AllZero_List_Type.C_Cons a b} (! bb4)
            | br1 -> { * loop_l = AllZero_List_Type.C_Nil } (! bb6) ]
             ]
          
        | bb4 = s0 [ s0 = bb5 ] 
        | bb5 = s0
          [ s0 = AllZero_List_Type.cons { * loop_l}
              (fun (r0'0:uint32) (r1'0:AllZero_List_Type.t_list) ->
                Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id loop_l) 1}
                  (fun (_ret':borrowed uint32) ->
                     [ &value <- _ret' ] 
                    AllZero_List_Type.cons { * loop_l}
                      (fun (l_0'0:uint32) (l_1'0:AllZero_List_Type.t_list) ->
                        
                        [ &loop_l <- { loop_l with current = (AllZero_List_Type.C_Cons ( ^ value) l_1'0 : AllZero_List_Type.t_list) ; } ]
                        
                        s1)))
          | s1 = AllZero_List_Type.cons { * loop_l}
              (fun (r0'1:uint32) (r1'1:AllZero_List_Type.t_list) ->
                Borrow.borrow_final <AllZero_List_Type.t_list> {r1'1} {Borrow.inherit_id (Borrow.get_id loop_l) 2}
                  (fun (_ret':borrowed (AllZero_List_Type.t_list)) ->
                     [ &next <- _ret' ] 
                    AllZero_List_Type.cons { * loop_l}
                      (fun (l_0'1:uint32) (l_1'1:AllZero_List_Type.t_list) ->
                        
                        [ &loop_l <- { loop_l with current = (AllZero_List_Type.C_Cons l_0'1 ( ^ next) : AllZero_List_Type.t_list) ; } ]
                        
                        s2)))
          | s2 =  [ &value <- { value with current = ([#"../all_zero.rs" 44 17 44 18] (0 : uint32)) ; } ] s3
          | s3 = -{resolve'0 value}- s4
          | s4 = Borrow.borrow_mut <AllZero_List_Type.t_list> { * next}
              (fun (_ret':borrowed (AllZero_List_Type.t_list)) ->
                 [ &_13 <- _ret' ] 
                 [ &next <- { next with current = ( ^ _13) ; } ] 
                s5)
          | s5 = -{resolve'1 loop_l}- s6
          | s6 =  [ &loop_l <- _13 ] 
            (any [ any_ (_any:borrowed (AllZero_List_Type.t_list))-> (!  [ &_13 <- _any ] s7) ] )
          | s7 = -{resolve'2 next}- s8
          | s8 = bb2 ]
           ]
         ]
      
    | bb6 = s0
      [ s0 = -{resolve'1 loop_l}- s1 | s1 =  [ &_0 <- [#"../all_zero.rs" 43 4 46 5] () ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & l : borrowed (AllZero_List_Type.t_list) = l
    | & old_l : Snapshot.snap_ty (borrowed (AllZero_List_Type.t_list)) = any_l () : Snapshot.snap_ty (borrowed (AllZero_List_Type.t_list))
    | & loop_l : borrowed (AllZero_List_Type.t_list) = any_l () : borrowed (AllZero_List_Type.t_list)
    | & value : borrowed uint32 = any_l () : borrowed uint32
    | & next : borrowed (AllZero_List_Type.t_list) = any_l () : borrowed (AllZero_List_Type.t_list)
    | & _13 : borrowed (AllZero_List_Type.t_list) = any_l () : borrowed (AllZero_List_Type.t_list) ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../all_zero.rs" 33 10 33 34] len'0 ( * l) = len'0 ( ^ l)}
      {[@expl:postcondition] [#"../all_zero.rs" 32 0 32 77] forall i : int . 0 <= i /\ i < len'0 ( * l)
       -> get'0 ( ^ l) i = Core_Option_Option_Type.C_Some (0 : uint32)}
      (! return' {result}) ]
    
end
