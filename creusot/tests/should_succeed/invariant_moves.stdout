module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
end
module Alloc_Vec_Impl1_Pop_Interface
  type t   
  type a   
  use prelude.Prelude
  use Type
  val pop (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    requires {false}
    
end
module Alloc_Vec_Impl1_Pop
  type t   
  type a   
  use prelude.Prelude
  use Type
  val pop (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    requires {false}
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module InvariantMoves_TestInvariantMove_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val test_invariant_move (x : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)) : ()
end
module InvariantMoves_TestInvariantMove
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_option_option uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)
  clone Alloc_Vec_Impl1_Pop_Interface as Pop0 with type t = uint32, type a = Type.alloc_alloc_global
  let rec cfg test_invariant_move (x : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)) : () = 
  var _0 : ();
  var x_1 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : Type.core_option_option uint32;
  var _4 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _5 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _6 : isize;
  var x_7 : uint32;
  var _8 : ();
  var _9 : ();
  var _10 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant dummy { x_1 = x_1 };
    goto BB3
  }
  BB3 {
    _5 <- borrow_mut x_1;
    x_1 <-  ^ _5;
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _3 <- Pop0.pop _4;
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _5 };
    switch (_3)
      | Type.Core_Option_Option_Some _ -> goto BB5
      | _ -> goto BB7
      end
  }
  BB5 {
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve x_7 };
    x_7 <- Type.core_option_option_Some_0 _3;
    assume { Resolve1.resolve _3 };
    assume { Resolve3.resolve x_7 };
    _2 <- ();
    assume { Resolve4.resolve _2 };
    goto BB2
  }
  BB7 {
    assume { Resolve1.resolve _3 };
    _0 <- ();
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve x_1 };
    return _0
  }
  
end
