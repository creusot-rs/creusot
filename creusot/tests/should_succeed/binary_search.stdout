module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok('t)
    | Core_Result_Result_Err('e)
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some('t)
    
  type binarysearch_list 't = 
    | BinarySearch_List_Cons('t, binarysearch_list 't)
    | BinarySearch_List_Nil
    
end
module BinarySearch_LenLogic
  type t   
  use mach.int.Int
  use mach.int.Int32
  use Type
  function len_logic (l : Type.binarysearch_list t) : int = 
    match (l) with
      | Type.BinarySearch_List_Cons(_, ls) -> Int32.to_int (1 : int32) + len_logic ls
      | Type.BinarySearch_List_Nil -> Int32.to_int (0 : int32)
      end
end
module BinarySearch_Get
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  function get (l : Type.binarysearch_list t) (ix : int) : Type.core_option_option t = 
    match (l) with
      | Type.BinarySearch_List_Cons(t, ls) -> match (ix = Int32.to_int (0 : int32)) with
        | True -> Type.Core_Option_Option_Some(t)
        | False -> get ls (ix - Int32.to_int (1 : int32))
        end
      | Type.BinarySearch_List_Nil -> Type.Core_Option_Option_None
      end
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module Std_Process_Abort
  val abort () : ()
    ensures { false }
    
end
module BinarySearch_Impl0_Index
  type t   
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone BinarySearch_LenLogic as LenLogic0 with type t = t
  clone BinarySearch_Get as Get1 with type t = t
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = Type.binarysearch_list t
  clone CreusotContracts_Builtins_Resolve as Resolve4 with type self = isize
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = ()
  clone Std_Process_Abort as Abort6
  clone CreusotContracts_Builtins_Resolve as Resolve7 with type self = t
  clone CreusotContracts_Builtins_Resolve as Resolve8 with type self = bool
  clone CreusotContracts_Builtins_Resolve as Resolve9 with type self = Type.binarysearch_list t
  let rec cfg index (self : Type.binarysearch_list t) (ix : usize) : t
    requires {UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { Type.Core_Option_Option_Some(result) = Get1.get self (UInt64.to_int ix) }
    
   = 
  var _0 : t;
  var self_1 : Type.binarysearch_list t;
  var ix_2 : usize;
  var orig_ix_3 : usize;
  var l_4 : Type.binarysearch_list t;
  var _5 : ();
  var _8 : ();
  var _9 : isize;
  var t_10 : t;
  var ls_11 : Type.binarysearch_list t;
  var _12 : bool;
  var _13 : usize;
  var _14 : Type.binarysearch_list t;
  var _15 : Type.binarysearch_list t;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  {
    self_1 <- self;
    ix_2 <- ix;
    goto BB0
  }
  BB0 {
    assume { Resolve2.resolve orig_ix_3 };
    orig_ix_3 <- ix_2;
    assume { Resolve2.resolve orig_ix_3 };
    assume { Resolve3.resolve l_4 };
    l_4 <- self_1;
    assume { Resolve3.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant ix_valid { UInt64.to_int ix_2 < LenLogic0.len_logic l_4 };
    invariant res_get { Get1.get self_1 (UInt64.to_int orig_ix_3) = Get1.get l_4 (UInt64.to_int ix_2) };
    goto BB2
  }
  BB2 {
    switch (l_4)
      | Type.BinarySearch_List_Cons(_, _) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { Resolve4.resolve _9 };
    goto BB5
  }
  BB4 {
    assume { Resolve2.resolve ix_2 };
    assume { Resolve3.resolve l_4 };
    assume { Resolve4.resolve _9 };
    _5 <- ();
    assume { Resolve5.resolve _5 };
    absurd
  }
  BB5 {
    t_10 <- (let Type.BinarySearch_List_Cons(a, _) = l_4 in a);
    ls_11 <- (let Type.BinarySearch_List_Cons(_, a) = l_4 in a);
    assume { Resolve3.resolve l_4 };
    assume { Resolve2.resolve _13 };
    _13 <- ix_2;
    _12 <- _13 > (0 : usize);
    switch (_12)
      | False -> goto BB7
      | True -> goto BB6
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve7.resolve t_10 };
    assume { Resolve8.resolve _12 };
    _15 <- ls_11;
    assume { Resolve9.resolve ls_11 };
    _14 <- _15;
    assume { Resolve9.resolve _15 };
    assume { Resolve3.resolve l_4 };
    l_4 <- _14;
    ix_2 <- ix_2 - (1 : usize);
    _8 <- ();
    assume { Resolve5.resolve _8 };
    goto BB1
  }
  BB7 {
    assume { Resolve2.resolve ix_2 };
    assume { Resolve9.resolve ls_11 };
    assume { Resolve8.resolve _12 };
    _0 <- t_10;
    assume { Resolve7.resolve t_10 };
    return _0
  }
  
end
module BinarySearch_Impl0_Len
  type t   
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone BinarySearch_LenLogic as LenLogic0 with type t = t
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.binarysearch_list t
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Builtins_Resolve as Resolve4 with type self = usize
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = Type.binarysearch_list t
  let rec cfg len (self : Type.binarysearch_list t) : usize
    requires {LenLogic0.len_logic self <= Int32.to_int (1000000 : int32)}
    ensures { UInt64.to_int result = LenLogic0.len_logic self }
    ensures { result >= (0 : usize) }
    
   = 
  var _0 : usize;
  var self_1 : Type.binarysearch_list t;
  var len_2 : usize;
  var l_3 : Type.binarysearch_list t;
  var _4 : ();
  var _6 : ();
  var _7 : isize;
  var ls_8 : Type.binarysearch_list t;
  var _9 : Type.binarysearch_list t;
  var _10 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    len_2 <- (0 : usize);
    assume { Resolve1.resolve l_3 };
    l_3 <- self_1;
    assume { Resolve1.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant len_valid { UInt64.to_int len_2 + LenLogic0.len_logic l_3 = LenLogic0.len_logic self_1 };
    goto BB2
  }
  BB2 {
    switch (l_3)
      | Type.BinarySearch_List_Cons(_, _) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { Resolve2.resolve _7 };
    goto BB5
  }
  BB4 {
    assume { Resolve1.resolve l_3 };
    assume { Resolve2.resolve _7 };
    _4 <- ();
    assume { Resolve3.resolve _4 };
    assume { Resolve4.resolve _0 };
    _0 <- len_2;
    assume { Resolve4.resolve len_2 };
    return _0
  }
  BB5 {
    ls_8 <- (let Type.BinarySearch_List_Cons(_, a) = l_3 in a);
    assume { Resolve1.resolve l_3 };
    len_2 <- len_2 + (1 : usize);
    _9 <- ls_8;
    assume { Resolve5.resolve ls_8 };
    assume { Resolve1.resolve l_3 };
    l_3 <- _9;
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  
end
module BinarySearch_IsSorted
  use mach.int.Int
  use Type
  use mach.int.UInt32
  clone BinarySearch_Get as Get0 with type t = uint32
  function is_sorted (l : Type.binarysearch_list uint32) : bool = 
    forall x2 : (int) . forall x1 : (int) . x1 <= x2 -> match ((Get0.get l x1, Get0.get l x2)) with
      | (Type.Core_Option_Option_Some(v1), Type.Core_Option_Option_Some(v2)) -> v1 <= v2
      | (Type.Core_Option_Option_None, Type.Core_Option_Option_None) -> true
      | _ -> false
      end
end
module BinarySearch_GetDefault
  type t   
  use Type
  use mach.int.Int
  clone BinarySearch_Get as Get0 with type t = t
  function get_default (l : Type.binarysearch_list t) (ix : int) (def : t) : t = 
    match (Get0.get l ix) with
      | Type.Core_Option_Option_Some(v) -> v
      | Type.Core_Option_Option_None -> def
      end
end
module BinarySearch_BinarySearch
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone BinarySearch_LenLogic as LenLogic0 with type t = uint32
  clone BinarySearch_GetDefault as GetDefault1 with type t = uint32
  clone BinarySearch_Impl0_Len as Len2 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = Type.binarysearch_list uint32
  clone CreusotContracts_Builtins_Resolve as Resolve4 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = bool
  clone CreusotContracts_Builtins_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Builtins_Resolve as Resolve7 with type self = usize
  clone BinarySearch_Impl0_Index as Index8 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve9 with type self = uint32
  clone BinarySearch_IsSorted as IsSorted10
  clone BinarySearch_Get as Get11 with type t = uint32
  let rec cfg binary_search (arr : Type.binarysearch_list uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {IsSorted10.is_sorted arr}
    requires {LenLogic0.len_logic arr <= Int32.to_int (1000000 : int32)}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err(x) -> (forall i : (int) . UInt64.to_int x < i && i < LenLogic0.len_logic arr -> elem < GetDefault1.get_default arr i (0 : uint32)) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err(x) -> (forall i : (int) . Int32.to_int (0 : int32) <= i && i < UInt64.to_int x -> GetDefault1.get_default arr i (0 : uint32) < elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok(x) -> Get11.get arr (UInt64.to_int x) = Type.Core_Option_Option_Some(elem) }
    
   = 
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.binarysearch_list uint32;
  var elem_2 : uint32;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.binarysearch_list uint32;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.binarysearch_list uint32;
  var base_10 : usize;
  var _11 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var half_18 : usize;
  var _19 : usize;
  var _20 : bool;
  var mid_21 : usize;
  var _22 : usize;
  var _23 : usize;
  var _24 : usize;
  var _25 : bool;
  var _26 : uint32;
  var _27 : uint32;
  var _28 : Type.binarysearch_list uint32;
  var _29 : usize;
  var _30 : uint32;
  var _31 : usize;
  var _32 : ();
  var cmp_33 : uint32;
  var _34 : uint32;
  var _35 : Type.binarysearch_list uint32;
  var _36 : usize;
  var _37 : bool;
  var _38 : uint32;
  var _39 : uint32;
  var _40 : usize;
  var _41 : bool;
  var _42 : uint32;
  var _43 : uint32;
  var _44 : usize;
  var _45 : usize;
  var _46 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    _6 <- arr_1;
    _5 <- Len2.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | True -> goto BB2
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve3.resolve arr_1 };
    assume { Resolve4.resolve elem_2 };
    assume { Resolve5.resolve _4 };
    _0 <- Type.Core_Result_Result_Err((0 : usize));
    goto BB22
  }
  BB3 {
    assume { Resolve5.resolve _4 };
    _3 <- ();
    assume { Resolve6.resolve _3 };
    _9 <- arr_1;
    size_8 <- Len2.len _9;
    goto BB4
  }
  BB4 {
    base_10 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant size_valid { UInt64.to_int size_8 + UInt64.to_int base_10 <= LenLogic0.len_logic arr_1 };
    invariant in_interval { GetDefault1.get_default arr_1 (UInt64.to_int base_10) (0 : uint32) <= elem_2 && elem_2 <= GetDefault1.get_default arr_1 (UInt64.to_int base_10 + UInt64.to_int size_8) (0 : uint32) };
    invariant size_pos { size_8 > (0 : usize) };
    goto BB6
  }
  BB6 {
    assume { Resolve7.resolve _17 };
    _17 <- size_8;
    _16 <- _17 > (1 : usize);
    switch (_16)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve5.resolve _16 };
    goto BB9
  }
  BB8 {
    assume { Resolve7.resolve size_8 };
    assume { Resolve5.resolve _16 };
    _11 <- ();
    assume { Resolve6.resolve _11 };
    _35 <- arr_1;
    assume { Resolve3.resolve arr_1 };
    assume { Resolve7.resolve _36 };
    _36 <- base_10;
    _34 <- Index8.index _35 _36;
    goto BB15
  }
  BB9 {
    assume { Resolve7.resolve _19 };
    _19 <- size_8;
    _20 <- (2 : usize) = (0 : usize);
    assert { not _20 };
    goto BB10
  }
  BB10 {
    assume { Resolve5.resolve _20 };
    half_18 <- _19 / (2 : usize);
    assume { Resolve7.resolve _22 };
    _22 <- base_10;
    assume { Resolve7.resolve _23 };
    _23 <- half_18;
    mid_21 <- _22 + _23;
    _28 <- arr_1;
    assume { Resolve7.resolve _29 };
    _29 <- mid_21;
    _27 <- Index8.index _28 _29;
    goto BB11
  }
  BB11 {
    assume { Resolve4.resolve _26 };
    _26 <- _27;
    assume { Resolve9.resolve _27 };
    assume { Resolve4.resolve _30 };
    _30 <- elem_2;
    _25 <- _26 > _30;
    switch (_25)
      | False -> goto BB13
      | True -> goto BB12
      | _ -> goto BB12
      end
  }
  BB12 {
    assume { Resolve7.resolve mid_21 };
    assume { Resolve5.resolve _25 };
    assume { Resolve7.resolve _24 };
    _24 <- base_10;
    assume { Resolve7.resolve base_10 };
    goto BB14
  }
  BB13 {
    assume { Resolve7.resolve base_10 };
    assume { Resolve5.resolve _25 };
    assume { Resolve7.resolve _24 };
    _24 <- mid_21;
    assume { Resolve7.resolve mid_21 };
    goto BB14
  }
  BB14 {
    assume { Resolve7.resolve base_10 };
    base_10 <- _24;
    assume { Resolve7.resolve _31 };
    _31 <- half_18;
    assume { Resolve7.resolve half_18 };
    size_8 <- size_8 - _31;
    assume { Resolve7.resolve _31 };
    _15 <- ();
    assume { Resolve6.resolve _15 };
    goto BB5
  }
  BB15 {
    assume { Resolve4.resolve cmp_33 };
    cmp_33 <- _34;
    assume { Resolve9.resolve _34 };
    assume { Resolve4.resolve _38 };
    _38 <- cmp_33;
    assume { Resolve4.resolve _39 };
    _39 <- elem_2;
    _37 <- _38 = _39;
    switch (_37)
      | False -> goto BB17
      | True -> goto BB16
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve4.resolve elem_2 };
    assume { Resolve4.resolve cmp_33 };
    assume { Resolve5.resolve _37 };
    assume { Resolve7.resolve _40 };
    _40 <- base_10;
    assume { Resolve7.resolve base_10 };
    _0 <- Type.Core_Result_Result_Ok(_40);
    goto BB21
  }
  BB17 {
    assume { Resolve5.resolve _37 };
    assume { Resolve4.resolve _42 };
    _42 <- cmp_33;
    assume { Resolve4.resolve cmp_33 };
    assume { Resolve4.resolve _43 };
    _43 <- elem_2;
    assume { Resolve4.resolve elem_2 };
    _41 <- _42 < _43;
    switch (_41)
      | False -> goto BB19
      | True -> goto BB18
      | _ -> goto BB18
      end
  }
  BB18 {
    assume { Resolve5.resolve _41 };
    assume { Resolve7.resolve _45 };
    _45 <- base_10;
    assume { Resolve7.resolve base_10 };
    _44 <- _45 + (1 : usize);
    _0 <- Type.Core_Result_Result_Err(_44);
    goto BB20
  }
  BB19 {
    assume { Resolve5.resolve _41 };
    assume { Resolve7.resolve _46 };
    _46 <- base_10;
    assume { Resolve7.resolve base_10 };
    _0 <- Type.Core_Result_Result_Err(_46);
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    return _0
  }
  
end
module BinarySearch_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
