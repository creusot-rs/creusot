module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type binarysearch_list 't = 
    | BinarySearch_List_Cons 't (binarysearch_list 't)
    | BinarySearch_List_Nil
    
  function binarysearch_list_Cons_0 (self : binarysearch_list 't) : 't
  val binarysearch_list_Cons_0 (self : binarysearch_list 't) : 't
    ensures { result = binarysearch_list_Cons_0 self }
    
  axiom binarysearch_list_Cons_0_acc : forall a : 't, b : binarysearch_list 't . binarysearch_list_Cons_0 (BinarySearch_List_Cons a b : binarysearch_list 't) = a
  function binarysearch_list_Cons_1 (self : binarysearch_list 't) : binarysearch_list 't
  val binarysearch_list_Cons_1 (self : binarysearch_list 't) : binarysearch_list 't
    ensures { result = binarysearch_list_Cons_1 self }
    
  axiom binarysearch_list_Cons_1_acc : forall a : 't, b : binarysearch_list 't . binarysearch_list_Cons_1 (BinarySearch_List_Cons a b : binarysearch_list 't) = b
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
end
module BinarySearch_Main_Interface
  val main [@cfg:stackify] () : ()
end
module BinarySearch_Main
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module BinarySearch_Impl0_LenLogic_Interface
  type t   
  use Type
  use mach.int.Int
  function len_logic (self : Type.binarysearch_list t) : int
end
module BinarySearch_Impl0_LenLogic
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  function len_logic (self : Type.binarysearch_list t) : int = 
    match (self) with
      | Type.BinarySearch_List_Cons _ ls -> 1 + len_logic ls
      | Type.BinarySearch_List_Nil -> 0
      end
end
module BinarySearch_Impl0_Get_Interface
  type t   
  use Type
  use mach.int.Int
  function get (self : Type.binarysearch_list t) (ix : int) : Type.core_option_option t
end
module BinarySearch_Impl0_Get
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  function get (self : Type.binarysearch_list t) (ix : int) : Type.core_option_option t = 
    match (self) with
      | Type.BinarySearch_List_Cons t ls -> if ix = 0 then Type.Core_Option_Option_Some t else get ls (ix - 1)
      | Type.BinarySearch_List_Nil -> Type.Core_Option_Option_None
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module BinarySearch_Impl0_Index_Interface
  type t   
  use mach.int.UInt64
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = t
  clone BinarySearch_Impl0_LenLogic_Interface as LenLogic0 with type t = t
  val index [@cfg:stackify] (self : Type.binarysearch_list t) (ix : usize) : t
    requires {UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { Type.Core_Option_Option_Some result = Get0.get self (UInt64.to_int ix) }
    
end
module BinarySearch_Impl0_Index
  type t   
  use mach.int.UInt64
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone BinarySearch_Impl0_Get as Get0 with type t = t
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with type t = t
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.binarysearch_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.binarysearch_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  let rec cfg index [@cfg:stackify] (self : Type.binarysearch_list t) (ix : usize) : t
    requires {UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { Type.Core_Option_Option_Some result = Get0.get self (UInt64.to_int ix) }
    
   = 
  var _0 : t;
  var self_1 : Type.binarysearch_list t;
  var ix_2 : usize;
  var orig_ix_3 : usize;
  var l_4 : Type.binarysearch_list t;
  var _5 : ();
  var _6 : ();
  var _7 : isize;
  var t_8 : t;
  var ls_9 : Type.binarysearch_list t;
  var _10 : bool;
  var _11 : usize;
  var _12 : Type.binarysearch_list t;
  var _13 : Type.binarysearch_list t;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : ();
  {
    self_1 <- self;
    ix_2 <- ix;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve orig_ix_3 };
    orig_ix_3 <- ix_2;
    assume { Resolve0.resolve orig_ix_3 };
    assume { Resolve1.resolve l_4 };
    l_4 <- self_1;
    assume { Resolve1.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant ix_valid { UInt64.to_int ix_2 < LenLogic0.len_logic l_4 };
    invariant res_get { Get0.get self_1 (UInt64.to_int orig_ix_3) = Get0.get l_4 (UInt64.to_int ix_2) };
    switch (l_4)
      | Type.BinarySearch_List_Cons _ _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB2 {
    t_8 <- Type.binarysearch_list_Cons_0 l_4;
    ls_9 <- Type.binarysearch_list_Cons_1 l_4;
    assume { Resolve1.resolve l_4 };
    assume { Resolve0.resolve _11 };
    _11 <- ix_2;
    _10 <- _11 > (0 : usize);
    switch (_10)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve3.resolve t_8 };
    _13 <- ls_9;
    assume { Resolve4.resolve ls_9 };
    _12 <- _13;
    assume { Resolve4.resolve _13 };
    assume { Resolve1.resolve l_4 };
    l_4 <- _12;
    ix_2 <- ix_2 - (1 : usize);
    _6 <- ();
    assume { Resolve2.resolve _6 };
    goto BB1
  }
  BB4 {
    assume { Resolve0.resolve ix_2 };
    assume { Resolve4.resolve ls_9 };
    _0 <- t_8;
    assume { Resolve3.resolve t_8 };
    return _0
  }
  BB5 {
    assume { Resolve0.resolve ix_2 };
    assume { Resolve1.resolve l_4 };
    _5 <- ();
    assume { Resolve2.resolve _5 };
    absurd
  }
  
end
module BinarySearch_Impl0_Len_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone BinarySearch_Impl0_LenLogic_Interface as LenLogic0 with type t = t
  val len [@cfg:stackify] (self : Type.binarysearch_list t) : usize
    requires {LenLogic0.len_logic self <= 1000000}
    ensures { UInt64.to_int result = LenLogic0.len_logic self }
    ensures { result >= (0 : usize) }
    
end
module BinarySearch_Impl0_Len
  type t   
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with type t = t
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.binarysearch_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.binarysearch_list t
  let rec cfg len [@cfg:stackify] (self : Type.binarysearch_list t) : usize
    requires {LenLogic0.len_logic self <= 1000000}
    ensures { UInt64.to_int result = LenLogic0.len_logic self }
    ensures { result >= (0 : usize) }
    
   = 
  var _0 : usize;
  var self_1 : Type.binarysearch_list t;
  var len_2 : usize;
  var l_3 : Type.binarysearch_list t;
  var _4 : ();
  var _5 : ();
  var _6 : isize;
  var ls_7 : Type.binarysearch_list t;
  var _8 : Type.binarysearch_list t;
  var _9 : ();
  var _10 : ();
  var _11 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    len_2 <- (0 : usize);
    assume { Resolve0.resolve l_3 };
    l_3 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant len_valid { UInt64.to_int len_2 + LenLogic0.len_logic l_3 = LenLogic0.len_logic self_1 };
    switch (l_3)
      | Type.BinarySearch_List_Cons _ _ -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    ls_7 <- Type.binarysearch_list_Cons_1 l_3;
    assume { Resolve0.resolve l_3 };
    len_2 <- len_2 + (1 : usize);
    _8 <- ls_7;
    assume { Resolve3.resolve ls_7 };
    assume { Resolve0.resolve l_3 };
    l_3 <- _8;
    _5 <- ();
    assume { Resolve1.resolve _5 };
    goto BB1
  }
  BB3 {
    assume { Resolve0.resolve l_3 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    assume { Resolve2.resolve _0 };
    _0 <- len_2;
    assume { Resolve2.resolve len_2 };
    return _0
  }
  
end
module BinarySearch_Impl0_GetDefault_Interface
  type t   
  use Type
  use mach.int.Int
  function get_default (self : Type.binarysearch_list t) (ix : int) (def : t) : t
end
module BinarySearch_Impl0_GetDefault
  type t   
  use Type
  use mach.int.Int
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = t
  function get_default (self : Type.binarysearch_list t) (ix : int) (def : t) : t = 
    match (Get0.get self ix) with
      | Type.Core_Option_Option_Some v -> v
      | Type.Core_Option_Option_None -> def
      end
end
module BinarySearch_Impl1_IsSorted_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  predicate is_sorted (self : Type.binarysearch_list uint32)
end
module BinarySearch_Impl1_IsSorted
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = uint32
  predicate is_sorted (self : Type.binarysearch_list uint32) = 
    forall x2 : (int) . forall x1 : (int) . x1 <= x2 -> match ((Get0.get self x1, Get0.get self x2)) with
      | (Type.Core_Option_Option_Some v1, Type.Core_Option_Option_Some v2) -> v1 <= v2
      | (Type.Core_Option_Option_None, Type.Core_Option_Option_None) -> true
      | _ -> false
      end
end
module BinarySearch_BinarySearch_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  use mach.int.UInt32
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = uint32
  clone BinarySearch_Impl0_GetDefault_Interface as GetDefault0 with type t = uint32
  clone BinarySearch_Impl0_LenLogic_Interface as LenLogic0 with type t = uint32
  clone BinarySearch_Impl1_IsSorted_Interface as IsSorted0
  val binary_search [@cfg:stackify] (arr : Type.binarysearch_list uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {IsSorted0.is_sorted arr}
    requires {LenLogic0.len_logic arr <= 1000000}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (int) . UInt64.to_int x < i && i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr i (0 : uint32)) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (int) . 0 <= i && i < UInt64.to_int x -> GetDefault0.get_default arr i (0 : uint32) < elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Get0.get arr (UInt64.to_int x) = Type.Core_Option_Option_Some elem }
    
end
module BinarySearch_BinarySearch
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone BinarySearch_Impl0_Get as Get0 with type t = uint32
  clone BinarySearch_Impl1_IsSorted as IsSorted0 with function Get0.get = Get0.get
  clone BinarySearch_Impl0_GetDefault as GetDefault0 with type t = uint32, function Get0.get = Get0.get
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.binarysearch_list uint32
  clone BinarySearch_Impl0_Index_Interface as Index0 with type t = uint32,
  function LenLogic0.len_logic = LenLogic0.len_logic, function Get0.get = Get0.get
  clone BinarySearch_Impl0_Len_Interface as Len0 with type t = uint32,
  function LenLogic0.len_logic = LenLogic0.len_logic
  let rec cfg binary_search [@cfg:stackify] (arr : Type.binarysearch_list uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {IsSorted0.is_sorted arr}
    requires {LenLogic0.len_logic arr <= 1000000}
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (int) . UInt64.to_int x < i && i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr i (0 : uint32)) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (int) . 0 <= i && i < UInt64.to_int x -> GetDefault0.get_default arr i (0 : uint32) < elem) }
    ensures { forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Get0.get arr (UInt64.to_int x) = Type.Core_Option_Option_Some elem }
    
   = 
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.binarysearch_list uint32;
  var elem_2 : uint32;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.binarysearch_list uint32;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.binarysearch_list uint32;
  var base_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var half_15 : usize;
  var _16 : usize;
  var _17 : bool;
  var mid_18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : bool;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : Type.binarysearch_list uint32;
  var _26 : usize;
  var _27 : uint32;
  var _28 : usize;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var cmp_32 : uint32;
  var _33 : uint32;
  var _34 : Type.binarysearch_list uint32;
  var _35 : usize;
  var _36 : bool;
  var _37 : uint32;
  var _38 : uint32;
  var _39 : usize;
  var _40 : bool;
  var _41 : uint32;
  var _42 : uint32;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    _6 <- arr_1;
    _5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve arr_1 };
    assume { Resolve1.resolve elem_2 };
    _0 <- Type.Core_Result_Result_Err (0 : usize);
    goto BB20
  }
  BB3 {
    _3 <- ();
    assume { Resolve2.resolve _3 };
    _9 <- arr_1;
    size_8 <- Len0.len _9;
    goto BB4
  }
  BB4 {
    base_10 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant size_valid { UInt64.to_int size_8 + UInt64.to_int base_10 <= LenLogic0.len_logic arr_1 };
    invariant in_interval { GetDefault0.get_default arr_1 (UInt64.to_int base_10) (0 : uint32) <= elem_2 && elem_2 <= GetDefault0.get_default arr_1 (UInt64.to_int base_10 + UInt64.to_int size_8) (0 : uint32) };
    invariant size_pos { size_8 > (0 : usize) };
    assume { Resolve3.resolve _14 };
    _14 <- size_8;
    _13 <- _14 > (1 : usize);
    switch (_13)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve3.resolve _16 };
    _16 <- size_8;
    _17 <- (2 : usize) = (0 : usize);
    assert { not _17 };
    goto BB7
  }
  BB7 {
    half_15 <- _16 / (2 : usize);
    assume { Resolve3.resolve _19 };
    _19 <- base_10;
    assume { Resolve3.resolve _20 };
    _20 <- half_15;
    mid_18 <- _19 + _20;
    _25 <- arr_1;
    assume { Resolve3.resolve _26 };
    _26 <- mid_18;
    _24 <- Index0.index _25 _26;
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve _23 };
    _23 <- _24;
    assume { Resolve4.resolve _24 };
    assume { Resolve1.resolve _27 };
    _27 <- elem_2;
    _22 <- _23 > _27;
    switch (_22)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve3.resolve mid_18 };
    assume { Resolve3.resolve _21 };
    _21 <- base_10;
    assume { Resolve3.resolve base_10 };
    goto BB11
  }
  BB10 {
    assume { Resolve3.resolve base_10 };
    assume { Resolve3.resolve _21 };
    _21 <- mid_18;
    assume { Resolve3.resolve mid_18 };
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve base_10 };
    base_10 <- _21;
    assume { Resolve3.resolve _28 };
    _28 <- half_15;
    assume { Resolve3.resolve half_15 };
    size_8 <- size_8 - _28;
    _12 <- ();
    assume { Resolve2.resolve _12 };
    goto BB5
  }
  BB12 {
    assume { Resolve3.resolve size_8 };
    _11 <- ();
    assume { Resolve2.resolve _11 };
    _34 <- arr_1;
    assume { Resolve0.resolve arr_1 };
    assume { Resolve3.resolve _35 };
    _35 <- base_10;
    _33 <- Index0.index _34 _35;
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve cmp_32 };
    cmp_32 <- _33;
    assume { Resolve4.resolve _33 };
    assume { Resolve1.resolve _37 };
    _37 <- cmp_32;
    assume { Resolve1.resolve _38 };
    _38 <- elem_2;
    _36 <- _37 = _38;
    switch (_36)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    assume { Resolve1.resolve elem_2 };
    assume { Resolve1.resolve cmp_32 };
    assume { Resolve3.resolve _39 };
    _39 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Ok _39;
    goto BB19
  }
  BB15 {
    assume { Resolve1.resolve _41 };
    _41 <- cmp_32;
    assume { Resolve1.resolve cmp_32 };
    assume { Resolve1.resolve _42 };
    _42 <- elem_2;
    assume { Resolve1.resolve elem_2 };
    _40 <- _41 < _42;
    switch (_40)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve3.resolve _44 };
    _44 <- base_10;
    assume { Resolve3.resolve base_10 };
    _43 <- _44 + (1 : usize);
    _0 <- Type.Core_Result_Result_Err _43;
    goto BB18
  }
  BB17 {
    assume { Resolve3.resolve _45 };
    _45 <- base_10;
    assume { Resolve3.resolve base_10 };
    _0 <- Type.Core_Result_Result_Err _45;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
