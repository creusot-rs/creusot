
module TypeConstructors_B_X_Type
  type t_x  =
    | C_A
    | C_B
    | C_C
  
  function any_l (_ : 'b) : 'a
  
  let rec a (input:t_x) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  
  let rec b (input:t_x) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ] 
  
  let rec c (input:t_x) (ret  )= any [ good -> {C_C  = input} (! ret) | bad -> {C_C  <> input} {false} any ] 
end
module TypeConstructors_F
  use prelude.prelude.Intrinsic
  
  use TypeConstructors_B_X_Type as X'0
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = s0 [ s0 =  [ &_3 <- X'0.C_B ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & _3 : X'0.t_x = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
