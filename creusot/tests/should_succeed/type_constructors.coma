
module TypeConstructors_B_X_Type
  type t_x  =
    | C_A
    | C_B
    | C_C
    
  function any_l (_ : 'b) : 'a
  let rec a (input:t_x) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  let rec b (input:t_x) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ] 
  let rec c (input:t_x) (ret  )= any [ good -> {C_C  = input} (! ret) | bad -> {C_C  <> input} {false} any ] 
end
module TypeConstructors_F
  use prelude.Intrinsic
  use TypeConstructors_B_X_Type as TypeConstructors_B_X_Type
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- TypeConstructors_B_X_Type.C_B ] s1
      | s1 =  [ &_0 <- [#"../type_constructors.rs" 17 11 20 1] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & _3 : TypeConstructors_B_X_Type.t_x = any_l () : TypeConstructors_B_X_Type.t_x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
