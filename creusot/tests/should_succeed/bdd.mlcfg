
module Bdd_Bumpalo_Bump_Type
  type t_bump
end
module Bdd_Bumpalo_Impl0_Alloc_Interface
  type t
  use prelude.Borrow
  use Bdd_Bumpalo_Bump_Type as Bdd_Bumpalo_Bump_Type
  val alloc [#"../bdd.rs" 18 8 18 48] (self : Bdd_Bumpalo_Bump_Type.t_bump) (val' : t) : borrowed t
    ensures { [#"../bdd.rs" 17 18 17 32]  * result = val' }
    
end
module Bdd_Hashmap_MyHashMap_Type
  type t_myhashmap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module Bdd_Hashmap_Impl0_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  function shallow_model [#"../bdd.rs" 46 8 46 54] (self : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module Bdd_Hashmap_Impl0_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  function shallow_model [#"../bdd.rs" 46 8 46 54] (self : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
  val shallow_model [#"../bdd.rs" 46 8 46 54] (self : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module Bdd_Hashmap_Impl0_ShallowModel
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  function shallow_model [#"../bdd.rs" 46 8 46 54] (self : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
  val shallow_model [#"../bdd.rs" 46 8 46 54] (self : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 96 8 96 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Bdd_Hashmap_Impl1_Add_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use map.Map
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val add [#"../bdd.rs" 54 8 54 45] (self : borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v)) (key : k) (val' : v) : ()
    ensures { [#"../bdd.rs" 52 8 52 128] forall i : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model ( ^ self)) i = (if i = DeepModel0.deep_model key then
      Core_Option_Option_Type.C_Some val'
    else
      Map.get (ShallowModel1.shallow_model self) i
    ) }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 78 8 78 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 69 8 69 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Bdd_Hashmap_Impl1_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  val get [#"../bdd.rs" 63 8 63 65] (self : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v) (key : k) : Core_Option_Option_Type.t_option v
    ensures { [#"../bdd.rs" 58 18 61 9] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    
end
module Bdd_Hashmap_Impl1_New_Interface
  type k
  type v
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val new [#"../bdd.rs" 69 8 69 28] (_1 : ()) : Bdd_Hashmap_MyHashMap_Type.t_myhashmap k v
    ensures { [#"../bdd.rs" 67 18 67 47] ShallowModel0.shallow_model result = Const.const (Core_Option_Option_Type.C_None) }
    
end
module Bdd_Hashmap_Hash_HashLog_Stub
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../bdd.rs" 34 8 34 49] (_1 : DeepModelTy0.deepModelTy) : int
end
module Bdd_Hashmap_Hash_HashLog_Interface
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../bdd.rs" 34 8 34 49] (_1 : DeepModelTy0.deepModelTy) : int
  val hash_log [#"../bdd.rs" 34 8 34 49] (_1 : DeepModelTy0.deepModelTy) : int
    ensures { result = hash_log _1 }
    
end
module Bdd_Hashmap_Hash_HashLog
  type self
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function hash_log [#"../bdd.rs" 34 8 34 49] (_1 : DeepModelTy0.deepModelTy) : int
  val hash_log [#"../bdd.rs" 34 8 34 49] (_1 : DeepModelTy0.deepModelTy) : int
    ensures { result = hash_log _1 }
    
end
module Core_Num_Impl9_Max_Stub
  use prelude.Int
  use prelude.UInt64
  val constant mAX'  : uint64
end
module Core_Num_Impl9_Max
  use prelude.Int
  use prelude.UInt64
  let constant mAX'  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : uint64)
end
module Bdd_Hashmap_Impl2_HashLog_Stub
  type u
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  function hash_log [#"../bdd.rs" 82 8 82 48] (x : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)) : int
end
module Bdd_Hashmap_Impl2_HashLog_Interface
  type u
  type v
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  function hash_log [#"../bdd.rs" 82 8 82 48] (x : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)) : int
  val hash_log [#"../bdd.rs" 82 8 82 48] (x : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)) : int
    ensures { result = hash_log x }
    
end
module Bdd_Hashmap_Impl2_HashLog
  type u
  type v
  use prelude.Int
  use prelude.UInt64
  clone Core_Num_Impl9_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = v
  clone Bdd_Hashmap_Hash_HashLog_Stub as HashLog1 with
    type self = v,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  clone Bdd_Hashmap_Hash_HashLog_Stub as HashLog0 with
    type self = u,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function hash_log [#"../bdd.rs" 82 8 82 48] (x : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)) : int =
    [#"../bdd.rs" 83 24 83 84] mod (HashLog0.hash_log (let (a, _) = x in a) + HashLog1.hash_log (let (_, a) = x in a) * 17) (UInt64.to_int Max0.mAX' + 1)
  val hash_log [#"../bdd.rs" 82 8 82 48] (x : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)) : int
    ensures { result = hash_log x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Bdd_Hashmap_Hash_Hash_Interface
  type self
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone Bdd_Hashmap_Hash_HashLog_Stub as HashLog0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val hash [#"../bdd.rs" 31 8 31 30] (self : self) : uint64
    ensures { [#"../bdd.rs" 30 18 30 62] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
end
module Core_Num_Impl9_Bits_Stub
  use prelude.Int
  use prelude.UInt32
  val constant bITS'  : uint32
end
module Core_Num_Impl9_Bits
  use prelude.Int
  use prelude.UInt32
  let constant bITS'  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    (64 : uint32)
end
module Core_Num_Impl9_Min_Stub
  use prelude.Int
  use prelude.UInt64
  val constant mIN'  : uint64
end
module Core_Num_Impl9_Min
  use prelude.Int
  use prelude.UInt64
  let constant mIN'  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (0 : uint64)
end
module Core_Num_Impl9_WrappingMul_Interface
  use prelude.UInt64
  use prelude.Int
  use prelude.UInt32
  use int.Power
  use int.EuclideanDivision
  clone Core_Num_Impl9_Max_Stub as Max0
  clone Core_Num_Impl9_Min_Stub as Min0
  clone Core_Num_Impl9_Bits_Stub as Bits0
  val wrapping_mul (self : uint64) (rhs : uint64) : uint64
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 135 20 135 93] UInt64.to_int result = EuclideanDivision.mod (UInt64.to_int self * UInt64.to_int rhs) (Power.power 2 (UInt32.to_int Bits0.bITS')) + UInt64.to_int Min0.mIN' }
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 138 16 141 18] UInt64.to_int self * UInt64.to_int rhs >= UInt64.to_int Min0.mIN' /\ UInt64.to_int self * UInt64.to_int rhs <= UInt64.to_int Max0.mAX' -> UInt64.to_int result = UInt64.to_int self * UInt64.to_int rhs }
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 145 16 149 18] UInt64.to_int self * UInt64.to_int rhs < UInt64.to_int Min0.mIN' -> (exists k : int . k > 0 /\ UInt64.to_int result = UInt64.to_int self * UInt64.to_int rhs + k * (UInt64.to_int Max0.mAX' - UInt64.to_int Min0.mIN' + 1)) }
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 150 16 154 18] UInt64.to_int self * UInt64.to_int rhs > UInt64.to_int Max0.mAX' -> (exists k : int . k > 0 /\ UInt64.to_int result = UInt64.to_int self * UInt64.to_int rhs - k * (UInt64.to_int Max0.mAX' - UInt64.to_int Min0.mIN' + 1)) }
    
end
module Core_Num_Impl9_WrappingAdd_Interface
  use prelude.UInt64
  use prelude.Int
  use prelude.UInt32
  use int.Power
  use int.EuclideanDivision
  clone Core_Num_Impl9_Max_Stub as Max0
  clone Core_Num_Impl9_Min_Stub as Min0
  clone Core_Num_Impl9_Bits_Stub as Bits0
  val wrapping_add (self : uint64) (rhs : uint64) : uint64
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 135 20 135 93] UInt64.to_int result = EuclideanDivision.mod (UInt64.to_int self + UInt64.to_int rhs) (Power.power 2 (UInt32.to_int Bits0.bITS')) + UInt64.to_int Min0.mIN' }
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 138 16 141 18] UInt64.to_int self + UInt64.to_int rhs >= UInt64.to_int Min0.mIN' /\ UInt64.to_int self + UInt64.to_int rhs <= UInt64.to_int Max0.mAX' -> UInt64.to_int result = UInt64.to_int self + UInt64.to_int rhs }
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 145 16 149 18] UInt64.to_int self + UInt64.to_int rhs < UInt64.to_int Min0.mIN' -> (exists k : int . k > 0 /\ UInt64.to_int result = UInt64.to_int self + UInt64.to_int rhs + k * (UInt64.to_int Max0.mAX' - UInt64.to_int Min0.mIN' + 1)) }
    ensures { [#"../../../../creusot-contracts/src/std/num.rs" 150 16 154 18] UInt64.to_int self + UInt64.to_int rhs > UInt64.to_int Max0.mAX' -> (exists k : int . k > 0 /\ UInt64.to_int result = UInt64.to_int self + UInt64.to_int rhs - k * (UInt64.to_int Max0.mAX' - UInt64.to_int Min0.mIN' + 1)) }
    
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel_Stub
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel_Interface
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
  val deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Tuples_Impl4_DeepModel
  type a
  type b
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = b
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = b,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy) =
    [#"../../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57] (DeepModel0.deep_model (let (a, _) = self in a), DeepModel1.deep_model (let (_, a) = self in a))
  val deep_model (self : (a, b)) : (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
    ensures { result = deep_model self }
    
end
module Bdd_Hashmap_Impl2_Hash_Interface
  type u
  type v
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  clone Bdd_Hashmap_Impl2_HashLog_Stub as HashLog0 with
    type u = u,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = (u, v),
    type DeepModelTy0.deepModelTy = (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy)
  val hash [#"../bdd.rs" 76 8 76 29] (self : (u, v)) : uint64
    ensures { [#"../bdd.rs" 75 18 75 62] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
end
module Bdd_Hashmap_Impl2_Hash
  type u
  type v
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = v
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel5 with
    type self = v,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel4 with
    type self = u,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Tuples_Impl4_DeepModel as DeepModel3 with
    type a = u,
    type b = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  clone Core_Num_Impl9_Max as Max0
  clone Core_Num_Impl9_Min as Min0
  clone Core_Num_Impl9_Bits as Bits0
  clone Bdd_Hashmap_Hash_HashLog_Interface as HashLog2 with
    type self = v,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2 with
    type t = v,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone Bdd_Hashmap_Hash_HashLog_Interface as HashLog1 with
    type self = u,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = u,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone Bdd_Hashmap_Impl2_HashLog as HashLog0 with
    type u = u,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function HashLog0.hash_log = HashLog1.hash_log,
    function HashLog1.hash_log = HashLog2.hash_log,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = (u, v),
    type DeepModelTy0.deepModelTy = (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy),
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Num_Impl9_WrappingAdd_Interface as WrappingAdd0 with
    val Bits0.bITS' = Bits0.bITS',
    val Min0.mIN' = Min0.mIN',
    val Max0.mAX' = Max0.mAX'
  clone Core_Num_Impl9_WrappingMul_Interface as WrappingMul0 with
    val Bits0.bITS' = Bits0.bITS',
    val Min0.mIN' = Min0.mIN',
    val Max0.mAX' = Max0.mAX'
  clone Bdd_Hashmap_Hash_Hash_Interface as Hash1 with
    type self = v,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function HashLog0.hash_log = HashLog2.hash_log,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Bdd_Hashmap_Hash_Hash_Interface as Hash0 with
    type self = u,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function HashLog0.hash_log = HashLog1.hash_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = (u, v)
  let rec cfg hash [#"../bdd.rs" 76 8 76 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : (u, v)) : uint64
    ensures { [#"../bdd.rs" 75 18 75 62] UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self : (u, v) = self;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self };
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _0 <- ([#"../bdd.rs" 77 12 77 70] WrappingAdd0.wrapping_add ([#"../bdd.rs" 77 12 77 25] Hash0.hash (let (a, _) = self in a)) ([#"../bdd.rs" 77 39 77 69] WrappingMul0.wrapping_mul ([#"../bdd.rs" 77 39 77 52] Hash1.hash (let (_, a) = self in a)) ([#"../bdd.rs" 77 66 77 68] (17 : uint64))));
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Bdd_Bdd_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  type t_bdd  =
    | C_Bdd (t_node) uint64
    with t_node  =
    | C_False
    | C_True
    | C_If uint64 (t_bdd) (t_bdd)
    
  let function if_v (self : t_node) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_False -> any uint64
      | C_True -> any uint64
      | C_If a _ _ -> a
      end
  let function if_childt (self : t_node) : t_bdd = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_False -> any t_bdd
      | C_True -> any t_bdd
      | C_If _ a _ -> a
      end
  let function if_childf (self : t_node) : t_bdd = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_False -> any t_bdd
      | C_True -> any t_bdd
      | C_If _ _ a -> a
      end
  let function bdd_1 (self : t_bdd) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bdd _ a -> a
      end
  let function bdd_0 (self : t_bdd) : t_node = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bdd a _ -> a
      end
end
module Bdd_Node_Type
  use export Bdd_Bdd_Type
end
module Bdd_Impl12_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Bdd_Node_Type as Bdd_Node_Type
  val assert_receiver_is_total_eq [#"../bdd.rs" 90 9 90 11] (self : Bdd_Node_Type.t_node) : ()
end
module Bdd_Impl12_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Bdd_Node_Type as Bdd_Node_Type
  let rec cfg assert_receiver_is_total_eq [#"../bdd.rs" 90 9 90 11] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Node_Type.t_node) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Bdd_NodeLog_Type
  use prelude.Int
  use prelude.UInt64
  type t_nodelog  =
    | C_False
    | C_True
    | C_If uint64 uint64 uint64
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module Bdd_Impl5_DeepModel_Stub
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function deep_model [#"../bdd.rs" 185 4 185 44] (self : Bdd_Bdd_Type.t_bdd) : uint64
end
module Bdd_Impl5_DeepModel_Interface
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function deep_model [#"../bdd.rs" 185 4 185 44] (self : Bdd_Bdd_Type.t_bdd) : uint64
  val deep_model [#"../bdd.rs" 185 4 185 44] (self : Bdd_Bdd_Type.t_bdd) : uint64
    ensures { result = deep_model self }
    
end
module Bdd_Impl5_DeepModel
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function deep_model [#"../bdd.rs" 185 4 185 44] (self : Bdd_Bdd_Type.t_bdd) : uint64 =
    [#"../bdd.rs" 186 20 186 26] Bdd_Bdd_Type.bdd_1 self
  val deep_model [#"../bdd.rs" 185 4 185 44] (self : Bdd_Bdd_Type.t_bdd) : uint64
    ensures { result = deep_model self }
    
end
module Bdd_Impl6_ShallowModel_Stub
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function shallow_model [#"../bdd.rs" 195 4 195 50] (self : Bdd_Bdd_Type.t_bdd) : uint64
end
module Bdd_Impl6_ShallowModel_Interface
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function shallow_model [#"../bdd.rs" 195 4 195 50] (self : Bdd_Bdd_Type.t_bdd) : uint64
  val shallow_model [#"../bdd.rs" 195 4 195 50] (self : Bdd_Bdd_Type.t_bdd) : uint64
    ensures { result = shallow_model self }
    
end
module Bdd_Impl6_ShallowModel
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl5_DeepModel_Stub as DeepModel0
  function shallow_model [#"../bdd.rs" 195 4 195 50] (self : Bdd_Bdd_Type.t_bdd) : uint64 =
    [#"../bdd.rs" 196 20 196 37] DeepModel0.deep_model self
  val shallow_model [#"../bdd.rs" 195 4 195 50] (self : Bdd_Bdd_Type.t_bdd) : uint64
    ensures { result = shallow_model self }
    
end
module Bdd_Impl7_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64
  val eq [#"../bdd.rs" 202 4 202 34] (self : Bdd_Bdd_Type.t_bdd) (o : Bdd_Bdd_Type.t_bdd) : bool
    ensures { [#"../bdd.rs" 201 14 201 37] result = (ShallowModel0.shallow_model self = ShallowModel0.shallow_model o) }
    
end
module Bdd_Impl7_Eq
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl5_DeepModel as DeepModel0
  clone Bdd_Impl6_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg eq [#"../bdd.rs" 202 4 202 34] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Bdd_Type.t_bdd) (o : Bdd_Bdd_Type.t_bdd) : bool
    ensures { [#"../bdd.rs" 201 14 201 37] result = (ShallowModel0.shallow_model self = ShallowModel0.shallow_model o) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Bdd_Bdd_Type.t_bdd = self;
  var o : Bdd_Bdd_Type.t_bdd = o;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../bdd.rs" 203 8 203 21] Bdd_Bdd_Type.bdd_1 self = Bdd_Bdd_Type.bdd_1 o);
    return _0
  }
  
end
module Core_Cmp_Impls_Impl25_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = uint64,
    type DeepModelTy0.deepModelTy = int
  val eq (self : uint64) (other : uint64) : bool
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Bdd_Impl3_DeepModel_Stub
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  function deep_model [#"../bdd.rs" 158 4 158 44] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
end
module Bdd_Impl3_DeepModel_Interface
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  function deep_model [#"../bdd.rs" 158 4 158 44] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
  val deep_model [#"../bdd.rs" 158 4 158 44] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
    ensures { result = deep_model self }
    
end
module Bdd_Impl3_DeepModel
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  function deep_model [#"../bdd.rs" 158 4 158 44] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog =
    [#"../bdd.rs" 160 12 164 13] match (self) with
      | Bdd_Node_Type.C_False -> Bdd_NodeLog_Type.C_False
      | Bdd_Node_Type.C_True -> Bdd_NodeLog_Type.C_True
      | Bdd_Node_Type.C_If v childt childf -> Bdd_NodeLog_Type.C_If v (Bdd_Bdd_Type.bdd_1 childt) (Bdd_Bdd_Type.bdd_1 childf)
      end
  val deep_model [#"../bdd.rs" 158 4 158 44] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl10_DeepModel_Stub
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Std1_Num_Impl10_DeepModel_Interface
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl10_DeepModel
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt64.to_int self
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module Bdd_Impl13_Eq_Interface
  use prelude.Borrow
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Bdd_Node_Type.t_node,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  val eq [#"../bdd.rs" 90 13 90 22] (self : Bdd_Node_Type.t_node) (rhs : Bdd_Node_Type.t_node) : bool
    ensures { [#"../bdd.rs" 90 13 90 22] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Bdd_Impl13_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl5_DeepModel as DeepModel4
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel3
  clone Bdd_Impl6_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel4.deep_model
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel2
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = uint64,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Bdd_Node_Type.t_node
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Node_Type.t_node,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog,
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone Core_Cmp_Impls_Impl25_Eq_Interface as Eq1 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Bdd_Impl7_Eq_Interface as Eq0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Bdd_Node_Type.t_node,
    type t2 = Bdd_Node_Type.t_node,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg eq [#"../bdd.rs" 90 13 90 22] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Node_Type.t_node) (rhs : Bdd_Node_Type.t_node) : bool
    ensures { [#"../bdd.rs" 90 13 90 22] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Bdd_Node_Type.t_node = self;
  var rhs : Bdd_Node_Type.t_node = rhs;
  var _4 : (Bdd_Node_Type.t_node, Bdd_Node_Type.t_node);
  var v_1 : uint64;
  var childt_1 : Bdd_Bdd_Type.t_bdd;
  var childf_1 : Bdd_Bdd_Type.t_bdd;
  var v_2 : uint64;
  var childt_2 : Bdd_Bdd_Type.t_bdd;
  var childf_2 : Bdd_Bdd_Type.t_bdd;
  var _17 : bool;
  var _18 : bool;
  {
    goto BB0
  }
  BB0 {
    _4 <- (self, rhs);
    switch (let (a, _) = _4 in a)
      | Bdd_Node_Type.C_False -> goto BB1
      | Bdd_Node_Type.C_True -> goto BB4
      | Bdd_Node_Type.C_If _ _ _ -> goto BB6
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | Bdd_Node_Type.C_False -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB8
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    _0 <- ([#"../bdd.rs" 90 13 90 22] false);
    goto BB23
  }
  BB4 {
    switch (let (_, a) = _4 in a)
      | Bdd_Node_Type.C_True -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB9
  }
  BB6 {
    switch (let (_, a) = _4 in a)
      | Bdd_Node_Type.C_If _ _ _ -> goto BB7
      | _ -> goto BB3
      end
  }
  BB7 {
    goto BB10
  }
  BB8 {
    assume { Resolve0.resolve _4 };
    _0 <- ([#"../bdd.rs" 90 13 90 22] true);
    goto BB23
  }
  BB9 {
    assume { Resolve0.resolve _4 };
    _0 <- ([#"../bdd.rs" 90 13 90 22] true);
    goto BB23
  }
  BB10 {
    v_1 <- Bdd_Node_Type.if_v (let (a, _) = _4 in a);
    childt_1 <- Bdd_Node_Type.if_childt (let (a, _) = _4 in a);
    childf_1 <- Bdd_Node_Type.if_childf (let (a, _) = _4 in a);
    v_2 <- Bdd_Node_Type.if_v (let (_, a) = _4 in a);
    childt_2 <- Bdd_Node_Type.if_childt (let (_, a) = _4 in a);
    childf_2 <- Bdd_Node_Type.if_childf (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    goto BB20
  }
  BB11 {
    _0 <- ([#"../bdd.rs" 90 13 90 22] false);
    goto BB13
  }
  BB12 {
    _0 <- ([#"../bdd.rs" 90 13 90 22] true);
    goto BB13
  }
  BB13 {
    goto BB23
  }
  BB14 {
    _17 <- ([#"../bdd.rs" 90 13 90 22] false);
    goto BB16
  }
  BB15 {
    goto BB22
  }
  BB16 {
    switch (_17)
      | False -> goto BB11
      | True -> goto BB12
      end
  }
  BB17 {
    _18 <- ([#"../bdd.rs" 90 13 90 22] false);
    goto BB19
  }
  BB18 {
    goto BB21
  }
  BB19 {
    switch (_18)
      | False -> goto BB14
      | True -> goto BB15
      end
  }
  BB20 {
    switch ([#"../bdd.rs" 90 13 90 22] Eq0.eq childf_1 childf_2)
      | False -> goto BB17
      | True -> goto BB18
      end
  }
  BB21 {
    _18 <- ([#"../bdd.rs" 90 13 90 22] Eq0.eq childt_1 childt_2);
    goto BB19
  }
  BB22 {
    _17 <- ([#"../bdd.rs" 90 13 90 22] Eq1.eq v_1 v_2);
    goto BB16
  }
  BB23 {
    return _0
  }
  
end
module Core_Clone_Impls_Impl9_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  val clone' (self : uint64) : uint64
    ensures { [#"../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Bdd_Impl0_Clone_Interface
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  val clone' [#"../bdd.rs" 109 4 109 27] (self : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    ensures { [#"../bdd.rs" 108 14 108 29] result = self }
    
end
module Bdd_Impl0_Clone
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  let rec cfg clone' [#"../bdd.rs" 109 4 109 27] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    ensures { [#"../bdd.rs" 108 14 108 29] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : Bdd_Bdd_Type.t_bdd = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- self;
    return _0
  }
  
end
module Bdd_Impl14_Clone_Interface
  use prelude.Borrow
  use Bdd_Node_Type as Bdd_Node_Type
  val clone' [#"../bdd.rs" 90 24 90 29] (self : Bdd_Node_Type.t_node) : Bdd_Node_Type.t_node
    ensures { [#"../bdd.rs" 90 24 90 29] result = self }
    
end
module Bdd_Impl14_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl0_Clone_Interface as Clone1
  clone Core_Clone_Impls_Impl9_Clone_Interface as Clone0
  use Bdd_Node_Type as Bdd_Node_Type
  let rec cfg clone' [#"../bdd.rs" 90 24 90 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Node_Type.t_node) : Bdd_Node_Type.t_node
    ensures { [#"../bdd.rs" 90 24 90 29] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Node_Type.t_node;
  var self : Bdd_Node_Type.t_node = self;
  var v_1 : uint64;
  var childt_1 : Bdd_Bdd_Type.t_bdd;
  var childf_1 : Bdd_Bdd_Type.t_bdd;
  var _9 : uint64;
  var _12 : Bdd_Bdd_Type.t_bdd;
  var _15 : Bdd_Bdd_Type.t_bdd;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Bdd_Node_Type.C_False -> goto BB1
      | Bdd_Node_Type.C_True -> goto BB2
      | Bdd_Node_Type.C_If _ _ _ -> goto BB3
      end
  }
  BB1 {
    goto BB5
  }
  BB2 {
    goto BB6
  }
  BB3 {
    v_1 <- Bdd_Node_Type.if_v self;
    childt_1 <- Bdd_Node_Type.if_childt self;
    childf_1 <- Bdd_Node_Type.if_childf self;
    _9 <- v_1;
    goto BB7
  }
  BB4 {
    absurd
  }
  BB5 {
    _0 <- Bdd_Node_Type.C_False;
    goto BB10
  }
  BB6 {
    _0 <- Bdd_Node_Type.C_True;
    goto BB10
  }
  BB7 {
    _12 <- childt_1;
    goto BB8
  }
  BB8 {
    _15 <- childf_1;
    goto BB9
  }
  BB9 {
    _0 <- Bdd_Node_Type.C_If ([#"../bdd.rs" 90 24 90 29] Clone0.clone' _9) ([#"../bdd.rs" 90 24 90 29] Clone1.clone' _12) ([#"../bdd.rs" 90 24 90 29] Clone1.clone' _15);
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Bdd_Impl18_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  val assert_receiver_is_total_eq [#"../bdd.rs" 104 15 104 17] (self : Bdd_Bdd_Type.t_bdd) : ()
end
module Bdd_Impl18_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  let rec cfg assert_receiver_is_total_eq [#"../bdd.rs" 104 15 104 17] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Bdd_Type.t_bdd) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Bdd_Impl1_HashLog_Stub
  use prelude.Int
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  function hash_log [#"../bdd.rs" 128 4 128 44] (x : Bdd_NodeLog_Type.t_nodelog) : int
end
module Bdd_Impl1_HashLog_Interface
  use prelude.Int
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  function hash_log [#"../bdd.rs" 128 4 128 44] (x : Bdd_NodeLog_Type.t_nodelog) : int
  val hash_log [#"../bdd.rs" 128 4 128 44] (x : Bdd_NodeLog_Type.t_nodelog) : int
    ensures { result = hash_log x }
    
end
module Bdd_Impl1_HashLog
  use prelude.Int
  use prelude.UInt64
  clone Core_Num_Impl9_Max_Stub as Max0
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  function hash_log [#"../bdd.rs" 128 4 128 44] (x : Bdd_NodeLog_Type.t_nodelog) : int =
    [#"../bdd.rs" 130 12 135 13] match (x) with
      | Bdd_NodeLog_Type.C_False -> 1
      | Bdd_NodeLog_Type.C_True -> 2
      | Bdd_NodeLog_Type.C_If v childt childf -> mod (UInt64.to_int v + UInt64.to_int childt * 5 + UInt64.to_int childf * 7) (UInt64.to_int Max0.mAX' + 1)
      end
  val hash_log [#"../bdd.rs" 128 4 128 44] (x : Bdd_NodeLog_Type.t_nodelog) : int
    ensures { result = hash_log x }
    
end
module Bdd_Impl4_ShallowModel_Stub
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  function shallow_model [#"../bdd.rs" 175 4 175 50] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
end
module Bdd_Impl4_ShallowModel_Interface
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  function shallow_model [#"../bdd.rs" 175 4 175 50] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
  val shallow_model [#"../bdd.rs" 175 4 175 50] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
    ensures { result = shallow_model self }
    
end
module Bdd_Impl4_ShallowModel
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel_Stub as DeepModel0
  function shallow_model [#"../bdd.rs" 175 4 175 50] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog =
    [#"../bdd.rs" 176 20 176 37] DeepModel0.deep_model self
  val shallow_model [#"../bdd.rs" 175 4 175 50] (self : Bdd_Node_Type.t_node) : Bdd_NodeLog_Type.t_nodelog
    ensures { result = shallow_model self }
    
end
module Bdd_Impl1_Hash_Interface
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl1_HashLog_Stub as HashLog0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog
  val hash [#"../bdd.rs" 116 4 116 25] (self : Bdd_Node_Type.t_node) : uint64
    ensures { [#"../bdd.rs" 115 14 115 46] UInt64.to_int result = HashLog0.hash_log (ShallowModel0.shallow_model self) }
    
end
module Bdd_Impl1_Hash
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone Bdd_Impl4_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl9_Max as Max0
  clone Core_Num_Impl9_Min as Min0
  clone Core_Num_Impl9_Bits as Bits0
  clone Bdd_Impl1_HashLog as HashLog0 with
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Core_Num_Impl9_WrappingAdd_Interface as WrappingAdd0 with
    val Bits0.bITS' = Bits0.bITS',
    val Min0.mIN' = Min0.mIN',
    val Max0.mAX' = Max0.mAX'
  clone Core_Num_Impl9_WrappingMul_Interface as WrappingMul0 with
    val Bits0.bITS' = Bits0.bITS',
    val Min0.mIN' = Min0.mIN',
    val Max0.mAX' = Max0.mAX'
  let rec cfg hash [#"../bdd.rs" 116 4 116 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Node_Type.t_node) : uint64
    ensures { [#"../bdd.rs" 115 14 115 46] UInt64.to_int result = HashLog0.hash_log (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self : Bdd_Node_Type.t_node = self;
  var v : uint64;
  var childt : Bdd_Bdd_Type.t_bdd;
  var childf : Bdd_Bdd_Type.t_bdd;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Bdd_Node_Type.C_False -> goto BB1
      | Bdd_Node_Type.C_True -> goto BB2
      | Bdd_Node_Type.C_If _ _ _ -> goto BB3
      end
  }
  BB1 {
    goto BB5
  }
  BB2 {
    goto BB6
  }
  BB3 {
    v <- Bdd_Node_Type.if_v self;
    childt <- Bdd_Node_Type.if_childt self;
    childf <- Bdd_Node_Type.if_childf self;
    goto BB7
  }
  BB4 {
    absurd
  }
  BB5 {
    _0 <- ([#"../bdd.rs" 118 21 118 22] (1 : uint64));
    goto BB11
  }
  BB6 {
    _0 <- ([#"../bdd.rs" 119 20 119 21] (2 : uint64));
    goto BB11
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _0 <- ([#"../bdd.rs" 121 16 121 95] WrappingAdd0.wrapping_add ([#"../bdd.rs" 121 16 121 56] WrappingAdd0.wrapping_add v ([#"../bdd.rs" 121 31 121 55] WrappingMul0.wrapping_mul (Bdd_Bdd_Type.bdd_1 childt) ([#"../bdd.rs" 121 53 121 54] (5 : uint64)))) ([#"../bdd.rs" 121 70 121 94] WrappingMul0.wrapping_mul (Bdd_Bdd_Type.bdd_1 childf) ([#"../bdd.rs" 121 92 121 93] (7 : uint64))));
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Bdd_Impl2_HashLog_Stub
  use prelude.Int
  use prelude.UInt64
  function hash_log [#"../bdd.rs" 148 4 148 44] (x : uint64) : int
end
module Bdd_Impl2_HashLog_Interface
  use prelude.Int
  use prelude.UInt64
  function hash_log [#"../bdd.rs" 148 4 148 44] (x : uint64) : int
  val hash_log [#"../bdd.rs" 148 4 148 44] (x : uint64) : int
    ensures { result = hash_log x }
    
end
module Bdd_Impl2_HashLog
  use prelude.Int
  use prelude.UInt64
  function hash_log [#"../bdd.rs" 148 4 148 44] (x : uint64) : int =
    [#"../bdd.rs" 149 8 149 24] UInt64.to_int x
  val hash_log [#"../bdd.rs" 148 4 148 44] (x : uint64) : int
    ensures { result = hash_log x }
    
end
module Bdd_Impl2_Hash_Interface
  use prelude.UInt64
  use prelude.Borrow
  use prelude.Int
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl2_HashLog_Stub as HashLog0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64
  val hash [#"../bdd.rs" 142 4 142 25] (self : Bdd_Bdd_Type.t_bdd) : uint64
    ensures { [#"../bdd.rs" 141 14 141 46] UInt64.to_int result = HashLog0.hash_log (ShallowModel0.shallow_model self) }
    
end
module Bdd_Impl2_Hash
  use prelude.Int
  use prelude.UInt64
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl5_DeepModel as DeepModel0
  clone Bdd_Impl6_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Bdd_Impl2_HashLog as HashLog0
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg hash [#"../bdd.rs" 142 4 142 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Bdd_Bdd_Type.t_bdd) : uint64
    ensures { [#"../bdd.rs" 141 14 141 46] UInt64.to_int result = HashLog0.hash_log (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self : Bdd_Bdd_Type.t_bdd = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- Bdd_Bdd_Type.bdd_1 self;
    return _0
  }
  
end
module Bdd_Impl8_Interp_Stub
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function interp [#"../bdd.rs" 209 4 209 53] (self : Bdd_Bdd_Type.t_bdd) (vars : Map.map uint64 bool) : bool
end
module Bdd_Impl8_Interp_Interface
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function interp [#"../bdd.rs" 209 4 209 53] (self : Bdd_Bdd_Type.t_bdd) (vars : Map.map uint64 bool) : bool
  val interp [#"../bdd.rs" 209 4 209 53] (self : Bdd_Bdd_Type.t_bdd) (vars : Map.map uint64 bool) : bool
    ensures { result = interp self vars }
    
end
module Bdd_Impl8_Interp
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function interp [#"../bdd.rs" 209 4 209 53] (self : Bdd_Bdd_Type.t_bdd) (vars : Map.map uint64 bool) : bool =
    [#"../bdd.rs" 211 12 218 13] match (self) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_True) _ -> true
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_False) _ -> false
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childt childf) _ -> if Map.get vars v then
        interp childt vars
      else
        interp childf vars
      
      end
  val interp [#"../bdd.rs" 209 4 209 53] (self : Bdd_Bdd_Type.t_bdd) (vars : Map.map uint64 bool) : bool
    ensures { result = interp self vars }
    
end
module Bdd_Impl8_Size_Stub
  use prelude.Int
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function size [#"../bdd.rs" 224 4 224 24] (self : Bdd_Bdd_Type.t_bdd) : int
end
module Bdd_Impl8_Size_Interface
  use prelude.Int
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function size [#"../bdd.rs" 224 4 224 24] (self : Bdd_Bdd_Type.t_bdd) : int
  val size [#"../bdd.rs" 224 4 224 24] (self : Bdd_Bdd_Type.t_bdd) : int
    ensures { [#"../bdd.rs" 223 14 223 25] result >= 0 }
    ensures { result = size self }
    
  axiom size_spec : forall self : Bdd_Bdd_Type.t_bdd . [#"../bdd.rs" 223 14 223 25] size self >= 0
end
module Bdd_Impl8_Size
  use prelude.Int
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function size [#"../bdd.rs" 224 4 224 24] (self : Bdd_Bdd_Type.t_bdd) : int =
    [#"../bdd.rs" 226 12 234 13] match (self) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_True) _ -> 0
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_False) _ -> 0
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If _ childt childf) _ -> let ht = size childt in let hf = size childf in 1 + ht + hf
      end
  val size [#"../bdd.rs" 224 4 224 24] (self : Bdd_Bdd_Type.t_bdd) : int
    ensures { [#"../bdd.rs" 223 14 223 25] result >= 0 }
    ensures { result = size self }
    
  axiom size_spec : forall self : Bdd_Bdd_Type.t_bdd . [#"../bdd.rs" 223 14 223 25] size self >= 0
end
module Bdd_Impl8_Size_Impl
  use prelude.Int
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  let rec ghost function size [#"../bdd.rs" 224 4 224 24] (self : Bdd_Bdd_Type.t_bdd) : int
    ensures { [#"../bdd.rs" 223 14 223 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../bdd.rs" 226 12 234 13] match (self) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_True) _ -> 0
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_False) _ -> 0
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If _ childt childf) _ -> let ht = size childt in let hf = size childf in 1 + ht + hf
      end
end
module Bdd_Impl8_Leastvar_Stub
  use prelude.Int
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function leastvar [#"../bdd.rs" 239 4 239 28] (self : Bdd_Bdd_Type.t_bdd) : int
end
module Bdd_Impl8_Leastvar_Interface
  use prelude.Int
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function leastvar [#"../bdd.rs" 239 4 239 28] (self : Bdd_Bdd_Type.t_bdd) : int
  val leastvar [#"../bdd.rs" 239 4 239 28] (self : Bdd_Bdd_Type.t_bdd) : int
    ensures { result = leastvar self }
    
end
module Bdd_Impl8_Leastvar
  use prelude.Int
  use prelude.UInt64
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int
  clone Core_Num_Impl9_Max_Stub as Max0
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  function leastvar [#"../bdd.rs" 239 4 239 28] (self : Bdd_Bdd_Type.t_bdd) : int =
    [#"../bdd.rs" 241 12 245 13] match (self) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_True) _ -> UInt64.to_int Max0.mAX' + 1
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_False) _ -> UInt64.to_int Max0.mAX' + 1
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v _ _) _ -> ShallowModel0.shallow_model v
      end
  val leastvar [#"../bdd.rs" 239 4 239 28] (self : Bdd_Bdd_Type.t_bdd) : int
    ensures { result = leastvar self }
    
end
module Bdd_Context_Type
  use prelude.Borrow
  use prelude.Ghost
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bumpalo_Bump_Type as Bdd_Bumpalo_Bump_Type
  type t_context  =
    | C_Context (Bdd_Bumpalo_Bump_Type.t_bump) (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Node_Type.t_node) (Bdd_Bdd_Type.t_bdd)) (Ghost.ghost_ty (Map.map uint64 (Bdd_Node_Type.t_node))) (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd)) (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd)) uint64
    
  let function context_hashcons (self : t_context) : Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Node_Type.t_node) (Bdd_Bdd_Type.t_bdd)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Context _ a _ _ _ _ -> a
      end
  let function context_cnt (self : t_context) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Context _ _ _ _ _ a -> a
      end
  let function context_hashcons_ghost (self : t_context) : Ghost.ghost_ty (Map.map uint64 (Bdd_Node_Type.t_node))
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Context _ _ a _ _ _ -> a
      end
  let function context_not_memo (self : t_context) : Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Context _ _ _ a _ _ -> a
      end
  let function context_and_memo (self : t_context) : Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Context _ _ _ _ a _ -> a
      end
  let function context_alloc (self : t_context) : Bdd_Bumpalo_Bump_Type.t_bump = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Context a _ _ _ _ _ -> a
      end
end
module Bdd_Impl9_IsValidBdd_Stub
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  predicate is_valid_bdd [#"../bdd.rs" 307 4 307 53] (self : Bdd_Context_Type.t_context) (b : Bdd_Bdd_Type.t_bdd)
end
module Bdd_Impl9_IsValidBdd_Interface
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  predicate is_valid_bdd [#"../bdd.rs" 307 4 307 53] (self : Bdd_Context_Type.t_context) (b : Bdd_Bdd_Type.t_bdd)
  val is_valid_bdd [#"../bdd.rs" 307 4 307 53] (self : Bdd_Context_Type.t_context) (b : Bdd_Bdd_Type.t_bdd) : bool
    ensures { result = is_valid_bdd self b }
    
end
module Bdd_Impl9_IsValidBdd
  use map.Map
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  use Bdd_Context_Type as Bdd_Context_Type
  predicate is_valid_bdd [#"../bdd.rs" 307 4 307 53] (self : Bdd_Context_Type.t_context) (b : Bdd_Bdd_Type.t_bdd) =
    [#"../bdd.rs" 309 12 309 47] Map.get (ShallowModel0.shallow_model (Bdd_Context_Type.context_hashcons self)) (ShallowModel1.shallow_model (Bdd_Bdd_Type.bdd_0 b)) = Core_Option_Option_Type.C_Some b
  val is_valid_bdd [#"../bdd.rs" 307 4 307 53] (self : Bdd_Context_Type.t_context) (b : Bdd_Bdd_Type.t_bdd) : bool
    ensures { result = is_valid_bdd self b }
    
end
module Bdd_Impl9_IsValidNode_Stub
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Context_Type as Bdd_Context_Type
  predicate is_valid_node [#"../bdd.rs" 314 4 314 51] (self : Bdd_Context_Type.t_context) (n : Bdd_Node_Type.t_node)
end
module Bdd_Impl9_IsValidNode_Interface
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Context_Type as Bdd_Context_Type
  predicate is_valid_node [#"../bdd.rs" 314 4 314 51] (self : Bdd_Context_Type.t_context) (n : Bdd_Node_Type.t_node)
  val is_valid_node [#"../bdd.rs" 314 4 314 51] (self : Bdd_Context_Type.t_context) (n : Bdd_Node_Type.t_node) : bool
    ensures { result = is_valid_node self n }
    
end
module Bdd_Impl9_IsValidNode
  use prelude.UInt64
  use prelude.Int
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  use Bdd_Node_Type as Bdd_Node_Type
  predicate is_valid_node [#"../bdd.rs" 314 4 314 51] (self : Bdd_Context_Type.t_context) (n : Bdd_Node_Type.t_node) =
    [#"../bdd.rs" 316 12 325 13] match (n) with
      | Bdd_Node_Type.C_True -> true
      | Bdd_Node_Type.C_False -> true
      | Bdd_Node_Type.C_If v childt childf -> Bdd_Bdd_Type.bdd_0 childt <> Bdd_Bdd_Type.bdd_0 childf /\ IsValidBdd0.is_valid_bdd self childt /\ IsValidBdd0.is_valid_bdd self childf /\ UInt64.to_int v < Leastvar0.leastvar childt /\ UInt64.to_int v < Leastvar0.leastvar childf
      end
  val is_valid_node [#"../bdd.rs" 314 4 314 51] (self : Bdd_Context_Type.t_context) (n : Bdd_Node_Type.t_node) : bool
    ensures { result = is_valid_node self n }
    
end
module Bdd_Impl9_Invariant_Stub
  use Bdd_Context_Type as Bdd_Context_Type
  predicate invariant' [#"../bdd.rs" 262 4 262 34] (self : Bdd_Context_Type.t_context)
end
module Bdd_Impl9_Invariant_Interface
  use Bdd_Context_Type as Bdd_Context_Type
  predicate invariant' [#"../bdd.rs" 262 4 262 34] (self : Bdd_Context_Type.t_context)
  val invariant' [#"../bdd.rs" 262 4 262 34] (self : Bdd_Context_Type.t_context) : bool
    ensures { result = invariant' self }
    
end
module Bdd_Impl9_Invariant
  use prelude.Int
  use prelude.Ghost
  use map.Map
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Bdd_Node_Type as Bdd_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl8_Interp_Stub as Interp0
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Bdd_Impl9_IsValidNode_Stub as IsValidNode0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog
  predicate invariant' [#"../bdd.rs" 262 4 262 34] (self : Bdd_Context_Type.t_context) =
    [#"../bdd.rs" 264 12 288 19] (forall n : Bdd_NodeLog_Type.t_nodelog . match (Map.get (ShallowModel1.shallow_model (Bdd_Context_Type.context_hashcons self)) n) with
      | Core_Option_Option_Type.C_Some b -> ShallowModel0.shallow_model (Bdd_Bdd_Type.bdd_0 b) = n /\ IsValidNode0.is_valid_node self (Bdd_Bdd_Type.bdd_0 b) /\ Bdd_Bdd_Type.bdd_1 b < Bdd_Context_Type.context_cnt self /\ Map.get (Ghost.inner (Bdd_Context_Type.context_hashcons_ghost self)) (Bdd_Bdd_Type.bdd_1 b) = Bdd_Bdd_Type.bdd_0 b
      | Core_Option_Option_Type.C_None -> true
      end) /\ (forall bm : uint64 . match (Map.get (ShallowModel2.shallow_model (Bdd_Context_Type.context_not_memo self)) bm) with
      | Core_Option_Option_Type.C_None -> true
      | Core_Option_Option_Type.C_Some n -> let b = Bdd_Bdd_Type.C_Bdd (Map.get (Ghost.inner (Bdd_Context_Type.context_hashcons_ghost self)) bm) bm in IsValidBdd0.is_valid_bdd self n /\ IsValidBdd0.is_valid_bdd self b /\ (forall v : Map.map uint64 bool . Interp0.interp n v = (not Interp0.interp b v)) /\ Leastvar0.leastvar b <= Leastvar0.leastvar n
      end) /\ (forall abm : (uint64, uint64) . match (Map.get (ShallowModel3.shallow_model (Bdd_Context_Type.context_and_memo self)) abm) with
      | Core_Option_Option_Type.C_None -> true
      | Core_Option_Option_Type.C_Some n -> let a = Bdd_Bdd_Type.C_Bdd (Map.get (Ghost.inner (Bdd_Context_Type.context_hashcons_ghost self)) (let (a, _) = abm in a)) (let (a, _) = abm in a) in let b = Bdd_Bdd_Type.C_Bdd (Map.get (Ghost.inner (Bdd_Context_Type.context_hashcons_ghost self)) (let (_, a) = abm in a)) (let (_, a) = abm in a) in IsValidBdd0.is_valid_bdd self n /\ IsValidBdd0.is_valid_bdd self a /\ IsValidBdd0.is_valid_bdd self b /\ (forall v : Map.map uint64 bool . Interp0.interp n v = (Interp0.interp a v /\ Interp0.interp b v)) /\ (Leastvar0.leastvar a <= Leastvar0.leastvar n \/ Leastvar0.leastvar b <= Leastvar0.leastvar n)
      end)
  val invariant' [#"../bdd.rs" 262 4 262 34] (self : Bdd_Context_Type.t_context) : bool
    ensures { result = invariant' self }
    
end
module Bdd_Impl9_Grows_Stub
  use prelude.Borrow
  use Bdd_Context_Type as Bdd_Context_Type
  predicate grows [#"../bdd.rs" 294 4 294 35] (self : borrowed (Bdd_Context_Type.t_context))
end
module Bdd_Impl9_Grows_Interface
  use prelude.Borrow
  use Bdd_Context_Type as Bdd_Context_Type
  predicate grows [#"../bdd.rs" 294 4 294 35] (self : borrowed (Bdd_Context_Type.t_context))
  val grows [#"../bdd.rs" 294 4 294 35] (self : borrowed (Bdd_Context_Type.t_context)) : bool
    ensures { result = grows self }
    
end
module Bdd_Impl9_Grows
  use prelude.Borrow
  use prelude.UInt64
  use prelude.Int
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Stub as ShallowModel0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  use Bdd_Context_Type as Bdd_Context_Type
  predicate grows [#"../bdd.rs" 294 4 294 35] (self : borrowed (Bdd_Context_Type.t_context)) =
    [#"../bdd.rs" 295 8 302 9] UInt64.to_int (Bdd_Context_Type.context_cnt ( * self)) <= UInt64.to_int (Bdd_Context_Type.context_cnt ( ^ self)) /\ (forall n : Bdd_NodeLog_Type.t_nodelog . match (Map.get (ShallowModel0.shallow_model (Bdd_Context_Type.context_hashcons ( * self))) n) with
      | Core_Option_Option_Type.C_Some b -> Map.get (ShallowModel0.shallow_model (Bdd_Context_Type.context_hashcons ( ^ self))) n = Core_Option_Option_Type.C_Some b
      | Core_Option_Option_Type.C_None -> true
      end)
  val grows [#"../bdd.rs" 294 4 294 35] (self : borrowed (Bdd_Context_Type.t_context)) : bool
    ensures { result = grows self }
    
end
module Bdd_Impl9_GrowsIsValidBdd_Stub
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  function grows_is_valid_bdd [#"../bdd.rs" 334 4 334 56] (self : borrowed (Bdd_Context_Type.t_context)) (b : Bdd_Bdd_Type.t_bdd) : ()
    
end
module Bdd_Impl9_GrowsIsValidBdd_Interface
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  function grows_is_valid_bdd [#"../bdd.rs" 334 4 334 56] (self : borrowed (Bdd_Context_Type.t_context)) (b : Bdd_Bdd_Type.t_bdd) : ()
    
  val grows_is_valid_bdd [#"../bdd.rs" 334 4 334 56] (self : borrowed (Bdd_Context_Type.t_context)) (b : Bdd_Bdd_Type.t_bdd) : ()
    requires {[#"../bdd.rs" 331 15 331 27] Grows0.grows self}
    requires {[#"../bdd.rs" 332 15 332 35] IsValidBdd0.is_valid_bdd ( * self) b}
    ensures { [#"../bdd.rs" 333 14 333 37] IsValidBdd0.is_valid_bdd ( ^ self) b }
    ensures { result = grows_is_valid_bdd self b }
    
  axiom grows_is_valid_bdd_spec : forall self : borrowed (Bdd_Context_Type.t_context), b : Bdd_Bdd_Type.t_bdd . ([#"../bdd.rs" 331 15 331 27] Grows0.grows self) -> ([#"../bdd.rs" 332 15 332 35] IsValidBdd0.is_valid_bdd ( * self) b) -> ([#"../bdd.rs" 333 14 333 37] IsValidBdd0.is_valid_bdd ( ^ self) b)
end
module Bdd_Impl9_GrowsIsValidBdd
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  function grows_is_valid_bdd [#"../bdd.rs" 334 4 334 56] (self : borrowed (Bdd_Context_Type.t_context)) (b : Bdd_Bdd_Type.t_bdd) : ()
    
   =
    [#"../bdd.rs" 329 4 329 12] ()
  val grows_is_valid_bdd [#"../bdd.rs" 334 4 334 56] (self : borrowed (Bdd_Context_Type.t_context)) (b : Bdd_Bdd_Type.t_bdd) : ()
    requires {[#"../bdd.rs" 331 15 331 27] Grows0.grows self}
    requires {[#"../bdd.rs" 332 15 332 35] IsValidBdd0.is_valid_bdd ( * self) b}
    ensures { [#"../bdd.rs" 333 14 333 37] IsValidBdd0.is_valid_bdd ( ^ self) b }
    ensures { result = grows_is_valid_bdd self b }
    
  axiom grows_is_valid_bdd_spec : forall self : borrowed (Bdd_Context_Type.t_context), b : Bdd_Bdd_Type.t_bdd . ([#"../bdd.rs" 331 15 331 27] Grows0.grows self) -> ([#"../bdd.rs" 332 15 332 35] IsValidBdd0.is_valid_bdd ( * self) b) -> ([#"../bdd.rs" 333 14 333 37] IsValidBdd0.is_valid_bdd ( ^ self) b)
end
module Bdd_Impl9_GrowsIsValidBdd_Impl
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone Bdd_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec ghost function grows_is_valid_bdd [#"../bdd.rs" 334 4 334 56] (self : borrowed (Bdd_Context_Type.t_context)) (b : Bdd_Bdd_Type.t_bdd) : ()
    requires {[#"../bdd.rs" 331 15 331 27] Grows0.grows self}
    requires {[#"../bdd.rs" 332 15 332 35] IsValidBdd0.is_valid_bdd ( * self) b}
    ensures { [#"../bdd.rs" 333 14 333 37] IsValidBdd0.is_valid_bdd ( ^ self) b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../bdd.rs" 329 4 329 12] ()
end
module Bdd_Impl9_GrowsTrans_Stub
  use prelude.Borrow
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_Grows_Stub as Grows0
  function grows_trans [#"../bdd.rs" 343 4 343 62] (self : borrowed (Bdd_Context_Type.t_context)) (o : borrowed (Bdd_Context_Type.t_context)) (oo : borrowed (Bdd_Context_Type.t_context)) : ()
    
end
module Bdd_Impl9_GrowsTrans_Interface
  use prelude.Borrow
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_Grows_Stub as Grows0
  function grows_trans [#"../bdd.rs" 343 4 343 62] (self : borrowed (Bdd_Context_Type.t_context)) (o : borrowed (Bdd_Context_Type.t_context)) (oo : borrowed (Bdd_Context_Type.t_context)) : ()
    
  val grows_trans [#"../bdd.rs" 343 4 343 62] (self : borrowed (Bdd_Context_Type.t_context)) (o : borrowed (Bdd_Context_Type.t_context)) (oo : borrowed (Bdd_Context_Type.t_context)) : ()
    requires {[#"../bdd.rs" 338 15 338 27] Grows0.grows self}
    requires {[#"../bdd.rs" 339 15 339 24] Grows0.grows o}
    requires {[#"../bdd.rs" 340 15 340 26]  ^ self =  * o}
    requires {[#"../bdd.rs" 341 15 341 43]  * self =  * oo /\  ^ self =  ^ oo}
    ensures { [#"../bdd.rs" 342 14 342 24] Grows0.grows oo }
    ensures { result = grows_trans self o oo }
    
  axiom grows_trans_spec : forall self : borrowed (Bdd_Context_Type.t_context), o : borrowed (Bdd_Context_Type.t_context), oo : borrowed (Bdd_Context_Type.t_context) . ([#"../bdd.rs" 338 15 338 27] Grows0.grows self) -> ([#"../bdd.rs" 339 15 339 24] Grows0.grows o) -> ([#"../bdd.rs" 340 15 340 26]  ^ self =  * o) -> ([#"../bdd.rs" 341 15 341 43]  * self =  * oo /\  ^ self =  ^ oo) -> ([#"../bdd.rs" 342 14 342 24] Grows0.grows oo)
end
module Bdd_Impl9_GrowsTrans
  use prelude.Borrow
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_Grows_Stub as Grows0
  function grows_trans [#"../bdd.rs" 343 4 343 62] (self : borrowed (Bdd_Context_Type.t_context)) (o : borrowed (Bdd_Context_Type.t_context)) (oo : borrowed (Bdd_Context_Type.t_context)) : ()
    
   =
    [#"../bdd.rs" 336 4 336 12] ()
  val grows_trans [#"../bdd.rs" 343 4 343 62] (self : borrowed (Bdd_Context_Type.t_context)) (o : borrowed (Bdd_Context_Type.t_context)) (oo : borrowed (Bdd_Context_Type.t_context)) : ()
    requires {[#"../bdd.rs" 338 15 338 27] Grows0.grows self}
    requires {[#"../bdd.rs" 339 15 339 24] Grows0.grows o}
    requires {[#"../bdd.rs" 340 15 340 26]  ^ self =  * o}
    requires {[#"../bdd.rs" 341 15 341 43]  * self =  * oo /\  ^ self =  ^ oo}
    ensures { [#"../bdd.rs" 342 14 342 24] Grows0.grows oo }
    ensures { result = grows_trans self o oo }
    
  axiom grows_trans_spec : forall self : borrowed (Bdd_Context_Type.t_context), o : borrowed (Bdd_Context_Type.t_context), oo : borrowed (Bdd_Context_Type.t_context) . ([#"../bdd.rs" 338 15 338 27] Grows0.grows self) -> ([#"../bdd.rs" 339 15 339 24] Grows0.grows o) -> ([#"../bdd.rs" 340 15 340 26]  ^ self =  * o) -> ([#"../bdd.rs" 341 15 341 43]  * self =  * oo /\  ^ self =  ^ oo) -> ([#"../bdd.rs" 342 14 342 24] Grows0.grows oo)
end
module Bdd_Impl9_GrowsTrans_Impl
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec ghost function grows_trans [#"../bdd.rs" 343 4 343 62] (self : borrowed (Bdd_Context_Type.t_context)) (o : borrowed (Bdd_Context_Type.t_context)) (oo : borrowed (Bdd_Context_Type.t_context)) : ()
    requires {[#"../bdd.rs" 338 15 338 27] Grows0.grows self}
    requires {[#"../bdd.rs" 339 15 339 24] Grows0.grows o}
    requires {[#"../bdd.rs" 340 15 340 26]  ^ self =  * o}
    requires {[#"../bdd.rs" 341 15 341 43]  * self =  * oo /\  ^ self =  ^ oo}
    ensures { [#"../bdd.rs" 342 14 342 24] Grows0.grows oo }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../bdd.rs" 336 4 336 12] ()
end
module CreusotContracts_Std1_Num_Impl9_ShallowModel_Stub
  use prelude.Int
  use prelude.UInt64
  function shallow_model (self : uint64) : int
end
module CreusotContracts_Std1_Num_Impl9_ShallowModel_Interface
  use prelude.Int
  use prelude.UInt64
  function shallow_model (self : uint64) : int
  val shallow_model (self : uint64) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Num_Impl9_ShallowModel
  use prelude.Int
  use prelude.UInt64
  function shallow_model (self : uint64) : int =
    UInt64.to_int self
  val shallow_model (self : uint64) : int
    ensures { result = shallow_model self }
    
end
module Bdd_Impl9_SetIrreleventVar_Stub
  use prelude.UInt64
  use prelude.Int
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function set_irrelevent_var [#"../bdd.rs" 350 4 350 87] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (x : uint64) (v : Map.map uint64 bool) (b : bool) : ()
    
end
module Bdd_Impl9_SetIrreleventVar_Interface
  use prelude.UInt64
  use prelude.Int
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function set_irrelevent_var [#"../bdd.rs" 350 4 350 87] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (x : uint64) (v : Map.map uint64 bool) (b : bool) : ()
    
  val set_irrelevent_var [#"../bdd.rs" 350 4 350 87] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (x : uint64) (v : Map.map uint64 bool) (b : bool) : ()
    requires {[#"../bdd.rs" 346 15 346 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 347 15 347 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 348 15 348 32] UInt64.to_int x < Leastvar0.leastvar a}
    ensures { [#"../bdd.rs" 349 14 349 50] Interp0.interp a v = Interp0.interp a (Map.set v x b) }
    ensures { result = set_irrelevent_var self a x v b }
    
  axiom set_irrelevent_var_spec : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, x : uint64, v : Map.map uint64 bool, b : bool . ([#"../bdd.rs" 346 15 346 31] Invariant0.invariant' self) -> ([#"../bdd.rs" 347 15 347 35] IsValidBdd0.is_valid_bdd self a) -> ([#"../bdd.rs" 348 15 348 32] UInt64.to_int x < Leastvar0.leastvar a) -> ([#"../bdd.rs" 349 14 349 50] Interp0.interp a v = Interp0.interp a (Map.set v x b))
end
module Bdd_Impl9_SetIrreleventVar
  use prelude.UInt64
  use prelude.Int
  use map.Map
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function set_irrelevent_var [#"../bdd.rs" 350 4 350 87] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (x : uint64) (v : Map.map uint64 bool) (b : bool) : ()
    
   =
    [#"../bdd.rs" 352 12 358 13] match (a) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If _ childt childf) _ -> let _ = set_irrelevent_var self childt x v b in let _ = set_irrelevent_var self childf x v b in ()
      | _ -> ()
      end
  val set_irrelevent_var [#"../bdd.rs" 350 4 350 87] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (x : uint64) (v : Map.map uint64 bool) (b : bool) : ()
    requires {[#"../bdd.rs" 346 15 346 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 347 15 347 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 348 15 348 32] UInt64.to_int x < Leastvar0.leastvar a}
    ensures { [#"../bdd.rs" 349 14 349 50] Interp0.interp a v = Interp0.interp a (Map.set v x b) }
    ensures { result = set_irrelevent_var self a x v b }
    
  axiom set_irrelevent_var_spec : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, x : uint64, v : Map.map uint64 bool, b : bool . ([#"../bdd.rs" 346 15 346 31] Invariant0.invariant' self) -> ([#"../bdd.rs" 347 15 347 35] IsValidBdd0.is_valid_bdd self a) -> ([#"../bdd.rs" 348 15 348 32] UInt64.to_int x < Leastvar0.leastvar a) -> ([#"../bdd.rs" 349 14 349 50] Interp0.interp a v = Interp0.interp a (Map.set v x b))
end
module Bdd_Impl9_SetIrreleventVar_Impl
  use prelude.UInt64
  use prelude.Int
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel6
  clone Bdd_Impl4_ShallowModel as ShallowModel5 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Core_Num_Impl9_Max as Max0
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model
  let rec ghost function set_irrelevent_var [#"../bdd.rs" 350 4 350 87] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (x : uint64) (v : Map.map uint64 bool) (b : bool) : ()
    requires {[#"../bdd.rs" 346 15 346 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 347 15 347 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 348 15 348 32] UInt64.to_int x < Leastvar0.leastvar a}
    ensures { [#"../bdd.rs" 349 14 349 50] Interp0.interp a v = Interp0.interp a (Map.set v x b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../bdd.rs" 352 12 358 13] match (a) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If _ childt childf) _ -> let _ = set_irrelevent_var self childt x v b in let _ = set_irrelevent_var self childf x v b in ()
      | _ -> ()
      end
end
module Bdd_Impl9_DiscrValuation_Stub
  use prelude.Int
  use map.Map
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Size_Stub as Size0 with
    axiom .
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function discr_valuation [#"../bdd.rs" 370 4 370 82] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Map.map uint64 bool
    
end
module Bdd_Impl9_DiscrValuation_Interface
  use prelude.Int
  use map.Map
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Size_Stub as Size0 with
    axiom .
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function discr_valuation [#"../bdd.rs" 370 4 370 82] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Map.map uint64 bool
    
  val discr_valuation [#"../bdd.rs" 370 4 370 82] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Map.map uint64 bool
    requires {[#"../bdd.rs" 363 15 363 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 364 15 364 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 365 15 365 35] IsValidBdd0.is_valid_bdd self b}
    requires {[#"../bdd.rs" 366 15 366 21] a <> b}
    ensures { [#"../bdd.rs" 367 14 367 50] Interp0.interp a result <> Interp0.interp b result }
    ensures { result = discr_valuation self a b }
    
  axiom discr_valuation_spec : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, b : Bdd_Bdd_Type.t_bdd . ([#"../bdd.rs" 363 15 363 31] Invariant0.invariant' self) -> ([#"../bdd.rs" 364 15 364 35] IsValidBdd0.is_valid_bdd self a) -> ([#"../bdd.rs" 365 15 365 35] IsValidBdd0.is_valid_bdd self b) -> ([#"../bdd.rs" 366 15 366 21] a <> b) -> ([#"../bdd.rs" 367 14 367 50] Interp0.interp a (discr_valuation self a b) <> Interp0.interp b (discr_valuation self a b))
end
module Bdd_Impl9_DiscrValuation
  use prelude.Int
  use map.Map
  use prelude.UInt64
  use map.Const
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  clone Bdd_Impl9_SetIrreleventVar_Stub as SetIrreleventVar0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function Interp0.interp = Interp0.interp,
    axiom .
  clone Bdd_Impl8_Size_Stub as Size0 with
    axiom .
  function discr_valuation [#"../bdd.rs" 370 4 370 82] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Map.map uint64 bool
    
  val discr_valuation [#"../bdd.rs" 370 4 370 82] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Map.map uint64 bool
    requires {[#"../bdd.rs" 363 15 363 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 364 15 364 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 365 15 365 35] IsValidBdd0.is_valid_bdd self b}
    requires {[#"../bdd.rs" 366 15 366 21] a <> b}
    ensures { [#"../bdd.rs" 367 14 367 50] Interp0.interp a result <> Interp0.interp b result }
    ensures { result = discr_valuation self a b }
    
  axiom def : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, b : Bdd_Bdd_Type.t_bdd . discr_valuation self a b = ([#"../bdd.rs" 372 12 372 36] let _ = () in if Leastvar0.leastvar a < Leastvar0.leastvar b then
    match (a) with
      | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childt childf) _ -> if childf <> b then
        Map.set (discr_valuation self childf b) v false
      else
        Map.set (discr_valuation self childt b) v true
      
      | _ -> Const.const true
      end
  else
    if Leastvar0.leastvar a > Leastvar0.leastvar b then
      match (b) with
        | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childt childf) _ -> if childf <> a then
          Map.set (discr_valuation self a childf) v false
        else
          Map.set (discr_valuation self a childt) v true
        
        | _ -> Const.const true
        end
    else
      match (a) with
        | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childta childfa) _ -> match (b) with
          | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If _ childtb childfb) _ -> if childfa <> childfb then
            Map.set (discr_valuation self childfa childfb) v false
          else
            Map.set (discr_valuation self childta childtb) v true
          
          | _ -> Const.const true
          end
        | _ -> Const.const true
        end
    
  )
  axiom discr_valuation_spec : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, b : Bdd_Bdd_Type.t_bdd . ([#"../bdd.rs" 363 15 363 31] Invariant0.invariant' self) -> ([#"../bdd.rs" 364 15 364 35] IsValidBdd0.is_valid_bdd self a) -> ([#"../bdd.rs" 365 15 365 35] IsValidBdd0.is_valid_bdd self b) -> ([#"../bdd.rs" 366 15 366 21] a <> b) -> ([#"../bdd.rs" 367 14 367 50] Interp0.interp a (discr_valuation self a b) <> Interp0.interp b (discr_valuation self a b))
end
module Bdd_Impl9_DiscrValuation_Impl
  use prelude.Int
  use map.Map
  use prelude.UInt64
  use map.Const
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel6
  clone Bdd_Impl4_ShallowModel as ShallowModel5 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Core_Num_Impl9_Max as Max0
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl9_SetIrreleventVar as SetIrreleventVar0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function Interp0.interp = Interp0.interp,
    axiom .
  clone Bdd_Impl8_Size as Size0 with
    axiom .
  let rec ghost function discr_valuation [#"../bdd.rs" 370 4 370 82] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Map.map uint64 bool
    requires {[#"../bdd.rs" 363 15 363 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 364 15 364 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 365 15 365 35] IsValidBdd0.is_valid_bdd self b}
    requires {[#"../bdd.rs" 366 15 366 21] a <> b}
    ensures { [#"../bdd.rs" 367 14 367 50] Interp0.interp a result <> Interp0.interp b result }
    variant {[#"../bdd.rs" 368 14 368 33] Size0.size a + Size0.size b}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../bdd.rs" 372 12 372 36] let _ = () in if let b = Leastvar0.leastvar b in let a = Leastvar0.leastvar a in pure {a < b} then
      match (a) with
        | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childt childf) _ -> if pure {childf <> b} then
          let a' = discr_valuation self childf b in Map.set a' v false
        else
          let a' = discr_valuation self childt b in Map.set a' v true
        
        | _ -> Const.const true
        end
    else
      if let b = Leastvar0.leastvar b in let a = Leastvar0.leastvar a in pure {a > b} then
        match (b) with
          | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childt childf) _ -> if pure {childf <> a} then
            let a' = discr_valuation self a childf in Map.set a' v false
          else
            let a' = discr_valuation self a childt in Map.set a' v true
          
          | _ -> Const.const true
          end
      else
        match (a) with
          | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If v childta childfa) _ -> match (b) with
            | Bdd_Bdd_Type.C_Bdd (Bdd_Node_Type.C_If _ childtb childfb) _ -> if pure {childfa <> childfb} then
              let a' = discr_valuation self childfa childfb in Map.set a' v false
            else
              let a' = discr_valuation self childta childtb in Map.set a' v true
            
            | _ -> Const.const true
            end
          | _ -> Const.const true
          end
      
    
end
module Bdd_Impl9_BddCanonical_Stub
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function bdd_canonical [#"../bdd.rs" 419 4 419 62] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : ()
    
end
module Bdd_Impl9_BddCanonical_Interface
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  function bdd_canonical [#"../bdd.rs" 419 4 419 62] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : ()
    
  val bdd_canonical [#"../bdd.rs" 419 4 419 62] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : ()
    requires {[#"../bdd.rs" 413 15 413 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 414 15 414 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 415 15 415 35] IsValidBdd0.is_valid_bdd self b}
    requires {[#"../bdd.rs" 416 4 416 56] forall v : Map.map uint64 bool . Interp0.interp a v = Interp0.interp b v}
    ensures { [#"../bdd.rs" 417 14 417 20] a = b }
    ensures { result = bdd_canonical self a b }
    
  axiom bdd_canonical_spec : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, b : Bdd_Bdd_Type.t_bdd . ([#"../bdd.rs" 413 15 413 31] Invariant0.invariant' self) -> ([#"../bdd.rs" 414 15 414 35] IsValidBdd0.is_valid_bdd self a) -> ([#"../bdd.rs" 415 15 415 35] IsValidBdd0.is_valid_bdd self b) -> ([#"../bdd.rs" 416 4 416 56] forall v : Map.map uint64 bool . Interp0.interp a v = Interp0.interp b v) -> ([#"../bdd.rs" 417 14 417 20] a = b)
end
module Bdd_Impl9_BddCanonical
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl8_Size_Stub as Size0 with
    axiom .
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  clone Bdd_Impl9_DiscrValuation_Stub as DiscrValuation0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Size0.size = Size0.size,
    axiom .
  function bdd_canonical [#"../bdd.rs" 419 4 419 62] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : ()
    
   =
    [#"../bdd.rs" 420 8 420 29] let _ = () in ()
  val bdd_canonical [#"../bdd.rs" 419 4 419 62] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : ()
    requires {[#"../bdd.rs" 413 15 413 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 414 15 414 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 415 15 415 35] IsValidBdd0.is_valid_bdd self b}
    requires {[#"../bdd.rs" 416 4 416 56] forall v : Map.map uint64 bool . Interp0.interp a v = Interp0.interp b v}
    ensures { [#"../bdd.rs" 417 14 417 20] a = b }
    ensures { result = bdd_canonical self a b }
    
  axiom bdd_canonical_spec : forall self : Bdd_Context_Type.t_context, a : Bdd_Bdd_Type.t_bdd, b : Bdd_Bdd_Type.t_bdd . ([#"../bdd.rs" 413 15 413 31] Invariant0.invariant' self) -> ([#"../bdd.rs" 414 15 414 35] IsValidBdd0.is_valid_bdd self a) -> ([#"../bdd.rs" 415 15 415 35] IsValidBdd0.is_valid_bdd self b) -> ([#"../bdd.rs" 416 4 416 56] forall v : Map.map uint64 bool . Interp0.interp a v = Interp0.interp b v) -> ([#"../bdd.rs" 417 14 417 20] a = b)
end
module Bdd_Impl9_BddCanonical_Impl
  use map.Map
  use prelude.Int
  use prelude.UInt64
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel6
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel5 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl4_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl9_SetIrreleventVar as SetIrreleventVar0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function Interp0.interp = Interp0.interp,
    axiom .
  clone Bdd_Impl8_Size as Size0 with
    axiom .
  clone Bdd_Impl9_DiscrValuation as DiscrValuation0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Size0.size = Size0.size,
    function SetIrreleventVar0.set_irrelevent_var = SetIrreleventVar0.set_irrelevent_var,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    axiom .
  let rec ghost function bdd_canonical [#"../bdd.rs" 419 4 419 62] (self : Bdd_Context_Type.t_context) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : ()
    requires {[#"../bdd.rs" 413 15 413 31] Invariant0.invariant' self}
    requires {[#"../bdd.rs" 414 15 414 35] IsValidBdd0.is_valid_bdd self a}
    requires {[#"../bdd.rs" 415 15 415 35] IsValidBdd0.is_valid_bdd self b}
    requires {[#"../bdd.rs" 416 4 416 56] forall v : Map.map uint64 bool . Interp0.interp a v = Interp0.interp b v}
    ensures { [#"../bdd.rs" 417 14 417 20] a = b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../bdd.rs" 420 8 420 29] let _ = () in ()
end
module Bdd_Impl10_New_Interface
  use prelude.Borrow
  use Bdd_Context_Type as Bdd_Context_Type
  use Bdd_Bumpalo_Bump_Type as Bdd_Bumpalo_Bump_Type
  val new [#"../bdd.rs" 425 4 425 52] (alloc : Bdd_Bumpalo_Bump_Type.t_bump) : Bdd_Context_Type.t_context
end
module Bdd_Impl10_New
  use map.Const
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt64
  use map.Map
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  use Bdd_Bumpalo_Bump_Type as Bdd_Bumpalo_Bump_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Hashmap_Impl1_New_Interface as New2 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl1_New_Interface as New1 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl1_New_Interface as New0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  let rec cfg new [#"../bdd.rs" 425 4 425 52] [@cfg:stackify] [@cfg:subregion_analysis] (alloc : Bdd_Bumpalo_Bump_Type.t_bump) : Bdd_Context_Type.t_context
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Context_Type.t_context;
  var alloc : Bdd_Bumpalo_Bump_Type.t_bump = alloc;
  var _4 : Ghost.ghost_ty (Map.map uint64 (Bdd_Node_Type.t_node));
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- ([#"../bdd.rs" 429 28 429 58] Ghost.new (Const.const (Bdd_Node_Type.C_True)));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _0 <- Bdd_Context_Type.C_Context alloc ([#"../bdd.rs" 428 22 428 47] New0.new ()) _4 ([#"../bdd.rs" 430 22 430 47] New1.new ()) ([#"../bdd.rs" 431 22 431 47] New2.new ()) ([#"../bdd.rs" 432 17 432 18] (0 : uint64));
    _4 <- any Ghost.ghost_ty (Map.map uint64 (Bdd_Node_Type.t_node));
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Bdd_Impl10_Hashcons_Interface
  use prelude.Borrow
  use Bdd_Node_Type as Bdd_Node_Type
  use Bdd_Context_Type as Bdd_Context_Type
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl9_IsValidNode_Stub as IsValidNode0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val hashcons [#"../bdd.rs" 442 4 442 58] (self : borrowed (Bdd_Context_Type.t_context)) (n : Bdd_Node_Type.t_node) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 436 15 436 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 437 15 437 36] IsValidNode0.is_valid_node ( * self) n}
    ensures { [#"../bdd.rs" 438 14 438 28] Bdd_Bdd_Type.bdd_0 result = n }
    ensures { [#"../bdd.rs" 439 14 439 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 440 14 440 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 441 14 441 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    
end
module Bdd_Impl10_Hashcons
  use prelude.Borrow
  use prelude.Ghost
  use map.Map
  use prelude.Int
  use prelude.UInt64
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel8
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel7 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone Core_Num_Impl9_Max as Max0
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel6 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel5 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Bdd_Impl8_Interp as Interp0
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel4 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Node_Type.t_node) (Bdd_Bdd_Type.t_bdd),
    type ShallowModelTy0.shallowModelTy = Map.map (Bdd_NodeLog_Type.t_nodelog) (Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd)),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl3_DeepModel as DeepModel1
  use Bdd_Bumpalo_Bump_Type as Bdd_Bumpalo_Bump_Type
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Node_Type.t_node,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Node_Type.t_node) (Bdd_Bdd_Type.t_bdd),
    type ShallowModelTy0.shallowModelTy = Map.map (Bdd_NodeLog_Type.t_nodelog) (Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd)),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl4_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Bdd_Context_Type.t_context
  clone Bdd_Hashmap_Impl1_Add_Interface as Add0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Bdd_Node_Type.t_node
  clone Bdd_Bumpalo_Impl0_Alloc_Interface as Alloc0 with
    type t = Bdd_Node_Type.t_node
  clone Bdd_Hashmap_Impl1_Get_Interface as Get0 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  let rec cfg hashcons [#"../bdd.rs" 442 4 442 58] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) (n : Bdd_Node_Type.t_node) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 436 15 436 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 437 15 437 36] IsValidNode0.is_valid_node ( * self) n}
    ensures { [#"../bdd.rs" 438 14 438 28] Bdd_Bdd_Type.bdd_0 result = n }
    ensures { [#"../bdd.rs" 439 14 439 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 440 14 440 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 441 14 441 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var n : Bdd_Node_Type.t_node = n;
  var _10 : Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd);
  var _13 : Bdd_Node_Type.t_node;
  var r : Bdd_Bdd_Type.t_bdd;
  var r1 : Bdd_Bdd_Type.t_bdd;
  var _21 : borrowed (Bdd_Node_Type.t_node);
  var _25 : ();
  var _26 : borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Node_Type.t_node) (Bdd_Bdd_Type.t_bdd));
  var _29 : Ghost.ghost_ty (Map.map uint64 (Bdd_Node_Type.t_node));
  {
    goto BB0
  }
  BB0 {
    _13 <- n;
    _10 <- ([#"../bdd.rs" 443 26 443 47] Get0.get (Bdd_Context_Type.context_hashcons ( * self)) _13);
    goto BB1
  }
  BB1 {
    switch (_10)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB4
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    r <- Core_Option_Option_Type.some_0 _10;
    assume { Resolve1.resolve self };
    assert { [@expl:assertion] [#"../bdd.rs" 444 28 444 38] ShallowModel0.shallow_model (Bdd_Bdd_Type.bdd_0 r) = ShallowModel1.shallow_model n };
    _0 <- r;
    goto BB12
  }
  BB4 {
    _21 <- ([#"../bdd.rs" 447 20 447 39] Alloc0.alloc (Bdd_Context_Type.context_alloc ( * self)) n);
    goto BB5
  }
  BB5 {
    r1 <- Bdd_Bdd_Type.C_Bdd ( * _21) (Bdd_Context_Type.context_cnt ( * self));
    assume { Resolve0.resolve _21 };
    _26 <- borrow_mut (Bdd_Context_Type.context_hashcons ( * self));
    self <- { self with current = (let Bdd_Context_Type.C_Context a b c d e f =  * self in Bdd_Context_Type.C_Context a ( ^ _26) c d e f) };
    _25 <- ([#"../bdd.rs" 448 8 448 31] Add0.add _26 n r1);
    _26 <- any borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Node_Type.t_node) (Bdd_Bdd_Type.t_bdd));
    goto BB6
  }
  BB6 {
    _29 <- ([#"../bdd.rs" 449 30 449 88] Ghost.new (Map.set (Ghost.inner (Bdd_Context_Type.context_hashcons_ghost ( * self))) (Bdd_Bdd_Type.bdd_1 r1) (Bdd_Bdd_Type.bdd_0 r1)));
    goto BB7
  }
  BB7 {
    self <- { self with current = (let Bdd_Context_Type.C_Context a b c d e f =  * self in Bdd_Context_Type.C_Context a b _29 d e f) };
    _29 <- any Ghost.ghost_ty (Map.map uint64 (Bdd_Node_Type.t_node));
    switch ([#"../bdd.rs" 450 11 450 34] Bdd_Context_Type.context_cnt ( * self) > ([#"../bdd.rs" 450 22 450 34] ([#"../bdd.rs" 450 22 450 30] (18446744073709551615 : uint64)) - ([#"../bdd.rs" 450 33 450 34] (1 : uint64))))
      | False -> goto BB11
      | True -> goto BB8
      end
  }
  BB8 {
    assume { Resolve1.resolve self };
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB9
  }
  BB11 {
    self <- { self with current = (let Bdd_Context_Type.C_Context a b c d e f =  * self in Bdd_Context_Type.C_Context a b c d e ([#"../bdd.rs" 453 8 453 21] Bdd_Context_Type.context_cnt ( * self) + ([#"../bdd.rs" 453 20 453 21] (1 : uint64)))) };
    assume { Resolve1.resolve self };
    _0 <- r1;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Bdd_Impl10_Node_Interface
  use prelude.Borrow
  use prelude.UInt64
  use prelude.Int
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val node [#"../bdd.rs" 466 4 466 87] (self : borrowed (Bdd_Context_Type.t_context)) (x : uint64) (childt : Bdd_Bdd_Type.t_bdd) (childf : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 457 15 457 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 458 15 458 40] IsValidBdd0.is_valid_bdd ( * self) childt}
    requires {[#"../bdd.rs" 459 15 459 40] IsValidBdd0.is_valid_bdd ( * self) childf}
    requires {[#"../bdd.rs" 460 15 460 63] UInt64.to_int x < Leastvar0.leastvar childt /\ UInt64.to_int x < Leastvar0.leastvar childf}
    ensures { [#"../bdd.rs" 461 14 461 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 462 14 462 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 463 14 463 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 464 4 464 106] forall v : Map.map uint64 bool . Interp0.interp result v = (if Map.get v x then
      Interp0.interp childt v
    else
      Interp0.interp childf v
    ) }
    ensures { [#"../bdd.rs" 465 14 465 37] UInt64.to_int x <= Leastvar0.leastvar result }
    
end
module Bdd_Impl10_Node
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel1
  clone Bdd_Impl5_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel8
  clone Bdd_Impl4_ShallowModel as ShallowModel7 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Bdd_Impl6_ShallowModel as ShallowModel6 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel5 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone Core_Num_Impl9_Max as Max0
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel4 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel4.shallow_model
  clone Bdd_Impl10_Hashcons_Interface as Hashcons0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Bdd_Context_Type.t_context
  clone Bdd_Impl7_Eq_Interface as Eq0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg node [#"../bdd.rs" 466 4 466 87] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) (x : uint64) (childt : Bdd_Bdd_Type.t_bdd) (childf : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 457 15 457 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 458 15 458 40] IsValidBdd0.is_valid_bdd ( * self) childt}
    requires {[#"../bdd.rs" 459 15 459 40] IsValidBdd0.is_valid_bdd ( * self) childf}
    requires {[#"../bdd.rs" 460 15 460 63] UInt64.to_int x < Leastvar0.leastvar childt /\ UInt64.to_int x < Leastvar0.leastvar childf}
    ensures { [#"../bdd.rs" 461 14 461 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 462 14 462 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 463 14 463 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 464 4 464 106] forall v : Map.map uint64 bool . Interp0.interp result v = (if Map.get v x then
      Interp0.interp childt v
    else
      Interp0.interp childf v
    ) }
    ensures { [#"../bdd.rs" 465 14 465 37] UInt64.to_int x <= Leastvar0.leastvar result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var x : uint64 = x;
  var childt : Bdd_Bdd_Type.t_bdd = childt;
  var childf : Bdd_Bdd_Type.t_bdd = childf;
  var _19 : borrowed (Bdd_Context_Type.t_context);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    switch ([#"../bdd.rs" 467 11 467 27] Eq0.eq childt childf)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self };
    _0 <- childt;
    goto BB5
  }
  BB3 {
    _19 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _19) };
    _0 <- ([#"../bdd.rs" 470 8 470 50] Hashcons0.hashcons _19 (Bdd_Node_Type.C_If x childt childf));
    _19 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve self };
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Bdd_Impl10_True_Interface
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Core_Num_Impl9_Max_Stub as Max0
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val true_ [#"../bdd.rs" 479 4 479 42] (self : borrowed (Bdd_Context_Type.t_context)) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 473 15 473 31] Invariant0.invariant' ( * self)}
    ensures { [#"../bdd.rs" 474 14 474 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 475 14 475 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 476 14 476 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 477 4 477 44] forall v : Map.map uint64 bool . Interp0.interp result v }
    ensures { [#"../bdd.rs" 478 14 478 46] UInt64.to_int Max0.mAX' + 1 = Leastvar0.leastvar result }
    
end
module Bdd_Impl10_True
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel6
  clone Bdd_Impl4_ShallowModel as ShallowModel5 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Bdd_Context_Type.t_context
  clone Bdd_Impl10_Hashcons_Interface as Hashcons0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd
  let rec cfg true_ [#"../bdd.rs" 479 4 479 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 473 15 473 31] Invariant0.invariant' ( * self)}
    ensures { [#"../bdd.rs" 474 14 474 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 475 14 475 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 476 14 476 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 477 4 477 44] forall v : Map.map uint64 bool . Interp0.interp result v }
    ensures { [#"../bdd.rs" 478 14 478 46] UInt64.to_int Max0.mAX' + 1 = Leastvar0.leastvar result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var _8 : borrowed (Bdd_Context_Type.t_context);
  {
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _8) };
    _0 <- ([#"../bdd.rs" 480 8 480 27] Hashcons0.hashcons _8 (Bdd_Node_Type.C_True));
    _8 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module Bdd_Impl10_False_Interface
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Core_Num_Impl9_Max_Stub as Max0
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val false_ [#"../bdd.rs" 489 4 489 43] (self : borrowed (Bdd_Context_Type.t_context)) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 483 15 483 31] Invariant0.invariant' ( * self)}
    ensures { [#"../bdd.rs" 484 14 484 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 485 14 485 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 486 14 486 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 487 4 487 45] forall v : Map.map uint64 bool . not Interp0.interp result v }
    ensures { [#"../bdd.rs" 488 14 488 46] UInt64.to_int Max0.mAX' + 1 = Leastvar0.leastvar result }
    
end
module Bdd_Impl10_False
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel6
  clone Bdd_Impl4_ShallowModel as ShallowModel5 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Bdd_Context_Type.t_context
  clone Bdd_Impl10_Hashcons_Interface as Hashcons0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd
  let rec cfg false_ [#"../bdd.rs" 489 4 489 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 483 15 483 31] Invariant0.invariant' ( * self)}
    ensures { [#"../bdd.rs" 484 14 484 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 485 14 485 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 486 14 486 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 487 4 487 45] forall v : Map.map uint64 bool . not Interp0.interp result v }
    ensures { [#"../bdd.rs" 488 14 488 46] UInt64.to_int Max0.mAX' + 1 = Leastvar0.leastvar result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var _8 : borrowed (Bdd_Context_Type.t_context);
  {
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _8) };
    _0 <- ([#"../bdd.rs" 490 8 490 28] Hashcons0.hashcons _8 (Bdd_Node_Type.C_False));
    _8 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module Bdd_Impl10_V_Interface
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val v [#"../bdd.rs" 498 4 498 46] (self : borrowed (Bdd_Context_Type.t_context)) (x : uint64) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 493 15 493 31] Invariant0.invariant' ( * self)}
    ensures { [#"../bdd.rs" 494 14 494 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 495 14 495 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 496 14 496 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 497 4 497 56] forall v : Map.map uint64 bool . Interp0.interp result v = Map.get v x }
    
end
module Bdd_Impl10_V
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel6
  clone Bdd_Impl4_ShallowModel as ShallowModel5 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel3 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel2 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Bdd_Context_Type.t_context
  clone Bdd_Impl10_Node_Interface as Node0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    predicate Grows0.grows = Grows0.grows,
    function Interp0.interp = Interp0.interp
  clone Bdd_Impl10_False_Interface as False0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    val Max0.mAX' = Max0.mAX',
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl10_True_Interface as True0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    val Max0.mAX' = Max0.mAX',
    function Leastvar0.leastvar = Leastvar0.leastvar
  let rec cfg v [#"../bdd.rs" 498 4 498 46] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) (x : uint64) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 493 15 493 31] Invariant0.invariant' ( * self)}
    ensures { [#"../bdd.rs" 494 14 494 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 495 14 495 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 496 14 496 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 497 4 497 56] forall v : Map.map uint64 bool . Interp0.interp result v = Map.get v x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var x : uint64 = x;
  var t : Bdd_Bdd_Type.t_bdd;
  var _9 : borrowed (Bdd_Context_Type.t_context);
  var f : Bdd_Bdd_Type.t_bdd;
  var _11 : borrowed (Bdd_Context_Type.t_context);
  var _12 : borrowed (Bdd_Context_Type.t_context);
  {
    goto BB0
  }
  BB0 {
    _9 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _9) };
    t <- ([#"../bdd.rs" 499 16 499 28] True0.true_ _9);
    _9 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB1
  }
  BB1 {
    _11 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _11) };
    f <- ([#"../bdd.rs" 500 16 500 29] False0.false_ _11);
    _11 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _12) };
    _0 <- ([#"../bdd.rs" 501 8 501 26] Node0.node _12 x t f);
    _12 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module Bdd_Impl10_Not_Interface
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Size_Stub as Size0 with
    axiom .
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val not' [#"../bdd.rs" 512 4 512 56] (self : borrowed (Bdd_Context_Type.t_context)) (x : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 504 15 504 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 505 15 505 35] IsValidBdd0.is_valid_bdd ( * self) x}
    ensures { [#"../bdd.rs" 506 14 506 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 507 14 507 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 508 14 508 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 509 4 509 60] forall v : Map.map uint64 bool . Interp0.interp result v = (not Interp0.interp x v) }
    ensures { [#"../bdd.rs" 510 14 510 47] Leastvar0.leastvar x <= Leastvar0.leastvar result }
    
end
module Bdd_Impl10_Not
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel2
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel8
  clone Bdd_Impl4_ShallowModel as ShallowModel7 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel6 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel5 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel4 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel3 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd),
    type ShallowModelTy0.shallowModelTy = Map.map uint64 (Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl5_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd),
    type ShallowModelTy0.shallowModelTy = Map.map uint64 (Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl8_Size as Size0 with
    axiom .
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel5.shallow_model
  clone Bdd_Hashmap_Impl1_Add_Interface as Add0 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone Bdd_Impl10_True_Interface as True0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    val Max0.mAX' = Max0.mAX',
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl10_Node_Interface as Node0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    predicate Grows0.grows = Grows0.grows,
    function Interp0.interp = Interp0.interp
  clone Bdd_Impl10_False_Interface as False0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    val Max0.mAX' = Max0.mAX',
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Bdd_Context_Type.t_context
  clone Bdd_Hashmap_Impl1_Get_Interface as Get0 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = uint64
  let rec cfg not' [#"../bdd.rs" 512 4 512 56] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) (x : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 504 15 504 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 505 15 505 35] IsValidBdd0.is_valid_bdd ( * self) x}
    ensures { [#"../bdd.rs" 506 14 506 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 507 14 507 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 508 14 508 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 509 4 509 60] forall v : Map.map uint64 bool . Interp0.interp result v = (not Interp0.interp x v) }
    ensures { [#"../bdd.rs" 510 14 510 47] Leastvar0.leastvar x <= Leastvar0.leastvar result }
    variant {[#"../bdd.rs" 511 14 511 22] Size0.size x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var x : Bdd_Bdd_Type.t_bdd = x;
  var _12 : Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd);
  var _15 : Bdd_Bdd_Type.t_bdd;
  var r : Bdd_Bdd_Type.t_bdd;
  var r1 : Bdd_Bdd_Type.t_bdd;
  var _21 : borrowed (Bdd_Context_Type.t_context);
  var _22 : borrowed (Bdd_Context_Type.t_context);
  var v : uint64;
  var childt : Bdd_Bdd_Type.t_bdd;
  var childf : Bdd_Bdd_Type.t_bdd;
  var childt1 : Bdd_Bdd_Type.t_bdd;
  var _27 : borrowed (Bdd_Context_Type.t_context);
  var childf1 : Bdd_Bdd_Type.t_bdd;
  var _30 : borrowed (Bdd_Context_Type.t_context);
  var _32 : borrowed (Bdd_Context_Type.t_context);
  var _36 : ();
  var _37 : borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd));
  {
    goto BB0
  }
  BB0 {
    _15 <- x;
    _12 <- ([#"../bdd.rs" 513 25 513 46] Get0.get (Bdd_Context_Type.context_not_memo ( * self)) _15);
    goto BB1
  }
  BB1 {
    switch (_12)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    r <- Core_Option_Option_Type.some_0 _12;
    _0 <- r;
    assume { Resolve0.resolve self };
    goto BB18
  }
  BB4 {
    assume { Resolve0.resolve self };
    absurd
  }
  BB5 {
    switch (Bdd_Bdd_Type.bdd_0 x)
      | Bdd_Node_Type.C_False -> goto BB6
      | Bdd_Node_Type.C_True -> goto BB7
      | Bdd_Node_Type.C_If _ _ _ -> goto BB8
      end
  }
  BB6 {
    goto BB11
  }
  BB7 {
    goto BB9
  }
  BB8 {
    v <- Bdd_Node_Type.if_v (Bdd_Bdd_Type.bdd_0 x);
    childt <- Bdd_Node_Type.if_childt (Bdd_Bdd_Type.bdd_0 x);
    childf <- Bdd_Node_Type.if_childf (Bdd_Bdd_Type.bdd_0 x);
    _27 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _27) };
    childt1 <- ([#"../bdd.rs" 520 29 520 45] not' _27 childt);
    _27 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB13
  }
  BB9 {
    _21 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _21) };
    r1 <- ([#"../bdd.rs" 517 20 517 33] False0.false_ _21);
    _21 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB10
  }
  BB10 {
    goto BB16
  }
  BB11 {
    _22 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _22) };
    r1 <- ([#"../bdd.rs" 518 21 518 33] True0.true_ _22);
    _22 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB12
  }
  BB12 {
    goto BB16
  }
  BB13 {
    _30 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _30) };
    childf1 <- ([#"../bdd.rs" 521 29 521 45] not' _30 childf);
    _30 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB14
  }
  BB14 {
    _32 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _32) };
    r1 <- ([#"../bdd.rs" 522 16 522 44] Node0.node _32 v childt1 childf1);
    _32 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    _37 <- borrow_mut (Bdd_Context_Type.context_not_memo ( * self));
    self <- { self with current = (let Bdd_Context_Type.C_Context a b c d e f =  * self in Bdd_Context_Type.C_Context a b c ( ^ _37) e f) };
    _36 <- ([#"../bdd.rs" 525 8 525 31] Add0.add _37 x r1);
    _37 <- any borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd));
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve self };
    _0 <- r1;
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 76 12 85 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Core_Cmp_Impls_Impl63_Cmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Std1_Num_Impl10_DeepModel_Stub as DeepModel0
  val cmp (self : uint64) (other : uint64) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 44 26 44 85] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module Bdd_Impl10_And_Interface
  use prelude.Borrow
  use map.Map
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl8_Size_Stub as Size0 with
    axiom .
  clone Bdd_Impl8_Leastvar_Stub as Leastvar0
  clone Bdd_Impl8_Interp_Stub as Interp0
  clone Bdd_Impl9_Grows_Stub as Grows0
  clone Bdd_Impl9_IsValidBdd_Stub as IsValidBdd0
  clone Bdd_Impl9_Invariant_Stub as Invariant0
  val and [#"../bdd.rs" 538 4 538 72] (self : borrowed (Bdd_Context_Type.t_context)) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 529 15 529 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 530 15 530 35] IsValidBdd0.is_valid_bdd ( * self) a}
    requires {[#"../bdd.rs" 531 15 531 35] IsValidBdd0.is_valid_bdd ( * self) b}
    ensures { [#"../bdd.rs" 532 14 532 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 533 14 533 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 534 14 534 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 535 4 535 76] forall v : Map.map uint64 bool . Interp0.interp result v = (Interp0.interp a v /\ Interp0.interp b v) }
    ensures { [#"../bdd.rs" 536 14 536 84] Leastvar0.leastvar a <= Leastvar0.leastvar result \/ Leastvar0.leastvar b <= Leastvar0.leastvar result }
    
end
module Bdd_Impl10_And
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use map.Map
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel4
  clone CreusotContracts_Std1_Num_Impl9_ShallowModel as ShallowModel8
  clone Bdd_Impl4_ShallowModel as ShallowModel7 with
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone Bdd_Impl5_DeepModel as DeepModel3
  use prelude.Int
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel6 with
    type t = uint64,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  use Bdd_Hashmap_MyHashMap_Type as Bdd_Hashmap_MyHashMap_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel5 with
    type k = Bdd_Bdd_Type.t_bdd,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel4 with
    type k = Bdd_Node_Type.t_node,
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl8_Leastvar as Leastvar0 with
    val Max0.mAX' = Max0.mAX',
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel3 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  use Bdd_Context_Type as Bdd_Context_Type
  clone Bdd_Impl9_IsValidBdd as IsValidBdd0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Bdd_Impl9_IsValidNode as IsValidNode0 with
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Hashmap_Impl0_ShallowModel_Interface as ShallowModel1 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  use map.Map
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd),
    type ShallowModelTy0.shallowModelTy = Map.map (uint64, uint64) (Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Tuples_Impl4_DeepModel as DeepModel2 with
    type a = Bdd_Bdd_Type.t_bdd,
    type b = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64,
    type DeepModelTy1.deepModelTy = uint64,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog0
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel1
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Bdd_Node_Type.t_node
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = Bdd_Bdd_Type.t_bdd
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type DeepModelTy0.deepModelTy = (uint64, uint64),
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd),
    type ShallowModelTy0.shallowModelTy = Map.map (uint64, uint64) (Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Impl8_Size as Size0 with
    axiom .
  clone Bdd_Impl8_Interp as Interp0
  clone Bdd_Impl9_Grows as Grows0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Bdd_Impl9_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate IsValidNode0.is_valid_node = IsValidNode0.is_valid_node,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    function ShallowModel2.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel1.shallow_model
  clone Bdd_Hashmap_Impl1_Add_Interface as Add0 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = (uint64, uint64),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone Bdd_Impl10_False_Interface as False0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Grows0.grows = Grows0.grows,
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Interp0.interp = Interp0.interp,
    val Max0.mAX' = Max0.mAX',
    function Leastvar0.leastvar = Leastvar0.leastvar
  clone Bdd_Impl10_Node_Interface as Node0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsValidBdd0.is_valid_bdd = IsValidBdd0.is_valid_bdd,
    function Leastvar0.leastvar = Leastvar0.leastvar,
    predicate Grows0.grows = Grows0.grows,
    function Interp0.interp = Interp0.interp
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Bdd_Context_Type.t_context
  clone Core_Cmp_Impls_Impl63_Cmp_Interface as Cmp0 with
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = Bdd_Node_Type.t_node,
    type t2 = Bdd_Node_Type.t_node,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve4.resolve
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Bdd_Bdd_Type.t_bdd,
    type t2 = Bdd_Bdd_Type.t_bdd,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone Bdd_Hashmap_Impl1_Get_Interface as Get0 with
    type k = (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd),
    type v = Bdd_Bdd_Type.t_bdd,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = (uint64, uint64)
  let rec cfg and [#"../bdd.rs" 538 4 538 72] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Bdd_Context_Type.t_context)) (a : Bdd_Bdd_Type.t_bdd) (b : Bdd_Bdd_Type.t_bdd) : Bdd_Bdd_Type.t_bdd
    requires {[#"../bdd.rs" 529 15 529 31] Invariant0.invariant' ( * self)}
    requires {[#"../bdd.rs" 530 15 530 35] IsValidBdd0.is_valid_bdd ( * self) a}
    requires {[#"../bdd.rs" 531 15 531 35] IsValidBdd0.is_valid_bdd ( * self) b}
    ensures { [#"../bdd.rs" 532 14 532 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../bdd.rs" 533 14 533 26] Grows0.grows self }
    ensures { [#"../bdd.rs" 534 14 534 42] IsValidBdd0.is_valid_bdd ( ^ self) result }
    ensures { [#"../bdd.rs" 535 4 535 76] forall v : Map.map uint64 bool . Interp0.interp result v = (Interp0.interp a v /\ Interp0.interp b v) }
    ensures { [#"../bdd.rs" 536 14 536 84] Leastvar0.leastvar a <= Leastvar0.leastvar result \/ Leastvar0.leastvar b <= Leastvar0.leastvar result }
    variant {[#"../bdd.rs" 537 14 537 33] Size0.size a + Size0.size b}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Bdd_Bdd_Type.t_bdd;
  var self : borrowed (Bdd_Context_Type.t_context) = self;
  var a : Bdd_Bdd_Type.t_bdd = a;
  var b : Bdd_Bdd_Type.t_bdd = b;
  var _14 : Core_Option_Option_Type.t_option (Bdd_Bdd_Type.t_bdd);
  var _17 : (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd);
  var _18 : (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd);
  var r : Bdd_Bdd_Type.t_bdd;
  var r1 : Bdd_Bdd_Type.t_bdd;
  var _25 : (Bdd_Node_Type.t_node, Bdd_Node_Type.t_node);
  var _33 : borrowed (Bdd_Context_Type.t_context);
  var va : uint64;
  var childta : Bdd_Bdd_Type.t_bdd;
  var childfa : Bdd_Bdd_Type.t_bdd;
  var vb : uint64;
  var childtb : Bdd_Bdd_Type.t_bdd;
  var childfb : Bdd_Bdd_Type.t_bdd;
  var v : uint64;
  var childt : Bdd_Bdd_Type.t_bdd;
  var childf : Bdd_Bdd_Type.t_bdd;
  var _43 : ();
  var _47 : uint64;
  var _51 : borrowed (Bdd_Context_Type.t_context);
  var _55 : borrowed (Bdd_Context_Type.t_context);
  var _60 : borrowed (Bdd_Context_Type.t_context);
  var _64 : borrowed (Bdd_Context_Type.t_context);
  var _69 : borrowed (Bdd_Context_Type.t_context);
  var _73 : borrowed (Bdd_Context_Type.t_context);
  var _76 : borrowed (Bdd_Context_Type.t_context);
  var _80 : ();
  var _81 : borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd));
  {
    goto BB0
  }
  BB0 {
    _18 <- (a, b);
    _17 <- _18;
    _14 <- ([#"../bdd.rs" 539 25 539 51] Get0.get (Bdd_Context_Type.context_and_memo ( * self)) _17);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _18 };
    switch (_14)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    r <- Core_Option_Option_Type.some_0 _14;
    _0 <- r;
    assume { Resolve2.resolve self };
    goto BB35
  }
  BB4 {
    absurd
  }
  BB5 {
    _25 <- (Bdd_Bdd_Type.bdd_0 a, Bdd_Bdd_Type.bdd_0 b);
    switch (let (a, _) = _25 in a)
      | Bdd_Node_Type.C_True -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    switch (let (_, a) = _25 in a)
      | Bdd_Node_Type.C_True -> goto BB9
      | _ -> goto BB8
      end
  }
  BB7 {
    goto BB15
  }
  BB8 {
    switch (let (a, _) = _25 in a)
      | Bdd_Node_Type.C_False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB9 {
    goto BB16
  }
  BB10 {
    goto BB17
  }
  BB11 {
    switch (let (_, a) = _25 in a)
      | Bdd_Node_Type.C_False -> goto BB12
      | Bdd_Node_Type.C_If _ _ _ -> goto BB13
      | _ -> goto BB37
      end
  }
  BB12 {
    goto BB17
  }
  BB13 {
    switch (let (a, _) = _25 in a)
      | Bdd_Node_Type.C_If _ _ _ -> goto BB14
      | _ -> goto BB38
      end
  }
  BB14 {
    vb <- Bdd_Node_Type.if_v (let (_, a) = _25 in a);
    childtb <- Bdd_Node_Type.if_childt (let (_, a) = _25 in a);
    childfb <- Bdd_Node_Type.if_childf (let (_, a) = _25 in a);
    va <- Bdd_Node_Type.if_v (let (a, _) = _25 in a);
    childta <- Bdd_Node_Type.if_childt (let (a, _) = _25 in a);
    childfa <- Bdd_Node_Type.if_childf (let (a, _) = _25 in a);
    assume { Resolve1.resolve _25 };
    _47 <- vb;
    goto BB19
  }
  BB15 {
    assume { Resolve1.resolve _25 };
    r1 <- b;
    goto BB33
  }
  BB16 {
    assume { Resolve1.resolve _25 };
    r1 <- a;
    goto BB33
  }
  BB17 {
    assume { Resolve1.resolve _25 };
    _33 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _33) };
    r1 <- ([#"../bdd.rs" 545 39 545 52] False0.false_ _33);
    _33 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB18
  }
  BB18 {
    goto BB33
  }
  BB19 {
    switch ([#"../bdd.rs" 551 22 551 33] Cmp0.cmp va _47)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB20
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB21
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB22
      end
  }
  BB20 {
    goto BB26
  }
  BB21 {
    v <- va;
    _69 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _69) };
    goto BB29
  }
  BB22 {
    goto BB23
  }
  BB23 {
    v <- vb;
    _51 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _51) };
    goto BB24
  }
  BB24 {
    childt <- ([#"../bdd.rs" 554 33 554 53] and _51 a childtb);
    _51 <- any borrowed (Bdd_Context_Type.t_context);
    _55 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _55) };
    goto BB25
  }
  BB25 {
    childf <- ([#"../bdd.rs" 555 33 555 53] and _55 a childfb);
    _55 <- any borrowed (Bdd_Context_Type.t_context);
    _43 <- ();
    goto BB31
  }
  BB26 {
    v <- va;
    _60 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _60) };
    goto BB27
  }
  BB27 {
    childt <- ([#"../bdd.rs" 559 33 559 53] and _60 childta b);
    _60 <- any borrowed (Bdd_Context_Type.t_context);
    _64 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _64) };
    goto BB28
  }
  BB28 {
    childf <- ([#"../bdd.rs" 560 33 560 53] and _64 childfa b);
    _64 <- any borrowed (Bdd_Context_Type.t_context);
    _43 <- ();
    goto BB31
  }
  BB29 {
    childt <- ([#"../bdd.rs" 564 33 564 59] and _69 childta childtb);
    _69 <- any borrowed (Bdd_Context_Type.t_context);
    _73 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _73) };
    goto BB30
  }
  BB30 {
    childf <- ([#"../bdd.rs" 565 33 565 59] and _73 childfa childfb);
    _73 <- any borrowed (Bdd_Context_Type.t_context);
    _43 <- ();
    goto BB31
  }
  BB31 {
    _76 <- borrow_mut ( * self);
    self <- { self with current = ( ^ _76) };
    r1 <- ([#"../bdd.rs" 568 16 568 44] Node0.node _76 v childt childf);
    _76 <- any borrowed (Bdd_Context_Type.t_context);
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    _81 <- borrow_mut (Bdd_Context_Type.context_and_memo ( * self));
    self <- { self with current = (let Bdd_Context_Type.C_Context a b c d e f =  * self in Bdd_Context_Type.C_Context a b c d ( ^ _81) f) };
    _80 <- ([#"../bdd.rs" 571 8 571 36] Add0.add _81 (a, b) r1);
    _81 <- any borrowed (Bdd_Hashmap_MyHashMap_Type.t_myhashmap (Bdd_Bdd_Type.t_bdd, Bdd_Bdd_Type.t_bdd) (Bdd_Bdd_Type.t_bdd));
    goto BB34
  }
  BB34 {
    assume { Resolve2.resolve self };
    _0 <- r1;
    goto BB35
  }
  BB35 {
    return _0
  }
  BB37 {
    assume { Resolve2.resolve self };
    assume { Resolve1.resolve _25 };
    goto BB4
  }
  BB38 {
    assume { Resolve2.resolve self };
    assume { Resolve1.resolve _25 };
    goto BB4
  }
  BB39 {
    assume { Resolve2.resolve self };
    goto BB4
  }
  BB40 {
    goto BB21
  }
  
end
module Bdd_Hashmap_Impl0
  type k
  type v
end
module Bdd_Impl4
  
end
module Bdd_Impl6
  
end
module Bdd_Hashmap_Impl2
  type u
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with
    type self = v
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel3 with
    type self = v,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = u
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel2 with
    type self = u,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Hashmap_Hash_HashLog_Interface as HashLog2 with
    type self = v,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Bdd_Hashmap_Hash_HashLog_Interface as HashLog1 with
    type self = u,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Tuples_Impl4_DeepModel as DeepModel1 with
    type a = u,
    type b = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone Bdd_Hashmap_Impl2_HashLog as HashLog0 with
    type u = u,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    type DeepModelTy1.deepModelTy = DeepModelTy1.deepModelTy,
    function HashLog0.hash_log = HashLog1.hash_log,
    function HashLog1.hash_log = HashLog2.hash_log,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = (u, v),
    type DeepModelTy0.deepModelTy = (DeepModelTy0.deepModelTy, DeepModelTy1.deepModelTy),
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal hash_refn : [#"../bdd.rs" 76 8 76 29] forall self : (u, v) . forall result : uint64 . UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self) -> UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self)
end
module Bdd_Impl1
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel1
  clone Core_Num_Impl9_Max as Max0
  clone Bdd_Impl4_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Node_Type.t_node,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Bdd_Impl1_HashLog as HashLog0 with
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Node_Type.t_node,
    type ShallowModelTy0.shallowModelTy = Bdd_NodeLog_Type.t_nodelog,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  goal hash_refn : [#"../bdd.rs" 116 4 116 25] forall self : Bdd_Node_Type.t_node . forall result : uint64 . UInt64.to_int result = HashLog0.hash_log (ShallowModel0.shallow_model self) -> UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self)
end
module Bdd_Impl2
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl5_DeepModel as DeepModel1
  clone Bdd_Impl6_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Bdd_Impl2_HashLog as HashLog0
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  goal hash_refn : [#"../bdd.rs" 142 4 142 25] forall self : Bdd_Bdd_Type.t_bdd . forall result : uint64 . UInt64.to_int result = HashLog0.hash_log (ShallowModel0.shallow_model self) -> UInt64.to_int result = HashLog0.hash_log (DeepModel0.deep_model self)
end
module Bdd_Impl11
  
end
module Bdd_Impl17
  
end
module Bdd_Impl12
  
end
module Bdd_Impl18
  
end
module Bdd_Impl13
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  use Bdd_NodeLog_Type as Bdd_NodeLog_Type
  use Bdd_Node_Type as Bdd_Node_Type
  clone Bdd_Impl3_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Node_Type.t_node,
    type DeepModelTy0.deepModelTy = Bdd_NodeLog_Type.t_nodelog,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"../bdd.rs" 90 13 90 22] forall self : Bdd_Node_Type.t_node . forall other : Bdd_Node_Type.t_node . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Bdd_Impl7
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  clone Bdd_Impl5_DeepModel as DeepModel1
  clone Bdd_Impl6_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type DeepModelTy0.deepModelTy = uint64,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Bdd_Bdd_Type.t_bdd,
    type ShallowModelTy0.shallowModelTy = uint64,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  goal eq_refn : [#"../bdd.rs" 202 4 202 34] forall self : Bdd_Bdd_Type.t_bdd . forall other : Bdd_Bdd_Type.t_bdd . forall result : bool . result = (ShallowModel0.shallow_model self = ShallowModel0.shallow_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Bdd_Impl14
  use prelude.Borrow
  use Bdd_Node_Type as Bdd_Node_Type
  goal clone'_refn : [#"../bdd.rs" 90 24 90 29] forall self : Bdd_Node_Type.t_node . forall result : Bdd_Node_Type.t_node . result = self -> result = self
end
module Bdd_Impl0
  use prelude.Borrow
  use Bdd_Bdd_Type as Bdd_Bdd_Type
  goal clone'_refn : [#"../bdd.rs" 109 4 109 27] forall self : Bdd_Bdd_Type.t_bdd . forall result : Bdd_Bdd_Type.t_bdd . result = self -> result = self
end
module Bdd_Impl15
  
end
module Bdd_Impl16
  
end
module Bdd_Impl3
  
end
module Bdd_Impl5
  
end
