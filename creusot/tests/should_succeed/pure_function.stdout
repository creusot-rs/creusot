module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type purefunction_list 't = 
    | PureFunction_List_Cons 't (purefunction_list 't)
    | PureFunction_List_Nil
    
end
module PureFunction_PureDeclaration_Interface
  use mach.int.Int
  function pure_declaration (x : int) (y : int) : ()
end
module PureFunction_PureDeclaration
  use mach.int.Int
  function pure_declaration (x : int) (y : int) : ()
  val pure_declaration (x : int) (y : int) : ()
    requires {false}
    requires {false}
    requires {false}
    ensures { true }
    ensures { true }
    ensures { true }
    ensures { result = pure_declaration x y }
    
  axiom spec : forall x : int, y : int . false -> false -> false -> true && true && true
  axiom def : forall x : int, y : int . false -> false -> false -> pure_declaration x y = ()
end
module PureFunction_PureDeclaration_Impl
  use mach.int.Int
  let rec pure_declaration (x : int) (y : int) : ()
    requires {false}
    requires {false}
    requires {false}
    ensures { true }
    ensures { true }
    ensures { true }
    
   = 
    ()
end
module PureFunction_Impl1_Len_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  function len (self : Type.purefunction_list t) : int
end
module PureFunction_Impl1_Len
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  function len (self : Type.purefunction_list t) : int
  val len (self : Type.purefunction_list t) : int
    ensures { result >= (0 : int) }
    ensures { result = len self }
    
  axiom spec : forall self : Type.purefunction_list t . len self >= (0 : int)
  axiom def : forall self : Type.purefunction_list t . len self = match (self) with
    | Type.PureFunction_List_Cons _ ls -> (1 : int) + len ls
    | Type.PureFunction_List_Nil -> (0 : int)
    end
end
module PureFunction_Impl1_Len_Impl
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  let rec len (self : Type.purefunction_list t) : int
    ensures { result >= (0 : int) }
    variant {self}
    
   = 
    match (self) with
      | Type.PureFunction_List_Cons _ ls -> (1 : int) + len ls
      | Type.PureFunction_List_Nil -> (0 : int)
      end
end
module Core_Marker_Sized
  type self   
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module PureFunction_Test_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone PureFunction_Impl1_Len_Interface as Len0 with type t = t
  val test (l : Type.purefunction_list t) : int
    requires {Len0.len l <= (10 : int)}
    ensures { result <= (10 : int) }
    
end
module PureFunction_Test
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone PureFunction_Impl1_Len as Len0 with type t = t, axiom .
  clone Core_Marker_Sized as Sized0 with type self = t
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = Type.purefunction_list t
  let rec cfg test (l : Type.purefunction_list t) : int
    requires {Len0.len l <= (10 : int)}
    ensures { result <= (10 : int) }
    
   = 
  var _0 : int;
  var l_1 : Type.purefunction_list t;
  var _2 : Type.purefunction_list t;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _2 <- l_1;
    assume { Resolve0.resolve l_1 };
    _0 <- Len0.len _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module PureFunction_UsesLen_Interface
  type t   
  use Type
  use mach.int.Int
  function uses_len (l : Type.purefunction_list t) : int
end
module PureFunction_UsesLen
  type t   
  use Type
  use mach.int.Int
  clone PureFunction_Impl1_Len_Interface as Len0 with type t = t
  function uses_len (l : Type.purefunction_list t) : int = 
    Len0.len l
end
module PureFunction_UsesBothLogicAndProg_Interface
  type t   
  use Type
  use mach.int.Int
  clone PureFunction_UsesLen_Interface as UsesLen0 with type t = t
  val uses_both_logic_and_prog (l : Type.purefunction_list t) : int
    ensures { result = UsesLen0.uses_len l }
    
end
module PureFunction_UsesBothLogicAndProg
  type t   
  use Type
  use mach.int.Int
  clone PureFunction_Impl1_Len as Len0 with type t = t, axiom .
  clone PureFunction_UsesLen as UsesLen0 with type t = t, function Len0.len = Len0.len
  clone Core_Marker_Sized as Sized0 with type self = t
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = Type.purefunction_list t
  let rec cfg uses_both_logic_and_prog (l : Type.purefunction_list t) : int
    ensures { result = UsesLen0.uses_len l }
    
   = 
  var _0 : int;
  var l_1 : Type.purefunction_list t;
  var _2 : Type.purefunction_list t;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _2 <- l_1;
    _0 <- Len0.len _2;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve l_1 };
    return _0
  }
  
end
module CreusotContracts_WellFounded
  type self   
end
module PureFunction_Impl0
  type t   
  use Type
  clone export CreusotContracts_WellFounded with type self = Type.purefunction_list t
end
