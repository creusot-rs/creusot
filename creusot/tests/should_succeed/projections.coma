
module Projections_CopyOutOfRef
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.UInt32
  use prelude.Int
  let rec copy_out_of_ref (x:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- x ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () : uint32 | & x : uint32 = x ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  function any_l (_ : 'b) : 'a
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Projections_CopyOutOfSum
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve'0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use Core_Result_Result_Type as Core_Result_Result_Type
  use prelude.Int
  let rec copy_out_of_sum (x:Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:borrowed uint32)-> {x = Core_Result_Result_Type.C_Ok a} (! bb2)
        | br1 (a:borrowed uint32)-> {x = Core_Result_Result_Type.C_Err a} (! bb3) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../projections.rs" 10 10 10 11] false} any ] 
    | bb3 = s0
      [ s0 = Core_Result_Result_Type.err <borrowed uint32> <borrowed uint32> {x}
          (fun (r0'0:borrowed uint32) ->
             [ &y <- r0'0 ] 
            (any
            [ any_ (_any:borrowed uint32)-> (! Core_Result_Result_Type.err <borrowed uint32> <borrowed uint32> {x}
                (fun (l_0'0:borrowed uint32) ->
                  
                  [ &x <- Core_Result_Result_Type.C_Err _any : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32) ]
                  
                  s1)) ]
            ))
      | s1 =  [ &_0 <-  * y ] s2
      | s2 = -{resolve'0 y}- s3
      | s3 = bb5 ]
      
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Core_Result_Result_Type.ok <borrowed uint32> <borrowed uint32> {x}
          (fun (r0'0:borrowed uint32) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:borrowed uint32)-> (! Core_Result_Result_Type.ok <borrowed uint32> <borrowed uint32> {x}
                (fun (l_0'0:borrowed uint32) ->
                  
                  [ &x <- Core_Result_Result_Type.C_Ok _any : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32) ]
                  
                  s1)) ]
            ))
      | s1 =  [ &_0 <-  * x1 ] s2
      | s2 = -{resolve'0 x1}- s3
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & x : Core_Result_Result_Type.t_result (borrowed uint32) (borrowed uint32) = x
    | & x1 : borrowed uint32 = any_l () : borrowed uint32
    | & y : borrowed uint32 = any_l () : borrowed uint32 ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Projections_WriteIntoSum
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve'1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate resolve'0 (self : borrowed (Core_Option_Option_Type.t_option uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Option_Option_Type.t_option uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec write_into_sum (x:borrowed (Core_Option_Option_Type.t_option uint32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 -> { * x = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:uint32)-> { * x = Core_Option_Option_Type.C_Some a} (! bb2) ]
         ]
      
    | bb1 = s0 [ s0 = -{resolve'0 x}- s1 | s1 = {[#"../projections.rs" 17 10 17 11] false} any ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Core_Option_Option_Type.some <uint32> { * x}
          (fun (r0'0:uint32) ->
            Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed uint32) ->
                 [ &y <- _ret' ] 
                Core_Option_Option_Type.some <uint32> { * x}
                  (fun (l_0'0:uint32) ->
                    
                    [ &x <- { x with current = (Core_Option_Option_Type.C_Some ( ^ y) : Core_Option_Option_Type.t_option uint32) ; } ]
                    
                    s1)))
      | s1 =  [ &y <- { y with current = ([#"../projections.rs" 18 24 18 26] (10 : uint32)) ; } ] s2
      | s2 = -{resolve'1 y}- s3
      | s3 =  [ &_0 <- [#"../projections.rs" 18 19 18 26] () ] s4
      | s4 = -{resolve'0 x}- s5
      | s5 = bb5 ]
      
    | bb3 = s0 [ s0 = -{resolve'0 x}- s1 | s1 =  [ &_0 <- () ] s2 | s2 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & x : borrowed (Core_Option_Option_Type.t_option uint32) = x
    | & y : borrowed uint32 = any_l () : borrowed uint32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Projections_F
  use prelude.Intrinsic
  use prelude.Int32
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_2 <- Core_Option_Option_Type.C_Some ([#"../projections.rs" 24 15 24 17] (10 : int32)) : Core_Option_Option_Type.t_option int32 ]
        
        s1
      | s1 = any
        [ br0 -> {_2 = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:int32)-> {_2 = Core_Option_Option_Type.C_Some a} (! bb2) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../projections.rs" 24 10 24 18] false} any ] 
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Core_Option_Option_Type.some <int32> {_2} (fun (r0'0:int32) ->  [ &x <- r0'0 ] s1)
      | s1 = Int32.eq {x} {[#"../projections.rs" 25 24 25 25] (0 : int32)} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb3 = s0 [ s0 =  [ &_1 <- [#"../projections.rs" 26 16 26 21] false ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_0 <- [#"../projections.rs" 23 11 28 1] () ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : bool = any_l () : bool
    | & _2 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & x : int32 = any_l () : int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
