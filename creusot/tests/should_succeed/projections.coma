module M_projections__copy_out_of_ref [#"projections.rs" 5 0 5 38]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  meta "compute_max_steps" 1000000
  
  let rec copy_out_of_ref'0 (x:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- x ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () | & x : uint32 = x ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module M_projections__copy_out_of_sum [#"projections.rs" 9 0 9 60]
  let%span sresolve0 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  type t_Result'0  =
    | C_Ok'0 (borrowed uint32)
    | C_Err'0 (borrowed uint32)
  
  let rec v_Err'0 (input:t_Result'0) (ret  (field_0:borrowed uint32))= any
    [ good (field_0:borrowed uint32)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : borrowed uint32 [C_Err'0 field_0 : t_Result'0] . C_Err'0 field_0 <> input}
      (! {false}
      any) ]
    
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#sresolve0] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  let rec v_Ok'0 (input:t_Result'0) (ret  (field_0:borrowed uint32))= any
    [ good (field_0:borrowed uint32)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : borrowed uint32 [C_Ok'0 field_0 : t_Result'0] . C_Ok'0 field_0 <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec copy_out_of_sum'0 (x:t_Result'0) (return'  (ret:uint32))= (! bb0
    [ bb0 = any
      [ br0 (x0:borrowed uint32)-> {x = C_Ok'0 x0} (! bb2) | br1 (x0:borrowed uint32)-> {x = C_Err'0 x0} (! bb3) ]
      
    | bb3 = s0
      [ s0 = v_Err'0 {x} (fun (r0'0:borrowed uint32) ->  [ &y <- r0'0 ] s1)
      | s1 = -{resolve'0 y}- s2
      | s2 =  [ &_0 <- y.current ] s3
      | s3 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Ok'0 {x} (fun (r0'0:borrowed uint32) ->  [ &x1 <- r0'0 ] s1)
      | s1 = -{resolve'0 x1}- s2
      | s2 =  [ &_0 <- x1.current ] s3
      | s3 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & x : t_Result'0 = x
    | & x1 : borrowed uint32 = any_l ()
    | & y : borrowed uint32 = any_l () ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module M_projections__write_into_sum [#"projections.rs" 16 0 16 42]
  let%span sprojections0 = "projections.rs" 18 24 18 26
  let%span sresolve1 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.UInt32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 uint32
  
  use prelude.prelude.Borrow
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : uint32 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  predicate resolve'2 (self : borrowed uint32) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'2 _1
  
  predicate resolve'3 (self : borrowed (t_Option'0)) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_Option'0)) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec write_into_sum'0 (x:borrowed (t_Option'0)) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {x.current = C_None'0 } (! bb3) | br1 (x0:uint32)-> {x.current = C_Some'0 x0} (! bb2) ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {x.current}
          (fun (r0'0:uint32) ->
            Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed uint32) ->  [ &y <- _ret' ]  [ &x <- { x with current = C_Some'0 _ret'.final } ] s1))
      | s1 =  [ &y <- { y with current = ([%#sprojections0] (10 : uint32)) } ] s2
      | s2 = -{resolve'0 y}- s3
      | s3 = -{resolve'1 x}- s4
      | s4 = bb5 ]
      
    | bb3 = s0 [ s0 = -{resolve'1 x}- s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : borrowed (t_Option'0) = x | & y : borrowed uint32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_projections__f [#"projections.rs" 23 0 23 10]
  let%span sprojections0 = "projections.rs" 24 15 24 17
  let%span sprojections1 = "projections.rs" 25 24 25 25
  let%span sprojections2 = "projections.rs" 26 16 26 21
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : int32 [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- C_Some'0 ([%#sprojections0] (10 : int32)) ] s1
      | s1 = any [ br0 -> {_2 = C_None'0 } (! bb3) | br1 (x0:int32)-> {_2 = C_Some'0 x0} (! bb2) ]  ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {_2} (fun (r0'0:int32) ->  [ &x <- r0'0 ] s1)
      | s1 = Int32.eq {x} {[%#sprojections1] (0 : int32)} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb3 = s0 [ s0 =  [ &_1 <- [%#sprojections2] false ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : bool = any_l () | & _2 : t_Option'0 = any_l () | & x : int32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
