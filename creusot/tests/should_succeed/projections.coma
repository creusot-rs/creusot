
module M_projections__copy_out_of_ref
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  let rec copy_out_of_ref (x:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- x ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () | & x : uint32 = x ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module T_core__result__Result
  type t_Result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Ok < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec v_Err < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module M_projections__copy_out_of_sum
  let%span span0 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span0] self.final = self.current
  
  use T_core__result__Result as Result'0
  
  use prelude.prelude.Int
  
  let rec copy_out_of_sum (x:Result'0.t_Result (borrowed uint32) (borrowed uint32)) (return'  (ret:uint32))= (! bb0
    [ bb0 = any
      [ br0 (a:borrowed uint32)-> {x = Result'0.C_Ok a} (! bb2)
      | br1 (a:borrowed uint32)-> {x = Result'0.C_Err a} (! bb3) ]
      
    | bb3 = s0
      [ s0 = Result'0.v_Err <borrowed uint32> <borrowed uint32> {x} (fun (r0'0:borrowed uint32) ->  [ &y <- r0'0 ] s1)
      | s1 = -{resolve'0 y}- s2
      | s2 =  [ &_0 <- y.current ] s3
      | s3 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Result'0.v_Ok <borrowed uint32> <borrowed uint32> {x} (fun (r0'0:borrowed uint32) ->  [ &x1 <- r0'0 ] s1)
      | s1 = -{resolve'0 x1}- s2
      | s2 =  [ &_0 <- x1.current ] s3
      | s3 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & x : Result'0.t_Result (borrowed uint32) (borrowed uint32) = x
    | & x1 : borrowed uint32 = any_l ()
    | & y : borrowed uint32 = any_l () ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_projections__write_into_sum
  let%span sprojections0 = "../projections.rs" 18 24 18 26
  
  let%span span1 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  use T_core__option__Option as Option'0
  
  predicate resolve'1 (self : borrowed (Option'0.t_Option uint32)) =
    [%#span1] self.final = self.current
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span1] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec write_into_sum (x:borrowed (Option'0.t_Option uint32)) (return'  (ret:()))= (! bb0
    [ bb0 = any
      [ br0 -> {x.current = Option'0.C_None } (! bb3) | br1 (a:uint32)-> {x.current = Option'0.C_Some a} (! bb2) ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Option'0.v_Some <uint32> {x.current}
          (fun (r0'0:uint32) ->
            Borrow.borrow_mut <uint32> {r0'0}
              (fun (_ret':borrowed uint32) ->
                 [ &y <- _ret' ] 
                Option'0.v_Some <uint32> {x.current}
                  (fun (l_0'0:uint32) ->  [ &x <- { x with current = Option'0.C_Some y.final ; } ] s1)))
      | s1 =  [ &y <- { y with current = ([%#sprojections0] (10 : uint32)) ; } ] s2
      | s2 = -{resolve'0 y}- s3
      | s3 = -{resolve'1 x}- s4
      | s4 = bb5 ]
      
    | bb3 = s0 [ s0 = -{resolve'1 x}- s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : borrowed (Option'0.t_Option uint32) = x | & y : borrowed uint32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_projections__f
  let%span sprojections0 = "../projections.rs" 24 15 24 17
  
  let%span sprojections1 = "../projections.rs" 25 24 25 25
  
  let%span sprojections2 = "../projections.rs" 26 16 26 21
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Option'0.C_Some ([%#sprojections0] (10 : int32)) ] s1
      | s1 = any [ br0 -> {_2 = Option'0.C_None } (! bb3) | br1 (a:int32)-> {_2 = Option'0.C_Some a} (! bb2) ]  ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = Option'0.v_Some <int32> {_2} (fun (r0'0:int32) ->  [ &x <- r0'0 ] s1)
      | s1 = Int32.eq {x} {[%#sprojections1] (0 : int32)} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb3 = s0 [ s0 =  [ &_1 <- [%#sprojections2] false ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & _1 : bool = any_l ()
    | & _2 : Option'0.t_Option int32 = any_l ()
    | & x : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
