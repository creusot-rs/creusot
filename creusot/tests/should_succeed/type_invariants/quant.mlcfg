
module Quant_WithInvariant_Type
  type t_withinvariant  =
    | C_WithInvariant
    
end
module Quant_Forall_Impl
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant0 [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) =
    [#"../quant.rs" 10 8 10 12] true
  val invariant0 [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Quant_WithInvariant_Type.t_withinvariant)
  val inv0 (_x : Quant_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Quant_WithInvariant_Type.t_withinvariant . inv0 x = (invariant0 x /\ match x with
    | Quant_WithInvariant_Type.C_WithInvariant -> true
    end)
  let rec ghost function forall' [#"../quant.rs" 17 0 17 15] (_1 : ()) : ()
    ensures { [#"../quant.rs" 16 0 16 50] forall x : Quant_WithInvariant_Type.t_withinvariant . inv0 x -> invariant0 x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../quant.rs" 14 0 14 6] ()
end
module Quant_Exists_Impl
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant0 [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) =
    [#"../quant.rs" 10 8 10 12] true
  val invariant0 [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Quant_WithInvariant_Type.t_withinvariant)
  val inv0 (_x : Quant_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Quant_WithInvariant_Type.t_withinvariant . inv0 x = (invariant0 x /\ match x with
    | Quant_WithInvariant_Type.C_WithInvariant -> true
    end)
  let rec ghost function exists' [#"../quant.rs" 22 0 22 15] (_1 : ()) : ()
    ensures { [#"../quant.rs" 21 0 21 42] exists _x : Quant_WithInvariant_Type.t_withinvariant . inv0 _x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../quant.rs" 19 0 19 6] ()
end
module Quant_Impl0
  
end
