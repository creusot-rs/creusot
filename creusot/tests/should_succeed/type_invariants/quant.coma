
module T_quant__WithInvariant
  type t_WithInvariant  =
    | C_WithInvariant
  
  function any_l (_ : 'b) : 'a
  
  let rec t_WithInvariant (input:t_WithInvariant) (ret  )= any
    [ good -> {C_WithInvariant  = input} (! ret) | bad -> {C_WithInvariant  <> input} {false} any ]
    
end
module M_quant__forall__Impl
  let%span squant0 = "../quant.rs" 16 0 16 50
  
  let%span span1 = "../quant.rs" 10 8 10 12
  
  use T_quant__WithInvariant as WithInvariant'0
  
  predicate invariant'0 [#"../quant.rs" 9 4 9 30] (self : WithInvariant'0.t_WithInvariant) =
    [%#span1] true
  
  constant _1  : ()
  
  function forall' [#"../quant.rs" 17 0 17 15] (_1 : ()) : ()
  
  goal vc_forall' : [%#squant0] forall x : WithInvariant'0.t_WithInvariant . invariant'0 x
end
module M_quant__exists__Impl
  let%span squant0 = "../quant.rs" 21 0 21 42
  
  use T_quant__WithInvariant as WithInvariant'0
  
  constant _1  : ()
  
  function exists' [#"../quant.rs" 22 0 22 15] (_1 : ()) : ()
  
  goal vc_exists' : [%#squant0] exists _x : WithInvariant'0.t_WithInvariant . true
end
module M_quant__qy123zimplqy35z0qy125z
  
end
