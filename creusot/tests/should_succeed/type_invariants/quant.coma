
module Quant_WithInvariant_Type
  type t_withinvariant  =
    | C_WithInvariant
    
  function any_l (_ : 'b) : 'a
  let rec t_withinvariant (input:t_withinvariant) (ret  )= any
    [ good -> {C_WithInvariant  = input} (! ret) | bad -> {C_WithInvariant  <> input} {false} any ]
    
end
module Quant_Forall_Impl
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant'0 [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) =
    [#"../quant.rs" 10 8 10 12] true
  let rec invariant'0 (self:Quant_WithInvariant_Type.t_withinvariant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Quant_WithInvariant_Type.t_withinvariant)
  let rec inv'0 (_x:Quant_WithInvariant_Type.t_withinvariant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Quant_WithInvariant_Type.t_withinvariant . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Quant_WithInvariant_Type.C_WithInvariant -> true
    end)
  constant _1  : ()
  function forall' [#"../quant.rs" 17 0 17 15] (_1 : ()) : ()
  goal vc_forall' : [#"../quant.rs" 16 0 16 50] forall x : Quant_WithInvariant_Type.t_withinvariant . inv'0 x
   -> invariant'0 x
end
module Quant_Exists_Impl
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant'0 [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) =
    [#"../quant.rs" 10 8 10 12] true
  let rec invariant'0 (self:Quant_WithInvariant_Type.t_withinvariant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Quant_WithInvariant_Type.t_withinvariant)
  let rec inv'0 (_x:Quant_WithInvariant_Type.t_withinvariant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Quant_WithInvariant_Type.t_withinvariant . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Quant_WithInvariant_Type.C_WithInvariant -> true
    end)
  constant _1  : ()
  function exists' [#"../quant.rs" 22 0 22 15] (_1 : ()) : ()
  goal vc_exists' : [#"../quant.rs" 21 0 21 42] exists _x : Quant_WithInvariant_Type.t_withinvariant . inv'0 _x
end
module Quant_Impl0
  
end
