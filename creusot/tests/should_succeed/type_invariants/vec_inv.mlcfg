
module VecInv_SumTo10_Type
  use prelude.Int32
  use prelude.Int
  type t_sumto10  =
    | C_SumTo10 int32 int32
    
  let function sumto10_a (self : t_sumto10) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_SumTo10 a _ -> a
      end
  let function sumto10_b (self : t_sumto10) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_SumTo10 _ a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module VecInv_Vec
  use prelude.Int
  use VecInv_SumTo10_Type as VecInv_SumTo10_Type
  use prelude.Int32
  predicate invariant4 [#"../vec_inv.rs" 12 4 12 30] (self : VecInv_SumTo10_Type.t_sumto10) =
    [#"../vec_inv.rs" 13 20 13 43] Int32.to_int (VecInv_SumTo10_Type.sumto10_a self)
    + Int32.to_int (VecInv_SumTo10_Type.sumto10_b self)
    = 10
  val invariant4 [#"../vec_inv.rs" 12 4 12 30] (self : VecInv_SumTo10_Type.t_sumto10) : bool
    ensures { result = invariant4 self }
    
  predicate inv5 (_x : VecInv_SumTo10_Type.t_sumto10)
  val inv5 (_x : VecInv_SumTo10_Type.t_sumto10) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : VecInv_SumTo10_Type.t_sumto10 . inv5 x
  = (invariant4 x
  /\ match x with
    | VecInv_SumTo10_Type.C_SumTo10 a b -> true
    end)
  use prelude.Borrow
  predicate invariant3 (self : borrowed (VecInv_SumTo10_Type.t_sumto10)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : borrowed (VecInv_SumTo10_Type.t_sumto10)) : bool
    ensures { result = invariant3 self }
    
  predicate inv4 (_x : borrowed (VecInv_SumTo10_Type.t_sumto10))
  val inv4 (_x : borrowed (VecInv_SumTo10_Type.t_sumto10)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (VecInv_SumTo10_Type.t_sumto10) . inv4 x = (inv5 ( * x) /\ inv5 ( ^ x))
  use prelude.Slice
  predicate invariant1 (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : bool
    ensures { result = invariant1 self }
    
  use seq.Seq
  use seq.Seq
  use prelude.UIntSize
  predicate inv1 (_x : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10)))
  val inv1 (_x : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))) : bool
    ensures { result = inv1 _x }
    
  use prelude.Slice
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10)))
  val inv3 (_x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : bool
    ensures { result = inv3 _x }
    
  function shallow_model1 (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))
    
  val shallow_model1 (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10)) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv1 (shallow_model1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model1 self)
  <= UIntSize.to_int max0)
  function index_logic1 [@inline:trivial] (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (ix : int) : borrowed (VecInv_SumTo10_Type.t_sumto10)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model1 self) ix
  val index_logic1 [@inline:trivial] (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (ix : int) : borrowed (VecInv_SumTo10_Type.t_sumto10)
    ensures { result = index_logic1 self ix }
    
  function slice_len0 (x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : int =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 48 4 48 26] Seq.length (shallow_model1 x)
  val slice_len0 (x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : int
    ensures { result = slice_len0 x }
    
  use prelude.UInt64
  axiom inv3 : forall x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10)) . inv3 x
  = (forall i : uint64 . 0 <= i  -> i < slice_len0 x  -> inv4 (index_logic1 x i))
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  predicate invariant2 (self : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv2 (_x : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) . inv2 x
  = true
  axiom inv1 : forall x : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10)) . inv1 x
  = (forall i : int . 0 <= i  -> i < Seq.length x  -> inv4 (Seq.get x i))
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))
    
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv1 (shallow_model0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model0 self)
  <= UIntSize.to_int max0)
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv1 (shallow_model0 self)
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) . inv0 x
  = (invariant0 x
  /\ match x with
    | Alloc_Vec_Vec_Type.C_Vec buf len -> true
    end)
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : borrowed (VecInv_SumTo10_Type.t_sumto10)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model0 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : borrowed (VecInv_SumTo10_Type.t_sumto10)
    ensures { result = index_logic0 self ix }
    
  predicate resolve1 (self : borrowed (VecInv_SumTo10_Type.t_sumto10)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (VecInv_SumTo10_Type.t_sumto10)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model0 self)  -> resolve1 (index_logic0 self i)
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg vec [#"../vec_inv.rs" 18 0 18 32] [@cfg:stackify] [@cfg:subregion_analysis] (x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../vec_inv.rs" 17 11 17 23] Seq.length (shallow_model0 x) > 0}
    requires {[#"../vec_inv.rs" 18 11 18 12] inv0 x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) = x;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    goto BB1
  }
  BB1 {
    assert { [@expl:assertion] [#"../vec_inv.rs" 19 20 19 43] Int32.to_int (VecInv_SumTo10_Type.sumto10_a ( * index_logic0 x 0))
    + Int32.to_int (VecInv_SumTo10_Type.sumto10_b ( * index_logic0 x 0))
    = 10 };
    goto BB2
  }
  BB2 {
    [#"../vec_inv.rs" 18 33 20 1] _0 <- ([#"../vec_inv.rs" 18 33 20 1] ());
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module VecInv_Impl0
  
end
