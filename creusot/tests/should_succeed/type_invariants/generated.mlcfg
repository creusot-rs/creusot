
module Generated_Sum10_Type
  use prelude.Int32
  use prelude.Int
  type t_sum10  =
    | C_Sum10 int32 int32
    
  let function sum10_0 (self : t_sum10) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Sum10 a _ -> a
      end
  let function sum10_1 (self : t_sum10) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Sum10 _ a -> a
      end
end
module Generated_Foo_Type
  use prelude.UIntSize
  use prelude.Int
  use Generated_Sum10_Type as Generated_Sum10_Type
  use prelude.Borrow
  type t_foo 't =
    | C_A (borrowed (Generated_Sum10_Type.t_sum10)) usize
    | C_B 't
    
end
module Generated_UseFoo
  use prelude.UInt32
  predicate invariant5 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : uint32) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : uint32)
  val inv5 (_x : uint32) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : uint32 . inv5 x = true
  use Generated_Sum10_Type as Generated_Sum10_Type
  use prelude.Borrow
  use Generated_Foo_Type as Generated_Foo_Type
  predicate invariant4 (self : Generated_Foo_Type.t_foo uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : Generated_Foo_Type.t_foo uint32) : bool
    ensures { result = invariant4 self }
    
  predicate inv1 (_x : borrowed (Generated_Sum10_Type.t_sum10))
  val inv1 (_x : borrowed (Generated_Sum10_Type.t_sum10)) : bool
    ensures { result = inv1 _x }
    
  predicate inv4 (_x : Generated_Foo_Type.t_foo uint32)
  val inv4 (_x : Generated_Foo_Type.t_foo uint32) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Generated_Foo_Type.t_foo uint32 . inv4 x
  = match x with
    | Generated_Foo_Type.C_A f1 f2 -> inv1 f1
    | Generated_Foo_Type.C_B a_0 -> true
    end
  use prelude.Int
  use prelude.Int32
  predicate invariant3 [#"../generated.rs" 9 4 9 30] (self : Generated_Sum10_Type.t_sum10) =
    [#"../generated.rs" 10 20 10 43] Int32.to_int (Generated_Sum10_Type.sum10_0 self)
    + Int32.to_int (Generated_Sum10_Type.sum10_1 self)
    = 10
  val invariant3 [#"../generated.rs" 9 4 9 30] (self : Generated_Sum10_Type.t_sum10) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Generated_Sum10_Type.t_sum10)
  val inv3 (_x : Generated_Sum10_Type.t_sum10) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Generated_Sum10_Type.t_sum10 . inv3 x
  = (invariant3 x
  /\ match x with
    | Generated_Sum10_Type.C_Sum10 a_0 a_1 -> true
    end)
  predicate invariant2 (self : (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10)))
  val inv2 (_x : (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10)) . inv2 x
  = (let (a, b) = x in inv4 a /\ inv1 b)
  predicate invariant1 (self : borrowed (Generated_Sum10_Type.t_sum10)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed (Generated_Sum10_Type.t_sum10)) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : borrowed (Generated_Sum10_Type.t_sum10) . inv1 x = (inv3 ( * x) /\ inv3 ( ^ x))
  predicate invariant0 (self : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10)))
    
  val inv0 (_x : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10)) . inv0 x
  = match x with
    | Generated_Foo_Type.C_A f1 f2 -> inv1 f1
    | Generated_Foo_Type.C_B a_0 -> inv2 a_0
    end
  let rec cfg use_foo [#"../generated.rs" 19 0 19 61] [@cfg:stackify] [@cfg:subregion_analysis] (x : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10))) : ()
    requires {[#"../generated.rs" 19 19 19 20] inv0 x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : Generated_Foo_Type.t_foo (Generated_Foo_Type.t_foo uint32, borrowed (Generated_Sum10_Type.t_sum10)) = x;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:assertion] [#"../generated.rs" 20 18 20 35] inv0 x };
    [#"../generated.rs" 19 62 21 1] _0 <- ([#"../generated.rs" 19 62 21 1] ());
    return _0
  }
  
end
module Generated_Impl0
  
end
