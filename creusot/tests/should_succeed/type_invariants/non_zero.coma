module T_non_zero__NonZeroU32 [#"non_zero.rs" 4 0 4 21]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_NonZeroU32  =
    | C_NonZeroU32 uint32
  
  let rec t_NonZeroU32 (input:t_NonZeroU32) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_NonZeroU32 field_0 = input} (! ret {field_0}) ]
    
  
  function t_NonZeroU32__0 (self : t_NonZeroU32) : uint32 =
    match self with
      | C_NonZeroU32 a -> a
      end
end
module M_non_zero__qyi12916758414494363779__new [#"non_zero.rs" 16 4 16 30] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 15 15 15 21
  let%span snon_zero1 = "non_zero.rs" 16 26 16 30
  let%span snon_zero2 = "non_zero.rs" 10 20 10 31
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use T_non_zero__NonZeroU32 as T_non_zero__NonZeroU32
  
  use T_non_zero__NonZeroU32 as NonZeroU32'0
  
  predicate invariant'0 [#"non_zero.rs" 9 4 9 30] (self : NonZeroU32'0.t_NonZeroU32) =
    [%#snon_zero2] UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 self) > 0
  
  predicate inv'0 (_1 : NonZeroU32'0.t_NonZeroU32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonZeroU32'0.t_NonZeroU32 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZeroU32'0.C_NonZeroU32 a_0 -> true
    end)
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec new (n:uint32) (return'  (ret:NonZeroU32'0.t_NonZeroU32))= {[%#snon_zero0] UInt32.to_int n > 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- NonZeroU32'0.C_NonZeroU32 n ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : NonZeroU32'0.t_NonZeroU32 = any_l () | & n : uint32 = n ]
    
    [ return' (result:NonZeroU32'0.t_NonZeroU32)-> {[@expl:postcondition] [%#snon_zero1] inv'0 result}
      (! return' {result}) ]
    
end
module M_non_zero__qyi12916758414494363779__add [#"non_zero.rs" 21 4 21 39] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 20 15 20 44
  let%span snon_zero1 = "non_zero.rs" 21 15 21 19
  let%span snon_zero2 = "non_zero.rs" 21 21 21 24
  let%span snon_zero3 = "non_zero.rs" 21 35 21 39
  let%span snon_zero4 = "non_zero.rs" 10 20 10 31
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use T_non_zero__NonZeroU32 as T_non_zero__NonZeroU32
  
  use T_non_zero__NonZeroU32 as NonZeroU32'0
  
  predicate invariant'0 [#"non_zero.rs" 9 4 9 30] (self : NonZeroU32'0.t_NonZeroU32) =
    [%#snon_zero4] UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 self) > 0
  
  predicate inv'0 (_1 : NonZeroU32'0.t_NonZeroU32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonZeroU32'0.t_NonZeroU32 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZeroU32'0.C_NonZeroU32 a_0 -> true
    end)
  
  use prelude.prelude.UInt32
  
  constant v_MAX'0 : uint32 = (4294967295 : uint32)
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec add (self:NonZeroU32'0.t_NonZeroU32) (rhs:NonZeroU32'0.t_NonZeroU32) (return'  (ret:NonZeroU32'0.t_NonZeroU32))= {[%#snon_zero2] inv'0 rhs}
    {[%#snon_zero1] inv'0 self}
    {[%#snon_zero0] UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 self)
    + UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 rhs)
    <= UInt32.to_int (v_MAX'0 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZeroU32'0.t_NonZeroU32 {self}
          (fun (r0'0:uint32) ->
            NonZeroU32'0.t_NonZeroU32 {rhs}
              (fun (r0'1:uint32) -> UInt32.add {r0'0} {r0'1} (fun (_ret':uint32) ->  [ &_4 <- _ret' ] s1)))
      | s1 =  [ &_0 <- NonZeroU32'0.C_NonZeroU32 _4 ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : NonZeroU32'0.t_NonZeroU32 = any_l ()
    | & self : NonZeroU32'0.t_NonZeroU32 = self
    | & rhs : NonZeroU32'0.t_NonZeroU32 = rhs
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:NonZeroU32'0.t_NonZeroU32)-> {[@expl:postcondition] [%#snon_zero3] inv'0 result}
      (! return' {result}) ]
    
end
module M_non_zero__qyi12916758414494363779__sub_pre_trans [#"non_zero.rs" 36 4 36 51] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 33 15 33 27
  let%span snon_zero1 = "non_zero.rs" 34 15 34 27
  let%span snon_zero2 = "non_zero.rs" 35 14 35 26
  let%span snon_zero3 = "non_zero.rs" 28 20 28 36
  
  use T_non_zero__NonZeroU32 as NonZeroU32'0
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use T_non_zero__NonZeroU32 as T_non_zero__NonZeroU32
  
  predicate sub_pre'0 [#"non_zero.rs" 27 4 27 43] (self : NonZeroU32'0.t_NonZeroU32) (rhs : NonZeroU32'0.t_NonZeroU32) =
    [%#snon_zero3] UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 self)
    > UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 rhs)
  
  constant a  : NonZeroU32'0.t_NonZeroU32
  
  constant b  : NonZeroU32'0.t_NonZeroU32
  
  constant c  : NonZeroU32'0.t_NonZeroU32
  
  function sub_pre_trans [#"non_zero.rs" 36 4 36 51] (a : NonZeroU32'0.t_NonZeroU32) (b : NonZeroU32'0.t_NonZeroU32) (c : NonZeroU32'0.t_NonZeroU32) : ()
    
  
  goal vc_sub_pre_trans : ([%#snon_zero1] sub_pre'0 b c)
   -> ([%#snon_zero0] sub_pre'0 a b)  -> ([%#snon_zero2] sub_pre'0 a c)
end
module M_non_zero__qyi12916758414494363779__sub [#"non_zero.rs" 40 4 40 39] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 39 15 39 32
  let%span snon_zero1 = "non_zero.rs" 40 15 40 19
  let%span snon_zero2 = "non_zero.rs" 40 21 40 24
  let%span snon_zero3 = "non_zero.rs" 40 35 40 39
  let%span snon_zero4 = "non_zero.rs" 28 20 28 36
  let%span snon_zero5 = "non_zero.rs" 10 20 10 31
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use T_non_zero__NonZeroU32 as T_non_zero__NonZeroU32
  
  use T_non_zero__NonZeroU32 as NonZeroU32'0
  
  predicate invariant'0 [#"non_zero.rs" 9 4 9 30] (self : NonZeroU32'0.t_NonZeroU32) =
    [%#snon_zero5] UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 self) > 0
  
  predicate inv'0 (_1 : NonZeroU32'0.t_NonZeroU32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : NonZeroU32'0.t_NonZeroU32 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZeroU32'0.C_NonZeroU32 a_0 -> true
    end)
  
  predicate sub_pre'0 [#"non_zero.rs" 27 4 27 43] (self : NonZeroU32'0.t_NonZeroU32) (rhs : NonZeroU32'0.t_NonZeroU32) =
    [%#snon_zero4] UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 self)
    > UInt32.to_int (T_non_zero__NonZeroU32.t_NonZeroU32__0 rhs)
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  meta "compute_max_steps" 1000000
  
  let rec sub (self:NonZeroU32'0.t_NonZeroU32) (rhs:NonZeroU32'0.t_NonZeroU32) (return'  (ret:NonZeroU32'0.t_NonZeroU32))= {[%#snon_zero2] inv'0 rhs}
    {[%#snon_zero1] inv'0 self}
    {[%#snon_zero0] sub_pre'0 self rhs}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZeroU32'0.t_NonZeroU32 {self}
          (fun (r0'0:uint32) ->
            NonZeroU32'0.t_NonZeroU32 {rhs}
              (fun (r0'1:uint32) -> UInt32.sub {r0'0} {r0'1} (fun (_ret':uint32) ->  [ &_4 <- _ret' ] s1)))
      | s1 =  [ &_0 <- NonZeroU32'0.C_NonZeroU32 _4 ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : NonZeroU32'0.t_NonZeroU32 = any_l ()
    | & self : NonZeroU32'0.t_NonZeroU32 = self
    | & rhs : NonZeroU32'0.t_NonZeroU32 = rhs
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:NonZeroU32'0.t_NonZeroU32)-> {[@expl:postcondition] [%#snon_zero3] inv'0 result}
      (! return' {result}) ]
    
end
module M_non_zero__qyi2137936904634991451 [#"non_zero.rs" 6 0 6 29] (* <NonZeroU32 as creusot_contracts::Invariant> *)
  
end
