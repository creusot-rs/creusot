module M_non_zero__qyi12916758414494363779__new [#"non_zero.rs" 16 4 16 30] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 15 15 15 21
  let%span snon_zero1 = "non_zero.rs" 16 26 16 30
  let%span snon_zero2 = "non_zero.rs" 10 20 10 31
  
  use prelude.prelude.UInt32
  
  type t_NonZeroU32'0  =
    { t_NonZeroU32__0'0: uint32 }
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate invariant'0 [#"non_zero.rs" 9 4 9 30] (self : t_NonZeroU32'0) =
    [%#snon_zero2] UInt32.to_int self.t_NonZeroU32__0'0 > 0
  
  predicate inv'0 (_1 : t_NonZeroU32'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonZeroU32'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZeroU32__0'0 = a_0} -> true
    end)
  
  meta "compute_max_steps" 1000000
  
  let rec new'0 (n:uint32) (return'  (ret:t_NonZeroU32'0))= {[@expl:new requires] [%#snon_zero0] UInt32.to_int n > 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- { t_NonZeroU32__0'0 = n } ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : t_NonZeroU32'0 = any_l () | & n : uint32 = n ]
    
    [ return' (result:t_NonZeroU32'0)-> {[@expl:new result type invariant] [%#snon_zero1] inv'0 result}
      (! return' {result}) ]
    
end
module M_non_zero__qyi12916758414494363779__add [#"non_zero.rs" 21 4 21 39] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 21 15 21 19
  let%span snon_zero1 = "non_zero.rs" 21 21 21 24
  let%span snon_zero2 = "non_zero.rs" 20 15 20 44
  let%span snon_zero3 = "non_zero.rs" 21 35 21 39
  let%span snon_zero4 = "non_zero.rs" 10 20 10 31
  
  use prelude.prelude.UInt32
  
  type t_NonZeroU32'0  =
    { t_NonZeroU32__0'0: uint32 }
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate invariant'0 [#"non_zero.rs" 9 4 9 30] (self : t_NonZeroU32'0) =
    [%#snon_zero4] UInt32.to_int self.t_NonZeroU32__0'0 > 0
  
  predicate inv'0 (_1 : t_NonZeroU32'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonZeroU32'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZeroU32__0'0 = a_0} -> true
    end)
  
  constant v_MAX'0 : uint32 = (4294967295 : uint32)
  
  meta "compute_max_steps" 1000000
  
  let rec add'0 (self:t_NonZeroU32'0) (rhs:t_NonZeroU32'0) (return'  (ret:t_NonZeroU32'0))= {[@expl:add 'self' type invariant] [%#snon_zero0] inv'0 self}
    {[@expl:add 'rhs' type invariant] [%#snon_zero1] inv'0 rhs}
    {[@expl:add requires] [%#snon_zero2] UInt32.to_int self.t_NonZeroU32__0'0 + UInt32.to_int rhs.t_NonZeroU32__0'0
    <= UInt32.to_int (v_MAX'0 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {self.t_NonZeroU32__0'0} {rhs.t_NonZeroU32__0'0} (fun (_ret':uint32) ->  [ &_4 <- _ret' ] s1)
      | s1 =  [ &_0 <- { t_NonZeroU32__0'0 = _4 } ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : t_NonZeroU32'0 = any_l ()
    | & self : t_NonZeroU32'0 = self
    | & rhs : t_NonZeroU32'0 = rhs
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:t_NonZeroU32'0)-> {[@expl:add result type invariant] [%#snon_zero3] inv'0 result}
      (! return' {result}) ]
    
end
module M_non_zero__qyi12916758414494363779__sub_pre_trans [#"non_zero.rs" 36 4 36 51] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 33 15 33 27
  let%span snon_zero1 = "non_zero.rs" 34 15 34 27
  let%span snon_zero2 = "non_zero.rs" 35 14 35 26
  let%span snon_zero3 = "non_zero.rs" 31 4 31 12
  let%span snon_zero4 = "non_zero.rs" 28 20 28 36
  
  use prelude.prelude.UInt32
  
  type t_NonZeroU32'0  =
    { t_NonZeroU32__0'0: uint32 }
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate sub_pre'0 [#"non_zero.rs" 27 4 27 43] (self : t_NonZeroU32'0) (rhs : t_NonZeroU32'0) =
    [%#snon_zero4] UInt32.to_int self.t_NonZeroU32__0'0 > UInt32.to_int rhs.t_NonZeroU32__0'0
  
  constant a  : t_NonZeroU32'0
  
  constant b  : t_NonZeroU32'0
  
  constant c  : t_NonZeroU32'0
  
  function sub_pre_trans'0 [#"non_zero.rs" 36 4 36 51] (a : t_NonZeroU32'0) (b : t_NonZeroU32'0) (c : t_NonZeroU32'0) : ()
    
  
  goal vc_sub_pre_trans'0 : ([%#snon_zero1] sub_pre'0 b c)
   -> ([%#snon_zero0] sub_pre'0 a b)  -> ([%#snon_zero2] sub_pre'0 a c)
end
module M_non_zero__qyi12916758414494363779__sub [#"non_zero.rs" 40 4 40 39] (* NonZeroU32 *)
  let%span snon_zero0 = "non_zero.rs" 40 15 40 19
  let%span snon_zero1 = "non_zero.rs" 40 21 40 24
  let%span snon_zero2 = "non_zero.rs" 39 15 39 32
  let%span snon_zero3 = "non_zero.rs" 40 35 40 39
  let%span snon_zero4 = "non_zero.rs" 28 20 28 36
  let%span snon_zero5 = "non_zero.rs" 10 20 10 31
  
  use prelude.prelude.UInt32
  
  type t_NonZeroU32'0  =
    { t_NonZeroU32__0'0: uint32 }
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  predicate invariant'0 [#"non_zero.rs" 9 4 9 30] (self : t_NonZeroU32'0) =
    [%#snon_zero5] UInt32.to_int self.t_NonZeroU32__0'0 > 0
  
  predicate inv'0 (_1 : t_NonZeroU32'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonZeroU32'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_NonZeroU32__0'0 = a_0} -> true
    end)
  
  predicate sub_pre'0 [#"non_zero.rs" 27 4 27 43] (self : t_NonZeroU32'0) (rhs : t_NonZeroU32'0) =
    [%#snon_zero4] UInt32.to_int self.t_NonZeroU32__0'0 > UInt32.to_int rhs.t_NonZeroU32__0'0
  
  meta "compute_max_steps" 1000000
  
  let rec sub'0 (self:t_NonZeroU32'0) (rhs:t_NonZeroU32'0) (return'  (ret:t_NonZeroU32'0))= {[@expl:sub 'self' type invariant] [%#snon_zero0] inv'0 self}
    {[@expl:sub 'rhs' type invariant] [%#snon_zero1] inv'0 rhs}
    {[@expl:sub requires] [%#snon_zero2] sub_pre'0 self rhs}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.sub {self.t_NonZeroU32__0'0} {rhs.t_NonZeroU32__0'0} (fun (_ret':uint32) ->  [ &_4 <- _ret' ] s1)
      | s1 =  [ &_0 <- { t_NonZeroU32__0'0 = _4 } ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : t_NonZeroU32'0 = any_l ()
    | & self : t_NonZeroU32'0 = self
    | & rhs : t_NonZeroU32'0 = rhs
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:t_NonZeroU32'0)-> {[@expl:sub result type invariant] [%#snon_zero3] inv'0 result}
      (! return' {result}) ]
    
end
