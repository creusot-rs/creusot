
module VecInv_SumTo10_Type
  use prelude.Int32
  use prelude.Int
  type t_sumto10  =
    | C_SumTo10 int32 int32
    
  function any_l (_ : 'b) : 'a
  let rec t_sumto10 (input:t_sumto10) (ret  (a:int32) (b:int32))= any
    [ good (a:int32) (b:int32)-> {C_SumTo10 a b = input} (! ret {a} {b})
    | bad (a:int32) (b:int32)-> {C_SumTo10 a b <> input} {false} any ]
    
  function sumto10_a (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 a _ -> a
      end
  function sumto10_b (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 _ a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module VecInv_Vec
  use prelude.Int
  use VecInv_SumTo10_Type as VecInv_SumTo10_Type
  use prelude.Int32
  predicate invariant'4 [#"../vec_inv.rs" 12 4 12 30] (self : VecInv_SumTo10_Type.t_sumto10) =
    [#"../vec_inv.rs" 13 20 13 43] Int32.to_int (VecInv_SumTo10_Type.sumto10_a self)
    + Int32.to_int (VecInv_SumTo10_Type.sumto10_b self)
    = 10
  let rec invariant'4 (self:VecInv_SumTo10_Type.t_sumto10) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'5 (_x : VecInv_SumTo10_Type.t_sumto10)
  let rec inv'5 (_x:VecInv_SumTo10_Type.t_sumto10) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : VecInv_SumTo10_Type.t_sumto10 . inv'5 x
  = (invariant'4 x
  /\ match x with
    | VecInv_SumTo10_Type.C_SumTo10 a b -> true
    end)
  use prelude.Borrow
  predicate invariant'3 (self : borrowed (VecInv_SumTo10_Type.t_sumto10)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:borrowed (VecInv_SumTo10_Type.t_sumto10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (VecInv_SumTo10_Type.t_sumto10))
  let rec inv'4 (_x:borrowed (VecInv_SumTo10_Type.t_sumto10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (VecInv_SumTo10_Type.t_sumto10) . inv'4 x = (inv'5 ( * x) /\ inv'5 ( ^ x))
  use prelude.Slice
  predicate invariant'1 (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  predicate inv'1 (_x : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10)))
  let rec inv'1 (_x:Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  use prelude.Slice
  use prelude.UIntSize
  use prelude.UIntSize
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'3 (_x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10)))
  let rec inv'3 (_x:slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  function shallow_model'1 (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))
    
  let rec shallow_model'1 (self:slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (return'  (ret:Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self}
    any
    [ return' (result:Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10)))-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  axiom shallow_model'1_spec : forall self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10)) . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'1 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'1 [@inline:trivial] (self : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (ix : int) : borrowed (VecInv_SumTo10_Type.t_sumto10)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'1 (self:slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (ix:int) (return'  (ret:borrowed (VecInv_SumTo10_Type.t_sumto10)))= any
    [ return' (result:borrowed (VecInv_SumTo10_Type.t_sumto10))-> {result = index_logic'1 self ix}
      (! return' {result}) ]
    
  function slice_len'0 (x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) : int =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 48 4 48 26] Seq.length (shallow_model'1 x)
  let rec slice_len'0 (x:slice (borrowed (VecInv_SumTo10_Type.t_sumto10))) (return'  (ret:int))= any
    [ return' (result:int)-> {result = slice_len'0 x} (! return' {result}) ]
    
  use prelude.UInt64
  axiom inv'3 : forall x : slice (borrowed (VecInv_SumTo10_Type.t_sumto10)) . inv'3 x
  = (forall i : uint64 . 0 <= i  -> i < slice_len'0 x  -> inv'4 (index_logic'1 x i))
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  predicate invariant'2 (self : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'2 (_x:Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_RawVec_RawVec_Type.t_rawvec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) . inv'2 x
  = true
  axiom inv'1 : forall x : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10)) . inv'1 x
  = (forall i : int . 0 <= i  -> i < Seq.length x  -> inv'4 (Seq.get x i))
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate inv'0 (_x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
  let rec inv'0 (_x:Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))
    
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10))))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self}
    any
    [ return' (result:Seq.seq (borrowed (VecInv_SumTo10_Type.t_sumto10)))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv'0 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv'1 (shallow_model'0 self))
  && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (max'0 : usize))
  predicate invariant'0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv'1 (shallow_model'0 self)
  let rec invariant'0 (self:Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Alloc_Vec_Vec_Type.C_Vec buf len -> true
    end)
  use prelude.Intrinsic
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : borrowed (VecInv_SumTo10_Type.t_sumto10)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:borrowed (VecInv_SumTo10_Type.t_sumto10)))= any
    [ return' (result:borrowed (VecInv_SumTo10_Type.t_sumto10))-> {result = index_logic'0 self ix}
      (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed (VecInv_SumTo10_Type.t_sumto10)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (VecInv_SumTo10_Type.t_sumto10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i
    /\ i < Seq.length (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  let rec resolve'0 (self:Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec vec (x:Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= {[#"../vec_inv.rs" 18 11 18 12] inv'0 x}
    {[#"../vec_inv.rs" 17 11 17 23] Seq.length (shallow_model'0 x) > 0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [#"../vec_inv.rs" 19 20 19 43] Int32.to_int (VecInv_SumTo10_Type.sumto10_a ( * index_logic'0 x 0))
        + Int32.to_int (VecInv_SumTo10_Type.sumto10_b ( * index_logic'0 x 0))
        = 10}
        s1
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../vec_inv.rs" 18 33 20 1] () ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & x : Alloc_Vec_Vec_Type.t_vec (borrowed (VecInv_SumTo10_Type.t_sumto10)) (Alloc_Alloc_Global_Type.t_global) = x ]
     [ return' (result:())-> (! return' {result}) ] 
end
module VecInv_Impl0
  
end
