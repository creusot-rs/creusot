module M_vec_inv__vec [#"vec_inv.rs" 18 0 18 32]
  let%span svec_inv0 = "vec_inv.rs" 19 20 19 43
  let%span svec_inv1 = "vec_inv.rs" 18 11 18 12
  let%span svec_inv2 = "vec_inv.rs" 17 11 17 23
  let%span sops3 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span svec5 = "../../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sseq8 = "../../../../creusot-contracts/src/logic/seq.rs" 451 20 451 95
  let%span sboxed9 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span svec_inv11 = "vec_inv.rs" 13 20 13 43
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  type t_SumTo10'0  =
    { t_SumTo10__a'0: int32; t_SumTo10__b'0: int32 }
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq (borrowed (t_SumTo10'0))
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec4] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Int32
  
  predicate invariant'4 [#"vec_inv.rs" 12 4 12 30] (self : t_SumTo10'0) =
    [%#svec_inv11] Int32.to_int self.t_SumTo10__a'0 + Int32.to_int self.t_SumTo10__b'0 = 10
  
  predicate inv'4 (_1 : t_SumTo10'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_SumTo10'0 [inv'4 x] . inv'4 x
  = (invariant'4 x
  /\ match x with
    | {t_SumTo10__a'0 = a ; t_SumTo10__b'0 = b} -> true
    end)
  
  predicate invariant'3 (self : borrowed (t_SumTo10'0)) =
    [%#sinvariant10] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'3 (_1 : borrowed (t_SumTo10'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (t_SumTo10'0) [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : borrowed (t_SumTo10'0)) =
    [%#sboxed9] inv'3 self
  
  predicate inv'2 (_1 : borrowed (t_SumTo10'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_SumTo10'0) [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : Seq.seq (borrowed (t_SumTo10'0))) =
    [%#sseq8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'2 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed (t_SumTo10'0)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (borrowed (t_SumTo10'0)) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec6] inv'1 (view'0 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : borrowed (t_SumTo10'0) =
    [%#sops3] Seq.get (view'0 self) ix
  
  predicate resolve'3 (self : borrowed (t_SumTo10'0)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_SumTo10'0)) =
    resolve'3 _1
  
  predicate resolve'1 (self : t_Vec'0) =
    [%#svec5] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> resolve'2 (index_logic'0 self i)
  
  predicate resolve'0 (_1 : t_Vec'0) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec vec'0 (x:t_Vec'0) (return'  (ret:()))= {[@expl:vec 'x' type invariant] [%#svec_inv1] inv'0 x}
    {[@expl:vec requires] [%#svec_inv2] Seq.length (view'0 x) > 0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#svec_inv0] Int32.to_int ((index_logic'0 x 0).current).t_SumTo10__a'0
        + Int32.to_int ((index_logic'0 x 0).current).t_SumTo10__b'0
        = 10}
        s1
      | s1 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : t_Vec'0 = x ]  [ return' (result:())-> (! return' {result}) ] 
end
