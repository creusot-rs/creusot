
module T_vec_inv__SumTo10
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_SumTo10  =
    | C_SumTo10 int32 int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_SumTo10 (input:t_SumTo10) (ret  (a:int32) (b:int32))= any
    [ good (a:int32) (b:int32)-> {C_SumTo10 a b = input} (! ret {a} {b})
    | bad (a:int32) (b:int32)-> {C_SumTo10 a b <> input} {false} any ]
    
  
  function t_SumTo10__a (self : t_SumTo10) : int32 =
    match self with
      | C_SumTo10 a _ -> a
      end
  
  function t_SumTo10__b (self : t_SumTo10) : int32 =
    match self with
      | C_SumTo10 _ a -> a
      end
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module M_vec_inv__vec
  let%span svec_inv0 = "../vec_inv.rs" 19 20 19 43
  
  let%span svec_inv1 = "../vec_inv.rs" 17 11 17 23
  
  let%span svec_inv2 = "../vec_inv.rs" 18 11 18 12
  
  let%span span3 = "../vec_inv.rs" 13 20 13 43
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span11 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  use prelude.prelude.Int
  
  use T_vec_inv__SumTo10 as T_vec_inv__SumTo10
  
  use prelude.prelude.Int32
  
  use T_vec_inv__SumTo10 as SumTo10'0
  
  predicate invariant'4 [#"../vec_inv.rs" 12 4 12 30] (self : SumTo10'0.t_SumTo10) =
    [%#span3] Int32.to_int (T_vec_inv__SumTo10.t_SumTo10__a self) + Int32.to_int (T_vec_inv__SumTo10.t_SumTo10__b self)
    = 10
  
  predicate inv'4 (_1 : SumTo10'0.t_SumTo10)
  
  axiom inv'4 : forall x : SumTo10'0.t_SumTo10 . inv'4 x
  = (invariant'4 x
  /\ match x with
    | SumTo10'0.C_SumTo10 a b -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (SumTo10'0.t_SumTo10)) =
    [%#span4] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'3 (_1 : borrowed (SumTo10'0.t_SumTo10))
  
  axiom inv'3 : forall x : borrowed (SumTo10'0.t_SumTo10) . inv'3 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : borrowed (SumTo10'0.t_SumTo10)) =
    [%#span5] inv'3 self
  
  predicate inv'2 (_1 : borrowed (SumTo10'0.t_SumTo10))
  
  axiom inv'2 : forall x : borrowed (SumTo10'0.t_SumTo10) . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (borrowed (SumTo10'0.t_SumTo10))) =
    [%#span6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'2 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq (borrowed (SumTo10'0.t_SumTo10)))
  
  axiom inv'1 : forall x : Seq.seq (borrowed (SumTo10'0.t_SumTo10)) . inv'1 x = invariant'1 x
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span7] (18446744073709551615 : usize)
  
  function shallow_model'0 (self : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global)) : Seq.seq (borrowed (SumTo10'0.t_SumTo10))
    
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global) . [%#span8] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global)) =
    [%#span9] inv'1 (shallow_model'0 self)
  
  predicate inv'0 (_1 : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global))
  
  axiom inv'0 : forall x : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global) . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global)) (ix : int) : borrowed (SumTo10'0.t_SumTo10)
    
   =
    [%#span10] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'1 (self : borrowed (SumTo10'0.t_SumTo10)) =
    [%#span11] self.final = self.current
  
  predicate resolve'0 (self : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global)) =
    [%#span12] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  
  let rec vec (x:Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global)) (return'  (ret:()))= {[%#svec_inv2] inv'0 x}
    {[%#svec_inv1] Seq.length (shallow_model'0 x) > 0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#svec_inv0] Int32.to_int (T_vec_inv__SumTo10.t_SumTo10__a (index_logic'0 x 0).current)
        + Int32.to_int (T_vec_inv__SumTo10.t_SumTo10__b (index_logic'0 x 0).current)
        = 10}
        s1
      | s1 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : Vec'0.t_Vec (borrowed (SumTo10'0.t_SumTo10)) (Global'0.t_Global) = x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_vec_inv__qy123zimplqy35z0qy125z
  
end
