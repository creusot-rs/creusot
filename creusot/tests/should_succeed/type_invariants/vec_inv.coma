
module VecInv_SumTo10_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_sumto10  =
    | C_SumTo10 int32 int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_sumto10 (input:t_sumto10) (ret  (a:int32) (b:int32))= any
    [ good (a:int32) (b:int32)-> {C_SumTo10 a b = input} (! ret {a} {b})
    | bad (a:int32) (b:int32)-> {C_SumTo10 a b <> input} {false} any ]
    
  
  function sumto10_a (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 a _ -> a
      end
  
  function sumto10_b (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 _ a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module VecInv_Vec
  let%span svec_inv0 = "../vec_inv.rs" 19 20 19 43
  
  let%span svec_inv1 = "../vec_inv.rs" 17 11 17 23
  
  let%span svec_inv2 = "../vec_inv.rs" 18 11 18 12
  
  let%span span3 = "../vec_inv.rs" 13 20 13 43
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span9 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span10 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 48 4 48 26
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span14 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span16 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span17 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span18 = "../../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  use prelude.prelude.Int
  
  use VecInv_SumTo10_Type as VecInv_SumTo10_Type
  
  use prelude.prelude.Int32
  
  use VecInv_SumTo10_Type as SumTo10'0
  
  predicate invariant'4 [#"../vec_inv.rs" 12 4 12 30] (self : SumTo10'0.t_sumto10) =
    [%#span3] Int32.to_int (VecInv_SumTo10_Type.sumto10_a self) + Int32.to_int (VecInv_SumTo10_Type.sumto10_b self) = 10
  
  predicate inv'5 (_x : SumTo10'0.t_sumto10)
  
  axiom inv'5 : forall x : SumTo10'0.t_sumto10 . inv'5 x
  = (invariant'4 x
  /\ match x with
    | SumTo10'0.C_SumTo10 a b -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (SumTo10'0.t_sumto10)) =
    [%#span4] true
  
  predicate inv'4 (_x : borrowed (SumTo10'0.t_sumto10))
  
  axiom inv'4 : forall x : borrowed (SumTo10'0.t_sumto10) . inv'4 x = (inv'5 x.current /\ inv'5 x.final)
  
  use prelude.prelude.Slice
  
  predicate invariant'1 (self : slice (borrowed (SumTo10'0.t_sumto10))) =
    [%#span4] true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq (borrowed (SumTo10'0.t_sumto10)))
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span5] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'3 (_x : slice (borrowed (SumTo10'0.t_sumto10)))
  
  function shallow_model'1 (self : slice (borrowed (SumTo10'0.t_sumto10))) : Seq.seq (borrowed (SumTo10'0.t_sumto10))
  
  axiom shallow_model'1_spec : forall self : slice (borrowed (SumTo10'0.t_sumto10)) . ([%#span6] inv'3 self)
   -> ([%#span9] inv'1 (shallow_model'1 self))
  && ([%#span8] shallow_model'1 self = Slice.id self)
  && ([%#span7] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'1 [@inline:trivial] (self : slice (borrowed (SumTo10'0.t_sumto10))) (ix : int) : borrowed (SumTo10'0.t_sumto10)
    
   =
    [%#span10] Seq.get (shallow_model'1 self) ix
  
  function slice_len'0 (x : slice (borrowed (SumTo10'0.t_sumto10))) : int =
    [%#span11] Seq.length (shallow_model'1 x)
  
  use prelude.prelude.UInt64
  
  axiom inv'3 : forall x : slice (borrowed (SumTo10'0.t_sumto10)) . inv'3 x
  = (forall i : uint64 . 0 <= i  -> i < slice_len'0 x  -> inv'4 (index_logic'1 x i))
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  predicate invariant'2 (self : RawVec'0.t_rawvec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global)) =
    [%#span4] true
  
  predicate inv'2 (_x : RawVec'0.t_rawvec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global))
  
  axiom inv'2 : forall x : RawVec'0.t_rawvec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global) . inv'2 x = true
  
  axiom inv'1 : forall x : Seq.seq (borrowed (SumTo10'0.t_sumto10)) . inv'1 x
  = (forall i : int . 0 <= i  -> i < Seq.length x  -> inv'4 (Seq.get x i))
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate inv'0 (_x : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global))
  
  function shallow_model'0 (self : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global)) : Seq.seq (borrowed (SumTo10'0.t_sumto10))
    
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global) . ([%#span12] inv'0 self)
   -> ([%#span14] inv'1 (shallow_model'0 self))
  && ([%#span13] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global)) =
    [%#span15] inv'1 (shallow_model'0 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global) . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Vec'0.C_Vec buf len -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global)) (ix : int) : borrowed (SumTo10'0.t_sumto10)
    
   =
    [%#span16] Seq.get (shallow_model'0 self) ix
  
  predicate resolve'1 (self : borrowed (SumTo10'0.t_sumto10)) =
    [%#span17] self.final = self.current
  
  predicate resolve'0 (self : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global)) =
    [%#span18] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'1 (index_logic'0 self i)
  
  let rec vec (x:Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global)) (return'  (ret:()))= {[%#svec_inv2] inv'0 x}
    {[%#svec_inv1] Seq.length (shallow_model'0 x) > 0}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#svec_inv0] Int32.to_int (VecInv_SumTo10_Type.sumto10_a (index_logic'0 x 0).current)
        + Int32.to_int (VecInv_SumTo10_Type.sumto10_b (index_logic'0 x 0).current)
        = 10}
        s1
      | s1 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : Vec'0.t_vec (borrowed (SumTo10'0.t_sumto10)) (Global'0.t_global) = x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module VecInv_Impl0
  
end
