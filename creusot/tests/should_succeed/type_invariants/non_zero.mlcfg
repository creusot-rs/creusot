
module NonZero_NonZeroU32_Type
  use prelude.UInt32
  use prelude.Int
  type t_nonzerou32  =
    | C_NonZeroU32 uint32
    
  let function nonzerou32_0 (self : t_nonzerou32) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_NonZeroU32 a -> a
      end
end
module NonZero_Impl1_New
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) =
    [#"../non_zero.rs" 10 20 10 31] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > 0
  val invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32)
  val inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : NonZero_NonZeroU32_Type.t_nonzerou32 . inv0 x = (invariant0 x /\ match x with
    | NonZero_NonZeroU32_Type.C_NonZeroU32 a_0 -> true
    end)
  use prelude.UInt32
  let rec cfg new [#"../non_zero.rs" 16 4 16 30] [@cfg:stackify] [@cfg:subregion_analysis] (n : uint32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 15 15 15 21] UInt32.to_int n > 0}
    ensures { [#"../non_zero.rs" 16 26 16 30] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NonZero_NonZeroU32_Type.t_nonzerou32;
  var n : uint32 = n;
  {
    goto BB0
  }
  BB0 {
    [#"../non_zero.rs" 17 8 17 15] _0 <- ([#"../non_zero.rs" 17 8 17 15] NonZero_NonZeroU32_Type.C_NonZeroU32 ([#"../non_zero.rs" 17 13 17 14] n));
    return _0
  }
  
end
module NonZero_Impl1_Add
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) =
    [#"../non_zero.rs" 10 20 10 31] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > 0
  val invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32)
  val inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : NonZero_NonZeroU32_Type.t_nonzerou32 . inv0 x = (invariant0 x /\ match x with
    | NonZero_NonZeroU32_Type.C_NonZeroU32 a_0 -> true
    end)
  use prelude.UInt32
  let constant max0  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    (4294967295 : uint32)
  let rec cfg add [#"../non_zero.rs" 21 4 21 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 20 15 20 44] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) + UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 rhs) <= UInt32.to_int max0}
    requires {[#"../non_zero.rs" 21 15 21 19] inv0 self}
    requires {[#"../non_zero.rs" 21 21 21 24] inv0 rhs}
    ensures { [#"../non_zero.rs" 21 35 21 39] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NonZero_NonZeroU32_Type.t_nonzerou32;
  var self : NonZero_NonZeroU32_Type.t_nonzerou32 = self;
  var rhs : NonZero_NonZeroU32_Type.t_nonzerou32 = rhs;
  {
    goto BB0
  }
  BB0 {
    [#"../non_zero.rs" 22 8 22 28] _0 <- ([#"../non_zero.rs" 22 8 22 28] NonZero_NonZeroU32_Type.C_NonZeroU32 ([#"../non_zero.rs" 22 13 22 27] ([#"../non_zero.rs" 22 13 22 19] NonZero_NonZeroU32_Type.nonzerou32_0 self) + ([#"../non_zero.rs" 22 22 22 27] NonZero_NonZeroU32_Type.nonzerou32_0 rhs)));
    return _0
  }
  
end
module NonZero_Impl1_SubPreTrans_Impl
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) =
    [#"../non_zero.rs" 10 20 10 31] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > 0
  val invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32)
  val inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : NonZero_NonZeroU32_Type.t_nonzerou32 . inv0 x = (invariant0 x /\ match x with
    | NonZero_NonZeroU32_Type.C_NonZeroU32 a_0 -> true
    end)
  predicate sub_pre0 [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32)
    
   =
    [#"../non_zero.rs" 28 20 28 36] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 rhs)
  val sub_pre0 [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = sub_pre0 self rhs }
    
  let rec ghost function sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    requires {[#"../non_zero.rs" 33 15 33 27] sub_pre0 a b}
    requires {[#"../non_zero.rs" 34 15 34 27] sub_pre0 b c}
    requires {[#"../non_zero.rs" 36 25 36 26] inv0 a}
    requires {[#"../non_zero.rs" 36 34 36 35] inv0 b}
    requires {[#"../non_zero.rs" 36 43 36 44] inv0 c}
    ensures { [#"../non_zero.rs" 35 14 35 26] sub_pre0 a c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../non_zero.rs" 31 4 31 10] ()
end
module NonZero_Impl1_Sub
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) =
    [#"../non_zero.rs" 10 20 10 31] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > 0
  val invariant0 [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32)
  val inv0 (_x : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : NonZero_NonZeroU32_Type.t_nonzerou32 . inv0 x = (invariant0 x /\ match x with
    | NonZero_NonZeroU32_Type.C_NonZeroU32 a_0 -> true
    end)
  predicate sub_pre0 [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32)
    
   =
    [#"../non_zero.rs" 28 20 28 36] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 rhs)
  val sub_pre0 [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = sub_pre0 self rhs }
    
  use prelude.UInt32
  let rec cfg sub [#"../non_zero.rs" 40 4 40 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 39 15 39 32] sub_pre0 self rhs}
    requires {[#"../non_zero.rs" 40 15 40 19] inv0 self}
    requires {[#"../non_zero.rs" 40 21 40 24] inv0 rhs}
    ensures { [#"../non_zero.rs" 40 35 40 39] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NonZero_NonZeroU32_Type.t_nonzerou32;
  var self : NonZero_NonZeroU32_Type.t_nonzerou32 = self;
  var rhs : NonZero_NonZeroU32_Type.t_nonzerou32 = rhs;
  {
    goto BB0
  }
  BB0 {
    [#"../non_zero.rs" 41 8 41 28] _0 <- ([#"../non_zero.rs" 41 8 41 28] NonZero_NonZeroU32_Type.C_NonZeroU32 ([#"../non_zero.rs" 41 13 41 27] ([#"../non_zero.rs" 41 13 41 19] NonZero_NonZeroU32_Type.nonzerou32_0 self) - ([#"../non_zero.rs" 41 22 41 27] NonZero_NonZeroU32_Type.nonzerou32_0 rhs)));
    return _0
  }
  
end
module NonZero_Impl0
  
end
