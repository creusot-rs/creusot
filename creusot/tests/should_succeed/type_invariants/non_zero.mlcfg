
module NonZero_NonZeroU32_Type
  use prelude.Int
  use prelude.UInt32
  type t_nonzerou32  =
    | C_NonZeroU32 uint32
    
  let function nonzerou32_0 (self : t_nonzerou32) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_NonZeroU32 a -> a
      end
end
module NonZero_Impl0_Invariant_Stub
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant' [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32)
end
module NonZero_Impl0_Invariant_Interface
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant' [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32)
  val invariant' [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant' self }
    
end
module NonZero_Impl0_Invariant
  use prelude.UInt32
  use prelude.Int
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate invariant' [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) =
    [#"../non_zero.rs" 10 20 10 31] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > 0
  val invariant' [#"../non_zero.rs" 9 4 9 30] (self : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module NonZero_NonZeroU32_Type_Inv
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone NonZero_Impl0_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  axiom inv_t_nonzerou32 [@rewrite] : forall self : NonZero_NonZeroU32_Type.t_nonzerou32 . Inv0.inv self = Invariant0.invariant' self
end
module NonZero_Impl1_New_Interface
  use prelude.UInt32
  use prelude.Int
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  val new [#"../non_zero.rs" 16 4 16 30] (n : uint32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 15 15 15 21] UInt32.to_int n > 0}
    ensures { [#"../non_zero.rs" 16 26 16 30] Inv0.inv result }
    
end
module NonZero_Impl1_New
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone NonZero_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_NonZeroU32_Type_Inv as NonZero_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec cfg new [#"../non_zero.rs" 16 4 16 30] [@cfg:stackify] [@cfg:subregion_analysis] (n : uint32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 15 15 15 21] UInt32.to_int n > 0}
    ensures { [#"../non_zero.rs" 16 26 16 30] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NonZero_NonZeroU32_Type.t_nonzerou32;
  var n : uint32 = n;
  {
    goto BB0
  }
  BB0 {
    _0 <- NonZero_NonZeroU32_Type.C_NonZeroU32 n;
    return _0
  }
  
end
module Core_Num_Impl8_Max_Stub
  use prelude.Int
  use prelude.UInt32
  val constant mAX'  : uint32
end
module Core_Num_Impl8_Max
  use prelude.Int
  use prelude.UInt32
  let constant mAX'  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    (4294967295 : uint32)
end
module NonZero_Impl1_Add_Interface
  use prelude.UInt32
  use prelude.Int
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone Core_Num_Impl8_Max_Stub as Max0
  val add [#"../non_zero.rs" 21 4 21 39] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 20 15 20 44] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) + UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 rhs) <= UInt32.to_int Max0.mAX'}
    requires {[#"../non_zero.rs" 21 15 21 19] Inv0.inv self}
    requires {[#"../non_zero.rs" 21 21 21 24] Inv0.inv rhs}
    ensures { [#"../non_zero.rs" 21 35 21 39] Inv0.inv result }
    
end
module NonZero_Impl1_Add
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone NonZero_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_NonZeroU32_Type_Inv as NonZero_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Core_Num_Impl8_Max as Max0
  let rec cfg add [#"../non_zero.rs" 21 4 21 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 20 15 20 44] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) + UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 rhs) <= UInt32.to_int Max0.mAX'}
    requires {[#"../non_zero.rs" 21 15 21 19] Inv0.inv self}
    requires {[#"../non_zero.rs" 21 21 21 24] Inv0.inv rhs}
    ensures { [#"../non_zero.rs" 21 35 21 39] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NonZero_NonZeroU32_Type.t_nonzerou32;
  var self : NonZero_NonZeroU32_Type.t_nonzerou32 = self;
  var rhs : NonZero_NonZeroU32_Type.t_nonzerou32 = rhs;
  {
    goto BB0
  }
  BB0 {
    _0 <- NonZero_NonZeroU32_Type.C_NonZeroU32 ([#"../non_zero.rs" 22 13 22 27] NonZero_NonZeroU32_Type.nonzerou32_0 self + NonZero_NonZeroU32_Type.nonzerou32_0 rhs);
    return _0
  }
  
end
module NonZero_Impl1_SubPre_Stub
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate sub_pre [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32)
    
end
module NonZero_Impl1_SubPre_Interface
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate sub_pre [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32)
    
  val sub_pre [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = sub_pre self rhs }
    
end
module NonZero_Impl1_SubPre
  use prelude.UInt32
  use prelude.Int
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  predicate sub_pre [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32)
    
   =
    [#"../non_zero.rs" 28 20 28 36] UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 self) > UInt32.to_int (NonZero_NonZeroU32_Type.nonzerou32_0 rhs)
  val sub_pre [#"../non_zero.rs" 27 4 27 43] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = sub_pre self rhs }
    
end
module NonZero_Impl1_SubPreTrans_Stub
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_Impl1_SubPre_Stub as SubPre0
  function sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    
end
module NonZero_Impl1_SubPreTrans_Interface
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_Impl1_SubPre_Stub as SubPre0
  function sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    
  val sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    requires {[#"../non_zero.rs" 33 15 33 27] SubPre0.sub_pre a b}
    requires {[#"../non_zero.rs" 34 15 34 27] SubPre0.sub_pre b c}
    requires {[#"../non_zero.rs" 36 25 36 26] Inv0.inv a}
    requires {[#"../non_zero.rs" 36 34 36 35] Inv0.inv b}
    requires {[#"../non_zero.rs" 36 43 36 44] Inv0.inv c}
    ensures { [#"../non_zero.rs" 35 14 35 26] SubPre0.sub_pre a c }
    ensures { result = sub_pre_trans a b c }
    
  axiom sub_pre_trans_spec : forall a : NonZero_NonZeroU32_Type.t_nonzerou32, b : NonZero_NonZeroU32_Type.t_nonzerou32, c : NonZero_NonZeroU32_Type.t_nonzerou32 . ([#"../non_zero.rs" 33 15 33 27] SubPre0.sub_pre a b) -> ([#"../non_zero.rs" 34 15 34 27] SubPre0.sub_pre b c) -> ([#"../non_zero.rs" 36 25 36 26] Inv0.inv a) -> ([#"../non_zero.rs" 36 34 36 35] Inv0.inv b) -> ([#"../non_zero.rs" 36 43 36 44] Inv0.inv c) -> ([#"../non_zero.rs" 35 14 35 26] SubPre0.sub_pre a c)
end
module NonZero_Impl1_SubPreTrans
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_Impl1_SubPre_Stub as SubPre0
  function sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    
   =
    [#"../non_zero.rs" 31 4 31 10] ()
  val sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    requires {[#"../non_zero.rs" 33 15 33 27] SubPre0.sub_pre a b}
    requires {[#"../non_zero.rs" 34 15 34 27] SubPre0.sub_pre b c}
    requires {[#"../non_zero.rs" 36 25 36 26] Inv0.inv a}
    requires {[#"../non_zero.rs" 36 34 36 35] Inv0.inv b}
    requires {[#"../non_zero.rs" 36 43 36 44] Inv0.inv c}
    ensures { [#"../non_zero.rs" 35 14 35 26] SubPre0.sub_pre a c }
    ensures { result = sub_pre_trans a b c }
    
  axiom sub_pre_trans_spec : forall a : NonZero_NonZeroU32_Type.t_nonzerou32, b : NonZero_NonZeroU32_Type.t_nonzerou32, c : NonZero_NonZeroU32_Type.t_nonzerou32 . ([#"../non_zero.rs" 33 15 33 27] SubPre0.sub_pre a b) -> ([#"../non_zero.rs" 34 15 34 27] SubPre0.sub_pre b c) -> ([#"../non_zero.rs" 36 25 36 26] Inv0.inv a) -> ([#"../non_zero.rs" 36 34 36 35] Inv0.inv b) -> ([#"../non_zero.rs" 36 43 36 44] Inv0.inv c) -> ([#"../non_zero.rs" 35 14 35 26] SubPre0.sub_pre a c)
end
module NonZero_Impl1_SubPreTrans_Impl
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone NonZero_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_NonZeroU32_Type_Inv as NonZero_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone NonZero_Impl1_SubPre as SubPre0
  let rec ghost function sub_pre_trans [#"../non_zero.rs" 36 4 36 51] (a : NonZero_NonZeroU32_Type.t_nonzerou32) (b : NonZero_NonZeroU32_Type.t_nonzerou32) (c : NonZero_NonZeroU32_Type.t_nonzerou32) : ()
    requires {[#"../non_zero.rs" 33 15 33 27] SubPre0.sub_pre a b}
    requires {[#"../non_zero.rs" 34 15 34 27] SubPre0.sub_pre b c}
    requires {[#"../non_zero.rs" 36 25 36 26] Inv0.inv a}
    requires {[#"../non_zero.rs" 36 34 36 35] Inv0.inv b}
    requires {[#"../non_zero.rs" 36 43 36 44] Inv0.inv c}
    ensures { [#"../non_zero.rs" 35 14 35 26] SubPre0.sub_pre a c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../non_zero.rs" 31 4 31 10] ()
end
module NonZero_Impl1_Sub_Interface
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_Impl1_SubPre_Stub as SubPre0
  val sub [#"../non_zero.rs" 40 4 40 39] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 39 15 39 32] SubPre0.sub_pre self rhs}
    requires {[#"../non_zero.rs" 40 15 40 19] Inv0.inv self}
    requires {[#"../non_zero.rs" 40 21 40 24] Inv0.inv rhs}
    ensures { [#"../non_zero.rs" 40 35 40 39] Inv0.inv result }
    
end
module NonZero_Impl1_Sub
  use prelude.Int
  use prelude.UInt32
  use NonZero_NonZeroU32_Type as NonZero_NonZeroU32_Type
  clone NonZero_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = NonZero_NonZeroU32_Type.t_nonzerou32
  clone NonZero_NonZeroU32_Type_Inv as NonZero_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone NonZero_Impl1_SubPre as SubPre0
  let rec cfg sub [#"../non_zero.rs" 40 4 40 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : NonZero_NonZeroU32_Type.t_nonzerou32) (rhs : NonZero_NonZeroU32_Type.t_nonzerou32) : NonZero_NonZeroU32_Type.t_nonzerou32
    requires {[#"../non_zero.rs" 39 15 39 32] SubPre0.sub_pre self rhs}
    requires {[#"../non_zero.rs" 40 15 40 19] Inv0.inv self}
    requires {[#"../non_zero.rs" 40 21 40 24] Inv0.inv rhs}
    ensures { [#"../non_zero.rs" 40 35 40 39] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NonZero_NonZeroU32_Type.t_nonzerou32;
  var self : NonZero_NonZeroU32_Type.t_nonzerou32 = self;
  var rhs : NonZero_NonZeroU32_Type.t_nonzerou32 = rhs;
  {
    goto BB0
  }
  BB0 {
    _0 <- NonZero_NonZeroU32_Type.C_NonZeroU32 ([#"../non_zero.rs" 41 13 41 27] NonZero_NonZeroU32_Type.nonzerou32_0 self - NonZero_NonZeroU32_Type.nonzerou32_0 rhs);
    return _0
  }
  
end
module NonZero_Impl0
  
end
