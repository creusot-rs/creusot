
module Borrows_NonZero_Type
  use prelude.Int32
  use prelude.Int
  type t_nonzero  =
    | C_NonZero int32
    
  function any_l (_ : 'b) : 'a
  let rec t_nonzero (input:t_nonzero) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_NonZero field_0 = input} (! ret {field_0})
    | bad (field_0:int32)-> {C_NonZero field_0 <> input} {false} any ]
    
  function nonzero_0 (self : t_nonzero) : int32 =
    match self with
      | C_NonZero a -> a
      end
end
module Borrows_Impl1_New
  use prelude.Int32
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  predicate invariant'0 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'0 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'0 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Borrows_NonZero_Type.t_nonzero . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  use prelude.Int32
  use prelude.Int
  use prelude.Intrinsic
  let rec new (n:int32) (return'  (ret:Borrows_NonZero_Type.t_nonzero))= {[#"../borrows.rs" 15 15 15 22] Int32.to_int n
    <> 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- Borrows_NonZero_Type.C_NonZero n ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : Borrows_NonZero_Type.t_nonzero = any_l () : Borrows_NonZero_Type.t_nonzero | & n : int32 = n ]
    
    [ return' (result:Borrows_NonZero_Type.t_nonzero)-> {[@expl:postcondition] [#"../borrows.rs" 17 26 17 30] inv'0 result}
      {[@expl:postcondition] [#"../borrows.rs" 16 14 16 27] Borrows_NonZero_Type.nonzero_0 result = n}
      (! return' {result}) ]
    
end
module Borrows_Impl1_InnerMut
  use prelude.Int32
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'1 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'1 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Borrows_NonZero_Type.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  use prelude.Borrow
  predicate invariant'0 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'0 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'0 x = (inv'1 ( * x) /\ inv'1 ( ^ x))
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int32
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec inner_mut (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:borrowed int32))= {[#"../borrows.rs" 23 26 23 30] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrows_NonZero_Type.t_nonzero { * self}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_5 <- _ret' ] 
                Borrows_NonZero_Type.t_nonzero { * self}
                  (fun (l_0'0:int32) ->
                    
                    [ &self <- { self with current = (Borrows_NonZero_Type.C_NonZero ( ^ _5) : Borrows_NonZero_Type.t_nonzero) ; } ]
                    
                    s1)))
      | s1 = Borrow.borrow_final <int32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _2) ; } ] s2)
      | s2 = Borrow.borrow_final <int32> { * _2} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = ( ^ _0) ; } ] s3)
      | s3 = -{resolve'0 _5}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = {[@expl:type invariant] inv'0 self} s6
      | s6 = -{resolve'1 self}- s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l () : borrowed int32
    | & self : borrowed (Borrows_NonZero_Type.t_nonzero) = self
    | & _2 : borrowed int32 = any_l () : borrowed int32
    | & _5 : borrowed int32 = any_l () : borrowed int32 ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [#"../borrows.rs" 22 14 22 38] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( ^ self))
      = Int32.to_int ( ^ result)}
      {[@expl:postcondition] [#"../borrows.rs" 21 14 21 38] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * self))
      = Int32.to_int ( * result)}
      (! return' {result}) ]
    
end
module Borrows_Inc
  use prelude.Int32
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Int
  use prelude.Borrow
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec inc (x:borrowed int32) (return'  (ret:()))= {[#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add { * x} {[#"../borrows.rs" 102 10 102 11] (1 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 =  [ &_0 <- [#"../borrows.rs" 101 24 103 1] () ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & x : borrowed int32 = x ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x)
      = shallow_model'0 x + 1}
      (! return' {result}) ]
    
end
module Borrows_Simple
  use prelude.Int32
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'1 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'1 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Borrows_NonZero_Type.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  use prelude.Borrow
  predicate invariant'0 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'0 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'0 x = (inv'1 ( * x) /\ inv'1 ( ^ x))
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  let rec simple (x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:()))= {[#"../borrows.rs" 31 14 31 15] inv'0 x}
    {[#"../borrows.rs" 30 11 30 21] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * x)) <> - 1}
    {[#"../borrows.rs" 29 11 29 27] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * x)) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrows_NonZero_Type.t_nonzero { * x}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_6 <- _ret' ] 
                Borrows_NonZero_Type.t_nonzero { * x}
                  (fun (l_0'0:int32) ->
                    
                    [ &x <- { x with current = (Borrows_NonZero_Type.C_NonZero ( ^ _6) : Borrows_NonZero_Type.t_nonzero) ; } ]
                    
                    s1)))
      | s1 = Borrow.borrow_final <int32> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _5) ; } ] s2)
      | s2 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 =  [ &_0 <- [#"../borrows.rs" 31 31 34 1] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : borrowed (Borrows_NonZero_Type.t_nonzero) = x
    | & _4 : () = any_l () : ()
    | & _5 : borrowed int32 = any_l () : borrowed int32
    | & _6 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Hard
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'0 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'1 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'1 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  use prelude.Int32
  predicate invariant'0 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'0 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Borrows_NonZero_Type.t_nonzero . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  let rec inner_mut'0 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:borrowed int32))= {[@expl:precondition] [#"../borrows.rs" 23 26 23 30] inv'1 self}
    any
    [ return' (result:borrowed int32)-> {[#"../borrows.rs" 22 14 22 38] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( ^ self))
      = Int32.to_int ( ^ result)}
      {[#"../borrows.rs" 21 14 21 38] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * self))
      = Int32.to_int ( * result)}
      (! return' {result}) ]
    
  let rec hard (x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:()))= {[#"../borrows.rs" 38 12 38 13] inv'1 x}
    {[#"../borrows.rs" 37 11 37 21] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * x)) <> - 1}
    {[#"../borrows.rs" 36 11 36 27] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * x)) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Borrows_NonZero_Type.t_nonzero> { * x} {Borrow.get_id x}
          (fun (_ret':borrowed (Borrows_NonZero_Type.t_nonzero)) ->
             [ &_7 <- _ret' ] 
             [ &x <- { x with current = ( ^ _7) ; } ] 
            s1)
      | s1 = -{inv'0 ( ^ _7)}- s2
      | s2 = inner_mut'0 {_7} (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <int32> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _5) ; } ] s1)
      | s1 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 =  [ &_0 <- [#"../borrows.rs" 38 29 41 1] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : borrowed (Borrows_NonZero_Type.t_nonzero) = x
    | & _4 : () = any_l () : ()
    | & _5 : borrowed int32 = any_l () : borrowed int32
    | & _6 : borrowed int32 = any_l () : borrowed int32
    | & _7 : borrowed (Borrows_NonZero_Type.t_nonzero) = any_l () : borrowed (Borrows_NonZero_Type.t_nonzero) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Tuple
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'1 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'2 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'2 x = (inv'1 ( * x) /\ inv'1 ( ^ x))
  use prelude.Int32
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'1 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Borrows_NonZero_Type.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  predicate invariant'0 (self : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)))
  let rec inv'0 (_x:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)) . inv'0 x
  = (let (a, b) = x in inv'1 a /\ inv'2 b)
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'3 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'2 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'1 (self:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  let rec tuple (x:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:()))= {[#"../borrows.rs" 45 17 45 18] inv'0 x}
    {[#"../borrows.rs" 44 11 44 23] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * (let (_, a) = x in a))) <> - 1}
    {[#"../borrows.rs" 43 11 43 29] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * (let (_, a) = x in a)))
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrows_NonZero_Type.t_nonzero {let (l'0, _) = x in l'0}
          (fun (l_0'0:int32) ->
            
            [ &x <- let (_, l'2) = x in (Borrows_NonZero_Type.C_NonZero ([#"../borrows.rs" 46 13 46 14] (0 : int32)) : Borrows_NonZero_Type.t_nonzero, l'2) ]
            
            s1)
      | s1 = Borrows_NonZero_Type.t_nonzero { * (let (_, r'1) = x in r'1)}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id (let (_, r'0) = x in r'0)) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_6 <- _ret' ] 
                Borrows_NonZero_Type.t_nonzero { * (let (_, l'3) = x in l'3)}
                  (fun (l_0'1:int32) ->
                    
                    [ &x <- let (l'4, _) = x in (l'4, { (let (_, l'3) = x in l'3) with current = (Borrows_NonZero_Type.C_NonZero ( ^ _6) : Borrows_NonZero_Type.t_nonzero) ; }) ]
                    
                    s2)))
      | s2 = Borrow.borrow_final <int32> { * _6} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = ( ^ _5) ; } ] s3)
      | s3 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 =  [ &_0 <- [#"../borrows.rs" 45 45 49 1] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)) = x
    | & _4 : () = any_l () : ()
    | & _5 : borrowed int32 = any_l () : borrowed int32
    | & _6 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_PartialMove
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'1 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'2 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'2 x = (inv'1 ( * x) /\ inv'1 ( ^ x))
  use prelude.Int32
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'1 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : Borrows_NonZero_Type.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  predicate invariant'0 (self : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)))
  let rec inv'0 (_x:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)) . inv'0 x
  = (let (a, b) = x in inv'1 a /\ inv'2 b)
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'3 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'3 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'2 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'1 (self:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  let rec partial_move (x:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:()))= {[#"../borrows.rs" 53 20 53 21] inv'0 x}
    {[#"../borrows.rs" 52 11 52 23] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * (let (_, a) = x in a))) <> - 1}
    {[#"../borrows.rs" 51 11 51 29] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * (let (_, a) = x in a)))
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] 
        (any [ any_ (_any:Borrows_NonZero_Type.t_nonzero)-> (!  [ &x <- let (_, l'2) = x in (_any, l'2) ] s1) ] )
      | s1 = Borrows_NonZero_Type.t_nonzero { * (let (_, r'2) = x in r'2)}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id (let (_, r'1) = x in r'1)) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_7 <- _ret' ] 
                Borrows_NonZero_Type.t_nonzero { * (let (_, l'3) = x in l'3)}
                  (fun (l_0'0:int32) ->
                    
                    [ &x <- let (l'4, _) = x in (l'4, { (let (_, l'3) = x in l'3) with current = (Borrows_NonZero_Type.C_NonZero ( ^ _7) : Borrows_NonZero_Type.t_nonzero) ; }) ]
                    
                    s2)))
      | s2 = Borrow.borrow_final <int32> { * _7} {Borrow.get_id _7}
          (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = ( ^ _6) ; } ] s3)
      | s3 = inc'0 {_6} (fun (_ret':()) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = Borrows_NonZero_Type.t_nonzero {a}
          (fun (l_0'0:int32) ->
            
            [ &a <- Borrows_NonZero_Type.C_NonZero ([#"../borrows.rs" 56 10 56 11] (0 : int32)) : Borrows_NonZero_Type.t_nonzero ]
            
            s4)
      | s4 =  [ &_0 <- [#"../borrows.rs" 53 48 57 1] () ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)) = x
    | & a : Borrows_NonZero_Type.t_nonzero = any_l () : Borrows_NonZero_Type.t_nonzero
    | & _5 : () = any_l () : ()
    | & _6 : borrowed int32 = any_l () : borrowed int32
    | & _7 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Destruct
  use prelude.Int32
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  predicate invariant'2 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'2 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'2 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Borrows_NonZero_Type.t_nonzero . inv'2 x
  = (invariant'2 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'1 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'1 x = (inv'2 ( * x) /\ inv'2 ( ^ x))
  predicate invariant'0 (self : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)))
  let rec inv'0 (_x:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)) . inv'0 x
  = (let (a, b) = x in inv'2 a /\ inv'1 b)
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  predicate resolve'3 (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'2 (let (_, a) = self in a)
  let rec resolve'0 (self:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec destruct (x:(Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero))) (return'  (ret:()))= {[#"../borrows.rs" 61 16 61 17] inv'0 x}
    {[#"../borrows.rs" 60 11 60 23] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * (let (_, a) = x in a))) <> - 1}
    {[#"../borrows.rs" 59 11 59 29] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * (let (_, a) = x in a)))
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] 
        (any [ any_ (_any:Borrows_NonZero_Type.t_nonzero)-> (!  [ &x <- let (_, l'2) = x in (_any, l'2) ] s1) ] )
      | s1 =  [ &b <- let (_, r'1) = x in r'1 ] 
        (any
        [ any_ (_any:borrowed (Borrows_NonZero_Type.t_nonzero))-> (!  [ &x <- let (l'4, _) = x in (l'4, _any) ] s2) ]
        )
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = Borrows_NonZero_Type.t_nonzero {a}
          (fun (l_0'0:int32) ->
            
            [ &a <- Borrows_NonZero_Type.C_NonZero ([#"../borrows.rs" 63 10 63 11] (0 : int32)) : Borrows_NonZero_Type.t_nonzero ]
            
            s5)
      | s5 = Borrows_NonZero_Type.t_nonzero { * b}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id b) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_8 <- _ret' ] 
                Borrows_NonZero_Type.t_nonzero { * b}
                  (fun (l_0'1:int32) ->
                    
                    [ &b <- { b with current = (Borrows_NonZero_Type.C_NonZero ( ^ _8) : Borrows_NonZero_Type.t_nonzero) ; } ]
                    
                    s6)))
      | s6 = Borrow.borrow_final <int32> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = ( ^ _7) ; } ] s7)
      | s7 = inc'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s8)
      | s8 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _8}- s1
      | s1 = {[@expl:type invariant] inv'1 b} s2
      | s2 = -{resolve'2 b}- s3
      | s3 =  [ &_0 <- [#"../borrows.rs" 61 44 65 1] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : (Borrows_NonZero_Type.t_nonzero, borrowed (Borrows_NonZero_Type.t_nonzero)) = x
    | & a : Borrows_NonZero_Type.t_nonzero = any_l () : Borrows_NonZero_Type.t_nonzero
    | & b : borrowed (Borrows_NonZero_Type.t_nonzero) = any_l () : borrowed (Borrows_NonZero_Type.t_nonzero)
    | & _6 : () = any_l () : ()
    | & _7 : borrowed int32 = any_l () : borrowed int32
    | & _8 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_FrozenDead
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Borrows_NonZero_Type.t_nonzero)
  let rec inv'0 (_x:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Borrows_NonZero_Type.t_nonzero))
  let rec inv'1 (_x:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Borrows_NonZero_Type.t_nonzero) . inv'1 x = (inv'0 ( * x) /\ inv'0 ( ^ x))
  use prelude.Int32
  predicate invariant'0 [#"../borrows.rs" 9 4 9 30] (self : Borrows_NonZero_Type.t_nonzero) =
    [#"../borrows.rs" 10 20 10 32] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  let rec invariant'0 (self:Borrows_NonZero_Type.t_nonzero) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Borrows_NonZero_Type.t_nonzero . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Borrows_NonZero_Type.C_NonZero a_0 -> true
    end)
  use prelude.Int32
  use prelude.Int
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (Borrows_NonZero_Type.t_nonzero)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec frozen_dead (x:borrowed (Borrows_NonZero_Type.t_nonzero)) (y:borrowed (Borrows_NonZero_Type.t_nonzero)) (return'  (ret:()))= {[#"../borrows.rs" 69 47 69 48] inv'1 y}
    {[#"../borrows.rs" 69 27 69 28] inv'1 x}
    {[#"../borrows.rs" 68 11 68 21] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * x)) <> - 1}
    {[#"../borrows.rs" 67 11 67 27] Int32.to_int (Borrows_NonZero_Type.nonzero_0 ( * x)) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrows_NonZero_Type.t_nonzero { * x}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_a <- _ret' ] 
                Borrows_NonZero_Type.t_nonzero { * x}
                  (fun (l_0'0:int32) ->
                    
                    [ &x <- { x with current = (Borrows_NonZero_Type.C_NonZero ( ^ _a) : Borrows_NonZero_Type.t_nonzero) ; } ]
                    
                    s1)))
      | s1 = Borrow.borrow_final <Borrows_NonZero_Type.t_nonzero> { * y} {Borrow.get_id y}
          (fun (_ret':borrowed (Borrows_NonZero_Type.t_nonzero)) ->
             [ &_6 <- _ret' ] 
             [ &y <- { y with current = ( ^ _6) ; } ] 
            s2)
      | s2 = -{inv'0 ( ^ _6)}- s3
      | s3 = {[@expl:type invariant] inv'1 x} s4
      | s4 = -{resolve'0 x}- s5
      | s5 =  [ &x <- _6 ] (any [ any_ (_any:borrowed (Borrows_NonZero_Type.t_nonzero))-> (!  [ &_6 <- _any ] s6) ] )
      | s6 = {[@expl:type invariant] inv'1 x} s7
      | s7 = -{resolve'0 x}- s8
      | s8 = Borrow.borrow_final <int32> { * _a} {Borrow.get_id _a}
          (fun (_ret':borrowed int32) ->  [ &_8 <- _ret' ]  [ &_a <- { _a with current = ( ^ _8) ; } ] s9)
      | s9 = inc'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s10)
      | s10 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _a}- s1
      | s1 =  [ &_0 <- [#"../borrows.rs" 69 67 76 1] () ] s2
      | s2 = {[@expl:type invariant] inv'1 y} s3
      | s3 = -{resolve'0 y}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : borrowed (Borrows_NonZero_Type.t_nonzero) = x
    | & y : borrowed (Borrows_NonZero_Type.t_nonzero) = y
    | & _a : borrowed int32 = any_l () : borrowed int32
    | & _6 : borrowed (Borrows_NonZero_Type.t_nonzero) = any_l () : borrowed (Borrows_NonZero_Type.t_nonzero)
    | & _7 : () = any_l () : ()
    | & _8 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_SumTo10_Type
  use prelude.Int32
  use prelude.Int
  type t_sumto10  =
    | C_SumTo10 int32 int32
    
  function any_l (_ : 'b) : 'a
  let rec t_sumto10 (input:t_sumto10) (ret  (a:int32) (b:int32))= any
    [ good (a:int32) (b:int32)-> {C_SumTo10 a b = input} (! ret {a} {b})
    | bad (a:int32) (b:int32)-> {C_SumTo10 a b <> input} {false} any ]
    
  function sumto10_a (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 a _ -> a
      end
  function sumto10_b (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 _ a -> a
      end
end
module Borrows_Dec
  use prelude.Int32
  use prelude.Int32
  use prelude.Int
  constant min'0 : int32 = (-2147483648 : int32)
  use prelude.Int
  use prelude.Borrow
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec dec (x:borrowed int32) (return'  (ret:()))= {[#"../borrows.rs" 105 11 105 25] shallow_model'0 x
    > Int32.to_int (min'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.sub { * x} {[#"../borrows.rs" 108 10 108 11] (1 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 =  [ &_0 <- [#"../borrows.rs" 107 24 109 1] () ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & x : borrowed int32 = x ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../borrows.rs" 106 10 106 25] Int32.to_int ( ^ x)
      = shallow_model'0 x - 1}
      (! return' {result}) ]
    
end
module Borrows_Impl3_Foo
  use prelude.Int
  use Borrows_SumTo10_Type as Borrows_SumTo10_Type
  use prelude.Int32
  predicate invariant'1 [#"../borrows.rs" 86 4 86 30] (self : Borrows_SumTo10_Type.t_sumto10) =
    [#"../borrows.rs" 87 20 87 43] Int32.to_int (Borrows_SumTo10_Type.sumto10_a self)
    + Int32.to_int (Borrows_SumTo10_Type.sumto10_b self)
    = 10
  let rec invariant'1 (self:Borrows_SumTo10_Type.t_sumto10) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Borrows_SumTo10_Type.t_sumto10)
  let rec inv'1 (_x:Borrows_SumTo10_Type.t_sumto10) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Borrows_SumTo10_Type.t_sumto10 . inv'1 x
  = (invariant'1 x
  /\ match x with
    | Borrows_SumTo10_Type.C_SumTo10 a b -> true
    end)
  use prelude.Borrow
  predicate invariant'0 (self : borrowed (Borrows_SumTo10_Type.t_sumto10)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:borrowed (Borrows_SumTo10_Type.t_sumto10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (Borrows_SumTo10_Type.t_sumto10))
  let rec inv'0 (_x:borrowed (Borrows_SumTo10_Type.t_sumto10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (Borrows_SumTo10_Type.t_sumto10) . inv'0 x = (inv'1 ( * x) /\ inv'1 ( ^ x))
  use prelude.Int32
  constant max'0 : int32 = (2147483647 : int32)
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (Borrows_SumTo10_Type.t_sumto10)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (Borrows_SumTo10_Type.t_sumto10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Int
  constant min'0 : int32 = (-2147483648 : int32)
  function shallow_model'0 (self : borrowed int32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 108 8 108 31] Int32.to_int ( * self)
  let rec shallow_model'0 (self:borrowed int32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec dec'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 105 11 105 25] shallow_model'0 x
    > Int32.to_int (min'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 106 10 106 25] Int32.to_int ( ^ x) = shallow_model'0 x - 1}
      (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [#"../borrows.rs" 99 11 99 25] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any
    [ return' (result:())-> {[#"../borrows.rs" 100 10 100 25] Int32.to_int ( ^ x) = shallow_model'0 x + 1}
      (! return' {result}) ]
    
  let rec foo (self:borrowed (Borrows_SumTo10_Type.t_sumto10)) (return'  (ret:()))= {[#"../borrows.rs" 93 20 93 24] inv'0 self}
    {[#"../borrows.rs" 92 15 92 34] Int32.to_int (Borrows_SumTo10_Type.sumto10_a ( * self))
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrows_SumTo10_Type.t_sumto10 { * self}
          (fun (ra'0:int32) (rb'0:int32) ->
            Borrow.borrow_final <int32> {ra'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_5 <- _ret' ] 
                Borrows_SumTo10_Type.t_sumto10 { * self}
                  (fun (l_a'0:int32) (l_b'0:int32) ->
                    
                    [ &self <- { self with current = (Borrows_SumTo10_Type.C_SumTo10 ( ^ _5) l_b'0 : Borrows_SumTo10_Type.t_sumto10) ; } ]
                    
                    s1)))
      | s1 = Borrow.borrow_final <int32> { * _5} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = ( ^ _4) ; } ] s2)
      | s2 = inc'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = Borrows_SumTo10_Type.t_sumto10 { * self}
          (fun (ra'0:int32) (rb'0:int32) ->
            Borrow.borrow_final <int32> {rb'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed int32) ->
                 [ &_8 <- _ret' ] 
                Borrows_SumTo10_Type.t_sumto10 { * self}
                  (fun (l_a'0:int32) (l_b'0:int32) ->
                    
                    [ &self <- { self with current = (Borrows_SumTo10_Type.C_SumTo10 l_a'0 ( ^ _8) : Borrows_SumTo10_Type.t_sumto10) ; } ]
                    
                    s2)))
      | s2 = Borrow.borrow_final <int32> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = ( ^ _7) ; } ] s3)
      | s3 = dec'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'1 self}- s3
      | s3 =  [ &_0 <- [#"../borrows.rs" 93 26 96 5] () ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & self : borrowed (Borrows_SumTo10_Type.t_sumto10) = self
    | & _3 : () = any_l () : ()
    | & _4 : borrowed int32 = any_l () : borrowed int32
    | & _5 : borrowed int32 = any_l () : borrowed int32
    | & _6 : () = any_l () : ()
    | & _7 : borrowed int32 = any_l () : borrowed int32
    | & _8 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Impl0
  
end
module Borrows_Impl2
  
end
