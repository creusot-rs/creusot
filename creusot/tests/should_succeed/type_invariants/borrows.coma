
module Borrows_NonZero_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_nonzero  =
    | C_NonZero int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonzero (input:t_nonzero) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_NonZero field_0 = input} (! ret {field_0})
    | bad (field_0:int32)-> {C_NonZero field_0 <> input} {false} any ]
    
  
  function nonzero_0 (self : t_nonzero) : int32 =
    match self with
      | C_NonZero a -> a
      end
end
module Borrows_Impl1_New
  let%span sborrows0 = "../borrows.rs" 15 15 15 22
  
  let%span sborrows1 = "../borrows.rs" 16 14 16 27
  
  let%span sborrows2 = "../borrows.rs" 17 26 17 30
  
  let%span span3 = "../borrows.rs" 10 20 10 32
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  use Borrows_NonZero_Type as NonZero'0
  
  predicate invariant'0 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span3] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  predicate inv'0 (_x : NonZero'0.t_nonzero)
  
  axiom inv'0 : forall x : NonZero'0.t_nonzero . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  let rec new (n:int32) (return'  (ret:NonZero'0.t_nonzero))= {[%#sborrows0] Int32.to_int n <> 0}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- NonZero'0.C_NonZero n ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : NonZero'0.t_nonzero = any_l () | & n : int32 = n ]
    
    [ return' (result:NonZero'0.t_nonzero)-> {[@expl:postcondition] [%#sborrows2] inv'0 result}
      {[@expl:postcondition] [%#sborrows1] Borrows_NonZero_Type.nonzero_0 result = n}
      (! return' {result}) ]
    
end
module Borrows_Impl1_InnerMut
  let%span sborrows0 = "../borrows.rs" 23 26 23 30
  
  let%span sborrows1 = "../borrows.rs" 21 14 21 38
  
  let%span sborrows2 = "../borrows.rs" 22 14 22 38
  
  let%span span3 = "../borrows.rs" 10 20 10 32
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  use Borrows_NonZero_Type as NonZero'0
  
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span3] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  predicate inv'1 (_x : NonZero'0.t_nonzero)
  
  axiom inv'1 : forall x : NonZero'0.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span4] true
  
  predicate inv'0 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'0 : forall x : borrowed (NonZero'0.t_nonzero) . inv'0 x = (inv'1 x.current /\ inv'1 x.final)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span5] self.final = self.current
  
  use prelude.prelude.Int32
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span5] self.final = self.current
  
  use prelude.prelude.Int
  
  let rec inner_mut (self:borrowed (NonZero'0.t_nonzero)) (return'  (ret:borrowed int32))= {[%#sborrows0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_nonzero {self.current}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_5 <- _ret' ] 
                NonZero'0.t_nonzero {self.current}
                  (fun (l_0'0:int32) ->  [ &self <- { self with current = NonZero'0.C_NonZero _5.final ; } ] s1)))
      | s1 = Borrow.borrow_final <int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = _2.final ; } ] s2)
      | s2 = Borrow.borrow_final <int32> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed int32) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s3)
      | s3 = -{resolve'0 _5}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = {[@expl:type invariant] inv'0 self} s6
      | s6 = -{resolve'1 self}- s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed int32 = any_l ()
    | & self : borrowed (NonZero'0.t_nonzero) = self
    | & _2 : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l () ]
    
    [ return' (result:borrowed int32)-> {[@expl:postcondition] [%#sborrows2] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self.final)
      = Int32.to_int result.final}
      {[@expl:postcondition] [%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self.current)
      = Int32.to_int result.current}
      (! return' {result}) ]
    
end
module Borrows_Inc
  let%span sborrows0 = "../borrows.rs" 102 10 102 11
  
  let%span sborrows1 = "../borrows.rs" 99 11 99 25
  
  let%span sborrows2 = "../borrows.rs" 100 10 100 25
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span3] (2147483647 : int32)
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span4] Int32.to_int self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span5] self.final = self.current
  
  let rec inc (x:borrowed int32) (return'  (ret:()))= {[%#sborrows1] shallow_model'0 x < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x.current} {[%#sborrows0] (1 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : borrowed int32 = x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sborrows2] Int32.to_int x.final = shallow_model'0 x + 1}
      (! return' {result}) ]
    
end
module Borrows_Simple
  let%span sborrows0 = "../borrows.rs" 29 11 29 27
  
  let%span sborrows1 = "../borrows.rs" 30 11 30 21
  
  let%span sborrows2 = "../borrows.rs" 31 14 31 15
  
  let%span span3 = "../borrows.rs" 10 20 10 32
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span8 = "../borrows.rs" 99 11 99 25
  
  let%span span9 = "../borrows.rs" 100 10 100 25
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  use Borrows_NonZero_Type as NonZero'0
  
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span3] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  predicate inv'1 (_x : NonZero'0.t_nonzero)
  
  axiom inv'1 : forall x : NonZero'0.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span4] true
  
  predicate inv'0 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'0 : forall x : borrowed (NonZero'0.t_nonzero) . inv'0 x = (inv'1 x.current /\ inv'1 x.final)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span5] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span6] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span6] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span7] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span8] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span9] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  let rec simple (x:borrowed (NonZero'0.t_nonzero)) (return'  (ret:()))= {[%#sborrows2] inv'0 x}
    {[%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 x.current) <> - 1}
    {[%#sborrows0] Int32.to_int (Borrows_NonZero_Type.nonzero_0 x.current) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_nonzero {x.current}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_6 <- _ret' ] 
                NonZero'0.t_nonzero {x.current}
                  (fun (l_0'0:int32) ->  [ &x <- { x with current = NonZero'0.C_NonZero _6.final ; } ] s1)))
      | s1 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _5.final ; } ] s2)
      | s2 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (NonZero'0.t_nonzero) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Hard
  let%span sborrows0 = "../borrows.rs" 36 11 36 27
  
  let%span sborrows1 = "../borrows.rs" 37 11 37 21
  
  let%span sborrows2 = "../borrows.rs" 38 12 38 13
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../borrows.rs" 10 20 10 32
  
  let%span span5 = "" 0 0 0 0
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span8 = "../borrows.rs" 99 11 99 25
  
  let%span span9 = "../borrows.rs" 100 10 100 25
  
  let%span span10 = "../borrows.rs" 23 26 23 30
  
  let%span span11 = "../borrows.rs" 21 14 21 38
  
  let%span span12 = "../borrows.rs" 22 14 22 38
  
  use Borrows_NonZero_Type as NonZero'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span3] true
  
  predicate inv'0 (_x : NonZero'0.t_nonzero)
  
  predicate inv'1 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'1 : forall x : borrowed (NonZero'0.t_nonzero) . inv'1 x = (inv'0 x.current /\ inv'0 x.final)
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  predicate invariant'0 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span4] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  axiom inv'0 : forall x : NonZero'0.t_nonzero . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span5] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span6] self.final = self.current
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span6] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span7] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span8] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span9] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  let rec inner_mut'0 (self:borrowed (NonZero'0.t_nonzero)) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span10] inv'1 self}
    any
    [ return' (result:borrowed int32)-> {[%#span12] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self.final)
      = Int32.to_int result.final}
      {[%#span11] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self.current) = Int32.to_int result.current}
      (! return' {result}) ]
    
  
  let rec hard (x:borrowed (NonZero'0.t_nonzero)) (return'  (ret:()))= {[%#sborrows2] inv'1 x}
    {[%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 x.current) <> - 1}
    {[%#sborrows0] Int32.to_int (Borrows_NonZero_Type.nonzero_0 x.current) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <NonZero'0.t_nonzero> {x.current} {Borrow.get_id x}
          (fun (_ret':borrowed (NonZero'0.t_nonzero)) ->
             [ &_7 <- _ret' ] 
             [ &x <- { x with current = _7.final ; } ] 
            s1)
      | s1 = -{inv'0 _7.final}- s2
      | s2 = inner_mut'0 {_7} (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _5.final ; } ] s1)
      | s1 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (NonZero'0.t_nonzero) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l ()
    | & _7 : borrowed (NonZero'0.t_nonzero) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Tuple
  let%span sborrows0 = "../borrows.rs" 46 13 46 14
  
  let%span sborrows1 = "../borrows.rs" 43 11 43 29
  
  let%span sborrows2 = "../borrows.rs" 44 11 44 23
  
  let%span sborrows3 = "../borrows.rs" 45 17 45 18
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../borrows.rs" 10 20 10 32
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span9 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span10 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span11 = "../borrows.rs" 99 11 99 25
  
  let%span span12 = "../borrows.rs" 100 10 100 25
  
  use Borrows_NonZero_Type as NonZero'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span4] true
  
  predicate inv'1 (_x : NonZero'0.t_nonzero)
  
  predicate inv'2 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'2 : forall x : borrowed (NonZero'0.t_nonzero) . inv'2 x = (inv'1 x.current /\ inv'1 x.final)
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span5] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  axiom inv'1 : forall x : NonZero'0.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  predicate invariant'0 (self : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) =
    [%#span4] true
  
  predicate inv'0 (_x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)))
  
  axiom inv'0 : forall x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)) . inv'0 x
  = (let (a, b) = x in inv'1 a /\ inv'2 b)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span6] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span7] self.final = self.current
  
  predicate resolve'2 (self : NonZero'0.t_nonzero) =
    [%#span8] true
  
  predicate resolve'1 (self : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) =
    [%#span9] resolve'2 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span7] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span10] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span11] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span12] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  let rec tuple (x:(NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) (return'  (ret:()))= {[%#sborrows3] inv'0 x}
    {[%#sborrows2] Int32.to_int (Borrows_NonZero_Type.nonzero_0 (let (_, a) = x in a).current) <> - 1}
    {[%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 (let (_, a) = x in a).current)
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_nonzero {let (l'0, _) = x in l'0}
          (fun (l_0'0:int32) ->
             [ &x <- let (_, l'2) = x in (NonZero'0.C_NonZero ([%#sborrows0] (0 : int32)), l'2) ] 
            s1)
      | s1 = NonZero'0.t_nonzero {(let (_, r'1) = x in r'1).current}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id (let (_, r'0) = x in r'0)) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_6 <- _ret' ] 
                NonZero'0.t_nonzero {(let (_, l'3) = x in l'3).current}
                  (fun (l_0'1:int32) ->
                    
                    [ &x <- let (l'4, _) = x in (l'4, { (let (_, l'3) = x in l'3) with current = NonZero'0.C_NonZero _6.final ; }) ]
                    
                    s2)))
      | s2 = Borrow.borrow_final <int32> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed int32) ->  [ &_5 <- _ret' ]  [ &_6 <- { _6 with current = _5.final ; } ] s3)
      | s3 = inc'0 {_5} (fun (_ret':()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _6}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)) = x
    | & _4 : () = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_PartialMove
  let%span sborrows0 = "../borrows.rs" 56 10 56 11
  
  let%span sborrows1 = "../borrows.rs" 51 11 51 29
  
  let%span sborrows2 = "../borrows.rs" 52 11 52 23
  
  let%span sborrows3 = "../borrows.rs" 53 20 53 21
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../borrows.rs" 10 20 10 32
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span9 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span10 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span11 = "../borrows.rs" 99 11 99 25
  
  let%span span12 = "../borrows.rs" 100 10 100 25
  
  use Borrows_NonZero_Type as NonZero'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span4] true
  
  predicate inv'1 (_x : NonZero'0.t_nonzero)
  
  predicate inv'2 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'2 : forall x : borrowed (NonZero'0.t_nonzero) . inv'2 x = (inv'1 x.current /\ inv'1 x.final)
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  predicate invariant'1 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span5] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  axiom inv'1 : forall x : NonZero'0.t_nonzero . inv'1 x
  = (invariant'1 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  predicate invariant'0 (self : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) =
    [%#span4] true
  
  predicate inv'0 (_x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)))
  
  axiom inv'0 : forall x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)) . inv'0 x
  = (let (a, b) = x in inv'1 a /\ inv'2 b)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span6] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span7] self.final = self.current
  
  predicate resolve'2 (self : NonZero'0.t_nonzero) =
    [%#span8] true
  
  predicate resolve'1 (self : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) =
    [%#span9] resolve'2 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span7] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span10] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span11] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span12] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  let rec partial_move (x:(NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) (return'  (ret:()))= {[%#sborrows3] inv'0 x}
    {[%#sborrows2] Int32.to_int (Borrows_NonZero_Type.nonzero_0 (let (_, a) = x in a).current) <> - 1}
    {[%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 (let (_, a) = x in a).current)
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] 
        (any [ any_ (_any:NonZero'0.t_nonzero)-> (!  [ &x <- let (_, l'2) = x in (_any, l'2) ] s1) ] )
      | s1 = NonZero'0.t_nonzero {(let (_, r'2) = x in r'2).current}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id (let (_, r'1) = x in r'1)) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_7 <- _ret' ] 
                NonZero'0.t_nonzero {(let (_, l'3) = x in l'3).current}
                  (fun (l_0'0:int32) ->
                    
                    [ &x <- let (l'4, _) = x in (l'4, { (let (_, l'3) = x in l'3) with current = NonZero'0.C_NonZero _7.final ; }) ]
                    
                    s2)))
      | s2 = Borrow.borrow_final <int32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed int32) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _6.final ; } ] s3)
      | s3 = inc'0 {_6} (fun (_ret':()) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = NonZero'0.t_nonzero {a}
          (fun (l_0'0:int32) ->  [ &a <- NonZero'0.C_NonZero ([%#sborrows0] (0 : int32)) ] s4)
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)) = x
    | & a : NonZero'0.t_nonzero = any_l ()
    | & _5 : () = any_l ()
    | & _6 : borrowed int32 = any_l ()
    | & _7 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Destruct
  let%span sborrows0 = "../borrows.rs" 63 10 63 11
  
  let%span sborrows1 = "../borrows.rs" 59 11 59 29
  
  let%span sborrows2 = "../borrows.rs" 60 11 60 23
  
  let%span sborrows3 = "../borrows.rs" 61 16 61 17
  
  let%span span4 = "../borrows.rs" 10 20 10 32
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span9 = "../borrows.rs" 99 11 99 25
  
  let%span span10 = "../borrows.rs" 100 10 100 25
  
  let%span span11 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span12 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  use Borrows_NonZero_Type as NonZero'0
  
  predicate invariant'2 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span4] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  predicate inv'2 (_x : NonZero'0.t_nonzero)
  
  axiom inv'2 : forall x : NonZero'0.t_nonzero . inv'2 x
  = (invariant'2 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span5] true
  
  predicate inv'1 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'1 : forall x : borrowed (NonZero'0.t_nonzero) . inv'1 x = (inv'2 x.current /\ inv'2 x.final)
  
  predicate invariant'0 (self : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) =
    [%#span5] true
  
  predicate inv'0 (_x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)))
  
  axiom inv'0 : forall x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)) . inv'0 x
  = (let (a, b) = x in inv'2 a /\ inv'1 b)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span6] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span7] self.final = self.current
  
  predicate resolve'1 (self : borrowed int32) =
    [%#span7] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span8] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span9] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span10] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'3 (self : NonZero'0.t_nonzero) =
    [%#span11] true
  
  predicate resolve'0 (self : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) =
    [%#span12] resolve'3 (let (a, _) = self in a) /\ resolve'2 (let (_, a) = self in a)
  
  let rec destruct (x:(NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero))) (return'  (ret:()))= {[%#sborrows3] inv'0 x}
    {[%#sborrows2] Int32.to_int (Borrows_NonZero_Type.nonzero_0 (let (_, a) = x in a).current) <> - 1}
    {[%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 (let (_, a) = x in a).current)
    < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- let (r'0, _) = x in r'0 ] 
        (any [ any_ (_any:NonZero'0.t_nonzero)-> (!  [ &x <- let (_, l'2) = x in (_any, l'2) ] s1) ] )
      | s1 =  [ &b <- let (_, r'1) = x in r'1 ] 
        (any [ any_ (_any:borrowed (NonZero'0.t_nonzero))-> (!  [ &x <- let (l'4, _) = x in (l'4, _any) ] s2) ] )
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = NonZero'0.t_nonzero {a}
          (fun (l_0'0:int32) ->  [ &a <- NonZero'0.C_NonZero ([%#sborrows0] (0 : int32)) ] s5)
      | s5 = NonZero'0.t_nonzero {b.current}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id b) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_8 <- _ret' ] 
                NonZero'0.t_nonzero {b.current}
                  (fun (l_0'1:int32) ->  [ &b <- { b with current = NonZero'0.C_NonZero _8.final ; } ] s6)))
      | s6 = Borrow.borrow_final <int32> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _7.final ; } ] s7)
      | s7 = inc'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s8)
      | s8 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _8}- s1
      | s1 = {[@expl:type invariant] inv'1 b} s2
      | s2 = -{resolve'2 b}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : (NonZero'0.t_nonzero, borrowed (NonZero'0.t_nonzero)) = x
    | & a : NonZero'0.t_nonzero = any_l ()
    | & b : borrowed (NonZero'0.t_nonzero) = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _8 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_FrozenDead
  let%span sborrows0 = "../borrows.rs" 67 11 67 27
  
  let%span sborrows1 = "../borrows.rs" 68 11 68 21
  
  let%span sborrows2 = "../borrows.rs" 69 27 69 28
  
  let%span sborrows3 = "../borrows.rs" 69 47 69 48
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../borrows.rs" 10 20 10 32
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span9 = "../borrows.rs" 99 11 99 25
  
  let%span span10 = "../borrows.rs" 100 10 100 25
  
  use Borrows_NonZero_Type as NonZero'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span4] true
  
  predicate inv'0 (_x : NonZero'0.t_nonzero)
  
  predicate inv'1 (_x : borrowed (NonZero'0.t_nonzero))
  
  axiom inv'1 : forall x : borrowed (NonZero'0.t_nonzero) . inv'1 x = (inv'0 x.current /\ inv'0 x.final)
  
  use prelude.prelude.Int32
  
  use Borrows_NonZero_Type as Borrows_NonZero_Type
  
  predicate invariant'0 [#"../borrows.rs" 9 4 9 30] (self : NonZero'0.t_nonzero) =
    [%#span5] Int32.to_int (Borrows_NonZero_Type.nonzero_0 self) <> 0
  
  axiom inv'0 : forall x : NonZero'0.t_nonzero . inv'0 x
  = (invariant'0 x
  /\ match x with
    | NonZero'0.C_NonZero a_0 -> true
    end)
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant max'0 : int32 = [%#span6] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed int32) =
    [%#span7] self.final = self.current
  
  use prelude.prelude.Int
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span8] Int32.to_int self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span9] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span10] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  predicate resolve'0 (self : borrowed (NonZero'0.t_nonzero)) =
    [%#span7] self.final = self.current
  
  let rec frozen_dead (x:borrowed (NonZero'0.t_nonzero)) (y:borrowed (NonZero'0.t_nonzero)) (return'  (ret:()))= {[%#sborrows3] inv'1 y}
    {[%#sborrows2] inv'1 x}
    {[%#sborrows1] Int32.to_int (Borrows_NonZero_Type.nonzero_0 x.current) <> - 1}
    {[%#sborrows0] Int32.to_int (Borrows_NonZero_Type.nonzero_0 x.current) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = NonZero'0.t_nonzero {x.current}
          (fun (r0'0:int32) ->
            Borrow.borrow_final <int32> {r0'0} {Borrow.inherit_id (Borrow.get_id x) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_a <- _ret' ] 
                NonZero'0.t_nonzero {x.current}
                  (fun (l_0'0:int32) ->  [ &x <- { x with current = NonZero'0.C_NonZero _a.final ; } ] s1)))
      | s1 = Borrow.borrow_final <NonZero'0.t_nonzero> {y.current} {Borrow.get_id y}
          (fun (_ret':borrowed (NonZero'0.t_nonzero)) ->
             [ &_6 <- _ret' ] 
             [ &y <- { y with current = _6.final ; } ] 
            s2)
      | s2 = -{inv'0 _6.final}- s3
      | s3 = {[@expl:type invariant] inv'1 x} s4
      | s4 = -{resolve'0 x}- s5
      | s5 =  [ &x <- _6 ] (any [ any_ (_any:borrowed (NonZero'0.t_nonzero))-> (!  [ &_6 <- _any ] s6) ] )
      | s6 = {[@expl:type invariant] inv'1 x} s7
      | s7 = -{resolve'0 x}- s8
      | s8 = Borrow.borrow_final <int32> {_a.current} {Borrow.get_id _a}
          (fun (_ret':borrowed int32) ->  [ &_8 <- _ret' ]  [ &_a <- { _a with current = _8.final ; } ] s9)
      | s9 = inc'0 {_8} (fun (_ret':()) ->  [ &_7 <- _ret' ] s10)
      | s10 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'1 _a}- s1
      | s1 = {[@expl:type invariant] inv'1 y} s2
      | s2 = -{resolve'0 y}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : borrowed (NonZero'0.t_nonzero) = x
    | & y : borrowed (NonZero'0.t_nonzero) = y
    | & _a : borrowed int32 = any_l ()
    | & _6 : borrowed (NonZero'0.t_nonzero) = any_l ()
    | & _7 : () = any_l ()
    | & _8 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_SumTo10_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_sumto10  =
    | C_SumTo10 int32 int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_sumto10 (input:t_sumto10) (ret  (a:int32) (b:int32))= any
    [ good (a:int32) (b:int32)-> {C_SumTo10 a b = input} (! ret {a} {b})
    | bad (a:int32) (b:int32)-> {C_SumTo10 a b <> input} {false} any ]
    
  
  function sumto10_a (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 a _ -> a
      end
  
  function sumto10_b (self : t_sumto10) : int32 =
    match self with
      | C_SumTo10 _ a -> a
      end
end
module Borrows_Dec
  let%span sborrows0 = "../borrows.rs" 108 10 108 11
  
  let%span sborrows1 = "../borrows.rs" 105 11 105 25
  
  let%span sborrows2 = "../borrows.rs" 106 10 106 25
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  constant min'0 : int32 = [%#span3] (-2147483648 : int32)
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span4] Int32.to_int self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span5] self.final = self.current
  
  let rec dec (x:borrowed int32) (return'  (ret:()))= {[%#sborrows1] shallow_model'0 x > Int32.to_int (min'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.sub {x.current} {[%#sborrows0] (1 : int32)}
          (fun (_ret':int32) ->  [ &x <- { x with current = _ret' ; } ] s1)
      | s1 = -{resolve'0 x}- s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : borrowed int32 = x ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sborrows2] Int32.to_int x.final = shallow_model'0 x - 1}
      (! return' {result}) ]
    
end
module Borrows_Impl3_Foo
  let%span sborrows0 = "../borrows.rs" 92 15 92 34
  
  let%span sborrows1 = "../borrows.rs" 93 20 93 24
  
  let%span span2 = "../borrows.rs" 87 20 87 43
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span8 = "../borrows.rs" 105 11 105 25
  
  let%span span9 = "../borrows.rs" 106 10 106 25
  
  let%span span10 = "../borrows.rs" 99 11 99 25
  
  let%span span11 = "../borrows.rs" 100 10 100 25
  
  use prelude.prelude.Int
  
  use Borrows_SumTo10_Type as Borrows_SumTo10_Type
  
  use prelude.prelude.Int32
  
  use Borrows_SumTo10_Type as SumTo10'0
  
  predicate invariant'1 [#"../borrows.rs" 86 4 86 30] (self : SumTo10'0.t_sumto10) =
    [%#span2] Int32.to_int (Borrows_SumTo10_Type.sumto10_a self) + Int32.to_int (Borrows_SumTo10_Type.sumto10_b self)
    = 10
  
  predicate inv'1 (_x : SumTo10'0.t_sumto10)
  
  axiom inv'1 : forall x : SumTo10'0.t_sumto10 . inv'1 x
  = (invariant'1 x
  /\ match x with
    | SumTo10'0.C_SumTo10 a b -> true
    end)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (SumTo10'0.t_sumto10)) =
    [%#span3] true
  
  predicate inv'0 (_x : borrowed (SumTo10'0.t_sumto10))
  
  axiom inv'0 : forall x : borrowed (SumTo10'0.t_sumto10) . inv'0 x = (inv'1 x.current /\ inv'1 x.final)
  
  use prelude.prelude.Int32
  
  constant max'0 : int32 = [%#span4] (2147483647 : int32)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (SumTo10'0.t_sumto10)) =
    [%#span5] self.final = self.current
  
  use prelude.prelude.Int
  
  constant min'0 : int32 = [%#span6] (-2147483648 : int32)
  
  function shallow_model'0 (self : borrowed int32) : int =
    [%#span7] Int32.to_int self.current
  
  let rec dec'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span8] shallow_model'0 x
    > Int32.to_int (min'0 : int32)}
    any [ return' (result:())-> {[%#span9] Int32.to_int x.final = shallow_model'0 x - 1} (! return' {result}) ] 
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span5] self.final = self.current
  
  let rec inc'0 (x:borrowed int32) (return'  (ret:()))= {[@expl:precondition] [%#span10] shallow_model'0 x
    < Int32.to_int (max'0 : int32)}
    any [ return' (result:())-> {[%#span11] Int32.to_int x.final = shallow_model'0 x + 1} (! return' {result}) ] 
  
  let rec foo (self:borrowed (SumTo10'0.t_sumto10)) (return'  (ret:()))= {[%#sborrows1] inv'0 self}
    {[%#sborrows0] Int32.to_int (Borrows_SumTo10_Type.sumto10_a self.current) < Int32.to_int (max'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = SumTo10'0.t_sumto10 {self.current}
          (fun (ra'0:int32) (rb'0:int32) ->
            Borrow.borrow_final <int32> {ra'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed int32) ->
                 [ &_5 <- _ret' ] 
                SumTo10'0.t_sumto10 {self.current}
                  (fun (l_a'0:int32) (l_b'0:int32) ->
                     [ &self <- { self with current = SumTo10'0.C_SumTo10 _5.final l_b'0 ; } ] 
                    s1)))
      | s1 = Borrow.borrow_final <int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed int32) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _4.final ; } ] s2)
      | s2 = inc'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = SumTo10'0.t_sumto10 {self.current}
          (fun (ra'0:int32) (rb'0:int32) ->
            Borrow.borrow_final <int32> {rb'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed int32) ->
                 [ &_8 <- _ret' ] 
                SumTo10'0.t_sumto10 {self.current}
                  (fun (l_a'0:int32) (l_b'0:int32) ->
                     [ &self <- { self with current = SumTo10'0.C_SumTo10 l_a'0 _8.final ; } ] 
                    s2)))
      | s2 = Borrow.borrow_final <int32> {_8.current} {Borrow.get_id _8}
          (fun (_ret':borrowed int32) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _7.final ; } ] s3)
      | s3 = dec'0 {_7} (fun (_ret':()) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'1 self}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (SumTo10'0.t_sumto10) = self
    | & _3 : () = any_l ()
    | & _4 : borrowed int32 = any_l ()
    | & _5 : borrowed int32 = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed int32 = any_l ()
    | & _8 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Borrows_Impl0
  
end
module Borrows_Impl2
  
end
