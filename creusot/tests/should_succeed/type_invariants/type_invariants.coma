
module TypeInvariants_WithInvariant_Type
  type t_withinvariant  =
    | C_WithInvariant
  
  function any_l (_ : 'b) : 'a
  
  let rec t_withinvariant (input:t_withinvariant) (ret  )= any
    [ good -> {C_WithInvariant  = input} (! ret) | bad -> {C_WithInvariant  <> input} {false} any ]
    
end
module TypeInvariants_Id
  let%span stype_invariants0 = "../type_invariants.rs" 14 10 14 11
  
  let%span stype_invariants1 = "../type_invariants.rs" 14 31 14 44
  
  let%span span2 = "../type_invariants.rs" 10 8 10 12
  
  use TypeInvariants_WithInvariant_Type as WithInvariant'0
  
  predicate invariant'0 [#"../type_invariants.rs" 9 4 9 30] (self : WithInvariant'0.t_withinvariant) =
    [%#span2] true
  
  predicate inv'0 (_x : WithInvariant'0.t_withinvariant)
  
  axiom inv'0 : forall x : WithInvariant'0.t_withinvariant . inv'0 x
  = (invariant'0 x
  /\ match x with
    | WithInvariant'0.C_WithInvariant -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  let rec id (x:WithInvariant'0.t_withinvariant) (return'  (ret:WithInvariant'0.t_withinvariant))= {[%#stype_invariants0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- x ] (any [ any_ (_any:WithInvariant'0.t_withinvariant)-> (!  [ &x <- _any ] s1) ] )
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : WithInvariant'0.t_withinvariant = any_l () | & x : WithInvariant'0.t_withinvariant = x ] 
    [ return' (result:WithInvariant'0.t_withinvariant)-> {[@expl:postcondition] [%#stype_invariants1] inv'0 result}
      (! return' {result}) ]
    
end
module TypeInvariants_Impl0
  
end
