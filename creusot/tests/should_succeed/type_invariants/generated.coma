
module T_generated__Sum10
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_Sum10  =
    | C_Sum10 int32 int32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Sum10 (input:t_Sum10) (ret  (field_0:int32) (field_1:int32))= any
    [ good (field_0:int32) (field_1:int32)-> {C_Sum10 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:int32) (field_1:int32)-> {C_Sum10 field_0 field_1 <> input} {false} any ]
    
  
  function t_Sum10__0 (self : t_Sum10) : int32 =
    match self with
      | C_Sum10 a _ -> a
      end
  
  function t_Sum10__1 (self : t_Sum10) : int32 =
    match self with
      | C_Sum10 _ a -> a
      end
end
module T_generated__Foo
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_generated__Sum10 as Sum10'0
  
  use prelude.prelude.Borrow
  
  type t_Foo 't =
    | C_A (borrowed (Sum10'0.t_Sum10)) usize
    | C_B 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_A < 't > (input:t_Foo 't) (ret  (f1:borrowed (Sum10'0.t_Sum10)) (f2:usize))= any
    [ good (f1:borrowed (Sum10'0.t_Sum10)) (f2:usize)-> {C_A f1 f2 = input} (! ret {f1} {f2})
    | bad (f1:borrowed (Sum10'0.t_Sum10)) (f2:usize)-> {C_A f1 f2 <> input} {false} any ]
    
  
  let rec v_B < 't > (input:t_Foo 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_B field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_B field_0 <> input} {false} any ]
    
end
module M_generated__use_foo
  let%span sgenerated0 = "../generated.rs" 20 18 20 35
  
  let%span sgenerated1 = "../generated.rs" 19 19 19 20
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../generated.rs" 10 20 10 43
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  use prelude.prelude.UInt32
  
  predicate invariant'5 (self : uint32) =
    [%#span2] true
  
  predicate inv'5 (_1 : uint32)
  
  axiom inv'5 : forall x : uint32 . inv'5 x = true
  
  use prelude.prelude.Int
  
  use T_generated__Sum10 as T_generated__Sum10
  
  use prelude.prelude.Int32
  
  use T_generated__Sum10 as Sum10'0
  
  predicate invariant'4 [#"../generated.rs" 9 4 9 30] (self : Sum10'0.t_Sum10) =
    [%#span3] Int32.to_int (T_generated__Sum10.t_Sum10__0 self) + Int32.to_int (T_generated__Sum10.t_Sum10__1 self) = 10
  
  predicate inv'4 (_1 : Sum10'0.t_Sum10)
  
  axiom inv'4 : forall x : Sum10'0.t_Sum10 . inv'4 x
  = (invariant'4 x
  /\ match x with
    | Sum10'0.C_Sum10 a_0 a_1 -> true
    end)
  
  use prelude.prelude.Borrow
  
  use T_generated__Foo as Foo'0
  
  predicate invariant'3 (self : Foo'0.t_Foo uint32) =
    [%#span2] true
  
  predicate inv'1 (_1 : borrowed (Sum10'0.t_Sum10))
  
  predicate inv'3 (_1 : Foo'0.t_Foo uint32)
  
  axiom inv'3 : forall x : Foo'0.t_Foo uint32 . inv'3 x
  = match x with
    | Foo'0.C_A f1 f2 -> inv'1 f1
    | Foo'0.C_B a_0 -> true
    end
  
  predicate invariant'2 (self : (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10))) =
    [%#span2] true
  
  predicate inv'2 (_1 : (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10)))
  
  axiom inv'2 : forall x : (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10)) . inv'2 x
  = (let (a, b) = x in inv'3 a /\ inv'1 b)
  
  predicate invariant'1 (self : borrowed (Sum10'0.t_Sum10)) =
    [%#span4] inv'4 self.current /\ inv'4 self.final
  
  axiom inv'1 : forall x : borrowed (Sum10'0.t_Sum10) . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : Foo'0.t_Foo (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10))) =
    [%#span2] true
  
  predicate inv'0 (_1 : Foo'0.t_Foo (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10)))
  
  axiom inv'0 : forall x : Foo'0.t_Foo (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10)) . inv'0 x
  = match x with
    | Foo'0.C_A f1 f2 -> inv'1 f1
    | Foo'0.C_B a_0 -> inv'2 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  let rec use_foo (x:Foo'0.t_Foo (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10))) (return'  (ret:()))= {[%#sgenerated1] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 x} s1
      | s1 = {[@expl:assertion] [%#sgenerated0] inv'0 x} s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : Foo'0.t_Foo (Foo'0.t_Foo uint32, borrowed (Sum10'0.t_Sum10)) = x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_generated__qy123zimplqy35z0qy125z
  
end
