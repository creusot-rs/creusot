
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Result_TestResult
  let%span sresult0 = "../result.rs" 4 38 4 39
  
  let%span sresult1 = "../result.rs" 5 40 5 42
  
  let%span sresult2 = "../result.rs" 13 32 13 33
  
  let%span sresult3 = "../result.rs" 17 34 17 36
  
  let%span sresult4 = "../result.rs" 20 37 20 38
  
  let%span sresult5 = "../result.rs" 21 42 21 44
  
  let%span sresult6 = "../result.rs" 23 28 23 29
  
  let%span sresult7 = "../result.rs" 24 27 24 28
  
  let%span sresult8 = "../result.rs" 25 28 25 29
  
  let%span sresult9 = "../result.rs" 26 27 26 28
  
  let%span sresult10 = "../result.rs" 27 33 27 34
  
  let%span sresult11 = "../result.rs" 28 32 28 33
  
  let%span sresult12 = "../result.rs" 29 33 29 35
  
  let%span sresult13 = "../result.rs" 30 32 30 34
  
  let%span sresult14 = "../result.rs" 33 27 33 28
  
  let%span sresult15 = "../result.rs" 37 32 37 34
  
  let%span sresult16 = "../result.rs" 40 25 40 26
  
  let%span sresult17 = "../result.rs" 40 31 40 32
  
  let%span sresult18 = "../result.rs" 41 26 41 27
  
  let%span sresult19 = "../result.rs" 41 32 41 33
  
  let%span sresult20 = "../result.rs" 43 38 43 39
  
  let%span sresult21 = "../result.rs" 44 39 44 40
  
  let%span sresult22 = "../result.rs" 47 30 47 32
  
  let%span sresult23 = "../result.rs" 47 51 47 53
  
  let%span sresult24 = "../result.rs" 48 22 48 23
  
  let%span sresult25 = "../result.rs" 48 38 48 39
  
  let%span sresult26 = "../result.rs" 49 31 49 33
  
  let%span sresult27 = "../result.rs" 49 52 49 54
  
  let%span sresult28 = "../result.rs" 50 23 50 24
  
  let%span sresult29 = "../result.rs" 50 43 50 45
  
  let%span sresult30 = "../result.rs" 53 22 53 24
  
  let%span sresult31 = "../result.rs" 53 39 53 40
  
  let%span sresult32 = "../result.rs" 54 28 54 29
  
  let%span sresult33 = "../result.rs" 54 44 54 45
  
  let%span sresult34 = "../result.rs" 55 23 55 25
  
  let%span sresult35 = "../result.rs" 55 44 55 46
  
  let%span sresult36 = "../result.rs" 56 29 56 30
  
  let%span sresult37 = "../result.rs" 56 45 56 46
  
  let%span sresult38 = "../result.rs" 59 45 59 46
  
  let%span sresult39 = "../result.rs" 60 51 60 53
  
  let%span sresult40 = "../result.rs" 61 45 61 46
  
  let%span sresult41 = "../result.rs" 62 51 62 53
  
  let%span sresult42 = "../result.rs" 64 45 64 46
  
  let%span sresult43 = "../result.rs" 65 51 65 53
  
  let%span sresult44 = "../result.rs" 66 45 66 46
  
  let%span sresult45 = "../result.rs" 67 51 67 53
  
  let%span sresult46 = "../result.rs" 72 48 72 49
  
  let%span sresult47 = "../result.rs" 73 49 73 50
  
  let%span sresult48 = "../result.rs" 74 44 74 46
  
  let%span sresult49 = "../result.rs" 75 53 75 55
  
  let%span sresult50 = "../result.rs" 75 4 75 56
  
  let%span sresult51 = "../result.rs" 73 4 73 51
  
  let%span sresult52 = "../result.rs" 71 4 71 38
  
  let%span sresult53 = "../result.rs" 67 4 67 54
  
  let%span sresult54 = "../result.rs" 66 4 66 47
  
  let%span sresult55 = "../result.rs" 65 4 65 54
  
  let%span sresult56 = "../result.rs" 64 4 64 47
  
  let%span sresult57 = "../result.rs" 62 4 62 54
  
  let%span sresult58 = "../result.rs" 61 4 61 47
  
  let%span sresult59 = "../result.rs" 60 4 60 54
  
  let%span sresult60 = "../result.rs" 59 4 59 47
  
  let%span sresult61 = "../result.rs" 56 4 56 47
  
  let%span sresult62 = "../result.rs" 55 4 55 47
  
  let%span sresult63 = "../result.rs" 54 4 54 46
  
  let%span sresult64 = "../result.rs" 53 4 53 41
  
  let%span sresult65 = "../result.rs" 50 4 50 46
  
  let%span sresult66 = "../result.rs" 49 4 49 55
  
  let%span sresult67 = "../result.rs" 48 4 48 40
  
  let%span sresult68 = "../result.rs" 47 4 47 54
  
  let%span sresult69 = "../result.rs" 44 4 44 41
  
  let%span sresult70 = "../result.rs" 43 4 43 40
  
  let%span sresult71 = "../result.rs" 41 4 41 34
  
  let%span sresult72 = "../result.rs" 40 4 40 33
  
  let%span sresult73 = "../result.rs" 37 4 37 35
  
  let%span sresult74 = "../result.rs" 33 4 33 29
  
  let%span sresult75 = "../result.rs" 30 4 30 35
  
  let%span sresult76 = "../result.rs" 28 4 28 34
  
  let%span sresult77 = "../result.rs" 26 4 26 29
  
  let%span sresult78 = "../result.rs" 24 4 24 29
  
  let%span sresult79 = "../result.rs" 21 4 21 45
  
  let%span sresult80 = "../result.rs" 20 4 20 39
  
  let%span sresult81 = "../result.rs" 17 4 17 37
  
  let%span sresult82 = "../result.rs" 16 4 16 31
  
  let%span sresult83 = "../result.rs" 14 4 14 31
  
  let%span sresult84 = "../result.rs" 13 4 13 34
  
  let%span sresult85 = "../result.rs" 10 4 10 41
  
  let%span sresult86 = "../result.rs" 8 4 8 39
  
  let%span span87 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span88 = "../../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span89 = "" 0 0 0 0
  
  let%span span90 = "" 0 0 0 0
  
  let%span span91 = "" 0 0 0 0
  
  let%span span92 = "../../../../../creusot-contracts/src/std/option.rs" 39 26 39 51
  
  let%span span93 = "" 0 0 0 0
  
  let%span span94 = "../../../../../creusot-contracts/src/std/result.rs" 128 16 128 63
  
  let%span span95 = "../../../../../creusot-contracts/src/std/result.rs" 129 16 129 86
  
  let%span span96 = "../../../../../creusot-contracts/src/std/result.rs" 130 16 130 82
  
  let%span span97 = "" 0 0 0 0
  
  let%span span98 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span99 = "" 0 0 0 0
  
  let%span span100 = "../../../../../creusot-contracts/src/std/result.rs" 119 16 119 95
  
  let%span span101 = "../../../../../creusot-contracts/src/std/result.rs" 120 16 120 76
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "" 0 0 0 0
  
  let%span span104 = "../../../../../creusot-contracts/src/std/result.rs" 104 16 104 76
  
  let%span span105 = "../../../../../creusot-contracts/src/std/result.rs" 105 16 105 76
  
  let%span span106 = "" 0 0 0 0
  
  let%span span107 = "../../../../../creusot-contracts/src/std/result.rs" 67 16 67 56
  
  let%span span108 = "" 0 0 0 0
  
  let%span span109 = "../../../../../creusot-contracts/src/std/result.rs" 18 0 135 1
  
  let%span span110 = "" 0 0 0 0
  
  let%span span111 = "../../../../../creusot-contracts/src/std/result.rs" 53 16 53 55
  
  let%span span112 = "" 0 0 0 0
  
  let%span span113 = "" 0 0 0 0
  
  let%span span114 = "" 0 0 0 0
  
  let%span span115 = "../../../../../creusot-contracts/src/std/result.rs" 113 16 113 95
  
  let%span span116 = "../../../../../creusot-contracts/src/std/result.rs" 114 16 114 76
  
  let%span span117 = "" 0 0 0 0
  
  let%span span118 = "" 0 0 0 0
  
  let%span span119 = "../../../../../creusot-contracts/src/std/result.rs" 98 16 98 76
  
  let%span span120 = "../../../../../creusot-contracts/src/std/result.rs" 99 16 99 76
  
  let%span span121 = "" 0 0 0 0
  
  let%span span122 = "" 0 0 0 0
  
  let%span span123 = "" 0 0 0 0
  
  let%span span124 = "../../../../../creusot-contracts/src/std/result.rs" 91 16 91 74
  
  let%span span125 = "../../../../../creusot-contracts/src/std/result.rs" 92 16 92 75
  
  let%span span126 = "" 0 0 0 0
  
  let%span span127 = "" 0 0 0 0
  
  let%span span128 = "" 0 0 0 0
  
  let%span span129 = "../../../../../creusot-contracts/src/std/result.rs" 86 16 86 74
  
  let%span span130 = "../../../../../creusot-contracts/src/std/result.rs" 87 16 87 76
  
  let%span span131 = "" 0 0 0 0
  
  let%span span132 = "../../../../../creusot-contracts/src/std/num.rs" 30 28 30 32
  
  let%span span133 = "" 0 0 0 0
  
  let%span span134 = "../../../../../creusot-contracts/src/std/result.rs" 79 16 79 70
  
  let%span span135 = "../../../../../creusot-contracts/src/std/result.rs" 80 16 80 81
  
  let%span span136 = "" 0 0 0 0
  
  let%span span137 = "" 0 0 0 0
  
  let%span span138 = "" 0 0 0 0
  
  let%span span139 = "../../../../../creusot-contracts/src/std/result.rs" 74 16 74 70
  
  let%span span140 = "../../../../../creusot-contracts/src/std/result.rs" 75 16 75 79
  
  let%span span141 = "" 0 0 0 0
  
  let%span span142 = "" 0 0 0 0
  
  let%span span143 = "../../../../../creusot-contracts/src/std/result.rs" 46 16 49 18
  
  let%span span144 = "" 0 0 0 0
  
  let%span span145 = "" 0 0 0 0
  
  let%span span146 = "../../../../../creusot-contracts/src/std/result.rs" 41 16 41 77
  
  let%span span147 = "../../../../../creusot-contracts/src/std/result.rs" 42 16 42 79
  
  let%span span148 = "" 0 0 0 0
  
  let%span span149 = "" 0 0 0 0
  
  let%span span150 = "../../../../../creusot-contracts/src/std/result.rs" 36 16 36 75
  
  let%span span151 = "../../../../../creusot-contracts/src/std/result.rs" 37 16 37 77
  
  let%span span152 = "" 0 0 0 0
  
  let%span span153 = "" 0 0 0 0
  
  let%span span154 = "../../../../../creusot-contracts/src/std/result.rs" 31 16 31 76
  
  let%span span155 = "../../../../../creusot-contracts/src/std/result.rs" 32 16 32 76
  
  let%span span156 = "" 0 0 0 0
  
  let%span span157 = "" 0 0 0 0
  
  let%span span158 = "../../../../../creusot-contracts/src/std/result.rs" 27 26 27 64
  
  let%span span159 = "" 0 0 0 0
  
  let%span span160 = "../../../../../creusot-contracts/src/std/result.rs" 23 26 23 63
  
  use prelude.prelude.Int32
  
  use Core_Result_Result_Type as Result'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'14 (self : Option'0.t_option (Result'0.t_result int32 int32)) =
    [%#span87] true
  
  predicate inv'14 (_x : Option'0.t_option (Result'0.t_result int32 int32))
  
  axiom inv'14 : forall x : Option'0.t_option (Result'0.t_result int32 int32) . inv'14 x = true
  
  predicate invariant'13 (self : Option'0.t_option (Result'0.t_result int32 int32)) =
    [%#span87] true
  
  predicate inv'13 (_x : Option'0.t_option (Result'0.t_result int32 int32))
  
  axiom inv'13 : forall x : Option'0.t_option (Result'0.t_result int32 int32) . inv'13 x = true
  
  predicate invariant'12 (self : Result'0.t_result (Option'0.t_option int32) int32) =
    [%#span87] true
  
  predicate inv'12 (_x : Result'0.t_result (Option'0.t_option int32) int32)
  
  axiom inv'12 : forall x : Result'0.t_result (Option'0.t_option int32) int32 . inv'12 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'11 (self : Result'0.t_result int32 (borrowed int32)) =
    [%#span87] true
  
  predicate inv'11 (_x : Result'0.t_result int32 (borrowed int32))
  
  axiom inv'11 : forall x : Result'0.t_result int32 (borrowed int32) . inv'11 x = true
  
  predicate invariant'10 (self : Result'0.t_result int32 int32) =
    [%#span87] true
  
  predicate inv'10 (_x : Result'0.t_result int32 int32)
  
  axiom inv'10 : forall x : Result'0.t_result int32 int32 . inv'10 x = true
  
  predicate invariant'9 (self : Result'0.t_result (borrowed int32) (borrowed int32)) =
    [%#span87] true
  
  predicate inv'9 (_x : Result'0.t_result (borrowed int32) (borrowed int32))
  
  axiom inv'9 : forall x : Result'0.t_result (borrowed int32) (borrowed int32) . inv'9 x = true
  
  predicate invariant'8 (self : borrowed int32) =
    [%#span87] true
  
  predicate inv'8 (_x : borrowed int32)
  
  axiom inv'8 : forall x : borrowed int32 . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Result'0.t_result int32 int32)) =
    [%#span87] true
  
  predicate inv'7 (_x : borrowed (Result'0.t_result int32 int32))
  
  axiom inv'7 : forall x : borrowed (Result'0.t_result int32 int32) . inv'7 x = true
  
  predicate invariant'6 (self : Result'0.t_result int32 int32) =
    [%#span87] true
  
  predicate inv'6 (_x : Result'0.t_result int32 int32)
  
  axiom inv'6 : forall x : Result'0.t_result int32 int32 . inv'6 x = true
  
  predicate invariant'5 (self : int32) =
    [%#span87] true
  
  predicate inv'5 (_x : int32)
  
  axiom inv'5 : forall x : int32 . inv'5 x = true
  
  predicate invariant'4 (self : Option'0.t_option int32) =
    [%#span87] true
  
  predicate inv'4 (_x : Option'0.t_option int32)
  
  axiom inv'4 : forall x : Option'0.t_option int32 . inv'4 x = true
  
  predicate invariant'3 (self : Option'0.t_option int32) =
    [%#span87] true
  
  predicate inv'3 (_x : Option'0.t_option int32)
  
  axiom inv'3 : forall x : Option'0.t_option int32 . inv'3 x = true
  
  predicate invariant'2 (self : Result'0.t_result int32 int32) =
    [%#span87] true
  
  predicate inv'2 (_x : Result'0.t_result int32 int32)
  
  axiom inv'2 : forall x : Result'0.t_result int32 int32 . inv'2 x = true
  
  predicate invariant'1 (self : int32) =
    [%#span87] true
  
  predicate inv'1 (_x : int32)
  
  axiom inv'1 : forall x : int32 . inv'1 x = true
  
  predicate invariant'0 (self : Result'0.t_result int32 int32) =
    [%#span87] true
  
  predicate inv'0 (_x : Result'0.t_result int32 int32)
  
  axiom inv'0 : forall x : Result'0.t_result int32 int32 . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'6 (self:Option'0.t_option (Result'0.t_result int32 int32)) (return'  (ret:Result'0.t_result int32 int32))= {[@expl:precondition] [%#span89] inv'13 self}
    {[@expl:precondition] [%#span88] self <> Option'0.C_None}
    any
    [ return' (result:Result'0.t_result int32 int32)-> {[%#span90] inv'2 result}
      {[%#span88] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec is_none'1 (self:Option'0.t_option (Result'0.t_result int32 int32)) (return'  (ret:bool))= {[@expl:precondition] [%#span91] inv'14 self}
    any [ return' (result:bool)-> {[%#span92] result = (self = Option'0.C_None)} (! return' {result}) ] 
  
  let rec transpose'0 (self:Result'0.t_result (Option'0.t_option int32) int32) (return'  (ret:Option'0.t_option (Result'0.t_result int32 int32)))= {[@expl:precondition] [%#span93] inv'12 self}
    any
    [ return' (result:Option'0.t_option (Result'0.t_result int32 int32))-> {[%#span97] inv'13 result}
      {[%#span96] forall e : int32 . inv'1 e
       -> self = Result'0.C_Err e  -> result = Option'0.C_Some (Result'0.C_Err e)}
      {[%#span95] forall t : int32 . inv'1 t
       -> self = Result'0.C_Ok (Option'0.C_Some t)  -> result = Option'0.C_Some (Result'0.C_Ok t)}
      {[%#span94] self = Result'0.C_Ok (Option'0.C_None)  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span98]  ^ self =  * self
  
  let rec cloned'1 (self:Result'0.t_result (borrowed int32) (borrowed int32)) (return'  (ret:Result'0.t_result int32 (borrowed int32)))= {[@expl:precondition] [%#span99] inv'9 self}
    any
    [ return' (result:Result'0.t_result int32 (borrowed int32))-> {[%#span102] inv'11 result}
      {[%#span101] forall e : borrowed int32 . inv'8 e  -> self = Result'0.C_Err e  -> result = Result'0.C_Err e}
      {[%#span100] forall t : borrowed int32 . inv'8 t
       -> self = Result'0.C_Ok t  -> result = Result'0.C_Ok ( * t) /\ resolve'0 t}
      (! return' {result}) ]
    
  
  let rec cloned'0 (self:Result'0.t_result int32 int32) (return'  (ret:Result'0.t_result int32 int32))= {[@expl:precondition] [%#span103] inv'6 self}
    any
    [ return' (result:Result'0.t_result int32 int32)-> {[%#span106] inv'10 result}
      {[%#span105] forall e : int32 . inv'5 e  -> self = Result'0.C_Err e  -> result = Result'0.C_Err e}
      {[%#span104] forall t : int32 . inv'5 t  -> self = Result'0.C_Ok t  -> result = Result'0.C_Ok t}
      (! return' {result}) ]
    
  
  let rec unwrap_err'4 (self:Result'0.t_result int32 (borrowed int32)) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span108] inv'11 self}
    {[@expl:precondition] [%#span107] exists e : borrowed int32 . inv'8 e /\ self = Result'0.C_Err e}
    any
    [ return' (result:borrowed int32)-> {[%#span110] inv'8 result}
      {[%#span109] Result'0.C_Err result = self}
      (! return' {result}) ]
    
  
  let rec unwrap'5 (self:Result'0.t_result int32 (borrowed int32)) (return'  (ret:int32))= {[@expl:precondition] [%#span112] inv'11 self}
    {[@expl:precondition] [%#span111] exists t : int32 . inv'1 t /\ self = Result'0.C_Ok t}
    any
    [ return' (result:int32)-> {[%#span113] inv'1 result}
      {[%#span109] Result'0.C_Ok result = self}
      (! return' {result}) ]
    
  
  let rec copied'1 (self:Result'0.t_result (borrowed int32) (borrowed int32)) (return'  (ret:Result'0.t_result int32 (borrowed int32)))= {[@expl:precondition] [%#span114] inv'9 self}
    any
    [ return' (result:Result'0.t_result int32 (borrowed int32))-> {[%#span117] inv'11 result}
      {[%#span116] forall e : borrowed int32 . inv'8 e  -> self = Result'0.C_Err e  -> result = Result'0.C_Err e}
      {[%#span115] forall t : borrowed int32 . inv'8 t
       -> self = Result'0.C_Ok t  -> result = Result'0.C_Ok ( * t) /\ resolve'0 t}
      (! return' {result}) ]
    
  
  let rec unwrap_err'3 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span108] inv'10 self}
    {[@expl:precondition] [%#span107] exists e : int32 . inv'5 e /\ self = Result'0.C_Err e}
    any
    [ return' (result:int32)-> {[%#span110] inv'5 result}
      {[%#span109] Result'0.C_Err result = self}
      (! return' {result}) ]
    
  
  let rec unwrap'4 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span112] inv'10 self}
    {[@expl:precondition] [%#span111] exists t : int32 . inv'1 t /\ self = Result'0.C_Ok t}
    any
    [ return' (result:int32)-> {[%#span113] inv'1 result}
      {[%#span109] Result'0.C_Ok result = self}
      (! return' {result}) ]
    
  
  let rec copied'0 (self:Result'0.t_result int32 int32) (return'  (ret:Result'0.t_result int32 int32))= {[@expl:precondition] [%#span118] inv'6 self}
    any
    [ return' (result:Result'0.t_result int32 int32)-> {[%#span121] inv'10 result}
      {[%#span120] forall e : int32 . inv'5 e  -> self = Result'0.C_Err e  -> result = Result'0.C_Err e}
      {[%#span119] forall t : int32 . inv'5 t  -> self = Result'0.C_Ok t  -> result = Result'0.C_Ok t}
      (! return' {result}) ]
    
  
  let rec or'0 (self:Result'0.t_result int32 int32) (res:Result'0.t_result int32 int32) (return'  (ret:Result'0.t_result int32 int32))= {[@expl:precondition] [%#span123] inv'2 res}
    {[@expl:precondition] [%#span122] inv'2 self}
    any
    [ return' (result:Result'0.t_result int32 int32)-> {[%#span126] inv'2 result}
      {[%#span125] (exists e : int32 . inv'1 e /\ self = Result'0.C_Err e)  -> result = res}
      {[%#span124] forall t : int32 . inv'1 t  -> self = Result'0.C_Ok t  -> result = Result'0.C_Ok t}
      (! return' {result}) ]
    
  
  let rec and'0 (self:Result'0.t_result int32 int32) (res:Result'0.t_result int32 int32) (return'  (ret:Result'0.t_result int32 int32))= {[@expl:precondition] [%#span128] inv'2 res}
    {[@expl:precondition] [%#span127] inv'2 self}
    any
    [ return' (result:Result'0.t_result int32 int32)-> {[%#span131] inv'2 result}
      {[%#span130] forall e : int32 . inv'1 e  -> self = Result'0.C_Err e  -> result = Result'0.C_Err e}
      {[%#span129] (exists t : int32 . inv'1 t /\ self = Result'0.C_Ok t)  -> result = res}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  predicate is_default'0 (self : int32) =
    [%#span132] self = (0 : int32)
  
  let rec unwrap_or_default'0 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span133] inv'2 self}
    any
    [ return' (result:int32)-> {[%#span136] inv'1 result}
      {[%#span135] (exists e : int32 . inv'1 e /\ self = Result'0.C_Err e)  -> is_default'0 result}
      {[%#span134] forall t : int32 . inv'1 t  -> self = Result'0.C_Ok t  -> result = t}
      (! return' {result}) ]
    
  
  let rec unwrap_or'0 (self:Result'0.t_result int32 int32) (default:int32) (return'  (ret:int32))= {[@expl:precondition] [%#span138] inv'1 default}
    {[@expl:precondition] [%#span137] inv'2 self}
    any
    [ return' (result:int32)-> {[%#span141] inv'1 result}
      {[%#span140] (exists e : int32 . inv'1 e /\ self = Result'0.C_Err e)  -> result = default}
      {[%#span139] forall t : int32 . inv'1 t  -> self = Result'0.C_Ok t  -> result = t}
      (! return' {result}) ]
    
  
  let rec unwrap_err'2 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span108] inv'2 self}
    {[@expl:precondition] [%#span107] exists e : int32 . inv'1 e /\ self = Result'0.C_Err e}
    any
    [ return' (result:int32)-> {[%#span110] inv'1 result}
      {[%#span109] Result'0.C_Err result = self}
      (! return' {result}) ]
    
  
  let rec unwrap_err'1 (self:Result'0.t_result (borrowed int32) (borrowed int32)) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span108] inv'9 self}
    {[@expl:precondition] [%#span107] exists e : borrowed int32 . inv'8 e /\ self = Result'0.C_Err e}
    any
    [ return' (result:borrowed int32)-> {[%#span110] inv'8 result}
      {[%#span109] Result'0.C_Err result = self}
      (! return' {result}) ]
    
  
  let rec unwrap'3 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span112] inv'2 self}
    {[@expl:precondition] [%#span111] exists t : int32 . inv'1 t /\ self = Result'0.C_Ok t}
    any
    [ return' (result:int32)-> {[%#span113] inv'1 result}
      {[%#span109] Result'0.C_Ok result = self}
      (! return' {result}) ]
    
  
  let rec unwrap'2 (self:Result'0.t_result (borrowed int32) (borrowed int32)) (return'  (ret:borrowed int32))= {[@expl:precondition] [%#span112] inv'9 self}
    {[@expl:precondition] [%#span111] exists t : borrowed int32 . inv'8 t /\ self = Result'0.C_Ok t}
    any
    [ return' (result:borrowed int32)-> {[%#span113] inv'8 result}
      {[%#span109] Result'0.C_Ok result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Result'0.t_result int32 int32)) (return'  (ret:Result'0.t_result (borrowed int32) (borrowed int32)))= {[@expl:precondition] [%#span142] inv'7 self}
    any
    [ return' (result:Result'0.t_result (borrowed int32) (borrowed int32))-> {[%#span144] inv'9 result}
      {[%#span143] exists t : borrowed int32 . inv'8 t
      /\ ( * self = Result'0.C_Ok ( * t) /\  ^ self = Result'0.C_Ok ( ^ t) /\ result = Result'0.C_Ok t
      \/ (exists e : borrowed int32 . inv'8 e
      /\  * self = Result'0.C_Err ( * e) /\  ^ self = Result'0.C_Err ( ^ e) /\ result = Result'0.C_Err e))}
      (! return' {result}) ]
    
  
  let rec unwrap_err'0 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span108] inv'6 self}
    {[@expl:precondition] [%#span107] exists e : int32 . inv'5 e /\ self = Result'0.C_Err e}
    any
    [ return' (result:int32)-> {[%#span110] inv'5 result}
      {[%#span109] Result'0.C_Err result = self}
      (! return' {result}) ]
    
  
  let rec unwrap'1 (self:Result'0.t_result int32 int32) (return'  (ret:int32))= {[@expl:precondition] [%#span112] inv'6 self}
    {[@expl:precondition] [%#span111] exists t : int32 . inv'5 t /\ self = Result'0.C_Ok t}
    any
    [ return' (result:int32)-> {[%#span113] inv'5 result}
      {[%#span109] Result'0.C_Ok result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Result'0.t_result int32 int32) (return'  (ret:Result'0.t_result int32 int32))= {[@expl:precondition] [%#span145] inv'0 self}
    any
    [ return' (result:Result'0.t_result int32 int32)-> {[%#span148] inv'6 result}
      {[%#span147] forall e : int32 . inv'5 e  -> self = Result'0.C_Err e  -> result = Result'0.C_Err e}
      {[%#span146] forall t : int32 . inv'5 t  -> self = Result'0.C_Ok t  -> result = Result'0.C_Ok t}
      (! return' {result}) ]
    
  
  let rec err'0 (self:Result'0.t_result int32 int32) (return'  (ret:Option'0.t_option int32))= {[@expl:precondition] [%#span149] inv'2 self}
    any
    [ return' (result:Option'0.t_option int32)-> {[%#span152] inv'3 result}
      {[%#span151] forall e : int32 . inv'1 e  -> self = Result'0.C_Err e  -> result = Option'0.C_Some e}
      {[%#span150] (exists t : int32 . inv'1 t /\ self = Result'0.C_Ok t)  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec is_none'0 (self:Option'0.t_option int32) (return'  (ret:bool))= {[@expl:precondition] [%#span91] inv'4 self}
    any [ return' (result:bool)-> {[%#span92] result = (self = Option'0.C_None)} (! return' {result}) ] 
  
  let rec unwrap'0 (self:Option'0.t_option int32) (return'  (ret:int32))= {[@expl:precondition] [%#span89] inv'3 self}
    {[@expl:precondition] [%#span88] self <> Option'0.C_None}
    any
    [ return' (result:int32)-> {[%#span90] inv'1 result}
      {[%#span88] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec ok'0 (self:Result'0.t_result int32 int32) (return'  (ret:Option'0.t_option int32))= {[@expl:precondition] [%#span153] inv'2 self}
    any
    [ return' (result:Option'0.t_option int32)-> {[%#span156] inv'3 result}
      {[%#span155] (exists e : int32 . inv'1 e /\ self = Result'0.C_Err e)  -> result = Option'0.C_None}
      {[%#span154] forall t : int32 . inv'1 t  -> self = Result'0.C_Ok t  -> result = Option'0.C_Some t}
      (! return' {result}) ]
    
  
  let rec is_err'0 (self:Result'0.t_result int32 int32) (return'  (ret:bool))= {[@expl:precondition] [%#span157] inv'0 self}
    any
    [ return' (result:bool)-> {[%#span158] result = (exists e : int32 . inv'1 e /\ self = Result'0.C_Err e)}
      (! return' {result}) ]
    
  
  let rec is_ok'0 (self:Result'0.t_result int32 int32) (return'  (ret:bool))= {[@expl:precondition] [%#span159] inv'0 self}
    any
    [ return' (result:bool)-> {[%#span160] result = (exists t : int32 . inv'1 t /\ self = Result'0.C_Ok t)}
      (! return' {result}) ]
    
  
  let rec test_result (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &ok <- Result'0.C_Ok ([%#sresult0] (1 : int32)) ] s1
      | s1 =  [ &err <- Result'0.C_Err ([%#sresult1] (-1 : int32)) ] s2
      | s2 = is_ok'0 {ok} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0 [ s0 = is_ok'0 {err} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ] 
    | bb4 = bb7
    | bb5 = s0 [ s0 = is_err'0 {err} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = any [ br0 -> {_10 = false} (! bb13) | br1 -> {_10} (! bb9) ] 
    | bb9 = s0 [ s0 = is_err'0 {ok} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = any [ br0 -> {_12 = false} (! bb12) | br1 -> {_12} (! bb11) ] 
    | bb11 = bb14
    | bb12 = s0 [ s0 = ok'0 {ok} (fun (_ret':Option'0.t_option int32) ->  [ &_18 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = s0 [ s0 = unwrap'0 {_18} (fun (_ret':int32) ->  [ &_17 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = Int32.eq {_17} {[%#sresult2] (1 : int32)}
          (fun (_ret':bool) ->  [ &_16 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_17 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_16 = false} (! bb18) | br1 -> {_16} (! bb17) ]  ]
      
    | bb17 = s0 [ s0 = ok'0 {err} (fun (_ret':Option'0.t_option int32) ->  [ &_24 <- _ret' ] s1) | s1 = bb19 ] 
    | bb19 = s0 [ s0 = is_none'0 {_24} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = any [ br0 -> {_22 = false} (! bb22) | br1 -> {_22} (! bb21) ] 
    | bb21 = s0 [ s0 = err'0 {ok} (fun (_ret':Option'0.t_option int32) ->  [ &_30 <- _ret' ] s1) | s1 = bb23 ] 
    | bb23 = s0 [ s0 = is_none'0 {_30} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s1) | s1 = bb24 ] 
    | bb24 = any [ br0 -> {_28 = false} (! bb26) | br1 -> {_28} (! bb25) ] 
    | bb25 = s0 [ s0 = err'0 {err} (fun (_ret':Option'0.t_option int32) ->  [ &_36 <- _ret' ] s1) | s1 = bb27 ] 
    | bb27 = s0 [ s0 = unwrap'0 {_36} (fun (_ret':int32) ->  [ &_35 <- _ret' ] s1) | s1 = bb28 ] 
    | bb28 = s0
      [ s0 = Int32.eq {_35} {[%#sresult3] (-1 : int32)}
          (fun (_ret':bool) ->  [ &_34 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_35 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_34 = false} (! bb30) | br1 -> {_34} (! bb29) ]  ]
      
    | bb29 = s0 [ s0 = as_ref'0 {ok} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_43 <- _ret' ] s1) | s1 = bb31 ] 
    | bb31 = s0 [ s0 = unwrap'1 {_43} (fun (_ret':int32) ->  [ &_42 <- _ret' ] s1) | s1 = bb32 ] 
    | bb32 = s0
      [ s0 = Int32.eq {_42} {[%#sresult4] (1 : int32)} (fun (_ret':bool) ->  [ &_40 <- _ret' ] s1)
      | s1 = any [ br0 -> {_40 = false} (! bb34) | br1 -> {_40} (! bb33) ]  ]
      
    | bb33 = s0
      [ s0 = as_ref'0 {err} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_50 <- _ret' ] s1) | s1 = bb35 ]
      
    | bb35 = s0 [ s0 = unwrap_err'0 {_50} (fun (_ret':int32) ->  [ &_49 <- _ret' ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 = Int32.eq {_49} {[%#sresult5] (-1 : int32)} (fun (_ret':bool) ->  [ &_47 <- _ret' ] s1)
      | s1 = any [ br0 -> {_47 = false} (! bb38) | br1 -> {_47} (! bb37) ]  ]
      
    | bb37 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {ok}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_55 <- _ret' ]  [ &ok <-  ^ _55 ] s1)
      | s1 = as_mut'0 {_55} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_54 <- _ret' ] s2)
      | s2 = bb39 ]
      
    | bb39 = s0 [ s0 = unwrap'2 {_54} (fun (_ret':borrowed int32) ->  [ &_53 <- _ret' ] s1) | s1 = bb40 ] 
    | bb40 = s0
      [ s0 =  [ &_53 <- { _53 with current = ([%#sresult6] (0 : int32)) ; } ] s1
      | s1 = -{resolve'0 _53}- s2
      | s2 = unwrap'3 {ok} (fun (_ret':int32) ->  [ &_58 <- _ret' ] s3)
      | s3 = bb41 ]
      
    | bb41 = s0
      [ s0 = Int32.eq {_58} {[%#sresult7] (0 : int32)}
          (fun (_ret':bool) ->  [ &_57 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_58 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_57 = false} (! bb43) | br1 -> {_57} (! bb42) ]  ]
      
    | bb42 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {ok}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_63 <- _ret' ]  [ &ok <-  ^ _63 ] s1)
      | s1 = as_mut'0 {_63} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_62 <- _ret' ] s2)
      | s2 = bb44 ]
      
    | bb44 = s0 [ s0 = unwrap'2 {_62} (fun (_ret':borrowed int32) ->  [ &_61 <- _ret' ] s1) | s1 = bb45 ] 
    | bb45 = s0
      [ s0 =  [ &_61 <- { _61 with current = ([%#sresult8] (1 : int32)) ; } ] s1
      | s1 = -{resolve'0 _61}- s2
      | s2 = unwrap'3 {ok} (fun (_ret':int32) ->  [ &_66 <- _ret' ] s3)
      | s3 = bb46 ]
      
    | bb46 = s0
      [ s0 = Int32.eq {_66} {[%#sresult9] (1 : int32)}
          (fun (_ret':bool) ->  [ &_65 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_66 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_65 = false} (! bb48) | br1 -> {_65} (! bb47) ]  ]
      
    | bb47 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {err}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_71 <- _ret' ]  [ &err <-  ^ _71 ] s1)
      | s1 = as_mut'0 {_71} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_70 <- _ret' ] s2)
      | s2 = bb49 ]
      
    | bb49 = s0 [ s0 = unwrap_err'1 {_70} (fun (_ret':borrowed int32) ->  [ &_69 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = s0
      [ s0 =  [ &_69 <- { _69 with current = ([%#sresult10] (0 : int32)) ; } ] s1
      | s1 = -{resolve'0 _69}- s2
      | s2 = unwrap_err'2 {err} (fun (_ret':int32) ->  [ &_74 <- _ret' ] s3)
      | s3 = bb51 ]
      
    | bb51 = s0
      [ s0 = Int32.eq {_74} {[%#sresult11] (0 : int32)}
          (fun (_ret':bool) ->  [ &_73 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_74 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_73 = false} (! bb53) | br1 -> {_73} (! bb52) ]  ]
      
    | bb52 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {err}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_79 <- _ret' ]  [ &err <-  ^ _79 ] s1)
      | s1 = as_mut'0 {_79} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_78 <- _ret' ] s2)
      | s2 = bb54 ]
      
    | bb54 = s0 [ s0 = unwrap_err'1 {_78} (fun (_ret':borrowed int32) ->  [ &_77 <- _ret' ] s1) | s1 = bb55 ] 
    | bb55 = s0
      [ s0 =  [ &_77 <- { _77 with current = ([%#sresult12] (-1 : int32)) ; } ] s1
      | s1 = -{resolve'0 _77}- s2
      | s2 = unwrap_err'2 {err} (fun (_ret':int32) ->  [ &_82 <- _ret' ] s3)
      | s3 = bb56 ]
      
    | bb56 = s0
      [ s0 = Int32.eq {_82} {[%#sresult13] (-1 : int32)}
          (fun (_ret':bool) ->  [ &_81 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_82 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_81 = false} (! bb58) | br1 -> {_81} (! bb57) ]  ]
      
    | bb57 = s0 [ s0 = unwrap'3 {ok} (fun (_ret':int32) ->  [ &_87 <- _ret' ] s1) | s1 = bb59 ] 
    | bb59 = s0
      [ s0 = Int32.eq {_87} {[%#sresult14] (1 : int32)}
          (fun (_ret':bool) ->  [ &_86 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_87 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_86 = false} (! bb61) | br1 -> {_86} (! bb60) ]  ]
      
    | bb60 = s0 [ s0 = unwrap_err'2 {err} (fun (_ret':int32) ->  [ &_92 <- _ret' ] s1) | s1 = bb62 ] 
    | bb62 = s0
      [ s0 = Int32.eq {_92} {[%#sresult15] (-1 : int32)}
          (fun (_ret':bool) ->  [ &_91 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_92 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_91 = false} (! bb64) | br1 -> {_91} (! bb63) ]  ]
      
    | bb63 = s0
      [ s0 = unwrap_or'0 {ok} {[%#sresult16] (0 : int32)} (fun (_ret':int32) ->  [ &_97 <- _ret' ] s1) | s1 = bb65 ]
      
    | bb65 = s0
      [ s0 = Int32.eq {_97} {[%#sresult17] (1 : int32)}
          (fun (_ret':bool) ->  [ &_96 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_97 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_96 = false} (! bb67) | br1 -> {_96} (! bb66) ]  ]
      
    | bb66 = s0
      [ s0 = unwrap_or'0 {err} {[%#sresult18] (0 : int32)} (fun (_ret':int32) ->  [ &_102 <- _ret' ] s1) | s1 = bb68 ]
      
    | bb68 = s0
      [ s0 = Int32.eq {_102} {[%#sresult19] (0 : int32)}
          (fun (_ret':bool) ->  [ &_101 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_102 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_101 = false} (! bb70) | br1 -> {_101} (! bb69) ]  ]
      
    | bb69 = s0 [ s0 = unwrap_or_default'0 {ok} (fun (_ret':int32) ->  [ &_107 <- _ret' ] s1) | s1 = bb71 ] 
    | bb71 = s0
      [ s0 = Int32.eq {_107} {[%#sresult20] (1 : int32)}
          (fun (_ret':bool) ->  [ &_106 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_107 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_106 = false} (! bb73) | br1 -> {_106} (! bb72) ]  ]
      
    | bb72 = s0 [ s0 = unwrap_or_default'0 {err} (fun (_ret':int32) ->  [ &_112 <- _ret' ] s1) | s1 = bb74 ] 
    | bb74 = s0
      [ s0 = Int32.eq {_112} {[%#sresult21] (0 : int32)}
          (fun (_ret':bool) ->  [ &_111 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_112 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_111 = false} (! bb76) | br1 -> {_111} (! bb75) ]  ]
      
    | bb75 = s0
      [ s0 =  [ &_120 <- Result'0.C_Err ([%#sresult22] (-2 : int32)) ] s1
      | s1 = and'0 {ok} {_120} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_118 <- _ret' ] s2)
      | s2 = bb77 ]
      
    | bb77 = s0 [ s0 = unwrap_err'2 {_118} (fun (_ret':int32) ->  [ &_117 <- _ret' ] s1) | s1 = bb78 ] 
    | bb78 = s0
      [ s0 = Int32.eq {_117} {[%#sresult23] (-2 : int32)}
          (fun (_ret':bool) ->  [ &_116 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_117 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_116 = false} (! bb80) | br1 -> {_116} (! bb79) ]  ]
      
    | bb79 = s0
      [ s0 =  [ &_127 <- Result'0.C_Ok ([%#sresult24] (2 : int32)) ] s1
      | s1 = and'0 {ok} {_127} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_125 <- _ret' ] s2)
      | s2 = bb81 ]
      
    | bb81 = s0 [ s0 = unwrap'3 {_125} (fun (_ret':int32) ->  [ &_124 <- _ret' ] s1) | s1 = bb82 ] 
    | bb82 = s0
      [ s0 = Int32.eq {_124} {[%#sresult25] (2 : int32)}
          (fun (_ret':bool) ->  [ &_123 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_124 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_123 = false} (! bb84) | br1 -> {_123} (! bb83) ]  ]
      
    | bb83 = s0
      [ s0 =  [ &_134 <- Result'0.C_Err ([%#sresult26] (-2 : int32)) ] s1
      | s1 = and'0 {err} {_134} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_132 <- _ret' ] s2)
      | s2 = bb85 ]
      
    | bb85 = s0 [ s0 = unwrap_err'2 {_132} (fun (_ret':int32) ->  [ &_131 <- _ret' ] s1) | s1 = bb86 ] 
    | bb86 = s0
      [ s0 = Int32.eq {_131} {[%#sresult27] (-1 : int32)}
          (fun (_ret':bool) ->  [ &_130 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_131 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_130 = false} (! bb88) | br1 -> {_130} (! bb87) ]  ]
      
    | bb87 = s0
      [ s0 =  [ &_141 <- Result'0.C_Ok ([%#sresult28] (2 : int32)) ] s1
      | s1 = and'0 {err} {_141} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_139 <- _ret' ] s2)
      | s2 = bb89 ]
      
    | bb89 = s0 [ s0 = unwrap_err'2 {_139} (fun (_ret':int32) ->  [ &_138 <- _ret' ] s1) | s1 = bb90 ] 
    | bb90 = s0
      [ s0 = Int32.eq {_138} {[%#sresult29] (-1 : int32)}
          (fun (_ret':bool) ->  [ &_137 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_138 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_137 = false} (! bb92) | br1 -> {_137} (! bb91) ]  ]
      
    | bb91 = s0
      [ s0 =  [ &_148 <- Result'0.C_Err ([%#sresult30] (-2 : int32)) ] s1
      | s1 = or'0 {ok} {_148} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_146 <- _ret' ] s2)
      | s2 = bb93 ]
      
    | bb93 = s0 [ s0 = unwrap'3 {_146} (fun (_ret':int32) ->  [ &_145 <- _ret' ] s1) | s1 = bb94 ] 
    | bb94 = s0
      [ s0 = Int32.eq {_145} {[%#sresult31] (1 : int32)}
          (fun (_ret':bool) ->  [ &_144 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_145 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_144 = false} (! bb96) | br1 -> {_144} (! bb95) ]  ]
      
    | bb95 = s0
      [ s0 =  [ &_155 <- Result'0.C_Ok ([%#sresult32] (2 : int32)) ] s1
      | s1 = or'0 {ok} {_155} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_153 <- _ret' ] s2)
      | s2 = bb97 ]
      
    | bb97 = s0 [ s0 = unwrap'3 {_153} (fun (_ret':int32) ->  [ &_152 <- _ret' ] s1) | s1 = bb98 ] 
    | bb98 = s0
      [ s0 = Int32.eq {_152} {[%#sresult33] (1 : int32)}
          (fun (_ret':bool) ->  [ &_151 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_152 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_151 = false} (! bb100) | br1 -> {_151} (! bb99) ]  ]
      
    | bb99 = s0
      [ s0 =  [ &_162 <- Result'0.C_Err ([%#sresult34] (-2 : int32)) ] s1
      | s1 = or'0 {err} {_162} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_160 <- _ret' ] s2)
      | s2 = bb101 ]
      
    | bb101 = s0 [ s0 = unwrap_err'2 {_160} (fun (_ret':int32) ->  [ &_159 <- _ret' ] s1) | s1 = bb102 ] 
    | bb102 = s0
      [ s0 = Int32.eq {_159} {[%#sresult35] (-2 : int32)}
          (fun (_ret':bool) ->  [ &_158 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_159 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_158 = false} (! bb104) | br1 -> {_158} (! bb103) ]  ]
      
    | bb103 = s0
      [ s0 =  [ &_169 <- Result'0.C_Ok ([%#sresult36] (2 : int32)) ] s1
      | s1 = or'0 {err} {_169} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_167 <- _ret' ] s2)
      | s2 = bb105 ]
      
    | bb105 = s0 [ s0 = unwrap'3 {_167} (fun (_ret':int32) ->  [ &_166 <- _ret' ] s1) | s1 = bb106 ] 
    | bb106 = s0
      [ s0 = Int32.eq {_166} {[%#sresult37] (2 : int32)}
          (fun (_ret':bool) ->  [ &_165 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_166 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_165 = false} (! bb108) | br1 -> {_165} (! bb107) ]  ]
      
    | bb107 = s0
      [ s0 = as_ref'0 {ok} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_175 <- _ret' ] s1) | s1 = bb109 ]
      
    | bb109 = s0
      [ s0 = copied'0 {_175} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_174 <- _ret' ] s1) | s1 = bb110 ]
      
    | bb110 = s0 [ s0 = unwrap'4 {_174} (fun (_ret':int32) ->  [ &_173 <- _ret' ] s1) | s1 = bb111 ] 
    | bb111 = s0
      [ s0 = Int32.eq {_173} {[%#sresult38] (1 : int32)}
          (fun (_ret':bool) ->  [ &_172 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_173 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_172 = false} (! bb113) | br1 -> {_172} (! bb112) ]  ]
      
    | bb112 = s0
      [ s0 = as_ref'0 {err} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_183 <- _ret' ] s1) | s1 = bb114 ]
      
    | bb114 = s0
      [ s0 = copied'0 {_183} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_182 <- _ret' ] s1) | s1 = bb115 ]
      
    | bb115 = s0 [ s0 = unwrap_err'3 {_182} (fun (_ret':int32) ->  [ &_181 <- _ret' ] s1) | s1 = bb116 ] 
    | bb116 = s0
      [ s0 = Int32.eq {_181} {[%#sresult39] (-1 : int32)} (fun (_ret':bool) ->  [ &_179 <- _ret' ] s1)
      | s1 = any [ br0 -> {_179 = false} (! bb118) | br1 -> {_179} (! bb117) ]  ]
      
    | bb117 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {ok}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_191 <- _ret' ]  [ &ok <-  ^ _191 ] s1)
      | s1 = as_mut'0 {_191} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_190 <- _ret' ] s2)
      | s2 = bb119 ]
      
    | bb119 = s0
      [ s0 = copied'1 {_190} (fun (_ret':Result'0.t_result int32 (borrowed int32)) ->  [ &_189 <- _ret' ] s1)
      | s1 = bb120 ]
      
    | bb120 = s0 [ s0 = unwrap'5 {_189} (fun (_ret':int32) ->  [ &_188 <- _ret' ] s1) | s1 = bb121 ] 
    | bb121 = s0
      [ s0 = Int32.eq {_188} {[%#sresult40] (1 : int32)}
          (fun (_ret':bool) ->  [ &_187 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_188 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_187 = false} (! bb123) | br1 -> {_187} (! bb122) ]  ]
      
    | bb122 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {err}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_199 <- _ret' ]  [ &err <-  ^ _199 ] s1)
      | s1 = as_mut'0 {_199} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_198 <- _ret' ] s2)
      | s2 = bb124 ]
      
    | bb124 = s0
      [ s0 = copied'1 {_198} (fun (_ret':Result'0.t_result int32 (borrowed int32)) ->  [ &_197 <- _ret' ] s1)
      | s1 = bb125 ]
      
    | bb125 = s0 [ s0 = unwrap_err'4 {_197} (fun (_ret':borrowed int32) ->  [ &_196 <- _ret' ] s1) | s1 = bb126 ] 
    | bb126 = s0
      [ s0 = -{resolve'0 _196}- s1
      | s1 = Int32.eq { * _196} {[%#sresult41] (-1 : int32)} (fun (_ret':bool) ->  [ &_194 <- _ret' ] s2)
      | s2 = any [ br0 -> {_194 = false} (! bb128) | br1 -> {_194} (! bb127) ]  ]
      
    | bb127 = s0
      [ s0 = as_ref'0 {ok} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_205 <- _ret' ] s1) | s1 = bb129 ]
      
    | bb129 = s0
      [ s0 = cloned'0 {_205} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_204 <- _ret' ] s1) | s1 = bb130 ]
      
    | bb130 = s0 [ s0 = unwrap'4 {_204} (fun (_ret':int32) ->  [ &_203 <- _ret' ] s1) | s1 = bb131 ] 
    | bb131 = s0
      [ s0 = Int32.eq {_203} {[%#sresult42] (1 : int32)}
          (fun (_ret':bool) ->  [ &_202 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_203 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_202 = false} (! bb133) | br1 -> {_202} (! bb132) ]  ]
      
    | bb132 = s0
      [ s0 = as_ref'0 {err} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_213 <- _ret' ] s1) | s1 = bb134 ]
      
    | bb134 = s0
      [ s0 = cloned'0 {_213} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_212 <- _ret' ] s1) | s1 = bb135 ]
      
    | bb135 = s0 [ s0 = unwrap_err'3 {_212} (fun (_ret':int32) ->  [ &_211 <- _ret' ] s1) | s1 = bb136 ] 
    | bb136 = s0
      [ s0 = Int32.eq {_211} {[%#sresult43] (-1 : int32)} (fun (_ret':bool) ->  [ &_209 <- _ret' ] s1)
      | s1 = any [ br0 -> {_209 = false} (! bb138) | br1 -> {_209} (! bb137) ]  ]
      
    | bb137 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {ok}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_221 <- _ret' ]  [ &ok <-  ^ _221 ] s1)
      | s1 = as_mut'0 {_221} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_220 <- _ret' ] s2)
      | s2 = bb139 ]
      
    | bb139 = s0
      [ s0 = cloned'1 {_220} (fun (_ret':Result'0.t_result int32 (borrowed int32)) ->  [ &_219 <- _ret' ] s1)
      | s1 = bb140 ]
      
    | bb140 = s0 [ s0 = unwrap'5 {_219} (fun (_ret':int32) ->  [ &_218 <- _ret' ] s1) | s1 = bb141 ] 
    | bb141 = s0
      [ s0 = Int32.eq {_218} {[%#sresult44] (1 : int32)}
          (fun (_ret':bool) ->  [ &_217 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_218 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_217 = false} (! bb143) | br1 -> {_217} (! bb142) ]  ]
      
    | bb142 = s0
      [ s0 = Borrow.borrow_mut <Result'0.t_result int32 int32> {err}
          (fun (_ret':borrowed (Result'0.t_result int32 int32)) ->  [ &_229 <- _ret' ]  [ &err <-  ^ _229 ] s1)
      | s1 = as_mut'0 {_229} (fun (_ret':Result'0.t_result (borrowed int32) (borrowed int32)) ->  [ &_228 <- _ret' ] s2)
      | s2 = bb144 ]
      
    | bb144 = s0
      [ s0 = cloned'1 {_228} (fun (_ret':Result'0.t_result int32 (borrowed int32)) ->  [ &_227 <- _ret' ] s1)
      | s1 = bb145 ]
      
    | bb145 = s0 [ s0 = unwrap_err'4 {_227} (fun (_ret':borrowed int32) ->  [ &_226 <- _ret' ] s1) | s1 = bb146 ] 
    | bb146 = s0
      [ s0 = -{resolve'0 _226}- s1
      | s1 = Int32.eq { * _226} {[%#sresult45] (-1 : int32)} (fun (_ret':bool) ->  [ &_224 <- _ret' ] s2)
      | s2 = any [ br0 -> {_224 = false} (! bb148) | br1 -> {_224} (! bb147) ]  ]
      
    | bb147 = s0
      [ s0 =  [ &_232 <- Option'0.C_None ] s1
      | s1 =  [ &res <- Result'0.C_Ok _232 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_232 <- _any ] s2) ] )
      | s2 = transpose'0 {res} (fun (_ret':Option'0.t_option (Result'0.t_result int32 int32)) ->  [ &_236 <- _ret' ] s3)
      | s3 = bb149 ]
      
    | bb149 = s0 [ s0 = is_none'1 {_236} (fun (_ret':bool) ->  [ &_234 <- _ret' ] s1) | s1 = bb150 ] 
    | bb150 = any [ br0 -> {_234 = false} (! bb152) | br1 -> {_234} (! bb151) ] 
    | bb151 = s0
      [ s0 =  [ &_240 <- Option'0.C_Some ([%#sresult46] (1 : int32)) ] s1
      | s1 =  [ &res1 <- Result'0.C_Ok _240 ] (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_240 <- _any ] s2) ] )
      | s2 = transpose'0 {res1}
          (fun (_ret':Option'0.t_option (Result'0.t_result int32 int32)) ->  [ &_245 <- _ret' ] s3)
      | s3 = bb153 ]
      
    | bb153 = s0
      [ s0 = unwrap'6 {_245} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_244 <- _ret' ] s1) | s1 = bb154 ]
      
    | bb154 = s0 [ s0 = unwrap'3 {_244} (fun (_ret':int32) ->  [ &_243 <- _ret' ] s1) | s1 = bb155 ] 
    | bb155 = s0
      [ s0 = Int32.eq {_243} {[%#sresult47] (1 : int32)}
          (fun (_ret':bool) ->  [ &_242 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_243 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_242 = false} (! bb157) | br1 -> {_242} (! bb156) ]  ]
      
    | bb156 = s0
      [ s0 =  [ &res2 <- Result'0.C_Err ([%#sresult48] (-1 : int32)) ] s1
      | s1 = transpose'0 {res2}
          (fun (_ret':Option'0.t_option (Result'0.t_result int32 int32)) ->  [ &_253 <- _ret' ] s2)
      | s2 = bb158 ]
      
    | bb158 = s0
      [ s0 = unwrap'6 {_253} (fun (_ret':Result'0.t_result int32 int32) ->  [ &_252 <- _ret' ] s1) | s1 = bb159 ]
      
    | bb159 = s0 [ s0 = unwrap_err'2 {_252} (fun (_ret':int32) ->  [ &_251 <- _ret' ] s1) | s1 = bb160 ] 
    | bb160 = s0
      [ s0 = Int32.eq {_251} {[%#sresult49] (-1 : int32)}
          (fun (_ret':bool) ->  [ &_250 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_251 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_250 = false} (! bb162) | br1 -> {_250} (! bb161) ]  ]
      
    | bb161 = return' {_0}
    | bb162 = {[%#sresult50] false} any
    | bb157 = {[%#sresult51] false} any
    | bb152 = {[%#sresult52] false} any
    | bb148 = {[%#sresult53] false} any
    | bb143 = {[%#sresult54] false} any
    | bb138 = {[%#sresult55] false} any
    | bb133 = {[%#sresult56] false} any
    | bb128 = {[%#sresult57] false} any
    | bb123 = {[%#sresult58] false} any
    | bb118 = {[%#sresult59] false} any
    | bb113 = {[%#sresult60] false} any
    | bb108 = {[%#sresult61] false} any
    | bb104 = {[%#sresult62] false} any
    | bb100 = {[%#sresult63] false} any
    | bb96 = {[%#sresult64] false} any
    | bb92 = {[%#sresult65] false} any
    | bb88 = {[%#sresult66] false} any
    | bb84 = {[%#sresult67] false} any
    | bb80 = {[%#sresult68] false} any
    | bb76 = {[%#sresult69] false} any
    | bb73 = {[%#sresult70] false} any
    | bb70 = {[%#sresult71] false} any
    | bb67 = {[%#sresult72] false} any
    | bb64 = {[%#sresult73] false} any
    | bb61 = {[%#sresult74] false} any
    | bb58 = {[%#sresult75] false} any
    | bb53 = {[%#sresult76] false} any
    | bb48 = {[%#sresult77] false} any
    | bb43 = {[%#sresult78] false} any
    | bb38 = {[%#sresult79] false} any
    | bb34 = {[%#sresult80] false} any
    | bb30 = {[%#sresult81] false} any
    | bb26 = {[%#sresult82] false} any
    | bb22 = {[%#sresult83] false} any
    | bb18 = {[%#sresult84] false} any
    | bb13 = bb14
    | bb14 = {[%#sresult85] false} any
    | bb6 = bb7
    | bb7 = {[%#sresult86] false} any ]
    )
    [ & _0 : () = any_l ()
    | & ok : Result'0.t_result int32 int32 = any_l ()
    | & err : Result'0.t_result int32 int32 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : bool = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : bool = any_l ()
    | & _16 : bool = any_l ()
    | & _17 : int32 = any_l ()
    | & _18 : Option'0.t_option int32 = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : Option'0.t_option int32 = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : Option'0.t_option int32 = any_l ()
    | & _34 : bool = any_l ()
    | & _35 : int32 = any_l ()
    | & _36 : Option'0.t_option int32 = any_l ()
    | & _40 : bool = any_l ()
    | & _42 : int32 = any_l ()
    | & _43 : Result'0.t_result int32 int32 = any_l ()
    | & _47 : bool = any_l ()
    | & _49 : int32 = any_l ()
    | & _50 : Result'0.t_result int32 int32 = any_l ()
    | & _53 : borrowed int32 = any_l ()
    | & _54 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _55 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _57 : bool = any_l ()
    | & _58 : int32 = any_l ()
    | & _61 : borrowed int32 = any_l ()
    | & _62 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _63 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _65 : bool = any_l ()
    | & _66 : int32 = any_l ()
    | & _69 : borrowed int32 = any_l ()
    | & _70 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _71 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _73 : bool = any_l ()
    | & _74 : int32 = any_l ()
    | & _77 : borrowed int32 = any_l ()
    | & _78 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _79 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _81 : bool = any_l ()
    | & _82 : int32 = any_l ()
    | & _86 : bool = any_l ()
    | & _87 : int32 = any_l ()
    | & _91 : bool = any_l ()
    | & _92 : int32 = any_l ()
    | & _96 : bool = any_l ()
    | & _97 : int32 = any_l ()
    | & _101 : bool = any_l ()
    | & _102 : int32 = any_l ()
    | & _106 : bool = any_l ()
    | & _107 : int32 = any_l ()
    | & _111 : bool = any_l ()
    | & _112 : int32 = any_l ()
    | & _116 : bool = any_l ()
    | & _117 : int32 = any_l ()
    | & _118 : Result'0.t_result int32 int32 = any_l ()
    | & _120 : Result'0.t_result int32 int32 = any_l ()
    | & _123 : bool = any_l ()
    | & _124 : int32 = any_l ()
    | & _125 : Result'0.t_result int32 int32 = any_l ()
    | & _127 : Result'0.t_result int32 int32 = any_l ()
    | & _130 : bool = any_l ()
    | & _131 : int32 = any_l ()
    | & _132 : Result'0.t_result int32 int32 = any_l ()
    | & _134 : Result'0.t_result int32 int32 = any_l ()
    | & _137 : bool = any_l ()
    | & _138 : int32 = any_l ()
    | & _139 : Result'0.t_result int32 int32 = any_l ()
    | & _141 : Result'0.t_result int32 int32 = any_l ()
    | & _144 : bool = any_l ()
    | & _145 : int32 = any_l ()
    | & _146 : Result'0.t_result int32 int32 = any_l ()
    | & _148 : Result'0.t_result int32 int32 = any_l ()
    | & _151 : bool = any_l ()
    | & _152 : int32 = any_l ()
    | & _153 : Result'0.t_result int32 int32 = any_l ()
    | & _155 : Result'0.t_result int32 int32 = any_l ()
    | & _158 : bool = any_l ()
    | & _159 : int32 = any_l ()
    | & _160 : Result'0.t_result int32 int32 = any_l ()
    | & _162 : Result'0.t_result int32 int32 = any_l ()
    | & _165 : bool = any_l ()
    | & _166 : int32 = any_l ()
    | & _167 : Result'0.t_result int32 int32 = any_l ()
    | & _169 : Result'0.t_result int32 int32 = any_l ()
    | & _172 : bool = any_l ()
    | & _173 : int32 = any_l ()
    | & _174 : Result'0.t_result int32 int32 = any_l ()
    | & _175 : Result'0.t_result int32 int32 = any_l ()
    | & _179 : bool = any_l ()
    | & _181 : int32 = any_l ()
    | & _182 : Result'0.t_result int32 int32 = any_l ()
    | & _183 : Result'0.t_result int32 int32 = any_l ()
    | & _187 : bool = any_l ()
    | & _188 : int32 = any_l ()
    | & _189 : Result'0.t_result int32 (borrowed int32) = any_l ()
    | & _190 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _191 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _194 : bool = any_l ()
    | & _196 : borrowed int32 = any_l ()
    | & _197 : Result'0.t_result int32 (borrowed int32) = any_l ()
    | & _198 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _199 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _202 : bool = any_l ()
    | & _203 : int32 = any_l ()
    | & _204 : Result'0.t_result int32 int32 = any_l ()
    | & _205 : Result'0.t_result int32 int32 = any_l ()
    | & _209 : bool = any_l ()
    | & _211 : int32 = any_l ()
    | & _212 : Result'0.t_result int32 int32 = any_l ()
    | & _213 : Result'0.t_result int32 int32 = any_l ()
    | & _217 : bool = any_l ()
    | & _218 : int32 = any_l ()
    | & _219 : Result'0.t_result int32 (borrowed int32) = any_l ()
    | & _220 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _221 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & _224 : bool = any_l ()
    | & _226 : borrowed int32 = any_l ()
    | & _227 : Result'0.t_result int32 (borrowed int32) = any_l ()
    | & _228 : Result'0.t_result (borrowed int32) (borrowed int32) = any_l ()
    | & _229 : borrowed (Result'0.t_result int32 int32) = any_l ()
    | & res : Result'0.t_result (Option'0.t_option int32) int32 = any_l ()
    | & _232 : Option'0.t_option int32 = any_l ()
    | & _234 : bool = any_l ()
    | & _236 : Option'0.t_option (Result'0.t_result int32 int32) = any_l ()
    | & res1 : Result'0.t_result (Option'0.t_option int32) int32 = any_l ()
    | & _240 : Option'0.t_option int32 = any_l ()
    | & _242 : bool = any_l ()
    | & _243 : int32 = any_l ()
    | & _244 : Result'0.t_result int32 int32 = any_l ()
    | & _245 : Option'0.t_option (Result'0.t_result int32 int32) = any_l ()
    | & res2 : Result'0.t_result (Option'0.t_option int32) int32 = any_l ()
    | & _250 : bool = any_l ()
    | & _251 : int32 = any_l ()
    | & _252 : Result'0.t_result int32 int32 = any_l ()
    | & _253 : Option'0.t_option (Result'0.t_result int32 int32) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
