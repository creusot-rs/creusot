module M_own__qyi3410529601998764826__resolve_coherence [#"own.rs" 26 4 26 31] (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  let%span sown0 = "own.rs" 24 15 24 39
  let%span sown1 = "own.rs" 25 14 25 31
  let%span sown2 = "own.rs" 22 4 22 23
  let%span sown3 = "own.rs" 16 8 19 9
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  predicate resolve'1 (_1 : t_T'0)
  
  predicate resolve'2 (_1 : t_E'0)
  
  predicate structural_resolve'0 (_1 : t_OwnResult'0) =
    match _1 with
      | C_Ok'0 x0 -> resolve'1 x0
      | C_Err'0 x0 -> resolve'2 x0
      end
  
  predicate resolve'0 [#"own.rs" 15 4 15 28] (self : t_OwnResult'0) =
    [%#sown3] match self with
      | C_Ok'0 t -> resolve'1 t
      | C_Err'0 e -> resolve'2 e
      end
  
  constant self  : t_OwnResult'0
  
  function resolve_coherence'0 [#"own.rs" 26 4 26 31] (self : t_OwnResult'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#sown0] structural_resolve'0 self)  -> ([%#sown1] resolve'0 self)
end
module M_own__qyi6204940358182728290__is_ok [#"own.rs" 31 4 31 31] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 31 18 31 22
  let%span sown1 = "own.rs" 30 14 30 62
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : t_OwnResult'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  meta "compute_max_steps" 1000000
  
  let rec is_ok'0 (self:t_OwnResult'0) (return'  (ret:bool))= {[@expl:is_ok 'self' type invariant] [%#sown0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb2) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_0 <- false ] s1 | s1 = bb4 ] 
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- true ] s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & self : t_OwnResult'0 = self ] 
    [ return' (result:bool)-> {[@expl:is_ok ensures] [%#sown1] result = (exists t : t_T'0 . self = C_Ok'0 t)}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__is_err [#"own.rs" 36 4 36 32] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 36 19 36 23
  let%span sown1 = "own.rs" 35 14 35 63
  let%span sown2 = "own.rs" 31 18 31 22
  let%span sown3 = "own.rs" 30 14 30 62
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : t_OwnResult'0) =
    [%#sinvariant4] inv'1 self
  
  predicate inv'0 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  let rec is_ok'0 (self:t_OwnResult'0) (return'  (ret:bool))= {[@expl:is_ok 'self' type invariant] [%#sown2] inv'0 self}
    any [ return' (result:bool)-> {[%#sown3] result = (exists t : t_T'0 . self = C_Ok'0 t)} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec is_err'0 (self:t_OwnResult'0) (return'  (ret:bool))= {[@expl:is_err 'self' type invariant] [%#sown0] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = is_ok'0 {self} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_0 <- not _3 ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & self : t_OwnResult'0 = self | & _3 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:is_err ensures] [%#sown1] result = (exists e : t_E'0 . self = C_Err'0 e)}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__ok [#"own.rs" 42 4 42 32] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 42 14 42 18
  let%span sown1 = "own.rs" 42 23 42 32
  let%span sown2 = "own.rs" 40 14 40 73
  let%span sown3 = "own.rs" 41 14 41 73
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_E'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_E'0)
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'3 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec ok'0 (self:t_OwnResult'0) (return'  (ret:t_Option'0))= {[@expl:ok 'self' type invariant] [%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &x1 <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 x1} s2
      | s2 = -{resolve'0 x1}- s3
      | s3 =  [ &_0 <- C_None'0 ] s4
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &x <- r0'0 ] s1) | s1 =  [ &_0 <- C_Some'0 x ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : t_Option'0 = any_l () | & self : t_OwnResult'0 = self | & x : t_T'0 = any_l () | & x1 : t_E'0 = any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:ok result type invariant] [%#sown1] inv'2 result}
      {[@expl:ok ensures #0] [%#sown2] forall t : t_T'0 . self = C_Ok'0 t  -> result = C_Some'0 t}
      {[@expl:ok ensures #1] [%#sown3] (exists e : t_E'0 . self = C_Err'0 e)  -> result = C_None'0}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__err [#"own.rs" 52 4 52 33] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 52 15 52 19
  let%span sown1 = "own.rs" 52 24 52 33
  let%span sown2 = "own.rs" 50 14 50 72
  let%span sown3 = "own.rs" 51 14 51 74
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_E'0
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_T'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_T'0)
  
  use prelude.prelude.Intrinsic
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'0 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec err'0 (self:t_OwnResult'0) (return'  (ret:t_Option'0))= {[@expl:err 'self' type invariant] [%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &x1 <- r0'0 ] s1) | s1 =  [ &_0 <- C_Some'0 x1 ] s2 | s2 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &x <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'0 x}- s3
      | s3 =  [ &_0 <- C_None'0 ] s4
      | s4 = bb7 ]
      
    | bb7 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : t_Option'0 = any_l () | & self : t_OwnResult'0 = self | & x : t_T'0 = any_l () | & x1 : t_E'0 = any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:err result type invariant] [%#sown1] inv'2 result}
      {[@expl:err ensures #0] [%#sown2] (exists t : t_T'0 . self = C_Ok'0 t)  -> result = C_None'0}
      {[@expl:err ensures #1] [%#sown3] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Some'0 e}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__as_ref [#"own.rs" 62 4 62 45] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 62 19 62 23
  let%span sown1 = "own.rs" 62 28 62 45
  let%span sown2 = "own.rs" 60 14 60 85
  let%span sown3 = "own.rs" 61 14 61 87
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Borrow
  
  type t_OwnResult'0  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_E'0
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate inv'6 (_1 : t_E'0)
  
  predicate inv'4 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_OwnResult'1 [inv'4 x] . inv'4 x
  = match x with
    | C_Ok'0 a_0 -> inv'5 a_0
    | C_Err'0 a_0 -> inv'6 a_0
    end
  
  predicate invariant'0 (self : t_OwnResult'1) =
    [%#sinvariant4] inv'4 self
  
  predicate inv'0 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'1 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'1 (self : t_T'0) =
    [%#sinvariant4] inv'5 self
  
  predicate inv'2 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'2 (self : t_E'0) =
    [%#sinvariant4] inv'6 self
  
  predicate inv'3 (_1 : t_E'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_E'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'1 a_0 -> inv'2 a_0
    | C_Err'1 a_0 -> inv'3 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec as_ref'0 (self:t_OwnResult'1) (return'  (ret:t_OwnResult'0))= {[@expl:as_ref 'self' type invariant] [%#sown0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb2) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb3) ] 
    | bb3 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &x1 <- r0'0 ] s1) | s1 =  [ &_0 <- C_Err'1 x1 ] s2 | s2 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &x <- r0'0 ] s1) | s1 =  [ &_0 <- C_Ok'1 x ] s2 | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & x : t_T'0 = any_l ()
    | & x1 : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:as_ref result type invariant] [%#sown1] inv'1 result}
      {[@expl:as_ref ensures #0] [%#sown2] forall t : t_T'0 . self = C_Ok'0 t  -> result = C_Ok'1 t}
      {[@expl:as_ref ensures #1] [%#sown3] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Err'1 e}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__as_mut [#"own.rs" 77 4 77 57] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 77 23 77 27
  let%span sown1 = "own.rs" 77 32 77 57
  let%span sown2 = "own.rs" 70 8 75 39
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : t_E'0)
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_OwnResult'0  =
    | C_Ok'1 (borrowed t_T'0)
    | C_Err'1 (borrowed t_E'0)
  
  predicate invariant'0 (self : borrowed t_E'0) =
    [%#sinvariant4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t_E'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t_E'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate resolve'3 (self : borrowed t_E'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_E'0) =
    resolve'3 _1
  
  predicate inv'2 (_1 : t_T'0)
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  predicate invariant'1 (self : borrowed t_T'0) =
    [%#sinvariant4] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate resolve'4 (self : borrowed t_T'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed t_T'0) =
    resolve'4 _1
  
  predicate inv'6 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_OwnResult'1 [inv'6 x] . inv'6 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  predicate invariant'2 (self : borrowed (t_OwnResult'1)) =
    [%#sinvariant4] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'4 (_1 : borrowed (t_OwnResult'1))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (t_OwnResult'1) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate resolve'5 (self : borrowed (t_OwnResult'1)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_OwnResult'1)) =
    resolve'5 _1
  
  use prelude.prelude.Intrinsic
  
  predicate inv'5 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_OwnResult'0 [inv'5 x] . inv'5 x
  = match x with
    | C_Ok'1 a_0 -> inv'3 a_0
    | C_Err'1 a_0 -> inv'1 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec as_mut'0 (self:borrowed (t_OwnResult'1)) (return'  (ret:t_OwnResult'0))= {[@expl:as_mut 'self' type invariant] [%#sown0] inv'4 self}
    (! bb0
    [ bb0 = any
      [ br0 (x0:t_T'0)-> {self.current = C_Ok'0 x0} (! bb2) | br1 (x0:t_E'0)-> {self.current = C_Err'0 x0} (! bb3) ]
      
    | bb3 = s0
      [ s0 = v_Err'0 {self.current}
          (fun (r0'0:t_E'0) ->
            {inv'0 r0'0}
            Borrow.borrow_final <t_E'0> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed t_E'0) ->
                 [ &x1 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = C_Err'0 _ret'.final } ] 
                s1))
      | s1 = {inv'0 x1.current}
        Borrow.borrow_final <t_E'0> {x1.current} {Borrow.get_id x1}
          (fun (_ret':borrowed t_E'0) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &x1 <- { x1 with current = _ret'.final } ] 
            s2)
      | s2 =  [ &_0 <- C_Err'1 _7 ] s3
      | s3 = {[@expl:type invariant] inv'1 x1} s4
      | s4 = -{resolve'0 x1}- s5
      | s5 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Ok'0 {self.current}
          (fun (r0'0:t_T'0) ->
            {inv'2 r0'0}
            Borrow.borrow_final <t_T'0> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed t_T'0) ->
                 [ &x <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &self <- { self with current = C_Ok'0 _ret'.final } ] 
                s1))
      | s1 = {inv'2 x.current}
        Borrow.borrow_final <t_T'0> {x.current} {Borrow.get_id x}
          (fun (_ret':borrowed t_T'0) ->
             [ &_5 <- _ret' ] 
            -{inv'2 _ret'.final}-
             [ &x <- { x with current = _ret'.final } ] 
            s2)
      | s2 =  [ &_0 <- C_Ok'1 _5 ] s3
      | s3 = {[@expl:type invariant] inv'3 x} s4
      | s4 = -{resolve'1 x}- s5
      | s5 = bb5 ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'4 self} s1 | s1 = -{resolve'2 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : borrowed (t_OwnResult'1) = self
    | & x : borrowed t_T'0 = any_l ()
    | & _5 : borrowed t_T'0 = any_l ()
    | & x1 : borrowed t_E'0 = any_l ()
    | & _7 : borrowed t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:as_mut result type invariant] [%#sown1] inv'5 result}
      {[@expl:as_mut ensures] [%#sown2] exists t : borrowed t_T'0 . self.current = C_Ok'0 (t.current)
      /\ self.final = C_Ok'0 (t.final) /\ result = C_Ok'1 t
      \/ (exists e : borrowed t_E'0 . self.current = C_Err'0 (e.current)
      /\ self.final = C_Err'0 (e.final) /\ result = C_Err'1 e)}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap [#"own.rs" 86 4 88 29] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 86 18 86 22
  let%span sown1 = "own.rs" 84 15 84 52
  let%span sown2 = "own.rs" 86 27 86 28
  let%span sown3 = "own.rs" 85 14 85 43
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_E'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_E'0)
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap'0 (self:t_OwnResult'0) (return'  (ret:t_T'0))= {[@expl:unwrap 'self' type invariant] [%#sown0] inv'1 self}
    {[@expl:unwrap requires] [%#sown1] exists t : t_T'0 . self = C_Ok'0 t}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &_e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _e} s2
      | s2 = -{resolve'0 _e}- s3
      | s3 = {false} any ]
      
    | bb4 = bb6
    | bb6 = s0 [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb7 ] 
    | bb7 = bb8
    | bb8 = return' {_0} ]
    ) [ & _0 : t_T'0 = any_l () | & self : t_OwnResult'0 = self | & t : t_T'0 = any_l () | & _e : t_E'0 = any_l () ] 
    [ return' (result:t_T'0)-> {[@expl:unwrap result type invariant] [%#sown2] inv'2 result}
      {[@expl:unwrap ensures] [%#sown3] C_Ok'0 result = self}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__expect [#"own.rs" 98 4 100 29] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 98 18 98 22
  let%span sown1 = "own.rs" 96 15 96 52
  let%span sown2 = "own.rs" 98 38 98 39
  let%span sown3 = "own.rs" 97 14 97 43
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_E'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_E'0)
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec expect'0 (self:t_OwnResult'0) (msg:string) (return'  (ret:t_T'0))= {[@expl:expect 'self' type invariant] [%#sown0] inv'1 self}
    {[@expl:expect requires] [%#sown1] exists t : t_T'0 . self = C_Ok'0 t}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &_e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _e} s2
      | s2 = -{resolve'0 _e}- s3
      | s3 = {false} any ]
      
    | bb4 = bb6
    | bb6 = s0 [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb7 ] 
    | bb7 = bb8
    | bb8 = return' {_0} ]
    ) [ & _0 : t_T'0 = any_l () | & self : t_OwnResult'0 = self | & t : t_T'0 = any_l () | & _e : t_E'0 = any_l () ] 
    [ return' (result:t_T'0)-> {[@expl:expect result type invariant] [%#sown2] inv'2 result}
      {[@expl:expect ensures] [%#sown3] C_Ok'0 result = self}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap_err [#"own.rs" 110 4 112 29] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 110 22 110 26
  let%span sown1 = "own.rs" 108 15 108 53
  let%span sown2 = "own.rs" 110 31 110 32
  let%span sown3 = "own.rs" 109 14 109 44
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_T'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_T'0)
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'0 a_0
    | C_Err'0 a_0 -> inv'2 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_err'0 (self:t_OwnResult'0) (return'  (ret:t_E'0))= {[@expl:unwrap_err 'self' type invariant] [%#sown0] inv'1 self}
    {[@expl:unwrap_err requires] [%#sown1] exists e : t_E'0 . self = C_Err'0 e}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0 [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_0 <- e ] s2 | s2 = bb7 ] 
    | bb7 = bb8
    | bb8 = return' {_0}
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &_t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _t} s2
      | s2 = -{resolve'0 _t}- s3
      | s3 = {false} any ]
       ]
    ) [ & _0 : t_E'0 = any_l () | & self : t_OwnResult'0 = self | & _t : t_T'0 = any_l () | & e : t_E'0 = any_l () ] 
    [ return' (result:t_E'0)-> {[@expl:unwrap_err result type invariant] [%#sown2] inv'2 result}
      {[@expl:unwrap_err ensures] [%#sown3] C_Err'0 result = self}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap_or [#"own.rs" 122 4 122 43] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 122 21 122 25
  let%span sown1 = "own.rs" 122 27 122 34
  let%span sown2 = "own.rs" 122 42 122 43
  let%span sown3 = "own.rs" 120 14 120 67
  let%span sown4 = "own.rs" 121 14 121 76
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_E'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate resolve'1 (_1 : t_T'0)
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'2 x] . inv'2 x
  = match x with
    | C_Ok'0 a_0 -> inv'1 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_or'0 (self:t_OwnResult'0) (default:t_T'0) (return'  (ret:t_T'0))= {[@expl:unwrap_or 'self' type invariant] [%#sown0] inv'2 self}
    {[@expl:unwrap_or 'default' type invariant] [%#sown1] inv'1 default}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 e} s2
      | s2 = -{resolve'0 e}- s3
      | s3 =  [ &_0 <- default ] s4
      | s4 = bb8 ]
      
    | bb8 = bb9
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 default} s1 | s1 = -{resolve'1 default}- s2 | s2 = bb6 ] 
    | bb6 = s0 [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb7 ] 
    | bb7 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : t_T'0 = any_l ()
    | & self : t_OwnResult'0 = self
    | & default : t_T'0 = default
    | & t : t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_T'0)-> {[@expl:unwrap_or result type invariant] [%#sown2] inv'1 result}
      {[@expl:unwrap_or ensures #0] [%#sown3] forall t : t_T'0 . self = C_Ok'0 t  -> result = t}
      {[@expl:unwrap_or ensures #1] [%#sown4] (exists e : t_E'0 . self = C_Err'0 e)  -> result = default}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap_or_default [#"own.rs" 132 4 134 19] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 138 33 138 45
  let%span sown1 = "own.rs" 132 29 132 33
  let%span sown2 = "own.rs" 132 38 132 39
  let%span sown3 = "own.rs" 130 14 130 67
  let%span sown4 = "own.rs" 131 14 131 78
  let%span sdefault5 = "../../../../creusot-contracts/src/std/default.rs" 13 26 13 45
  let%span sown6 = "own.rs" 16 8 19 9
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate inv'2 (_1 : t_E'0)
  
  predicate inv'0 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'0 x] . inv'0 x
  = match x with
    | C_Ok'0 a_0 -> inv'1 a_0
    | C_Err'0 a_0 -> inv'2 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (_1 : t_T'0)
  
  predicate resolve'3 (_1 : t_E'0)
  
  predicate resolve'1 [#"own.rs" 15 4 15 28] (self : t_OwnResult'0) =
    [%#sown6] match self with
      | C_Ok'0 t -> resolve'2 t
      | C_Err'0 e -> resolve'3 e
      end
  
  predicate resolve'0 (_1 : t_OwnResult'0) =
    resolve'1 _1
  
  predicate is_default'0 (self : t_T'0)
  
  let rec default'0 (_1:()) (return'  (ret:t_T'0))= any
    [ return' (result:t_T'0)-> {inv'1 result} {[%#sdefault5] is_default'0 result} (! return' {result}) ]
    
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_or_default'0 (self:t_OwnResult'0) (return'  (ret:t_T'0))= {[@expl:unwrap_or_default 'self' type invariant] [%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = default'0 {[%#sown0] ()} (fun (_ret':t_T'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb4 = bb6
    | bb6 = s0 [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &x <- r0'0 ] s1) | s1 =  [ &_0 <- x ] s2 | s2 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    ) [ & _0 : t_T'0 = any_l () | & self : t_OwnResult'0 = self | & x : t_T'0 = any_l () ] 
    [ return' (result:t_T'0)-> {[@expl:unwrap_or_default result type invariant] [%#sown2] inv'1 result}
      {[@expl:unwrap_or_default ensures #0] [%#sown3] forall t : t_T'0 . self = C_Ok'0 t  -> result = t}
      {[@expl:unwrap_or_default ensures #1] [%#sown4] (exists e : t_E'0 . self = C_Err'0 e)  -> is_default'0 result}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__and [#"own.rs" 144 4 144 64] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 144 18 144 22
  let%span sown1 = "own.rs" 144 24 144 27
  let%span sown2 = "own.rs" 144 49 144 64
  let%span sown3 = "own.rs" 142 14 142 71
  let%span sown4 = "own.rs" 143 14 143 84
  let%span sown5 = "own.rs" 16 8 19 9
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  type t_U'0
  
  type t_OwnResult'0  =
    | C_Ok'1 t_U'0
    | C_Err'1 t_E'0
  
  predicate inv'3 (_1 : t_U'0)
  
  predicate inv'4 (_1 : t_E'0)
  
  predicate inv'0 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'0 x] . inv'0 x
  = match x with
    | C_Ok'1 a_0 -> inv'3 a_0
    | C_Err'1 a_0 -> inv'4 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (_1 : t_U'0)
  
  predicate resolve'4 (_1 : t_E'0)
  
  predicate resolve'2 [#"own.rs" 15 4 15 28] (self : t_OwnResult'0) =
    [%#sown5] match self with
      | C_Ok'1 t -> resolve'3 t
      | C_Err'1 e -> resolve'4 e
      end
  
  predicate resolve'0 (_1 : t_OwnResult'0) =
    resolve'2 _1
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate resolve'1 (_1 : t_T'0)
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'1 [inv'2 x] . inv'2 x
  = match x with
    | C_Ok'0 a_0 -> inv'1 a_0
    | C_Err'0 a_0 -> inv'4 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec and'0 (self:t_OwnResult'1) (res:t_OwnResult'0) (return'  (ret:t_OwnResult'0))= {[@expl:and 'self' type invariant] [%#sown0] inv'2 self}
    {[@expl:and 'res' type invariant] [%#sown1] inv'0 res}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s3)
      | s3 =  [ &_0 <- C_Err'1 e ] s4
      | s4 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &x <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = bb7 ]
      
    | bb7 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & res : t_OwnResult'0 = res
    | & x : t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:and result type invariant] [%#sown2] inv'0 result}
      {[@expl:and ensures #0] [%#sown3] (exists t : t_T'0 . self = C_Ok'0 t)  -> result = res}
      {[@expl:and ensures #1] [%#sown4] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Err'1 e}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__or [#"own.rs" 154 4 154 63] (* OwnResult<T, E> *)
  let%span sown0 = "own.rs" 154 17 154 21
  let%span sown1 = "own.rs" 154 23 154 26
  let%span sown2 = "own.rs" 154 48 154 63
  let%span sown3 = "own.rs" 152 14 152 82
  let%span sown4 = "own.rs" 153 14 153 72
  let%span sown5 = "own.rs" 16 8 19 9
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'0 (_1 : t_E'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_E'0)
  
  type t_F'0
  
  type t_OwnResult'0  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_F'0
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'4 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'1 a_0 -> inv'3 a_0
    | C_Err'1 a_0 -> inv'4 a_0
    end
  
  predicate resolve'3 (_1 : t_T'0)
  
  predicate resolve'4 (_1 : t_F'0)
  
  predicate resolve'2 [#"own.rs" 15 4 15 28] (self : t_OwnResult'0) =
    [%#sown5] match self with
      | C_Ok'1 t -> resolve'3 t
      | C_Err'1 e -> resolve'4 e
      end
  
  predicate resolve'1 (_1 : t_OwnResult'0) =
    resolve'2 _1
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'2 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'1 [inv'2 x] . inv'2 x
  = match x with
    | C_Ok'0 a_0 -> inv'3 a_0
    | C_Err'0 a_0 -> inv'0 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec or'0 (self:t_OwnResult'1) (res:t_OwnResult'0) (return'  (ret:t_OwnResult'0))= {[@expl:or 'self' type invariant] [%#sown0] inv'2 self}
    {[@expl:or 'res' type invariant] [%#sown1] inv'1 res}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 e} s2
      | s2 = -{resolve'0 e}- s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 res} s1 | s1 = -{resolve'1 res}- s2 | s2 = bb6 ] 
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &v <- r0'0 ] s1) | s1 =  [ &_0 <- C_Ok'1 v ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & res : t_OwnResult'0 = res
    | & v : t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:or result type invariant] [%#sown2] inv'1 result}
      {[@expl:or ensures #0] [%#sown3] forall t : t_T'0 . self = C_Ok'0 t  -> result = C_Ok'1 t}
      {[@expl:or ensures #1] [%#sown4] (exists e : t_E'0 . self = C_Err'0 e)  -> result = res}
      (! return' {result}) ]
    
end
module M_own__qyi13172074075585881807__copied [#"own.rs" 166 4 168 16] (* OwnResult<&T, E> *)
  let%span sown0 = "own.rs" 166 18 166 22
  let%span sown1 = "own.rs" 166 27 166 42
  let%span sown2 = "own.rs" 164 14 164 84
  let%span sown3 = "own.rs" 165 14 165 84
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_OwnResult'0  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_E'0
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'0 (self : t_T'0) =
    [%#sinvariant4] inv'4 self
  
  predicate inv'2 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'0 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'1 [inv'0 x] . inv'0 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'1 a_0 -> inv'4 a_0
    | C_Err'1 a_0 -> inv'3 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec copied'0 (self:t_OwnResult'1) (return'  (ret:t_OwnResult'0))= {[@expl:copied 'self' type invariant] [%#sown0] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_0 <- C_Err'1 e ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- C_Ok'1 t ] s2 | s2 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & t : t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:copied result type invariant] [%#sown1] inv'1 result}
      {[@expl:copied ensures #0] [%#sown2] forall t : t_T'0 . self = C_Ok'0 t  -> result = C_Ok'1 t}
      {[@expl:copied ensures #1] [%#sown3] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Err'1 e}
      (! return' {result}) ]
    
end
module M_own__qyi13172074075585881807__cloned [#"own.rs" 179 4 181 17] (* OwnResult<&T, E> *)
  let%span sown0 = "own.rs" 179 18 179 22
  let%span sown1 = "own.rs" 179 27 179 42
  let%span sown2 = "own.rs" 177 14 177 84
  let%span sown3 = "own.rs" 178 14 178 84
  let%span sclone4 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_OwnResult'0  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_E'0
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate invariant'0 (self : t_T'0) =
    [%#sinvariant5] inv'3 self
  
  predicate inv'2 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  let rec clone'0 (self:t_T'0) (return'  (ret:t_T'0))= {[@expl:clone 'self' type invariant] inv'2 self}
    any [ return' (result:t_T'0)-> {inv'3 result} {[%#sclone4] result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  predicate inv'4 (_1 : t_E'0)
  
  predicate inv'0 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'1 [inv'0 x] . inv'0 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'4 a_0
    end
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'1 a_0 -> inv'3 a_0
    | C_Err'1 a_0 -> inv'4 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec cloned'0 (self:t_OwnResult'1) (return'  (ret:t_OwnResult'0))= {[@expl:cloned 'self' type invariant] [%#sown0] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_0 <- C_Err'1 e ] s2 | s2 = bb9 ]
      
    | bb9 = bb10
    | bb10 = bb11
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_T'0) ->  [ &t <- r0'0 ] s1)
      | s1 = clone'0 {t} (fun (_ret':t_T'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- C_Ok'1 _6 ] s1 | s1 = bb8 ] 
    | bb8 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & t : t_T'0 = any_l ()
    | & _6 : t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:cloned result type invariant] [%#sown1] inv'1 result}
      {[@expl:cloned ensures #0] [%#sown2] forall t : t_T'0 . self = C_Ok'0 t  -> result = C_Ok'1 t}
      {[@expl:cloned ensures #1] [%#sown3] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Err'1 e}
      (! return' {result}) ]
    
end
module M_own__qyi10012309719472384256__copied [#"own.rs" 194 4 196 16] (* OwnResult<&mut T, E> *)
  let%span sown0 = "own.rs" 194 18 194 22
  let%span sown1 = "own.rs" 194 27 194 42
  let%span sown2 = "own.rs" 192 14 192 103
  let%span sown3 = "own.rs" 193 14 193 84
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 (borrowed t_T'0)
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_OwnResult'0  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_E'0
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:borrowed t_T'0))= any
    [ good (field_0:borrowed t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : borrowed t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input}
      (! {false}
      any) ]
    
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'0 (self : borrowed t_T'0) =
    [%#sinvariant5] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t_T'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed t_T'0) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_T'0) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'1 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'0 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate inv'2 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_OwnResult'0 [inv'2 x] . inv'2 x
  = match x with
    | C_Ok'1 a_0 -> inv'4 a_0
    | C_Err'1 a_0 -> inv'3 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec copied'0 (self:t_OwnResult'1) (return'  (ret:t_OwnResult'0))= {[@expl:copied 'self' type invariant] [%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:borrowed t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_0 <- C_Err'1 e ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:borrowed t_T'0) ->  [ &t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 t} s2
      | s2 = -{resolve'0 t}- s3
      | s3 =  [ &_0 <- C_Ok'1 (t.current) ] s4
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & t : borrowed t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:copied result type invariant] [%#sown1] inv'2 result}
      {[@expl:copied ensures #0] [%#sown2] forall t : borrowed t_T'0 . self = C_Ok'0 t
       -> result = C_Ok'1 (t.current) /\ resolve'0 t}
      {[@expl:copied ensures #1] [%#sown3] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Err'1 e}
      (! return' {result}) ]
    
end
module M_own__qyi10012309719472384256__cloned [#"own.rs" 207 4 209 17] (* OwnResult<&mut T, E> *)
  let%span sown0 = "own.rs" 207 18 207 22
  let%span sown1 = "own.rs" 207 27 207 42
  let%span sown2 = "own.rs" 205 14 205 103
  let%span sown3 = "own.rs" 206 14 206 84
  let%span sclone4 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'1  =
    | C_Ok'0 (borrowed t_T'0)
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'1) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'1] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_OwnResult'0  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_E'0
  
  let rec v_Ok'0 (input:t_OwnResult'1) (ret  (field_0:borrowed t_T'0))= any
    [ good (field_0:borrowed t_T'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : borrowed t_T'0 [C_Ok'0 field_0 : t_OwnResult'1] . C_Ok'0 field_0 <> input}
      (! {false}
      any) ]
    
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'1 (self : t_T'0) =
    [%#sinvariant7] inv'4 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  let rec clone'0 (self:t_T'0) (return'  (ret:t_T'0))= {[@expl:clone 'self' type invariant] inv'3 self}
    any [ return' (result:t_T'0)-> {inv'4 result} {[%#sclone4] result = self} (! return' {result}) ] 
  
  predicate invariant'0 (self : borrowed t_T'0) =
    [%#sinvariant6] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t_T'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed t_T'0) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t_T'0) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  predicate inv'5 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'1 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'0 a_0
    | C_Err'0 a_0 -> inv'5 a_0
    end
  
  predicate inv'2 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_OwnResult'0 [inv'2 x] . inv'2 x
  = match x with
    | C_Ok'1 a_0 -> inv'4 a_0
    | C_Err'1 a_0 -> inv'5 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec cloned'0 (self:t_OwnResult'1) (return'  (ret:t_OwnResult'0))= {[@expl:cloned 'self' type invariant] [%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (x0:borrowed t_T'0)-> {self = C_Ok'0 x0} (! bb4) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_0 <- C_Err'1 e ] s2 | s2 = bb9 ]
      
    | bb9 = bb10
    | bb10 = bb11
    | bb4 = bb6
    | bb6 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:borrowed t_T'0) ->  [ &t <- r0'0 ] s1)
      | s1 = clone'0 {t.current} (fun (_ret':t_T'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'0 t} s1 | s1 = -{resolve'0 t}- s2 | s2 =  [ &_0 <- C_Ok'1 _6 ] s3 | s3 = bb8 ]
      
    | bb8 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : t_OwnResult'0 = any_l ()
    | & self : t_OwnResult'1 = self
    | & t : borrowed t_T'0 = any_l ()
    | & _6 : t_T'0 = any_l ()
    | & e : t_E'0 = any_l () ]
    
    [ return' (result:t_OwnResult'0)-> {[@expl:cloned result type invariant] [%#sown1] inv'2 result}
      {[@expl:cloned ensures #0] [%#sown2] forall t : borrowed t_T'0 . self = C_Ok'0 t
       -> result = C_Ok'1 (t.current) /\ resolve'0 t}
      {[@expl:cloned ensures #1] [%#sown3] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Err'1 e}
      (! return' {result}) ]
    
end
module M_own__qyi12833551122006947340__transpose [#"own.rs" 223 4 223 53] (* OwnResult<std::option::Option<T>, E> *)
  let%span sown0 = "own.rs" 223 21 223 25
  let%span sown1 = "own.rs" 223 30 223 53
  let%span sown2 = "own.rs" 220 14 220 60
  let%span sown3 = "own.rs" 221 14 221 94
  let%span sown4 = "own.rs" 222 14 222 90
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'1 t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 (t_Option'0)
    | C_Err'0 t_E'0
  
  let rec v_Err'0 (input:t_OwnResult'0) (ret  (field_0:t_E'0))= any
    [ good (field_0:t_E'0)-> {C_Err'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_E'0 [C_Err'0 field_0 : t_OwnResult'0] . C_Err'0 field_0 <> input} (! {false} any) ]
    
  
  type t_OwnResult'1  =
    | C_Ok'1 t_T'0
    | C_Err'1 t_E'0
  
  type t_Option'1  =
    | C_None'1
    | C_Some'0 (t_OwnResult'1)
  
  let rec v_Ok'0 (input:t_OwnResult'0) (ret  (field_0:t_Option'0))= any
    [ good (field_0:t_Option'0)-> {C_Ok'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_Option'0 [C_Ok'0 field_0 : t_OwnResult'0] . C_Ok'0 field_0 <> input} (! {false} any) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:t_T'0))= any
    [ good (field_0:t_T'0)-> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : t_T'0 [C_Some'1 field_0 : t_Option'0] . C_Some'1 field_0 <> input} (! {false} any) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x
  = match x with
    | C_None'0 -> true
    | C_Some'1 a_0 -> inv'5 a_0
    end
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'0 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'0 x] . inv'0 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate inv'4 (_1 : t_OwnResult'1)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_OwnResult'1 [inv'4 x] . inv'4 x
  = match x with
    | C_Ok'1 a_0 -> inv'5 a_0
    | C_Err'1 a_0 -> inv'3 a_0
    end
  
  predicate inv'1 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'1 x] . inv'1 x
  = match x with
    | C_None'1 -> true
    | C_Some'0 a_0 -> inv'4 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec transpose'0 (self:t_OwnResult'0) (return'  (ret:t_Option'1))= {[@expl:transpose 'self' type invariant] [%#sown0] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = any [ br0 (x0:t_Option'0)-> {self = C_Ok'0 x0} (! bb5) | br1 (x0:t_E'0)-> {self = C_Err'0 x0} (! bb8) ] 
    | bb8 = s0
      [ s0 = v_Err'0 {self} (fun (r0'0:t_E'0) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_11 <- C_Err'1 e ] s2 | s2 = bb14 ]
      
    | bb14 = s0 [ s0 =  [ &_0 <- C_Some'0 _11 ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = bb17
    | bb5 = v_Ok'0 {self}
        (fun (r0'0:t_Option'0) ->
          any [ br0 -> {r0'0 = C_None'0 } (! bb7) | br1 (x0:t_T'0)-> {r0'0 = C_Some'1 x0} (! bb6) ] )
    | bb6 = bb9
    | bb9 = s0
      [ s0 = v_Ok'0 {self} (fun (r0'0:t_Option'0) -> v_Some'0 {r0'0} (fun (r0'1:t_T'0) ->  [ &x <- r0'1 ] s1))
      | s1 =  [ &_8 <- C_Ok'1 x ] s2
      | s2 = bb10 ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- C_Some'0 _8 ] s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb17
    | bb7 = bb13
    | bb13 = s0 [ s0 =  [ &_0 <- C_None'1 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : t_OwnResult'0 = self
    | & x : t_T'0 = any_l ()
    | & _8 : t_OwnResult'1 = any_l ()
    | & e : t_E'0 = any_l ()
    | & _11 : t_OwnResult'1 = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:transpose result type invariant] [%#sown1] inv'1 result}
      {[@expl:transpose ensures #0] [%#sown2] self = C_Ok'0 (C_None'0)  -> result = C_None'1}
      {[@expl:transpose ensures #1] [%#sown3] forall t : t_T'0 . self = C_Ok'0 (C_Some'1 t)
       -> result = C_Some'0 (C_Ok'1 t)}
      {[@expl:transpose ensures #2] [%#sown4] forall e : t_E'0 . self = C_Err'0 e  -> result = C_Some'0 (C_Err'1 e)}
      (! return' {result}) ]
    
end
module M_own__qyi3410529601998764826__resolve_coherence__refines [#"own.rs" 26 4 26 31] (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  let%span sown0 = "own.rs" 26 4 26 31
  let%span sown1 = "own.rs" 16 8 19 9
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_E'0
  
  type t_OwnResult'0  =
    | C_Ok'0 t_T'0
    | C_Err'0 t_E'0
  
  predicate resolve'1 (_1 : t_T'0)
  
  predicate resolve'2 (_1 : t_E'0)
  
  predicate structural_resolve'0 (_1 : t_OwnResult'0) =
    match _1 with
      | C_Ok'0 x0 -> resolve'1 x0
      | C_Err'0 x0 -> resolve'2 x0
      end
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'3 (_1 : t_E'0)
  
  predicate inv'1 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_OwnResult'0 [inv'1 x] . inv'1 x
  = match x with
    | C_Ok'0 a_0 -> inv'2 a_0
    | C_Err'0 a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : t_OwnResult'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_OwnResult'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_OwnResult'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"own.rs" 15 4 15 28] (self : t_OwnResult'0) =
    [%#sown1] match self with
      | C_Ok'0 t -> resolve'1 t
      | C_Err'0 e -> resolve'2 e
      end
  
  goal refines : [%#sown0] forall self : t_OwnResult'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
