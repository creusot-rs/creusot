
module Own_OwnResult_Type
  type t_ownresult 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  function any_l (_ : 'b) : 'a
  let rec ok < 't > < 'e > (input:t_ownresult 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  let rec err < 't > < 'e > (input:t_ownresult 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Own_Impl0_IsOk
  type t
  type e
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec is_ok (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= {[#"../own.rs" 25 18 25 22] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb2)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb1) ]
         ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- false ] s1 | s1 = bb4 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &_0 <- true ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool | & self : Own_OwnResult_Type.t_ownresult t e = self ] 
    [ return' (result:bool)-> {[@expl:postcondition] [#"../own.rs" 24 14 24 62] result
      = (exists t : t . inv'1 t /\ self = Own_OwnResult_Type.C_Ok t)}
      (! return' {result}) ]
    
end
module Own_Impl0_IsErr
  type t
  type e
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  predicate invariant'1 (self : e)
  let rec invariant'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : e)
  let rec inv'1 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : e . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  let rec is_ok'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= {[@expl:precondition] [#"../own.rs" 25 18 25 22] inv'0 self}
    any
    [ return' (result:bool)-> {[#"../own.rs" 24 14 24 62] result
      = (exists t : t . inv'2 t /\ self = Own_OwnResult_Type.C_Ok t)}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec is_err (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= {[#"../own.rs" 30 19 30 23] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = is_ok'0 {self} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- not _3 ] (any [ any_ (_any:bool)-> (!  [ &_3 <- _any ] s1) ] ) | s1 = return' {_0} ]  ]
    )
    [ & _0 : bool = any_l () : bool
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & _3 : bool = any_l () : bool ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../own.rs" 29 14 29 63] result
      = (exists e : e . inv'1 e /\ self = Own_OwnResult_Type.C_Err e)}
      (! return' {result}) ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Own_Impl0_Ok
  type t
  type e
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option t)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option t)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option t . inv'3 x = true
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  predicate invariant'1 (self : e)
  let rec invariant'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : e)
  let rec inv'1 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : e . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : e)
  let rec resolve'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'2 t
      | Own_OwnResult_Type.C_Err e -> resolve'1 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec ok (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:Core_Option_Option_Type.t_option t))= {[#"../own.rs" 36 14 36 18] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 37 14 37 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 x1} s2
      | s2 = -{resolve'1 x1}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option t ] s6
      | s6 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Core_Option_Option_Type.C_Some x : Core_Option_Option_Type.t_option t ] 
        (any [ any_ (_any:t)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option t = any_l () : Core_Option_Option_Type.t_option t
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & x : t = any_l () : t
    | & x1 : e = any_l () : e ]
    
    [ return' (result:Core_Option_Option_Type.t_option t)-> {[@expl:postcondition] [#"../own.rs" 36 23 36 32] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 35 4 35 75] (exists e : e . inv'1 e /\ self = Own_OwnResult_Type.C_Err e)
       -> result = Core_Option_Option_Type.C_None}
      {[@expl:postcondition] [#"../own.rs" 34 4 34 75] forall t : t . inv'2 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Core_Option_Option_Type.C_Some t}
      (! return' {result}) ]
    
end
module Own_Impl0_Err
  type t
  type e
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option e)
  let rec invariant'3 (self:Core_Option_Option_Type.t_option e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option e)
  let rec inv'3 (_x:Core_Option_Option_Type.t_option e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option e . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec err (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:Core_Option_Option_Type.t_option e))= {[#"../own.rs" 46 15 46 19] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 47 14 47 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Core_Option_Option_Type.C_Some x1 : Core_Option_Option_Type.t_option e ] 
        (any [ any_ (_any:e)-> (!  [ &x1 <- _any ] s4) ] )
      | s4 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option e ] s6
      | s6 = bb7 ]
      
    | bb7 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option e = any_l () : Core_Option_Option_Type.t_option e
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & x : t = any_l () : t
    | & x1 : e = any_l () : e ]
    
    [ return' (result:Core_Option_Option_Type.t_option e)-> {[@expl:postcondition] [#"../own.rs" 46 24 46 33] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 45 4 45 76] forall e : e . inv'2 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Core_Option_Option_Type.C_Some e}
      {[@expl:postcondition] [#"../own.rs" 44 4 44 74] (exists t : t . inv'1 t /\ self = Own_OwnResult_Type.C_Ok t)
       -> result = Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
end
module Own_Impl0_AsRef
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'3 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'3 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'3 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'3 x = true
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  predicate invariant'1 (self : e)
  let rec invariant'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : e)
  let rec inv'1 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : e . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate resolve'1 (self : e)
  let rec resolve'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec as_ref (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:Own_OwnResult_Type.t_ownresult t e))= {[#"../own.rs" 56 19 56 23] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb2)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb3) ]
         ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 57 14 57 19] false} any ]
      
    | bb3 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self} (fun (r0'0:e) ->  [ &x1 <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 x1} s4
      | s4 = -{resolve'1 x1}- s5
      | s5 =  [ &_0 <- Own_OwnResult_Type.C_Err x1 : Own_OwnResult_Type.t_ownresult t e ] s6
      | s6 = bb5 ]
      
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'2 x} s4
      | s4 = -{resolve'2 x}- s5
      | s5 =  [ &_0 <- Own_OwnResult_Type.C_Ok x : Own_OwnResult_Type.t_ownresult t e ] s6
      | s6 = bb5 ]
      
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & x : t = any_l () : t
    | & x1 : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult t e)-> {[@expl:postcondition] [#"../own.rs" 56 28 56 45] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 55 4 55 89] forall e : e . inv'1 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e}
      {[@expl:postcondition] [#"../own.rs" 54 4 54 87] forall t : t . inv'2 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl0_AsMut
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'5 (self : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e))
  let rec invariant'5 (self:Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e))
  let rec inv'5 (_x:Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e) . inv'5 x = true
  predicate invariant'4 (self : borrowed t)
  let rec invariant'4 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed t)
  let rec inv'4 (_x:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed t . inv'4 x = true
  predicate invariant'3 (self : t)
  let rec invariant'3 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : t)
  let rec inv'3 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : t . inv'3 x = true
  predicate invariant'2 (self : borrowed e)
  let rec invariant'2 (self:borrowed e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed e)
  let rec inv'2 (_x:borrowed e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed e . inv'2 x = true
  predicate invariant'1 (self : e)
  let rec invariant'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : e)
  let rec inv'1 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : e . inv'1 x = true
  predicate invariant'0 (self : borrowed (Own_OwnResult_Type.t_ownresult t e))
  let rec invariant'0 (self:borrowed (Own_OwnResult_Type.t_ownresult t e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (Own_OwnResult_Type.t_ownresult t e))
  let rec inv'0 (_x:borrowed (Own_OwnResult_Type.t_ownresult t e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (Own_OwnResult_Type.t_ownresult t e) . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : borrowed e) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Own_OwnResult_Type.t_ownresult t e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec as_mut (self:borrowed (Own_OwnResult_Type.t_ownresult t e)) (return'  (ret:Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)))= {[#"../own.rs" 71 23 71 27] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:t)-> { * self = Own_OwnResult_Type.C_Ok a} (! bb2)
        | br1 (a:e)-> { * self = Own_OwnResult_Type.C_Err a} (! bb3) ]
         ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 72 14 72 19] false} any ]
      
    | bb3 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> { * self}
          (fun (r0'0:e) ->
            Borrow.borrow_final <e> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed e) ->
                 [ &x1 <- _ret' ] 
                Own_OwnResult_Type.err <t> <e> { * self}
                  (fun (l_0'0:e) ->
                    
                    [ &self <- { self with current = (Own_OwnResult_Type.C_Err ( ^ x1) : Own_OwnResult_Type.t_ownresult t e) ; } ]
                    
                    s1)))
      | s1 = -{inv'1 ( ^ x1)}- s2
      | s2 = Borrow.borrow_final <e> { * x1} {Borrow.get_id x1}
          (fun (_ret':borrowed e) ->  [ &_7 <- _ret' ]  [ &x1 <- { x1 with current = ( ^ _7) ; } ] s3)
      | s3 = -{inv'1 ( ^ _7)}- s4
      | s4 =  [ &_0 <- Own_OwnResult_Type.C_Err _7 : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e) ] 
        (any [ any_ (_any:borrowed e)-> (!  [ &_7 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'2 x1} s6
      | s6 = -{resolve'1 x1}- s7
      | s7 = bb5 ]
      
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> { * self}
          (fun (r0'0:t) ->
            Borrow.borrow_final <t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed t) ->
                 [ &x <- _ret' ] 
                Own_OwnResult_Type.ok <t> <e> { * self}
                  (fun (l_0'0:t) ->
                    
                    [ &self <- { self with current = (Own_OwnResult_Type.C_Ok ( ^ x) : Own_OwnResult_Type.t_ownresult t e) ; } ]
                    
                    s1)))
      | s1 = -{inv'3 ( ^ x)}- s2
      | s2 = Borrow.borrow_final <t> { * x} {Borrow.get_id x}
          (fun (_ret':borrowed t) ->  [ &_5 <- _ret' ]  [ &x <- { x with current = ( ^ _5) ; } ] s3)
      | s3 = -{inv'3 ( ^ _5)}- s4
      | s4 =  [ &_0 <- Own_OwnResult_Type.C_Ok _5 : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e) ] 
        (any [ any_ (_any:borrowed t)-> (!  [ &_5 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'4 x} s6
      | s6 = -{resolve'2 x}- s7
      | s7 = bb5 ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e) = any_l () : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)
    | & self : borrowed (Own_OwnResult_Type.t_ownresult t e) = self
    | & x : borrowed t = any_l () : borrowed t
    | & _5 : borrowed t = any_l () : borrowed t
    | & x1 : borrowed e = any_l () : borrowed e
    | & _7 : borrowed e = any_l () : borrowed e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e))-> {[@expl:postcondition] [#"../own.rs" 71 32 71 57] inv'5 result}
      {[@expl:postcondition] [#"../own.rs" 63 4 70 6] exists t : borrowed t . inv'4 t
      /\ ( * self = Own_OwnResult_Type.C_Ok ( * t)
      /\  ^ self = Own_OwnResult_Type.C_Ok ( ^ t) /\ result = Own_OwnResult_Type.C_Ok t
      \/ (exists e : borrowed e . inv'2 e
      /\  * self = Own_OwnResult_Type.C_Err ( * e)
      /\  ^ self = Own_OwnResult_Type.C_Err ( ^ e) /\ result = Own_OwnResult_Type.C_Err e))}
      (! return' {result}) ]
    
end
module Own_Impl0_Unwrap
  type t
  type e
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  predicate invariant'1 (self : e)
  let rec invariant'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : e)
  let rec inv'1 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : e . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : e)
  let rec resolve'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'2 t
      | Own_OwnResult_Type.C_Err e -> resolve'1 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec unwrap (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:t))= {[#"../own.rs" 80 18 80 22] inv'0 self}
    {[#"../own.rs" 78 4 78 54] exists t : t . inv'2 t /\ self = Own_OwnResult_Type.C_Ok t}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 84 14 84 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &_e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 _e} s2
      | s2 = -{resolve'1 _e}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = {false} any ]
      
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- t ] (any [ any_ (_any:t)-> (!  [ &t <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : t = any_l () : t
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & t : t = any_l () : t
    | & _e : e = any_l () : e ]
    
    [ return' (result:t)-> {[@expl:postcondition] [#"../own.rs" 80 27 80 28] inv'2 result}
      {[@expl:postcondition] [#"../own.rs" 79 14 79 43] Own_OwnResult_Type.C_Ok result = self}
      (! return' {result}) ]
    
end
module Own_Impl0_Expect
  type t
  type e
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  predicate invariant'1 (self : e)
  let rec invariant'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : e)
  let rec inv'1 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : e . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'1 (self : e)
  let rec resolve'1 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'2 t
      | Own_OwnResult_Type.C_Err e -> resolve'1 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec expect (self:Own_OwnResult_Type.t_ownresult t e) (msg:string) (return'  (ret:t))= {[#"../own.rs" 92 18 92 22] inv'0 self}
    {[#"../own.rs" 90 4 90 54] exists t : t . inv'2 t /\ self = Own_OwnResult_Type.C_Ok t}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 96 14 96 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &_e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 _e} s2
      | s2 = -{resolve'1 _e}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = {false} any ]
      
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- t ] (any [ any_ (_any:t)-> (!  [ &t <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : t = any_l () : t
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & t : t = any_l () : t
    | & _e : e = any_l () : e ]
    
    [ return' (result:t)-> {[@expl:postcondition] [#"../own.rs" 92 38 92 39] inv'2 result}
      {[@expl:postcondition] [#"../own.rs" 91 14 91 43] Own_OwnResult_Type.C_Ok result = self}
      (! return' {result}) ]
    
end
module Own_Impl0_UnwrapErr
  type t
  type e
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec unwrap_err (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:e))= {[#"../own.rs" 104 22 104 26] inv'0 self}
    {[#"../own.rs" 102 4 102 55] exists e : e . inv'2 e /\ self = Own_OwnResult_Type.C_Err e}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 108 14 108 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &_t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 _t} s2
      | s2 = -{resolve'1 _t}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = {false} any ]
       ]
    )
    [ & _0 : e = any_l () : e
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & _t : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:e)-> {[@expl:postcondition] [#"../own.rs" 104 31 104 32] inv'2 result}
      {[@expl:postcondition] [#"../own.rs" 103 14 103 44] Own_OwnResult_Type.C_Err result = self}
      (! return' {result}) ]
    
end
module Own_Impl0_UnwrapOr
  type t
  type e
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'1 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'1 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'1 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate resolve'1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'0 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'1 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec unwrap_or (self:Own_OwnResult_Type.t_ownresult t e) (default:t) (return'  (ret:t))= {[#"../own.rs" 116 27 116 34] inv'0 default}
    {[#"../own.rs" 116 21 116 25] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 default} s1
      | s1 = -{resolve'0 default}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[#"../own.rs" 117 14 117 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 e} s2
      | s2 = -{resolve'2 e}- s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- default ] (any [ any_ (_any:t)-> (!  [ &default <- _any ] s6) ] )
      | s6 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 default} s1
      | s1 = -{resolve'0 default}- s2
      | s2 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s3)) ]
            ))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- t ] (any [ any_ (_any:t)-> (!  [ &t <- _any ] s6) ] )
      | s6 = bb7 ]
      
    | bb7 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : t = any_l () : t
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & default : t = default
    | & t : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:t)-> {[@expl:postcondition] [#"../own.rs" 116 42 116 43] inv'0 result}
      {[@expl:postcondition] [#"../own.rs" 115 4 115 78] (exists e : e . inv'2 e /\ self = Own_OwnResult_Type.C_Err e)
       -> result = default}
      {[@expl:postcondition] [#"../own.rs" 114 4 114 69] forall t : t . inv'0 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = t}
      (! return' {result}) ]
    
end
module Own_Impl0_UnwrapOrDefault
  type t
  type e
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  predicate is_default'0 (self : t)
  let rec is_default'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_default'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec default'0 (_1:()) (return'  (ret:t))= any
    [ return' (result:t)-> {inv'1 result}
      {[#"../../../../../creusot-contracts/src/std/default.rs" 13 26 13 45] is_default'0 result}
      (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec unwrap_or_default (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:t))= {[#"../own.rs" 126 29 126 33] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 130 14 130 18] false} any ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = default'0 {[#"../own.rs" 132 33 132 45] ()} (fun (_ret':t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- x ] (any [ any_ (_any:t)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : t = any_l () : t | & self : Own_OwnResult_Type.t_ownresult t e = self | & x : t = any_l () : t ] 
    [ return' (result:t)-> {[@expl:postcondition] [#"../own.rs" 126 38 126 39] inv'1 result}
      {[@expl:postcondition] [#"../own.rs" 125 4 125 80] (exists e : e . inv'2 e /\ self = Own_OwnResult_Type.C_Err e)
       -> is_default'0 result}
      {[@expl:postcondition] [#"../own.rs" 124 4 124 69] forall t : t . inv'1 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = t}
      (! return' {result}) ]
    
end
module Own_Impl0_And
  type t
  type e
  type u
  predicate invariant'3 (self : e)
  let rec invariant'3 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : e)
  let rec inv'3 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : e . inv'3 x = true
  predicate invariant'2 (self : t)
  let rec invariant'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : t)
  let rec inv'2 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : t . inv'2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'1 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'1 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'1 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult u e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult u e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult u e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult u e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult u e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : t)
  let rec resolve'2 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'4 (self : e)
  let rec resolve'4 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'2 t
      | Own_OwnResult_Type.C_Err e -> resolve'4 e
      end
  let rec resolve'1 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'3 (self : u)
  let rec resolve'3 (self:u) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult u e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'3 t
      | Own_OwnResult_Type.C_Err e -> resolve'4 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult u e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec and (self:Own_OwnResult_Type.t_ownresult t e) (res:Own_OwnResult_Type.t_ownresult u e) (return'  (ret:Own_OwnResult_Type.t_ownresult u e))= {[#"../own.rs" 138 24 138 27] inv'0 res}
    {[#"../own.rs" 138 18 138 22] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[#"../own.rs" 139 14 139 18] false} any ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s3)) ]
            ))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- Own_OwnResult_Type.C_Err e : Own_OwnResult_Type.t_ownresult u e ] 
        (any [ any_ (_any:e)-> (!  [ &e <- _any ] s6) ] )
      | s6 = bb8 ]
      
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 x} s2
      | s2 = -{resolve'2 x}- s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- res ] (any [ any_ (_any:Own_OwnResult_Type.t_ownresult u e)-> (!  [ &res <- _any ] s6) ] )
      | s6 = bb7 ]
      
    | bb7 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult u e = any_l () : Own_OwnResult_Type.t_ownresult u e
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & res : Own_OwnResult_Type.t_ownresult u e = res
    | & x : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult u e)-> {[@expl:postcondition] [#"../own.rs" 138 49 138 64] inv'0 result}
      {[@expl:postcondition] [#"../own.rs" 137 4 137 86] forall e : e . inv'3 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e}
      {[@expl:postcondition] [#"../own.rs" 136 4 136 73] (exists t : t . inv'2 t /\ self = Own_OwnResult_Type.C_Ok t)
       -> result = res}
      (! return' {result}) ]
    
end
module Own_Impl0_Or
  type t
  type e
  type f
  predicate invariant'3 (self : t)
  let rec invariant'3 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : t)
  let rec inv'3 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ] 
  axiom inv'3 : forall x : t . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'1 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'1 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'1 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t f)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t f)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t f . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'3 (self : t)
  let rec resolve'3 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'3 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'1 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'4 (self : f)
  let rec resolve'4 (self:f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'4 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t f) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'3 t
      | Own_OwnResult_Type.C_Err e -> resolve'4 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t f) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec or (self:Own_OwnResult_Type.t_ownresult t e) (res:Own_OwnResult_Type.t_ownresult t f) (return'  (ret:Own_OwnResult_Type.t_ownresult t f))= {[#"../own.rs" 148 23 148 26] inv'0 res}
    {[#"../own.rs" 148 17 148 21] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[#"../own.rs" 149 14 149 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 e} s2
      | s2 = -{resolve'2 e}- s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- res ] (any [ any_ (_any:Own_OwnResult_Type.t_ownresult t f)-> (!  [ &res <- _any ] s6) ] )
      | s6 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = Own_OwnResult_Type.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &v <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult t e ] s3)) ]
            ))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- Own_OwnResult_Type.C_Ok v : Own_OwnResult_Type.t_ownresult t f ] 
        (any [ any_ (_any:t)-> (!  [ &v <- _any ] s6) ] )
      | s6 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult t f = any_l () : Own_OwnResult_Type.t_ownresult t f
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & res : Own_OwnResult_Type.t_ownresult t f = res
    | & v : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult t f)-> {[@expl:postcondition] [#"../own.rs" 148 48 148 63] inv'0 result}
      {[@expl:postcondition] [#"../own.rs" 147 4 147 74] (exists e : e . inv'2 e /\ self = Own_OwnResult_Type.C_Err e)
       -> result = res}
      {[@expl:postcondition] [#"../own.rs" 146 4 146 84] forall t : t . inv'3 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl1_Copied
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'3 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'3 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'3 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  let rec copied (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:Own_OwnResult_Type.t_ownresult t e))= {[#"../own.rs" 160 18 160 22] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 165 14 165 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Own_OwnResult_Type.C_Err e : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 =  [ &_0 <- Own_OwnResult_Type.C_Ok t : Own_OwnResult_Type.t_ownresult t e ] s6
      | s6 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & t : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult t e)-> {[@expl:postcondition] [#"../own.rs" 160 27 160 42] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 159 4 159 86] forall e : e . inv'2 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e}
      {[@expl:postcondition] [#"../own.rs" 158 4 158 86] forall t : t . inv'1 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl1_Cloned
  type t
  type e
  predicate invariant'4 (self : t)
  let rec invariant'4 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : t)
  let rec inv'4 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : t . inv'4 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'3 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'3 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'3 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Borrow
  let rec clone'0 (self:t) (return'  (ret:t))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:t)-> {inv'4 result}
      {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  predicate resolve'1 (self : t)
  let rec resolve'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec cloned (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:Own_OwnResult_Type.t_ownresult t e))= {[#"../own.rs" 173 18 173 22] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 178 14 178 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult t e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Own_OwnResult_Type.C_Err e : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 = clone'0 {t} (fun (_ret':t) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &_0 <- Own_OwnResult_Type.C_Ok _6 : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:t)-> (!  [ &_6 <- _any ] s1) ] )
      | s1 = bb8 ]
      
    | bb8 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e
    | & self : Own_OwnResult_Type.t_ownresult t e = self
    | & t : t = any_l () : t
    | & _6 : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult t e)-> {[@expl:postcondition] [#"../own.rs" 173 27 173 42] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 172 4 172 86] forall e : e . inv'2 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e}
      {[@expl:postcondition] [#"../own.rs" 171 4 171 86] forall t : t . inv'1 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl2_Copied
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'3 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'3 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'3 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  use prelude.Borrow
  predicate invariant'1 (self : borrowed t)
  let rec invariant'1 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed t)
  let rec inv'1 (_x:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult (borrowed t) e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec copied (self:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:Own_OwnResult_Type.t_ownresult t e))= {[#"../own.rs" 188 18 188 22] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:borrowed t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 193 14 193 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <borrowed t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <borrowed t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult (borrowed t) e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Own_OwnResult_Type.C_Err e : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <borrowed t> <e> {self}
          (fun (r0'0:borrowed t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:borrowed t)-> (! Own_OwnResult_Type.ok <borrowed t> <e> {self}
                (fun (l_0'0:borrowed t) ->
                   [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult (borrowed t) e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 =  [ &_0 <- Own_OwnResult_Type.C_Ok ( * t) : Own_OwnResult_Type.t_ownresult t e ] s6
      | s6 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e
    | & self : Own_OwnResult_Type.t_ownresult (borrowed t) e = self
    | & t : borrowed t = any_l () : borrowed t
    | & e : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult t e)-> {[@expl:postcondition] [#"../own.rs" 188 27 188 42] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 187 4 187 86] forall e : e . inv'2 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e}
      {[@expl:postcondition] [#"../own.rs" 186 4 186 105] forall t : borrowed t . inv'1 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok ( * t) /\ resolve'1 t}
      (! return' {result}) ]
    
end
module Own_Impl2_Cloned
  type t
  type e
  predicate invariant'5 (self : t)
  let rec invariant'5 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : t)
  let rec inv'5 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ] 
  axiom inv'5 : forall x : t . inv'5 x = true
  predicate invariant'4 (self : t)
  let rec invariant'4 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : t)
  let rec inv'4 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ] 
  axiom inv'4 : forall x : t . inv'4 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant'3 (self : Own_OwnResult_Type.t_ownresult t e)
  let rec invariant'3 (self:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Own_OwnResult_Type.t_ownresult t e)
  let rec inv'3 (_x:Own_OwnResult_Type.t_ownresult t e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  use prelude.Borrow
  predicate invariant'1 (self : borrowed t)
  let rec invariant'1 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed t)
  let rec inv'1 (_x:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult (borrowed t) e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  let rec clone'0 (self:t) (return'  (ret:t))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:t)-> {inv'5 result}
      {[#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec cloned (self:Own_OwnResult_Type.t_ownresult (borrowed t) e) (return'  (ret:Own_OwnResult_Type.t_ownresult t e))= {[#"../own.rs" 201 18 201 22] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 (a:borrowed t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb4)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb5) ]
         ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 206 14 206 18] false} any ]
      
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.err <borrowed t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <borrowed t> <e> {self}
                (fun (l_0'0:e) ->
                   [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult (borrowed t) e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Own_OwnResult_Type.C_Err e : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb9 ]
      
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb11 ] 
    | bb4 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = Own_OwnResult_Type.ok <borrowed t> <e> {self}
          (fun (r0'0:borrowed t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:borrowed t)-> (! Own_OwnResult_Type.ok <borrowed t> <e> {self}
                (fun (l_0'0:borrowed t) ->
                   [ &self <- Own_OwnResult_Type.C_Ok _any : Own_OwnResult_Type.t_ownresult (borrowed t) e ] 
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = clone'0 { * t} (fun (_ret':t) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 t} s1
      | s1 = -{resolve'1 t}- s2
      | s2 =  [ &_0 <- Own_OwnResult_Type.C_Ok _6 : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:t)-> (!  [ &_6 <- _any ] s3) ] )
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e
    | & self : Own_OwnResult_Type.t_ownresult (borrowed t) e = self
    | & t : borrowed t = any_l () : borrowed t
    | & _6 : t = any_l () : t
    | & e : e = any_l () : e ]
    
    [ return' (result:Own_OwnResult_Type.t_ownresult t e)-> {[@expl:postcondition] [#"../own.rs" 201 27 201 42] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 200 4 200 86] forall e : e . inv'2 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e}
      {[@expl:postcondition] [#"../own.rs" 199 4 199 105] forall t : borrowed t . inv'1 t
       -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok ( * t) /\ resolve'1 t}
      (! return' {result}) ]
    
end
module Own_Impl3_Transpose
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e))
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e) . inv'3 x = true
  predicate invariant'2 (self : e)
  let rec invariant'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : e)
  let rec inv'2 (_x:e) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ] 
  axiom inv'2 : forall x : e . inv'2 x = true
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e)
  let rec invariant'0 (self:Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e)
  let rec inv'0 (_x:Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : e)
  let rec resolve'2 (self:e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : Core_Option_Option_Type.t_option t)
  let rec resolve'1 (self:Core_Option_Option_Type.t_option t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e)
    
   =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve'1 t
      | Own_OwnResult_Type.C_Err e -> resolve'2 e
      end
  let rec resolve'0 (self:Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec transpose (self:Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) (return'  (ret:Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)))= {[#"../own.rs" 217 21 217 25] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0
      [ s0 = any
        [ br0 (a:Core_Option_Option_Type.t_option t)-> {self = Own_OwnResult_Type.C_Ok a} (! bb5)
        | br1 (a:e)-> {self = Own_OwnResult_Type.C_Err a} (! bb8) ]
         ]
      
    | bb8 = s0
      [ s0 = Own_OwnResult_Type.err <Core_Option_Option_Type.t_option t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! Own_OwnResult_Type.err <Core_Option_Option_Type.t_option t> <e> {self}
                (fun (l_0'0:e) ->
                  
                  [ &self <- Own_OwnResult_Type.C_Err _any : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e ]
                  
                  s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_11 <- Own_OwnResult_Type.C_Err e : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb14 ]
      
    | bb14 = s0
      [ s0 = 
        [ &_0 <- Core_Option_Option_Type.C_Some _11 : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e) ]
        
        (any [ any_ (_any:Own_OwnResult_Type.t_ownresult t e)-> (!  [ &_11 <- _any ] s1) ] )
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = s0 [ s0 = bb17 ] 
    | bb5 = s0
      [ s0 = Own_OwnResult_Type.ok <Core_Option_Option_Type.t_option t> <e> {self}
          (fun (r0'0:Core_Option_Option_Type.t_option t) ->
            any
            [ br0 -> {r0'0 = Core_Option_Option_Type.C_None } (! bb7)
            | br1 (a:t)-> {r0'0 = Core_Option_Option_Type.C_Some a} (! bb6) ]
            ) ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = {[#"../own.rs" 218 14 218 18] false} any ]
      
    | bb6 = s0 [ s0 = bb9 ] 
    | bb9 = s0
      [ s0 = Own_OwnResult_Type.ok <Core_Option_Option_Type.t_option t> <e> {self}
          (fun (r0'0:Core_Option_Option_Type.t_option t) ->
            Core_Option_Option_Type.some <t> {r0'0}
              (fun (r0'1:t) ->
                 [ &x <- r0'1 ] 
                (any
                [ any_ (_any:t)-> (! Own_OwnResult_Type.ok <Core_Option_Option_Type.t_option t> <e> {self}
                    (fun (l_0'0:Core_Option_Option_Type.t_option t) ->
                      Core_Option_Option_Type.some <t> {l_0'0}
                        (fun (l_0'1:t) ->
                          
                          [ &self <- Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_Some _any : Core_Option_Option_Type.t_option t) : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e ]
                          
                          s1))) ]
                )))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_8 <- Own_OwnResult_Type.C_Ok x : Own_OwnResult_Type.t_ownresult t e ] 
        (any [ any_ (_any:t)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb10 ]
      
    | bb10 = s0
      [ s0 = 
        [ &_0 <- Core_Option_Option_Type.C_Some _8 : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e) ]
        
        (any [ any_ (_any:Own_OwnResult_Type.t_ownresult t e)-> (!  [ &_8 <- _any ] s1) ] )
      | s1 = bb11 ]
      
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = bb17 ] 
    | bb7 = s0 [ s0 = bb13 ] 
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = 
        [ &_0 <- Core_Option_Option_Type.C_None : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e) ]
        
        s3
      | s3 = bb17 ]
      
    | bb17 = s0 [ s0 = bb18 ] 
    | bb18 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e) = any_l () : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)
    | & self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e = self
    | & x : t = any_l () : t
    | & _8 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e
    | & e : e = any_l () : e
    | & _11 : Own_OwnResult_Type.t_ownresult t e = any_l () : Own_OwnResult_Type.t_ownresult t e ]
    
    [ return' (result:Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e))-> {[@expl:postcondition] [#"../own.rs" 217 30 217 53] inv'3 result}
      {[@expl:postcondition] [#"../own.rs" 216 4 216 92] forall e : e . inv'2 e
       -> self = Own_OwnResult_Type.C_Err e  -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Err e)}
      {[@expl:postcondition] [#"../own.rs" 215 4 215 96] forall t : t . inv'1 t
       -> self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_Some t)
       -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Ok t)}
      {[@expl:postcondition] [#"../own.rs" 214 4 214 62] self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_None)
       -> result = Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
end
module Own_Impl4
  type t
  type e
end
