module T_own__OwnResult [#"own.rs" 7 0 7 24]
  type t_OwnResult 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  let rec v_Ok < 't > < 'e > (input:t_OwnResult 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Ok field_0 : t_OwnResult 't 'e] . C_Ok field_0 <> input} (! {false} any) ]
    
  
  let rec v_Err < 't > < 'e > (input:t_OwnResult 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'e [C_Err field_0 : t_OwnResult 't 'e] . C_Err field_0 <> input} (! {false} any) ]
    
end
module M_own__qyi3410529601998764826__resolve_coherence [#"own.rs" 26 4 26 31] (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 24 15 24 39
  let%span sown1 = "own.rs" 25 14 25 31
  let%span sown2 = "own.rs" 16 8 19 9
  
  use T_own__OwnResult as OwnResult'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (_1 : e)
  
  predicate resolve'1 (_1 : t)
  
  predicate resolve'0 [#"own.rs" 15 4 15 28] (self : OwnResult'0.t_OwnResult t e) =
    [%#sown2] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  predicate structural_resolve'0 (x : OwnResult'0.t_OwnResult t e) =
    match x with
      | OwnResult'0.C_Ok a -> resolve'1 a
      | OwnResult'0.C_Err a -> resolve'2 a
      end
  
  constant self  : OwnResult'0.t_OwnResult t e
  
  function resolve_coherence [#"own.rs" 26 4 26 31] (self : OwnResult'0.t_OwnResult t e) : ()
  
  goal vc_resolve_coherence : ([%#sown0] structural_resolve'0 self)  -> ([%#sown1] resolve'0 self)
end
module M_own__qyi6204940358182728290__is_ok [#"own.rs" 31 4 31 31] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 31 18 31 22
  let%span sown1 = "own.rs" 30 14 30 62
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : e)
  
  predicate inv'2 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : OwnResult'0.t_OwnResult t e) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec is_ok (self:OwnResult'0.t_OwnResult t e) (return'  (ret:bool))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb2) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_0 <- false ] s1 | s1 = bb4 ] 
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- true ] s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & self : OwnResult'0.t_OwnResult t e = self ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sown1] result = (exists t : t . self = OwnResult'0.C_Ok t)}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__is_err [#"own.rs" 36 4 36 32] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 36 19 36 23
  let%span sown1 = "own.rs" 35 14 35 63
  let%span sown2 = "own.rs" 31 18 31 22
  let%span sown3 = "own.rs" 30 14 30 62
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : e)
  
  predicate inv'2 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : OwnResult'0.t_OwnResult t e) =
    [%#sinvariant4] inv'1 self
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  let rec is_ok'0 (self:OwnResult'0.t_OwnResult t e) (return'  (ret:bool))= {[@expl:precondition] [%#sown2] inv'0 self}
    any
    [ return' (result:bool)-> {[%#sown3] result = (exists t : t . self = OwnResult'0.C_Ok t)} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec is_err (self:OwnResult'0.t_OwnResult t e) (return'  (ret:bool))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = is_ok'0 {self} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_0 <- not _3 ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & self : OwnResult'0.t_OwnResult t e = self | & _3 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sown1] result = (exists e : e . self = OwnResult'0.C_Err e)}
      (! return' {result}) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_own__qyi6204940358182728290__ok [#"own.rs" 42 4 42 32] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 42 14 42 18
  let%span sown1 = "own.rs" 40 4 40 75
  let%span sown2 = "own.rs" 41 4 41 75
  let%span sown3 = "own.rs" 42 23 42 32
  
  predicate inv'3 (_1 : t)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate inv'0 (_1 : e)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'3 a_0
    | OwnResult'0.C_Err a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : e)
  
  meta "compute_max_steps" 1000000
  
  let rec ok (self:OwnResult'0.t_OwnResult t e) (return'  (ret:Option'0.t_Option t))= {[%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &x1 <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 x1} s2
      | s2 = -{resolve'0 x1}- s3
      | s3 =  [ &_0 <- Option'0.C_None ] s4
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &_0 <- Option'0.C_Some x ] s2
      | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & x : t = any_l ()
    | & x1 : e = any_l () ]
    
    [ return' (result:Option'0.t_Option t)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] (exists e : e . self = OwnResult'0.C_Err e)  -> result = Option'0.C_None}
      {[@expl:postcondition] [%#sown1] forall t : t . self = OwnResult'0.C_Ok t  -> result = Option'0.C_Some t}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__err [#"own.rs" 52 4 52 33] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 52 15 52 19
  let%span sown1 = "own.rs" 50 4 50 74
  let%span sown2 = "own.rs" 51 4 51 76
  let%span sown3 = "own.rs" 52 24 52 33
  
  predicate inv'3 (_1 : e)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option e [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate inv'0 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'0 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t)
  
  meta "compute_max_steps" 1000000
  
  let rec err (self:OwnResult'0.t_OwnResult t e) (return'  (ret:Option'0.t_Option e))= {[%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &x1 <- r0'0 ] s1)
      | s1 =  [ &_0 <- Option'0.C_Some x1 ] s2
      | s2 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 x} s2
      | s2 = -{resolve'0 x}- s3
      | s3 =  [ &_0 <- Option'0.C_None ] s4
      | s4 = bb7 ]
      
    | bb7 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option e = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & x : t = any_l ()
    | & x1 : e = any_l () ]
    
    [ return' (result:Option'0.t_Option e)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] forall e : e . self = OwnResult'0.C_Err e  -> result = Option'0.C_Some e}
      {[@expl:postcondition] [%#sown1] (exists t : t . self = OwnResult'0.C_Ok t)  -> result = Option'0.C_None}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__as_ref [#"own.rs" 62 4 62 45] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 62 19 62 23
  let%span sown1 = "own.rs" 60 4 60 87
  let%span sown2 = "own.rs" 61 4 61 89
  let%span sown3 = "own.rs" 62 28 62 45
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'6 (_1 : e)
  
  predicate inv'5 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'4 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'4 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'4 x] . inv'4 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'5 a_0
    | OwnResult'0.C_Err a_0 -> inv'6 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : e) =
    [%#sinvariant4] inv'6 self
  
  predicate inv'3 (_1 : e)
  
  axiom inv_axiom'3 [@rewrite] : forall x : e [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : t) =
    [%#sinvariant4] inv'5 self
  
  predicate inv'2 (_1 : t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : OwnResult'0.t_OwnResult t e) =
    [%#sinvariant4] inv'4 self
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec as_ref (self:OwnResult'0.t_OwnResult t e) (return'  (ret:OwnResult'0.t_OwnResult t e))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb2) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb3) ] 
    | bb3 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &x1 <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Err x1 ] s2
      | s2 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Ok x ] s2
      | s2 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult t e = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & x : t = any_l ()
    | & x1 : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult t e)-> {[@expl:postcondition] [%#sown3] inv'1 result}
      {[@expl:postcondition] [%#sown2] forall e : e . self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown1] forall t : t . self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__as_mut [#"own.rs" 77 4 77 57] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 77 23 77 27
  let%span sown1 = "own.rs" 69 4 76 6
  let%span sown2 = "own.rs" 77 32 77 57
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'0 (_1 : e)
  
  predicate inv'2 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'6 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'4 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'6 x] . inv'6 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : borrowed e)
  
  predicate inv'3 (_1 : borrowed t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'5 (_1 : OwnResult'0.t_OwnResult (borrowed t) (borrowed e))
  
  axiom inv_axiom'3 [@rewrite] : forall x : OwnResult'0.t_OwnResult (borrowed t) (borrowed e) [inv'5 x] . inv'5 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'3 a_0
    | OwnResult'0.C_Err a_0 -> inv'1 a_0
    end
  
  predicate invariant'2 (self : borrowed (OwnResult'0.t_OwnResult t e)) =
    [%#sinvariant4] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'4 (_1 : borrowed (OwnResult'0.t_OwnResult t e))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (OwnResult'0.t_OwnResult t e) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed t) =
    [%#sinvariant4] inv'2 self.current /\ inv'2 self.final
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed t [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed e) =
    [%#sinvariant4] inv'0 self.current /\ inv'0 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed e [inv'1 x] . inv'1 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed (OwnResult'0.t_OwnResult t e)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (OwnResult'0.t_OwnResult t e)) =
    resolve'5 _1
  
  predicate resolve'4 (self : borrowed t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed t) =
    resolve'4 _1
  
  predicate resolve'3 (self : borrowed e) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed e) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec as_mut (self:borrowed (OwnResult'0.t_OwnResult t e)) (return'  (ret:OwnResult'0.t_OwnResult (borrowed t) (borrowed e)))= {[%#sown0] inv'4 self}
    (! bb0
    [ bb0 = any
      [ br0 (a:t)-> {self.current = OwnResult'0.C_Ok a} (! bb2)
      | br1 (a:e)-> {self.current = OwnResult'0.C_Err a} (! bb3) ]
      
    | bb3 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self.current}
          (fun (r0'0:e) ->
            {inv'0 r0'0}
            Borrow.borrow_final <e> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed e) ->
                 [ &x1 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = OwnResult'0.C_Err _ret'.final ; } ] 
                s1))
      | s1 = {inv'0 x1.current}
        Borrow.borrow_final <e> {x1.current} {Borrow.get_id x1}
          (fun (_ret':borrowed e) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &x1 <- { x1 with current = _ret'.final ; } ] 
            s2)
      | s2 =  [ &_0 <- OwnResult'0.C_Err _7 ] s3
      | s3 = {[@expl:type invariant] inv'1 x1} s4
      | s4 = -{resolve'0 x1}- s5
      | s5 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self.current}
          (fun (r0'0:t) ->
            {inv'2 r0'0}
            Borrow.borrow_final <t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed t) ->
                 [ &x <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &self <- { self with current = OwnResult'0.C_Ok _ret'.final ; } ] 
                s1))
      | s1 = {inv'2 x.current}
        Borrow.borrow_final <t> {x.current} {Borrow.get_id x}
          (fun (_ret':borrowed t) ->
             [ &_5 <- _ret' ] 
            -{inv'2 _ret'.final}-
             [ &x <- { x with current = _ret'.final ; } ] 
            s2)
      | s2 =  [ &_0 <- OwnResult'0.C_Ok _5 ] s3
      | s3 = {[@expl:type invariant] inv'3 x} s4
      | s4 = -{resolve'1 x}- s5
      | s5 = bb5 ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'4 self} s1 | s1 = -{resolve'2 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : OwnResult'0.t_OwnResult (borrowed t) (borrowed e) = any_l ()
    | & self : borrowed (OwnResult'0.t_OwnResult t e) = self
    | & x : borrowed t = any_l ()
    | & _5 : borrowed t = any_l ()
    | & x1 : borrowed e = any_l ()
    | & _7 : borrowed e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult (borrowed t) (borrowed e))-> {[@expl:postcondition] [%#sown2] inv'5 result}
      {[@expl:postcondition] [%#sown1] exists t : borrowed t . self.current = OwnResult'0.C_Ok (t.current)
      /\ self.final = OwnResult'0.C_Ok (t.final) /\ result = OwnResult'0.C_Ok t
      \/ (exists e : borrowed e . self.current = OwnResult'0.C_Err (e.current)
      /\ self.final = OwnResult'0.C_Err (e.final) /\ result = OwnResult'0.C_Err e)}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap [#"own.rs" 86 4 88 29] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 84 4 84 54
  let%span sown1 = "own.rs" 86 18 86 22
  let%span sown2 = "own.rs" 85 14 85 43
  let%span sown3 = "own.rs" 86 27 86 28
  
  predicate inv'0 (_1 : e)
  
  predicate inv'2 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : e)
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap (self:OwnResult'0.t_OwnResult t e) (return'  (ret:t))= {[%#sown1] inv'1 self}
    {[%#sown0] exists t : t . self = OwnResult'0.C_Ok t}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &_e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _e} s2
      | s2 = -{resolve'0 _e}- s3
      | s3 = {false} any ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = return' {_0} ]
    ) [ & _0 : t = any_l () | & self : OwnResult'0.t_OwnResult t e = self | & t : t = any_l () | & _e : e = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] OwnResult'0.C_Ok result = self}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__expect [#"own.rs" 98 4 100 29] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 96 4 96 54
  let%span sown1 = "own.rs" 98 18 98 22
  let%span sown2 = "own.rs" 97 14 97 43
  let%span sown3 = "own.rs" 98 38 98 39
  
  predicate inv'0 (_1 : e)
  
  predicate inv'2 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (_1 : e)
  
  meta "compute_max_steps" 1000000
  
  let rec expect (self:OwnResult'0.t_OwnResult t e) (msg:string) (return'  (ret:t))= {[%#sown1] inv'1 self}
    {[%#sown0] exists t : t . self = OwnResult'0.C_Ok t}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &_e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _e} s2
      | s2 = -{resolve'0 _e}- s3
      | s3 = {false} any ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = return' {_0} ]
    ) [ & _0 : t = any_l () | & self : OwnResult'0.t_OwnResult t e = self | & t : t = any_l () | & _e : e = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] OwnResult'0.C_Ok result = self}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap_err [#"own.rs" 110 4 112 29] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 108 4 108 55
  let%span sown1 = "own.rs" 110 22 110 26
  let%span sown2 = "own.rs" 109 14 109 44
  let%span sown3 = "own.rs" 110 31 110 32
  
  predicate inv'2 (_1 : e)
  
  predicate inv'0 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'0 a_0
    | OwnResult'0.C_Err a_0 -> inv'2 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t)
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_err (self:OwnResult'0.t_OwnResult t e) (return'  (ret:e))= {[%#sown1] inv'1 self}
    {[%#sown0] exists e : e . self = OwnResult'0.C_Err e}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1) | s1 =  [ &_0 <- e ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = return' {_0}
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &_t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 _t} s2
      | s2 = -{resolve'0 _t}- s3
      | s3 = {false} any ]
       ]
    ) [ & _0 : e = any_l () | & self : OwnResult'0.t_OwnResult t e = self | & _t : t = any_l () | & e : e = any_l () ] 
    [ return' (result:e)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] OwnResult'0.C_Err result = self}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap_or [#"own.rs" 122 4 122 43] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 122 21 122 25
  let%span sown1 = "own.rs" 122 27 122 34
  let%span sown2 = "own.rs" 120 4 120 69
  let%span sown3 = "own.rs" 121 4 121 78
  let%span sown4 = "own.rs" 122 42 122 43
  
  predicate inv'0 (_1 : e)
  
  predicate inv'1 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'2 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'2 x] . inv'2 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'1 a_0
    | OwnResult'0.C_Err a_0 -> inv'0 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (_1 : t)
  
  predicate resolve'0 (_1 : e)
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_or (self:OwnResult'0.t_OwnResult t e) (default:t) (return'  (ret:t))= {[%#sown1] inv'1 default}
    {[%#sown0] inv'2 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 e} s2
      | s2 = -{resolve'0 e}- s3
      | s3 =  [ &_0 <- default ] s4
      | s4 = bb8 ]
      
    | bb8 = bb9
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 default} s1 | s1 = -{resolve'1 default}- s2 | s2 = bb6 ] 
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1) | s1 =  [ &_0 <- t ] s2 | s2 = bb7 ]
      
    | bb7 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : t = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & default : t = default
    | & t : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:t)-> {[@expl:postcondition] [%#sown4] inv'1 result}
      {[@expl:postcondition] [%#sown3] (exists e : e . self = OwnResult'0.C_Err e)  -> result = default}
      {[@expl:postcondition] [%#sown2] forall t : t . self = OwnResult'0.C_Ok t  -> result = t}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__unwrap_or_default [#"own.rs" 132 4 134 19] (* OwnResult<T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 138 33 138 45
  let%span sown1 = "own.rs" 132 29 132 33
  let%span sown2 = "own.rs" 130 4 130 69
  let%span sown3 = "own.rs" 131 4 131 80
  let%span sown4 = "own.rs" 132 38 132 39
  let%span sdefault5 = "../../../../creusot-contracts/src/std/default.rs" 13 26 13 45
  let%span sown6 = "own.rs" 16 8 19 9
  
  predicate inv'2 (_1 : e)
  
  predicate inv'1 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'1 a_0
    | OwnResult'0.C_Err a_0 -> inv'2 a_0
    end
  
  predicate is_default'0 (self : t)
  
  use prelude.prelude.Intrinsic
  
  let rec default'0 (_1:()) (return'  (ret:t))= any
    [ return' (result:t)-> {inv'1 result} {[%#sdefault5] is_default'0 result} (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  predicate resolve'3 (_1 : e)
  
  predicate resolve'2 (_1 : t)
  
  predicate resolve'1 [#"own.rs" 15 4 15 28] (self : OwnResult'0.t_OwnResult t e) =
    [%#sown6] match self with
      | OwnResult'0.C_Ok t -> resolve'2 t
      | OwnResult'0.C_Err e -> resolve'3 e
      end
  
  predicate resolve'0 (_1 : OwnResult'0.t_OwnResult t e) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap_or_default (self:OwnResult'0.t_OwnResult t e) (return'  (ret:t))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = default'0 {[%#sown0] ()} (fun (_ret':t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1) | s1 =  [ &_0 <- x ] s2 | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    ) [ & _0 : t = any_l () | & self : OwnResult'0.t_OwnResult t e = self | & x : t = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sown4] inv'1 result}
      {[@expl:postcondition] [%#sown3] (exists e : e . self = OwnResult'0.C_Err e)  -> is_default'0 result}
      {[@expl:postcondition] [%#sown2] forall t : t . self = OwnResult'0.C_Ok t  -> result = t}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__and [#"own.rs" 144 4 144 64] (* OwnResult<T, E> *)
  type t
  
  type e
  
  type u
  
  let%span sown0 = "own.rs" 144 18 144 22
  let%span sown1 = "own.rs" 144 24 144 27
  let%span sown2 = "own.rs" 142 4 142 73
  let%span sown3 = "own.rs" 143 4 143 86
  let%span sown4 = "own.rs" 144 49 144 64
  let%span sown5 = "own.rs" 16 8 19 9
  
  predicate inv'4 (_1 : e)
  
  predicate inv'1 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'2 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'2 x] . inv'2 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'1 a_0
    | OwnResult'0.C_Err a_0 -> inv'4 a_0
    end
  
  predicate inv'3 (_1 : u)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult u e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult u e [inv'0 x] . inv'0 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'3 a_0
    | OwnResult'0.C_Err a_0 -> inv'4 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (_1 : t)
  
  predicate resolve'4 (_1 : e)
  
  predicate resolve'3 (_1 : u)
  
  predicate resolve'2 [#"own.rs" 15 4 15 28] (self : OwnResult'0.t_OwnResult u e) =
    [%#sown5] match self with
      | OwnResult'0.C_Ok t -> resolve'3 t
      | OwnResult'0.C_Err e -> resolve'4 e
      end
  
  predicate resolve'0 (_1 : OwnResult'0.t_OwnResult u e) =
    resolve'2 _1
  
  meta "compute_max_steps" 1000000
  
  let rec and (self:OwnResult'0.t_OwnResult t e) (res:OwnResult'0.t_OwnResult u e) (return'  (ret:OwnResult'0.t_OwnResult u e))= {[%#sown1] inv'0 res}
    {[%#sown0] inv'2 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s3)
      | s3 =  [ &_0 <- OwnResult'0.C_Err e ] s4
      | s4 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = bb7 ]
      
    | bb7 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult u e = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & res : OwnResult'0.t_OwnResult u e = res
    | & x : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult u e)-> {[@expl:postcondition] [%#sown4] inv'0 result}
      {[@expl:postcondition] [%#sown3] forall e : e . self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown2] (exists t : t . self = OwnResult'0.C_Ok t)  -> result = res}
      (! return' {result}) ]
    
end
module M_own__qyi6204940358182728290__or [#"own.rs" 154 4 154 63] (* OwnResult<T, E> *)
  type t
  
  type e
  
  type f
  
  let%span sown0 = "own.rs" 154 17 154 21
  let%span sown1 = "own.rs" 154 23 154 26
  let%span sown2 = "own.rs" 152 4 152 84
  let%span sown3 = "own.rs" 153 4 153 74
  let%span sown4 = "own.rs" 154 48 154 63
  let%span sown5 = "own.rs" 16 8 19 9
  
  predicate inv'0 (_1 : e)
  
  predicate inv'3 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'2 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'2 x] . inv'2 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'3 a_0
    | OwnResult'0.C_Err a_0 -> inv'0 a_0
    end
  
  predicate inv'4 (_1 : f)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t f)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t f [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'3 a_0
    | OwnResult'0.C_Err a_0 -> inv'4 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'4 (_1 : f)
  
  predicate resolve'3 (_1 : t)
  
  predicate resolve'2 [#"own.rs" 15 4 15 28] (self : OwnResult'0.t_OwnResult t f) =
    [%#sown5] match self with
      | OwnResult'0.C_Ok t -> resolve'3 t
      | OwnResult'0.C_Err e -> resolve'4 e
      end
  
  predicate resolve'1 (_1 : OwnResult'0.t_OwnResult t f) =
    resolve'2 _1
  
  predicate resolve'0 (_1 : e)
  
  meta "compute_max_steps" 1000000
  
  let rec or (self:OwnResult'0.t_OwnResult t e) (res:OwnResult'0.t_OwnResult t f) (return'  (ret:OwnResult'0.t_OwnResult t f))= {[%#sown1] inv'1 res}
    {[%#sown0] inv'2 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 e} s2
      | s2 = -{resolve'0 e}- s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 res} s1 | s1 = -{resolve'1 res}- s2 | s2 = bb6 ] 
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &v <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Ok v ] s2
      | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult t f = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & res : OwnResult'0.t_OwnResult t f = res
    | & v : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult t f)-> {[@expl:postcondition] [%#sown4] inv'1 result}
      {[@expl:postcondition] [%#sown3] (exists e : e . self = OwnResult'0.C_Err e)  -> result = res}
      {[@expl:postcondition] [%#sown2] forall t : t . self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module M_own__qyi13172074075585881807__copied [#"own.rs" 166 4 168 16] (* OwnResult<&T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 166 18 166 22
  let%span sown1 = "own.rs" 164 4 164 86
  let%span sown2 = "own.rs" 165 4 165 86
  let%span sown3 = "own.rs" 166 27 166 42
  let%span sinvariant4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'4 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : t) =
    [%#sinvariant4] inv'4 self
  
  predicate inv'2 (_1 : t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate inv'3 (_1 : e)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'4 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec copied (self:OwnResult'0.t_OwnResult t e) (return'  (ret:OwnResult'0.t_OwnResult t e))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Err e ] s2
      | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Ok t ] s2
      | s2 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult t e = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & t : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult t e)-> {[@expl:postcondition] [%#sown3] inv'1 result}
      {[@expl:postcondition] [%#sown2] forall e : e . self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown1] forall t : t . self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module M_own__qyi13172074075585881807__cloned [#"own.rs" 179 4 181 17] (* OwnResult<&T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 179 18 179 22
  let%span sown1 = "own.rs" 177 4 177 86
  let%span sown2 = "own.rs" 178 4 178 86
  let%span sown3 = "own.rs" 179 27 179 42
  let%span sclone4 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : t) =
    [%#sinvariant5] inv'3 self
  
  predicate inv'2 (_1 : t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate inv'4 (_1 : e)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'3 a_0
    | OwnResult'0.C_Err a_0 -> inv'4 a_0
    end
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'4 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  let rec clone'0 (self:t) (return'  (ret:t))= {[@expl:precondition] inv'2 self}
    any [ return' (result:t)-> {inv'3 result} {[%#sclone4] result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec cloned (self:OwnResult'0.t_OwnResult t e) (return'  (ret:OwnResult'0.t_OwnResult t e))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Err e ] s2
      | s2 = bb9 ]
      
    | bb9 = bb10
    | bb10 = bb11
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1)
      | s1 = clone'0 {t} (fun (_ret':t) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- OwnResult'0.C_Ok _6 ] s1 | s1 = bb8 ] 
    | bb8 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult t e = any_l ()
    | & self : OwnResult'0.t_OwnResult t e = self
    | & t : t = any_l ()
    | & _6 : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult t e)-> {[@expl:postcondition] [%#sown3] inv'1 result}
      {[@expl:postcondition] [%#sown2] forall e : e . self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown1] forall t : t . self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module M_own__qyi10012309719472384256__copied [#"own.rs" 194 4 196 16] (* OwnResult<&mut T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 194 18 194 22
  let%span sown1 = "own.rs" 192 4 192 105
  let%span sown2 = "own.rs" 193 4 193 86
  let%span sown3 = "own.rs" 194 27 194 42
  let%span sresolve4 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant5 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  predicate inv'3 (_1 : e)
  
  predicate inv'4 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'2 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'2 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'2 x] . inv'2 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'4 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult (borrowed t) e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult (borrowed t) e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'0 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant5] inv'4 self.current /\ inv'4 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec copied (self:OwnResult'0.t_OwnResult (borrowed t) e) (return'  (ret:OwnResult'0.t_OwnResult t e))= {[%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any
      [ br0 (a:borrowed t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <borrowed t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Err e ] s2
      | s2 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <borrowed t> <e> {self} (fun (r0'0:borrowed t) ->  [ &t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 t} s2
      | s2 = -{resolve'0 t}- s3
      | s3 =  [ &_0 <- OwnResult'0.C_Ok (t.current) ] s4
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult t e = any_l ()
    | & self : OwnResult'0.t_OwnResult (borrowed t) e = self
    | & t : borrowed t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult t e)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] forall e : e . self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown1] forall t : borrowed t . self = OwnResult'0.C_Ok t
       -> result = OwnResult'0.C_Ok (t.current) /\ resolve'0 t}
      (! return' {result}) ]
    
end
module M_own__qyi10012309719472384256__cloned [#"own.rs" 207 4 209 17] (* OwnResult<&mut T, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 207 18 207 22
  let%span sown1 = "own.rs" 205 4 205 105
  let%span sown2 = "own.rs" 206 4 206 86
  let%span sown3 = "own.rs" 207 27 207 42
  let%span sclone4 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span sresolve5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'4 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t) =
    [%#sinvariant7] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate inv'5 (_1 : e)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'2 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'2 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'2 x] . inv'2 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'4 a_0
    | OwnResult'0.C_Err a_0 -> inv'5 a_0
    end
  
  predicate inv'0 (_1 : borrowed t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult (borrowed t) e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult (borrowed t) e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'0 a_0
    | OwnResult'0.C_Err a_0 -> inv'5 a_0
    end
  
  predicate invariant'0 (self : borrowed t) =
    [%#sinvariant6] inv'4 self.current /\ inv'4 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#sresolve5] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'1 _1
  
  let rec clone'0 (self:t) (return'  (ret:t))= {[@expl:precondition] inv'3 self}
    any [ return' (result:t)-> {inv'4 result} {[%#sclone4] result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec cloned (self:OwnResult'0.t_OwnResult (borrowed t) e) (return'  (ret:OwnResult'0.t_OwnResult t e))= {[%#sown0] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any
      [ br0 (a:borrowed t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.v_Err <borrowed t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_0 <- OwnResult'0.C_Err e ] s2
      | s2 = bb9 ]
      
    | bb9 = bb10
    | bb10 = bb11
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.v_Ok <borrowed t> <e> {self} (fun (r0'0:borrowed t) ->  [ &t <- r0'0 ] s1)
      | s1 = clone'0 {t.current} (fun (_ret':t) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'0 t} s1
      | s1 = -{resolve'0 t}- s2
      | s2 =  [ &_0 <- OwnResult'0.C_Ok _6 ] s3
      | s3 = bb8 ]
      
    | bb8 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_OwnResult t e = any_l ()
    | & self : OwnResult'0.t_OwnResult (borrowed t) e = self
    | & t : borrowed t = any_l ()
    | & _6 : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_OwnResult t e)-> {[@expl:postcondition] [%#sown3] inv'2 result}
      {[@expl:postcondition] [%#sown2] forall e : e . self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown1] forall t : borrowed t . self = OwnResult'0.C_Ok t
       -> result = OwnResult'0.C_Ok (t.current) /\ resolve'0 t}
      (! return' {result}) ]
    
end
module M_own__qyi12833551122006947340__transpose [#"own.rs" 223 4 223 53] (* OwnResult<std::option::Option<T>, E> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 223 21 223 25
  let%span sown1 = "own.rs" 220 4 220 62
  let%span sown2 = "own.rs" 221 4 221 96
  let%span sown3 = "own.rs" 222 4 222 92
  let%span sown4 = "own.rs" 223 30 223 53
  
  predicate inv'3 (_1 : e)
  
  predicate inv'5 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'4 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'3 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'4 x] . inv'4 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'5 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option (OwnResult'0.t_OwnResult t e))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option (OwnResult'0.t_OwnResult t e) [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult (Option'0.t_Option t) e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult (Option'0.t_Option t) e [inv'0 x] . inv'0 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec transpose (self:OwnResult'0.t_OwnResult (Option'0.t_Option t) e) (return'  (ret:Option'0.t_Option (OwnResult'0.t_OwnResult t e)))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = any
      [ br0 (a:Option'0.t_Option t)-> {self = OwnResult'0.C_Ok a} (! bb5)
      | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb8) ]
      
    | bb8 = s0
      [ s0 = OwnResult'0.v_Err <Option'0.t_Option t> <e> {self} (fun (r0'0:e) ->  [ &e <- r0'0 ] s1)
      | s1 =  [ &_11 <- OwnResult'0.C_Err e ] s2
      | s2 = bb14 ]
      
    | bb14 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _11 ] s1 | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = bb17
    | bb5 = OwnResult'0.v_Ok <Option'0.t_Option t> <e> {self}
        (fun (r0'0:Option'0.t_Option t) ->
          any [ br0 -> {r0'0 = Option'0.C_None } (! bb7) | br1 (a:t)-> {r0'0 = Option'0.C_Some a} (! bb6) ] )
    | bb6 = bb9
    | bb9 = s0
      [ s0 = OwnResult'0.v_Ok <Option'0.t_Option t> <e> {self}
          (fun (r0'0:Option'0.t_Option t) -> Option'0.v_Some <t> {r0'0} (fun (r0'1:t) ->  [ &x <- r0'1 ] s1))
      | s1 =  [ &_8 <- OwnResult'0.C_Ok x ] s2
      | s2 = bb10 ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _8 ] s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb17
    | bb7 = bb13
    | bb13 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (OwnResult'0.t_OwnResult t e) = any_l ()
    | & self : OwnResult'0.t_OwnResult (Option'0.t_Option t) e = self
    | & x : t = any_l ()
    | & _8 : OwnResult'0.t_OwnResult t e = any_l ()
    | & e : e = any_l ()
    | & _11 : OwnResult'0.t_OwnResult t e = any_l () ]
    
    [ return' (result:Option'0.t_Option (OwnResult'0.t_OwnResult t e))-> {[@expl:postcondition] [%#sown4] inv'1 result}
      {[@expl:postcondition] [%#sown3] forall e : e . self = OwnResult'0.C_Err e
       -> result = Option'0.C_Some (OwnResult'0.C_Err e)}
      {[@expl:postcondition] [%#sown2] forall t : t . self = OwnResult'0.C_Ok (Option'0.C_Some t)
       -> result = Option'0.C_Some (OwnResult'0.C_Ok t)}
      {[@expl:postcondition] [%#sown1] self = OwnResult'0.C_Ok (Option'0.C_None)  -> result = Option'0.C_None}
      (! return' {result}) ]
    
end
module M_own__qyi3410529601998764826 [#"own.rs" 12 0 12 38] (* <OwnResult<T, E> as creusot_contracts::Resolve> *)
  type t
  
  type e
  
  let%span sown0 = "own.rs" 26 4 26 31
  let%span sown1 = "own.rs" 16 8 19 9
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate inv'3 (_1 : e)
  
  predicate inv'2 (_1 : t)
  
  use T_own__OwnResult as OwnResult'0
  
  predicate inv'1 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'1 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'1 x] . inv'1 x
  = match x with
    | OwnResult'0.C_Ok a_0 -> inv'2 a_0
    | OwnResult'0.C_Err a_0 -> inv'3 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : OwnResult'0.t_OwnResult t e) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : OwnResult'0.t_OwnResult t e)
  
  axiom inv_axiom'0 [@rewrite] : forall x : OwnResult'0.t_OwnResult t e [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'2 (_1 : e)
  
  predicate resolve'1 (_1 : t)
  
  predicate resolve'0 [#"own.rs" 15 4 15 28] (self : OwnResult'0.t_OwnResult t e) =
    [%#sown1] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  predicate structural_resolve'0 (x : OwnResult'0.t_OwnResult t e) =
    match x with
      | OwnResult'0.C_Ok a -> resolve'1 a
      | OwnResult'0.C_Err a -> resolve'2 a
      end
  
  goal resolve_coherence_refn : [%#sown0] forall self : OwnResult'0.t_OwnResult t e . structural_resolve'0 self
  /\ inv'0 self  -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
