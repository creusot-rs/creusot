
module Own_OwnResult_Type
  type t_ownresult 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec ok < 't > < 'e > (input:t_ownresult 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec err < 't > < 'e > (input:t_ownresult 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Own_Impl0_IsOk
  type t
  
  type e
  
  let%span smod0 = "" 0 0 0 0
  
  let%span smod1 = "" 0 0 0 0
  
  let%span sown2 = "../own.rs" 25 18 25 22
  
  let%span sown3 = "../own.rs" 24 14 24 62
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span4] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  let rec is_ok (self:OwnResult'0.t_ownresult t e) (return'  (ret:bool))= {[%#sown2] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = any
        [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb2) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb1) ]
         ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [%#smod0] false ] s1 | s1 = bb4 ] 
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- [%#smod1] true ] s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & self : OwnResult'0.t_ownresult t e = self ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sown3] result
      = (exists t : t . inv'1 t /\ self = OwnResult'0.C_Ok t)}
      (! return' {result}) ]
    
end
module Own_Impl0_IsErr
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 30 19 30 23
  
  let%span sown1 = "../own.rs" 29 14 29 63
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../own.rs" 25 18 25 22
  
  let%span span4 = "../own.rs" 24 14 24 62
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  predicate invariant'1 (self : e)
  
  predicate inv'1 (_x : e)
  
  axiom inv'1 : forall x : e . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span2] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec is_ok'0 (self:OwnResult'0.t_ownresult t e) (return'  (ret:bool))= {[@expl:precondition] [%#span3] inv'0 self}
    any
    [ return' (result:bool)-> {[%#span4] result = (exists t : t . inv'2 t /\ self = OwnResult'0.C_Ok t)}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  let rec is_err (self:OwnResult'0.t_ownresult t e) (return'  (ret:bool))= {[%#sown0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = is_ok'0 {self} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- not _3 ] (any [ any_ (_any:bool)-> (!  [ &_3 <- _any ] s1) ] ) | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & self : OwnResult'0.t_ownresult t e = self | & _3 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sown1] result
      = (exists e : e . inv'1 e /\ self = OwnResult'0.C_Err e)}
      (! return' {result}) ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Own_Impl0_Ok
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 37 14 37 18
  
  let%span sown1 = "../own.rs" 36 14 36 18
  
  let%span sown2 = "../own.rs" 34 4 34 75
  
  let%span sown3 = "../own.rs" 35 4 35 75
  
  let%span sown4 = "../own.rs" 36 23 36 32
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../own.rs" 16 8 19 9
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option t) =
    [%#span5] true
  
  predicate inv'3 (_x : Option'0.t_option t)
  
  axiom inv'3 : forall x : Option'0.t_option t . inv'3 x = true
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  predicate invariant'1 (self : e)
  
  predicate inv'1 (_x : e)
  
  axiom inv'1 : forall x : e . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : e)
  
  predicate resolve'2 (self : t)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span6] match self with
      | OwnResult'0.C_Ok t -> resolve'2 t
      | OwnResult'0.C_Err e -> resolve'1 e
      end
  
  let rec ok (self:OwnResult'0.t_ownresult t e) (return'  (ret:Option'0.t_option t))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 x1} s2
      | s2 = -{resolve'1 x1}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_0 <- Option'0.C_None ] s6
      | s6 = bb9 ]
      
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Option'0.C_Some x ] (any [ any_ (_any:t)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option t = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & x : t = any_l ()
    | & x1 : e = any_l () ]
    
    [ return' (result:Option'0.t_option t)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] (exists e : e . inv'1 e /\ self = OwnResult'0.C_Err e)
       -> result = Option'0.C_None}
      {[@expl:postcondition] [%#sown2] forall t : t . inv'2 t
       -> self = OwnResult'0.C_Ok t  -> result = Option'0.C_Some t}
      (! return' {result}) ]
    
end
module Own_Impl0_Err
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 47 14 47 18
  
  let%span sown1 = "../own.rs" 46 15 46 19
  
  let%span sown2 = "../own.rs" 44 4 44 74
  
  let%span sown3 = "../own.rs" 45 4 45 76
  
  let%span sown4 = "../own.rs" 46 24 46 33
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../own.rs" 16 8 19 9
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option e) =
    [%#span5] true
  
  predicate inv'3 (_x : Option'0.t_option e)
  
  axiom inv'3 : forall x : Option'0.t_option e . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span6] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec err (self:OwnResult'0.t_ownresult t e) (return'  (ret:Option'0.t_option e))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &x1 <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Option'0.C_Some x1 ] (any [ any_ (_any:e)-> (!  [ &x1 <- _any ] s4) ] )
      | s4 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 x} s2
      | s2 = -{resolve'1 x}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 =  [ &_0 <- Option'0.C_None ] s6
      | s6 = bb7 ]
      
    | bb7 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option e = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & x : t = any_l ()
    | & x1 : e = any_l () ]
    
    [ return' (result:Option'0.t_option e)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] forall e : e . inv'2 e
       -> self = OwnResult'0.C_Err e  -> result = Option'0.C_Some e}
      {[@expl:postcondition] [%#sown2] (exists t : t . inv'1 t /\ self = OwnResult'0.C_Ok t)
       -> result = Option'0.C_None}
      (! return' {result}) ]
    
end
module Own_Impl0_AsRef
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 57 14 57 19
  
  let%span sown1 = "../own.rs" 56 19 56 23
  
  let%span sown2 = "../own.rs" 54 4 54 87
  
  let%span sown3 = "../own.rs" 55 4 55 89
  
  let%span sown4 = "../own.rs" 56 28 56 45
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'3 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'3 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'3 : forall x : OwnResult'0.t_ownresult t e . inv'3 x = true
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  predicate invariant'1 (self : e)
  
  predicate inv'1 (_x : e)
  
  axiom inv'1 : forall x : e . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (self : t)
  
  predicate resolve'1 (self : e)
  
  predicate resolve'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  let rec as_ref (self:OwnResult'0.t_ownresult t e) (return'  (ret:OwnResult'0.t_ownresult t e))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb2) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb3) ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb3 = s0
      [ s0 = OwnResult'0.err <t> <e> {self} (fun (r0'0:e) ->  [ &x1 <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 x1} s4
      | s4 = -{resolve'1 x1}- s5
      | s5 =  [ &_0 <- OwnResult'0.C_Err x1 ] s6
      | s6 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self} (fun (r0'0:t) ->  [ &x <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'2 x} s4
      | s4 = -{resolve'2 x}- s5
      | s5 =  [ &_0 <- OwnResult'0.C_Ok x ] s6
      | s6 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult t e = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & x : t = any_l ()
    | & x1 : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult t e)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] forall e : e . inv'1 e
       -> self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown2] forall t : t . inv'2 t
       -> self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl0_AsMut
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 72 14 72 19
  
  let%span sown1 = "../own.rs" 71 23 71 27
  
  let%span sown2 = "../own.rs" 63 4 70 6
  
  let%span sown3 = "../own.rs" 71 32 71 57
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Borrow
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'5 (self : OwnResult'0.t_ownresult (borrowed t) (borrowed e)) =
    [%#span4] true
  
  predicate inv'5 (_x : OwnResult'0.t_ownresult (borrowed t) (borrowed e))
  
  axiom inv'5 : forall x : OwnResult'0.t_ownresult (borrowed t) (borrowed e) . inv'5 x = true
  
  predicate invariant'4 (self : borrowed t)
  
  predicate inv'4 (_x : borrowed t)
  
  axiom inv'4 : forall x : borrowed t . inv'4 x = true
  
  predicate invariant'3 (self : t)
  
  predicate inv'3 (_x : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  predicate invariant'2 (self : borrowed e)
  
  predicate inv'2 (_x : borrowed e)
  
  axiom inv'2 : forall x : borrowed e . inv'2 x = true
  
  predicate invariant'1 (self : e)
  
  predicate inv'1 (_x : e)
  
  axiom inv'1 : forall x : e . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (OwnResult'0.t_ownresult t e)) =
    [%#span4] true
  
  predicate inv'0 (_x : borrowed (OwnResult'0.t_ownresult t e))
  
  axiom inv'0 : forall x : borrowed (OwnResult'0.t_ownresult t e) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed t) =
    [%#span5]  ^ self =  * self
  
  predicate resolve'1 (self : borrowed e) =
    [%#span5]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed (OwnResult'0.t_ownresult t e)) =
    [%#span5]  ^ self =  * self
  
  let rec as_mut (self:borrowed (OwnResult'0.t_ownresult t e)) (return'  (ret:OwnResult'0.t_ownresult (borrowed t) (borrowed e)))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = any
      [ br0 (a:t)-> { * self = OwnResult'0.C_Ok a} (! bb2) | br1 (a:e)-> { * self = OwnResult'0.C_Err a} (! bb3) ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb3 = s0
      [ s0 = OwnResult'0.err <t> <e> { * self}
          (fun (r0'0:e) ->
            Borrow.borrow_final <e> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed e) ->
                 [ &x1 <- _ret' ] 
                OwnResult'0.err <t> <e> { * self}
                  (fun (l_0'0:e) ->  [ &self <- { self with current = OwnResult'0.C_Err ( ^ x1) ; } ] s1)))
      | s1 = -{inv'1 ( ^ x1)}- s2
      | s2 = Borrow.borrow_final <e> { * x1} {Borrow.get_id x1}
          (fun (_ret':borrowed e) ->  [ &_7 <- _ret' ]  [ &x1 <- { x1 with current = ( ^ _7) ; } ] s3)
      | s3 = -{inv'1 ( ^ _7)}- s4
      | s4 =  [ &_0 <- OwnResult'0.C_Err _7 ] (any [ any_ (_any:borrowed e)-> (!  [ &_7 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'2 x1} s6
      | s6 = -{resolve'1 x1}- s7
      | s7 = bb5 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = OwnResult'0.ok <t> <e> { * self}
          (fun (r0'0:t) ->
            Borrow.borrow_final <t> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed t) ->
                 [ &x <- _ret' ] 
                OwnResult'0.ok <t> <e> { * self}
                  (fun (l_0'0:t) ->  [ &self <- { self with current = OwnResult'0.C_Ok ( ^ x) ; } ] s1)))
      | s1 = -{inv'3 ( ^ x)}- s2
      | s2 = Borrow.borrow_final <t> { * x} {Borrow.get_id x}
          (fun (_ret':borrowed t) ->  [ &_5 <- _ret' ]  [ &x <- { x with current = ( ^ _5) ; } ] s3)
      | s3 = -{inv'3 ( ^ _5)}- s4
      | s4 =  [ &_0 <- OwnResult'0.C_Ok _5 ] (any [ any_ (_any:borrowed t)-> (!  [ &_5 <- _any ] s5) ] )
      | s5 = {[@expl:type invariant] inv'4 x} s6
      | s6 = -{resolve'2 x}- s7
      | s7 = bb5 ]
      
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : OwnResult'0.t_ownresult (borrowed t) (borrowed e) = any_l ()
    | & self : borrowed (OwnResult'0.t_ownresult t e) = self
    | & x : borrowed t = any_l ()
    | & _5 : borrowed t = any_l ()
    | & x1 : borrowed e = any_l ()
    | & _7 : borrowed e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult (borrowed t) (borrowed e))-> {[@expl:postcondition] [%#sown3] inv'5 result}
      {[@expl:postcondition] [%#sown2] exists t : borrowed t . inv'4 t
      /\ ( * self = OwnResult'0.C_Ok ( * t) /\  ^ self = OwnResult'0.C_Ok ( ^ t) /\ result = OwnResult'0.C_Ok t
      \/ (exists e : borrowed e . inv'2 e
      /\  * self = OwnResult'0.C_Err ( * e) /\  ^ self = OwnResult'0.C_Err ( ^ e) /\ result = OwnResult'0.C_Err e))}
      (! return' {result}) ]
    
end
module Own_Impl0_Unwrap
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 84 14 84 18
  
  let%span spanic1 = "" 0 0 0 0
  
  let%span sown2 = "../own.rs" 78 4 78 54
  
  let%span sown3 = "../own.rs" 80 18 80 22
  
  let%span sown4 = "../own.rs" 79 14 79 43
  
  let%span sown5 = "../own.rs" 80 27 80 28
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  predicate invariant'1 (self : e)
  
  predicate inv'1 (_x : e)
  
  axiom inv'1 : forall x : e . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : e)
  
  predicate resolve'2 (self : t)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'2 t
      | OwnResult'0.C_Err e -> resolve'1 e
      end
  
  let rec unwrap (self:OwnResult'0.t_ownresult t e) (return'  (ret:t))= {[%#sown3] inv'0 self}
    {[%#sown2] exists t : t . inv'2 t /\ self = OwnResult'0.C_Ok t}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &_e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 _e} s2
      | s2 = -{resolve'1 _e}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = {[%#spanic1] false} any ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- t ] (any [ any_ (_any:t)-> (!  [ &t <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = return' {_0} ]
    ) [ & _0 : t = any_l () | & self : OwnResult'0.t_ownresult t e = self | & t : t = any_l () | & _e : e = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sown5] inv'2 result}
      {[@expl:postcondition] [%#sown4] OwnResult'0.C_Ok result = self}
      (! return' {result}) ]
    
end
module Own_Impl0_Expect
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 96 14 96 18
  
  let%span spanic1 = "" 0 0 0 0
  
  let%span sown2 = "../own.rs" 90 4 90 54
  
  let%span sown3 = "../own.rs" 92 18 92 22
  
  let%span sown4 = "../own.rs" 91 14 91 43
  
  let%span sown5 = "../own.rs" 92 38 92 39
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  predicate invariant'1 (self : e)
  
  predicate inv'1 (_x : e)
  
  axiom inv'1 : forall x : e . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : e)
  
  predicate resolve'2 (self : t)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'2 t
      | OwnResult'0.C_Err e -> resolve'1 e
      end
  
  let rec expect (self:OwnResult'0.t_ownresult t e) (msg:string) (return'  (ret:t))= {[%#sown3] inv'0 self}
    {[%#sown2] exists t : t . inv'2 t /\ self = OwnResult'0.C_Ok t}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &_e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 _e} s2
      | s2 = -{resolve'1 _e}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = {[%#spanic1] false} any ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- t ] (any [ any_ (_any:t)-> (!  [ &t <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = return' {_0} ]
    ) [ & _0 : t = any_l () | & self : OwnResult'0.t_ownresult t e = self | & t : t = any_l () | & _e : e = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sown5] inv'2 result}
      {[@expl:postcondition] [%#sown4] OwnResult'0.C_Ok result = self}
      (! return' {result}) ]
    
end
module Own_Impl0_UnwrapErr
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 108 14 108 18
  
  let%span spanic1 = "" 0 0 0 0
  
  let%span sown2 = "../own.rs" 102 4 102 55
  
  let%span sown3 = "../own.rs" 104 22 104 26
  
  let%span sown4 = "../own.rs" 103 14 103 44
  
  let%span sown5 = "../own.rs" 104 31 104 32
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec unwrap_err (self:OwnResult'0.t_ownresult t e) (return'  (ret:e))= {[%#sown3] inv'0 self}
    {[%#sown2] exists e : e . inv'2 e /\ self = OwnResult'0.C_Err e}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = return' {_0}
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &_t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'1 _t} s2
      | s2 = -{resolve'1 _t}- s3
      | s3 = {[@expl:type invariant] inv'0 self} s4
      | s4 = -{resolve'0 self}- s5
      | s5 = {[%#spanic1] false} any ]
       ]
    ) [ & _0 : e = any_l () | & self : OwnResult'0.t_ownresult t e = self | & _t : t = any_l () | & e : e = any_l () ] 
    [ return' (result:e)-> {[@expl:postcondition] [%#sown5] inv'2 result}
      {[@expl:postcondition] [%#sown4] OwnResult'0.C_Err result = self}
      (! return' {result}) ]
    
end
module Own_Impl0_UnwrapOr
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 117 14 117 18
  
  let%span sown1 = "../own.rs" 116 21 116 25
  
  let%span sown2 = "../own.rs" 116 27 116 34
  
  let%span sown3 = "../own.rs" 114 4 114 69
  
  let%span sown4 = "../own.rs" 115 4 115 78
  
  let%span sown5 = "../own.rs" 116 42 116 43
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'1 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'1 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'1 : forall x : OwnResult'0.t_ownresult t e . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  predicate inv'0 (_x : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 (self : t)
  
  predicate resolve'1 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'0 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec unwrap_or (self:OwnResult'0.t_ownresult t e) (default:t) (return'  (ret:t))= {[%#sown2] inv'0 default}
    {[%#sown1] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 default} s1
      | s1 = -{resolve'0 default}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 e} s2
      | s2 = -{resolve'2 e}- s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- default ] (any [ any_ (_any:t)-> (!  [ &default <- _any ] s6) ] )
      | s6 = bb8 ]
      
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 default} s1
      | s1 = -{resolve'0 default}- s2
      | s2 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s3)) ]
            ))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- t ] (any [ any_ (_any:t)-> (!  [ &t <- _any ] s6) ] )
      | s6 = bb7 ]
      
    | bb7 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : t = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & default : t = default
    | & t : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:t)-> {[@expl:postcondition] [%#sown5] inv'0 result}
      {[@expl:postcondition] [%#sown4] (exists e : e . inv'2 e /\ self = OwnResult'0.C_Err e)  -> result = default}
      {[@expl:postcondition] [%#sown3] forall t : t . inv'0 t  -> self = OwnResult'0.C_Ok t  -> result = t}
      (! return' {result}) ]
    
end
module Own_Impl0_UnwrapOrDefault
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 130 14 130 18
  
  let%span sown1 = "../own.rs" 132 33 132 45
  
  let%span sown2 = "../own.rs" 126 29 126 33
  
  let%span sown3 = "../own.rs" 124 4 124 69
  
  let%span sown4 = "../own.rs" 125 4 125 80
  
  let%span sown5 = "../own.rs" 126 38 126 39
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../../creusot-contracts/src/std/default.rs" 13 26 13 45
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../own.rs" 16 8 19 9
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  predicate is_default'0 (self : t)
  
  use prelude.prelude.Intrinsic
  
  let rec default'0 (_1:()) (return'  (ret:t))= any
    [ return' (result:t)-> {[%#span8] inv'1 result} {[%#span7] is_default'0 result} (! return' {result}) ]
    
  
  predicate resolve'2 (self : e)
  
  predicate resolve'1 (self : t)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span9] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec unwrap_or_default (self:OwnResult'0.t_ownresult t e) (return'  (ret:t))= {[%#sown2] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = default'0 {[%#sown1] ()} (fun (_ret':t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- x ] (any [ any_ (_any:t)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = return' {_0} ]
    ) [ & _0 : t = any_l () | & self : OwnResult'0.t_ownresult t e = self | & x : t = any_l () ] 
    [ return' (result:t)-> {[@expl:postcondition] [%#sown5] inv'1 result}
      {[@expl:postcondition] [%#sown4] (exists e : e . inv'2 e /\ self = OwnResult'0.C_Err e)  -> is_default'0 result}
      {[@expl:postcondition] [%#sown3] forall t : t . inv'1 t  -> self = OwnResult'0.C_Ok t  -> result = t}
      (! return' {result}) ]
    
end
module Own_Impl0_And
  type t
  
  type e
  
  type u
  
  let%span sown0 = "../own.rs" 139 14 139 18
  
  let%span sown1 = "../own.rs" 138 18 138 22
  
  let%span sown2 = "../own.rs" 138 24 138 27
  
  let%span sown3 = "../own.rs" 136 4 136 73
  
  let%span sown4 = "../own.rs" 137 4 137 86
  
  let%span sown5 = "../own.rs" 138 49 138 64
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  predicate invariant'3 (self : e)
  
  predicate inv'3 (_x : e)
  
  axiom inv'3 : forall x : e . inv'3 x = true
  
  predicate invariant'2 (self : t)
  
  predicate inv'2 (_x : t)
  
  axiom inv'2 : forall x : t . inv'2 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'1 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'1 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'1 : forall x : OwnResult'0.t_ownresult t e . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult u e) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult u e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult u e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : t)
  
  predicate resolve'4 (self : e)
  
  predicate resolve'1 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'2 t
      | OwnResult'0.C_Err e -> resolve'4 e
      end
  
  predicate resolve'3 (self : u)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult u e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'3 t
      | OwnResult'0.C_Err e -> resolve'4 e
      end
  
  let rec and (self:OwnResult'0.t_ownresult t e) (res:OwnResult'0.t_ownresult u e) (return'  (ret:OwnResult'0.t_ownresult u e))= {[%#sown2] inv'0 res}
    {[%#sown1] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s3)) ]
            ))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- OwnResult'0.C_Err e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s6) ] )
      | s6 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &x <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 x} s2
      | s2 = -{resolve'2 x}- s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- res ] (any [ any_ (_any:OwnResult'0.t_ownresult u e)-> (!  [ &res <- _any ] s6) ] )
      | s6 = bb7 ]
      
    | bb7 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult u e = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & res : OwnResult'0.t_ownresult u e = res
    | & x : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult u e)-> {[@expl:postcondition] [%#sown5] inv'0 result}
      {[@expl:postcondition] [%#sown4] forall e : e . inv'3 e
       -> self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown3] (exists t : t . inv'2 t /\ self = OwnResult'0.C_Ok t)  -> result = res}
      (! return' {result}) ]
    
end
module Own_Impl0_Or
  type t
  
  type e
  
  type f
  
  let%span sown0 = "../own.rs" 149 14 149 18
  
  let%span sown1 = "../own.rs" 148 17 148 21
  
  let%span sown2 = "../own.rs" 148 23 148 26
  
  let%span sown3 = "../own.rs" 146 4 146 84
  
  let%span sown4 = "../own.rs" 147 4 147 74
  
  let%span sown5 = "../own.rs" 148 48 148 63
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  predicate invariant'3 (self : t)
  
  predicate inv'3 (_x : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'1 (self : OwnResult'0.t_ownresult t e) =
    [%#span6] true
  
  predicate inv'1 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'1 : forall x : OwnResult'0.t_ownresult t e . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t f) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t f)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t f . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : e)
  
  predicate resolve'3 (self : t)
  
  predicate resolve'1 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'3 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  predicate resolve'4 (self : f)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t f) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'3 t
      | OwnResult'0.C_Err e -> resolve'4 e
      end
  
  let rec or (self:OwnResult'0.t_ownresult t e) (res:OwnResult'0.t_ownresult t f) (return'  (ret:OwnResult'0.t_ownresult t f))= {[%#sown2] inv'0 res}
    {[%#sown1] inv'1 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = {[@expl:type invariant] inv'1 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'2 e} s2
      | s2 = -{resolve'2 e}- s3
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- res ] (any [ any_ (_any:OwnResult'0.t_ownresult t f)-> (!  [ &res <- _any ] s6) ] )
      | s6 = bb9 ]
      
    | bb9 = bb10
    | bb4 = bb6
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 res} s1
      | s1 = -{resolve'0 res}- s2
      | s2 = OwnResult'0.ok <t> <e> {self}
          (fun (r0'0:t) ->
             [ &v <- r0'0 ] 
            (any
            [ any_ (_any:t)-> (! OwnResult'0.ok <t> <e> {self}
                (fun (l_0'0:t) ->  [ &self <- OwnResult'0.C_Ok _any ] s3)) ]
            ))
      | s3 = {[@expl:type invariant] inv'1 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_0 <- OwnResult'0.C_Ok v ] (any [ any_ (_any:t)-> (!  [ &v <- _any ] s6) ] )
      | s6 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult t f = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & res : OwnResult'0.t_ownresult t f = res
    | & v : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult t f)-> {[@expl:postcondition] [%#sown5] inv'0 result}
      {[@expl:postcondition] [%#sown4] (exists e : e . inv'2 e /\ self = OwnResult'0.C_Err e)  -> result = res}
      {[@expl:postcondition] [%#sown3] forall t : t . inv'3 t
       -> self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl1_Copied
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 165 14 165 18
  
  let%span sown1 = "../own.rs" 160 18 160 22
  
  let%span sown2 = "../own.rs" 158 4 158 86
  
  let%span sown3 = "../own.rs" 159 4 159 86
  
  let%span sown4 = "../own.rs" 160 27 160 42
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../own.rs" 16 8 19 9
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'3 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'3 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'3 : forall x : OwnResult'0.t_ownresult t e . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span6] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  use prelude.prelude.Borrow
  
  let rec copied (self:OwnResult'0.t_ownresult t e) (return'  (ret:OwnResult'0.t_ownresult t e))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- OwnResult'0.C_Err e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 =  [ &_0 <- OwnResult'0.C_Ok t ] s6
      | s6 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult t e = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & t : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult t e)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] forall e : e . inv'2 e
       -> self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown2] forall t : t . inv'1 t
       -> self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl1_Cloned
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 178 14 178 18
  
  let%span sown1 = "../own.rs" 173 18 173 22
  
  let%span sown2 = "../own.rs" 171 4 171 86
  
  let%span sown3 = "../own.rs" 172 4 172 86
  
  let%span sown4 = "../own.rs" 173 27 173 42
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "../own.rs" 16 8 19 9
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_x : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'3 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'3 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'3 : forall x : OwnResult'0.t_ownresult t e . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult t e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  let rec clone'0 (self:t) (return'  (ret:t))= {[@expl:precondition] [%#span6] inv'1 self}
    any [ return' (result:t)-> {[%#span8] inv'4 result} {[%#span7] result = self} (! return' {result}) ] 
  
  predicate resolve'1 (self : t)
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult t e) =
    [%#span9] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec cloned (self:OwnResult'0.t_ownresult t e) (return'  (ret:OwnResult'0.t_ownresult t e))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any [ br0 (a:t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- OwnResult'0.C_Err e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb10 = bb11
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <t> <e> {self} (fun (r0'0:t) ->  [ &t <- r0'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 = clone'0 {t} (fun (_ret':t) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- OwnResult'0.C_Ok _6 ] (any [ any_ (_any:t)-> (!  [ &_6 <- _any ] s1) ] ) | s1 = bb8 ] 
    | bb8 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult t e = any_l ()
    | & self : OwnResult'0.t_ownresult t e = self
    | & t : t = any_l ()
    | & _6 : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult t e)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] forall e : e . inv'2 e
       -> self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown2] forall t : t . inv'1 t
       -> self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok t}
      (! return' {result}) ]
    
end
module Own_Impl2_Copied
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 193 14 193 18
  
  let%span sown1 = "../own.rs" 188 18 188 22
  
  let%span sown2 = "../own.rs" 186 4 186 105
  
  let%span sown3 = "../own.rs" 187 4 187 86
  
  let%span sown4 = "../own.rs" 188 27 188 42
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../own.rs" 16 8 19 9
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'3 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'3 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'3 : forall x : OwnResult'0.t_ownresult t e . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult (borrowed t) e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult (borrowed t) e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult (borrowed t) e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#span6]  ^ self =  * self
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult (borrowed t) e) =
    [%#span7] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec copied (self:OwnResult'0.t_ownresult (borrowed t) e) (return'  (ret:OwnResult'0.t_ownresult t e))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any
      [ br0 (a:borrowed t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <borrowed t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <borrowed t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- OwnResult'0.C_Err e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb7 ]
      
    | bb7 = bb8
    | bb8 = bb9
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <borrowed t> <e> {self}
          (fun (r0'0:borrowed t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:borrowed t)-> (! OwnResult'0.ok <borrowed t> <e> {self}
                (fun (l_0'0:borrowed t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = {[@expl:type invariant] inv'1 t} s4
      | s4 = -{resolve'1 t}- s5
      | s5 =  [ &_0 <- OwnResult'0.C_Ok ( * t) ] s6
      | s6 = bb9 ]
      
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult t e = any_l ()
    | & self : OwnResult'0.t_ownresult (borrowed t) e = self
    | & t : borrowed t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult t e)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] forall e : e . inv'2 e
       -> self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown2] forall t : borrowed t . inv'1 t
       -> self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok ( * t) /\ resolve'1 t}
      (! return' {result}) ]
    
end
module Own_Impl2_Cloned
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 206 14 206 18
  
  let%span sown1 = "../own.rs" 201 18 201 22
  
  let%span sown2 = "../own.rs" 199 4 199 105
  
  let%span sown3 = "../own.rs" 200 4 200 86
  
  let%span sown4 = "../own.rs" 201 27 201 42
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../own.rs" 16 8 19 9
  
  predicate invariant'5 (self : t)
  
  predicate inv'5 (_x : t)
  
  axiom inv'5 : forall x : t . inv'5 x = true
  
  predicate invariant'4 (self : t)
  
  predicate inv'4 (_x : t)
  
  axiom inv'4 : forall x : t . inv'4 x = true
  
  use Own_OwnResult_Type as OwnResult'0
  
  predicate invariant'3 (self : OwnResult'0.t_ownresult t e) =
    [%#span5] true
  
  predicate inv'3 (_x : OwnResult'0.t_ownresult t e)
  
  axiom inv'3 : forall x : OwnResult'0.t_ownresult t e . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t)
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult (borrowed t) e) =
    [%#span5] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult (borrowed t) e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult (borrowed t) e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed t) =
    [%#span6]  ^ self =  * self
  
  let rec clone'0 (self:t) (return'  (ret:t))= {[@expl:precondition] [%#span7] inv'4 self}
    any [ return' (result:t)-> {[%#span9] inv'5 result} {[%#span8] result = self} (! return' {result}) ] 
  
  predicate resolve'2 (self : e)
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult (borrowed t) e) =
    [%#span10] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec cloned (self:OwnResult'0.t_ownresult (borrowed t) e) (return'  (ret:OwnResult'0.t_ownresult t e))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = any
      [ br0 (a:borrowed t)-> {self = OwnResult'0.C_Ok a} (! bb4) | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb5) ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb5 = s0
      [ s0 = OwnResult'0.err <borrowed t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <borrowed t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- OwnResult'0.C_Err e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb9 ]
      
    | bb9 = bb10
    | bb10 = bb11
    | bb4 = bb6
    | bb6 = s0
      [ s0 = OwnResult'0.ok <borrowed t> <e> {self}
          (fun (r0'0:borrowed t) ->
             [ &t <- r0'0 ] 
            (any
            [ any_ (_any:borrowed t)-> (! OwnResult'0.ok <borrowed t> <e> {self}
                (fun (l_0'0:borrowed t) ->  [ &self <- OwnResult'0.C_Ok _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = clone'0 { * t} (fun (_ret':t) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 t} s1
      | s1 = -{resolve'1 t}- s2
      | s2 =  [ &_0 <- OwnResult'0.C_Ok _6 ] (any [ any_ (_any:t)-> (!  [ &_6 <- _any ] s3) ] )
      | s3 = bb8 ]
      
    | bb8 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : OwnResult'0.t_ownresult t e = any_l ()
    | & self : OwnResult'0.t_ownresult (borrowed t) e = self
    | & t : borrowed t = any_l ()
    | & _6 : t = any_l ()
    | & e : e = any_l () ]
    
    [ return' (result:OwnResult'0.t_ownresult t e)-> {[@expl:postcondition] [%#sown4] inv'3 result}
      {[@expl:postcondition] [%#sown3] forall e : e . inv'2 e
       -> self = OwnResult'0.C_Err e  -> result = OwnResult'0.C_Err e}
      {[@expl:postcondition] [%#sown2] forall t : borrowed t . inv'1 t
       -> self = OwnResult'0.C_Ok t  -> result = OwnResult'0.C_Ok ( * t) /\ resolve'1 t}
      (! return' {result}) ]
    
end
module Own_Impl3_Transpose
  type t
  
  type e
  
  let%span sown0 = "../own.rs" 218 14 218 18
  
  let%span sown1 = "../own.rs" 217 21 217 25
  
  let%span sown2 = "../own.rs" 214 4 214 62
  
  let%span sown3 = "../own.rs" 215 4 215 96
  
  let%span sown4 = "../own.rs" 216 4 216 92
  
  let%span sown5 = "../own.rs" 217 30 217 53
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span8 = "../own.rs" 16 8 19 9
  
  use Own_OwnResult_Type as OwnResult'0
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option (OwnResult'0.t_ownresult t e)) =
    [%#span6] true
  
  predicate inv'3 (_x : Option'0.t_option (OwnResult'0.t_ownresult t e))
  
  axiom inv'3 : forall x : Option'0.t_option (OwnResult'0.t_ownresult t e) . inv'3 x = true
  
  predicate invariant'2 (self : e)
  
  predicate inv'2 (_x : e)
  
  axiom inv'2 : forall x : e . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : OwnResult'0.t_ownresult (Option'0.t_option t) e) =
    [%#span6] true
  
  predicate inv'0 (_x : OwnResult'0.t_ownresult (Option'0.t_option t) e)
  
  axiom inv'0 : forall x : OwnResult'0.t_ownresult (Option'0.t_option t) e . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : e)
  
  predicate resolve'1 (self : Option'0.t_option t) =
    [%#span7] true
  
  predicate resolve'0 [#"../own.rs" 15 4 15 28] (self : OwnResult'0.t_ownresult (Option'0.t_option t) e) =
    [%#span8] match self with
      | OwnResult'0.C_Ok t -> resolve'1 t
      | OwnResult'0.C_Err e -> resolve'2 e
      end
  
  let rec transpose (self:OwnResult'0.t_ownresult (Option'0.t_option t) e) (return'  (ret:Option'0.t_option (OwnResult'0.t_ownresult t e)))= {[%#sown1] inv'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = any
      [ br0 (a:Option'0.t_option t)-> {self = OwnResult'0.C_Ok a} (! bb5)
      | br1 (a:e)-> {self = OwnResult'0.C_Err a} (! bb8) ]
      
    | bb8 = s0
      [ s0 = OwnResult'0.err <Option'0.t_option t> <e> {self}
          (fun (r0'0:e) ->
             [ &e <- r0'0 ] 
            (any
            [ any_ (_any:e)-> (! OwnResult'0.err <Option'0.t_option t> <e> {self}
                (fun (l_0'0:e) ->  [ &self <- OwnResult'0.C_Err _any ] s1)) ]
            ))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_11 <- OwnResult'0.C_Err e ] (any [ any_ (_any:e)-> (!  [ &e <- _any ] s4) ] )
      | s4 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some _11 ] 
        (any [ any_ (_any:OwnResult'0.t_ownresult t e)-> (!  [ &_11 <- _any ] s1) ] )
      | s1 = bb15 ]
      
    | bb15 = bb16
    | bb16 = bb17
    | bb5 = OwnResult'0.ok <Option'0.t_option t> <e> {self}
        (fun (r0'0:Option'0.t_option t) ->
          any [ br0 -> {r0'0 = Option'0.C_None } (! bb7) | br1 (a:t)-> {r0'0 = Option'0.C_Some a} (! bb6) ] )
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = {[%#sown0] false} any ]
      
    | bb6 = bb9
    | bb9 = s0
      [ s0 = OwnResult'0.ok <Option'0.t_option t> <e> {self}
          (fun (r0'0:Option'0.t_option t) ->
            Option'0.some <t> {r0'0}
              (fun (r0'1:t) ->
                 [ &x <- r0'1 ] 
                (any
                [ any_ (_any:t)-> (! OwnResult'0.ok <Option'0.t_option t> <e> {self}
                    (fun (l_0'0:Option'0.t_option t) ->
                      Option'0.some <t> {l_0'0}
                        (fun (l_0'1:t) ->  [ &self <- OwnResult'0.C_Ok (Option'0.C_Some _any) ] s1))) ]
                )))
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_8 <- OwnResult'0.C_Ok x ] (any [ any_ (_any:t)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb10 ]
      
    | bb10 = s0
      [ s0 =  [ &_0 <- Option'0.C_Some _8 ] (any [ any_ (_any:OwnResult'0.t_ownresult t e)-> (!  [ &_8 <- _any ] s1) ] )
      | s1 = bb11 ]
      
    | bb11 = bb12
    | bb12 = bb17
    | bb7 = bb13
    | bb13 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb17 ]
      
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option (OwnResult'0.t_ownresult t e) = any_l ()
    | & self : OwnResult'0.t_ownresult (Option'0.t_option t) e = self
    | & x : t = any_l ()
    | & _8 : OwnResult'0.t_ownresult t e = any_l ()
    | & e : e = any_l ()
    | & _11 : OwnResult'0.t_ownresult t e = any_l () ]
    
    [ return' (result:Option'0.t_option (OwnResult'0.t_ownresult t e))-> {[@expl:postcondition] [%#sown5] inv'3 result}
      {[@expl:postcondition] [%#sown4] forall e : e . inv'2 e
       -> self = OwnResult'0.C_Err e  -> result = Option'0.C_Some (OwnResult'0.C_Err e)}
      {[@expl:postcondition] [%#sown3] forall t : t . inv'1 t
       -> self = OwnResult'0.C_Ok (Option'0.C_Some t)  -> result = Option'0.C_Some (OwnResult'0.C_Ok t)}
      {[@expl:postcondition] [%#sown2] self = OwnResult'0.C_Ok (Option'0.C_None)  -> result = Option'0.C_None}
      (! return' {result}) ]
    
end
module Own_Impl4
  type t
  
  type e
end
