
module Own_OwnResult_Type
  type t_ownresult 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  let function ok_0 (self : t_ownresult 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Ok a -> a
      | C_Err _ -> any 't
      end
  let function err_0 (self : t_ownresult 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Ok _ -> any 'e
      | C_Err a -> a
      end
end
module Own_Impl0_IsOk
  type t
  type e
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  use prelude.Borrow
  predicate resolve0 (self : Own_OwnResult_Type.t_ownresult t e)
  val resolve0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg is_ok [#"../own.rs" 25 4 25 31] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    requires {[#"../own.rs" 25 18 25 22] inv0 self}
    ensures { [#"../own.rs" 24 14 24 62] result = (exists t : t . inv1 t /\ self = Own_OwnResult_Type.C_Ok t) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Own_Impl0_IsErr
  type t
  type e
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  predicate invariant1 (self : e)
  val invariant1 (self : e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : e)
  val inv1 (_x : e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : e . inv1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  use prelude.Borrow
  val is_ok0 [#"../own.rs" 25 4 25 31] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    requires {[#"../own.rs" 25 18 25 22] inv0 self}
    ensures { [#"../own.rs" 24 14 24 62] result = (exists t : t . inv2 t /\ self = Own_OwnResult_Type.C_Ok t) }
    
  predicate resolve0 (self : Own_OwnResult_Type.t_ownresult t e)
  val resolve0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg is_err [#"../own.rs" 30 4 30 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    requires {[#"../own.rs" 30 19 30 23] inv0 self}
    ensures { [#"../own.rs" 29 14 29 63] result = (exists e : e . inv1 e /\ self = Own_OwnResult_Type.C_Err e) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var _3 : bool;
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 31 9 31 21] _3 <- ([#"../own.rs" 31 9 31 21] is_ok0 self);
    goto BB1
  }
  BB1 {
    [#"../own.rs" 31 8 31 21] _0 <- not _3;
    _3 <- any bool;
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Own_Impl0_Ok
  type t
  type e
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option t)
  val invariant3 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option t)
  val inv3 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option t . inv3 x = true
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  predicate invariant1 (self : e)
  val invariant1 (self : e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : e)
  val inv1 (_x : e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : e . inv1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  predicate resolve1 (self : e)
  val resolve1 (self : e) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve2 t
      | Own_OwnResult_Type.C_Err e -> resolve1 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg ok [#"../own.rs" 36 4 36 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Core_Option_Option_Type.t_option t
    requires {[#"../own.rs" 36 14 36 18] inv0 self}
    ensures { [#"../own.rs" 34 4 34 75] forall t : t . inv2 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Core_Option_Option_Type.C_Some t }
    ensures { [#"../own.rs" 35 4 35 75] (exists e : e . inv1 e /\ self = Own_OwnResult_Type.C_Err e)
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 36 23 36 32] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var x : t;
  var x1 : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 37 14 37 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 40 27 40 28] x1 <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv1 x1 };
    assume { resolve1 x1 };
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 40 33 40 37] _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB6 {
    [#"../own.rs" 38 26 38 27] x <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 38 32 38 39] _0 <- Core_Option_Option_Type.C_Some x;
    x <- any t;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB10
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Own_Impl0_Err
  type t
  type e
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option e)
  val invariant3 (self : Core_Option_Option_Type.t_option e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option e)
  val inv3 (_x : Core_Option_Option_Type.t_option e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant1 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant1 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv1 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  predicate resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve0 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve1 self }
    
  let rec cfg err [#"../own.rs" 46 4 46 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Core_Option_Option_Type.t_option e
    requires {[#"../own.rs" 46 15 46 19] inv1 self}
    ensures { [#"../own.rs" 44 4 44 74] (exists t : t . inv0 t /\ self = Own_OwnResult_Type.C_Ok t)
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 45 4 45 76] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Core_Option_Option_Type.C_Some e }
    ensures { [#"../own.rs" 46 24 46 33] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option e;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var x : t;
  var x1 : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { [#"../own.rs" 47 14 47 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 50 27 50 28] x1 <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 50 33 50 40] _0 <- Core_Option_Option_Type.C_Some x1;
    x1 <- any e;
    goto BB8
  }
  BB6 {
    [#"../own.rs" 49 26 49 27] x <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 49 32 49 36] _0 <- Core_Option_Option_Type.C_None;
    goto BB7
  }
  BB7 {
    goto BB10
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Own_Impl0_AsRef
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant3 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant3 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv3 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  use prelude.Borrow
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Own_OwnResult_Type.t_ownresult t e)
  val resolve0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg as_ref [#"../own.rs" 56 4 56 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    requires {[#"../own.rs" 56 19 56 23] inv0 self}
    ensures { [#"../own.rs" 54 4 54 87] forall t : t . inv1 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 55 4 55 89] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e }
    ensures { [#"../own.rs" 56 28 56 45] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var x : t;
  var x1 : e;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB2
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB1 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 57 14 57 19] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../own.rs" 59 27 59 32] x1 <- Own_OwnResult_Type.err_0 self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv2 x1 };
    assume { resolve2 x1 };
    [#"../own.rs" 59 37 59 54] _0 <- Own_OwnResult_Type.C_Err x1;
    goto BB5
  }
  BB4 {
    [#"../own.rs" 58 26 58 31] x <- Own_OwnResult_Type.ok_0 self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv1 x };
    assume { resolve1 x };
    [#"../own.rs" 58 36 58 52] _0 <- Own_OwnResult_Type.C_Ok x;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Own_Impl0_AsMut
  type t
  type e
  use prelude.Borrow
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant5 (self : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e))
  val invariant5 (self : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e))
  val inv5 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e) . inv5 x = true
  predicate invariant4 (self : borrowed (Own_OwnResult_Type.t_ownresult t e))
  val invariant4 (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (Own_OwnResult_Type.t_ownresult t e))
  val inv4 (_x : borrowed (Own_OwnResult_Type.t_ownresult t e)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (Own_OwnResult_Type.t_ownresult t e) . inv4 x = true
  predicate invariant3 (self : borrowed e)
  val invariant3 (self : borrowed e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed e)
  val inv3 (_x : borrowed e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  predicate invariant1 (self : borrowed t)
  val invariant1 (self : borrowed t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed t)
  val inv1 (_x : borrowed t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed t . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve2 (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed e) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed e) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg as_mut [#"../own.rs" 71 4 71 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Own_OwnResult_Type.t_ownresult t e)) : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e)
    requires {[#"../own.rs" 71 23 71 27] inv4 self}
    ensures { [#"../own.rs" 63 4 70 6] exists t : borrowed t . inv1 t
    /\ ( * self = Own_OwnResult_Type.C_Ok ( * t)
    /\  ^ self = Own_OwnResult_Type.C_Ok ( ^ t) /\ result = Own_OwnResult_Type.C_Ok t
    \/ (exists e : borrowed e . inv3 e
    /\  * self = Own_OwnResult_Type.C_Err ( * e)
    /\  ^ self = Own_OwnResult_Type.C_Err ( ^ e) /\ result = Own_OwnResult_Type.C_Err e)) }
    ensures { [#"../own.rs" 71 32 71 57] inv5 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult (borrowed t) (borrowed e);
  var self : borrowed (Own_OwnResult_Type.t_ownresult t e) = self;
  var x : borrowed t;
  var _5 : borrowed t;
  var x1 : borrowed e;
  var _7 : borrowed e;
  {
    goto BB0
  }
  BB0 {
    switch ( * self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB2
      | Own_OwnResult_Type.C_Err _ -> goto BB3
      end
  }
  BB1 {
    assert { [@expl:type invariant] inv4 self };
    assume { resolve2 self };
    assert { [#"../own.rs" 72 14 72 19] false };
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../own.rs" 74 27 74 36] x1 <- Borrow.borrow_final (Own_OwnResult_Type.err_0 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../own.rs" 74 27 74 36] self <- { self with current = (let Own_OwnResult_Type.C_Err x0 =  * self in Own_OwnResult_Type.C_Err ( ^ x1)) ; };
    assume { inv2 ( ^ x1) };
    [#"../own.rs" 74 56 74 57] _7 <- Borrow.borrow_final ( * x1) (Borrow.get_id x1);
    [#"../own.rs" 74 56 74 57] x1 <- { x1 with current = ( ^ _7) ; };
    assume { inv2 ( ^ _7) };
    [#"../own.rs" 74 41 74 58] _0 <- Own_OwnResult_Type.C_Err _7;
    _7 <- any borrowed e;
    assert { [@expl:type invariant] inv3 x1 };
    assume { resolve1 x1 };
    goto BB5
  }
  BB4 {
    [#"../own.rs" 73 26 73 35] x <- Borrow.borrow_final (Own_OwnResult_Type.ok_0 ( * self)) (Borrow.inherit_id (Borrow.get_id self) 1);
    [#"../own.rs" 73 26 73 35] self <- { self with current = (let Own_OwnResult_Type.C_Ok x0 =  * self in Own_OwnResult_Type.C_Ok ( ^ x)) ; };
    assume { inv0 ( ^ x) };
    [#"../own.rs" 73 54 73 55] _5 <- Borrow.borrow_final ( * x) (Borrow.get_id x);
    [#"../own.rs" 73 54 73 55] x <- { x with current = ( ^ _5) ; };
    assume { inv0 ( ^ _5) };
    [#"../own.rs" 73 40 73 56] _0 <- Own_OwnResult_Type.C_Ok _5;
    _5 <- any borrowed t;
    assert { [@expl:type invariant] inv1 x };
    assume { resolve0 x };
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] inv4 self };
    assume { resolve2 self };
    return _0
  }
  
end
module Own_Impl0_Unwrap
  type t
  type e
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  predicate invariant1 (self : e)
  val invariant1 (self : e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : e)
  val inv1 (_x : e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : e . inv1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  predicate resolve1 (self : e)
  val resolve1 (self : e) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve2 t
      | Own_OwnResult_Type.C_Err e -> resolve1 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg unwrap [#"../own.rs" 80 4 82 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : t
    requires {[#"../own.rs" 78 4 78 54] exists t : t . inv2 t /\ self = Own_OwnResult_Type.C_Ok t}
    requires {[#"../own.rs" 80 18 80 22] inv0 self}
    ensures { [#"../own.rs" 79 14 79 43] Own_OwnResult_Type.C_Ok result = self }
    ensures { [#"../own.rs" 80 27 80 28] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var t : t;
  var _e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 84 14 84 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 86 27 86 29] _e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv1 _e };
    assume { resolve1 _e };
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { false };
    absurd
  }
  BB6 {
    [#"../own.rs" 85 26 85 27] t <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 85 32 85 33] _0 <- t;
    t <- any t;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Own_Impl0_Expect
  type t
  type e
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  predicate invariant1 (self : e)
  val invariant1 (self : e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : e)
  val inv1 (_x : e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : e . inv1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  use prelude.Borrow
  predicate resolve1 (self : e)
  val resolve1 (self : e) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve2 t
      | Own_OwnResult_Type.C_Err e -> resolve1 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg expect [#"../own.rs" 92 4 94 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (msg : string) : t
    requires {[#"../own.rs" 90 4 90 54] exists t : t . inv2 t /\ self = Own_OwnResult_Type.C_Ok t}
    requires {[#"../own.rs" 92 18 92 22] inv0 self}
    ensures { [#"../own.rs" 91 14 91 43] Own_OwnResult_Type.C_Ok result = self }
    ensures { [#"../own.rs" 92 38 92 39] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var t : t;
  var _e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 96 14 96 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 98 27 98 29] _e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv1 _e };
    assume { resolve1 _e };
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { false };
    absurd
  }
  BB6 {
    [#"../own.rs" 97 26 97 27] t <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 97 32 97 33] _0 <- t;
    t <- any t;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Own_Impl0_UnwrapErr
  type t
  type e
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant1 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant1 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv1 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  predicate resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve0 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve1 self }
    
  let rec cfg unwrap_err [#"../own.rs" 104 4 106 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : e
    requires {[#"../own.rs" 102 4 102 55] exists e : e . inv2 e /\ self = Own_OwnResult_Type.C_Err e}
    requires {[#"../own.rs" 104 22 104 26] inv1 self}
    ensures { [#"../own.rs" 103 14 103 44] Own_OwnResult_Type.C_Err result = self }
    ensures { [#"../own.rs" 104 31 104 32] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : e;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var _t : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { [#"../own.rs" 108 14 108 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 110 27 110 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 110 33 110 34] _0 <- e;
    e <- any e;
    goto BB7
  }
  BB6 {
    [#"../own.rs" 109 26 109 28] _t <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 _t };
    assume { resolve0 _t };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { false };
    absurd
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Own_Impl0_UnwrapOr
  type t
  type e
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant1 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant1 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv1 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  predicate resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve0 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve1 self }
    
  let rec cfg unwrap_or [#"../own.rs" 116 4 116 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (default : t) : t
    requires {[#"../own.rs" 116 21 116 25] inv1 self}
    requires {[#"../own.rs" 116 27 116 34] inv0 default}
    ensures { [#"../own.rs" 114 4 114 69] forall t : t . inv0 t  -> self = Own_OwnResult_Type.C_Ok t  -> result = t }
    ensures { [#"../own.rs" 115 4 115 78] (exists e : e . inv2 e /\ self = Own_OwnResult_Type.C_Err e)
     -> result = default }
    ensures { [#"../own.rs" 116 42 116 43] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var default : t = default;
  var t : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 default };
    assume { resolve0 default };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { [#"../own.rs" 117 14 117 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 120 27 120 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv2 e };
    assume { resolve2 e };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 120 33 120 40] _0 <- default;
    default <- any t;
    goto BB8
  }
  BB6 {
    assert { [@expl:type invariant] inv0 default };
    assume { resolve0 default };
    [#"../own.rs" 118 26 118 27] t <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 118 32 118 33] _0 <- t;
    t <- any t;
    goto BB7
  }
  BB7 {
    goto BB9
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Own_Impl0_UnwrapOrDefault
  type t
  type e
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  predicate is_default0 (self : t)
  val is_default0 (self : t) : bool
    ensures { result = is_default0 self }
    
  val default0 (_1 : ()) : t
    ensures { [#"../../../../../creusot-contracts/src/std/default.rs" 13 26 13 45] is_default0 result }
    ensures { inv1 result }
    
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve1 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg unwrap_or_default [#"../own.rs" 126 4 128 19] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : t
    requires {[#"../own.rs" 126 29 126 33] inv0 self}
    ensures { [#"../own.rs" 124 4 124 69] forall t : t . inv1 t  -> self = Own_OwnResult_Type.C_Ok t  -> result = t }
    ensures { [#"../own.rs" 125 4 125 80] (exists e : e . inv2 e /\ self = Own_OwnResult_Type.C_Err e)
     -> is_default0 result }
    ensures { [#"../own.rs" 126 38 126 39] inv1 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var x : t;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 130 14 130 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 132 33 132 45] _0 <- ([#"../own.rs" 132 33 132 45] default0 ([#"../own.rs" 132 33 132 45] ()));
    goto BB8
  }
  BB6 {
    [#"../own.rs" 131 26 131 27] x <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 131 32 131 33] _0 <- x;
    x <- any t;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Own_Impl0_And
  type t
  type e
  type u
  predicate invariant3 (self : e)
  val invariant3 (self : e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : e)
  val inv3 (_x : e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : e . inv3 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant2 (self : Own_OwnResult_Type.t_ownresult u e)
  val invariant2 (self : Own_OwnResult_Type.t_ownresult u e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Own_OwnResult_Type.t_ownresult u e)
  val inv2 (_x : Own_OwnResult_Type.t_ownresult u e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Own_OwnResult_Type.t_ownresult u e . inv2 x = true
  predicate invariant1 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant1 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv1 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve3 (self : e)
  val resolve3 (self : e) : bool
    ensures { result = resolve3 self }
    
  predicate resolve4 (self : u)
  val resolve4 (self : u) : bool
    ensures { result = resolve4 self }
    
  predicate resolve2 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult u e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve4 t
      | Own_OwnResult_Type.C_Err e -> resolve3 e
      end
  val resolve2 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult u e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  predicate resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve0 t
      | Own_OwnResult_Type.C_Err e -> resolve3 e
      end
  val resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve1 self }
    
  let rec cfg and [#"../own.rs" 138 4 138 64] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (res : Own_OwnResult_Type.t_ownresult u e) : Own_OwnResult_Type.t_ownresult u e
    requires {[#"../own.rs" 138 18 138 22] inv1 self}
    requires {[#"../own.rs" 138 24 138 27] inv2 res}
    ensures { [#"../own.rs" 136 4 136 73] (exists t : t . inv0 t /\ self = Own_OwnResult_Type.C_Ok t)  -> result = res }
    ensures { [#"../own.rs" 137 4 137 86] forall e : e . inv3 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e }
    ensures { [#"../own.rs" 138 49 138 64] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult u e;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var res : Own_OwnResult_Type.t_ownresult u e = res;
  var x : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv2 res };
    assume { resolve2 res };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { [#"../own.rs" 139 14 139 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    assert { [@expl:type invariant] inv2 res };
    assume { resolve2 res };
    [#"../own.rs" 142 27 142 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 142 33 142 50] _0 <- Own_OwnResult_Type.C_Err e;
    e <- any e;
    goto BB8
  }
  BB6 {
    [#"../own.rs" 141 26 141 27] x <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 141 32 141 35] _0 <- res;
    res <- any Own_OwnResult_Type.t_ownresult u e;
    goto BB7
  }
  BB7 {
    goto BB10
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Own_Impl0_Or
  type t
  type e
  type f
  predicate invariant3 (self : t)
  val invariant3 (self : t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : t)
  val inv3 (_x : t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : t . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant1 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant1 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv1 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Own_OwnResult_Type.t_ownresult t e . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t f)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t f) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t f)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t f) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t f . inv0 x = true
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve3 (self : t)
  val resolve3 (self : t) : bool
    ensures { result = resolve3 self }
    
  predicate resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve3 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve1 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve1 self }
    
  predicate resolve4 (self : f)
  val resolve4 (self : f) : bool
    ensures { result = resolve4 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t f) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve3 t
      | Own_OwnResult_Type.C_Err e -> resolve4 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t f) : bool
    ensures { result = resolve0 self }
    
  let rec cfg or [#"../own.rs" 148 4 148 63] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) (res : Own_OwnResult_Type.t_ownresult t f) : Own_OwnResult_Type.t_ownresult t f
    requires {[#"../own.rs" 148 17 148 21] inv1 self}
    requires {[#"../own.rs" 148 23 148 26] inv0 res}
    ensures { [#"../own.rs" 146 4 146 84] forall t : t . inv3 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 147 4 147 74] (exists e : e . inv2 e /\ self = Own_OwnResult_Type.C_Err e)
     -> result = res }
    ensures { [#"../own.rs" 148 48 148 63] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t f;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var res : Own_OwnResult_Type.t_ownresult t f = res;
  var v : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 res };
    assume { resolve0 res };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    assert { [#"../own.rs" 149 14 149 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 152 27 152 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv2 e };
    assume { resolve2 e };
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 152 33 152 36] _0 <- res;
    res <- any Own_OwnResult_Type.t_ownresult t f;
    goto BB9
  }
  BB6 {
    assert { [@expl:type invariant] inv0 res };
    assume { resolve0 res };
    [#"../own.rs" 150 26 150 27] v <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any t));
    assert { [@expl:type invariant] inv1 self };
    assume { resolve1 self };
    [#"../own.rs" 150 32 150 48] _0 <- Own_OwnResult_Type.C_Ok v;
    v <- any t;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB10
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Own_Impl1_Copied
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant3 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant3 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv3 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  use prelude.Borrow
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve1 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg copied [#"../own.rs" 160 4 162 16] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    requires {[#"../own.rs" 160 18 160 22] inv0 self}
    ensures { [#"../own.rs" 158 4 158 86] forall t : t . inv1 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 159 4 159 86] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e }
    ensures { [#"../own.rs" 160 27 160 42] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var t : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 165 14 165 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 167 27 167 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 167 33 167 50] _0 <- Own_OwnResult_Type.C_Err e;
    e <- any e;
    goto BB7
  }
  BB6 {
    [#"../own.rs" 166 26 166 27] t <- Own_OwnResult_Type.ok_0 self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv1 t };
    assume { resolve1 t };
    [#"../own.rs" 166 32 166 49] _0 <- Own_OwnResult_Type.C_Ok t;
    goto BB9
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Own_Impl1_Cloned
  type t
  type e
  predicate invariant4 (self : t)
  val invariant4 (self : t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : t)
  val inv4 (_x : t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : t . inv4 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant3 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant3 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv3 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult t e . inv0 x = true
  use prelude.Borrow
  val clone0 (self : t) : t
    requires {inv1 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv4 result }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve1 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg cloned [#"../own.rs" 173 4 175 17] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult t e) : Own_OwnResult_Type.t_ownresult t e
    requires {[#"../own.rs" 173 18 173 22] inv0 self}
    ensures { [#"../own.rs" 171 4 171 86] forall t : t . inv1 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok t }
    ensures { [#"../own.rs" 172 4 172 86] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e }
    ensures { [#"../own.rs" 173 27 173 42] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self : Own_OwnResult_Type.t_ownresult t e = self;
  var t : t;
  var _6 : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 178 14 178 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 180 27 180 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 180 33 180 50] _0 <- Own_OwnResult_Type.C_Err e;
    e <- any e;
    goto BB9
  }
  BB6 {
    [#"../own.rs" 179 26 179 27] t <- Own_OwnResult_Type.ok_0 self;
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv1 t };
    assume { resolve1 t };
    [#"../own.rs" 179 46 179 55] _6 <- ([#"../own.rs" 179 46 179 55] clone0 t);
    goto BB7
  }
  BB7 {
    [#"../own.rs" 179 32 179 56] _0 <- Own_OwnResult_Type.C_Ok _6;
    _6 <- any t;
    goto BB8
  }
  BB8 {
    goto BB11
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Own_Impl2_Copied
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant3 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant3 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv3 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  use prelude.Borrow
  predicate invariant1 (self : borrowed t)
  val invariant1 (self : borrowed t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed t)
  val inv1 (_x : borrowed t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed t . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult (borrowed t) e . inv0 x = true
  predicate resolve1 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve1 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg copied [#"../own.rs" 188 4 190 16] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : Own_OwnResult_Type.t_ownresult t e
    requires {[#"../own.rs" 188 18 188 22] inv0 self}
    ensures { [#"../own.rs" 186 4 186 105] forall t : borrowed t . inv1 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok ( * t) /\ resolve1 t }
    ensures { [#"../own.rs" 187 4 187 86] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e }
    ensures { [#"../own.rs" 188 27 188 42] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self : Own_OwnResult_Type.t_ownresult (borrowed t) e = self;
  var t : borrowed t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 193 14 193 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 195 27 195 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 195 33 195 50] _0 <- Own_OwnResult_Type.C_Err e;
    e <- any e;
    goto BB7
  }
  BB6 {
    [#"../own.rs" 194 26 194 27] t <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any borrowed t));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [@expl:type invariant] inv1 t };
    assume { resolve1 t };
    [#"../own.rs" 194 32 194 49] _0 <- Own_OwnResult_Type.C_Ok ( * t);
    goto BB9
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Own_Impl2_Cloned
  type t
  type e
  predicate invariant5 (self : t)
  val invariant5 (self : t) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : t)
  val inv5 (_x : t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : t . inv5 x = true
  predicate invariant4 (self : t)
  val invariant4 (self : t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : t)
  val inv4 (_x : t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : t . inv4 x = true
  use Own_OwnResult_Type as Own_OwnResult_Type
  predicate invariant3 (self : Own_OwnResult_Type.t_ownresult t e)
  val invariant3 (self : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Own_OwnResult_Type.t_ownresult t e)
  val inv3 (_x : Own_OwnResult_Type.t_ownresult t e) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Own_OwnResult_Type.t_ownresult t e . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  use prelude.Borrow
  predicate invariant1 (self : borrowed t)
  val invariant1 (self : borrowed t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed t)
  val inv1 (_x : borrowed t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed t . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult (borrowed t) e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult (borrowed t) e . inv0 x = true
  predicate resolve1 (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed t) : bool
    ensures { result = resolve1 self }
    
  val clone0 (self : t) : t
    requires {inv4 self}
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { inv5 result }
    
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve1 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg cloned [#"../own.rs" 201 4 203 17] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult (borrowed t) e) : Own_OwnResult_Type.t_ownresult t e
    requires {[#"../own.rs" 201 18 201 22] inv0 self}
    ensures { [#"../own.rs" 199 4 199 105] forall t : borrowed t . inv1 t
     -> self = Own_OwnResult_Type.C_Ok t  -> result = Own_OwnResult_Type.C_Ok ( * t) /\ resolve1 t }
    ensures { [#"../own.rs" 200 4 200 86] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Own_OwnResult_Type.C_Err e }
    ensures { [#"../own.rs" 201 27 201 42] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Own_OwnResult_Type.t_ownresult t e;
  var self : Own_OwnResult_Type.t_ownresult (borrowed t) e = self;
  var t : borrowed t;
  var _6 : t;
  var e : e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB4
      | Own_OwnResult_Type.C_Err _ -> goto BB5
      end
  }
  BB3 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 206 14 206 18] false };
    absurd
  }
  BB4 {
    goto BB6
  }
  BB5 {
    [#"../own.rs" 208 27 208 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 208 33 208 50] _0 <- Own_OwnResult_Type.C_Err e;
    e <- any e;
    goto BB9
  }
  BB6 {
    [#"../own.rs" 207 26 207 27] t <- Own_OwnResult_Type.ok_0 self;
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (any borrowed t));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 207 46 207 55] _6 <- ([#"../own.rs" 207 46 207 55] clone0 ( * t));
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] inv1 t };
    assume { resolve1 t };
    [#"../own.rs" 207 32 207 56] _0 <- Own_OwnResult_Type.C_Ok _6;
    _6 <- any t;
    goto BB8
  }
  BB8 {
    goto BB11
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Own_Impl3_Transpose
  type t
  type e
  use Own_OwnResult_Type as Own_OwnResult_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant3 (self : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e))
  val invariant3 (self : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e))
  val inv3 (_x : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e) . inv3 x = true
  predicate invariant2 (self : e)
  val invariant2 (self : e) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : e)
  val inv2 (_x : e) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : e . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e)
  val invariant0 (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e)
  val inv0 (_x : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e . inv0 x = true
  predicate resolve2 (self : e)
  val resolve2 (self : e) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : Core_Option_Option_Type.t_option t)
  val resolve1 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e)
    
   =
    [#"../own.rs" 16 8 19 9] match self with
      | Own_OwnResult_Type.C_Ok t -> resolve1 t
      | Own_OwnResult_Type.C_Err e -> resolve2 e
      end
  val resolve0 [#"../own.rs" 15 4 15 28] (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) : bool
    ensures { result = resolve0 self }
    
  let rec cfg transpose [#"../own.rs" 217 4 217 53] [@cfg:stackify] [@cfg:subregion_analysis] (self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e) : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e)
    requires {[#"../own.rs" 217 21 217 25] inv0 self}
    ensures { [#"../own.rs" 214 4 214 62] self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_None)
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../own.rs" 215 4 215 96] forall t : t . inv1 t
     -> self = Own_OwnResult_Type.C_Ok (Core_Option_Option_Type.C_Some t)
     -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Ok t) }
    ensures { [#"../own.rs" 216 4 216 92] forall e : e . inv2 e
     -> self = Own_OwnResult_Type.C_Err e  -> result = Core_Option_Option_Type.C_Some (Own_OwnResult_Type.C_Err e) }
    ensures { [#"../own.rs" 217 30 217 53] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Own_OwnResult_Type.t_ownresult t e);
  var self : Own_OwnResult_Type.t_ownresult (Core_Option_Option_Type.t_option t) e = self;
  var x : t;
  var _8 : Own_OwnResult_Type.t_ownresult t e;
  var e : e;
  var _11 : Own_OwnResult_Type.t_ownresult t e;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self)
      | Own_OwnResult_Type.C_Ok _ -> goto BB5
      | Own_OwnResult_Type.C_Err _ -> goto BB8
      end
  }
  BB4 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    assert { [#"../own.rs" 218 14 218 18] false };
    absurd
  }
  BB5 {
    switch (Own_OwnResult_Type.ok_0 self)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      end
  }
  BB6 {
    goto BB9
  }
  BB7 {
    goto BB13
  }
  BB8 {
    [#"../own.rs" 221 27 221 28] e <- Own_OwnResult_Type.err_0 self;
    self <- (let Own_OwnResult_Type.C_Err x0 = self in Own_OwnResult_Type.C_Err (any e));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 221 38 221 55] _11 <- Own_OwnResult_Type.C_Err e;
    e <- any e;
    goto BB14
  }
  BB9 {
    [#"../own.rs" 219 31 219 32] x <- Core_Option_Option_Type.some_0 (Own_OwnResult_Type.ok_0 self);
    self <- (let Own_OwnResult_Type.C_Ok x0 = self in Own_OwnResult_Type.C_Ok (let Core_Option_Option_Type.C_Some x0 = Own_OwnResult_Type.ok_0 self in Core_Option_Option_Type.C_Some (any t)));
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 219 43 219 59] _8 <- Own_OwnResult_Type.C_Ok x;
    x <- any t;
    goto BB10
  }
  BB10 {
    [#"../own.rs" 219 38 219 60] _0 <- Core_Option_Option_Type.C_Some _8;
    _8 <- any Own_OwnResult_Type.t_ownresult t e;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB17
  }
  BB13 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    [#"../own.rs" 220 35 220 39] _0 <- Core_Option_Option_Type.C_None;
    goto BB17
  }
  BB14 {
    [#"../own.rs" 221 33 221 56] _0 <- Core_Option_Option_Type.C_Some _11;
    _11 <- any Own_OwnResult_Type.t_ownresult t e;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Own_Impl4
  type t
  type e
end
