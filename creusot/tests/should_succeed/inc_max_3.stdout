module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl8_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl8
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl8_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = Resolve0.resolve
end
module IncMax3_IncMax3
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = bool
  clone CreusotContracts_Builtins_Impl8_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = ()
  let rec cfg inc_max_3 (ma : borrowed uint32) (mb : borrowed uint32) (mc : borrowed uint32) : ()
    requires { * ma <= (1000000 : uint32) &&  * mb <= (1000000 : uint32) &&  * mc <= (1000000 : uint32)}
    ensures {  ^ ma <>  ^ mb &&  ^ mb <>  ^ mc &&  ^ mc <>  ^ ma }
    
   = 
  var _0 : ();
  var ma_1 : borrowed uint32;
  var mb_2 : borrowed uint32;
  var mc_3 : borrowed uint32;
  var _4 : ();
  var _5 : bool;
  var _6 : uint32;
  var _7 : uint32;
  var tmp_8 : borrowed uint32;
  var _9 : borrowed uint32;
  var _10 : borrowed uint32;
  var _11 : ();
  var _12 : bool;
  var _13 : uint32;
  var _14 : uint32;
  var tmp_15 : borrowed uint32;
  var _16 : borrowed uint32;
  var _17 : borrowed uint32;
  var _18 : ();
  var _19 : bool;
  var _20 : uint32;
  var _21 : uint32;
  var tmp_22 : borrowed uint32;
  var _23 : borrowed uint32;
  var _24 : borrowed uint32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    mc_3 <- mc;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <-  * ma_1;
    assume { Resolve0.resolve _7 };
    _7 <-  * mb_2;
    _5 <- _6 < _7;
    switch (_5)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve1.resolve _5 };
    assume { Resolve2.resolve tmp_8 };
    tmp_8 <- ma_1;
    assume { Resolve2.resolve tmp_8 };
    _9 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _9) };
    assume { Resolve2.resolve mb_2 };
    assume { Resolve2.resolve ma_1 };
    ma_1 <- _9;
    _10 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _10) };
    assume { Resolve2.resolve mb_2 };
    mb_2 <- _10;
    _4 <- ();
    assume { Resolve3.resolve _4 };
    goto BB3
  }
  BB2 {
    assume { Resolve1.resolve _5 };
    _4 <- ();
    assume { Resolve3.resolve _4 };
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _13 };
    _13 <-  * mb_2;
    assume { Resolve0.resolve _14 };
    _14 <-  * mc_3;
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB5
      | True -> goto BB4
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve1.resolve _12 };
    assume { Resolve2.resolve tmp_15 };
    tmp_15 <- mb_2;
    assume { Resolve2.resolve tmp_15 };
    _16 <- borrow_mut ( * mc_3);
    mc_3 <- { mc_3 with current = ( ^ _16) };
    assume { Resolve2.resolve mc_3 };
    assume { Resolve2.resolve mb_2 };
    mb_2 <- _16;
    _17 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _17) };
    assume { Resolve2.resolve mc_3 };
    mc_3 <- _17;
    assume { Resolve2.resolve _17 };
    _11 <- ();
    assume { Resolve3.resolve _11 };
    goto BB6
  }
  BB5 {
    assume { Resolve2.resolve mc_3 };
    assume { Resolve1.resolve _12 };
    _11 <- ();
    assume { Resolve3.resolve _11 };
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _20 };
    _20 <-  * ma_1;
    assume { Resolve0.resolve _21 };
    _21 <-  * mb_2;
    _19 <- _20 < _21;
    switch (_19)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve1.resolve _19 };
    assume { Resolve2.resolve tmp_22 };
    tmp_22 <- ma_1;
    assume { Resolve2.resolve tmp_22 };
    _23 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _23) };
    assume { Resolve2.resolve mb_2 };
    assume { Resolve2.resolve ma_1 };
    ma_1 <- _23;
    _24 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _24) };
    assume { Resolve2.resolve mb_2 };
    mb_2 <- _24;
    _18 <- ();
    assume { Resolve3.resolve _18 };
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve _19 };
    _18 <- ();
    assume { Resolve3.resolve _18 };
    goto BB9
  }
  BB9 {
    ma_1 <- { ma_1 with current = ( * ma_1 + (2 : uint32)) };
    assume { Resolve2.resolve ma_1 };
    mb_2 <- { mb_2 with current = ( * mb_2 + (1 : uint32)) };
    assume { Resolve2.resolve mb_2 };
    _0 <- ();
    return _0
  }
  
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module IncMax3_TestIncMax3
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl8_Resolve as Resolve0 with type t = uint32
  clone IncMax3_IncMax3 as IncMax31
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = bool
  clone Core_Panicking_Panic as Panic4
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = ()
  let rec cfg test_inc_max_3 (a : uint32) (b : uint32) (c : uint32) : ()
    requires {a <= (1000000 : uint32) && b <= (1000000 : uint32) && c <= (1000000 : uint32)}
    
   = 
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var c_3 : uint32;
  var _4 : ();
  var _5 : borrowed uint32;
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : borrowed uint32;
  var _9 : borrowed uint32;
  var _10 : borrowed uint32;
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : bool;
  var _15 : bool;
  var _16 : uint32;
  var _17 : uint32;
  var _18 : bool;
  var _19 : uint32;
  var _20 : uint32;
  var _21 : bool;
  var _22 : uint32;
  var _23 : uint32;
  var _24 : ();
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut a_1;
    a_1 <-  ^ _6;
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    assume { Resolve0.resolve _6 };
    _8 <- borrow_mut b_2;
    b_2 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { Resolve0.resolve _8 };
    _10 <- borrow_mut c_3;
    c_3 <-  ^ _10;
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    assume { Resolve0.resolve _10 };
    _4 <- IncMax31.inc_max_3 _5 _7 _9;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    assume { Resolve0.resolve _7 };
    assume { Resolve0.resolve _9 };
    assume { Resolve2.resolve _16 };
    _16 <- a_1;
    assume { Resolve2.resolve _17 };
    _17 <- b_2;
    _15 <- _16 <> _17;
    switch (_15)
      | False -> goto BB5
      | True -> goto BB6
      | _ -> goto BB6
      end
  }
  BB2 {
    assume { Resolve2.resolve a_1 };
    assume { Resolve2.resolve c_3 };
    assume { Resolve3.resolve _14 };
    _13 <- false;
    goto BB4
  }
  BB3 {
    assume { Resolve3.resolve _14 };
    assume { Resolve2.resolve _22 };
    _22 <- c_3;
    assume { Resolve2.resolve c_3 };
    assume { Resolve2.resolve _23 };
    _23 <- a_1;
    assume { Resolve2.resolve a_1 };
    _21 <- _22 <> _23;
    assume { Resolve3.resolve _13 };
    _13 <- _21;
    goto BB4
  }
  BB4 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB9
      | True -> goto BB8
      | _ -> goto BB8
      end
  }
  BB5 {
    assume { Resolve2.resolve b_2 };
    assume { Resolve3.resolve _15 };
    _14 <- false;
    goto BB7
  }
  BB6 {
    assume { Resolve3.resolve _15 };
    assume { Resolve2.resolve _19 };
    _19 <- b_2;
    assume { Resolve2.resolve b_2 };
    assume { Resolve2.resolve _20 };
    _20 <- c_3;
    _18 <- _19 <> _20;
    assume { Resolve3.resolve _14 };
    _14 <- _18;
    goto BB7
  }
  BB7 {
    switch (_14)
      | False -> goto BB2
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB8 {
    assume { Resolve3.resolve _12 };
    absurd
  }
  BB9 {
    assume { Resolve3.resolve _12 };
    _11 <- ();
    assume { Resolve5.resolve _11 };
    _0 <- ();
    return _0
  }
  
end
