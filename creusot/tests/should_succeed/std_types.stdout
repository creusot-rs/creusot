module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some('t)
    
  type stdtypes_mytype  = 
    | StdTypes_MyType(core_option_option uint32)
    
end
module StdTypes_X_Interface
  use Type
  val x (x : Type.stdtypes_mytype) : ()
end
module StdTypes_X
  use Type
  let rec cfg x (x : Type.stdtypes_mytype) : () = 
  var _0 : ();
  var x_1 : Type.stdtypes_mytype;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun x -> true) x_1 };
    return _0
  }
  
end
module StdTypes_Main_Interface
  val main () : ()
end
module StdTypes_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
