module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type creusotcontracts_std1_vec_vec 't  
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module HeapsortGeneric_Left_Interface
  use mach.int.Int
  function left (i : int) : int
end
module HeapsortGeneric_Left
  use mach.int.Int
  use mach.int.Int32
  function left (i : int) : int = 
    2 * i + 1
end
module HeapsortGeneric_Right_Interface
  use mach.int.Int
  function right (i : int) : int
end
module HeapsortGeneric_Right
  use mach.int.Int
  use mach.int.Int32
  function right (i : int) : int = 
    2 * i + 2
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self   
  use Type
  function cmp_log (self : self) (_2 : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self   
  use Type
  function cmp_log (self : self) (_2 : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self   
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = not (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self   
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self   
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = not (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self   
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self   
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface
  type self   
  predicate log_eq (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq
  type self   
  predicate log_eq (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface
  type self   
  predicate log_ne (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe
  type self   
  predicate log_ne (self : self) (_2 : self)
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
  axiom eq_ne_spec : forall a : self, b : self . not (LogEq0.log_eq a b = LogNe0.log_ne a b)
end
module CreusotContracts_Logic_Eq_EqLogic_Refl_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Refl
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . LogEq0.log_eq x x
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
  axiom symmetry_spec : forall x : self, y : self . LogEq0.log_eq x y -> LogEq0.log_eq y x
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
  axiom transitivity_spec : forall x : self, y : self, z : self . LogEq0.log_eq y z -> LogEq0.log_eq x y -> LogEq0.log_eq x z
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self   
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self   
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (LogEq0.log_eq x y -> CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal) && (CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Equal -> LogEq0.log_eq x y)
end
module HeapsortGeneric_HeapFrag_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  predicate heap_frag (s : Seq.seq t) (start : int) (end' : int)
end
module HeapsortGeneric_HeapFrag
  type t   
  use seq.Seq
  use mach.int.Int
  clone HeapsortGeneric_Right_Interface as Right0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_Left_Interface as Left0
  predicate heap_frag (s : Seq.seq t) (start : int) (end' : int) = 
    forall i : (int) . start <= i -> (Left0.left i < end' -> LeLog0.le_log (Seq.get s (Left0.left i)) (Seq.get s i)) && (Right0.right i < end' -> LeLog0.le_log (Seq.get s (Right0.right i)) (Seq.get s i))
end
module HeapsortGeneric_HeapFragMax_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Interface as HeapFrag0 with type t = t
  function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
end
module HeapsortGeneric_HeapFragMax
  type t   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Interface as HeapFrag0 with type t = t
  function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
  axiom def : forall s : Seq.seq t, i : int, end' : int . heap_frag_max s i end' = (if i > 0 then
    heap_frag_max s (div (i + 1) 2 - 1) end'
  else
    ()
  )
  axiom heap_frag_max_spec : forall s : Seq.seq t, i : int, end' : int . 0 <= i && i < end' -> HeapFrag0.heap_frag s 0 end' -> LeLog0.le_log (Seq.get s i) (Seq.get s 0)
end
module HeapsortGeneric_HeapFragMax_Impl
  type t   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_Right as Right0
  clone HeapsortGeneric_Left as Left0
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, function Left0.left = Left0.left,
  predicate LeLog0.le_log = LeLog0.le_log, function Right0.right = Right0.right
  let rec ghost function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
    requires {0 <= i && i < end'}
    requires {HeapFrag0.heap_frag s 0 end'}
    ensures { LeLog0.le_log (Seq.get s i) (Seq.get s 0) }
    variant {i}
    
   = 
    if i > 0 then heap_frag_max s (div (i + 1) 2 - 1) end' else ()
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Std1_Ord_Ord_Cmp_Interface
  type self   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  val cmp (self : self) (o : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Cmp
  type self   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  val cmp (self : self) (o : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Le_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Le
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val le (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Ge_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  val ge (self : self) (o : self) : bool
    ensures { result = GeLog0.ge_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Ge
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val ge (self : self) (o : self) : bool
    ensures { result = GeLog0.ge_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Gt_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  val gt (self : self) (o : self) : bool
    ensures { result = GtLog0.gt_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Gt
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val gt (self : self) (o : self) : bool
    ensures { result = GtLog0.gt_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Lt_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  val lt (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Ord_Ord_Lt
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = self,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  val lt (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module HeapsortGeneric_ShiftDown_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Interface as HeapFrag0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val shift_down (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) (start : usize) (end' : usize) : ()
    requires {UInt64.to_int end' <= Seq.length (Model0.model v)}
    requires {UInt64.to_int start < UInt64.to_int end'}
    requires {HeapFrag0.heap_frag (Model0.model v) (UInt64.to_int start + 1) (UInt64.to_int end')}
    ensures { forall m : (t) . (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model0.model v) j) m) -> (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model1.model ( ^ v)) j) m) }
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int start || UInt64.to_int end' <= i && i < Seq.length (Model0.model v) -> Seq.get (Model0.model v) i = Seq.get (Model1.model ( ^ v)) i }
    ensures { PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    ensures { HeapFrag0.heap_frag (Model1.model ( ^ v)) (UInt64.to_int start) (UInt64.to_int end') }
    
end
module HeapsortGeneric_ShiftDown
  type t   
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone HeapsortGeneric_Right as Right0
  clone HeapsortGeneric_Left as Left0
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, function Left0.left = Left0.left,
  predicate LeLog0.le_log = LeLog0.le_log, function Right0.right = Right0.right
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone CreusotContracts_Std1_Ord_Ord_Lt_Interface as Lt0 with type self = t, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Std1_Ord_Ord_Le_Interface as Le0 with type self = t, predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = t, function Model0.model = Model1.model,
  function Model1.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t),
  function Model0.model = Model0.model
  let rec cfg shift_down (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) (start : usize) (end' : usize) : ()
    requires {UInt64.to_int end' <= Seq.length (Model1.model v)}
    requires {UInt64.to_int start < UInt64.to_int end'}
    requires {HeapFrag0.heap_frag (Model1.model v) (UInt64.to_int start + 1) (UInt64.to_int end')}
    ensures { forall m : (t) . (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model1.model v) j) m) -> (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model2.model ( ^ v)) j) m) }
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int start || UInt64.to_int end' <= i && i < Seq.length (Model1.model v) -> Seq.get (Model1.model v) i = Seq.get (Model2.model ( ^ v)) i }
    ensures { PermutationOf0.permutation_of (Model2.model ( ^ v)) (Model1.model v) }
    ensures { HeapFrag0.heap_frag (Model2.model ( ^ v)) (UInt64.to_int start) (UInt64.to_int end') }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var start_2 : usize;
  var end_3 : usize;
  var old_v_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t));
  var _5 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _6 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var i_7 : usize;
  var _8 : ();
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : ();
  var child_16 : usize;
  var _17 : usize;
  var _18 : usize;
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : ();
  var _24 : ();
  var _25 : bool;
  var _26 : bool;
  var _27 : usize;
  var _28 : usize;
  var _29 : usize;
  var _30 : bool;
  var _31 : t;
  var _32 : t;
  var _33 : Type.creusotcontracts_std1_vec_vec t;
  var _34 : usize;
  var _35 : t;
  var _36 : t;
  var _37 : t;
  var _38 : Type.creusotcontracts_std1_vec_vec t;
  var _39 : usize;
  var _40 : usize;
  var _41 : ();
  var _42 : bool;
  var _43 : t;
  var _44 : t;
  var _45 : Type.creusotcontracts_std1_vec_vec t;
  var _46 : usize;
  var _47 : t;
  var _48 : t;
  var _49 : t;
  var _50 : Type.creusotcontracts_std1_vec_vec t;
  var _51 : usize;
  var _52 : ();
  var _53 : ();
  var _54 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _55 : usize;
  var _56 : usize;
  var _57 : usize;
  {
    v_1 <- v;
    start_2 <- start;
    end_3 <- end';
    goto BB0
  }
  BB0 {
    _6 <- v_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_v_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_4 };
    assume { Resolve2.resolve i_7 };
    i_7 <- start_2;
    assume { Resolve2.resolve start_2 };
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model0.model old_v_4 };
    invariant permutation { PermutationOf0.permutation_of (Model1.model v_1) (Model1.model (Model0.model old_v_4)) };
    invariant i_bounds { UInt64.to_int start_2 <= UInt64.to_int i_7 && UInt64.to_int i_7 < UInt64.to_int end_3 };
    invariant unchanged { forall j : (int) . 0 <= j && j < UInt64.to_int start_2 || UInt64.to_int end_3 <= j && j < Seq.length (Model1.model v_1) -> Seq.get (Model1.model (Model0.model old_v_4)) j = Seq.get (Model1.model v_1) j };
    invariant keep_bound { forall m : (t) . (forall j : (int) . UInt64.to_int start_2 <= j && j < UInt64.to_int end_3 -> LeLog0.le_log (Seq.get (Model1.model (Model0.model old_v_4)) j) m) -> (forall j : (int) . UInt64.to_int start_2 <= j && j < UInt64.to_int end_3 -> LeLog0.le_log (Seq.get (Model1.model v_1) j) m) };
    invariant heap { forall j : (int) . UInt64.to_int start_2 <= j && not (UInt64.to_int i_7 = j) -> (Left0.left j < UInt64.to_int end_3 -> LeLog0.le_log (Seq.get (Model1.model v_1) (Left0.left j)) (Seq.get (Model1.model v_1) j)) && (Right0.right j < UInt64.to_int end_3 -> LeLog0.le_log (Seq.get (Model1.model v_1) (Right0.right j)) (Seq.get (Model1.model v_1) j)) };
    invariant hole_left { Left0.left (UInt64.to_int i_7) < UInt64.to_int end_3 && UInt64.to_int start_2 < div (UInt64.to_int i_7 + 1) 2 -> LeLog0.le_log (Seq.get (Model1.model v_1) (Left0.left (UInt64.to_int i_7))) (Seq.get (Model1.model v_1) (div (UInt64.to_int i_7 + 1) 2 - 1)) };
    invariant hole_right { Right0.right (UInt64.to_int i_7) < UInt64.to_int end_3 && UInt64.to_int start_2 < div (UInt64.to_int i_7 + 1) 2 -> LeLog0.le_log (Seq.get (Model1.model v_1) (Right0.right (UInt64.to_int i_7))) (Seq.get (Model1.model v_1) (div (UInt64.to_int i_7 + 1) 2 - 1)) };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _12 };
    _12 <- i_7;
    _14 <- (2 : usize) = (0 : usize);
    assert { not _14 };
    goto BB4
  }
  BB4 {
    _13 <- (18446744073709551615 : usize) / (2 : usize);
    _11 <- _12 >= _13;
    switch (_11)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve3.resolve v_1 };
    assume { Resolve2.resolve end_3 };
    assume { Resolve2.resolve i_7 };
    _0 <- ();
    goto BB25
  }
  BB6 {
    _10 <- ();
    assume { Resolve4.resolve _10 };
    assume { Resolve2.resolve _18 };
    _18 <- i_7;
    _17 <- (2 : usize) * _18;
    child_16 <- _17 + (1 : usize);
    assume { Resolve2.resolve _21 };
    _21 <- child_16;
    assume { Resolve2.resolve _22 };
    _22 <- end_3;
    _20 <- _21 >= _22;
    switch (_20)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve3.resolve v_1 };
    assume { Resolve2.resolve end_3 };
    assume { Resolve2.resolve i_7 };
    assume { Resolve2.resolve child_16 };
    _0 <- ();
    goto BB24
  }
  BB8 {
    _19 <- ();
    assume { Resolve4.resolve _19 };
    assume { Resolve2.resolve _28 };
    _28 <- child_16;
    _27 <- _28 + (1 : usize);
    assume { Resolve2.resolve _29 };
    _29 <- end_3;
    _26 <- _27 < _29;
    switch (_26)
      | False -> goto BB9
      | _ -> goto BB10
      end
  }
  BB9 {
    _25 <- false;
    goto BB11
  }
  BB10 {
    _33 <-  * v_1;
    assume { Resolve2.resolve _34 };
    _34 <- child_16;
    _32 <- Index0.index _33 _34;
    goto BB12
  }
  BB11 {
    switch (_25)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB12 {
    _31 <- _32;
    assume { Resolve5.resolve _32 };
    _38 <-  * v_1;
    assume { Resolve2.resolve _40 };
    _40 <- child_16;
    _39 <- _40 + (1 : usize);
    _37 <- Index0.index _38 _39;
    goto BB13
  }
  BB13 {
    _36 <- _37;
    assume { Resolve5.resolve _37 };
    _35 <- _36;
    assume { Resolve5.resolve _36 };
    _30 <- Lt0.lt _31 _35;
    goto BB14
  }
  BB14 {
    assume { Resolve6.resolve _25 };
    _25 <- _30;
    goto BB11
  }
  BB15 {
    child_16 <- child_16 + (1 : usize);
    _24 <- ();
    assume { Resolve4.resolve _24 };
    goto BB17
  }
  BB16 {
    _24 <- ();
    assume { Resolve4.resolve _24 };
    goto BB17
  }
  BB17 {
    _45 <-  * v_1;
    assume { Resolve2.resolve _46 };
    _46 <- child_16;
    _44 <- Index0.index _45 _46;
    goto BB18
  }
  BB18 {
    _43 <- _44;
    assume { Resolve5.resolve _44 };
    _50 <-  * v_1;
    assume { Resolve2.resolve _51 };
    _51 <- i_7;
    _49 <- Index0.index _50 _51;
    goto BB19
  }
  BB19 {
    _48 <- _49;
    assume { Resolve5.resolve _49 };
    _47 <- _48;
    assume { Resolve5.resolve _48 };
    _42 <- Le0.le _43 _47;
    goto BB20
  }
  BB20 {
    switch (_42)
      | False -> goto BB22
      | _ -> goto BB21
      end
  }
  BB21 {
    assume { Resolve3.resolve v_1 };
    assume { Resolve2.resolve end_3 };
    assume { Resolve2.resolve i_7 };
    assume { Resolve2.resolve child_16 };
    _0 <- ();
    goto BB24
  }
  BB22 {
    _41 <- ();
    assume { Resolve4.resolve _41 };
    _54 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _54) };
    assume { Resolve2.resolve _55 };
    _55 <- i_7;
    assume { Resolve2.resolve i_7 };
    assume { Resolve2.resolve _56 };
    _56 <- child_16;
    _53 <- Swap0.swap _54 _55 _56;
    goto BB23
  }
  BB23 {
    assume { Resolve2.resolve _57 };
    _57 <- child_16;
    assume { Resolve2.resolve child_16 };
    assume { Resolve2.resolve i_7 };
    i_7 <- _57;
    _9 <- ();
    assume { Resolve4.resolve _9 };
    goto BB2
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module HeapsortGeneric_SortedRange_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module HeapsortGeneric_SortedRange
  type t   
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
end
module HeapsortGeneric_Sorted_Interface
  type t   
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module HeapsortGeneric_Sorted
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone HeapsortGeneric_SortedRange_Interface as SortedRange0 with type t = t
  predicate sorted (s : Seq.seq t) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module HeapsortGeneric_HeapSort_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone HeapsortGeneric_Sorted_Interface as Sorted0 with type t = t
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val heap_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    requires {Seq.length (Model0.model v) < div 18446744073709551615 2}
    ensures { PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    ensures { Sorted0.sorted (Model1.model ( ^ v)) }
    
end
module HeapsortGeneric_HeapSort
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_SortedRange as SortedRange0 with type t = t, predicate LeLog0.le_log = LeLog0.le_log
  clone HeapsortGeneric_Sorted as Sorted0 with type t = t,
  predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone HeapsortGeneric_Right as Right0
  clone HeapsortGeneric_Left as Left0
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, function Left0.left = Left0.left,
  predicate LeLog0.le_log = LeLog0.le_log, function Right0.right = Right0.right
  clone HeapsortGeneric_HeapFragMax as HeapFragMax0 with type t = t,
  predicate HeapFrag0.heap_frag = HeapFrag0.heap_frag, predicate LeLog0.le_log = LeLog0.le_log, axiom .
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model2.model
  clone HeapsortGeneric_ShiftDown_Interface as ShiftDown0 with type t = t, function Model0.model = Model0.model,
  predicate HeapFrag0.heap_frag = HeapFrag0.heap_frag, predicate LeLog0.le_log = LeLog0.le_log,
  function Model1.model = Model2.model, predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of
  let rec cfg heap_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    requires {Seq.length (Model0.model v) < div 18446744073709551615 2}
    ensures { PermutationOf0.permutation_of (Model2.model ( ^ v)) (Model0.model v) }
    ensures { Sorted0.sorted (Model2.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var old_v_2 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t));
  var _3 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _4 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var start_5 : usize;
  var _6 : usize;
  var _7 : Type.creusotcontracts_std1_vec_vec t;
  var _8 : bool;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : ();
  var _14 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _15 : usize;
  var _16 : usize;
  var _17 : Type.creusotcontracts_std1_vec_vec t;
  var _18 : ();
  var _19 : ();
  var _20 : ();
  var end_21 : usize;
  var _22 : Type.creusotcontracts_std1_vec_vec t;
  var _23 : bool;
  var _24 : usize;
  var _25 : ();
  var _26 : ();
  var _27 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _28 : usize;
  var _29 : ();
  var _30 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _31 : usize;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_v_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_2 };
    _7 <-  * v_1;
    _6 <- Len0.len _7;
    goto BB2
  }
  BB2 {
    _8 <- (2 : usize) = (0 : usize);
    assert { not _8 };
    goto BB3
  }
  BB3 {
    start_5 <- _6 / (2 : usize);
    goto BB4
  }
  BB4 {
    invariant permutation { PermutationOf0.permutation_of (Model0.model v_1) (Model0.model (Model1.model old_v_2)) };
    invariant proph_const {  ^ v_1 =  ^ Model1.model old_v_2 };
    invariant heap { HeapFrag0.heap_frag (Model0.model v_1) (UInt64.to_int start_5) (Seq.length (Model0.model v_1)) };
    invariant start_bound { UInt64.to_int start_5 <= div (Seq.length (Model0.model v_1)) 2 };
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _12 };
    _12 <- start_5;
    _11 <- _12 > (0 : usize);
    switch (_11)
      | False -> goto BB9
      | _ -> goto BB6
      end
  }
  BB6 {
    start_5 <- start_5 - (1 : usize);
    _14 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _14) };
    assume { Resolve2.resolve _15 };
    _15 <- start_5;
    _17 <-  * _14;
    _16 <- Len0.len _17;
    goto BB7
  }
  BB7 {
    _13 <- ShiftDown0.shift_down _14 _15 _16;
    goto BB8
  }
  BB8 {
    _10 <- ();
    assume { Resolve3.resolve _10 };
    goto BB4
  }
  BB9 {
    assume { Resolve2.resolve start_5 };
    _9 <- ();
    assume { Resolve3.resolve _9 };
    _22 <-  * v_1;
    end_21 <- Len0.len _22;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    invariant end_bound { UInt64.to_int end_21 <= Seq.length (Model0.model v_1) };
    invariant permutation { PermutationOf0.permutation_of (Model0.model v_1) (Model0.model (Model1.model old_v_2)) };
    invariant proph_const {  ^ v_1 =  ^ Model1.model old_v_2 };
    invariant heap { HeapFrag0.heap_frag (Model0.model v_1) 0 (UInt64.to_int end_21) };
    invariant sorted { SortedRange0.sorted_range (Model0.model v_1) (UInt64.to_int end_21) (Seq.length (Model0.model v_1)) };
    invariant heap_le { forall j : (int) . forall i : (int) . 0 <= i && i < UInt64.to_int end_21 && UInt64.to_int end_21 <= j && j < Seq.length (Model0.model v_1) -> LeLog0.le_log (Seq.get (Model0.model v_1) i) (Seq.get (Model0.model v_1) j) };
    goto BB12
  }
  BB12 {
    assume { Resolve2.resolve _24 };
    _24 <- end_21;
    _23 <- _24 > (1 : usize);
    switch (_23)
      | False -> goto BB16
      | _ -> goto BB13
      end
  }
  BB13 {
    assert { let _ = HeapFragMax0.heap_frag_max (Model0.model v_1) 0 (UInt64.to_int end_21) in true };
    _25 <- ();
    assume { Resolve3.resolve _25 };
    end_21 <- end_21 - (1 : usize);
    _27 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _27) };
    assume { Resolve2.resolve _28 };
    _28 <- end_21;
    _26 <- Swap0.swap _27 (0 : usize) _28;
    goto BB14
  }
  BB14 {
    _30 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _30) };
    assume { Resolve2.resolve _31 };
    _31 <- end_21;
    _29 <- ShiftDown0.shift_down _30 (0 : usize) _31;
    goto BB15
  }
  BB15 {
    _10 <- ();
    assume { Resolve3.resolve _10 };
    goto BB11
  }
  BB16 {
    assume { Resolve4.resolve v_1 };
    assume { Resolve2.resolve end_21 };
    _0 <- ();
    return _0
  }
  
end
