module M_trigger__inner__id_mono [#"trigger.rs" 17 4 17 20]
  let%span strigger0 = "trigger.rs" 16 14 16 87
  let%span strigger1 = "trigger.rs" 14 4 14 10
  let%span strigger2 = "trigger.rs" 11 8 11 9
  
  use prelude.prelude.Int
  
  function id'0 [#"trigger.rs" 10 4 10 28] (i : int) : int =
    [%#strigger2] i
  
  constant _1  : ()
  
  function id_mono'0 [#"trigger.rs" 17 4 17 20] (_1 : ()) : ()
  
  goal vc_id_mono'0 : [%#strigger0] forall i : int, j : int [id'0 i, id'0 j] . i <= j  -> id'0 i <= id'0 j
end
module M_trigger__test [#"trigger.rs" 22 0 22 13]
  let%span strigger0 = "trigger.rs" 23 4 23 22
  let%span strigger1 = "trigger.rs" 21 10 21 24
  let%span strigger2 = "trigger.rs" 16 14 16 87
  
  use prelude.prelude.Int
  
  function id'0 [#"trigger.rs" 10 4 10 28] (i : int) : int
  
  function id_mono'0 [#"trigger.rs" 17 4 17 20] (_1 : ()) : ()
  
  axiom id_mono'0_spec : forall _1 : () . [%#strigger2] forall i : int, j : int [id'0 i, id'0 j] . i <= j
   -> id'0 i <= id'0 j
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec test'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_2 <- [%#strigger0] Snapshot.new () ] s1 | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _2 : Snapshot.snap_ty () = any_l () ] 
    [ return' (result:())-> {[@expl:test ensures] [%#strigger1] id'0 5 >= id'0 2} (! return' {result}) ]
    
end
