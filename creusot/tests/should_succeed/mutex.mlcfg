
module Mutex_MutexInner_Type
  type t_mutexinner 't
end
module Mutex_Mutex_Type
  use Mutex_MutexInner_Type as Mutex_MutexInner_Type
  type t_mutex 't 'i =
    | C_Mutex (Mutex_MutexInner_Type.t_mutexinner 't) 'i
    
  let function mutex_1 (self : t_mutex 't 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Mutex _ a -> a
      end
end
module Mutex_GuardInner_Type
  type t_guardinner 't
end
module Mutex_MutexGuard_Type
  use prelude.Snapshot
  use Mutex_GuardInner_Type as Mutex_GuardInner_Type
  type t_mutexguard 't 'i =
    | C_MutexGuard (Mutex_GuardInner_Type.t_guardinner 't) (Snapshot.snap_ty 'i)
    
  let function mutexguard_1 (self : t_mutexguard 't 'i) : Snapshot.snap_ty 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_MutexGuard _ a -> a
      end
end
module Mutex_Even_Type
  type t_even  =
    | C_Even
    
end
module Mutex_AddsTwo_Type
  use Mutex_Even_Type as Mutex_Even_Type
  use prelude.UInt32
  use prelude.Int
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  use prelude.Borrow
  type t_addstwo  =
    | C_AddsTwo (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
    
  let function addstwo_mutex (self : t_addstwo) : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_AddsTwo a -> a
      end
end
module Mutex_Impl3_Call
  use prelude.UInt32
  predicate invariant5 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : uint32) : bool
    ensures { result = invariant5 self }
    
  predicate inv6 (_x : uint32)
  val inv6 (_x : uint32) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : uint32 . inv6 x = true
  use Mutex_Even_Type as Mutex_Even_Type
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  use prelude.Borrow
  predicate invariant4 (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) : bool
    ensures { result = invariant4 self }
    
  predicate inv5 (_x : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)))
  val inv5 (_x : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) . inv5 x = true
  predicate invariant3 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : uint32) : bool
    ensures { result = invariant3 self }
    
  predicate inv4 (_x : uint32)
  val inv4 (_x : uint32) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : uint32 . inv4 x = true
  predicate invariant2 (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))
  val inv2 (_x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even) . inv2 x = true
  predicate invariant1 (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))
  val inv1 (_x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even) . inv1 x = true
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  predicate invariant0 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
  val inv0 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) . inv0 x = true
  use prelude.Int
  predicate inv3 [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) =
    [#"../mutex.rs" 67 8 67 24] mod x (2 : uint32) = (0 : uint32)
  val inv3 [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) : bool
    ensures { result = inv3 self x }
    
  use prelude.Snapshot
  val set0 [#"../mutex.rs" 56 4 56 27] (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even))) (v : uint32) : ()
    requires {[#"../mutex.rs" 55 4 55 30] inv3 (Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 ( * self))) v}
    requires {[#"../mutex.rs" 56 16 56 20] inv5 self}
    requires {[#"../mutex.rs" 56 22 56 23] inv6 v}
    
  val deref0 [#"../mutex.rs" 50 4 50 25] (self : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)) : uint32
    requires {[#"../mutex.rs" 50 14 50 18] inv2 self}
    ensures { [#"../mutex.rs" 49 4 49 35] inv3 (Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 self)) result }
    ensures { [#"../mutex.rs" 50 23 50 25] inv4 result }
    
  val lock0 [#"../mutex.rs" 37 4 37 46] (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even)
    requires {[#"../mutex.rs" 37 17 37 21] inv0 self}
    ensures { [#"../mutex.rs" 36 14 36 33] Mutex_Mutex_Type.mutex_1 self = Snapshot.inner (Mutex_MutexGuard_Type.mutexguard_1 result) }
    ensures { [#"../mutex.rs" 37 26 37 46] inv1 result }
    
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  let rec cfg call [#"../mutex.rs" 100 4 100 23] [@cfg:stackify] [@cfg:subregion_analysis] (self : Mutex_AddsTwo_Type.t_addstwo) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : Mutex_AddsTwo_Type.t_addstwo = self;
  var v : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even);
  var val' : uint32;
  var _5 : uint32;
  var _7 : bool;
  var _9 : ();
  var _10 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
  var _11 : uint32;
  var _13 : ();
  var _14 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
  {
    goto BB0
  }
  BB0 {
    [#"../mutex.rs" 101 20 101 37] v <- ([#"../mutex.rs" 101 20 101 37] lock0 (Mutex_AddsTwo_Type.addstwo_mutex self));
    goto BB1
  }
  BB1 {
    [#"../mutex.rs" 102 19 102 28] _5 <- ([#"../mutex.rs" 102 19 102 28] deref0 v);
    goto BB2
  }
  BB2 {
    [#"../mutex.rs" 102 18 102 28] val' <- _5;
    [#"../mutex.rs" 103 11 103 23] _7 <- val' < ([#"../mutex.rs" 103 17 103 23] (100000 : uint32));
    switch (_7)
      | False -> goto BB5
      | True -> goto BB3
      end
  }
  BB3 {
    [#"../mutex.rs" 104 12 104 13] _10 <- Borrow.borrow_mut v;
    [#"../mutex.rs" 104 12 104 13] v <-  ^ _10;
    [#"../mutex.rs" 104 18 104 25] _11 <- val' + ([#"../mutex.rs" 104 24 104 25] (2 : uint32));
    [#"../mutex.rs" 104 12 104 26] _9 <- ([#"../mutex.rs" 104 12 104 26] set0 _10 _11);
    _10 <- any borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
    _11 <- any uint32;
    goto BB4
  }
  BB4 {
    [#"../mutex.rs" 103 24 105 9] _0 <- ([#"../mutex.rs" 103 24 105 9] ());
    goto BB7
  }
  BB5 {
    [#"../mutex.rs" 106 12 106 13] _14 <- Borrow.borrow_mut v;
    [#"../mutex.rs" 106 12 106 13] v <-  ^ _14;
    [#"../mutex.rs" 106 12 106 20] _13 <- ([#"../mutex.rs" 106 12 106 20] set0 _14 ([#"../mutex.rs" 106 18 106 19] (0 : uint32)));
    _14 <- any borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
    goto BB6
  }
  BB6 {
    [#"../mutex.rs" 105 15 107 9] _0 <- ([#"../mutex.rs" 105 15 107 9] ());
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Mutex_JoinHandleInner_Type
  type t_joinhandleinner 't
end
module Mutex_JoinHandle_Type
  use prelude.Snapshot
  use Mutex_JoinHandleInner_Type as Mutex_JoinHandleInner_Type
  type t_joinhandle 't 'i =
    | C_JoinHandle (Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (Snapshot.snap_ty 'i)
    
  let function joinhandle_1 (self : t_joinhandle 't 'i) : Snapshot.snap_ty 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_JoinHandle _ a -> a
      end
end
module Mutex_SpawnPostCond_Type
  type t_spawnpostcond 'f =
    | C_SpawnPostCond 'f
    
  let function spawnpostcond_f (self : t_spawnpostcond 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_SpawnPostCond a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Mutex_Concurrent
  use Core_Result_Result_Type as Core_Result_Result_Type
  predicate invariant7 (self : Core_Result_Result_Type.t_result () ()) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Core_Result_Result_Type.t_result () ()) : bool
    ensures { result = invariant7 self }
    
  predicate inv9 (_x : Core_Result_Result_Type.t_result () ())
  val inv9 (_x : Core_Result_Result_Type.t_result () ()) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Core_Result_Result_Type.t_result () () . inv9 x = true
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  predicate invariant6 (self : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)))
    
   =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) : bool
    ensures { result = invariant6 self }
    
  predicate inv7 (_x : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)))
    
  val inv7 (_x : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) . inv7 x = true
  predicate invariant5 (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = invariant5 self }
    
  predicate inv6 (_x : Mutex_AddsTwo_Type.t_addstwo)
  val inv6 (_x : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Mutex_AddsTwo_Type.t_addstwo . inv6 x = true
  use Mutex_Even_Type as Mutex_Even_Type
  use prelude.UInt32
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  use prelude.Borrow
  predicate invariant4 (self : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) : bool
    ensures { result = invariant4 self }
    
  predicate inv5 (_x : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)))
  val inv5 (_x : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) . inv5 x = true
  predicate invariant3 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = invariant3 self }
    
  predicate inv4 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
  val inv4 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = inv4 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv4 : forall x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) . inv4 x = true
  predicate invariant2 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = invariant2 self }
    
  predicate inv3 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
  val inv3 (_x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even) . inv3 x = true
  predicate invariant1 (self : Mutex_Even_Type.t_even) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Mutex_Even_Type.t_even) : bool
    ensures { result = invariant1 self }
    
  predicate inv2 (_x : Mutex_Even_Type.t_even)
  val inv2 (_x : Mutex_Even_Type.t_even) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Mutex_Even_Type.t_even . inv2 x = true
  predicate invariant0 (self : uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv1 (_x : uint32)
  val inv1 (_x : uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : uint32 . inv1 x = true
  predicate postcondition0 [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2 : ()) =
    [#"../mutex.rs" 97 8 97 12] true
  val postcondition0 [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2 : ()) : bool
    ensures { result = postcondition0 self _2 }
    
  predicate inv8 [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) (v : ())
    
   =
    [#"../mutex.rs" 149 4 149 16] postcondition0 (Mutex_SpawnPostCond_Type.spawnpostcond_f self) v
  val inv8 [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo)) (v : ()) : bool
    ensures { result = inv8 self v }
    
  use prelude.Snapshot
  val join0 [#"../mutex.rs" 121 4 121 34] (self : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))) : Core_Result_Result_Type.t_result () ()
    requires {[#"../mutex.rs" 121 12 121 16] inv7 self}
    ensures { [#"../mutex.rs" 117 14 120 5] match result with
      | Core_Result_Result_Type.C_Ok v -> inv8 (Snapshot.inner (Mutex_JoinHandle_Type.joinhandle_1 self)) v
      | _ -> true
      end }
    ensures { [#"../mutex.rs" 121 21 121 34] inv9 result }
    
  predicate precondition0 [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../mutex.rs" 92 8 92 12] true
  val precondition0 [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = precondition0 self }
    
  val spawn0 [#"../mutex.rs" 131 0 133 36] (f : Mutex_AddsTwo_Type.t_addstwo) : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo))
    requires {[#"../mutex.rs" 130 11 130 27] precondition0 f}
    requires {[#"../mutex.rs" 132 4 132 5] inv6 f}
    ensures { [#"../mutex.rs" 133 5 133 36] inv7 result }
    
  predicate resolve0 (self : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))) : bool
    ensures { result = resolve0 self }
    
  val leak0 [#"../mutex.rs" 159 0 159 42] (b : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)) : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
    requires {[#"../mutex.rs" 159 19 159 20] inv4 b}
    ensures { [#"../mutex.rs" 158 10 158 23]  * result = b }
    ensures { [#"../mutex.rs" 159 33 159 42] inv5 result }
    
  use prelude.Int
  predicate inv0 [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) =
    [#"../mutex.rs" 67 8 67 24] mod x (2 : uint32) = (0 : uint32)
  val inv0 [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) : bool
    ensures { result = inv0 self x }
    
  val new0 [#"../mutex.rs" 18 4 18 36] (val' : uint32) (i : Mutex_Even_Type.t_even) : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
    requires {[#"../mutex.rs" 17 15 17 25] inv0 i val'}
    requires {[#"../mutex.rs" 18 15 18 18] inv1 val'}
    requires {[#"../mutex.rs" 18 23 18 24] inv2 i}
    ensures { [#"../mutex.rs" 18 32 18 36] inv3 result }
    
  let rec cfg concurrent [#"../mutex.rs" 163 0 163 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var m : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _2 : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even));
  var _4 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _5 : Mutex_Even_Type.t_even;
  var t1 : Mutex_AddsTwo_Type.t_addstwo;
  var _8 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var j1 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var t2 : Mutex_AddsTwo_Type.t_addstwo;
  var _13 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var j2 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _16 : Core_Result_Result_Type.t_result () ();
  var _18 : Core_Result_Result_Type.t_result () ();
  {
    goto BB0
  }
  BB0 {
    [#"../mutex.rs" 164 52 164 56] _5 <- Mutex_Even_Type.C_Even;
    [#"../mutex.rs" 164 38 164 57] _4 <- ([#"../mutex.rs" 164 38 164 57] new0 ([#"../mutex.rs" 164 49 164 50] (0 : uint32)) _5);
    _5 <- any Mutex_Even_Type.t_even;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../mutex.rs" 164 24 164 59] _2 <- ([#"../mutex.rs" 164 24 164 59] leak0 _4);
    _4 <- any Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
    goto BB3
  }
  BB3 {
    [#"../mutex.rs" 164 24 164 59] m <-  * _2;
    assume { resolve0 _2 };
    [#"../mutex.rs" 165 30 165 32] _8 <- m;
    [#"../mutex.rs" 165 13 165 34] t1 <- Mutex_AddsTwo_Type.C_AddsTwo _8;
    [#"../mutex.rs" 166 13 166 22] j1 <- ([#"../mutex.rs" 166 13 166 22] spawn0 t1);
    t1 <- any Mutex_AddsTwo_Type.t_addstwo;
    goto BB4
  }
  BB4 {
    [#"../mutex.rs" 167 30 167 32] _13 <- m;
    [#"../mutex.rs" 167 13 167 34] t2 <- Mutex_AddsTwo_Type.C_AddsTwo _13;
    [#"../mutex.rs" 168 13 168 22] j2 <- ([#"../mutex.rs" 168 13 168 22] spawn0 t2);
    t2 <- any Mutex_AddsTwo_Type.t_addstwo;
    goto BB5
  }
  BB5 {
    [#"../mutex.rs" 171 12 171 21] _16 <- ([#"../mutex.rs" 171 12 171 21] join0 j1);
    j1 <- any Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
    goto BB6
  }
  BB6 {
    [#"../mutex.rs" 172 12 172 21] _18 <- ([#"../mutex.rs" 172 12 172 21] join0 j2);
    j2 <- any Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
    goto BB7
  }
  BB7 {
    [#"../mutex.rs" 163 20 175 1] _0 <- ([#"../mutex.rs" 163 20 175 1] ());
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Mutex_Impl2
  
end
module Mutex_Impl5
  type f
end
module Mutex_Impl3
  predicate invariant1 (self : ()) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : ()) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : ())
  val inv1 (_x : ()) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : () . inv1 x = true
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate invariant0 (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Mutex_AddsTwo_Type.t_addstwo)
  val inv0 (_x : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Mutex_AddsTwo_Type.t_addstwo . inv0 x = true
  predicate postcondition0 [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2 : ()) =
    [#"../mutex.rs" 97 8 97 12] true
  val postcondition0 [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2 : ()) : bool
    ensures { result = postcondition0 self _2 }
    
  predicate precondition0 [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../mutex.rs" 92 8 92 12] true
  val precondition0 [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = precondition0 self }
    
  goal call_refn : [#"../mutex.rs" 100 4 100 23] forall self : Mutex_AddsTwo_Type.t_addstwo . inv0 self /\ precondition0 self
   -> (forall result : () . inv1 result /\ postcondition0 self result)
end
