
module Mutex_Inv_Inv_Stub
  type self
  type t
  use prelude.Borrow
  val ghost predicate inv (self : self) (x : t)
end
module Mutex_Inv_Inv_Interface
  type self
  type t
  use prelude.Borrow
  val ghost predicate inv (self : self) (x : t)
end
module Mutex_Inv_Inv
  type self
  type t
  use prelude.Borrow
  val ghost predicate inv [#"../mutex.rs" 7 4 7 32] (self : self) (x : t)
end
module Mutex_MutexInner_Type
  type t_mutexinner 't
end
module Mutex_Mutex_Type
  use Mutex_MutexInner_Type as Mutex_MutexInner_Type
  type t_mutex 't 'i =
    | C_Mutex (Mutex_MutexInner_Type.t_mutexinner 't) 'i
    
  let function mutex_1 (self : t_mutex 't 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Mutex _ a -> a
      end
end
module Mutex_Impl0_New_Interface
  type t
  type i
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  clone Mutex_Inv_Inv_Stub as Inv0 with type self = i, type t = t
  val new [@cfg:stackify] (val' : t) (i : i) : Mutex_Mutex_Type.t_mutex t i
    requires {[#"../mutex.rs" 17 15 17 25] Inv0.inv i val'}
    
end
module Mutex_Impl0_New
  type t
  type i
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val new [@cfg:stackify] (val' : t) (i : i) : Mutex_Mutex_Type.t_mutex t i
    requires {[#"../mutex.rs" 17 15 17 25] Inv0.inv i val'}
    
end
module Mutex_Impl0_IntoInner_Interface
  type t
  type i
  clone Mutex_Inv_Inv_Stub as Inv0 with type self = i, type t = t
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val into_inner [@cfg:stackify] (self : Mutex_Mutex_Type.t_mutex t i) : t
    ensures { [#"../mutex.rs" 23 4 23 34] Inv0.inv (Mutex_Mutex_Type.mutex_1 self) result }
    
end
module Mutex_Impl0_IntoInner
  type t
  type i
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val into_inner [@cfg:stackify] (self : Mutex_Mutex_Type.t_mutex t i) : t
    ensures { [#"../mutex.rs" 23 4 23 34] Inv0.inv (Mutex_Mutex_Type.mutex_1 self) result }
    
end
module Mutex_Impl0_GetMut_Interface
  type t
  type i
  use prelude.Borrow
  clone Mutex_Inv_Inv_Stub as Inv0 with type self = i, type t = t
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val get_mut [@cfg:stackify] (self : borrowed (Mutex_Mutex_Type.t_mutex t i)) : borrowed t
    ensures { [#"../mutex.rs" 29 4 29 38] Inv0.inv (Mutex_Mutex_Type.mutex_1 ( * self)) ( * result) }
    ensures { [#"../mutex.rs" 30 4 30 53] forall v : t . Inv0.inv (Mutex_Mutex_Type.mutex_1 ( ^ self)) v = true }
    
end
module Mutex_Impl0_GetMut
  type t
  type i
  use prelude.Borrow
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val get_mut [@cfg:stackify] (self : borrowed (Mutex_Mutex_Type.t_mutex t i)) : borrowed t
    ensures { [#"../mutex.rs" 29 4 29 38] Inv0.inv (Mutex_Mutex_Type.mutex_1 ( * self)) ( * result) }
    ensures { [#"../mutex.rs" 30 4 30 53] forall v : t . Inv0.inv (Mutex_Mutex_Type.mutex_1 ( ^ self)) v = true }
    
end
module Mutex_GuardInner_Type
  type t_guardinner 't
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module Mutex_MutexGuard_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Mutex_GuardInner_Type as Mutex_GuardInner_Type
  type t_mutexguard 't 'i =
    | C_MutexGuard (Mutex_GuardInner_Type.t_guardinner 't) (CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i)
    
  let function mutexguard_1 (self : t_mutexguard 't 'i) : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MutexGuard _ a -> a
      end
end
module Mutex_Impl0_Lock_Interface
  type t
  type i
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val lock [@cfg:stackify] (self : Mutex_Mutex_Type.t_mutex t i) : Mutex_MutexGuard_Type.t_mutexguard t i
    ensures { [#"../mutex.rs" 36 14 36 33] Mutex_Mutex_Type.mutex_1 self = CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_MutexGuard_Type.mutexguard_1 result) }
    
end
module Mutex_Impl0_Lock
  type t
  type i
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val lock [@cfg:stackify] (self : Mutex_Mutex_Type.t_mutex t i) : Mutex_MutexGuard_Type.t_mutexguard t i
    ensures { [#"../mutex.rs" 36 14 36 33] Mutex_Mutex_Type.mutex_1 self = CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_MutexGuard_Type.mutexguard_1 result) }
    
end
module Mutex_Impl1_Deref_Interface
  type t
  type i
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Inv_Inv_Stub as Inv0 with type self = i, type t = t
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  val deref [@cfg:stackify] (self : Mutex_MutexGuard_Type.t_mutexguard t i) : t
    ensures { [#"../mutex.rs" 49 4 49 35] Inv0.inv (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_MutexGuard_Type.mutexguard_1 self)) result }
    
end
module Mutex_Impl1_Deref
  type t
  type i
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  val deref [@cfg:stackify] (self : Mutex_MutexGuard_Type.t_mutexguard t i) : t
    ensures { [#"../mutex.rs" 49 4 49 35] Inv0.inv (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_MutexGuard_Type.mutexguard_1 self)) result }
    
end
module Mutex_Impl1_Set_Interface
  type t
  type i
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Inv_Inv_Stub as Inv0 with type self = i, type t = t
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  val set [@cfg:stackify] (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard t i)) (v : t) : ()
    requires {[#"../mutex.rs" 55 4 55 30] Inv0.inv (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_MutexGuard_Type.mutexguard_1 ( * self))) v}
    
end
module Mutex_Impl1_Set
  type t
  type i
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  val set [@cfg:stackify] (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard t i)) (v : t) : ()
    requires {[#"../mutex.rs" 55 4 55 30] Inv0.inv (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_MutexGuard_Type.mutexguard_1 ( * self))) v}
    
end
module Mutex_Even_Type
  type t_even  =
    | C_Even
    
end
module Mutex_Impl2_Inv_Stub
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  val ghost predicate inv (self : Mutex_Even_Type.t_even) (x : uint32)
end
module Mutex_Impl2_Inv_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  val ghost predicate inv (self : Mutex_Even_Type.t_even) (x : uint32)
end
module Mutex_Impl2_Inv
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  let rec ghost predicate inv [#"../mutex.rs" 65 4 65 33] (self : Mutex_Even_Type.t_even) (x : uint32)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mutex.rs" 66 8 66 24] pure {mod x (2 : uint32) = (0 : uint32)}
end
module Mutex_AddsTwo_Type
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  type t_addstwo  =
    | C_AddsTwo (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
    
  let function addstwo_mutex (self : t_addstwo) : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_AddsTwo a -> a
      end
end
module Mutex_Impl3_Precondition_Stub
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  val ghost predicate precondition (self : Mutex_AddsTwo_Type.t_addstwo)
end
module Mutex_Impl3_Precondition_Interface
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  val ghost predicate precondition (self : Mutex_AddsTwo_Type.t_addstwo)
end
module Mutex_Impl3_Precondition
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  let rec ghost predicate precondition [#"../mutex.rs" 90 4 90 33] (self : Mutex_AddsTwo_Type.t_addstwo)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mutex.rs" 91 8 91 12] true
end
module Mutex_Impl3_Postcondition_Stub
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  val ghost predicate postcondition (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ())
end
module Mutex_Impl3_Postcondition_Interface
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  val ghost predicate postcondition (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ())
end
module Mutex_Impl3_Postcondition
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  let rec ghost predicate postcondition [#"../mutex.rs" 95 4 95 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ())
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mutex.rs" 96 8 96 12] true
end
module Mutex_Impl3_Call_Interface
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  val call [@cfg:stackify] (self : Mutex_AddsTwo_Type.t_addstwo) : ()
end
module Mutex_Impl3_Call
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use Mutex_Even_Type as Mutex_Even_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  clone Mutex_Impl2_Inv as Inv0
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Impl1_Set_Interface as Set0 with type t = uint32, type i = Mutex_Even_Type.t_even, val Inv0.inv = Inv0.inv
  clone Mutex_Impl1_Deref_Interface as Deref0 with type t = uint32, type i = Mutex_Even_Type.t_even,
    val Inv0.inv = Inv0.inv
  clone Mutex_Impl0_Lock_Interface as Lock0 with type t = uint32, type i = Mutex_Even_Type.t_even
  let rec cfg call [@cfg:stackify] [#"../mutex.rs" 99 4 99 23] (self : Mutex_AddsTwo_Type.t_addstwo) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Mutex_AddsTwo_Type.t_addstwo;
  var v_2 : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even);
  var _3 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var val'_4 : uint32;
  var _5 : uint32;
  var _6 : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even);
  var _7 : bool;
  var _8 : uint32;
  var _9 : ();
  var _10 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
  var _11 : uint32;
  var _12 : uint32;
  var _13 : ();
  var _14 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Mutex_AddsTwo_Type.addstwo_mutex self_1;
    v_2 <- ([#"../mutex.rs" 100 20 100 37] Lock0.lock _3);
    goto BB1
  }
  BB1 {
    _6 <- v_2;
    _5 <- ([#"../mutex.rs" 101 19 101 28] Deref0.deref _6);
    goto BB2
  }
  BB2 {
    val'_4 <- _5;
    _8 <- val'_4;
    _7 <- ([#"../mutex.rs" 102 11 102 23] _8 < (100000 : uint32));
    switch (_7)
      | False -> goto BB5
      | True -> goto BB3
      end
  }
  BB3 {
    _10 <- borrow_mut v_2;
    v_2 <-  ^ _10;
    _12 <- val'_4;
    _11 <- ([#"../mutex.rs" 103 18 103 25] _12 + (2 : uint32));
    _9 <- ([#"../mutex.rs" 103 12 103 26] Set0.set _10 _11);
    goto BB4
  }
  BB4 {
    _0 <- ();
    goto BB7
  }
  BB5 {
    _14 <- borrow_mut v_2;
    v_2 <-  ^ _14;
    _13 <- ([#"../mutex.rs" 105 12 105 20] Set0.set _14 (0 : uint32));
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Mutex_JoinHandleInner_Type
  type t_joinhandleinner 't
end
module Mutex_JoinHandle_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use Mutex_JoinHandleInner_Type as Mutex_JoinHandleInner_Type
  type t_joinhandle 't 'i =
    | C_JoinHandle (Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i)
    
  let function joinhandle_1 (self : t_joinhandle 't 'i) : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_JoinHandle _ a -> a
      end
end
module Mutex_Impl4_Join_Interface
  type t
  type i
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Inv_Inv_Stub as Inv0 with type self = i, type t = t
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  val join [@cfg:stackify] (self : Mutex_JoinHandle_Type.t_joinhandle t i) : Core_Result_Result_Type.t_result t ()
    ensures { [#"../mutex.rs" 116 14 119 5] match (result) with
      | Core_Result_Result_Type.C_Ok v -> Inv0.inv (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_JoinHandle_Type.joinhandle_1 self)) v
      | _ -> true
      end }
    
end
module Mutex_Impl4_Join
  type t
  type i
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  val join [@cfg:stackify] (self : Mutex_JoinHandle_Type.t_joinhandle t i) : Core_Result_Result_Type.t_result t ()
    ensures { [#"../mutex.rs" 116 14 119 5] match (result) with
      | Core_Result_Result_Type.C_Ok v -> Inv0.inv (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (Mutex_JoinHandle_Type.joinhandle_1 self)) v
      | _ -> true
      end }
    
end
module Mutex_FakeFnOnce_Precondition_Stub
  type self
  val ghost predicate precondition (self : self)
end
module Mutex_FakeFnOnce_Precondition_Interface
  type self
  val ghost predicate precondition (self : self)
end
module Mutex_FakeFnOnce_Precondition
  type self
  val ghost predicate precondition [#"../mutex.rs" 77 4 77 34] (self : self)
end
module Mutex_SpawnPostCond_Type
  type t_spawnpostcond 'f =
    | C_SpawnPostCond 'f
    
  let function spawnpostcond_f (self : t_spawnpostcond 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_SpawnPostCond a -> a
      end
end
module Mutex_Spawn_Interface
  type t
  type f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  clone Mutex_FakeFnOnce_Precondition_Stub as Precondition0 with type self = f
  val spawn [@cfg:stackify] (f : f) : Mutex_JoinHandle_Type.t_joinhandle t (Mutex_SpawnPostCond_Type.t_spawnpostcond f)
    requires {[#"../mutex.rs" 129 11 129 27] Precondition0.precondition f}
    
end
module Mutex_Spawn
  type t
  type f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  clone Mutex_FakeFnOnce_Precondition_Interface as Precondition0 with type self = f
  val spawn [@cfg:stackify] (f : f) : Mutex_JoinHandle_Type.t_joinhandle t (Mutex_SpawnPostCond_Type.t_spawnpostcond f)
    requires {[#"../mutex.rs" 129 11 129 27] Precondition0.precondition f}
    
end
module Mutex_FakeFnOnce_Return_Type
  type self
  type return'
end
module Mutex_FakeFnOnce_Postcondition_Stub
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = self
  val ghost predicate postcondition (self : self) (_2' : Return0.return')
end
module Mutex_FakeFnOnce_Postcondition_Interface
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = self
  val ghost predicate postcondition (self : self) (_2' : Return0.return')
end
module Mutex_FakeFnOnce_Postcondition
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = self
  val ghost predicate postcondition [#"../mutex.rs" 80 4 80 52] (self : self) (_2' : Return0.return')
end
module Mutex_Impl5_Inv_Stub
  type f
  use prelude.Borrow
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  val ghost predicate inv (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return')
end
module Mutex_Impl5_Inv_Interface
  type f
  use prelude.Borrow
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  val ghost predicate inv (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return')
end
module Mutex_Impl5_Inv
  type f
  use prelude.Borrow
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  clone Mutex_FakeFnOnce_Postcondition_Stub as Postcondition0 with type self = f, type Return0.return' = Return0.return'
  let rec ghost predicate inv [#"../mutex.rs" 148 4 148 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return')
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../mutex.rs" 147 4 147 16] Postcondition0.postcondition (Mutex_SpawnPostCond_Type.spawnpostcond_f self) v
end
module Mutex_Leak_Interface
  type t
  use prelude.Borrow
  val leak [@cfg:stackify] (b : t) : borrowed t
    ensures { [#"../mutex.rs" 156 10 156 23]  * result = b }
    
end
module Mutex_Leak
  type t
  use prelude.Borrow
  val leak [@cfg:stackify] (b : t) : borrowed t
    ensures { [#"../mutex.rs" 156 10 156 23]  * result = b }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module Mutex_Impl3_Return_Type
  type return'  =
    ()
end
module Mutex_Concurrent_Interface
  val concurrent [@cfg:stackify] (_ : ()) : ()
end
module Mutex_Concurrent
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  use Mutex_Even_Type as Mutex_Even_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  clone Mutex_Impl3_Postcondition as Postcondition0
  clone Mutex_Impl3_Return_Type as Return0
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Mutex_Impl5_Inv as Inv1 with type f = Mutex_AddsTwo_Type.t_addstwo, type Return0.return' = Return0.return',
    val Postcondition0.postcondition = Postcondition0.postcondition
  clone Mutex_Impl3_Precondition as Precondition0
  clone Mutex_Impl2_Inv as Inv0
  clone Mutex_Impl4_Join_Interface as Join0 with type t = (),
    type i = Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo), val Inv0.inv = Inv1.inv
  clone Mutex_Spawn_Interface as Spawn0 with type t = (), type f = Mutex_AddsTwo_Type.t_addstwo,
    val Precondition0.precondition = Precondition0.precondition
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
  clone Mutex_Leak_Interface as Leak0 with type t = Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
  clone Mutex_Impl0_New_Interface as New0 with type t = uint32, type i = Mutex_Even_Type.t_even, val Inv0.inv = Inv0.inv
  let rec cfg concurrent [@cfg:stackify] [#"../mutex.rs" 161 0 161 19] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var m_1 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _2 : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even));
  var _3 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _4 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _5 : Mutex_Even_Type.t_even;
  var t1_6 : Mutex_AddsTwo_Type.t_addstwo;
  var _7 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _8 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var j1_9 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _10 : Mutex_AddsTwo_Type.t_addstwo;
  var t2_11 : Mutex_AddsTwo_Type.t_addstwo;
  var _12 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _13 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var j2_14 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _15 : Mutex_AddsTwo_Type.t_addstwo;
  var _16 : Core_Result_Result_Type.t_result () ();
  var _17 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _18 : Core_Result_Result_Type.t_result () ();
  var _19 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  {
    goto BB0
  }
  BB0 {
    _5 <- Mutex_Even_Type.C_Even;
    _4 <- ([#"../mutex.rs" 162 38 162 57] New0.new (0 : uint32) _5);
    goto BB1
  }
  BB1 {
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- ([#"../mutex.rs" 162 24 162 59] Leak0.leak _3);
    goto BB3
  }
  BB3 {
    m_1 <-  * _2;
    assume { Resolve0.resolve _2 };
    _8 <- m_1;
    _7 <- _8;
    t1_6 <- Mutex_AddsTwo_Type.C_AddsTwo _7;
    _10 <- t1_6;
    t1_6 <- any Mutex_AddsTwo_Type.t_addstwo;
    j1_9 <- ([#"../mutex.rs" 164 13 164 22] Spawn0.spawn _10);
    goto BB4
  }
  BB4 {
    _13 <- m_1;
    _12 <- _13;
    t2_11 <- Mutex_AddsTwo_Type.C_AddsTwo _12;
    _15 <- t2_11;
    t2_11 <- any Mutex_AddsTwo_Type.t_addstwo;
    j2_14 <- ([#"../mutex.rs" 166 13 166 22] Spawn0.spawn _15);
    goto BB5
  }
  BB5 {
    _17 <- j1_9;
    j1_9 <- any Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
    _16 <- ([#"../mutex.rs" 169 12 169 21] Join0.join _17);
    goto BB6
  }
  BB6 {
    _19 <- j2_14;
    j2_14 <- any Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
    _18 <- ([#"../mutex.rs" 170 12 170 21] Join0.join _19);
    goto BB7
  }
  BB7 {
    _0 <- ();
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Mutex_Impl2
  use mach.int.Int
  use mach.int.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  clone Mutex_Impl2_Inv as Inv0
  clone Mutex_Inv_Inv_Interface as Inv1 with type self = Mutex_Even_Type.t_even, type t = uint32, val inv = Inv0.inv
end
module Mutex_Impl5
  type f
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = f
  clone Mutex_FakeFnOnce_Postcondition_Interface as Postcondition0 with type self = f,
    type Return0.return' = Return0.return'
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  clone Mutex_Impl5_Inv as Inv0 with type f = f, type Return0.return' = Return0.return',
    val Postcondition0.postcondition = Postcondition0.postcondition
  clone Mutex_Inv_Inv_Interface as Inv1 with type self = Mutex_SpawnPostCond_Type.t_spawnpostcond f,
    type t = Return0.return', val inv = Inv0.inv
end
module Mutex_FakeFnOnce_Call_Interface
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = self
  clone Mutex_FakeFnOnce_Postcondition_Stub as Postcondition0 with type self = self,
    type Return0.return' = Return0.return'
  clone Mutex_FakeFnOnce_Precondition_Stub as Precondition0 with type self = self
  val call [@cfg:stackify] (self : self) : Return0.return'
    requires {[#"../mutex.rs" 82 15 82 34] Precondition0.precondition self}
    ensures { [#"../mutex.rs" 83 14 83 40] Postcondition0.postcondition self result }
    
end
module Mutex_FakeFnOnce_Call
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with type self = self
  clone Mutex_FakeFnOnce_Postcondition_Interface as Postcondition0 with type self = self,
    type Return0.return' = Return0.return'
  clone Mutex_FakeFnOnce_Precondition_Interface as Precondition0 with type self = self
  val call [@cfg:stackify] (self : self) : Return0.return'
    requires {[#"../mutex.rs" 82 15 82 34] Precondition0.precondition self}
    ensures { [#"../mutex.rs" 83 14 83 40] Postcondition0.postcondition self result }
    
end
module Mutex_Impl3
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  clone Mutex_Impl3_Return_Type as Return0
  clone Mutex_Impl3_Postcondition as Postcondition0
  clone Mutex_Impl3_Precondition as Precondition0
  clone Mutex_Impl3_Call_Interface as Call0
  clone Mutex_FakeFnOnce_Call_Interface as Call1 with type self = Mutex_AddsTwo_Type.t_addstwo, val call = Call0.call,
    val Precondition0.precondition = Precondition0.precondition,
    val Postcondition0.postcondition = Postcondition0.postcondition, type Return0.return' = Return0.return'
  clone Mutex_FakeFnOnce_Postcondition_Interface as Postcondition1 with type self = Mutex_AddsTwo_Type.t_addstwo,
    val postcondition = Postcondition0.postcondition, type Return0.return' = Return0.return'
  clone Mutex_FakeFnOnce_Precondition_Interface as Precondition1 with type self = Mutex_AddsTwo_Type.t_addstwo,
    val precondition = Precondition0.precondition
  clone Mutex_FakeFnOnce_Return_Type as Return1 with type self = Mutex_AddsTwo_Type.t_addstwo,
    type return' = Return0.return'
end
