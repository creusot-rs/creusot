
module Mutex_Inv_Inv_Stub
  type self
  type t
  use prelude.Borrow
  predicate inv [#"../mutex.rs" 7 4 7 32] (self : self) (x : t)
end
module Mutex_Inv_Inv_Interface
  type self
  type t
  use prelude.Borrow
  predicate inv [#"../mutex.rs" 7 4 7 32] (self : self) (x : t)
  val inv [#"../mutex.rs" 7 4 7 32] (self : self) (x : t) : bool
    ensures { result = inv self x }
    
end
module Mutex_Inv_Inv
  type self
  type t
  use prelude.Borrow
  predicate inv [#"../mutex.rs" 7 4 7 32] (self : self) (x : t)
  val inv [#"../mutex.rs" 7 4 7 32] (self : self) (x : t) : bool
    ensures { result = inv self x }
    
end
module Mutex_MutexInner_Type
  type t_mutexinner 't
end
module Mutex_Mutex_Type
  use Mutex_MutexInner_Type as Mutex_MutexInner_Type
  type t_mutex 't 'i =
    | C_Mutex (Mutex_MutexInner_Type.t_mutexinner 't) 'i
    
  let function mutex_1 (self : t_mutex 't 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Mutex _ a -> a
      end
end
module Mutex_Impl0_New_Interface
  type t
  type i
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  clone Mutex_Inv_Inv_Stub as Inv0 with
    type self = i,
    type t = t
  val new [#"../mutex.rs" 18 4 18 36] (val' : t) (i : i) : Mutex_Mutex_Type.t_mutex t i
    requires {[#"../mutex.rs" 17 15 17 25] Inv0.inv i val'}
    
end
module Mutex_Impl0_IntoInner_Interface
  type t
  type i
  clone Mutex_Inv_Inv_Stub as Inv0 with
    type self = i,
    type t = t
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val into_inner [#"../mutex.rs" 24 4 24 32] (self : Mutex_Mutex_Type.t_mutex t i) : t
    ensures { [#"../mutex.rs" 23 4 23 34] Inv0.inv (Mutex_Mutex_Type.mutex_1 self) result }
    
end
module Mutex_Impl0_GetMut_Interface
  type t
  type i
  use prelude.Borrow
  clone Mutex_Inv_Inv_Stub as Inv0 with
    type self = i,
    type t = t
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val get_mut [#"../mutex.rs" 31 4 31 39] (self : borrowed (Mutex_Mutex_Type.t_mutex t i)) : borrowed t
    ensures { [#"../mutex.rs" 29 4 29 38] Inv0.inv (Mutex_Mutex_Type.mutex_1 ( * self)) ( * result) }
    ensures { [#"../mutex.rs" 30 4 30 53] forall v : t . Inv0.inv (Mutex_Mutex_Type.mutex_1 ( ^ self)) v = true }
    
end
module Mutex_GuardInner_Type
  type t_guardinner 't
end
module Mutex_MutexGuard_Type
  use prelude.Ghost
  use Mutex_GuardInner_Type as Mutex_GuardInner_Type
  type t_mutexguard 't 'i =
    | C_MutexGuard (Mutex_GuardInner_Type.t_guardinner 't) (Ghost.ghost_ty 'i)
    
  let function mutexguard_1 (self : t_mutexguard 't 'i) : Ghost.ghost_ty 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MutexGuard _ a -> a
      end
end
module Mutex_Impl0_Lock_Interface
  type t
  type i
  use prelude.Ghost
  use prelude.Borrow
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  val lock [#"../mutex.rs" 37 4 37 46] (self : Mutex_Mutex_Type.t_mutex t i) : Mutex_MutexGuard_Type.t_mutexguard t i
    ensures { [#"../mutex.rs" 36 14 36 33] Mutex_Mutex_Type.mutex_1 self = Ghost.inner (Mutex_MutexGuard_Type.mutexguard_1 result) }
    
end
module Mutex_Impl1_Deref_Interface
  type t
  type i
  use prelude.Ghost
  use prelude.Borrow
  clone Mutex_Inv_Inv_Stub as Inv0 with
    type self = i,
    type t = t
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  val deref [#"../mutex.rs" 50 4 50 25] (self : Mutex_MutexGuard_Type.t_mutexguard t i) : t
    ensures { [#"../mutex.rs" 49 4 49 35] Inv0.inv (Ghost.inner (Mutex_MutexGuard_Type.mutexguard_1 self)) result }
    
end
module Mutex_Impl1_Set_Interface
  type t
  type i
  use prelude.Borrow
  use prelude.Ghost
  clone Mutex_Inv_Inv_Stub as Inv0 with
    type self = i,
    type t = t
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  val set [#"../mutex.rs" 56 4 56 27] (self : borrowed (Mutex_MutexGuard_Type.t_mutexguard t i)) (v : t) : ()
    requires {[#"../mutex.rs" 55 4 55 30] Inv0.inv (Ghost.inner (Mutex_MutexGuard_Type.mutexguard_1 ( * self))) v}
    
end
module Mutex_Even_Type
  type t_even  =
    | C_Even
    
end
module Mutex_Impl2_Inv_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  predicate inv [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32)
end
module Mutex_Impl2_Inv_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  predicate inv [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32)
  val inv [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) : bool
    ensures { result = inv self x }
    
end
module Mutex_Impl2_Inv
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  predicate inv [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) =
    [#"../mutex.rs" 67 8 67 24] mod x (2 : uint32) = (0 : uint32)
  val inv [#"../mutex.rs" 66 4 66 33] (self : Mutex_Even_Type.t_even) (x : uint32) : bool
    ensures { result = inv self x }
    
end
module Mutex_AddsTwo_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Mutex_Even_Type as Mutex_Even_Type
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  type t_addstwo  =
    | C_AddsTwo (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even))
    
  let function addstwo_mutex (self : t_addstwo) : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_AddsTwo a -> a
      end
end
module Mutex_Impl3_Precondition_Stub
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate precondition [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo)
end
module Mutex_Impl3_Precondition_Interface
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate precondition [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo)
  val precondition [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = precondition self }
    
end
module Mutex_Impl3_Precondition
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate precondition [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) =
    [#"../mutex.rs" 92 8 92 12] true
  val precondition [#"../mutex.rs" 91 4 91 33] (self : Mutex_AddsTwo_Type.t_addstwo) : bool
    ensures { result = precondition self }
    
end
module Mutex_Impl3_Postcondition_Stub
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate postcondition [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ())
end
module Mutex_Impl3_Postcondition_Interface
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate postcondition [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ())
  val postcondition [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ()) : bool
    ensures { result = postcondition self _2' }
    
end
module Mutex_Impl3_Postcondition
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  predicate postcondition [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ()) =
    [#"../mutex.rs" 97 8 97 12] true
  val postcondition [#"../mutex.rs" 96 4 96 41] (self : Mutex_AddsTwo_Type.t_addstwo) (_2' : ()) : bool
    ensures { result = postcondition self _2' }
    
end
module Mutex_Impl3_Call_Interface
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  val call [#"../mutex.rs" 100 4 100 23] (self : Mutex_AddsTwo_Type.t_addstwo) : ()
end
module Mutex_Impl3_Call
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use Mutex_Even_Type as Mutex_Even_Type
  clone Mutex_Impl2_Inv as Inv0
  use Mutex_MutexGuard_Type as Mutex_MutexGuard_Type
  clone Mutex_Impl1_Set_Interface as Set0 with
    type t = uint32,
    type i = Mutex_Even_Type.t_even,
    predicate Inv0.inv = Inv0.inv
  clone Mutex_Impl1_Deref_Interface as Deref0 with
    type t = uint32,
    type i = Mutex_Even_Type.t_even,
    predicate Inv0.inv = Inv0.inv
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  clone Mutex_Impl0_Lock_Interface as Lock0 with
    type t = uint32,
    type i = Mutex_Even_Type.t_even
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  let rec cfg call [#"../mutex.rs" 100 4 100 23] [@cfg:stackify] [@cfg:subregion_analysis] (self : Mutex_AddsTwo_Type.t_addstwo) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Mutex_AddsTwo_Type.t_addstwo;
  var v_2 : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even);
  var _3 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var val'_4 : uint32;
  var _5 : uint32;
  var _6 : Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even);
  var _7 : bool;
  var _8 : uint32;
  var _9 : ();
  var _10 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
  var _11 : uint32;
  var _12 : uint32;
  var _13 : ();
  var _14 : borrowed (Mutex_MutexGuard_Type.t_mutexguard uint32 (Mutex_Even_Type.t_even));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Mutex_AddsTwo_Type.addstwo_mutex self_1;
    v_2 <- ([#"../mutex.rs" 101 20 101 37] Lock0.lock _3);
    goto BB1
  }
  BB1 {
    _6 <- v_2;
    _5 <- ([#"../mutex.rs" 102 19 102 28] Deref0.deref _6);
    goto BB2
  }
  BB2 {
    val'_4 <- _5;
    _8 <- val'_4;
    _7 <- ([#"../mutex.rs" 103 11 103 23] _8 < ([#"../mutex.rs" 103 17 103 23] (100000 : uint32)));
    switch (_7)
      | False -> goto BB5
      | True -> goto BB3
      end
  }
  BB3 {
    _10 <- borrow_mut v_2;
    v_2 <-  ^ _10;
    _12 <- val'_4;
    _11 <- ([#"../mutex.rs" 104 18 104 25] _12 + ([#"../mutex.rs" 104 24 104 25] (2 : uint32)));
    _9 <- ([#"../mutex.rs" 104 12 104 26] Set0.set _10 _11);
    goto BB4
  }
  BB4 {
    _0 <- ();
    goto BB7
  }
  BB5 {
    _14 <- borrow_mut v_2;
    v_2 <-  ^ _14;
    _13 <- ([#"../mutex.rs" 106 12 106 20] Set0.set _14 ([#"../mutex.rs" 106 18 106 19] (0 : uint32)));
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Mutex_JoinHandleInner_Type
  type t_joinhandleinner 't
end
module Mutex_JoinHandle_Type
  use prelude.Ghost
  use Mutex_JoinHandleInner_Type as Mutex_JoinHandleInner_Type
  type t_joinhandle 't 'i =
    | C_JoinHandle (Mutex_JoinHandleInner_Type.t_joinhandleinner 't) (Ghost.ghost_ty 'i)
    
  let function joinhandle_1 (self : t_joinhandle 't 'i) : Ghost.ghost_ty 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_JoinHandle _ a -> a
      end
end
module Mutex_Impl4_Join_Interface
  type t
  type i
  use prelude.Ghost
  clone Mutex_Inv_Inv_Stub as Inv0 with
    type self = i,
    type t = t
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  val join [#"../mutex.rs" 121 4 121 34] (self : Mutex_JoinHandle_Type.t_joinhandle t i) : Core_Result_Result_Type.t_result t ()
    ensures { [#"../mutex.rs" 117 14 120 5] match (result) with
      | Core_Result_Result_Type.C_Ok v -> Inv0.inv (Ghost.inner (Mutex_JoinHandle_Type.joinhandle_1 self)) v
      | _ -> true
      end }
    
end
module Mutex_FakeFnOnce_Precondition_Stub
  type self
  predicate precondition [#"../mutex.rs" 78 4 78 34] (self : self)
end
module Mutex_FakeFnOnce_Precondition_Interface
  type self
  predicate precondition [#"../mutex.rs" 78 4 78 34] (self : self)
  val precondition [#"../mutex.rs" 78 4 78 34] (self : self) : bool
    ensures { result = precondition self }
    
end
module Mutex_FakeFnOnce_Precondition
  type self
  predicate precondition [#"../mutex.rs" 78 4 78 34] (self : self)
  val precondition [#"../mutex.rs" 78 4 78 34] (self : self) : bool
    ensures { result = precondition self }
    
end
module Mutex_SpawnPostCond_Type
  type t_spawnpostcond 'f =
    | C_SpawnPostCond 'f
    
  let function spawnpostcond_f (self : t_spawnpostcond 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_SpawnPostCond a -> a
      end
end
module Mutex_Spawn_Interface
  type t
  type f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  clone Mutex_FakeFnOnce_Precondition_Stub as Precondition0 with
    type self = f
  val spawn [#"../mutex.rs" 131 0 133 36] (f : f) : Mutex_JoinHandle_Type.t_joinhandle t (Mutex_SpawnPostCond_Type.t_spawnpostcond f)
    requires {[#"../mutex.rs" 130 11 130 27] Precondition0.precondition f}
    
end
module Mutex_FakeFnOnce_Return_Type
  type self
  type return'
end
module Mutex_FakeFnOnce_Postcondition_Stub
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with
    type self = self
  predicate postcondition [#"../mutex.rs" 81 4 81 52] (self : self) (_2' : Return0.return')
end
module Mutex_FakeFnOnce_Postcondition_Interface
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with
    type self = self
  predicate postcondition [#"../mutex.rs" 81 4 81 52] (self : self) (_2' : Return0.return')
  val postcondition [#"../mutex.rs" 81 4 81 52] (self : self) (_2' : Return0.return') : bool
    ensures { result = postcondition self _2' }
    
end
module Mutex_FakeFnOnce_Postcondition
  type self
  clone Mutex_FakeFnOnce_Return_Type as Return0 with
    type self = self
  predicate postcondition [#"../mutex.rs" 81 4 81 52] (self : self) (_2' : Return0.return')
  val postcondition [#"../mutex.rs" 81 4 81 52] (self : self) (_2' : Return0.return') : bool
    ensures { result = postcondition self _2' }
    
end
module Mutex_Impl5_Inv_Stub
  type f
  use prelude.Borrow
  clone Mutex_FakeFnOnce_Return_Type as Return0 with
    type self = f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  predicate inv [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return')
end
module Mutex_Impl5_Inv_Interface
  type f
  use prelude.Borrow
  clone Mutex_FakeFnOnce_Return_Type as Return0 with
    type self = f
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  predicate inv [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return')
  val inv [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return') : bool
    ensures { result = inv self v }
    
end
module Mutex_Impl5_Inv
  type f
  use prelude.Borrow
  clone Mutex_FakeFnOnce_Return_Type as Return0 with
    type self = f
  clone Mutex_FakeFnOnce_Postcondition_Stub as Postcondition0 with
    type self = f,
    type Return0.return' = Return0.return'
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  predicate inv [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return')
   =
    [#"../mutex.rs" 149 4 149 16] Postcondition0.postcondition (Mutex_SpawnPostCond_Type.spawnpostcond_f self) v
  val inv [#"../mutex.rs" 150 4 150 39] (self : Mutex_SpawnPostCond_Type.t_spawnpostcond f) (v : Return0.return') : bool
    ensures { result = inv self v }
    
end
module Mutex_Leak_Interface
  type t
  use prelude.Borrow
  val leak [#"../mutex.rs" 159 0 159 42] (b : t) : borrowed t
    ensures { [#"../mutex.rs" 158 10 158 23]  * result = b }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Mutex_Concurrent_Interface
  val concurrent [#"../mutex.rs" 163 0 163 19] (_1' : ()) : ()
end
module Mutex_Concurrent
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  clone Mutex_Impl3_Postcondition as Postcondition0
  use Mutex_SpawnPostCond_Type as Mutex_SpawnPostCond_Type
  clone Mutex_Impl5_Inv as Inv1 with
    type f = Mutex_AddsTwo_Type.t_addstwo,
    type Return0.return' = (),
    predicate Postcondition0.postcondition = Postcondition0.postcondition
  clone Mutex_Impl3_Precondition as Precondition0
  use Mutex_Even_Type as Mutex_Even_Type
  clone Mutex_Impl2_Inv as Inv0
  use Mutex_JoinHandle_Type as Mutex_JoinHandle_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone Mutex_Impl4_Join_Interface as Join0 with
    type t = (),
    type i = Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo),
    predicate Inv0.inv = Inv1.inv
  clone Mutex_Spawn_Interface as Spawn0 with
    type t = (),
    type f = Mutex_AddsTwo_Type.t_addstwo,
    predicate Precondition0.precondition = Precondition0.precondition
  use Mutex_Mutex_Type as Mutex_Mutex_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
  clone Mutex_Leak_Interface as Leak0 with
    type t = Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even)
  clone Mutex_Impl0_New_Interface as New0 with
    type t = uint32,
    type i = Mutex_Even_Type.t_even,
    predicate Inv0.inv = Inv0.inv
  let rec cfg concurrent [#"../mutex.rs" 163 0 163 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var m_1 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _2 : borrowed (Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even));
  var _3 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _4 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _5 : Mutex_Even_Type.t_even;
  var t1_6 : Mutex_AddsTwo_Type.t_addstwo;
  var _7 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _8 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var j1_9 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _10 : Mutex_AddsTwo_Type.t_addstwo;
  var t2_11 : Mutex_AddsTwo_Type.t_addstwo;
  var _12 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var _13 : Mutex_Mutex_Type.t_mutex uint32 (Mutex_Even_Type.t_even);
  var j2_14 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _15 : Mutex_AddsTwo_Type.t_addstwo;
  var _16 : Core_Result_Result_Type.t_result () ();
  var _17 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  var _18 : Core_Result_Result_Type.t_result () ();
  var _19 : Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
  {
    goto BB0
  }
  BB0 {
    _5 <- Mutex_Even_Type.C_Even;
    _4 <- ([#"../mutex.rs" 164 38 164 57] New0.new ([#"../mutex.rs" 164 49 164 50] (0 : uint32)) _5);
    goto BB1
  }
  BB1 {
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- ([#"../mutex.rs" 164 24 164 59] Leak0.leak _3);
    goto BB3
  }
  BB3 {
    m_1 <-  * _2;
    assume { Resolve0.resolve _2 };
    _8 <- m_1;
    _7 <- _8;
    t1_6 <- Mutex_AddsTwo_Type.C_AddsTwo _7;
    _10 <- t1_6;
    t1_6 <- any Mutex_AddsTwo_Type.t_addstwo;
    j1_9 <- ([#"../mutex.rs" 166 13 166 22] Spawn0.spawn _10);
    goto BB4
  }
  BB4 {
    _13 <- m_1;
    _12 <- _13;
    t2_11 <- Mutex_AddsTwo_Type.C_AddsTwo _12;
    _15 <- t2_11;
    t2_11 <- any Mutex_AddsTwo_Type.t_addstwo;
    j2_14 <- ([#"../mutex.rs" 168 13 168 22] Spawn0.spawn _15);
    goto BB5
  }
  BB5 {
    _17 <- j1_9;
    j1_9 <- any Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
    _16 <- ([#"../mutex.rs" 171 12 171 21] Join0.join _17);
    goto BB6
  }
  BB6 {
    _19 <- j2_14;
    j2_14 <- any Mutex_JoinHandle_Type.t_joinhandle () (Mutex_SpawnPostCond_Type.t_spawnpostcond (Mutex_AddsTwo_Type.t_addstwo));
    _18 <- ([#"../mutex.rs" 172 12 172 21] Join0.join _19);
    goto BB7
  }
  BB7 {
    _0 <- ();
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Mutex_Impl2
  
end
module Mutex_Impl5
  type f
end
module Mutex_Impl3
  use Mutex_AddsTwo_Type as Mutex_AddsTwo_Type
  clone Mutex_Impl3_Postcondition as Postcondition0
  clone Mutex_Impl3_Precondition as Precondition0
  goal call_refn : [#"../mutex.rs" 100 4 100 23] forall self : Mutex_AddsTwo_Type.t_addstwo . Precondition0.precondition self -> (forall result : () . Postcondition0.postcondition self result)
end
