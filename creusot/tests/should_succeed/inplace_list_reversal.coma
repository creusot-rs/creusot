
module InplaceListReversal_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons ('t, t_list 't)
    
  function any_l (_ : 'b) : 'a
  let rec nil < 't > (input:t_list 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ]
    
  let rec cons < 't > (input:t_list 't) (ret  (field_0:('t, t_list 't)))= any
    [ good (field_0:('t, t_list 't))-> {C_Cons field_0 = input} (! ret {field_0})
    | bad (field_0:('t, t_list 't))-> {C_Cons field_0 <> input} {false} any ]
    
end
module InplaceListReversal_Rev
  type t
  use InplaceListReversal_List_Type as InplaceListReversal_List_Type
  use prelude.Borrow
  predicate invariant'2 (self : borrowed (InplaceListReversal_List_Type.t_list t))
  let rec invariant'2 (self:borrowed (InplaceListReversal_List_Type.t_list t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (InplaceListReversal_List_Type.t_list t))
  let rec inv'2 (_x:borrowed (InplaceListReversal_List_Type.t_list t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (InplaceListReversal_List_Type.t_list t) . inv'2 x = true
  predicate invariant'1 (self : InplaceListReversal_List_Type.t_list t)
  let rec invariant'1 (self:InplaceListReversal_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : InplaceListReversal_List_Type.t_list t)
  let rec inv'1 (_x:InplaceListReversal_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : InplaceListReversal_List_Type.t_list t . inv'1 x = true
  use prelude.Snapshot
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t)))
  let rec invariant'0 (self:Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t)))
  let rec inv'0 (_x:Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t)) . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'2 (self : borrowed (InplaceListReversal_List_Type.t_list t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'2 (self:borrowed (InplaceListReversal_List_Type.t_list t)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : InplaceListReversal_List_Type.t_list t)
  let rec resolve'1 (self:InplaceListReversal_List_Type.t_list t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  function rev_append'0 [#"../inplace_list_reversal.rs" 16 0 16 55] (n : InplaceListReversal_List_Type.t_list t) (o : InplaceListReversal_List_Type.t_list t) : InplaceListReversal_List_Type.t_list t
    
   =
    [#"../inplace_list_reversal.rs" 17 4 20 5] match n with
      | InplaceListReversal_List_Type.C_Nil -> o
      | InplaceListReversal_List_Type.C_Cons (hd, tl) -> rev_append'0 tl (InplaceListReversal_List_Type.C_Cons (hd, o))
      end
  let rec rev_append'0 (n:InplaceListReversal_List_Type.t_list t) (o:InplaceListReversal_List_Type.t_list t) (return'  (ret:InplaceListReversal_List_Type.t_list t))= any
    [ return' (result:InplaceListReversal_List_Type.t_list t)-> {result = rev_append'0 n o} (! return' {result}) ]
    
  let rec replace'0 (dest:borrowed (InplaceListReversal_List_Type.t_list t)) (src:InplaceListReversal_List_Type.t_list t) (return'  (ret:InplaceListReversal_List_Type.t_list t))= {[@expl:precondition] inv'1 src}
    {[@expl:precondition] inv'2 dest}
    any
    [ return' (result:InplaceListReversal_List_Type.t_list t)-> {inv'1 result}
      {[#"../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37] result =  * dest}
      {[#"../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34]  ^ dest = src}
      (! return' {result}) ]
    
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t)))
  let rec resolve'0 (self:Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Snapshot
  let rec rev (l:borrowed (InplaceListReversal_List_Type.t_list t)) (return'  (ret:()))= {[#"../inplace_list_reversal.rs" 24 14 24 15] inv'2 l}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [#"../inplace_list_reversal.rs" 25 16 25 31] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_l} s1
      | s1 = -{resolve'0 old_l}- s2
      | s2 =  [ &prev <- InplaceListReversal_List_Type.C_Nil : InplaceListReversal_List_Type.t_list t ] s3
      | s3 = Borrow.borrow_final <InplaceListReversal_List_Type.t_list t> { * l} {Borrow.get_id l}
          (fun (_ret':borrowed (InplaceListReversal_List_Type.t_list t)) ->
             [ &_7 <- _ret' ] 
             [ &l <- { l with current = ( ^ _7) ; } ] 
            s4)
      | s4 = -{inv'1 ( ^ _7)}- s5
      | s5 =  [ &_8 <- InplaceListReversal_List_Type.C_Nil : InplaceListReversal_List_Type.t_list t ] s6
      | s6 = replace'0 {_7} {_8} (fun (_ret':InplaceListReversal_List_Type.t_list t) ->  [ &head <- _ret' ] s7)
      | s7 = bb2 ]
      
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../inplace_list_reversal.rs" 28 16 28 73] rev_append'0 head prev
        = rev_append'0 ( * Snapshot.inner old_l) (InplaceListReversal_List_Type.C_Nil)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = any
            [ br0 -> {head = InplaceListReversal_List_Type.C_Nil } (! bb19)
            | br1 (a:(t, InplaceListReversal_List_Type.t_list t))-> {head = InplaceListReversal_List_Type.C_Cons a}
              (! bb6) ]
             ]
          
        | bb6 = s0 [ s0 = bb7 ] 
        | bb7 = s0
          [ s0 = InplaceListReversal_List_Type.cons <t> {head}
              (fun (r0'0:(t, InplaceListReversal_List_Type.t_list t)) ->
                 [ &curr <- r0'0 ] 
                (any
                [ any_ (_any:(t, InplaceListReversal_List_Type.t_list t))-> (! InplaceListReversal_List_Type.cons
                    <t>
                    {head}
                    (fun (l_0'0:(t, InplaceListReversal_List_Type.t_list t)) ->
                       [ &head <- InplaceListReversal_List_Type.C_Cons _any : InplaceListReversal_List_Type.t_list t ] 
                      s1)) ]
                ))
          | s1 = {[@expl:type invariant] inv'1 head} s2
          | s2 = -{resolve'1 head}- s3
          | s3 =  [ &next <- let (_, r'0) = curr in r'0 ] 
            (any
            [ any_ (_any:InplaceListReversal_List_Type.t_list t)-> (!  [ &curr <- let (l'1, _) = curr in (l'1, _any) ] 
              s4) ]
            )
          | s4 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &curr <- let (l'1, _) = curr in (l'1, prev) ] 
            (any [ any_ (_any:InplaceListReversal_List_Type.t_list t)-> (!  [ &prev <- _any ] s1) ] )
          | s1 = bb10 ]
          
        | bb10 = s0
          [ s0 =  [ &_16 <- InplaceListReversal_List_Type.C_Cons curr : InplaceListReversal_List_Type.t_list t ] 
            (any [ any_ (_any:(t, InplaceListReversal_List_Type.t_list t))-> (!  [ &curr <- _any ] s1) ] )
          | s1 = bb11 ]
          
        | bb11 = s0 [ s0 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &prev <- _16 ] 
            (any [ any_ (_any:InplaceListReversal_List_Type.t_list t)-> (!  [ &_16 <- _any ] s1) ] )
          | s1 = bb14 ]
          
        | bb14 = s0 [ s0 = bb15 ] 
        | bb15 = s0
          [ s0 =  [ &head <- next ] 
            (any [ any_ (_any:InplaceListReversal_List_Type.t_list t)-> (!  [ &next <- _any ] s1) ] )
          | s1 = bb17 ]
          
        | bb17 = s0 [ s0 = bb18 ] 
        | bb18 = s0 [ s0 = bb20 ] 
        | bb20 = s0 [ s0 = bb4 ]  ]
         ]
      
    | bb19 = s0 [ s0 = {[@expl:type invariant] inv'1 head} s1 | s1 = -{resolve'1 head}- s2 | s2 = bb21 ] 
    | bb21 = s0
      [ s0 =  [ &l <- { l with current = prev ; } ] 
        (any [ any_ (_any:InplaceListReversal_List_Type.t_list t)-> (!  [ &prev <- _any ] s1) ] )
      | s1 = {[@expl:type invariant] inv'1 ( * l)} s2
      | s2 = -{resolve'1 ( * l)}- s3
      | s3 = {[@expl:type invariant] inv'2 l} s4
      | s4 = -{resolve'2 l}- s5
      | s5 = bb23 ]
      
    | bb23 = s0 [ s0 =  [ &_0 <- [#"../inplace_list_reversal.rs" 24 31 36 1] () ] s1 | s1 = bb24 ] 
    | bb24 = s0 [ s0 = bb25 ] 
    | bb25 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & l : borrowed (InplaceListReversal_List_Type.t_list t) = l
    | & old_l : Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t)) = any_l () : Snapshot.snap_ty (borrowed (InplaceListReversal_List_Type.t_list t))
    | & prev : InplaceListReversal_List_Type.t_list t = any_l () : InplaceListReversal_List_Type.t_list t
    | & head : InplaceListReversal_List_Type.t_list t = any_l () : InplaceListReversal_List_Type.t_list t
    | & _7 : borrowed (InplaceListReversal_List_Type.t_list t) = any_l () : borrowed (InplaceListReversal_List_Type.t_list t)
    | & _8 : InplaceListReversal_List_Type.t_list t = any_l () : InplaceListReversal_List_Type.t_list t
    | & curr : (t, InplaceListReversal_List_Type.t_list t) = any_l () : (t, InplaceListReversal_List_Type.t_list t)
    | & next : InplaceListReversal_List_Type.t_list t = any_l () : InplaceListReversal_List_Type.t_list t
    | & _16 : InplaceListReversal_List_Type.t_list t = any_l () : InplaceListReversal_List_Type.t_list t ]
    
    [ return' (result:())-> {[@expl:postcondition] [#"../inplace_list_reversal.rs" 23 10 23 35]  ^ l
      = rev_append'0 ( * l) (InplaceListReversal_List_Type.C_Nil)}
      (! return' {result}) ]
    
end
