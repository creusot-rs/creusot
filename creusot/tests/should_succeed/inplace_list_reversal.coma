module T_inplace_list_reversal__List [#"inplace_list_reversal.rs" 7 0 7 16]
  type t_List 't =
    | C_Nil
    | C_Cons ('t, t_List 't)
  
  let rec v_Nil < 't > (input:t_List 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} (! {false} any) ]
    
  
  let rec v_Cons < 't > (input:t_List 't) (ret  (field_0:('t, t_List 't)))= any
    [ good (field_0:('t, t_List 't))-> {C_Cons field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : ('t, t_List 't) [C_Cons field_0 : t_List 't] . C_Cons field_0 <> input} (! {false} any) ]
    
end
module M_inplace_list_reversal__rev [#"inplace_list_reversal.rs" 24 0 24 30]
  type t
  
  let%span sinplace_list_reversal0 = "inplace_list_reversal.rs" 25 16 25 31
  let%span sinplace_list_reversal1 = "inplace_list_reversal.rs" 28 16 28 25
  let%span sinplace_list_reversal2 = "inplace_list_reversal.rs" 29 16 29 25
  let%span sinplace_list_reversal3 = "inplace_list_reversal.rs" 30 16 30 73
  let%span sinplace_list_reversal4 = "inplace_list_reversal.rs" 24 14 24 15
  let%span sinplace_list_reversal5 = "inplace_list_reversal.rs" 23 10 23 35
  let%span smem6 = "../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem7 = "../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span sinplace_list_reversal8 = "inplace_list_reversal.rs" 17 4 20 5
  let%span sresolve9 = "../../../creusot-contracts/src/resolve.rs" 55 8 55 23
  let%span sresolve10 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sboxed11 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span sinvariant12 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sresolve13 = "../../../creusot-contracts/src/resolve.rs" 27 8 27 44
  
  use T_inplace_list_reversal__List as List'0
  
  predicate inv'0 (_1 : List'0.t_List t)
  
  predicate inv'4 (_1 : t)
  
  predicate inv'3 (_1 : (t, List'0.t_List t))
  
  axiom inv_axiom'3 [@rewrite] : forall x : (t, List'0.t_List t) [inv'3 x] . inv'3 x
  = (let (a, b) = x in inv'4 a /\ inv'0 b)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (List'0.t_List t)) =
    [%#sinvariant12] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (List'0.t_List t))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (List'0.t_List t) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : (t, List'0.t_List t)) =
    [%#sboxed11] inv'3 self
  
  predicate inv'1 (_1 : (t, List'0.t_List t))
  
  axiom inv_axiom'1 [@rewrite] : forall x : (t, List'0.t_List t) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv_axiom'0 [@rewrite] : forall x : List'0.t_List t [inv'0 x] . inv'0 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 -> inv'1 a_0
    end
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (List'0.t_List t)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (List'0.t_List t)) =
    resolve'3 _1
  
  predicate resolve'7 (_1 : List'0.t_List t) =
    true
  
  predicate resolve'6 (_1 : t)
  
  predicate resolve'5 (self : (t, List'0.t_List t)) =
    [%#sresolve13] resolve'6 (let (a, _) = self in a) /\ resolve'7 (let (_, a) = self in a)
  
  predicate resolve'4 (_1 : (t, List'0.t_List t)) =
    resolve'5 _1
  
  predicate resolve'2 (self : (t, List'0.t_List t)) =
    [%#sresolve9] resolve'4 self
  
  predicate resolve'0 (_1 : (t, List'0.t_List t)) =
    resolve'2 _1
  
  use prelude.prelude.Snapshot
  
  function rev_append'0 [#"inplace_list_reversal.rs" 16 0 16 55] (n : List'0.t_List t) (o : List'0.t_List t) : List'0.t_List t
    
   =
    [%#sinplace_list_reversal8] match n with
      | List'0.C_Nil -> o
      | List'0.C_Cons (hd, tl) -> rev_append'0 tl (List'0.C_Cons (hd, o))
      end
  
  let rec replace'0 (dest:borrowed (List'0.t_List t)) (src:List'0.t_List t) (return'  (ret:List'0.t_List t))= {[@expl:precondition] inv'0 src}
    {[@expl:precondition] inv'2 dest}
    any
    [ return' (result:List'0.t_List t)-> {inv'0 result}
      {[%#smem7] result = dest.current}
      {[%#smem6] dest.final = src}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec rev (l:borrowed (List'0.t_List t)) (return'  (ret:()))= {[%#sinplace_list_reversal4] inv'2 l}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [%#sinplace_list_reversal0] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &prev <- List'0.C_Nil ] s1
      | s1 = {inv'0 l.current}
        Borrow.borrow_mut <List'0.t_List t> {l.current}
          (fun (_ret':borrowed (List'0.t_List t)) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &l <- { l with current = _ret'.final ; } ] 
            s2)
      | s2 =  [ &_8 <- List'0.C_Nil ] s3
      | s3 = replace'0 {_7} {_8} (fun (_ret':List'0.t_List t) ->  [ &head <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] [%#sinplace_list_reversal3] rev_append'0 head prev
        = rev_append'0 (Snapshot.inner old_l).current (List'0.C_Nil)}
        {[@expl:loop invariant] [%#sinplace_list_reversal2] inv'0 head}
        {[@expl:loop invariant] [%#sinplace_list_reversal1] inv'0 prev}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = any
          [ br0 -> {head = List'0.C_Nil } (! bb21) | br1 (a:(t, List'0.t_List t))-> {head = List'0.C_Cons a} (! bb8) ]
          
        | bb8 = bb9
        | bb9 = s0
          [ s0 = List'0.v_Cons <t> {head} (fun (r0'0:(t, List'0.t_List t)) ->  [ &curr <- r0'0 ] s1)
          | s1 =  [ &next <- let (_, r'0) = curr in r'0 ] s2
          | s2 = bb10 ]
          
        | bb10 = s0 [ s0 =  [ &curr <- let (r'0, _) = curr in (r'0, prev) ] s1 | s1 = bb12 ] 
        | bb12 = s0 [ s0 =  [ &_18 <- List'0.C_Cons curr ] s1 | s1 = bb13 ] 
        | bb13 = bb14
        | bb14 = s0 [ s0 =  [ &prev <- _18 ] s1 | s1 = bb16 ] 
        | bb16 = bb17
        | bb17 = s0 [ s0 =  [ &head <- next ] s1 | s1 = bb19 ] 
        | bb19 = bb20
        | bb20 = bb22
        | bb22 = bb6 ]
         ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] match head with
          | List'0.C_Cons x'0 -> inv'1 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match head with
          | List'0.C_Cons x'1 -> resolve'0 x'1
          | _ -> true
          end}-
        s2
      | s2 = bb23 ]
      
    | bb23 = s0
      [ s0 = {[@expl:type invariant] match l with
          | {current = x'0} -> inv'0 x'0
          | _ -> true
          end}
        s1
      | s1 =  [ &l <- { l with current = prev ; } ] s2
      | s2 = {[@expl:type invariant] inv'2 l} s3
      | s3 = -{resolve'1 l}- s4
      | s4 = bb25 ]
      
    | bb25 = bb26
    | bb26 = bb27
    | bb27 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & l : borrowed (List'0.t_List t) = l
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_List t)) = any_l ()
    | & prev : List'0.t_List t = any_l ()
    | & head : List'0.t_List t = any_l ()
    | & _7 : borrowed (List'0.t_List t) = any_l ()
    | & _8 : List'0.t_List t = any_l ()
    | & curr : (t, List'0.t_List t) = any_l ()
    | & next : List'0.t_List t = any_l ()
    | & _18 : List'0.t_List t = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sinplace_list_reversal5] l.final
      = rev_append'0 l.current (List'0.C_Nil)}
      (! return' {result}) ]
    
end
