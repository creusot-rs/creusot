
module InplaceListReversal_List_Type
  type t_list 't =
    | C_Nil
    | C_Cons ('t, t_list 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec nil < 't > (input:t_list 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ]
    
  
  let rec cons < 't > (input:t_list 't) (ret  (field_0:('t, t_list 't)))= any
    [ good (field_0:('t, t_list 't))-> {C_Cons field_0 = input} (! ret {field_0})
    | bad (field_0:('t, t_list 't))-> {C_Cons field_0 <> input} {false} any ]
    
end
module InplaceListReversal_Rev
  type t
  
  let%span sinplace_list_reversal0 = "../inplace_list_reversal.rs" 25 16 25 31
  
  let%span sinplace_list_reversal1 = "../inplace_list_reversal.rs" 28 16 28 73
  
  let%span sinplace_list_reversal2 = "../inplace_list_reversal.rs" 24 14 24 15
  
  let%span sinplace_list_reversal3 = "../inplace_list_reversal.rs" 23 10 23 35
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span6 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span7 = "../inplace_list_reversal.rs" 17 4 20 5
  
  let%span span8 = "" 0 0 0 0
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  
  let%span span11 = "../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  let%span span12 = "" 0 0 0 0
  
  use InplaceListReversal_List_Type as List'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (List'0.t_list t)) =
    [%#span4] true
  
  predicate inv'2 (_x : borrowed (List'0.t_list t))
  
  axiom inv'2 : forall x : borrowed (List'0.t_list t) . inv'2 x = true
  
  predicate invariant'1 (self : List'0.t_list t) =
    [%#span4] true
  
  predicate inv'1 (_x : List'0.t_list t)
  
  axiom inv'1 : forall x : List'0.t_list t . inv'1 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'0 (self : Snapshot.snap_ty (borrowed (List'0.t_list t))) =
    [%#span4] true
  
  predicate inv'0 (_x : Snapshot.snap_ty (borrowed (List'0.t_list t)))
  
  axiom inv'0 : forall x : Snapshot.snap_ty (borrowed (List'0.t_list t)) . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed (List'0.t_list t)) =
    [%#span5]  ^ self =  * self
  
  predicate resolve'1 (self : List'0.t_list t) =
    [%#span6] true
  
  use prelude.prelude.Snapshot
  
  function rev_append'0 [#"../inplace_list_reversal.rs" 16 0 16 55] (n : List'0.t_list t) (o : List'0.t_list t) : List'0.t_list t
    
   =
    [%#span7] match n with
      | List'0.C_Nil -> o
      | List'0.C_Cons (hd, tl) -> rev_append'0 tl (List'0.C_Cons (hd, o))
      end
  
  let rec replace'0 (dest:borrowed (List'0.t_list t)) (src:List'0.t_list t) (return'  (ret:List'0.t_list t))= {[@expl:precondition] [%#span9] inv'1 src}
    {[@expl:precondition] [%#span8] inv'2 dest}
    any
    [ return' (result:List'0.t_list t)-> {[%#span12] inv'1 result}
      {[%#span11] result =  * dest}
      {[%#span10]  ^ dest = src}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : Snapshot.snap_ty (borrowed (List'0.t_list t))) =
    [%#span6] true
  
  use prelude.prelude.Snapshot
  
  let rec rev (l:borrowed (List'0.t_list t)) (return'  (ret:()))= {[%#sinplace_list_reversal2] inv'2 l}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [%#sinplace_list_reversal0] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 old_l} s1
      | s1 = -{resolve'0 old_l}- s2
      | s2 =  [ &prev <- List'0.C_Nil ] s3
      | s3 = Borrow.borrow_final <List'0.t_list t> { * l} {Borrow.get_id l}
          (fun (_ret':borrowed (List'0.t_list t)) ->  [ &_7 <- _ret' ]  [ &l <- { l with current = ( ^ _7) ; } ] s4)
      | s4 = -{inv'1 ( ^ _7)}- s5
      | s5 =  [ &_8 <- List'0.C_Nil ] s6
      | s6 = replace'0 {_7} {_8} (fun (_ret':List'0.t_list t) ->  [ &head <- _ret' ] s7)
      | s7 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#sinplace_list_reversal1] rev_append'0 head prev
        = rev_append'0 ( * Snapshot.inner old_l) (List'0.C_Nil)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = any
          [ br0 -> {head = List'0.C_Nil } (! bb19) | br1 (a:(t, List'0.t_list t))-> {head = List'0.C_Cons a} (! bb6) ]
          
        | bb6 = bb7
        | bb7 = s0
          [ s0 = List'0.cons <t> {head}
              (fun (r0'0:(t, List'0.t_list t)) ->
                 [ &curr <- r0'0 ] 
                (any
                [ any_ (_any:(t, List'0.t_list t))-> (! List'0.cons <t> {head}
                    (fun (l_0'0:(t, List'0.t_list t)) ->  [ &head <- List'0.C_Cons _any ] s1)) ]
                ))
          | s1 = {[@expl:type invariant] inv'1 head} s2
          | s2 = -{resolve'1 head}- s3
          | s3 =  [ &next <- let (_, r'0) = curr in r'0 ] 
            (any [ any_ (_any:List'0.t_list t)-> (!  [ &curr <- let (l'1, _) = curr in (l'1, _any) ] s4) ] )
          | s4 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &curr <- let (l'1, _) = curr in (l'1, prev) ] 
            (any [ any_ (_any:List'0.t_list t)-> (!  [ &prev <- _any ] s1) ] )
          | s1 = bb10 ]
          
        | bb10 = s0
          [ s0 =  [ &_16 <- List'0.C_Cons curr ] (any [ any_ (_any:(t, List'0.t_list t))-> (!  [ &curr <- _any ] s1) ] )
          | s1 = bb11 ]
          
        | bb11 = bb12
        | bb12 = s0
          [ s0 =  [ &prev <- _16 ] (any [ any_ (_any:List'0.t_list t)-> (!  [ &_16 <- _any ] s1) ] ) | s1 = bb14 ]
          
        | bb14 = bb15
        | bb15 = s0
          [ s0 =  [ &head <- next ] (any [ any_ (_any:List'0.t_list t)-> (!  [ &next <- _any ] s1) ] ) | s1 = bb17 ]
          
        | bb17 = bb18
        | bb18 = bb20
        | bb20 = bb4 ]
         ]
      
    | bb19 = s0 [ s0 = {[@expl:type invariant] inv'1 head} s1 | s1 = -{resolve'1 head}- s2 | s2 = bb21 ] 
    | bb21 = s0
      [ s0 =  [ &l <- { l with current = prev ; } ] (any [ any_ (_any:List'0.t_list t)-> (!  [ &prev <- _any ] s1) ] )
      | s1 = {[@expl:type invariant] inv'1 ( * l)} s2
      | s2 = -{resolve'1 ( * l)}- s3
      | s3 = {[@expl:type invariant] inv'2 l} s4
      | s4 = -{resolve'2 l}- s5
      | s5 = bb23 ]
      
    | bb23 = bb24
    | bb24 = bb25
    | bb25 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & l : borrowed (List'0.t_list t) = l
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_list t)) = any_l ()
    | & prev : List'0.t_list t = any_l ()
    | & head : List'0.t_list t = any_l ()
    | & _7 : borrowed (List'0.t_list t) = any_l ()
    | & _8 : List'0.t_list t = any_l ()
    | & curr : (t, List'0.t_list t) = any_l ()
    | & next : List'0.t_list t = any_l ()
    | & _16 : List'0.t_list t = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sinplace_list_reversal3]  ^ l
      = rev_append'0 ( * l) (List'0.C_Nil)}
      (! return' {result}) ]
    
end
