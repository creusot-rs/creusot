
module T_inplace_list_reversal__List
  type t_List 't =
    | C_Nil
    | C_Cons ('t, t_List 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Nil < 't > (input:t_List 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ]
    
  
  let rec v_Cons < 't > (input:t_List 't) (ret  (field_0:('t, t_List 't)))= any
    [ good (field_0:('t, t_List 't))-> {C_Cons field_0 = input} (! ret {field_0})
    | bad (field_0:('t, t_List 't))-> {C_Cons field_0 <> input} {false} any ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_inplace_list_reversal__rev
  type t
  
  let%span sinplace_list_reversal0 = "../inplace_list_reversal.rs" 25 16 25 31
  
  let%span sinplace_list_reversal1 = "../inplace_list_reversal.rs" 28 16 28 73
  
  let%span sinplace_list_reversal2 = "../inplace_list_reversal.rs" 24 14 24 15
  
  let%span sinplace_list_reversal3 = "../inplace_list_reversal.rs" 23 10 23 35
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span6 = "../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span7 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span8 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span9 = "../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span10 = "../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  let%span span11 = "../inplace_list_reversal.rs" 17 4 20 5
  
  let%span span12 = "" 0 0 0 0
  
  let%span span13 = "" 0 0 0 0
  
  let%span span14 = "../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  
  let%span span15 = "../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  let%span span16 = "" 0 0 0 0
  
  use T_inplace_list_reversal__List as List'0
  
  predicate invariant'3 (self : (t, List'0.t_List t)) =
    [%#span4] true
  
  predicate inv'3 (_1 : (t, List'0.t_List t))
  
  axiom inv'3 : forall x : (t, List'0.t_List t) . inv'3 x = true
  
  predicate inv'0 (_1 : List'0.t_List t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (List'0.t_List t)) =
    [%#span5] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (List'0.t_List t))
  
  axiom inv'2 : forall x : borrowed (List'0.t_List t) . inv'2 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'1 (self : (t, List'0.t_List t)) =
    [%#span6] inv'3 self
  
  predicate inv'1 (_1 : (t, List'0.t_List t))
  
  axiom inv'1 : forall x : (t, List'0.t_List t) . inv'1 x = true
  
  predicate invariant'0 (self : List'0.t_List t) =
    [%#span4] true
  
  axiom inv'0 : forall x : List'0.t_List t . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (List'0.t_List t)) =
    [%#span7] self.final = self.current
  
  predicate resolve'4 (self : List'0.t_List t) =
    [%#span8] true
  
  predicate resolve'3 (self : t)
  
  predicate resolve'2 (self : (t, List'0.t_List t)) =
    [%#span9] resolve'3 (let (a, _) = self in a) /\ resolve'4 (let (_, a) = self in a)
  
  predicate resolve'0 (self : (t, List'0.t_List t)) =
    [%#span10] resolve'2 self
  
  use prelude.prelude.Snapshot
  
  function rev_append'0 [#"../inplace_list_reversal.rs" 16 0 16 55] (n : List'0.t_List t) (o : List'0.t_List t) : List'0.t_List t
    
   =
    [%#span11] match n with
      | List'0.C_Nil -> o
      | List'0.C_Cons (hd, tl) -> rev_append'0 tl (List'0.C_Cons (hd, o))
      end
  
  let rec replace'0 (dest:borrowed (List'0.t_List t)) (src:List'0.t_List t) (return'  (ret:List'0.t_List t))= {[@expl:precondition] [%#span13] inv'0 src}
    {[@expl:precondition] [%#span12] inv'2 dest}
    any
    [ return' (result:List'0.t_List t)-> {[%#span16] inv'0 result}
      {[%#span15] result = dest.current}
      {[%#span14] dest.final = src}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  let rec rev (l:borrowed (List'0.t_List t)) (return'  (ret:()))= {[%#sinplace_list_reversal2] inv'2 l}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [%#sinplace_list_reversal0] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &prev <- List'0.C_Nil ] s1
      | s1 = Borrow.borrow_mut <List'0.t_List t> {l.current}
          (fun (_ret':borrowed (List'0.t_List t)) ->  [ &_7 <- _ret' ]  [ &l <- { l with current = _7.final ; } ] s2)
      | s2 = -{inv'0 _7.final}- s3
      | s3 =  [ &_8 <- List'0.C_Nil ] s4
      | s4 = replace'0 {_7} {_8} (fun (_ret':List'0.t_List t) ->  [ &head <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#sinplace_list_reversal1] rev_append'0 head prev
        = rev_append'0 (Snapshot.inner old_l).current (List'0.C_Nil)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = any
          [ br0 -> {head = List'0.C_Nil } (! bb19) | br1 (a:(t, List'0.t_List t))-> {head = List'0.C_Cons a} (! bb6) ]
          
        | bb6 = bb7
        | bb7 = s0
          [ s0 = List'0.v_Cons <t> {head} (fun (r0'0:(t, List'0.t_List t)) ->  [ &curr <- r0'0 ] s1)
          | s1 =  [ &next <- let (_, r'0) = curr in r'0 ] s2
          | s2 = bb8 ]
          
        | bb8 = s0 [ s0 =  [ &curr <- let (l'1, _) = curr in (l'1, prev) ] s1 | s1 = bb10 ] 
        | bb10 = s0 [ s0 =  [ &_16 <- List'0.C_Cons curr ] s1 | s1 = bb11 ] 
        | bb11 = bb12
        | bb12 = s0 [ s0 =  [ &prev <- _16 ] s1 | s1 = bb14 ] 
        | bb14 = bb15
        | bb15 = s0 [ s0 =  [ &head <- next ] s1 | s1 = bb17 ] 
        | bb17 = bb18
        | bb18 = bb20
        | bb20 = bb4 ]
         ]
      
    | bb19 = s0
      [ s0 = List'0.v_Cons <t> {head}
          (fun (r0'0:(t, List'0.t_List t)) ->
            {[@expl:type invariant] match head with
              | List'0.C_Cons _ -> inv'1 r0'0
              | _ -> true
              end}
            s1)
      | s1 = List'0.v_Cons <t> {head}
          (fun (r0'1:(t, List'0.t_List t)) ->
            -{match head with
              | List'0.C_Cons _ -> resolve'0 r0'1
              | _ -> true
              end}-
            s2)
      | s2 = bb21 ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'0 l.current} s1
      | s1 =  [ &l <- { l with current = prev ; } ] s2
      | s2 = {[@expl:type invariant] inv'2 l} s3
      | s3 = -{resolve'1 l}- s4
      | s4 = bb23 ]
      
    | bb23 = bb24
    | bb24 = bb25
    | bb25 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & l : borrowed (List'0.t_List t) = l
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_List t)) = any_l ()
    | & prev : List'0.t_List t = any_l ()
    | & head : List'0.t_List t = any_l ()
    | & _7 : borrowed (List'0.t_List t) = any_l ()
    | & _8 : List'0.t_List t = any_l ()
    | & curr : (t, List'0.t_List t) = any_l ()
    | & next : List'0.t_List t = any_l ()
    | & _16 : List'0.t_List t = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sinplace_list_reversal3] l.final
      = rev_append'0 l.current (List'0.C_Nil)}
      (! return' {result}) ]
    
end
