
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module SelectionSortGeneric_SelectionSort
  type t
  type deep_model_ty0
  predicate invariant14 (self : deep_model_ty0)
  val invariant14 (self : deep_model_ty0) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : deep_model_ty0)
  val inv14 (_x : deep_model_ty0) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : deep_model_ty0 . inv14 x = true
  use prelude.UIntSize
  use seq.Seq
  predicate invariant13 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant13 (self : Seq.seq usize) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : Seq.seq usize)
  val inv13 (_x : Seq.seq usize) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Seq.seq usize . inv13 x = true
  predicate invariant12 (self : Seq.seq t)
  val invariant12 (self : Seq.seq t) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : Seq.seq t)
  val inv12 (_x : Seq.seq t) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Seq.seq t . inv12 x = true
  predicate invariant11 (self : Seq.seq deep_model_ty0)
  val invariant11 (self : Seq.seq deep_model_ty0) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : Seq.seq deep_model_ty0)
  val inv11 (_x : Seq.seq deep_model_ty0) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Seq.seq deep_model_ty0 . inv11 x = true
  predicate invariant10 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : usize) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : usize)
  val inv10 (_x : usize) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : usize . inv10 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant9 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Core_Option_Option_Type.t_option usize)
  val inv9 (_x : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Core_Option_Option_Type.t_option usize . inv9 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant8 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv8 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  predicate invariant6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv6 x = true
  use prelude.Slice
  predicate invariant5 (self : borrowed (slice t))
  val invariant5 (self : borrowed (slice t)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (slice t))
  val inv5 (_x : borrowed (slice t)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (slice t) . inv5 x = true
  predicate invariant4 (self : slice t)
  val invariant4 (self : slice t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : slice t)
  val inv4 (_x : slice t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : slice t . inv4 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv12 (shallow_model2 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self)
  <= UIntSize.to_int max0)
  predicate invariant3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv12 (shallow_model2 self)
  val invariant3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv14 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y)
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y
    = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv14 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y
  = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y
    = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv14 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y
  = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv14 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv14 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y
  = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv14 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv14 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv14 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv14 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y
  = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv14 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv14 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv14 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv14 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y
  = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use seq.Seq
  predicate inv1 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv1 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv1 _x }
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  function deep_model2 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model2 (self : usize) : int
    ensures { result = deep_model2 self }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model2 (Core_Ops_Range_Range_Type.range_start self) <= deep_model2 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model2 (Core_Ops_Range_Range_Type.range_start o) <= deep_model2 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model2 (Core_Ops_Range_Range_Type.range_start o) - deep_model2 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model2 (Seq.get visited i) = deep_model2 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv1 a}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv13 ab}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv1 b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv13 bc}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv1 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv1 a)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv13 ab)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv1 b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv13 bc)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv1 c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv1 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv1 self)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  predicate invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv1 x = true
  use prelude.Snapshot
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  val inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv0 x
  = true
  use seq.Seq
  predicate sorted_range0 [#"../selection_sort_generic.rs" 10 0 10 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int)
   =
    [#"../selection_sort_generic.rs" 11 4 13 5] forall j : int . forall i : int . l <= i /\ i < j /\ j < u
     -> le_log0 (Seq.get s i) (Seq.get s j)
  val sorted_range0 [#"../selection_sort_generic.rs" 10 0 10 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int) : bool
    ensures { result = sorted_range0 s l u }
    
  use seq.Seq
  predicate sorted0 [#"../selection_sort_generic.rs" 17 0 17 41] (s : Seq.seq deep_model_ty0) =
    [#"../selection_sort_generic.rs" 19 8 19 35] sorted_range0 s 0 (Seq.length s)
  val sorted0 [#"../selection_sort_generic.rs" 17 0 17 41] (s : Seq.seq deep_model_ty0) : bool
    ensures { result = sorted0 s }
    
  function deep_model4 (self : t) : deep_model_ty0
  val deep_model4 (self : t) : deep_model_ty0
    ensures { result = deep_model4 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  function deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
  val deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv3 self}
    ensures { result = deep_model1 self }
    
  axiom deep_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv3 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44] inv11 (deep_model1 self))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i
  /\ i < Seq.length (shallow_model2 self)  -> Seq.get (deep_model1 self) i = deep_model4 (index_logic0 self i))
  && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (shallow_model2 self)
  = Seq.length (deep_model1 self))
  predicate resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed (slice t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (slice t)) : bool
    ensures { result = resolve3 self }
    
  use seq.Permut
  use prelude.Slice
  function shallow_model6 (self : slice t) : Seq.seq t
  val shallow_model6 (self : slice t) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model6 self }
    
  axiom shallow_model6_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv12 (shallow_model6 self))
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model6 self = Slice.id self)
  && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model6 self)
  <= UIntSize.to_int max0)
  function shallow_model5 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model6 ( * self)
  val shallow_model5 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model5 self }
    
  val swap0 (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 247 19 247 35] UIntSize.to_int a
    < Seq.length (shallow_model5 self)}
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 248 19 248 35] UIntSize.to_int b
    < Seq.length (shallow_model5 self)}
    requires {inv5 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 249 8 249 52] Permut.exchange (shallow_model6 ( ^ self)) (shallow_model5 self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
  function shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model2 ( * self)
  val shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  val deref_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : borrowed (slice t)
    requires {inv6 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] shallow_model5 result
    = shallow_model0 self }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] shallow_model6 ( ^ result)
    = shallow_model2 ( ^ self) }
    ensures { inv5 result }
    
  function deep_model3 (self : t) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model4 self
  val deep_model3 (self : t) : deep_model_ty0
    ensures { result = deep_model3 self }
    
  val lt0 (self : t) (other : t) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 33 26 33 76] result
    = lt_log0 (deep_model3 self) (deep_model3 other) }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model2 self
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model3 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (index : usize) : t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model3 self)}
    requires {inv7 self}
    requires {inv10 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model3 self) result }
    ensures { inv2 result }
    
  use seq.Seq
  predicate resolve1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve1 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve1 self
    /\ deep_model2 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model2 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : Core_Option_Option_Type.t_option usize
    requires {inv8 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv9 result }
    
  predicate partition0 [#"../selection_sort_generic.rs" 24 0 24 52] (v : Seq.seq deep_model_ty0) (i : int) =
    [#"../selection_sort_generic.rs" 25 4 25 106] forall k2 : int . forall k1 : int . 0 <= k1
    /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v  -> le_log0 (Seq.get v k1) (Seq.get v k2)
  val partition0 [#"../selection_sort_generic.rs" 24 0 24 52] (v : Seq.seq deep_model_ty0) (i : int) : bool
    ensures { result = partition0 v i }
    
  use prelude.Snapshot
  function deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 99 8 99 28] deep_model1 ( * self)
  val deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    ensures { result = deep_model0 self }
    
  use seq.Permut
  predicate permutation_of0 (self : Seq.seq t) (o : Seq.seq t) =
    [#"../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37] Permut.permut self o 0 (Seq.length self)
  val permutation_of0 (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of0 self o }
    
  function shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model0 self
  val shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model4 self }
    
  use prelude.Snapshot
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model4 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range usize) : Core_Ops_Range_Range_Type.t_range usize
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv1 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv1 result }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv7 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result
    = Seq.length (shallow_model3 self) }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  let rec cfg selection_sort [#"../selection_sort_generic.rs" 30 0 32 29] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    requires {[#"../selection_sort_generic.rs" 30 42 30 43] inv6 v}
    ensures { [#"../selection_sort_generic.rs" 28 10 28 35] sorted0 (deep_model1 ( ^ v)) }
    ensures { [#"../selection_sort_generic.rs" 29 0 29 36] permutation_of0 (shallow_model2 ( ^ v)) (shallow_model0 v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v;
  var old_v : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var iter : Core_Ops_Range_Range_Type.t_range usize;
  var _7 : Core_Ops_Range_Range_Type.t_range usize;
  var _8 : usize;
  var iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced : Snapshot.snap_ty (Seq.seq usize);
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option usize;
  var _21 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _22 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem : usize;
  var _25 : Snapshot.snap_ty (Seq.seq usize);
  var i : usize;
  var min : usize;
  var iter1 : Core_Ops_Range_Range_Type.t_range usize;
  var _31 : Core_Ops_Range_Range_Type.t_range usize;
  var _32 : usize;
  var _34 : usize;
  var iter_old1 : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced1 : Snapshot.snap_ty (Seq.seq usize);
  var _44 : Core_Option_Option_Type.t_option usize;
  var _45 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _46 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem1 : usize;
  var _49 : Snapshot.snap_ty (Seq.seq usize);
  var j : usize;
  var _52 : bool;
  var _54 : t;
  var _58 : t;
  var _63 : ();
  var _64 : borrowed (slice t);
  var _65 : borrowed (slice t);
  var _66 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../selection_sort_generic.rs" 34 16 34 31] old_v <- ([#"../selection_sort_generic.rs" 34 16 34 31] Snapshot.new v);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_v };
    assume { resolve0 old_v };
    [#"../selection_sort_generic.rs" 38 16 38 23] _8 <- ([#"../selection_sort_generic.rs" 38 16 38 23] len0 ( * v));
    goto BB2
  }
  BB2 {
    [#"../selection_sort_generic.rs" 38 13 38 23] _7 <- Core_Ops_Range_Range_Type.C_Range ([#"../selection_sort_generic.rs" 38 13 38 14] (0 : usize)) _8;
    _8 <- any usize;
    [#"../selection_sort_generic.rs" 35 4 35 43] iter <- ([#"../selection_sort_generic.rs" 35 4 35 43] into_iter0 _7);
    _7 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB3
  }
  BB3 {
    [#"../selection_sort_generic.rs" 35 4 35 43] iter_old <- ([#"../selection_sort_generic.rs" 35 4 35 43] Snapshot.new iter);
    goto BB4
  }
  BB4 {
    [#"../selection_sort_generic.rs" 35 4 35 43] produced <- ([#"../selection_sort_generic.rs" 35 4 35 43] Snapshot.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"../selection_sort_generic.rs" 35 4 35 43] inv1 iter };
    invariant { [#"../selection_sort_generic.rs" 35 4 35 43] produces0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter };
    invariant { [#"../selection_sort_generic.rs" 35 4 35 43] permutation_of0 (shallow_model0 v) (shallow_model1 old_v) };
    invariant { [#"../selection_sort_generic.rs" 36 16 36 63] sorted_range0 (deep_model0 v) 0 (Seq.length (Snapshot.inner produced)) };
    invariant { [#"../selection_sort_generic.rs" 37 16 37 57] partition0 (deep_model0 v) (Seq.length (Snapshot.inner produced)) };
    goto BB7
  }
  BB7 {
    [#"../selection_sort_generic.rs" 35 4 35 43] _22 <- Borrow.borrow_mut iter;
    [#"../selection_sort_generic.rs" 35 4 35 43] iter <-  ^ _22;
    [#"../selection_sort_generic.rs" 35 4 35 43] _21 <- Borrow.borrow_final ( * _22) (Borrow.get_id _22);
    [#"../selection_sort_generic.rs" 35 4 35 43] _22 <- { _22 with current = ( ^ _21) ; };
    [#"../selection_sort_generic.rs" 35 4 35 43] _20 <- ([#"../selection_sort_generic.rs" 35 4 35 43] next0 _21);
    _21 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB8
  }
  BB8 {
    assume { resolve1 _22 };
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB11
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    assert { [@expl:type invariant] inv6 v };
    assume { resolve4 v };
    assert { [#"../selection_sort_generic.rs" 35 4 35 43] false };
    absurd
  }
  BB10 {
    goto BB12
  }
  BB11 {
    assert { [@expl:type invariant] inv6 v };
    assume { resolve4 v };
    [#"../selection_sort_generic.rs" 35 4 35 43] _0 <- ([#"../selection_sort_generic.rs" 35 4 35 43] ());
    return _0
  }
  BB12 {
    [#"../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _20;
    [#"../selection_sort_generic.rs" 35 4 35 43] _25 <- ([#"../selection_sort_generic.rs" 35 4 35 43] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB13
  }
  BB13 {
    [#"../selection_sort_generic.rs" 35 4 35 43] produced <- _25;
    _25 <- any Snapshot.snap_ty (Seq.seq usize);
    [#"../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] i <- __creusot_proc_iter_elem;
    [#"../selection_sort_generic.rs" 39 22 39 23] min <- i;
    [#"../selection_sort_generic.rs" 43 17 43 24] _32 <- i
    + ([#"../selection_sort_generic.rs" 43 22 43 23] (1 : usize));
    [#"../selection_sort_generic.rs" 43 26 43 33] _34 <- ([#"../selection_sort_generic.rs" 43 26 43 33] len0 ( * v));
    goto BB14
  }
  BB14 {
    [#"../selection_sort_generic.rs" 43 17 43 33] _31 <- Core_Ops_Range_Range_Type.C_Range _32 _34;
    _32 <- any usize;
    _34 <- any usize;
    [#"../selection_sort_generic.rs" 41 8 41 121] iter1 <- ([#"../selection_sort_generic.rs" 41 8 41 121] into_iter0 _31);
    _31 <- any Core_Ops_Range_Range_Type.t_range usize;
    goto BB15
  }
  BB15 {
    [#"../selection_sort_generic.rs" 41 8 41 121] iter_old1 <- ([#"../selection_sort_generic.rs" 41 8 41 121] Snapshot.new iter1);
    goto BB16
  }
  BB16 {
    [#"../selection_sort_generic.rs" 41 8 41 121] produced1 <- ([#"../selection_sort_generic.rs" 41 8 41 121] Snapshot.new (Seq.empty ));
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    invariant { [#"../selection_sort_generic.rs" 41 8 41 121] inv1 iter1 };
    invariant { [#"../selection_sort_generic.rs" 41 8 41 121] produces0 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1 };
    invariant { [#"../selection_sort_generic.rs" 41 8 41 121] forall k : int . UIntSize.to_int i <= k
    /\ k < Seq.length (Snapshot.inner produced1) + UIntSize.to_int i + 1
     -> le_log0 (Seq.get (deep_model0 v) (UIntSize.to_int min)) (Seq.get (deep_model0 v) k) };
    invariant { [#"../selection_sort_generic.rs" 42 20 42 64] UIntSize.to_int i <= UIntSize.to_int min
    /\ UIntSize.to_int min < Seq.length (Snapshot.inner produced1) + UIntSize.to_int i + 1 };
    goto BB19
  }
  BB19 {
    [#"../selection_sort_generic.rs" 41 8 41 121] _46 <- Borrow.borrow_mut iter1;
    [#"../selection_sort_generic.rs" 41 8 41 121] iter1 <-  ^ _46;
    [#"../selection_sort_generic.rs" 41 8 41 121] _45 <- Borrow.borrow_final ( * _46) (Borrow.get_id _46);
    [#"../selection_sort_generic.rs" 41 8 41 121] _46 <- { _46 with current = ( ^ _45) ; };
    [#"../selection_sort_generic.rs" 41 8 41 121] _44 <- ([#"../selection_sort_generic.rs" 41 8 41 121] next0 _45);
    _45 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB20
  }
  BB20 {
    assume { resolve1 _46 };
    switch (_44)
      | Core_Option_Option_Type.C_None -> goto BB23
      | Core_Option_Option_Type.C_Some _ -> goto BB22
      end
  }
  BB21 {
    assert { [@expl:type invariant] inv6 v };
    assume { resolve4 v };
    assert { [#"../selection_sort_generic.rs" 41 8 41 121] false };
    absurd
  }
  BB22 {
    goto BB24
  }
  BB23 {
    [#"../selection_sort_generic.rs" 48 8 48 9] _66 <- Borrow.borrow_mut ( * v);
    [#"../selection_sort_generic.rs" 48 8 48 9] v <- { v with current = ( ^ _66) ; };
    assume { inv3 ( ^ _66) };
    [#"../selection_sort_generic.rs" 48 8 48 22] _65 <- ([#"../selection_sort_generic.rs" 48 8 48 22] deref_mut0 _66);
    _66 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB32
  }
  BB24 {
    [#"../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] __creusot_proc_iter_elem1 <- Core_Option_Option_Type.some_0 _44;
    [#"../selection_sort_generic.rs" 41 8 41 121] _49 <- ([#"../selection_sort_generic.rs" 41 8 41 121] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)));
    goto BB25
  }
  BB25 {
    [#"../selection_sort_generic.rs" 41 8 41 121] produced1 <- _49;
    _49 <- any Snapshot.snap_ty (Seq.seq usize);
    [#"../../../../creusot-contracts-proc/src/lib.rs" 643 0 643 51] j <- __creusot_proc_iter_elem1;
    [#"../selection_sort_generic.rs" 44 16 44 19] _54 <- ([#"../selection_sort_generic.rs" 44 16 44 19] index0 ( * v) j);
    goto BB26
  }
  BB26 {
    assert { [@expl:type invariant] inv2 _54 };
    assume { resolve2 _54 };
    [#"../selection_sort_generic.rs" 44 23 44 28] _58 <- ([#"../selection_sort_generic.rs" 44 23 44 28] index0 ( * v) min);
    goto BB27
  }
  BB27 {
    assert { [@expl:type invariant] inv2 _58 };
    assume { resolve2 _58 };
    [#"../selection_sort_generic.rs" 44 15 44 28] _52 <- ([#"../selection_sort_generic.rs" 44 15 44 28] lt0 _54 _58);
    goto BB28
  }
  BB28 {
    switch (_52)
      | False -> goto BB30
      | True -> goto BB29
      end
  }
  BB29 {
    [#"../selection_sort_generic.rs" 45 16 45 23] min <- j;
    [#"../selection_sort_generic.rs" 44 29 46 13] _19 <- ([#"../selection_sort_generic.rs" 44 29 46 13] ());
    goto BB31
  }
  BB30 {
    [#"../selection_sort_generic.rs" 46 13 46 13] _19 <- ([#"../selection_sort_generic.rs" 46 13 46 13] ());
    goto BB31
  }
  BB31 {
    goto BB18
  }
  BB32 {
    [#"../selection_sort_generic.rs" 48 8 48 9] _64 <- Borrow.borrow_final ( * _65) (Borrow.get_id _65);
    [#"../selection_sort_generic.rs" 48 8 48 9] _65 <- { _65 with current = ( ^ _64) ; };
    assume { inv4 ( ^ _64) };
    [#"../selection_sort_generic.rs" 48 8 48 22] _63 <- ([#"../selection_sort_generic.rs" 48 8 48 22] swap0 _64 i min);
    _64 <- any borrowed (slice t);
    goto BB33
  }
  BB33 {
    assert { [@expl:type invariant] inv5 _65 };
    assume { resolve3 _65 };
    assert { [@expl:assertion] [#"../selection_sort_generic.rs" 49 8 50 63] let i = Seq.length (Snapshot.inner produced) in forall k2 : int . forall k1 : int . 0
    <= k1
    /\ k1 < i /\ i <= k2 /\ k2 < Seq.length (deep_model0 v)
     -> le_log0 (Seq.get (deep_model0 v) k1) (Seq.get (deep_model0 v) k2) };
    [#"../selection_sort_generic.rs" 38 24 51 5] _19 <- ([#"../selection_sort_generic.rs" 38 24 51 5] ());
    goto BB6
  }
  
end
