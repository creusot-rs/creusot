
module KnapsackFull_Max
  let%span sknapsack_full0 = "../knapsack_full.rs" 14 10 14 31
  
  use int.MinMax
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  let rec max (a:usize) (b:usize) (return'  (ret:usize))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.lt {a} {b} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : usize = any_l () | & a : usize = a | & b : usize = b | & _4 : bool = any_l () ] 
    [ return' (result:usize)-> {[@expl:postcondition] [%#sknapsack_full0] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
end
module KnapsackFull_Item_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_item 'name =
    | C_Item 'name usize usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_item < 'name > (input:t_item 'name) (ret  (name:'name) (weight:usize) (value:usize))= any
    [ good (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value = input}
      (! ret {name} {weight} {value})
    | bad (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value <> input} {false} any ]
    
  
  function item_weight (self : t_item 'name) : usize =
    match self with
      | C_Item _ a _ -> a
      end
  
  function item_value (self : t_item 'name) : usize =
    match self with
      | C_Item _ _ a -> a
      end
end
module KnapsackFull_SumWeights_Impl
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 25 11 25 33
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 27 21 27 22
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 26 10 26 21
  
  let%span sknapsack_full3 = "../knapsack_full.rs" 24 10 24 19
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use KnapsackFull_Item_Type as Item'0
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq (Item'0.t_item name)) =
    [%#span4] true
  
  predicate inv'0 (_x : Seq.seq (Item'0.t_item name))
  
  axiom inv'0 : forall x : Seq.seq (Item'0.t_item name) . inv'0 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s  : Seq.seq (Item'0.t_item name)
  
  constant i  : int
  
  function sum_weights [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (Item'0.t_item name)) (i : int) : int
  
  goal vc_sum_weights : ([%#sknapsack_full1] inv'0 s)
   -> ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    [%#sknapsack_full2] 0 >= 0
  else
    ((([%#sknapsack_full1] inv'0 s) && ([%#sknapsack_full0] 0 <= i + 1 /\ i + 1 <= Seq.length s))
    /\ 0 <= ([%#sknapsack_full3] Seq.length s - i)
    /\ ([%#sknapsack_full3] Seq.length s - (i + 1)) < ([%#sknapsack_full3] Seq.length s - i))
    /\ (([%#sknapsack_full2] sum_weights s (i + 1) >= 0)
     -> ([%#sknapsack_full2] UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights s (i + 1)
    >= 0))
  )
end
module KnapsackFull_SumValues_Impl
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 36 11 36 33
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 35 10 35 19
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  
  use KnapsackFull_Item_Type as Item'0
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s  : Seq.seq (Item'0.t_item name)
  
  constant i  : int
  
  function sum_values [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (Item'0.t_item name)) (i : int) : int
  
  goal vc_sum_values : ([%#sknapsack_full0] i >= 0 /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    true
  else
    ([%#sknapsack_full0] i + 1 >= 0 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full1] Seq.length s - i)
    /\ ([%#sknapsack_full1] Seq.length s - (i + 1)) < ([%#sknapsack_full1] Seq.length s - i)
  )
end
module KnapsackFull_SubseqRev_Impl
  type t
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 46 11 46 36
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 47 11 47 36
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 45 10 45 12
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s1  : Seq.seq t
  
  constant i1  : int
  
  constant s2  : Seq.seq t
  
  constant i2  : int
  
  predicate subseq_rev [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
  
  goal vc_subseq_rev : ([%#sknapsack_full1] 0 <= i2 /\ i2 <= Seq.length s2)
   -> ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
   -> (if i2 = 0 then
    true
  else
    if i1 < Seq.length s1 then
      if Seq.get s1 i1 = Seq.get s2 (i2 - 1) then
        ((([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 + 1 /\ i1 + 1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2))
        /\ (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
      else
        (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
      
    else
      (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
      && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
      /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
    
  )
end
module KnapsackFull_M_Impl
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 60 11 60 37
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 61 11 61 17
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 66 11 66 16
  
  let%span sknapsack_full3 = "../knapsack_full.rs" 62 10 62 21
  
  let%span sknapsack_full4 = "../knapsack_full.rs" 63 0 65 2
  
  let%span sknapsack_full5 = "../knapsack_full.rs" 59 10 59 11
  
  let%span span6 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../knapsack_full.rs" 36 11 36 33
  
  let%span span8 = "../knapsack_full.rs" 35 10 35 19
  
  let%span span9 = "../knapsack_full.rs" 38 4 41 5
  
  let%span span10 = "../knapsack_full.rs" 25 11 25 33
  
  let%span span11 = "../knapsack_full.rs" 27 21 27 22
  
  let%span span12 = "../knapsack_full.rs" 26 10 26 21
  
  let%span span13 = "../knapsack_full.rs" 24 10 24 19
  
  let%span span14 = "../knapsack_full.rs" 28 4 31 5
  
  let%span span15 = "../knapsack_full.rs" 46 11 46 36
  
  let%span span16 = "../knapsack_full.rs" 47 11 47 36
  
  let%span span17 = "../knapsack_full.rs" 45 10 45 12
  
  let%span span18 = "../knapsack_full.rs" 49 4 55 5
  
  use KnapsackFull_Item_Type as Item'0
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq (Item'0.t_item name)) =
    [%#span6] true
  
  predicate inv'1 (_x : Seq.seq (Item'0.t_item name))
  
  axiom inv'1 : forall x : Seq.seq (Item'0.t_item name) . inv'1 x = true
  
  predicate invariant'0 (self : Seq.seq (Item'0.t_item name)) =
    [%#span6] true
  
  predicate inv'0 (_x : Seq.seq (Item'0.t_item name))
  
  axiom inv'0 : forall x : Seq.seq (Item'0.t_item name) . inv'0 x = true
  
  use int.MinMax
  
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function sum_values'0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (Item'0.t_item name)) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq (Item'0.t_item name), i : int . sum_values'0 s i
  = ([%#span9] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values'0 s (i + 1)
  )
  
  function sum_weights'0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (Item'0.t_item name)) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq (Item'0.t_item name), i : int . sum_weights'0 s i
  = ([%#span14] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq (Item'0.t_item name), i : int . ([%#span10] 0 <= i /\ i <= Seq.length s)
   -> ([%#span11] inv'1 s)  -> ([%#span12] sum_weights'0 s i >= 0)
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (Item'0.t_item name)) (i1 : int) (s2 : Seq.seq (Item'0.t_item name)) (i2 : int)
    
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq (Item'0.t_item name), i1 : int, s2 : Seq.seq (Item'0.t_item name), i2 : int . subseq_rev'0 s1 i1 s2 i2
  = ([%#span18] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  constant items  : Seq.seq (Item'0.t_item name)
  
  constant i  : int
  
  constant w  : int
  
  function m [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (Item'0.t_item name)) (i : int) (w : int) : int
  
  goal vc_m : ([%#sknapsack_full2] inv'0 items)
   -> ([%#sknapsack_full1] 0 <= w)
   -> ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    let result = 0 in ([%#sknapsack_full4] forall s : Seq.seq (Item'0.t_item name), j : int . inv'1 s
     -> 0 <= j /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w
     -> sum_values'0 s j <= result)
    && ([%#sknapsack_full3] result >= 0)
  else
    if UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w then
      ((([%#sknapsack_full2] inv'0 items)
      && ([%#sknapsack_full1] 0 <= w) && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full5] i) /\ ([%#sknapsack_full5] i - 1) < ([%#sknapsack_full5] i))
      /\ (([%#sknapsack_full4] forall s : Seq.seq (Item'0.t_item name), j : int . inv'1 s
       -> 0 <= j /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m items (i - 1) w)
      && ([%#sknapsack_full3] m items (i - 1) w >= 0)
       -> (let result = m items (i
      - 1) w in ([%#sknapsack_full4] forall s : Seq.seq (Item'0.t_item name), j : int . inv'1 s
       -> 0 <= j /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= result)
      && ([%#sknapsack_full3] result >= 0)))
    else
      ((([%#sknapsack_full2] inv'0 items)
      && ([%#sknapsack_full1] 0 <= w) && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full5] i) /\ ([%#sknapsack_full5] i - 1) < ([%#sknapsack_full5] i))
      /\ (([%#sknapsack_full4] forall s : Seq.seq (Item'0.t_item name), j : int . inv'1 s
       -> 0 <= j /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m items (i - 1) w)
      && ([%#sknapsack_full3] m items (i - 1) w >= 0)
       -> ((([%#sknapsack_full2] inv'0 items)
      && ([%#sknapsack_full1] 0 <= w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))))
      && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full5] i) /\ ([%#sknapsack_full5] i - 1) < ([%#sknapsack_full5] i))
      /\ (([%#sknapsack_full4] forall s : Seq.seq (Item'0.t_item name), j : int . inv'1 s
       -> 0 <= j
      /\ j <= Seq.length s
      /\ subseq_rev'0 s j items (i - 1)
      /\ sum_weights'0 s j <= w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))
       -> sum_values'0 s j
      <= m items (i - 1) (w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))))
      && ([%#sknapsack_full3] m items (i - 1) (w
      - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))))
      >= 0)
       -> (let result = MinMax.max (m items (i - 1) w) (m items (i - 1) (w
      - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))))
      + UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i
      - 1)))) in ([%#sknapsack_full4] forall s : Seq.seq (Item'0.t_item name), j : int . inv'1 s
       -> 0 <= j /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= result)
      && ([%#sknapsack_full3] result >= 0))))
    
  )
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rangeinclusive < 'idx > (input:t_rangeinclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted})
    | bad (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module KnapsackFull_Knapsack01Dyn
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 86 51 86 52
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 86 35 86 36
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 86 69 86 70
  
  let%span sknapsack_full3 = "../knapsack_full.rs" 95 13 95 14
  
  let%span sknapsack_full4 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full5 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full6 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full7 = "../knapsack_full.rs" 88 16 88 53
  
  let%span sknapsack_full8 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full9 = "../knapsack_full.rs" 110 17 110 18
  
  let%span sknapsack_full10 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full11 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full12 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full13 = "../knapsack_full.rs" 98 20 98 57
  
  let%span sknapsack_full14 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full15 = "../knapsack_full.rs" 111 27 111 28
  
  let%span sknapsack_full16 = "../knapsack_full.rs" 123 16 123 34
  
  let%span sknapsack_full17 = "../knapsack_full.rs" 124 16 124 43
  
  let%span sknapsack_full18 = "../knapsack_full.rs" 123 4 123 36
  
  let%span sknapsack_full19 = "../knapsack_full.rs" 140 10 140 11
  
  let%span sknapsack_full20 = "../knapsack_full.rs" 141 13 141 14
  
  let%span sknapsack_full21 = "../knapsack_full.rs" 143 26 143 27
  
  let%span sknapsack_full22 = "../knapsack_full.rs" 77 11 77 34
  
  let%span sknapsack_full23 = "../knapsack_full.rs" 78 11 78 33
  
  let%span sknapsack_full24 = "../knapsack_full.rs" 79 0 79 86
  
  let%span sknapsack_full25 = "../knapsack_full.rs" 85 28 85 33
  
  let%span sknapsack_full26 = "../knapsack_full.rs" 80 10 80 60
  
  let%span sknapsack_full27 = "../knapsack_full.rs" 81 10 81 54
  
  let%span sknapsack_full28 = "../knapsack_full.rs" 82 0 84 2
  
  let%span sknapsack_full29 = "../knapsack_full.rs" 85 75 85 91
  
  let%span span30 = "" 0 0 0 0
  
  let%span span31 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span32 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span33 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span34 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span35 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span36 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span37 = "../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24
  
  let%span span38 = "../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88
  
  let%span span39 = "../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63
  
  let%span span40 = "../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43
  
  let%span span41 = "../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5
  
  let%span span42 = "../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9
  
  let%span span43 = "../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32
  
  let%span span44 = "../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32
  
  let%span span45 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23
  
  let%span span46 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33
  
  let%span span47 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53
  
  let%span span48 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63
  
  let%span span49 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83
  
  let%span span50 = "../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42
  
  let%span span51 = "../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  
  let%span span52 = "../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25
  
  let%span span53 = "../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45
  
  let%span span54 = "../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10
  
  let%span span55 = "../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span56 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span57 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span58 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span59 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span60 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span61 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span62 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span63 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span64 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span65 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span66 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span67 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span68 = "../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  
  let%span span69 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "" 0 0 0 0
  
  let%span span72 = "../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span73 = "../knapsack_full.rs" 46 11 46 36
  
  let%span span74 = "../knapsack_full.rs" 47 11 47 36
  
  let%span span75 = "../knapsack_full.rs" 45 10 45 12
  
  let%span span76 = "../knapsack_full.rs" 49 4 55 5
  
  let%span span77 = "../knapsack_full.rs" 36 11 36 33
  
  let%span span78 = "../knapsack_full.rs" 35 10 35 19
  
  let%span span79 = "../knapsack_full.rs" 38 4 41 5
  
  let%span span80 = "../knapsack_full.rs" 25 11 25 33
  
  let%span span81 = "../knapsack_full.rs" 27 21 27 22
  
  let%span span82 = "../knapsack_full.rs" 26 10 26 21
  
  let%span span83 = "../knapsack_full.rs" 24 10 24 19
  
  let%span span84 = "../knapsack_full.rs" 28 4 31 5
  
  let%span span85 = "../../../../creusot-contracts/src/std/vec.rs" 73 26 73 44
  
  let%span span86 = "" 0 0 0 0
  
  let%span span87 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span88 = "../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96
  
  let%span span89 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  
  let%span span90 = "../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37
  
  let%span span91 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "" 0 0 0 0
  
  let%span span94 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span95 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span96 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span97 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span98 = "" 0 0 0 0
  
  let%span span99 = "../knapsack_full.rs" 14 10 14 31
  
  let%span span100 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span101 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "" 0 0 0 0
  
  let%span span104 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span105 = "" 0 0 0 0
  
  let%span span106 = "../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57
  
  let%span span107 = "" 0 0 0 0
  
  let%span span108 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span109 = "" 0 0 0 0
  
  let%span span110 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span111 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span112 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span113 = "" 0 0 0 0
  
  let%span span114 = "" 0 0 0 0
  
  let%span span115 = "" 0 0 0 0
  
  let%span span116 = "" 0 0 0 0
  
  let%span span117 = "../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53
  
  let%span span118 = "../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49
  
  let%span span119 = "../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93
  
  let%span span120 = "" 0 0 0 0
  
  let%span span121 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span122 = "" 0 0 0 0
  
  let%span span123 = "" 0 0 0 0
  
  let%span span124 = "../knapsack_full.rs" 60 11 60 37
  
  let%span span125 = "../knapsack_full.rs" 61 11 61 17
  
  let%span span126 = "../knapsack_full.rs" 66 11 66 16
  
  let%span span127 = "../knapsack_full.rs" 62 10 62 21
  
  let%span span128 = "../knapsack_full.rs" 63 0 65 2
  
  let%span span129 = "../knapsack_full.rs" 59 10 59 11
  
  let%span span130 = "../knapsack_full.rs" 67 4 74 5
  
  let%span span131 = "" 0 0 0 0
  
  let%span span132 = "../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span133 = "../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span134 = "" 0 0 0 0
  
  let%span span135 = "" 0 0 0 0
  
  let%span span136 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use KnapsackFull_Item_Type as Item'0
  
  use seq.Seq
  
  predicate inv'11 (_x : Seq.seq (Item'0.t_item name))
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'1 : usize = [%#span30] (18446744073709551615 : usize)
  
  use seq.Seq
  
  predicate inv'22 (_x : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))
  
  function shallow_model'4 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) : Seq.seq (Item'0.t_item name)
  
  axiom shallow_model'4_spec : forall self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) . ([%#span31] inv'22 self)
   -> ([%#span33] inv'11 (shallow_model'4 self))
  && ([%#span32] Seq.length (shallow_model'4 self) <= UIntSize.to_int (max'1 : usize))
  
  predicate invariant'22 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) =
    [%#span34] inv'11 (shallow_model'4 self)
  
  axiom inv'22 : forall x : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) . inv'22 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'21 (self : borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))) =
    [%#span35] true
  
  predicate inv'21 (_x : borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)))
  
  axiom inv'21 : forall x : borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) . inv'21 x = true
  
  predicate invariant'20 (self : borrowed usize) =
    [%#span35] true
  
  predicate inv'20 (_x : borrowed usize)
  
  axiom inv'20 : forall x : borrowed usize . inv'20 x = true
  
  predicate invariant'19 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span35] true
  
  predicate inv'19 (_x : borrowed (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'19 : forall x : borrowed (Vec'0.t_vec usize (Global'0.t_global)) . inv'19 x = true
  
  predicate invariant'18 (self : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) =
    [%#span35] true
  
  predicate inv'18 (_x : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)))
  
  axiom inv'18 : forall x : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) . inv'18 x
  = true
  
  predicate invariant'17 (self : usize) =
    [%#span35] true
  
  predicate inv'17 (_x : usize)
  
  axiom inv'17 : forall x : usize . inv'17 x = true
  
  predicate invariant'16 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span35] true
  
  predicate inv'16 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  axiom inv'16 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'16 x = true
  
  predicate invariant'15 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span35] true
  
  predicate inv'15 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  axiom inv'15 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'15 x = true
  
  use Core_Ops_Range_RangeInclusive_Type as RangeInclusive'0
  
  predicate invariant'14 (self : borrowed (RangeInclusive'0.t_rangeinclusive usize)) =
    [%#span35] true
  
  predicate inv'14 (_x : borrowed (RangeInclusive'0.t_rangeinclusive usize))
  
  axiom inv'14 : forall x : borrowed (RangeInclusive'0.t_rangeinclusive usize) . inv'14 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'13 (self : Option'0.t_option usize) =
    [%#span35] true
  
  predicate inv'13 (_x : Option'0.t_option usize)
  
  axiom inv'13 : forall x : Option'0.t_option usize . inv'13 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  predicate invariant'12 (self : borrowed (Range'0.t_range usize)) =
    [%#span35] true
  
  predicate inv'12 (_x : borrowed (Range'0.t_range usize))
  
  axiom inv'12 : forall x : borrowed (Range'0.t_range usize) . inv'12 x = true
  
  predicate invariant'11 (self : Seq.seq (Item'0.t_item name)) =
    [%#span35] true
  
  axiom inv'11 : forall x : Seq.seq (Item'0.t_item name) . inv'11 x = true
  
  predicate invariant'10 (self : Seq.seq usize) =
    [%#span35] true
  
  predicate inv'10 (_x : Seq.seq usize)
  
  axiom inv'10 : forall x : Seq.seq usize . inv'10 x = true
  
  predicate invariant'9 (self : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span35] true
  
  predicate inv'9 (_x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
  
  axiom inv'9 : forall x : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)) . inv'9 x = true
  
  use seq.Seq
  
  predicate inv'8 (_x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))
  
  function shallow_model'1 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . ([%#span31] inv'8 self)
   -> ([%#span33] inv'9 (shallow_model'1 self))
  && ([%#span32] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'1 : usize))
  
  predicate invariant'8 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span34] inv'9 (shallow_model'1 self)
  
  axiom inv'8 : forall x : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) . inv'8 x = true
  
  use seq.Seq
  
  predicate inv'7 (_x : Vec'0.t_vec usize (Global'0.t_global))
  
  function shallow_model'2 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_vec usize (Global'0.t_global) . ([%#span31] inv'7 self)
   -> ([%#span33] inv'10 (shallow_model'2 self))
  && ([%#span32] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'1 : usize))
  
  predicate invariant'7 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span34] inv'10 (shallow_model'2 self)
  
  axiom inv'7 : forall x : Vec'0.t_vec usize (Global'0.t_global) . inv'7 x = true
  
  predicate invariant'6 (self : usize) =
    [%#span35] true
  
  predicate inv'6 (_x : usize)
  
  axiom inv'6 : forall x : usize . inv'6 x = true
  
  predicate invariant'5 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) =
    [%#span35] true
  
  predicate inv'5 (_x : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))
  
  axiom inv'5 : forall x : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) . inv'5 x = true
  
  predicate inv'3 (_x : Seq.seq (Item'0.t_item name))
  
  use seq.Seq
  
  predicate inv'4 (_x : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))
  
  function shallow_model'3 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) : Seq.seq (Item'0.t_item name)
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) . ([%#span31] inv'4 self)
   -> ([%#span33] inv'3 (shallow_model'3 self))
  && ([%#span32] Seq.length (shallow_model'3 self) <= UIntSize.to_int (max'1 : usize))
  
  predicate invariant'4 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) =
    [%#span34] inv'3 (shallow_model'3 self)
  
  axiom inv'4 : forall x : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) . inv'4 x = true
  
  predicate invariant'3 (self : Seq.seq (Item'0.t_item name)) =
    [%#span35] true
  
  axiom inv'3 : forall x : Seq.seq (Item'0.t_item name) . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_x : RangeInclusive'0.t_rangeinclusive usize)
  
  use prelude.prelude.Int
  
  function start_log'0 (self : RangeInclusive'0.t_rangeinclusive usize) : usize
  
  function deep_model'0 (self : usize) : int =
    [%#span36] UIntSize.to_int self
  
  use seq.Seq
  
  function end_log'0 (self : RangeInclusive'0.t_rangeinclusive usize) : usize
  
  use int.Int
  
  function is_empty_log'0 (self : RangeInclusive'0.t_rangeinclusive usize) : bool
  
  axiom is_empty_log'0_spec : forall self : RangeInclusive'0.t_rangeinclusive usize . ([%#span37] inv'2 self)
   -> ([%#span38] not is_empty_log'0 self  -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self))
  
  function range_inclusive_len'0 (r : RangeInclusive'0.t_rangeinclusive usize) : int =
    [%#span41] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : RangeInclusive'0.t_rangeinclusive usize . ([%#span39] inv'2 r)
   -> ([%#span40] is_empty_log'0 r = (range_inclusive_len'0 r = 0))
  
  predicate produces'1 (self : RangeInclusive'0.t_rangeinclusive usize) (visited : Seq.seq usize) (o : RangeInclusive'0.t_rangeinclusive usize)
    
   =
    [%#span42] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'1 (a : RangeInclusive'0.t_rangeinclusive usize) (ab : Seq.seq usize) (b : RangeInclusive'0.t_rangeinclusive usize) (bc : Seq.seq usize) (c : RangeInclusive'0.t_rangeinclusive usize) : ()
    
   =
    [%#span51] ()
  
  axiom produces_trans'1_spec : forall a : RangeInclusive'0.t_rangeinclusive usize, ab : Seq.seq usize, b : RangeInclusive'0.t_rangeinclusive usize, bc : Seq.seq usize, c : RangeInclusive'0.t_rangeinclusive usize . ([%#span43] produces'1 a ab b)
   -> ([%#span44] produces'1 b bc c)
   -> ([%#span45] inv'2 a)
   -> ([%#span46] inv'10 ab)
   -> ([%#span47] inv'2 b)
   -> ([%#span48] inv'10 bc)  -> ([%#span49] inv'2 c)  -> ([%#span50] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : RangeInclusive'0.t_rangeinclusive usize) : () =
    [%#span54] ()
  
  axiom produces_refl'1_spec : forall self : RangeInclusive'0.t_rangeinclusive usize . ([%#span52] inv'2 self)
   -> ([%#span53] produces'1 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'2 (self : RangeInclusive'0.t_rangeinclusive usize) =
    [%#span35] true
  
  axiom inv'2 : forall x : RangeInclusive'0.t_rangeinclusive usize . inv'2 x = true
  
  predicate invariant'1 (self : Item'0.t_item name) =
    [%#span35] true
  
  predicate inv'1 (_x : Item'0.t_item name)
  
  axiom inv'1 : forall x : Item'0.t_item name . inv'1 x = true
  
  predicate inv'0 (_x : Range'0.t_range usize)
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq.seq usize) (o : Range'0.t_range usize) =
    [%#span55] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq.seq usize) (b : Range'0.t_range usize) (bc : Seq.seq usize) (c : Range'0.t_range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq.seq usize, b : Range'0.t_range usize, bc : Seq.seq usize, c : Range'0.t_range usize . ([%#span56] produces'0 a ab b)
   -> ([%#span57] produces'0 b bc c)
   -> ([%#span58] inv'0 a)
   -> ([%#span59] inv'10 ab)
   -> ([%#span60] inv'0 b)
   -> ([%#span61] inv'10 bc)  -> ([%#span62] inv'0 c)  -> ([%#span63] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span64] inv'0 self)
   -> ([%#span65] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'0 (self : Range'0.t_range usize) =
    [%#span35] true
  
  axiom inv'0 : forall x : Range'0.t_range usize . inv'0 x = true
  
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) (ix : int) : Item'0.t_item name
    
   =
    [%#span66] Seq.get (shallow_model'4 self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'6 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) =
    [%#span67] true
  
  predicate resolve'8 (self : usize) =
    [%#span67] true
  
  function index_logic'3 [@inline:trivial] (self : Vec'0.t_vec usize (Global'0.t_global)) (ix : int) : usize =
    [%#span66] Seq.get (shallow_model'2 self) ix
  
  predicate resolve'7 (self : Vec'0.t_vec usize (Global'0.t_global)) =
    [%#span68] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 self)  -> resolve'8 (index_logic'3 self i)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (ix : int) : Vec'0.t_vec usize (Global'0.t_global)
    
   =
    [%#span66] Seq.get (shallow_model'1 self) ix
  
  predicate resolve'5 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) =
    [%#span68] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 self)  -> resolve'7 (index_logic'0 self i)
  
  use seq.Seq
  
  function shallow_model'9 (self : borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))) : Seq.seq (Item'0.t_item name)
    
   =
    [%#span69] shallow_model'3 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))) (value:Item'0.t_item name) (return'  (ret:()))= {[@expl:precondition] [%#span71] inv'1 value}
    {[@expl:precondition] [%#span70] inv'21 self}
    any
    [ return' (result:())-> {[%#span72] shallow_model'3 self.final = Seq.snoc (shallow_model'9 self) value}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (Item'0.t_item name)) (i1 : int) (s2 : Seq.seq (Item'0.t_item name)) (i2 : int)
    
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq (Item'0.t_item name), i1 : int, s2 : Seq.seq (Item'0.t_item name), i2 : int . subseq_rev'0 s1 i1 s2 i2
  = ([%#span76] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  function sum_values'0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (Item'0.t_item name)) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq (Item'0.t_item name), i : int . sum_values'0 s i
  = ([%#span79] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values'0 s (i + 1)
  )
  
  function sum_weights'0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (Item'0.t_item name)) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq (Item'0.t_item name), i : int . sum_weights'0 s i
  = ([%#span84] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq (Item'0.t_item name), i : int . ([%#span80] 0 <= i /\ i <= Seq.length s)
   -> ([%#span81] inv'3 s)  -> ([%#span82] sum_weights'0 s i >= 0)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) (ix : int) : Item'0.t_item name
    
   =
    [%#span66] Seq.get (shallow_model'3 self) ix
  
  let rec with_capacity'0 (capacity:usize) (return'  (ret:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)))= any
    [ return' (result:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))-> {[%#span86] inv'4 result}
      {[%#span85] Seq.length (shallow_model'3 result) = 0}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span87] self.final = self.current
  
  predicate resolve'3 (self : borrowed usize) =
    [%#span87] self.final = self.current
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span88] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span89] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span90] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'8 (self : borrowed (Vec'0.t_vec usize (Global'0.t_global))) : Seq.seq usize =
    [%#span69] shallow_model'2 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_vec usize (Global'0.t_global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span93] inv'6 index}
    {[@expl:precondition] [%#span92] inv'19 self}
    {[@expl:precondition] [%#span91] in_bounds'2 index (shallow_model'8 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span98] inv'20 result}
      {[%#span97] Seq.length (shallow_model'2 self.final) = Seq.length (shallow_model'8 self)}
      {[%#span96] resolve_elswhere'1 index (shallow_model'8 self) (shallow_model'2 self.final)}
      {[%#span95] has_value'2 index (shallow_model'2 self.final) result.final}
      {[%#span94] has_value'2 index (shallow_model'8 self) result.current}
      (! return' {result}) ]
    
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (fin : Seq.seq (Vec'0.t_vec usize (Global'0.t_global)))
    
   =
    [%#span88] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) (out : Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span89] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))) =
    [%#span90] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'7 (self : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span69] shallow_model'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_vec usize (Global'0.t_global))))= {[@expl:precondition] [%#span93] inv'6 index}
    {[@expl:precondition] [%#span92] inv'18 self}
    {[@expl:precondition] [%#span91] in_bounds'1 index (shallow_model'7 self)}
    any
    [ return' (result:borrowed (Vec'0.t_vec usize (Global'0.t_global)))-> {[%#span98] inv'19 result}
      {[%#span97] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'7 self)}
      {[%#span96] resolve_elswhere'0 index (shallow_model'7 self) (shallow_model'1 self.final)}
      {[%#span95] has_value'1 index (shallow_model'1 self.final) result.final}
      {[%#span94] has_value'1 index (shallow_model'7 self) result.current}
      (! return' {result}) ]
    
  
  use int.MinMax
  
  let rec max'0 (a:usize) (b:usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {[%#span99] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'6 (self : Vec'0.t_vec usize (Global'0.t_global)) : Seq.seq usize =
    [%#span100] shallow_model'2 self
  
  let rec index'2 (self:Vec'0.t_vec usize (Global'0.t_global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span103] inv'6 index}
    {[@expl:precondition] [%#span102] inv'16 self}
    {[@expl:precondition] [%#span101] in_bounds'2 index (shallow_model'6 self)}
    any
    [ return' (result:usize)-> {[%#span105] inv'17 result}
      {[%#span104] has_value'2 index (shallow_model'6 self) result}
      (! return' {result}) ]
    
  
  function shallow_model'5 (self : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) : Seq.seq (Vec'0.t_vec usize (Global'0.t_global))
    
   =
    [%#span100] shallow_model'1 self
  
  let rec index'1 (self:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) (index:usize) (return'  (ret:Vec'0.t_vec usize (Global'0.t_global)))= {[@expl:precondition] [%#span103] inv'6 index}
    {[@expl:precondition] [%#span102] inv'15 self}
    {[@expl:precondition] [%#span101] in_bounds'1 index (shallow_model'5 self)}
    any
    [ return' (result:Vec'0.t_vec usize (Global'0.t_global))-> {[%#span105] inv'16 result}
      {[%#span104] has_value'1 index (shallow_model'5 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (RangeInclusive'0.t_rangeinclusive usize)) =
    [%#span87] self.final = self.current
  
  use seq.Seq
  
  predicate completed'1 (self : borrowed (RangeInclusive'0.t_rangeinclusive usize)) =
    [%#span106] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'1 (self:borrowed (RangeInclusive'0.t_rangeinclusive usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span107] inv'14 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span109] inv'13 result}
      {[%#span108] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'1 (self : RangeInclusive'0.t_rangeinclusive usize) (res : RangeInclusive'0.t_rangeinclusive usize)
    
   =
    [%#span110] self = res
  
  predicate into_iter_pre'1 (self : RangeInclusive'0.t_rangeinclusive usize) =
    [%#span111] true
  
  let rec into_iter'1 (self:RangeInclusive'0.t_rangeinclusive usize) (return'  (ret:RangeInclusive'0.t_rangeinclusive usize))= {[@expl:precondition] [%#span113] inv'2 self}
    {[@expl:precondition] [%#span112] into_iter_pre'1 self}
    any
    [ return' (result:RangeInclusive'0.t_rangeinclusive usize)-> {[%#span114] inv'2 result}
      {[%#span112] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  let rec new'0 (start:usize) (end':usize) (return'  (ret:RangeInclusive'0.t_rangeinclusive usize))= {[@expl:precondition] [%#span116] inv'6 end'}
    {[@expl:precondition] [%#span115] inv'6 start}
    any
    [ return' (result:RangeInclusive'0.t_rangeinclusive usize)-> {[%#span120] inv'2 result}
      {[%#span119] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#span118] end_log'0 result = end'}
      {[%#span117] start_log'0 result = start}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : Item'0.t_item name) =
    [%#span67] true
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_item name)) (out : Item'0.t_item name)
   =
    [%#span89] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_item name)) =
    [%#span90] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) : Seq.seq (Item'0.t_item name)
   =
    [%#span100] shallow_model'4 self
  
  let rec index'0 (self:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) (index:usize) (return'  (ret:Item'0.t_item name))= {[@expl:precondition] [%#span103] inv'6 index}
    {[@expl:precondition] [%#span102] inv'5 self}
    {[@expl:precondition] [%#span101] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:Item'0.t_item name)-> {[%#span105] inv'1 result}
      {[%#span104] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span87] self.final = self.current
  
  predicate completed'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span121] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self.current)
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span122] inv'12 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span123] inv'13 result}
      {[%#span108] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  function m'0 [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (Item'0.t_item name)) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq (Item'0.t_item name), i : int, w : int . m'0 items i w
  = ([%#span130] if i = 0 then
    0
  else
    if UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))))
      + UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i - 1))))
    
  )
  
  axiom m'0_spec : forall items : Seq.seq (Item'0.t_item name), i : int, w : int . ([%#span124] 0 <= i
  /\ i <= Seq.length items)
   -> ([%#span125] 0 <= w)
   -> ([%#span126] inv'11 items)
   -> ([%#span128] forall s : Seq.seq (Item'0.t_item name), j : int . inv'3 s
   -> 0 <= j /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w
   -> sum_values'0 s j <= m'0 items i w)
  && ([%#span127] m'0 items i w >= 0)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span110] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span111] true
  
  let rec into_iter'0 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span113] inv'0 self}
    {[@expl:precondition] [%#span112] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span114] inv'0 result}
      {[%#span112] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec from_elem'1 (elem:Vec'0.t_vec usize (Global'0.t_global)) (n:usize) (return'  (ret:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)))= {[@expl:precondition] [%#span131] inv'7 elem}
    any
    [ return' (result:Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))-> {[%#span134] inv'8 result}
      {[%#span133] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span132] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) (return'  (ret:usize))= {[@expl:precondition] [%#span135] inv'5 self}
    any
    [ return' (result:usize)-> {[%#span136] UIntSize.to_int result = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_vec usize (Global'0.t_global)))= {[@expl:precondition] [%#span131] inv'6 elem}
    any
    [ return' (result:Vec'0.t_vec usize (Global'0.t_global))-> {[%#span134] inv'7 result}
      {[%#span133] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'3 result i = elem}
      {[%#span132] Seq.length (shallow_model'2 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec knapsack01_dyn (items:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) (max_weight:usize) (return'  (ret:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)))= {[%#sknapsack_full25] inv'5 items}
    {[%#sknapsack_full24] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 items)
     -> UIntSize.to_int (KnapsackFull_Item_Type.item_value (index_logic'2 items i)) <= 10000000}
    {[%#sknapsack_full23] UIntSize.to_int max_weight < 10000000}
    {[%#sknapsack_full22] Seq.length (shallow_model'0 items) < 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {max_weight} {[%#sknapsack_full0] (1 : usize)} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack_full1] (0 : usize)} {_11}
          (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.add {_14} {[%#sknapsack_full2] (1 : usize)}
          (fun (_ret':usize) ->  [ &_13 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_14 <- _any ] s1) ] ))
      | s1 = from_elem'1 {_10} {_13}
          (fun (_ret':Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) ->
             [ &best_value <- _ret' ] 
            s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_19 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_18 <- Range'0.C_Range ([%#sknapsack_full3] (0 : usize)) _19 ] 
        (any [ any_ (_any:usize)-> (!  [ &_19 <- _any ] s1) ] )
      | s1 = into_iter'0 {_18} (fun (_ret':Range'0.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &iter_old <- [%#sknapsack_full4] Snapshot.new iter ] s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 =  [ &produced <- [%#sknapsack_full5] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb12
      [ bb12 = {[@expl:loop invariant] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (shallow_model'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        {[@expl:loop invariant] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (Snapshot.inner produced) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww)
        = m'0 (shallow_model'0 items) ii ww}
        {[@expl:loop invariant] [%#sknapsack_full6] forall i : int . 0 <= i
        /\ i < Seq.length (shallow_model'1 best_value)
         -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model'2 (index_logic'0 best_value i))}
        {[@expl:loop invariant] [%#sknapsack_full7] Seq.length (shallow_model'0 items) + 1
        = Seq.length (shallow_model'1 best_value)}
        {[@expl:loop invariant] [%#sknapsack_full6] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sknapsack_full6] inv'0 iter}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_34 <- _ret' ]  [ &iter <- _34.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> {_34.current} {Borrow.get_id _34}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_33 <- _ret' ] 
                 [ &_34 <- { _34 with current = _33.final ; } ] 
                s2)
          | s2 = next'0 {_33} (fun (_ret':Option'0.t_option usize) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'0 _34}- s1
          | s1 = any
            [ br0 -> {_32 = Option'0.C_None } (! bb17) | br1 (a:usize)-> {_32 = Option'0.C_Some a} (! bb16) ]
             ]
          
        | bb16 = bb18
        | bb18 = s0
          [ s0 = Option'0.some <usize> {_32} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_37 <- [%#sknapsack_full8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _37 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_37 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = index'0 {items} {i} (fun (_ret':Item'0.t_item name) ->  [ &_41 <- _ret' ] s3)
          | s3 = bb20 ]
          
        | bb20 = s0
          [ s0 =  [ &it <- _41 ] s1
          | s1 = {[@expl:type invariant] inv'1 _41} s2
          | s2 = -{resolve'1 _41}- s3
          | s3 = new'0 {[%#sknapsack_full9] (0 : usize)} {max_weight}
              (fun (_ret':RangeInclusive'0.t_rangeinclusive usize) ->  [ &_45 <- _ret' ] s4)
          | s4 = bb21 ]
          
        | bb21 = s0
          [ s0 = into_iter'1 {_45} (fun (_ret':RangeInclusive'0.t_rangeinclusive usize) ->  [ &iter1 <- _ret' ] s1)
          | s1 = bb22 ]
          
        | bb22 = s0 [ s0 =  [ &iter_old1 <- [%#sknapsack_full10] Snapshot.new iter1 ] s1 | s1 = bb23 ] 
        | bb23 = s0
          [ s0 =  [ &produced1 <- [%#sknapsack_full11] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb24 ]
          
        | bb24 = bb25
        | bb25 = bb26
        | bb26 = bb27
        | bb27 = bb28
        | bb28 = bb29
        | bb29 = bb30
        | bb30 = bb30
          [ bb30 = {[@expl:loop invariant] [%#sknapsack_full12] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (shallow_model'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            {[@expl:loop invariant] [%#sknapsack_full12] forall ww : int . 0 <= ww
            /\ ww <= Seq.length (Snapshot.inner produced1) - 1
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value (UIntSize.to_int i + 1))) ww)
            = m'0 (shallow_model'0 items) (UIntSize.to_int i + 1) ww}
            {[@expl:loop invariant] [%#sknapsack_full12] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww)
            = m'0 (shallow_model'0 items) ii ww}
            {[@expl:loop invariant] [%#sknapsack_full12] forall i : int . 0 <= i
            /\ i < Seq.length (shallow_model'1 best_value)
             -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model'2 (index_logic'0 best_value i))}
            {[@expl:loop invariant] [%#sknapsack_full13] Seq.length (shallow_model'0 items) + 1
            = Seq.length (shallow_model'1 best_value)}
            {[@expl:loop invariant] [%#sknapsack_full12] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#sknapsack_full12] inv'2 iter1}
            (! s0) [ s0 = bb31 ] 
            [ bb31 = s0
              [ s0 = Borrow.borrow_mut <RangeInclusive'0.t_rangeinclusive usize> {iter1}
                  (fun (_ret':borrowed (RangeInclusive'0.t_rangeinclusive usize)) ->
                     [ &_60 <- _ret' ] 
                     [ &iter1 <- _60.final ] 
                    s1)
              | s1 = Borrow.borrow_final <RangeInclusive'0.t_rangeinclusive usize> {_60.current} {Borrow.get_id _60}
                  (fun (_ret':borrowed (RangeInclusive'0.t_rangeinclusive usize)) ->
                     [ &_59 <- _ret' ] 
                     [ &_60 <- { _60 with current = _59.final ; } ] 
                    s2)
              | s2 = next'1 {_59} (fun (_ret':Option'0.t_option usize) ->  [ &_58 <- _ret' ] s3)
              | s3 = bb32 ]
              
            | bb32 = s0
              [ s0 = -{resolve'2 _60}- s1
              | s1 = any
                [ br0 -> {_58 = Option'0.C_None } (! bb35) | br1 (a:usize)-> {_58 = Option'0.C_Some a} (! bb34) ]
                 ]
              
            | bb34 = bb36
            | bb36 = s0
              [ s0 = Option'0.some <usize> {_58} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_63 <- [%#sknapsack_full14] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb37 ]
              
            | bb37 = s0
              [ s0 =  [ &produced1 <- _63 ] 
                (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_63 <- _any ] s1) ] )
              | s1 =  [ &w <- __creusot_proc_iter_elem1 ] s2
              | s2 = Item'0.t_item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.gt {rweight'0} {w} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s3))
              | s3 = any [ br0 -> {_67 = false} (! bb41) | br1 -> {_67} (! bb38) ]  ]
              
            | bb38 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_72 <- _ret' ] s1)
              | s1 = bb39 ]
              
            | bb39 = s0 [ s0 = index'2 {_72} {w} (fun (_ret':usize) ->  [ &_70 <- _ret' ] s1) | s1 = bb40 ] 
            | bb40 = s0 [ s0 =  [ &_66 <- _70 ] s1 | s1 = bb47 ] 
            | bb41 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_79 <- _ret' ] s1)
              | s1 = bb42 ]
              
            | bb42 = s0 [ s0 = index'2 {_79} {w} (fun (_ret':usize) ->  [ &_77 <- _ret' ] s1) | s1 = bb43 ] 
            | bb43 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_87 <- _ret' ] s1)
              | s1 = bb44 ]
              
            | bb44 = s0
              [ s0 = Item'0.t_item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.sub {w} {rweight'0} (fun (_ret':usize) ->  [ &_90 <- _ret' ] s1))
              | s1 = index'2 {_87} {_90} (fun (_ret':usize) ->  [ &_85 <- _ret' ] s2)
              | s2 = bb45 ]
              
            | bb45 = s0
              [ s0 = Item'0.t_item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.add {_85} {rvalue'0} (fun (_ret':usize) ->  [ &_83 <- _ret' ] s1))
              | s1 = max'0 {_77} {_83} (fun (_ret':usize) ->  [ &_66 <- _ret' ] s2)
              | s2 = bb46 ]
              
            | bb46 = bb47
            | bb47 = s0
              [ s0 = Borrow.borrow_mut
                  <Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)>
                  {best_value}
                  (fun (_ret':borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global))) ->
                     [ &_97 <- _ret' ] 
                     [ &best_value <- _97.final ] 
                    s1)
              | s1 = UIntSize.add {i} {[%#sknapsack_full15] (1 : usize)} (fun (_ret':usize) ->  [ &_98 <- _ret' ] s2)
              | s2 = index_mut'0 {_97} {_98}
                  (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->  [ &_96 <- _ret' ] s3)
              | s3 = bb48 ]
              
            | bb48 = s0
              [ s0 = Borrow.borrow_final <Vec'0.t_vec usize (Global'0.t_global)> {_96.current} {Borrow.get_id _96}
                  (fun (_ret':borrowed (Vec'0.t_vec usize (Global'0.t_global))) ->
                     [ &_95 <- _ret' ] 
                     [ &_96 <- { _96 with current = _95.final ; } ] 
                    s1)
              | s1 = index_mut'1 {_95} {w} (fun (_ret':borrowed usize) ->  [ &_94 <- _ret' ] s2)
              | s2 = bb49 ]
              
            | bb49 = s0
              [ s0 =  [ &_94 <- { _94 with current = _66 ; } ] (any [ any_ (_any:usize)-> (!  [ &_66 <- _any ] s1) ] )
              | s1 = -{resolve'3 _94}- s2
              | s2 = -{resolve'4 _96}- s3
              | s3 = bb30 ]
               ]
             ]
          
        | bb35 = s0 [ s0 = {[@expl:type invariant] inv'1 it} s1 | s1 = -{resolve'1 it}- s2 | s2 = bb12 ]  ]
         ]
      
    | bb17 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_104 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = s0
      [ s0 = with_capacity'0 {_104}
          (fun (_ret':Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) ->  [ &result <- _ret' ] s1)
      | s1 = bb51 ]
      
    | bb51 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':usize) ->  [ &j <- _ret' ] s2)
      | s2 = bb52 ]
      
    | bb52 = bb53
    | bb53 = bb54
    | bb54 = bb55
    | bb55 = bb56
    | bb56 = bb56
      [ bb56 = {[@expl:loop invariant] [%#sknapsack_full18] forall r : Seq.seq (Item'0.t_item name) . inv'3 r
         -> Seq.length (shallow_model'3 result) <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ subseq_rev'0 r (Seq.length (shallow_model'3 result)) (shallow_model'0 items) (UIntSize.to_int j)
         -> subseq_rev'0 r 0 (shallow_model'0 items) (Seq.length (shallow_model'0 items))}
        {[@expl:loop invariant] [%#sknapsack_full18] forall r : Seq.seq (Item'0.t_item name) . inv'3 r
         -> Seq.length (shallow_model'3 result) <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_values'0 r (Seq.length (shallow_model'3 result))
        = m'0 (shallow_model'0 items) (UIntSize.to_int j) (UIntSize.to_int left_weight)
         -> sum_values'0 r 0
        = m'0 (shallow_model'0 items) (Seq.length (shallow_model'0 items)) (UIntSize.to_int max_weight)}
        {[@expl:loop invariant] [%#sknapsack_full18] forall r : Seq.seq (Item'0.t_item name) . inv'3 r
         -> Seq.length (shallow_model'3 result) <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_weights'0 r (Seq.length (shallow_model'3 result)) <= UIntSize.to_int left_weight
         -> sum_weights'0 r 0 <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack_full17] UIntSize.to_int left_weight <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack_full16] UIntSize.to_int j <= Seq.length (shallow_model'0 items)}
        (! s0) [ s0 = bb57 ] 
        [ bb57 = s0
          [ s0 = UIntSize.lt {[%#sknapsack_full19] (0 : usize)} {j} (fun (_ret':bool) ->  [ &_115 <- _ret' ] s1)
          | s1 = any [ br0 -> {_115 = false} (! bb68) | br1 -> {_115} (! bb58) ]  ]
          
        | bb58 = s0
          [ s0 = UIntSize.sub {j} {[%#sknapsack_full20] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':Item'0.t_item name) ->  [ &_118 <- _ret' ] s2)
          | s2 = bb59 ]
          
        | bb59 = s0
          [ s0 =  [ &it1 <- _118 ] s1
          | s1 = {[@expl:type invariant] inv'1 _118} s2
          | s2 = -{resolve'1 _118}- s3
          | s3 = UIntSize.add {j} {[%#sknapsack_full21] (1 : usize)} (fun (_ret':usize) ->  [ &_127 <- _ret' ] s4)
          | s4 = index'1 {best_value} {_127}
              (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_125 <- _ret' ] s5)
          | s5 = bb60 ]
          
        | bb60 = s0 [ s0 = index'2 {_125} {left_weight} (fun (_ret':usize) ->  [ &_123 <- _ret' ] s1) | s1 = bb61 ] 
        | bb61 = s0
          [ s0 = index'1 {best_value} {j} (fun (_ret':Vec'0.t_vec usize (Global'0.t_global)) ->  [ &_133 <- _ret' ] s1)
          | s1 = bb62 ]
          
        | bb62 = s0 [ s0 = index'2 {_133} {left_weight} (fun (_ret':usize) ->  [ &_131 <- _ret' ] s1) | s1 = bb63 ] 
        | bb63 = s0
          [ s0 = UIntSize.ne {_123} {_131} (fun (_ret':bool) ->  [ &_121 <- _ret' ] s1)
          | s1 = any [ br0 -> {_121 = false} (! bb66) | br1 -> {_121} (! bb64) ]  ]
          
        | bb64 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)> {result}
              (fun (_ret':borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))) ->
                 [ &_138 <- _ret' ] 
                 [ &result <- _138.final ] 
                s1)
          | s1 = -{inv'4 _138.final}- s2
          | s2 = push'0 {_138} {it1} (fun (_ret':()) ->  [ &_137 <- _ret' ] s3)
          | s3 = bb65 ]
          
        | bb65 = s0
          [ s0 = {[@expl:type invariant] inv'1 it1} s1
          | s1 = -{resolve'1 it1}- s2
          | s2 = Item'0.t_item <name> {it1}
              (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                UIntSize.sub {left_weight} {rweight'0} (fun (_ret':usize) ->  [ &left_weight <- _ret' ] s3))
          | s3 = bb67 ]
          
        | bb66 = s0 [ s0 = {[@expl:type invariant] inv'1 it1} s1 | s1 = -{resolve'1 it1}- s2 | s2 = bb67 ] 
        | bb67 = bb56 ]
         ]
      
    | bb68 = s0
      [ s0 = -{resolve'5 best_value}- s1
      | s1 = {[@expl:type invariant] inv'5 items} s2
      | s2 = -{resolve'6 items}- s3
      | s3 =  [ &_0 <- result ] 
        (any [ any_ (_any:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))-> (!  [ &result <- _any ] s4) ] )
      | s4 = bb69 ]
      
    | bb69 = bb70
    | bb70 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) = any_l ()
    | & items : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) = items
    | & max_weight : usize = max_weight
    | & best_value : Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global) = any_l ()
    | & _10 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _11 : usize = any_l ()
    | & _13 : usize = any_l ()
    | & _14 : usize = any_l ()
    | & iter : Range'0.t_range usize = any_l ()
    | & _18 : Range'0.t_range usize = any_l ()
    | & _19 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _32 : Option'0.t_option usize = any_l ()
    | & _33 : borrowed (Range'0.t_range usize) = any_l ()
    | & _34 : borrowed (Range'0.t_range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _37 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & it : Item'0.t_item name = any_l ()
    | & _41 : Item'0.t_item name = any_l ()
    | & iter1 : RangeInclusive'0.t_rangeinclusive usize = any_l ()
    | & _45 : RangeInclusive'0.t_rangeinclusive usize = any_l ()
    | & iter_old1 : Snapshot.snap_ty (RangeInclusive'0.t_rangeinclusive usize) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _58 : Option'0.t_option usize = any_l ()
    | & _59 : borrowed (RangeInclusive'0.t_rangeinclusive usize) = any_l ()
    | & _60 : borrowed (RangeInclusive'0.t_rangeinclusive usize) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _63 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & w : usize = any_l ()
    | & _66 : usize = any_l ()
    | & _67 : bool = any_l ()
    | & _70 : usize = any_l ()
    | & _72 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _77 : usize = any_l ()
    | & _79 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _83 : usize = any_l ()
    | & _85 : usize = any_l ()
    | & _87 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _90 : usize = any_l ()
    | & _94 : borrowed usize = any_l ()
    | & _95 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & _96 : borrowed (Vec'0.t_vec usize (Global'0.t_global)) = any_l ()
    | & _97 : borrowed (Vec'0.t_vec (Vec'0.t_vec usize (Global'0.t_global)) (Global'0.t_global)) = any_l ()
    | & _98 : usize = any_l ()
    | & result : Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global) = any_l ()
    | & _104 : usize = any_l ()
    | & left_weight : usize = any_l ()
    | & j : usize = any_l ()
    | & _115 : bool = any_l ()
    | & it1 : Item'0.t_item name = any_l ()
    | & _118 : Item'0.t_item name = any_l ()
    | & _121 : bool = any_l ()
    | & _123 : usize = any_l ()
    | & _125 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _127 : usize = any_l ()
    | & _131 : usize = any_l ()
    | & _133 : Vec'0.t_vec usize (Global'0.t_global) = any_l ()
    | & _137 : () = any_l ()
    | & _138 : borrowed (Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global)) = any_l () ]
    
    [ return' (result:Vec'0.t_vec (Item'0.t_item name) (Global'0.t_global))-> {[@expl:postcondition] [%#sknapsack_full29] inv'4 result}
      {[@expl:postcondition] [%#sknapsack_full28] forall s : Seq.seq (Item'0.t_item name) . inv'3 s
       -> subseq_rev'0 s 0 (shallow_model'0 items) (Seq.length (shallow_model'0 items))
      /\ sum_weights'0 s (Seq.length s) <= UIntSize.to_int max_weight
       -> sum_values'0 s (Seq.length s) <= sum_values'0 (shallow_model'3 result) (Seq.length (shallow_model'3 result))}
      {[@expl:postcondition] [%#sknapsack_full27] subseq_rev'0 (shallow_model'3 result) 0 (shallow_model'0 items) (Seq.length (shallow_model'0 items))}
      {[@expl:postcondition] [%#sknapsack_full26] sum_weights'0 (shallow_model'3 result) (Seq.length (shallow_model'3 result))
      <= UIntSize.to_int max_weight}
      (! return' {result}) ]
    
end
