
module M_knapsack_full__max
  let%span sknapsack_full0 = "../knapsack_full.rs" 14 10 14 31
  
  use int.MinMax
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  let rec max (a:usize) (b:usize) (return'  (ret:usize))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.lt {a} {b} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : usize = any_l () | & a : usize = a | & b : usize = b | & _4 : bool = any_l () ] 
    [ return' (result:usize)-> {[@expl:postcondition] [%#sknapsack_full0] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
end
module T_knapsack_full__Item
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Item 'name =
    | C_Item 'name usize usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Item < 'name > (input:t_Item 'name) (ret  (name:'name) (weight:usize) (value:usize))= any
    [ good (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value = input}
      (! ret {name} {weight} {value})
    | bad (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value <> input} {false} any ]
    
  
  function t_Item__weight (self : t_Item 'name) : usize =
    match self with
      | C_Item _ a _ -> a
      end
  
  function t_Item__value (self : t_Item 'name) : usize =
    match self with
      | C_Item _ _ a -> a
      end
end
module M_knapsack_full__sum_weights__Impl
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 25 11 25 33
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 26 10 26 21
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 24 10 24 19
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use T_knapsack_full__Item as T_knapsack_full__Item
  
  use T_knapsack_full__Item as Item'0
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s  : Seq.seq (Item'0.t_Item name)
  
  constant i  : int
  
  function sum_weights [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (Item'0.t_Item name)) (i : int) : int
  
  goal vc_sum_weights : ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    [%#sknapsack_full1] 0 >= 0
  else
    (([%#sknapsack_full0] 0 <= i + 1 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full2] Seq.length s - i)
    /\ ([%#sknapsack_full2] Seq.length s - (i + 1)) < ([%#sknapsack_full2] Seq.length s - i))
    /\ (([%#sknapsack_full1] sum_weights s (i + 1) >= 0)
     -> ([%#sknapsack_full1] UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get s i))
    + sum_weights s (i + 1)
    >= 0))
  )
end
module M_knapsack_full__sum_values__Impl
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 36 11 36 33
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 35 10 35 19
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use T_knapsack_full__Item as T_knapsack_full__Item
  
  use T_knapsack_full__Item as Item'0
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s  : Seq.seq (Item'0.t_Item name)
  
  constant i  : int
  
  function sum_values [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (Item'0.t_Item name)) (i : int) : int
  
  goal vc_sum_values : ([%#sknapsack_full0] i >= 0 /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    true
  else
    ([%#sknapsack_full0] i + 1 >= 0 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full1] Seq.length s - i)
    /\ ([%#sknapsack_full1] Seq.length s - (i + 1)) < ([%#sknapsack_full1] Seq.length s - i)
  )
end
module M_knapsack_full__subseq_rev__Impl
  type t
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 46 11 46 36
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 47 11 47 36
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 45 10 45 12
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant s1  : Seq.seq t
  
  constant i1  : int
  
  constant s2  : Seq.seq t
  
  constant i2  : int
  
  predicate subseq_rev [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
  
  goal vc_subseq_rev : ([%#sknapsack_full1] 0 <= i2 /\ i2 <= Seq.length s2)
   -> ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
   -> (if i2 = 0 then
    true
  else
    if i1 < Seq.length s1 then
      if Seq.get s1 i1 = Seq.get s2 (i2 - 1) then
        ((([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 + 1 /\ i1 + 1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2))
        /\ (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
      else
        (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
      
    else
      (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
      && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
      /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
    
  )
end
module M_knapsack_full__m__Impl
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 60 11 60 37
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 61 11 61 17
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 62 10 62 21
  
  let%span sknapsack_full3 = "../knapsack_full.rs" 63 0 65 2
  
  let%span sknapsack_full4 = "../knapsack_full.rs" 59 10 59 11
  
  let%span span5 = "../knapsack_full.rs" 36 11 36 33
  
  let%span span6 = "../knapsack_full.rs" 35 10 35 19
  
  let%span span7 = "../knapsack_full.rs" 38 4 41 5
  
  let%span span8 = "../knapsack_full.rs" 25 11 25 33
  
  let%span span9 = "../knapsack_full.rs" 26 10 26 21
  
  let%span span10 = "../knapsack_full.rs" 24 10 24 19
  
  let%span span11 = "../knapsack_full.rs" 28 4 31 5
  
  let%span span12 = "../knapsack_full.rs" 46 11 46 36
  
  let%span span13 = "../knapsack_full.rs" 47 11 47 36
  
  let%span span14 = "../knapsack_full.rs" 45 10 45 12
  
  let%span span15 = "../knapsack_full.rs" 49 4 55 5
  
  use int.MinMax
  
  use T_knapsack_full__Item as T_knapsack_full__Item
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use T_knapsack_full__Item as Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function sum_values'0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (Item'0.t_Item name)) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq (Item'0.t_Item name), i : int . sum_values'0 s i
  = ([%#span7] if i = Seq.length s then
    0
  else
    UIntSize.to_int (T_knapsack_full__Item.t_Item__value (Seq.get s i)) + sum_values'0 s (i + 1)
  )
  
  function sum_weights'0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (Item'0.t_Item name)) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq (Item'0.t_Item name), i : int . sum_weights'0 s i
  = ([%#span11] if i = Seq.length s then
    0
  else
    UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get s i)) + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq (Item'0.t_Item name), i : int . ([%#span8] 0 <= i /\ i <= Seq.length s)
   -> ([%#span9] sum_weights'0 s i >= 0)
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (Item'0.t_Item name)) (i1 : int) (s2 : Seq.seq (Item'0.t_Item name)) (i2 : int)
    
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq (Item'0.t_Item name), i1 : int, s2 : Seq.seq (Item'0.t_Item name), i2 : int . subseq_rev'0 s1 i1 s2 i2
  = ([%#span15] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  constant items  : Seq.seq (Item'0.t_Item name)
  
  constant i  : int
  
  constant w  : int
  
  function m [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (Item'0.t_Item name)) (i : int) (w : int) : int
  
  goal vc_m : ([%#sknapsack_full1] 0 <= w)
   -> ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    let result = 0 in ([%#sknapsack_full3] forall s : Seq.seq (Item'0.t_Item name), j : int . 0 <= j
    /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
    && ([%#sknapsack_full2] result >= 0)
  else
    if UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1))) > w then
      ((([%#sknapsack_full1] 0 <= w) && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full3] forall s : Seq.seq (Item'0.t_Item name), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m items (i - 1) w)
      && ([%#sknapsack_full2] m items (i - 1) w >= 0)
       -> (let result = m items (i - 1) w in ([%#sknapsack_full3] forall s : Seq.seq (Item'0.t_Item name), j : int . 0
      <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
      && ([%#sknapsack_full2] result >= 0)))
    else
      ((([%#sknapsack_full1] 0 <= w) && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full3] forall s : Seq.seq (Item'0.t_Item name), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m items (i - 1) w)
      && ([%#sknapsack_full2] m items (i - 1) w >= 0)
       -> ((([%#sknapsack_full1] 0
      <= w - UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1))))
      && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full3] forall s : Seq.seq (Item'0.t_Item name), j : int . 0 <= j
      /\ j <= Seq.length s
      /\ subseq_rev'0 s j items (i - 1)
      /\ sum_weights'0 s j <= w - UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1)))
       -> sum_values'0 s j
      <= m items (i - 1) (w - UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1)))))
      && ([%#sknapsack_full2] m items (i - 1) (w
      - UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1))))
      >= 0)
       -> (let result = MinMax.max (m items (i - 1) w) (m items (i - 1) (w
      - UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1))))
      + UIntSize.to_int (T_knapsack_full__Item.t_Item__value (Seq.get items (i
      - 1)))) in ([%#sknapsack_full3] forall s : Seq.seq (Item'0.t_Item name), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
      && ([%#sknapsack_full2] result >= 0))))
    
  )
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_core__ops__range__RangeInclusive
  type t_RangeInclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RangeInclusive < 'idx > (input:t_RangeInclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted})
    | bad (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted <> input} {false} any ]
    
end
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module M_knapsack_full__knapsack01_dyn
  type name
  
  let%span sknapsack_full0 = "../knapsack_full.rs" 86 51 86 52
  
  let%span sknapsack_full1 = "../knapsack_full.rs" 86 35 86 36
  
  let%span sknapsack_full2 = "../knapsack_full.rs" 86 69 86 70
  
  let%span sknapsack_full3 = "../knapsack_full.rs" 95 13 95 14
  
  let%span sknapsack_full4 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full5 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full6 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full7 = "../knapsack_full.rs" 88 16 88 53
  
  let%span sknapsack_full8 = "../knapsack_full.rs" 88 4 88 55
  
  let%span sknapsack_full9 = "../knapsack_full.rs" 110 17 110 18
  
  let%span sknapsack_full10 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full11 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full12 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full13 = "../knapsack_full.rs" 98 20 98 57
  
  let%span sknapsack_full14 = "../knapsack_full.rs" 98 8 98 59
  
  let%span sknapsack_full15 = "../knapsack_full.rs" 111 27 111 28
  
  let%span sknapsack_full16 = "../knapsack_full.rs" 123 16 123 34
  
  let%span sknapsack_full17 = "../knapsack_full.rs" 124 16 124 43
  
  let%span sknapsack_full18 = "../knapsack_full.rs" 123 4 123 36
  
  let%span sknapsack_full19 = "../knapsack_full.rs" 140 10 140 11
  
  let%span sknapsack_full20 = "../knapsack_full.rs" 141 13 141 14
  
  let%span sknapsack_full21 = "../knapsack_full.rs" 143 26 143 27
  
  let%span sknapsack_full22 = "../knapsack_full.rs" 77 11 77 34
  
  let%span sknapsack_full23 = "../knapsack_full.rs" 78 11 78 33
  
  let%span sknapsack_full24 = "../knapsack_full.rs" 79 0 79 86
  
  let%span sknapsack_full25 = "../knapsack_full.rs" 85 28 85 33
  
  let%span sknapsack_full26 = "../knapsack_full.rs" 80 10 80 60
  
  let%span sknapsack_full27 = "../knapsack_full.rs" 81 10 81 54
  
  let%span sknapsack_full28 = "../knapsack_full.rs" 82 0 84 2
  
  let%span sknapsack_full29 = "../knapsack_full.rs" 85 75 85 91
  
  let%span span30 = "../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span31 = "../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span32 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span35 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span36 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span37 = "../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span38 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span39 = "../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88
  
  let%span span40 = "../../../../creusot-contracts/src/std/iter/range.rs" 50 10 50 43
  
  let%span span41 = "../../../../creusot-contracts/src/std/iter/range.rs" 52 4 55 5
  
  let%span span42 = "../../../../creusot-contracts/src/std/iter/range.rs" 70 8 76 9
  
  let%span span43 = "../../../../creusot-contracts/src/std/iter/range.rs" 86 15 86 32
  
  let%span span44 = "../../../../creusot-contracts/src/std/iter/range.rs" 87 15 87 32
  
  let%span span45 = "../../../../creusot-contracts/src/std/iter/range.rs" 88 14 88 42
  
  let%span span46 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 4 84 10
  
  let%span span47 = "../../../../creusot-contracts/src/std/iter/range.rs" 81 14 81 45
  
  let%span span48 = "../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  
  let%span span49 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  
  let%span span50 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  
  let%span span51 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  
  let%span span52 = "../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  
  let%span span53 = "../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  
  let%span span54 = "../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  
  let%span span55 = "../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  
  let%span span56 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  
  let%span span57 = "../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  
  let%span span58 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span59 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "" 0 0 0 0
  
  let%span span62 = "../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span63 = "../knapsack_full.rs" 46 11 46 36
  
  let%span span64 = "../knapsack_full.rs" 47 11 47 36
  
  let%span span65 = "../knapsack_full.rs" 45 10 45 12
  
  let%span span66 = "../knapsack_full.rs" 49 4 55 5
  
  let%span span67 = "../knapsack_full.rs" 36 11 36 33
  
  let%span span68 = "../knapsack_full.rs" 35 10 35 19
  
  let%span span69 = "../knapsack_full.rs" 38 4 41 5
  
  let%span span70 = "../knapsack_full.rs" 25 11 25 33
  
  let%span span71 = "../knapsack_full.rs" 26 10 26 21
  
  let%span span72 = "../knapsack_full.rs" 24 10 24 19
  
  let%span span73 = "../knapsack_full.rs" 28 4 31 5
  
  let%span span74 = "../../../../creusot-contracts/src/std/vec.rs" 73 26 73 44
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span77 = "../../../../creusot-contracts/src/std/slice.rs" 138 8 138 96
  
  let%span span78 = "../../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  
  let%span span79 = "../../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  
  let%span span80 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "" 0 0 0 0
  
  let%span span83 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span84 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span85 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span86 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span87 = "" 0 0 0 0
  
  let%span span88 = "../knapsack_full.rs" 14 10 14 31
  
  let%span span89 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span90 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span91 = "" 0 0 0 0
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span94 = "" 0 0 0 0
  
  let%span span95 = "../../../../creusot-contracts/src/std/iter/range.rs" 63 12 63 57
  
  let%span span96 = "" 0 0 0 0
  
  let%span span97 = "../../../../creusot-contracts/src/std/iter.rs" 99 26 102 17
  
  let%span span98 = "" 0 0 0 0
  
  let%span span99 = "../../../../creusot-contracts/src/std/iter.rs" 84 8 84 19
  
  let%span span100 = "../../../../creusot-contracts/src/std/iter.rs" 78 20 78 24
  
  let%span span101 = "../../../../creusot-contracts/src/std/iter.rs" 93 0 179 1
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "" 0 0 0 0
  
  let%span span104 = "" 0 0 0 0
  
  let%span span105 = "" 0 0 0 0
  
  let%span span106 = "../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53
  
  let%span span107 = "../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49
  
  let%span span108 = "../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93
  
  let%span span109 = "" 0 0 0 0
  
  let%span span110 = "../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  
  let%span span111 = "" 0 0 0 0
  
  let%span span112 = "" 0 0 0 0
  
  let%span span113 = "../knapsack_full.rs" 60 11 60 37
  
  let%span span114 = "../knapsack_full.rs" 61 11 61 17
  
  let%span span115 = "../knapsack_full.rs" 62 10 62 21
  
  let%span span116 = "../knapsack_full.rs" 63 0 65 2
  
  let%span span117 = "../knapsack_full.rs" 59 10 59 11
  
  let%span span118 = "../knapsack_full.rs" 67 4 74 5
  
  let%span span119 = "" 0 0 0 0
  
  let%span span120 = "../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span121 = "../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span122 = "" 0 0 0 0
  
  let%span span123 = "" 0 0 0 0
  
  let%span span124 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use T_knapsack_full__Item as Item'0
  
  predicate inv'22 (_1 : Item'0.t_Item name)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'27 (self : Item'0.t_Item name) =
    [%#span30] inv'22 self
  
  predicate inv'27 (_1 : Item'0.t_Item name)
  
  axiom inv'27 : forall x : Item'0.t_Item name . inv'27 x = true
  
  use prelude.prelude.UIntSize
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'5 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  predicate invariant'26 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span30] inv'5 self
  
  predicate inv'26 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'26 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'26 x = true
  
  predicate inv'4 (_1 : usize)
  
  predicate invariant'25 (self : usize) =
    [%#span30] inv'4 self
  
  predicate inv'25 (_1 : usize)
  
  axiom inv'25 : forall x : usize . inv'25 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'24 (self : Seq.seq (Item'0.t_Item name)) =
    [%#span31] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'27 (Seq.get self i)
  
  predicate inv'24 (_1 : Seq.seq (Item'0.t_Item name))
  
  axiom inv'24 : forall x : Seq.seq (Item'0.t_Item name) . inv'24 x = true
  
  predicate inv'9 (_1 : Item'0.t_Item name)
  
  predicate invariant'23 (self : Item'0.t_Item name) =
    [%#span30] inv'9 self
  
  predicate inv'23 (_1 : Item'0.t_Item name)
  
  axiom inv'23 : forall x : Item'0.t_Item name . inv'23 x = true
  
  predicate invariant'22 (self : Item'0.t_Item name) =
    [%#span32] true
  
  axiom inv'22 : forall x : Item'0.t_Item name . inv'22 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'21 (self : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span31] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'26 (Seq.get self i)
  
  predicate inv'21 (_1 : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'21 : forall x : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'21 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'20 (self : Seq.seq usize) =
    [%#span31] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'25 (Seq.get self i)
  
  predicate inv'20 (_1 : Seq.seq usize)
  
  axiom inv'20 : forall x : Seq.seq usize . inv'20 x = true
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span33] (18446744073709551615 : usize)
  
  function shallow_model'4 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
  
  axiom shallow_model'4_spec : forall self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . [%#span34] Seq.length (shallow_model'4 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'19 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#span35] inv'24 (shallow_model'4 self)
  
  predicate inv'19 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  axiom inv'19 : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . inv'19 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'18 (self : Seq.seq (Item'0.t_Item name)) =
    [%#span31] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'23 (Seq.get self i)
  
  predicate inv'18 (_1 : Seq.seq (Item'0.t_Item name))
  
  axiom inv'18 : forall x : Seq.seq (Item'0.t_Item name) . inv'18 x = true
  
  predicate inv'2 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'17 (self : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) =
    [%#span36] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'17 (_1 : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))
  
  axiom inv'17 : forall x : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) . inv'17 x = true
  
  predicate invariant'16 (self : borrowed usize) =
    [%#span36] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'16 (_1 : borrowed usize)
  
  axiom inv'16 : forall x : borrowed usize . inv'16 x = true
  
  predicate invariant'15 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span36] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'15 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'15 : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'15 x = true
  
  predicate inv'6 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  predicate invariant'14 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) =
    [%#span36] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'14 (_1 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))
  
  axiom inv'14 : forall x : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) . inv'14 x
  = true
  
  predicate invariant'13 (self : usize) =
    [%#span37] inv'4 self
  
  predicate inv'13 (_1 : usize)
  
  axiom inv'13 : forall x : usize . inv'13 x = true
  
  predicate invariant'12 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span37] inv'5 self
  
  predicate inv'12 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'12 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'12 x = true
  
  predicate invariant'11 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span37] inv'6 self
  
  predicate inv'11 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv'11 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'11 x = true
  
  use T_core__ops__range__RangeInclusive as RangeInclusive'0
  
  predicate inv'1 (_1 : RangeInclusive'0.t_RangeInclusive usize)
  
  predicate invariant'10 (self : borrowed (RangeInclusive'0.t_RangeInclusive usize)) =
    [%#span36] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'10 (_1 : borrowed (RangeInclusive'0.t_RangeInclusive usize))
  
  axiom inv'10 : forall x : borrowed (RangeInclusive'0.t_RangeInclusive usize) . inv'10 x = true
  
  predicate invariant'9 (self : Item'0.t_Item name) =
    [%#span37] inv'22 self
  
  axiom inv'9 : forall x : Item'0.t_Item name . inv'9 x = true
  
  use T_core__option__Option as Option'0
  
  predicate invariant'8 (self : Option'0.t_Option usize) =
    [%#span32] true
  
  predicate inv'8 (_1 : Option'0.t_Option usize)
  
  axiom inv'8 : forall x : Option'0.t_Option usize . inv'8 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'0 (_1 : Range'0.t_Range usize)
  
  predicate invariant'7 (self : borrowed (Range'0.t_Range usize)) =
    [%#span36] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'7 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv'7 : forall x : borrowed (Range'0.t_Range usize) . inv'7 x = true
  
  function shallow_model'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span34] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'6 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span35] inv'21 (shallow_model'1 self)
  
  axiom inv'6 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'6 x = true
  
  function shallow_model'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span34] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'5 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span35] inv'20 (shallow_model'2 self)
  
  axiom inv'5 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'5 x = true
  
  predicate invariant'4 (self : usize) =
    [%#span32] true
  
  axiom inv'4 : forall x : usize . inv'4 x = true
  
  predicate invariant'3 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#span37] inv'19 self
  
  predicate inv'3 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  axiom inv'3 : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . inv'3 x = true
  
  function shallow_model'3 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . [%#span34] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'2 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#span35] inv'18 (shallow_model'3 self)
  
  axiom inv'2 : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . inv'2 x = true
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function start_log'0 (self : RangeInclusive'0.t_RangeInclusive usize) : usize
  
  function deep_model'0 (self : usize) : int =
    [%#span38] UIntSize.to_int self
  
  use seq.Seq
  
  function end_log'0 (self : RangeInclusive'0.t_RangeInclusive usize) : usize
  
  use int.Int
  
  function is_empty_log'0 (self : RangeInclusive'0.t_RangeInclusive usize) : bool
  
  axiom is_empty_log'0_spec : forall self : RangeInclusive'0.t_RangeInclusive usize . [%#span39] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  function range_inclusive_len'0 (r : RangeInclusive'0.t_RangeInclusive usize) : int =
    [%#span41] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : RangeInclusive'0.t_RangeInclusive usize . [%#span40] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  predicate produces'1 (self : RangeInclusive'0.t_RangeInclusive usize) (visited : Seq.seq usize) (o : RangeInclusive'0.t_RangeInclusive usize)
    
   =
    [%#span42] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'1 (a : RangeInclusive'0.t_RangeInclusive usize) (ab : Seq.seq usize) (b : RangeInclusive'0.t_RangeInclusive usize) (bc : Seq.seq usize) (c : RangeInclusive'0.t_RangeInclusive usize) : ()
    
   =
    [%#span46] ()
  
  axiom produces_trans'1_spec : forall a : RangeInclusive'0.t_RangeInclusive usize, ab : Seq.seq usize, b : RangeInclusive'0.t_RangeInclusive usize, bc : Seq.seq usize, c : RangeInclusive'0.t_RangeInclusive usize . ([%#span43] produces'1 a ab b)
   -> ([%#span44] produces'1 b bc c)  -> ([%#span45] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 (self : RangeInclusive'0.t_RangeInclusive usize) : () =
    [%#span48] ()
  
  axiom produces_refl'1_spec : forall self : RangeInclusive'0.t_RangeInclusive usize . [%#span47] produces'1 self (Seq.empty  : Seq.seq usize) self
  
  predicate invariant'1 (self : RangeInclusive'0.t_RangeInclusive usize) =
    [%#span32] true
  
  axiom inv'1 : forall x : RangeInclusive'0.t_RangeInclusive usize . inv'1 x = true
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#span49] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#span50] inv'0 a)
   -> ([%#span51] inv'0 b)
   -> ([%#span52] inv'0 c)
   -> ([%#span53] produces'0 a ab b)  -> ([%#span54] produces'0 b bc c)  -> ([%#span55] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#span56] inv'0 self)
   -> ([%#span57] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  predicate invariant'0 (self : Range'0.t_Range usize) =
    [%#span32] true
  
  axiom inv'0 : forall x : Range'0.t_Range usize . inv'0 x = true
  
  use T_knapsack_full__Item as T_knapsack_full__Item
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (ix : int) : Item'0.t_Item name
    
   =
    [%#span58] Seq.get (shallow_model'4 self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function shallow_model'9 (self : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) : Seq.seq (Item'0.t_Item name)
    
   =
    [%#span59] shallow_model'3 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) (value:Item'0.t_Item name) (return'  (ret:()))= {[@expl:precondition] [%#span61] inv'9 value}
    {[@expl:precondition] [%#span60] inv'17 self}
    any
    [ return' (result:())-> {[%#span62] shallow_model'3 self.final = Seq.snoc (shallow_model'9 self) value}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (Item'0.t_Item name)) (i1 : int) (s2 : Seq.seq (Item'0.t_Item name)) (i2 : int)
    
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq (Item'0.t_Item name), i1 : int, s2 : Seq.seq (Item'0.t_Item name), i2 : int . subseq_rev'0 s1 i1 s2 i2
  = ([%#span66] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  function sum_values'0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (Item'0.t_Item name)) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq (Item'0.t_Item name), i : int . sum_values'0 s i
  = ([%#span69] if i = Seq.length s then
    0
  else
    UIntSize.to_int (T_knapsack_full__Item.t_Item__value (Seq.get s i)) + sum_values'0 s (i + 1)
  )
  
  function sum_weights'0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (Item'0.t_Item name)) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq (Item'0.t_Item name), i : int . sum_weights'0 s i
  = ([%#span73] if i = Seq.length s then
    0
  else
    UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get s i)) + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq (Item'0.t_Item name), i : int . ([%#span70] 0 <= i /\ i <= Seq.length s)
   -> ([%#span71] sum_weights'0 s i >= 0)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (ix : int) : Item'0.t_Item name
    
   =
    [%#span58] Seq.get (shallow_model'3 self) ix
  
  let rec with_capacity'0 (capacity:usize) (return'  (ret:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))-> {[%#span75] inv'2 result}
      {[%#span74] Seq.length (shallow_model'3 result) = 0}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span76] self.final = self.current
  
  predicate resolve'2 (self : borrowed usize) =
    [%#span76] self.final = self.current
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span77] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span78] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span79] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'8 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#span59] shallow_model'2 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span82] inv'4 index}
    {[@expl:precondition] [%#span81] inv'15 self}
    {[@expl:precondition] [%#span80] in_bounds'2 index (shallow_model'8 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span87] inv'16 result}
      {[%#span86] Seq.length (shallow_model'2 self.final) = Seq.length (shallow_model'8 self)}
      {[%#span85] resolve_elswhere'1 index (shallow_model'8 self) (shallow_model'2 self.final)}
      {[%#span84] has_value'2 index (shallow_model'2 self.final) result.final}
      {[%#span83] has_value'2 index (shallow_model'8 self) result.current}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (fin : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
    
   =
    [%#span77] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span78] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span79] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'7 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span59] shallow_model'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))))= {[@expl:precondition] [%#span82] inv'4 index}
    {[@expl:precondition] [%#span81] inv'14 self}
    {[@expl:precondition] [%#span80] in_bounds'1 index (shallow_model'7 self)}
    any
    [ return' (result:borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))-> {[%#span87] inv'15 result}
      {[%#span86] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'7 self)}
      {[%#span85] resolve_elswhere'0 index (shallow_model'7 self) (shallow_model'1 self.final)}
      {[%#span84] has_value'1 index (shallow_model'1 self.final) result.final}
      {[%#span83] has_value'1 index (shallow_model'7 self) result.current}
      (! return' {result}) ]
    
  
  use int.MinMax
  
  let rec max'0 (a:usize) (b:usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {[%#span88] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'6 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize =
    [%#span89] shallow_model'2 self
  
  let rec index'2 (self:Vec'0.t_Vec usize (Global'0.t_Global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span92] inv'4 index}
    {[@expl:precondition] [%#span91] inv'12 self}
    {[@expl:precondition] [%#span90] in_bounds'2 index (shallow_model'6 self)}
    any
    [ return' (result:usize)-> {[%#span94] inv'13 result}
      {[%#span93] has_value'2 index (shallow_model'6 self) result}
      (! return' {result}) ]
    
  
  function shallow_model'5 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span89] shallow_model'1 self
  
  let rec index'1 (self:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (index:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] [%#span92] inv'4 index}
    {[@expl:precondition] [%#span91] inv'11 self}
    {[@expl:precondition] [%#span90] in_bounds'1 index (shallow_model'5 self)}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[%#span94] inv'12 result}
      {[%#span93] has_value'1 index (shallow_model'5 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (RangeInclusive'0.t_RangeInclusive usize)) =
    [%#span76] self.final = self.current
  
  use seq.Seq
  
  predicate completed'1 (self : borrowed (RangeInclusive'0.t_RangeInclusive usize)) =
    [%#span95] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'1 (self:borrowed (RangeInclusive'0.t_RangeInclusive usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] [%#span96] inv'10 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {[%#span98] inv'8 result}
      {[%#span97] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'1 (self : RangeInclusive'0.t_RangeInclusive usize) (res : RangeInclusive'0.t_RangeInclusive usize)
    
   =
    [%#span99] self = res
  
  predicate into_iter_pre'1 (self : RangeInclusive'0.t_RangeInclusive usize) =
    [%#span100] true
  
  let rec into_iter'1 (self:RangeInclusive'0.t_RangeInclusive usize) (return'  (ret:RangeInclusive'0.t_RangeInclusive usize))= {[@expl:precondition] [%#span102] inv'1 self}
    {[@expl:precondition] [%#span101] into_iter_pre'1 self}
    any
    [ return' (result:RangeInclusive'0.t_RangeInclusive usize)-> {[%#span103] inv'1 result}
      {[%#span101] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  let rec new'0 (start:usize) (end':usize) (return'  (ret:RangeInclusive'0.t_RangeInclusive usize))= {[@expl:precondition] [%#span105] inv'4 end'}
    {[@expl:precondition] [%#span104] inv'4 start}
    any
    [ return' (result:RangeInclusive'0.t_RangeInclusive usize)-> {[%#span109] inv'1 result}
      {[%#span108] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#span107] end_log'0 result = end'}
      {[%#span106] start_log'0 result = start}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_Item name)) (out : Item'0.t_Item name)
   =
    [%#span78] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_Item name)) =
    [%#span79] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
   =
    [%#span89] shallow_model'4 self
  
  let rec index'0 (self:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (index:usize) (return'  (ret:Item'0.t_Item name))= {[@expl:precondition] [%#span92] inv'4 index}
    {[@expl:precondition] [%#span91] inv'3 self}
    {[@expl:precondition] [%#span90] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:Item'0.t_Item name)-> {[%#span94] inv'9 result}
      {[%#span93] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#span76] self.final = self.current
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#span110] resolve'0 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] [%#span111] inv'7 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {[%#span112] inv'8 result}
      {[%#span97] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  function m'0 [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (Item'0.t_Item name)) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq (Item'0.t_Item name), i : int, w : int . m'0 items i w
  = ([%#span118] if i = 0 then
    0
  else
    if UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1))) > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UIntSize.to_int (T_knapsack_full__Item.t_Item__weight (Seq.get items (i - 1))))
      + UIntSize.to_int (T_knapsack_full__Item.t_Item__value (Seq.get items (i - 1))))
    
  )
  
  axiom m'0_spec : forall items : Seq.seq (Item'0.t_Item name), i : int, w : int . ([%#span113] 0 <= i
  /\ i <= Seq.length items)
   -> ([%#span114] 0 <= w)
   -> ([%#span116] forall s : Seq.seq (Item'0.t_Item name), j : int . 0 <= j
  /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= m'0 items i w)
  && ([%#span115] m'0 items i w >= 0)
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span58] Seq.get (shallow_model'1 self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#span99] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#span100] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] [%#span102] inv'0 self}
    {[@expl:precondition] [%#span101] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {[%#span103] inv'0 result}
      {[%#span101] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec from_elem'1 (elem:Vec'0.t_Vec usize (Global'0.t_Global)) (n:usize) (return'  (ret:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= {[@expl:precondition] [%#span119] inv'5 elem}
    any
    [ return' (result:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {[%#span122] inv'6 result}
      {[%#span121] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span120] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span123] inv'3 self}
    any
    [ return' (result:usize)-> {[%#span124] UIntSize.to_int result = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
  
  function index_logic'3 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#span58] Seq.get (shallow_model'2 self) ix
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] [%#span119] inv'4 elem}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[%#span122] inv'5 result}
      {[%#span121] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'3 result i = elem}
      {[%#span120] Seq.length (shallow_model'2 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec knapsack01_dyn (items:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (max_weight:usize) (return'  (ret:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))= {[%#sknapsack_full25] inv'3 items}
    {[%#sknapsack_full24] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 items)
     -> UIntSize.to_int (T_knapsack_full__Item.t_Item__value (index_logic'2 items i)) <= 10000000}
    {[%#sknapsack_full23] UIntSize.to_int max_weight < 10000000}
    {[%#sknapsack_full22] Seq.length (shallow_model'0 items) < 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {max_weight} {[%#sknapsack_full0] (1 : usize)} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack_full1] (0 : usize)} {_11}
          (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.add {_14} {[%#sknapsack_full2] (1 : usize)} (fun (_ret':usize) ->  [ &_13 <- _ret' ] s1)
      | s1 = from_elem'1 {_10} {_13}
          (fun (_ret':Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
             [ &best_value <- _ret' ] 
            s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_19 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_18 <- Range'0.C_Range ([%#sknapsack_full3] (0 : usize)) _19 ] s1
      | s1 = into_iter'0 {_18} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &iter_old <- [%#sknapsack_full4] Snapshot.new iter ] s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 =  [ &produced <- [%#sknapsack_full5] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb12
      [ bb12 = {[@expl:loop invariant] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (shallow_model'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        {[@expl:loop invariant] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (Snapshot.inner produced) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww)
        = m'0 (shallow_model'0 items) ii ww}
        {[@expl:loop invariant] [%#sknapsack_full6] forall i : int . 0 <= i
        /\ i < Seq.length (shallow_model'1 best_value)
         -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model'2 (index_logic'0 best_value i))}
        {[@expl:loop invariant] [%#sknapsack_full7] Seq.length (shallow_model'0 items) + 1
        = Seq.length (shallow_model'1 best_value)}
        {[@expl:loop invariant] [%#sknapsack_full6] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sknapsack_full6] inv'0 iter}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_34 <- _ret' ]  [ &iter <- _34.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_34.current} {Borrow.get_id _34}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_33 <- _ret' ] 
                 [ &_34 <- { _34 with current = _33.final ; } ] 
                s2)
          | s2 = next'0 {_33} (fun (_ret':Option'0.t_Option usize) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'0 _34}- s1
          | s1 = any
            [ br0 -> {_32 = Option'0.C_None } (! bb17) | br1 (a:usize)-> {_32 = Option'0.C_Some a} (! bb16) ]
             ]
          
        | bb16 = bb18
        | bb18 = s0
          [ s0 = Option'0.v_Some <usize> {_32} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_37 <- [%#sknapsack_full8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _37 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = index'0 {items} {i} (fun (_ret':Item'0.t_Item name) ->  [ &_41 <- _ret' ] s3)
          | s3 = bb20 ]
          
        | bb20 = s0
          [ s0 =  [ &it <- _41 ] s1
          | s1 = new'0 {[%#sknapsack_full9] (0 : usize)} {max_weight}
              (fun (_ret':RangeInclusive'0.t_RangeInclusive usize) ->  [ &_45 <- _ret' ] s2)
          | s2 = bb21 ]
          
        | bb21 = s0
          [ s0 = into_iter'1 {_45} (fun (_ret':RangeInclusive'0.t_RangeInclusive usize) ->  [ &iter1 <- _ret' ] s1)
          | s1 = bb22 ]
          
        | bb22 = s0 [ s0 =  [ &iter_old1 <- [%#sknapsack_full10] Snapshot.new iter1 ] s1 | s1 = bb23 ] 
        | bb23 = s0
          [ s0 =  [ &produced1 <- [%#sknapsack_full11] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb24 ]
          
        | bb24 = bb25
        | bb25 = bb26
        | bb26 = bb27
        | bb27 = bb28
        | bb28 = bb29
        | bb29 = bb30
        | bb30 = bb30
          [ bb30 = {[@expl:loop invariant] [%#sknapsack_full12] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (shallow_model'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            {[@expl:loop invariant] [%#sknapsack_full12] forall ww : int . 0 <= ww
            /\ ww <= Seq.length (Snapshot.inner produced1) - 1
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value (UIntSize.to_int i + 1))) ww)
            = m'0 (shallow_model'0 items) (UIntSize.to_int i + 1) ww}
            {[@expl:loop invariant] [%#sknapsack_full12] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww)
            = m'0 (shallow_model'0 items) ii ww}
            {[@expl:loop invariant] [%#sknapsack_full12] forall i : int . 0 <= i
            /\ i < Seq.length (shallow_model'1 best_value)
             -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model'2 (index_logic'0 best_value i))}
            {[@expl:loop invariant] [%#sknapsack_full13] Seq.length (shallow_model'0 items) + 1
            = Seq.length (shallow_model'1 best_value)}
            {[@expl:loop invariant] [%#sknapsack_full12] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#sknapsack_full12] inv'1 iter1}
            (! s0) [ s0 = bb31 ] 
            [ bb31 = s0
              [ s0 = Borrow.borrow_mut <RangeInclusive'0.t_RangeInclusive usize> {iter1}
                  (fun (_ret':borrowed (RangeInclusive'0.t_RangeInclusive usize)) ->
                     [ &_60 <- _ret' ] 
                     [ &iter1 <- _60.final ] 
                    s1)
              | s1 = Borrow.borrow_final <RangeInclusive'0.t_RangeInclusive usize> {_60.current} {Borrow.get_id _60}
                  (fun (_ret':borrowed (RangeInclusive'0.t_RangeInclusive usize)) ->
                     [ &_59 <- _ret' ] 
                     [ &_60 <- { _60 with current = _59.final ; } ] 
                    s2)
              | s2 = next'1 {_59} (fun (_ret':Option'0.t_Option usize) ->  [ &_58 <- _ret' ] s3)
              | s3 = bb32 ]
              
            | bb32 = s0
              [ s0 = -{resolve'1 _60}- s1
              | s1 = any
                [ br0 -> {_58 = Option'0.C_None } (! bb35) | br1 (a:usize)-> {_58 = Option'0.C_Some a} (! bb34) ]
                 ]
              
            | bb34 = bb36
            | bb36 = s0
              [ s0 = Option'0.v_Some <usize> {_58} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_63 <- [%#sknapsack_full14] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb37 ]
              
            | bb37 = s0
              [ s0 =  [ &produced1 <- _63 ] s1
              | s1 =  [ &w <- __creusot_proc_iter_elem1 ] s2
              | s2 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.gt {rweight'0} {w} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s3))
              | s3 = any [ br0 -> {_67 = false} (! bb41) | br1 -> {_67} (! bb38) ]  ]
              
            | bb38 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_72 <- _ret' ] s1)
              | s1 = bb39 ]
              
            | bb39 = s0 [ s0 = index'2 {_72} {w} (fun (_ret':usize) ->  [ &_70 <- _ret' ] s1) | s1 = bb40 ] 
            | bb40 = s0 [ s0 =  [ &_66 <- _70 ] s1 | s1 = bb47 ] 
            | bb41 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_79 <- _ret' ] s1)
              | s1 = bb42 ]
              
            | bb42 = s0 [ s0 = index'2 {_79} {w} (fun (_ret':usize) ->  [ &_77 <- _ret' ] s1) | s1 = bb43 ] 
            | bb43 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_87 <- _ret' ] s1)
              | s1 = bb44 ]
              
            | bb44 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.sub {w} {rweight'0} (fun (_ret':usize) ->  [ &_90 <- _ret' ] s1))
              | s1 = index'2 {_87} {_90} (fun (_ret':usize) ->  [ &_85 <- _ret' ] s2)
              | s2 = bb45 ]
              
            | bb45 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.add {_85} {rvalue'0} (fun (_ret':usize) ->  [ &_83 <- _ret' ] s1))
              | s1 = max'0 {_77} {_83} (fun (_ret':usize) ->  [ &_66 <- _ret' ] s2)
              | s2 = bb46 ]
              
            | bb46 = bb47
            | bb47 = s0
              [ s0 = Borrow.borrow_mut
                  <Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)>
                  {best_value}
                  (fun (_ret':borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) ->
                     [ &_97 <- _ret' ] 
                     [ &best_value <- _97.final ] 
                    s1)
              | s1 = UIntSize.add {i} {[%#sknapsack_full15] (1 : usize)} (fun (_ret':usize) ->  [ &_98 <- _ret' ] s2)
              | s2 = index_mut'0 {_97} {_98}
                  (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->  [ &_96 <- _ret' ] s3)
              | s3 = bb48 ]
              
            | bb48 = s0
              [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {_96.current} {Borrow.get_id _96}
                  (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
                     [ &_95 <- _ret' ] 
                     [ &_96 <- { _96 with current = _95.final ; } ] 
                    s1)
              | s1 = index_mut'1 {_95} {w} (fun (_ret':borrowed usize) ->  [ &_94 <- _ret' ] s2)
              | s2 = bb49 ]
              
            | bb49 = s0
              [ s0 =  [ &_94 <- { _94 with current = _66 ; } ] s1
              | s1 = -{resolve'2 _94}- s2
              | s2 = -{resolve'3 _96}- s3
              | s3 = bb30 ]
               ]
             ]
          
        | bb35 = bb12 ]
         ]
      
    | bb17 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_104 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = s0
      [ s0 = with_capacity'0 {_104}
          (fun (_ret':Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) ->  [ &result <- _ret' ] s1)
      | s1 = bb51 ]
      
    | bb51 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':usize) ->  [ &j <- _ret' ] s2)
      | s2 = bb52 ]
      
    | bb52 = bb53
    | bb53 = bb54
    | bb54 = bb55
    | bb55 = bb56
    | bb56 = bb56
      [ bb56 = {[@expl:loop invariant] [%#sknapsack_full18] forall r : Seq.seq (Item'0.t_Item name) . Seq.length (shallow_model'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ subseq_rev'0 r (Seq.length (shallow_model'3 result)) (shallow_model'0 items) (UIntSize.to_int j)
         -> subseq_rev'0 r 0 (shallow_model'0 items) (Seq.length (shallow_model'0 items))}
        {[@expl:loop invariant] [%#sknapsack_full18] forall r : Seq.seq (Item'0.t_Item name) . Seq.length (shallow_model'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_values'0 r (Seq.length (shallow_model'3 result))
        = m'0 (shallow_model'0 items) (UIntSize.to_int j) (UIntSize.to_int left_weight)
         -> sum_values'0 r 0
        = m'0 (shallow_model'0 items) (Seq.length (shallow_model'0 items)) (UIntSize.to_int max_weight)}
        {[@expl:loop invariant] [%#sknapsack_full18] forall r : Seq.seq (Item'0.t_Item name) . Seq.length (shallow_model'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_weights'0 r (Seq.length (shallow_model'3 result)) <= UIntSize.to_int left_weight
         -> sum_weights'0 r 0 <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack_full17] UIntSize.to_int left_weight <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack_full16] UIntSize.to_int j <= Seq.length (shallow_model'0 items)}
        (! s0) [ s0 = bb57 ] 
        [ bb57 = s0
          [ s0 = UIntSize.lt {[%#sknapsack_full19] (0 : usize)} {j} (fun (_ret':bool) ->  [ &_115 <- _ret' ] s1)
          | s1 = any [ br0 -> {_115 = false} (! bb68) | br1 -> {_115} (! bb58) ]  ]
          
        | bb58 = s0
          [ s0 = UIntSize.sub {j} {[%#sknapsack_full20] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':Item'0.t_Item name) ->  [ &_118 <- _ret' ] s2)
          | s2 = bb59 ]
          
        | bb59 = s0
          [ s0 =  [ &it1 <- _118 ] s1
          | s1 = UIntSize.add {j} {[%#sknapsack_full21] (1 : usize)} (fun (_ret':usize) ->  [ &_127 <- _ret' ] s2)
          | s2 = index'1 {best_value} {_127}
              (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_125 <- _ret' ] s3)
          | s3 = bb60 ]
          
        | bb60 = s0 [ s0 = index'2 {_125} {left_weight} (fun (_ret':usize) ->  [ &_123 <- _ret' ] s1) | s1 = bb61 ] 
        | bb61 = s0
          [ s0 = index'1 {best_value} {j} (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_133 <- _ret' ] s1)
          | s1 = bb62 ]
          
        | bb62 = s0 [ s0 = index'2 {_133} {left_weight} (fun (_ret':usize) ->  [ &_131 <- _ret' ] s1) | s1 = bb63 ] 
        | bb63 = s0
          [ s0 = UIntSize.ne {_123} {_131} (fun (_ret':bool) ->  [ &_121 <- _ret' ] s1)
          | s1 = any [ br0 -> {_121 = false} (! bb66) | br1 -> {_121} (! bb64) ]  ]
          
        | bb64 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)> {result}
              (fun (_ret':borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) ->
                 [ &_138 <- _ret' ] 
                 [ &result <- _138.final ] 
                s1)
          | s1 = -{inv'2 _138.final}- s2
          | s2 = push'0 {_138} {it1} (fun (_ret':()) ->  [ &_137 <- _ret' ] s3)
          | s3 = bb65 ]
          
        | bb65 = s0
          [ s0 = Item'0.t_Item <name> {it1}
              (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                UIntSize.sub {left_weight} {rweight'0} (fun (_ret':usize) ->  [ &left_weight <- _ret' ] s1))
          | s1 = bb67 ]
          
        | bb66 = bb67
        | bb67 = bb56 ]
         ]
      
    | bb68 = s0 [ s0 =  [ &_0 <- result ] s1 | s1 = bb69 ] 
    | bb69 = bb70
    | bb70 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = any_l ()
    | & items : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = items
    | & max_weight : usize = max_weight
    | & best_value : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) = any_l ()
    | & _10 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _11 : usize = any_l ()
    | & _13 : usize = any_l ()
    | & _14 : usize = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _18 : Range'0.t_Range usize = any_l ()
    | & _19 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _32 : Option'0.t_Option usize = any_l ()
    | & _33 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _34 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _37 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & it : Item'0.t_Item name = any_l ()
    | & _41 : Item'0.t_Item name = any_l ()
    | & iter1 : RangeInclusive'0.t_RangeInclusive usize = any_l ()
    | & _45 : RangeInclusive'0.t_RangeInclusive usize = any_l ()
    | & iter_old1 : Snapshot.snap_ty (RangeInclusive'0.t_RangeInclusive usize) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _58 : Option'0.t_Option usize = any_l ()
    | & _59 : borrowed (RangeInclusive'0.t_RangeInclusive usize) = any_l ()
    | & _60 : borrowed (RangeInclusive'0.t_RangeInclusive usize) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _63 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & w : usize = any_l ()
    | & _66 : usize = any_l ()
    | & _67 : bool = any_l ()
    | & _70 : usize = any_l ()
    | & _72 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _77 : usize = any_l ()
    | & _79 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _83 : usize = any_l ()
    | & _85 : usize = any_l ()
    | & _87 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _90 : usize = any_l ()
    | & _94 : borrowed usize = any_l ()
    | & _95 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _96 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _97 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) = any_l ()
    | & _98 : usize = any_l ()
    | & result : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = any_l ()
    | & _104 : usize = any_l ()
    | & left_weight : usize = any_l ()
    | & j : usize = any_l ()
    | & _115 : bool = any_l ()
    | & it1 : Item'0.t_Item name = any_l ()
    | & _118 : Item'0.t_Item name = any_l ()
    | & _121 : bool = any_l ()
    | & _123 : usize = any_l ()
    | & _125 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _127 : usize = any_l ()
    | & _131 : usize = any_l ()
    | & _133 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _137 : () = any_l ()
    | & _138 : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))-> {[@expl:postcondition] [%#sknapsack_full29] inv'2 result}
      {[@expl:postcondition] [%#sknapsack_full28] forall s : Seq.seq (Item'0.t_Item name) . subseq_rev'0 s 0 (shallow_model'0 items) (Seq.length (shallow_model'0 items))
      /\ sum_weights'0 s (Seq.length s) <= UIntSize.to_int max_weight
       -> sum_values'0 s (Seq.length s) <= sum_values'0 (shallow_model'3 result) (Seq.length (shallow_model'3 result))}
      {[@expl:postcondition] [%#sknapsack_full27] subseq_rev'0 (shallow_model'3 result) 0 (shallow_model'0 items) (Seq.length (shallow_model'0 items))}
      {[@expl:postcondition] [%#sknapsack_full26] sum_weights'0 (shallow_model'3 result) (Seq.length (shallow_model'3 result))
      <= UIntSize.to_int max_weight}
      (! return' {result}) ]
    
end
