module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module LogicFunctions_Logical
  function logical () : bool = 
    true
end
module LogicFunctions_TestLogical
  clone LogicFunctions_Logical as Logical0
  let rec cfg test_logical () : ()
    ensures { Logical0.logical () }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module LogicFunctions_Nested_Nested
  function nested () : bool = 
    true
end
module LogicFunctions_Arith
  use mach.int.Int
  function arith (n : int) (b : bool) : int = 
    match (not b) with
      | True -> - n + n - n * n
      | False -> n
      end
end
module LogicFunctions_DerefPat
  use mach.int.Int
  use prelude.Prelude
  function deref_pat (p : (int, int)) : int = 
    let (a, b) = p in a + b
end
