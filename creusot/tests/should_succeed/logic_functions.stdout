module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module LogicFunctions_Logic_Interface
  function logic () : bool
end
module LogicFunctions_Logic
  function logic () : bool = 
    true
end
module LogicFunctions_UseLogic_Interface
  clone LogicFunctions_Logic_Interface as Logic0
  val use_logic () : ()
    ensures { Logic0.logic () }
    
end
module LogicFunctions_UseLogic
  clone LogicFunctions_Logic as Logic0
  let rec cfg use_logic () : ()
    ensures { Logic0.logic () }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module LogicFunctions_Logical_Interface
  function logical () : bool
end
module LogicFunctions_Logical
  use mach.int.Int
  use mach.int.Int32
  function logical () : bool = 
    0 = 0
end
module LogicFunctions_UseLogical_Interface
  clone LogicFunctions_Logical_Interface as Logical0
  val use_logical () : ()
    ensures { Logical0.logical () }
    
end
module LogicFunctions_UseLogical
  clone LogicFunctions_Logical as Logical0
  let rec cfg use_logical () : ()
    ensures { Logical0.logical () }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module LogicFunctions_Nested_Nested_Interface
  function nested () : bool
end
module LogicFunctions_Nested_Nested
  function nested () : bool = 
    true
end
module LogicFunctions_Arith_Interface
  use mach.int.Int
  function arith (n : int) (b : bool) : int
end
module LogicFunctions_Arith
  use mach.int.Int
  function arith (n : int) (b : bool) : int = 
    match (not b) with
      | True -> - n + n - n * n
      | False -> n
      end
end
module LogicFunctions_DerefPat_Interface
  use mach.int.Int
  use prelude.Prelude
  use Type
  function deref_pat (o : Type.core_option_option int) : int
end
module LogicFunctions_DerefPat
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int32
  function deref_pat (o : Type.core_option_option int) : int = 
    match (o) with
      | Type.Core_Option_Option_Some a -> a
      | Type.Core_Option_Option_None -> 0
      end
end
