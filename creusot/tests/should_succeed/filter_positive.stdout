module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module FilterPositive_NumOfPos_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
end
module FilterPositive_NumOfPos
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
  axiom def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos i j t = (if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos i (j - 1) t + 1 else num_of_pos i (j - 1) t
  )
  axiom num_of_pos_spec : forall i : int, j : int, t : Seq.seq int32 . true
end
module FilterPositive_NumOfPos_Impl
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  let rec ghost function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
    variant {j - i}
    
   = 
    if i >= j then
      0
    else
      if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos i (j - 1) t + 1 else num_of_pos i (j - 1) t
    
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Interface
  use seq.Seq
  use mach.int.Int32
  use mach.int.Int
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : ()
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing
  use seq.Seq
  use mach.int.Int32
  use mach.int.Int
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : () = 
    ()
  axiom lemma_num_of_pos_strictly_increasing_spec : forall i : int, t : Seq.seq int32 . Int32.to_int (Seq.get t i) > 0 -> 0 <= i && i < Seq.length t -> NumOfPos0.num_of_pos 0 i t < NumOfPos0.num_of_pos 0 (i + 1) t
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Impl
  use seq.Seq
  use mach.int.Int32
  use mach.int.Int
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  let rec ghost function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : ()
    requires {Int32.to_int (Seq.get t i) > 0}
    requires {0 <= i && i < Seq.length t}
    ensures { NumOfPos0.num_of_pos 0 i t < NumOfPos0.num_of_pos 0 (i + 1) t }
    
   = 
    ()
end
module FilterPositive_LemmaNumOfPosIncreasing_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
end
module FilterPositive_LemmaNumOfPosIncreasing
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
  axiom def : forall i : int, j : int, k : int, t : Seq.seq int32 . lemma_num_of_pos_increasing i j k t = (if j < k then
    lemma_num_of_pos_increasing i (j + 1) k t
  else
    ()
  )
  axiom lemma_num_of_pos_increasing_spec : forall i : int, j : int, k : int, t : Seq.seq int32 . j <= k -> NumOfPos0.num_of_pos i j t <= NumOfPos0.num_of_pos i k t
end
module FilterPositive_LemmaNumOfPosIncreasing_Impl
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  let rec ghost function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    requires {j <= k}
    ensures { NumOfPos0.num_of_pos i j t <= NumOfPos0.num_of_pos i k t }
    variant {k - j}
    
   = 
    if j < k then lemma_num_of_pos_increasing i (j + 1) k t else ()
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module FilterPositive_M_Interface
  use Type
  use mach.int.Int
  use mach.int.Int32
  val m (t : Type.creusotcontracts_std1_vec_vec int32) : Type.creusotcontracts_std1_vec_vec int32
end
module FilterPositive_M
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  clone FilterPositive_LemmaNumOfPosIncreasing as LemmaNumOfPosIncreasing0 with function NumOfPos0.num_of_pos = NumOfPos0.num_of_pos,
  axiom .
  clone FilterPositive_LemmaNumOfPosStrictlyIncreasing as LemmaNumOfPosStrictlyIncreasing0 with function NumOfPos0.num_of_pos = NumOfPos0.num_of_pos,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.creusotcontracts_std1_vec_vec int32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = int32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = int32,
  function Model0.model = Model0.model, function Model1.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = int32,
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = int32, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = int32,
  function Model0.model = Model0.model
  let rec cfg m (t : Type.creusotcontracts_std1_vec_vec int32) : Type.creusotcontracts_std1_vec_vec int32 = 
  var _0 : Type.creusotcontracts_std1_vec_vec int32;
  var t_1 : Type.creusotcontracts_std1_vec_vec int32;
  var _2 : ();
  var count_3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec int32;
  var _11 : ();
  var _12 : bool;
  var _13 : int32;
  var _14 : int32;
  var _15 : Type.creusotcontracts_std1_vec_vec int32;
  var _16 : usize;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var u_20 : Type.creusotcontracts_std1_vec_vec int32;
  var _21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : Type.creusotcontracts_std1_vec_vec int32;
  var _27 : ();
  var _28 : bool;
  var _29 : int32;
  var _30 : int32;
  var _31 : Type.creusotcontracts_std1_vec_vec int32;
  var _32 : usize;
  var _33 : ();
  var _34 : ();
  var _35 : int32;
  var _36 : int32;
  var _37 : Type.creusotcontracts_std1_vec_vec int32;
  var _38 : usize;
  var _39 : borrowed int32;
  var _40 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var _41 : usize;
  var _42 : ();
  var _43 : ();
  var _44 : ();
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_bounds { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model t_1) };
    invariant count_bounds { 0 <= UInt64.to_int count_3 && UInt64.to_int count_3 <= UInt64.to_int i_4 };
    invariant num { UInt64.to_int count_3 = NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) };
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- t_1;
    _9 <- Len0.len _10;
    goto BB5
  }
  BB5 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB11
      | _ -> goto BB6
      end
  }
  BB6 {
    _15 <- t_1;
    assume { Resolve0.resolve _16 };
    _16 <- i_4;
    _14 <- Index0.index _15 _16;
    goto BB7
  }
  BB7 {
    assume { Resolve1.resolve _13 };
    _13 <- _14;
    assume { Resolve2.resolve _14 };
    _12 <- _13 > (0 : int32);
    switch (_12)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    count_3 <- count_3 + (1 : usize);
    _11 <- ();
    assume { Resolve3.resolve _11 };
    goto BB10
  }
  BB9 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    goto BB10
  }
  BB10 {
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB3
  }
  BB11 {
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    assume { Resolve0.resolve _21 };
    _21 <- count_3;
    assume { Resolve0.resolve count_3 };
    u_20 <- FromElem0.from_elem (0 : int32) _21;
    goto BB12
  }
  BB12 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    invariant loop_bounds { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model t_1) };
    invariant count_bounds { 0 <= UInt64.to_int count_3 && UInt64.to_int count_3 <= UInt64.to_int i_4 };
    invariant num { UInt64.to_int count_3 = NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) };
    invariant ulength { Seq.length (Model0.model u_20) = NumOfPos0.num_of_pos 0 (Seq.length (Model0.model t_1)) (Model0.model t_1) };
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve _24 };
    _24 <- i_4;
    _26 <- t_1;
    _25 <- Len0.len _26;
    goto BB18
  }
  BB18 {
    _23 <- _24 < _25;
    switch (_23)
      | False -> goto BB28
      | _ -> goto BB19
      end
  }
  BB19 {
    _31 <- t_1;
    assume { Resolve0.resolve _32 };
    _32 <- i_4;
    _30 <- Index0.index _31 _32;
    goto BB20
  }
  BB20 {
    assume { Resolve1.resolve _29 };
    _29 <- _30;
    assume { Resolve2.resolve _30 };
    _28 <- _29 > (0 : int32);
    switch (_28)
      | False -> goto BB26
      | _ -> goto BB21
      end
  }
  BB21 {
    assert { let _ = LemmaNumOfPosStrictlyIncreasing0.lemma_num_of_pos_strictly_increasing (UInt64.to_int i_4) (Model0.model u_20) in NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) < NumOfPos0.num_of_pos 0 (UInt64.to_int i_4 + 1) (Model0.model t_1) };
    goto BB22
  }
  BB22 {
    _33 <- ();
    assume { Resolve3.resolve _33 };
    assert { let _ = LemmaNumOfPosIncreasing0.lemma_num_of_pos_increasing 0 (UInt64.to_int i_4 + 1) (Seq.length (Model0.model t_1)) (Model0.model t_1) in UInt64.to_int count_3 < Seq.length (Model0.model u_20) };
    goto BB23
  }
  BB23 {
    _34 <- ();
    assume { Resolve3.resolve _34 };
    _37 <- t_1;
    assume { Resolve0.resolve _38 };
    _38 <- i_4;
    _36 <- Index0.index _37 _38;
    goto BB24
  }
  BB24 {
    assume { Resolve1.resolve _35 };
    _35 <- _36;
    assume { Resolve2.resolve _36 };
    _40 <- borrow_mut u_20;
    u_20 <-  ^ _40;
    assume { Resolve0.resolve _41 };
    _41 <- count_3;
    _39 <- IndexMut0.index_mut _40 _41;
    goto BB25
  }
  BB25 {
    assume { Resolve1.resolve ( * _39) };
    _39 <- { _39 with current = _35 };
    assume { Resolve4.resolve _39 };
    count_3 <- count_3 + (1 : usize);
    _27 <- ();
    assume { Resolve3.resolve _27 };
    goto BB27
  }
  BB26 {
    _27 <- ();
    assume { Resolve3.resolve _27 };
    goto BB27
  }
  BB27 {
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB16
  }
  BB28 {
    assume { Resolve0.resolve count_3 };
    assume { Resolve0.resolve i_4 };
    _22 <- ();
    assume { Resolve3.resolve _22 };
    assume { Resolve5.resolve _0 };
    _0 <- u_20;
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    assume { Resolve5.resolve t_1 };
    return _0
  }
  
end
module FilterPositive_Main_Interface
  val main () : ()
end
module FilterPositive_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
