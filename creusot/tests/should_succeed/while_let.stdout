module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type whilelet_option 't = 
    | WhileLet_Option_Some('t)
    | WhileLet_Option_None
    
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl11_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Impl11_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl11
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = Resolve0.resolve
end
module WhileLet_Main_Interface
  val main () : ()
end
module WhileLet_Main
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve1 with type t = Type.whilelet_option int32
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = Type.whilelet_option int32
  let rec cfg main () : () = 
  var _0 : ();
  var a_1 : Type.whilelet_option int32;
  var b_2 : borrowed (Type.whilelet_option int32);
  var _4 : ();
  var _5 : isize;
  var _6 : Type.whilelet_option int32;
  var _7 : ();
  var _8 : ();
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- Type.WhileLet_Option_Some((10 : int32));
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    assume { Resolve0.resolve a_1 };
    goto BB1
  }
  BB1 {
    invariant dummy { true };
    goto BB2
  }
  BB2 {
    switch ( * b_2)
      | Type.WhileLet_Option_Some(_) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { Resolve2.resolve _5 };
    goto BB5
  }
  BB4 {
    assume { Resolve1.resolve b_2 };
    assume { Resolve2.resolve _5 };
    _0 <- ();
    return _0
  }
  BB5 {
    _6 <- Type.WhileLet_Option_None;
    assume { Resolve0.resolve ( * b_2) };
    b_2 <- { b_2 with current = _6 };
    assume { Resolve0.resolve _6 };
    _4 <- ();
    assume { Resolve3.resolve _4 };
    goto BB1
  }
  
end
