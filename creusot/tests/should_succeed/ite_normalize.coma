
module IteNormalize_BTreeMap_Type
  type t_btreemap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module IteNormalize_Expr_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_expr  =
    | C_IfThenElse (t_expr) (t_expr) (t_expr)
    | C_Var usize
    | C_True
    | C_False
  
  function any_l (_ : 'b) : 'a
  
  let rec if_then_else (input:t_expr) (ret  (c:t_expr) (t:t_expr) (e:t_expr))= any
    [ good (c:t_expr) (t:t_expr) (e:t_expr)-> {C_IfThenElse c t e = input} (! ret {c} {t} {e})
    | bad (c:t_expr) (t:t_expr) (e:t_expr)-> {C_IfThenElse c t e <> input} {false} any ]
    
  
  let rec var' (input:t_expr) (ret  (v:usize))= any
    [ good (v:usize)-> {C_Var v = input} (! ret {v}) | bad (v:usize)-> {C_Var v <> input} {false} any ]
    
  
  let rec true' (input:t_expr) (ret  )= any
    [ good -> {C_True  = input} (! ret) | bad -> {C_True  <> input} {false} any ]
    
  
  let rec false' (input:t_expr) (ret  )= any
    [ good -> {C_False  = input} (! ret) | bad -> {C_False  <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module IteNormalize_Impl6_Clone
  let%span site_normalize0 = "../ite_normalize.rs" 55 9 55 14
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span2 = "" 0 0 0 0
  
  let%span span3 = "../ite_normalize.rs" 68 0 77 1
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate invariant'1 (self : Expr'0.t_expr) =
    [%#span1] true
  
  predicate inv'1 (_x : Expr'0.t_expr)
  
  axiom inv'1 : forall x : Expr'0.t_expr . inv'1 x = true
  
  predicate invariant'0 (self : Expr'0.t_expr) =
    [%#span1] true
  
  predicate inv'0 (_x : Expr'0.t_expr)
  
  axiom inv'0 : forall x : Expr'0.t_expr . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use Alloc_Alloc_Global_Type as Global'0
  
  let rec clone'1 (self:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= {[@expl:precondition] [%#span2] inv'0 self}
    any [ return' (result:Expr'0.t_expr)-> {[%#span4] inv'1 result} {[%#span3] result = self} (! return' {result}) ] 
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  let rec clone'0 (self:usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {[%#span5] result = self} (! return' {result}) ]
    
  
  let rec clone' (self:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= (! bb0
    [ bb0 = any
      [ br0 (a:Expr'0.t_expr) (b:Expr'0.t_expr) (c:Expr'0.t_expr)-> {self = Expr'0.C_IfThenElse a b c} (! bb2)
      | br1 (a:usize)-> {self = Expr'0.C_Var a} (! bb3)
      | br2 -> {self = Expr'0.C_True } (! bb4)
      | br3 -> {self = Expr'0.C_False } (! bb20) ]
      
    | bb20 = bb5
    | bb5 = s0 [ s0 =  [ &_0 <- Expr'0.C_False ] s1 | s1 = bb16 ] 
    | bb4 = bb15
    | bb15 = s0 [ s0 =  [ &_0 <- Expr'0.C_True ] s1 | s1 = bb16 ] 
    | bb3 = bb13
    | bb13 = s0
      [ s0 = Expr'0.var' {self} (fun (rv'0:usize) ->  [ &v_1 <- rv'0 ] s1)
      | s1 =  [ &_19 <- v_1 ] s2
      | s2 = clone'0 {_19} (fun (_ret':usize) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_0 <- Expr'0.C_Var _17 ] (any [ any_ (_any:usize)-> (!  [ &_17 <- _any ] s1) ] ) | s1 = bb16 ]
      
    | bb2 = bb6
    | bb6 = s0
      [ s0 = Expr'0.if_then_else {self}
          (fun (rc'0:Expr'0.t_expr) (rt'0:Expr'0.t_expr) (re'0:Expr'0.t_expr) ->  [ &c_1 <- rc'0 ] s1)
      | s1 = Expr'0.if_then_else {self}
          (fun (rc'1:Expr'0.t_expr) (rt'1:Expr'0.t_expr) (re'1:Expr'0.t_expr) ->  [ &t_1 <- rt'1 ] s2)
      | s2 = Expr'0.if_then_else {self}
          (fun (rc'2:Expr'0.t_expr) (rt'2:Expr'0.t_expr) (re'2:Expr'0.t_expr) ->  [ &e_1 <- re'2 ] s3)
      | s3 =  [ &_9 <- c_1 ] s4
      | s4 = clone'1 {_9} (fun (_ret':Expr'0.t_expr) ->  [ &_7 <- _ret' ] s5)
      | s5 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &_12 <- t_1 ] s1 | s1 = clone'1 {_12} (fun (_ret':Expr'0.t_expr) ->  [ &_10 <- _ret' ] s2) | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &_15 <- e_1 ] s1 | s1 = clone'1 {_15} (fun (_ret':Expr'0.t_expr) ->  [ &_13 <- _ret' ] s2) | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &_0 <- Expr'0.C_IfThenElse _7 _10 _13 ] 
        (any
        [ any_ (_any:Expr'0.t_expr)-> (!  [ &_7 <- _any ] 
          (any
          [ any_ (_any:Expr'0.t_expr)-> (!  [ &_10 <- _any ] 
            (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &_13 <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb10 ]
      
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : Expr'0.t_expr = any_l ()
    | & self : Expr'0.t_expr = self
    | & c_1 : Expr'0.t_expr = any_l ()
    | & t_1 : Expr'0.t_expr = any_l ()
    | & e_1 : Expr'0.t_expr = any_l ()
    | & _7 : Expr'0.t_expr = any_l ()
    | & _9 : Expr'0.t_expr = any_l ()
    | & _10 : Expr'0.t_expr = any_l ()
    | & _12 : Expr'0.t_expr = any_l ()
    | & _13 : Expr'0.t_expr = any_l ()
    | & _15 : Expr'0.t_expr = any_l ()
    | & v_1 : usize = any_l ()
    | & _17 : usize = any_l ()
    | & _19 : usize = any_l () ]
    
    [ return' (result:Expr'0.t_expr)-> {[@expl:postcondition] [%#site_normalize0] result = self} (! return' {result}) ]
    
end
module IteNormalize_Impl5_Variable
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use IteNormalize_Expr_Type as Expr'0
  
  let rec variable (v:usize) (return'  (ret:Expr'0.t_expr))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- Expr'0.C_Var v ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : Expr'0.t_expr = any_l () | & v : usize = v ]  [ return' (result:Expr'0.t_expr)-> (! return' {result}) ] 
end
module IteNormalize_Impl3_From
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  use IteNormalize_Expr_Type as Expr'0
  
  let rec variable'0 (v:usize) (return'  (ret:Expr'0.t_expr))= any
    [ return' (result:Expr'0.t_expr)-> (! return' {result}) ]
    
  
  let rec from (a:usize) (return'  (ret:Expr'0.t_expr))= (! bb0
    [ bb0 = s0 [ s0 = variable'0 {a} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : Expr'0.t_expr = any_l () | & a : usize = a ]  [ return' (result:Expr'0.t_expr)-> (! return' {result}) ] 
end
module IteNormalize_Impl4_From
  use prelude.prelude.Intrinsic
  
  use IteNormalize_Expr_Type as Expr'0
  
  let rec from (b:bool) (return'  (ret:Expr'0.t_expr))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_0 <- Expr'0.C_True ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- Expr'0.C_False ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : Expr'0.t_expr = any_l () | & b : bool = b ]  [ return' (result:Expr'0.t_expr)-> (! return' {result}) ] 
end
module IteNormalize_Impl5_Ite
  let%span site_normalize0 = "../ite_normalize.rs" 96 14 96 91
  
  use prelude.prelude.Intrinsic
  
  use IteNormalize_Expr_Type as Expr'0
  
  let rec ite (c:Expr'0.t_expr) (t:Expr'0.t_expr) (e:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = s0
      [ s0 =  [ &_0 <- Expr'0.C_IfThenElse c t e ] 
        (any
        [ any_ (_any:Expr'0.t_expr)-> (!  [ &c <- _any ] 
          (any
          [ any_ (_any:Expr'0.t_expr)-> (!  [ &t <- _any ] 
            (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &e <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return' {_0} ]
    ) [ & _0 : Expr'0.t_expr = any_l () | & c : Expr'0.t_expr = c | & t : Expr'0.t_expr = t | & e : Expr'0.t_expr = e ] 
    [ return' (result:Expr'0.t_expr)-> {[@expl:postcondition] [%#site_normalize0] result = Expr'0.C_IfThenElse c t e}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Transpose
  let%span site_normalize0 = "../ite_normalize.rs" 105 15 105 35
  
  let%span site_normalize1 = "../ite_normalize.rs" 106 15 106 32
  
  let%span site_normalize2 = "../ite_normalize.rs" 107 15 107 32
  
  let%span site_normalize3 = "../ite_normalize.rs" 108 14 108 36
  
  let%span site_normalize4 = "../ite_normalize.rs" 109 14 109 18
  
  let%span span5 = "../ite_normalize.rs" 127 8 140 9
  
  let%span span6 = "../ite_normalize.rs" 55 9 55 14
  
  let%span span7 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span8 = "../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : Expr'0.t_expr) =
    [%#span5] match self with
      | Expr'0.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | Expr'0.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | Expr'0.C_Var _ -> true
      | Expr'0.C_True -> true
      | Expr'0.C_False -> true
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  let rec clone'0 (self:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= any
    [ return' (result:Expr'0.t_expr)-> {[%#span6] result = self} (! return' {result}) ]
    
  
  predicate resolve'1 (self : Expr'0.t_expr) =
    [%#span7] true
  
  predicate resolve'0 (self : Expr'0.t_expr) =
    [%#span8] resolve'1 self
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  let rec transpose (self:Expr'0.t_expr) (a:Expr'0.t_expr) (b:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= {[%#site_normalize2] is_normalized'0 b}
    {[%#site_normalize1] is_normalized'0 a}
    {[%#site_normalize0] is_normalized'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = any
      [ br0 (a:Expr'0.t_expr) (b:Expr'0.t_expr) (c:Expr'0.t_expr)-> {self = Expr'0.C_IfThenElse a b c} (! bb6)
      | br1 (a:usize)-> {self = Expr'0.C_Var a} (! bb7)
      | br2 -> {self = Expr'0.C_True } (! bb8)
      | br3 -> {self = Expr'0.C_False } (! bb57) ]
      
    | bb57 = bb9
    | bb9 = s0 [ s0 =  [ &_0 <- b ] (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &b <- _any ] s1) ] ) | s1 = bb31 ] 
    | bb8 = bb30
    | bb30 = s0 [ s0 =  [ &_0 <- a ] (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &a <- _any ] s1) ] ) | s1 = bb31 ] 
    | bb7 = bb23
    | bb23 = bb24
    | bb24 = bb25
    | bb25 = bb26
    | bb26 = s0
      [ s0 =  [ &_0 <- Expr'0.C_IfThenElse self a b ] 
        (any
        [ any_ (_any:Expr'0.t_expr)-> (!  [ &self <- _any ] 
          (any
          [ any_ (_any:Expr'0.t_expr)-> (!  [ &a <- _any ] 
            (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &b <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb27 ]
      
    | bb27 = bb28
    | bb28 = bb29
    | bb29 = bb31
    | bb6 = bb10
    | bb10 = s0
      [ s0 = Expr'0.if_then_else {self}
          (fun (rc'0:Expr'0.t_expr) (rt'0:Expr'0.t_expr) (re'0:Expr'0.t_expr) ->
             [ &c <- rc'0 ] 
            (any
            [ any_ (_any:Expr'0.t_expr)-> (! Expr'0.if_then_else {self}
                (fun (l_c'0:Expr'0.t_expr) (l_t'0:Expr'0.t_expr) (l_e'0:Expr'0.t_expr) ->
                   [ &self <- Expr'0.C_IfThenElse _any l_t'0 l_e'0 ] 
                  s1)) ]
            ))
      | s1 = Expr'0.if_then_else {self}
          (fun (rc'1:Expr'0.t_expr) (rt'1:Expr'0.t_expr) (re'1:Expr'0.t_expr) ->
             [ &t <- rt'1 ] 
            (any
            [ any_ (_any:Expr'0.t_expr)-> (! Expr'0.if_then_else {self}
                (fun (l_c'1:Expr'0.t_expr) (l_t'1:Expr'0.t_expr) (l_e'1:Expr'0.t_expr) ->
                   [ &self <- Expr'0.C_IfThenElse l_c'1 _any l_e'1 ] 
                  s2)) ]
            ))
      | s2 = Expr'0.if_then_else {self}
          (fun (rc'2:Expr'0.t_expr) (rt'2:Expr'0.t_expr) (re'2:Expr'0.t_expr) ->
             [ &e <- re'2 ] 
            (any
            [ any_ (_any:Expr'0.t_expr)-> (! Expr'0.if_then_else {self}
                (fun (l_c'2:Expr'0.t_expr) (l_t'2:Expr'0.t_expr) (l_e'2:Expr'0.t_expr) ->
                   [ &self <- Expr'0.C_IfThenElse l_c'2 l_t'2 _any ] 
                  s3)) ]
            ))
      | s3 = -{resolve'0 t}- s4
      | s4 = clone'0 {a} (fun (_ret':Expr'0.t_expr) ->  [ &_17 <- _ret' ] s5)
      | s5 = bb11 ]
      
    | bb11 = s0 [ s0 = clone'0 {b} (fun (_ret':Expr'0.t_expr) ->  [ &_19 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0 [ s0 = transpose {t} {_17} {_19} (fun (_ret':Expr'0.t_expr) ->  [ &_15 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = bb14
    | bb14 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = transpose {e} {a} {b} (fun (_ret':Expr'0.t_expr) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = bb16
    | bb16 = s0
      [ s0 =  [ &_0 <- Expr'0.C_IfThenElse c _15 _22 ] 
        (any
        [ any_ (_any:Expr'0.t_expr)-> (!  [ &c <- _any ] 
          (any
          [ any_ (_any:Expr'0.t_expr)-> (!  [ &_15 <- _any ] 
            (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &_22 <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb17 ]
      
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = bb22
    | bb22 = bb31
    | bb31 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb34 = return' {_0} ]
    )
    [ & _0 : Expr'0.t_expr = any_l ()
    | & self : Expr'0.t_expr = self
    | & a : Expr'0.t_expr = a
    | & b : Expr'0.t_expr = b
    | & c : Expr'0.t_expr = any_l ()
    | & t : Expr'0.t_expr = any_l ()
    | & e : Expr'0.t_expr = any_l ()
    | & _15 : Expr'0.t_expr = any_l ()
    | & _17 : Expr'0.t_expr = any_l ()
    | & _19 : Expr'0.t_expr = any_l ()
    | & _22 : Expr'0.t_expr = any_l () ]
    
    [ return' (result:Expr'0.t_expr)-> {[@expl:postcondition] [%#site_normalize3] is_normalized'0 result}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Normalize
  let%span site_normalize0 = "../ite_normalize.rs" 143 14 143 36
  
  let%span site_normalize1 = "../ite_normalize.rs" 144 14 144 18
  
  let%span span2 = "../ite_normalize.rs" 127 8 140 9
  
  let%span span3 = "../ite_normalize.rs" 105 15 105 35
  
  let%span span4 = "../ite_normalize.rs" 106 15 106 32
  
  let%span span5 = "../ite_normalize.rs" 107 15 107 32
  
  let%span span6 = "../ite_normalize.rs" 108 14 108 36
  
  let%span span7 = "../ite_normalize.rs" 109 14 109 18
  
  let%span span8 = "../ite_normalize.rs" 55 9 55 14
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : Expr'0.t_expr) =
    [%#span2] match self with
      | Expr'0.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | Expr'0.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | Expr'0.C_Var _ -> true
      | Expr'0.C_True -> true
      | Expr'0.C_False -> true
      end
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec transpose'0 (self:Expr'0.t_expr) (a:Expr'0.t_expr) (b:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= {[@expl:precondition] [%#span5] is_normalized'0 b}
    {[@expl:precondition] [%#span4] is_normalized'0 a}
    {[@expl:precondition] [%#span3] is_normalized'0 self}
    any [ return' (result:Expr'0.t_expr)-> {[%#span6] is_normalized'0 result} (! return' {result}) ] 
  
  let rec clone'0 (self:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= any
    [ return' (result:Expr'0.t_expr)-> {[%#span8] result = self} (! return' {result}) ]
    
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  let rec normalize (self:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= (! bb0
    [ bb0 = any
      [ br0 (a:Expr'0.t_expr) (b:Expr'0.t_expr) (c:Expr'0.t_expr)-> {self = Expr'0.C_IfThenElse a b c} (! bb2)
      | br1 (a:usize)-> {self = Expr'0.C_Var a} (! bb1)
      | br2 -> {self = Expr'0.C_True } (! bb1)
      | br3 -> {self = Expr'0.C_False } (! bb1) ]
      
    | bb1 = s0
      [ s0 =  [ &e1 <- self ] s1 | s1 = clone'0 {e1} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s2) | s2 = bb11 ]
      
    | bb11 = bb12
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Expr'0.if_then_else {self}
          (fun (rc'0:Expr'0.t_expr) (rt'0:Expr'0.t_expr) (re'0:Expr'0.t_expr) ->  [ &c <- rc'0 ] s1)
      | s1 = Expr'0.if_then_else {self}
          (fun (rc'1:Expr'0.t_expr) (rt'1:Expr'0.t_expr) (re'1:Expr'0.t_expr) ->  [ &t <- rt'1 ] s2)
      | s2 = Expr'0.if_then_else {self}
          (fun (rc'2:Expr'0.t_expr) (rt'2:Expr'0.t_expr) (re'2:Expr'0.t_expr) ->  [ &e <- re'2 ] s3)
      | s3 = normalize {c} (fun (_ret':Expr'0.t_expr) ->  [ &cp <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = s0 [ s0 = normalize {t} (fun (_ret':Expr'0.t_expr) ->  [ &tp <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = normalize {e} (fun (_ret':Expr'0.t_expr) ->  [ &ep <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = transpose'0 {cp} {tp} {ep} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : Expr'0.t_expr = any_l ()
    | & self : Expr'0.t_expr = self
    | & c : Expr'0.t_expr = any_l ()
    | & t : Expr'0.t_expr = any_l ()
    | & e : Expr'0.t_expr = any_l ()
    | & cp : Expr'0.t_expr = any_l ()
    | & tp : Expr'0.t_expr = any_l ()
    | & ep : Expr'0.t_expr = any_l ()
    | & e1 : Expr'0.t_expr = any_l () ]
    
    [ return' (result:Expr'0.t_expr)-> {[@expl:postcondition] [%#site_normalize0] is_normalized'0 result}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_SimplifyHelper
  let%span site_normalize0 = "../ite_normalize.rs" 203 46 203 50
  
  let%span site_normalize1 = "../ite_normalize.rs" 208 46 208 51
  
  let%span site_normalize2 = "../ite_normalize.rs" 185 15 185 35
  
  let%span site_normalize3 = "../ite_normalize.rs" 186 4 186 107
  
  let%span site_normalize4 = "../ite_normalize.rs" 187 14 187 36
  
  let%span site_normalize5 = "../ite_normalize.rs" 188 14 188 18
  
  let%span span6 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../ite_normalize.rs" 170 8 176 9
  
  let%span span8 = "../ite_normalize.rs" 159 8 165 9
  
  let%span span9 = "../ite_normalize.rs" 51 20 51 26
  
  let%span span10 = "../ite_normalize.rs" 127 8 140 9
  
  let%span span11 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span12 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span13 = "../ite_normalize.rs" 28 25 28 28
  
  let%span span14 = "../ite_normalize.rs" 28 33 28 38
  
  let%span span15 = "../ite_normalize.rs" 27 4 27 125
  
  let%span span16 = "../ite_normalize.rs" 28 46 28 55
  
  let%span span17 = "../ite_normalize.rs" 38 14 38 29
  
  let%span span18 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span19 = "../../../../creusot-contracts/src/resolve.rs" 35 8 35 31
  
  let%span span20 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span21 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span22 = "../ite_normalize.rs" 19 25 19 28
  
  let%span span23 = "../ite_normalize.rs" 17 4 17 70
  
  let%span span24 = "../ite_normalize.rs" 18 4 18 91
  
  let%span span25 = "../ite_normalize.rs" 19 40 19 53
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'6 (self : Option'0.t_option bool) =
    [%#span6] true
  
  predicate inv'6 (_x : Option'0.t_option bool)
  
  axiom inv'6 : forall x : Option'0.t_option bool . inv'6 x = true
  
  use prelude.prelude.Int
  
  predicate invariant'5 (self : int) =
    [%#span6] true
  
  predicate inv'5 (_x : int)
  
  axiom inv'5 : forall x : int . inv'5 x = true
  
  predicate invariant'4 (self : bool) =
    [%#span6] true
  
  predicate inv'4 (_x : bool)
  
  axiom inv'4 : forall x : bool . inv'4 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'3 (self : usize) =
    [%#span6] true
  
  predicate inv'3 (_x : usize)
  
  axiom inv'3 : forall x : usize . inv'3 x = true
  
  predicate invariant'2 (self : Option'0.t_option bool) =
    [%#span6] true
  
  predicate inv'2 (_x : Option'0.t_option bool)
  
  axiom inv'2 : forall x : Option'0.t_option bool . inv'2 x = true
  
  predicate invariant'1 (self : bool) =
    [%#span6] true
  
  predicate inv'1 (_x : bool)
  
  axiom inv'1 : forall x : bool . inv'1 x = true
  
  predicate invariant'0 (self : usize) =
    [%#span6] true
  
  predicate inv'0 (_x : usize)
  
  axiom inv'0 : forall x : usize . inv'0 x = true
  
  use prelude.prelude.Int
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate does_not_contain'0 [#"../ite_normalize.rs" 169 4 169 48] (self : Expr'0.t_expr) (vp : usize) =
    [%#span7] match self with
      | Expr'0.C_IfThenElse c t e -> does_not_contain'0 c vp /\ does_not_contain'0 t vp /\ does_not_contain'0 e vp
      | Expr'0.C_Var v -> v <> vp
      | _ -> true
      end
  
  predicate is_simplified'0 [#"../ite_normalize.rs" 158 4 158 34] (self : Expr'0.t_expr) =
    [%#span8] match self with
      | Expr'0.C_IfThenElse c t e -> match c with
        | Expr'0.C_Var v -> does_not_contain'0 t v /\ does_not_contain'0 e v
        | c -> is_simplified'0 c /\ is_simplified'0 t /\ is_simplified'0 e
        end
      | _ -> true
      end
  
  use map.Map
  
  use prelude.prelude.UIntSize
  
  use map.Map
  
  use IteNormalize_BTreeMap_Type as BTreeMap'0
  
  function shallow_model'0 [#"../ite_normalize.rs" 50 4 50 50] (self : BTreeMap'0.t_btreemap usize bool) : Map.map int (Option'0.t_option bool)
    
  
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : Expr'0.t_expr) =
    [%#span10] match self with
      | Expr'0.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | Expr'0.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | Expr'0.C_Var _ -> true
      | Expr'0.C_True -> true
      | Expr'0.C_False -> true
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  function shallow_model'2 (self : borrowed (BTreeMap'0.t_btreemap usize bool)) : Map.map int (Option'0.t_option bool) =
    [%#span11] shallow_model'0 self.current
  
  function deep_model'1 (self : usize) : int =
    [%#span12] UIntSize.to_int self
  
  let rec insert'0 (self:borrowed (BTreeMap'0.t_btreemap usize bool)) (key:usize) (value:bool) (return'  (ret:Option'0.t_option bool))= {[@expl:precondition] [%#span14] inv'4 value}
    {[@expl:precondition] [%#span13] inv'3 key}
    any
    [ return' (result:Option'0.t_option bool)-> {[%#span16] inv'6 result}
      {[%#span15] forall i : int . inv'5 i
       -> Map.get (shallow_model'0 self.final) i
      = (if i = deep_model'1 key then Option'0.C_Some value else Map.get (shallow_model'2 self) i)}
      (! return' {result}) ]
    
  
  let rec clone'0 (self:BTreeMap'0.t_btreemap usize bool) (return'  (ret:BTreeMap'0.t_btreemap usize bool))= any
    [ return' (result:BTreeMap'0.t_btreemap usize bool)-> {[%#span17] self = result} (! return' {result}) ]
    
  
  predicate resolve'1 (self : Expr'0.t_expr) =
    [%#span18] true
  
  predicate resolve'0 (self : Expr'0.t_expr) =
    [%#span19] resolve'1 self
  
  function deep_model'0 (self : usize) : int =
    [%#span20] deep_model'1 self
  
  function shallow_model'1 (self : BTreeMap'0.t_btreemap usize bool) : Map.map int (Option'0.t_option bool) =
    [%#span21] shallow_model'0 self
  
  let rec get'0 (self:BTreeMap'0.t_btreemap usize bool) (key:usize) (return'  (ret:Option'0.t_option bool))= {[@expl:precondition] [%#span22] inv'0 key}
    any
    [ return' (result:Option'0.t_option bool)-> {[%#span25] inv'2 result}
      {[%#span24] forall v : bool . inv'1 v
       -> result = Option'0.C_Some v  -> Map.get (shallow_model'1 self) (deep_model'0 key) = Option'0.C_Some v}
      {[%#span23] result = Option'0.C_None  -> Map.get (shallow_model'1 self) (deep_model'0 key) = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec simplify_helper (self:Expr'0.t_expr) (state:BTreeMap'0.t_btreemap usize bool) (return'  (ret:Expr'0.t_expr))= {[%#site_normalize2] is_normalized'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = any
      [ br0 (a:Expr'0.t_expr) (b:Expr'0.t_expr) (c:Expr'0.t_expr)-> {self = Expr'0.C_IfThenElse a b c} (! bb5)
      | br1 (a:usize)-> {self = Expr'0.C_Var a} (! bb6)
      | br2 -> {self = Expr'0.C_True } (! bb4)
      | br3 -> {self = Expr'0.C_False } (! bb4) ]
      
    | bb4 = s0
      [ s0 =  [ &c2 <- self ] (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &self <- _any ] s1) ] )
      | s1 =  [ &_0 <- c2 ] (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &c2 <- _any ] s2) ] )
      | s2 = bb51 ]
      
    | bb51 = bb52
    | bb6 = bb42
    | bb42 = s0
      [ s0 = Expr'0.var' {self} (fun (rv'0:usize) ->  [ &v1 <- rv'0 ] s1)
      | s1 =  [ &_52 <- v1 ] s2
      | s2 = get'0 {state} {_52} (fun (_ret':Option'0.t_option bool) ->  [ &_49 <- _ret' ] s3)
      | s3 = bb43 ]
      
    | bb43 = any [ br0 -> {_49 = Option'0.C_None } (! bb49) | br1 (a:bool)-> {_49 = Option'0.C_Some a} (! bb44) ] 
    | bb49 = s0 [ s0 =  [ &_0 <- Expr'0.C_Var v1 ] s1 | s1 = bb50 ] 
    | bb44 = bb45
    | bb45 = s0
      [ s0 = Option'0.some <bool> {_49} (fun (r0'0:bool) ->  [ &b1 <- r0'0 ] s1)
      | s1 = any [ br0 -> {b1 = false} (! bb47) | br1 -> {b1} (! bb46) ]  ]
      
    | bb46 = s0 [ s0 =  [ &_0 <- Expr'0.C_True ] s1 | s1 = bb48 ] 
    | bb47 = s0 [ s0 =  [ &_0 <- Expr'0.C_False ] s1 | s1 = bb48 ] 
    | bb48 = bb50
    | bb50 = bb52
    | bb5 = bb7
    | bb7 = s0
      [ s0 = Expr'0.if_then_else {self}
          (fun (rc'0:Expr'0.t_expr) (rt'0:Expr'0.t_expr) (re'0:Expr'0.t_expr) ->
             [ &c <- rc'0 ] 
            (any
            [ any_ (_any:Expr'0.t_expr)-> (! Expr'0.if_then_else {self}
                (fun (l_c'0:Expr'0.t_expr) (l_t'0:Expr'0.t_expr) (l_e'0:Expr'0.t_expr) ->
                   [ &self <- Expr'0.C_IfThenElse _any l_t'0 l_e'0 ] 
                  s1)) ]
            ))
      | s1 = Expr'0.if_then_else {self}
          (fun (rc'1:Expr'0.t_expr) (rt'1:Expr'0.t_expr) (re'1:Expr'0.t_expr) ->
             [ &t <- rt'1 ] 
            (any
            [ any_ (_any:Expr'0.t_expr)-> (! Expr'0.if_then_else {self}
                (fun (l_c'1:Expr'0.t_expr) (l_t'1:Expr'0.t_expr) (l_e'1:Expr'0.t_expr) ->
                   [ &self <- Expr'0.C_IfThenElse l_c'1 _any l_e'1 ] 
                  s2)) ]
            ))
      | s2 = Expr'0.if_then_else {self}
          (fun (rc'2:Expr'0.t_expr) (rt'2:Expr'0.t_expr) (re'2:Expr'0.t_expr) ->
             [ &e <- re'2 ] 
            (any
            [ any_ (_any:Expr'0.t_expr)-> (! Expr'0.if_then_else {self}
                (fun (l_c'2:Expr'0.t_expr) (l_t'2:Expr'0.t_expr) (l_e'2:Expr'0.t_expr) ->
                   [ &self <- Expr'0.C_IfThenElse l_c'2 l_t'2 _any ] 
                  s3)) ]
            ))
      | s3 = any
        [ br0 (a:Expr'0.t_expr) (b:Expr'0.t_expr) (c:Expr'0.t_expr)-> {c = Expr'0.C_IfThenElse a b c} (! bb8)
        | br1 (a:usize)-> {c = Expr'0.C_Var a} (! bb9)
        | br2 -> {c = Expr'0.C_True } (! bb8)
        | br3 -> {c = Expr'0.C_False } (! bb8) ]
         ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = -{resolve'0 t}- s2
      | s2 =  [ &c1 <- c ] (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &c <- _any ] s3) ] )
      | s3 = -{resolve'0 c}- s4
      | s4 = simplify_helper {c1} {state} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb36 ]
      
    | bb36 = bb37
    | bb37 = bb38
    | bb9 = bb10
    | bb10 = s0
      [ s0 = Expr'0.var' {c} (fun (rv'0:usize) ->  [ &v <- rv'0 ] s1)
      | s1 =  [ &_16 <- v ] s2
      | s2 = get'0 {state} {_16} (fun (_ret':Option'0.t_option bool) ->  [ &_13 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = any [ br0 -> {_13 = Option'0.C_None } (! bb19) | br1 (a:bool)-> {_13 = Option'0.C_Some a} (! bb12) ] 
    | bb19 = s0
      [ s0 = clone'0 {state} (fun (_ret':BTreeMap'0.t_btreemap usize bool) ->  [ &state_t <- _ret' ] s1) | s1 = bb20 ]
      
    | bb20 = s0
      [ s0 = Borrow.borrow_mut <BTreeMap'0.t_btreemap usize bool> {state_t}
          (fun (_ret':borrowed (BTreeMap'0.t_btreemap usize bool)) ->  [ &_27 <- _ret' ]  [ &state_t <- _27.final ] s1)
      | s1 = insert'0 {_27} {v} {[%#site_normalize0] true} (fun (_ret':Option'0.t_option bool) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb21 ]
      
    | bb21 = s0
      [ s0 = -{resolve'0 t}- s1
      | s1 = simplify_helper {t} {state_t} (fun (_ret':Expr'0.t_expr) ->  [ &tp <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = s0
      [ s0 = clone'0 {state} (fun (_ret':BTreeMap'0.t_btreemap usize bool) ->  [ &state_e <- _ret' ] s1) | s1 = bb23 ]
      
    | bb23 = s0
      [ s0 = Borrow.borrow_mut <BTreeMap'0.t_btreemap usize bool> {state_e}
          (fun (_ret':borrowed (BTreeMap'0.t_btreemap usize bool)) ->  [ &_35 <- _ret' ]  [ &state_e <- _35.final ] s1)
      | s1 = insert'0 {_35} {v} {[%#site_normalize1] false}
          (fun (_ret':Option'0.t_option bool) ->  [ &_34 <- _ret' ] s2)
      | s2 = bb24 ]
      
    | bb24 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = simplify_helper {e} {state_e} (fun (_ret':Expr'0.t_expr) ->  [ &ep <- _ret' ] s2)
      | s2 = bb25 ]
      
    | bb25 = bb26
    | bb26 = bb27
    | bb27 = s0
      [ s0 =  [ &_0 <- Expr'0.C_IfThenElse c tp ep ] 
        (any
        [ any_ (_any:Expr'0.t_expr)-> (!  [ &c <- _any ] 
          (any
          [ any_ (_any:Expr'0.t_expr)-> (!  [ &tp <- _any ] 
            (any [ any_ (_any:Expr'0.t_expr)-> (!  [ &ep <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb28 ]
      
    | bb28 = bb29
    | bb29 = bb30
    | bb30 = bb31
    | bb31 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb34 = bb35
    | bb12 = bb13
    | bb13 = s0
      [ s0 = -{resolve'0 c}- s1
      | s1 = Option'0.some <bool> {_13} (fun (r0'0:bool) ->  [ &b <- r0'0 ] s2)
      | s2 = any [ br0 -> {b = false} (! bb16) | br1 -> {b} (! bb14) ]  ]
      
    | bb14 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = -{resolve'0 t}- s2
      | s2 = simplify_helper {t} {state} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb15 ]
      
    | bb15 = bb18
    | bb16 = s0
      [ s0 = -{resolve'0 t}- s1
      | s1 = -{resolve'0 e}- s2
      | s2 = simplify_helper {e} {state} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb17 ]
      
    | bb17 = bb18
    | bb18 = bb35
    | bb35 = bb38
    | bb38 = bb39
    | bb39 = bb40
    | bb40 = bb41
    | bb41 = bb52
    | bb52 = bb53
    | bb53 = bb54
    | bb54 = return' {_0} ]
    )
    [ & _0 : Expr'0.t_expr = any_l ()
    | & self : Expr'0.t_expr = self
    | & state : BTreeMap'0.t_btreemap usize bool = state
    | & c : Expr'0.t_expr = any_l ()
    | & t : Expr'0.t_expr = any_l ()
    | & e : Expr'0.t_expr = any_l ()
    | & v : usize = any_l ()
    | & _13 : Option'0.t_option bool = any_l ()
    | & _16 : usize = any_l ()
    | & b : bool = any_l ()
    | & state_t : BTreeMap'0.t_btreemap usize bool = any_l ()
    | & _26 : Option'0.t_option bool = any_l ()
    | & _27 : borrowed (BTreeMap'0.t_btreemap usize bool) = any_l ()
    | & tp : Expr'0.t_expr = any_l ()
    | & state_e : BTreeMap'0.t_btreemap usize bool = any_l ()
    | & _34 : Option'0.t_option bool = any_l ()
    | & _35 : borrowed (BTreeMap'0.t_btreemap usize bool) = any_l ()
    | & ep : Expr'0.t_expr = any_l ()
    | & c1 : Expr'0.t_expr = any_l ()
    | & v1 : usize = any_l ()
    | & _49 : Option'0.t_option bool = any_l ()
    | & _52 : usize = any_l ()
    | & b1 : bool = any_l ()
    | & c2 : Expr'0.t_expr = any_l () ]
    
    [ return' (result:Expr'0.t_expr)-> {[@expl:postcondition] [%#site_normalize4] is_simplified'0 result}
      {[@expl:postcondition] [%#site_normalize3] forall i : usize . (exists v : bool . Map.get (shallow_model'0 state) (UIntSize.to_int i)
      = Option'0.C_Some v)  -> does_not_contain'0 result i}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Simplify
  let%span site_normalize0 = "../ite_normalize.rs" 182 29 182 44
  
  let%span site_normalize1 = "../ite_normalize.rs" 179 15 179 35
  
  let%span site_normalize2 = "../ite_normalize.rs" 180 14 180 36
  
  let%span span3 = "../ite_normalize.rs" 170 8 176 9
  
  let%span span4 = "../ite_normalize.rs" 159 8 165 9
  
  let%span span5 = "../ite_normalize.rs" 127 8 140 9
  
  let%span span6 = "../ite_normalize.rs" 51 20 51 26
  
  let%span span7 = "../ite_normalize.rs" 185 15 185 35
  
  let%span span8 = "../ite_normalize.rs" 186 4 186 107
  
  let%span span9 = "../ite_normalize.rs" 187 14 187 36
  
  let%span span10 = "../ite_normalize.rs" 188 14 188 18
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate does_not_contain'0 [#"../ite_normalize.rs" 169 4 169 48] (self : Expr'0.t_expr) (vp : usize) =
    [%#span3] match self with
      | Expr'0.C_IfThenElse c t e -> does_not_contain'0 c vp /\ does_not_contain'0 t vp /\ does_not_contain'0 e vp
      | Expr'0.C_Var v -> v <> vp
      | _ -> true
      end
  
  predicate is_simplified'0 [#"../ite_normalize.rs" 158 4 158 34] (self : Expr'0.t_expr) =
    [%#span4] match self with
      | Expr'0.C_IfThenElse c t e -> match c with
        | Expr'0.C_Var v -> does_not_contain'0 t v /\ does_not_contain'0 e v
        | c -> is_simplified'0 c /\ is_simplified'0 t /\ is_simplified'0 e
        end
      | _ -> true
      end
  
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : Expr'0.t_expr) =
    [%#span5] match self with
      | Expr'0.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | Expr'0.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | Expr'0.C_Var _ -> true
      | Expr'0.C_True -> true
      | Expr'0.C_False -> true
      end
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  use map.Map
  
  use IteNormalize_BTreeMap_Type as BTreeMap'0
  
  use map.Map
  
  use prelude.prelude.UIntSize
  
  function shallow_model'0 [#"../ite_normalize.rs" 50 4 50 50] (self : BTreeMap'0.t_btreemap usize bool) : Map.map int (Option'0.t_option bool)
    
  
  let rec simplify_helper'0 (self:Expr'0.t_expr) (state:BTreeMap'0.t_btreemap usize bool) (return'  (ret:Expr'0.t_expr))= {[@expl:precondition] [%#span7] is_normalized'0 self}
    any
    [ return' (result:Expr'0.t_expr)-> {[%#span9] is_simplified'0 result}
      {[%#span8] forall i : usize . (exists v : bool . Map.get (shallow_model'0 state) (UIntSize.to_int i)
      = Option'0.C_Some v)  -> does_not_contain'0 result i}
      (! return' {result}) ]
    
  
  let rec new'0 (_1:()) (return'  (ret:BTreeMap'0.t_btreemap usize bool))= any
    [ return' (result:BTreeMap'0.t_btreemap usize bool)-> (! return' {result}) ]
    
  
  let rec simplify (self:Expr'0.t_expr) (return'  (ret:Expr'0.t_expr))= {[%#site_normalize1] is_normalized'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = new'0 {[%#site_normalize0] ()} (fun (_ret':BTreeMap'0.t_btreemap usize bool) ->  [ &_5 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = simplify_helper'0 {self} {_5} (fun (_ret':Expr'0.t_expr) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : Expr'0.t_expr = any_l ()
    | & self : Expr'0.t_expr = self
    | & _5 : BTreeMap'0.t_btreemap usize bool = any_l () ]
    
    [ return' (result:Expr'0.t_expr)-> {[@expl:postcondition] [%#site_normalize2] is_simplified'0 result}
      (! return' {result}) ]
    
end
module IteNormalize_Impl1
  type k
  
  type v
  
  let%span site_normalize0 = "../ite_normalize.rs" 39 4 39 27
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use IteNormalize_BTreeMap_Type as BTreeMap'0
  
  predicate invariant'1 (self : BTreeMap'0.t_btreemap k v) =
    [%#span1] true
  
  predicate inv'1 (_x : BTreeMap'0.t_btreemap k v)
  
  axiom inv'1 : forall x : BTreeMap'0.t_btreemap k v . inv'1 x = true
  
  predicate invariant'0 (self : BTreeMap'0.t_btreemap k v) =
    [%#span1] true
  
  predicate inv'0 (_x : BTreeMap'0.t_btreemap k v)
  
  axiom inv'0 : forall x : BTreeMap'0.t_btreemap k v . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  goal clone'_refn : [%#site_normalize0] forall self : BTreeMap'0.t_btreemap k v . inv'0 self
   -> (forall result : BTreeMap'0.t_btreemap k v . self = result  -> inv'1 result /\ result = self)
end
module IteNormalize_Impl6
  let%span site_normalize0 = "../ite_normalize.rs" 55 9 55 14
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate invariant'1 (self : Expr'0.t_expr) =
    [%#span1] true
  
  predicate inv'1 (_x : Expr'0.t_expr)
  
  axiom inv'1 : forall x : Expr'0.t_expr . inv'1 x = true
  
  predicate invariant'0 (self : Expr'0.t_expr) =
    [%#span1] true
  
  predicate inv'0 (_x : Expr'0.t_expr)
  
  axiom inv'0 : forall x : Expr'0.t_expr . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  goal clone'_refn : [%#site_normalize0] forall self : Expr'0.t_expr . inv'0 self
   -> (forall result : Expr'0.t_expr . result = self  -> inv'1 result /\ result = self)
end
module IteNormalize_Impl2
  type k
  
  type v
end
module IteNormalize_Impl7
  
end
module IteNormalize_Impl3
  let%span site_normalize0 = "../ite_normalize.rs" 80 4 80 29
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate invariant'1 (self : Expr'0.t_expr) =
    [%#span1] true
  
  predicate inv'1 (_x : Expr'0.t_expr)
  
  axiom inv'1 : forall x : Expr'0.t_expr . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'0 (self : usize) =
    [%#span1] true
  
  predicate inv'0 (_x : usize)
  
  axiom inv'0 : forall x : usize . inv'0 x = true
  
  use prelude.prelude.Int
  
  goal from_refn : [%#site_normalize0] forall value : usize . inv'0 value
   -> (forall result : Expr'0.t_expr . inv'1 result)
end
module IteNormalize_Impl4
  let%span site_normalize0 = "../ite_normalize.rs" 86 4 86 28
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  use IteNormalize_Expr_Type as Expr'0
  
  predicate invariant'1 (self : Expr'0.t_expr) =
    [%#span1] true
  
  predicate inv'1 (_x : Expr'0.t_expr)
  
  axiom inv'1 : forall x : Expr'0.t_expr . inv'1 x = true
  
  predicate invariant'0 (self : bool) =
    [%#span1] true
  
  predicate inv'0 (_x : bool)
  
  axiom inv'0 : forall x : bool . inv'0 x = true
  
  goal from_refn : [%#site_normalize0] forall value : bool . inv'0 value
   -> (forall result : Expr'0.t_expr . inv'1 result)
end
