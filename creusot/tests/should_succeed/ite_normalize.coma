module M_ite_normalize__qyi15119799284333837974__clone [#"ite_normalize.rs" 55 9 55 14] (* <Expr as creusot_contracts::Clone> *)
  let%span site_normalize0 = "ite_normalize.rs" 55 9 55 14
  let%span sclone1 = "../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span site_normalize2 = "ite_normalize.rs" 68 0 77 1
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  let rec v_Var'0 (input:t_Expr'0) (ret  (v:usize))= any
    [ good (v:usize)-> {C_Var'0 v = input} (! ret {v})
    | bad -> {forall v : usize [C_Var'0 v : t_Expr'0] . C_Var'0 v <> input} (! {false} any) ]
    
  
  use prelude.prelude.Borrow
  
  let rec clone'1 (self:usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {[%#sclone1] result = self} (! return' {result}) ]
    
  
  let rec v_IfThenElse'0 (input:t_Expr'0) (ret  (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0))= any
    [ good (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0)-> {C_IfThenElse'0 c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c : t_Expr'0, t : t_Expr'0, e : t_Expr'0 [C_IfThenElse'0 c t e : t_Expr'0] . C_IfThenElse'0 c t e
      <> input}
      (! {false}
      any) ]
    
  
  predicate inv'0 (_1 : t_Expr'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Expr'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_Expr'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Expr'0 [inv'1 x] . inv'1 x = true
  
  let rec clone'2 (self:t_Expr'0) (return'  (ret:t_Expr'0))= {[@expl:clone 'self' type invariant] inv'0 self}
    any [ return' (result:t_Expr'0)-> {inv'1 result} {[%#site_normalize2] result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec clone'0 (self:t_Expr'0) (return'  (ret:t_Expr'0))= (! bb0
    [ bb0 = any
      [ br0 (x0:t_Expr'0) (x1:t_Expr'0) (x2:t_Expr'0)-> {self = C_IfThenElse'0 x0 x1 x2} (! bb2)
      | br1 (x0:usize)-> {self = C_Var'0 x0} (! bb3)
      | br2 -> {self = C_True'0 } (! bb4)
      | br3 -> {self = C_False'0 } (! bb5) ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- C_False'0 ] s1 | s1 = bb16 ] 
    | bb4 = bb15
    | bb15 = s0 [ s0 =  [ &_0 <- C_True'0 ] s1 | s1 = bb16 ] 
    | bb3 = bb13
    | bb13 = s0
      [ s0 = v_Var'0 {self} (fun (rv'0:usize) ->  [ &v_1 <- rv'0 ] s1)
      | s1 =  [ &_19 <- v_1 ] s2
      | s2 = clone'1 {_19} (fun (_ret':usize) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0 [ s0 =  [ &_0 <- C_Var'0 _17 ] s1 | s1 = bb16 ] 
    | bb2 = bb6
    | bb6 = s0
      [ s0 = v_IfThenElse'0 {self} (fun (rc'0:t_Expr'0) (rt'0:t_Expr'0) (re'0:t_Expr'0) ->  [ &c_1 <- rc'0 ] s1)
      | s1 = v_IfThenElse'0 {self} (fun (rc'1:t_Expr'0) (rt'1:t_Expr'0) (re'1:t_Expr'0) ->  [ &t_1 <- rt'1 ] s2)
      | s2 = v_IfThenElse'0 {self} (fun (rc'2:t_Expr'0) (rt'2:t_Expr'0) (re'2:t_Expr'0) ->  [ &e_1 <- re'2 ] s3)
      | s3 =  [ &_9 <- c_1 ] s4
      | s4 = clone'2 {_9} (fun (_ret':t_Expr'0) ->  [ &_7 <- _ret' ] s5)
      | s5 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &_12 <- t_1 ] s1 | s1 = clone'2 {_12} (fun (_ret':t_Expr'0) ->  [ &_10 <- _ret' ] s2) | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &_15 <- e_1 ] s1 | s1 = clone'2 {_15} (fun (_ret':t_Expr'0) ->  [ &_13 <- _ret' ] s2) | s2 = bb9 ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- C_IfThenElse'0 _7 _10 _13 ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : t_Expr'0 = any_l ()
    | & self : t_Expr'0 = self
    | & c_1 : t_Expr'0 = any_l ()
    | & t_1 : t_Expr'0 = any_l ()
    | & e_1 : t_Expr'0 = any_l ()
    | & _7 : t_Expr'0 = any_l ()
    | & _9 : t_Expr'0 = any_l ()
    | & _10 : t_Expr'0 = any_l ()
    | & _12 : t_Expr'0 = any_l ()
    | & _13 : t_Expr'0 = any_l ()
    | & _15 : t_Expr'0 = any_l ()
    | & v_1 : usize = any_l ()
    | & _17 : usize = any_l ()
    | & _19 : usize = any_l () ]
     [ return' (result:t_Expr'0)-> {[@expl:clone ensures] [%#site_normalize0] result = self} (! return' {result}) ] 
end
module M_ite_normalize__qyi12210208226808281580__from [#"ite_normalize.rs" 80 4 80 29] (* <Expr as std::convert::From<usize>> *)
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  let rec variable'0 (v:usize) (return'  (ret:t_Expr'0))= any [ return' (result:t_Expr'0)-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec from'0 (a:usize) (return'  (ret:t_Expr'0))= (! bb0
    [ bb0 = s0 [ s0 = variable'0 {a} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : t_Expr'0 = any_l () | & a : usize = a ]  [ return' (result:t_Expr'0)-> (! return' {result}) ] 
end
module M_ite_normalize__qyi1874907776010341903__from [#"ite_normalize.rs" 86 4 86 28] (* <Expr as std::convert::From<bool>> *)
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec from'0 (b:bool) (return'  (ret:t_Expr'0))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_0 <- C_True'0 ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- C_False'0 ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : t_Expr'0 = any_l () | & b : bool = b ]  [ return' (result:t_Expr'0)-> (! return' {result}) ] 
end
module M_ite_normalize__qyi17570407315987535457__ite [#"ite_normalize.rs" 97 4 97 49] (* Expr *)
  let%span site_normalize0 = "ite_normalize.rs" 96 14 96 91
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec ite'0 (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0) (return'  (ret:t_Expr'0))= (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- C_IfThenElse'0 c t e ] s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return' {_0} ]
    ) [ & _0 : t_Expr'0 = any_l () | & c : t_Expr'0 = c | & t : t_Expr'0 = t | & e : t_Expr'0 = e ] 
    [ return' (result:t_Expr'0)-> {[@expl:ite ensures] [%#site_normalize0] result = C_IfThenElse'0 c t e}
      (! return' {result}) ]
    
end
module M_ite_normalize__qyi17570407315987535457__variable [#"ite_normalize.rs" 101 4 101 37] (* Expr *)
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec variable'0 (v:usize) (return'  (ret:t_Expr'0))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- C_Var'0 v ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : t_Expr'0 = any_l () | & v : usize = v ]  [ return' (result:t_Expr'0)-> (! return' {result}) ] 
end
module M_ite_normalize__qyi17570407315987535457__transpose [#"ite_normalize.rs" 110 4 110 52] (* Expr *)
  let%span site_normalize0 = "ite_normalize.rs" 105 15 105 35
  let%span site_normalize1 = "ite_normalize.rs" 106 15 106 32
  let%span site_normalize2 = "ite_normalize.rs" 107 15 107 32
  let%span site_normalize3 = "ite_normalize.rs" 108 14 108 36
  let%span site_normalize4 = "ite_normalize.rs" 109 14 109 18
  let%span site_normalize5 = "ite_normalize.rs" 55 9 55 14
  let%span site_normalize6 = "ite_normalize.rs" 127 8 140 9
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  let rec v_IfThenElse'0 (input:t_Expr'0) (ret  (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0))= any
    [ good (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0)-> {C_IfThenElse'0 c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c : t_Expr'0, t : t_Expr'0, e : t_Expr'0 [C_IfThenElse'0 c t e : t_Expr'0] . C_IfThenElse'0 c t e
      <> input}
      (! {false}
      any) ]
    
  
  use prelude.prelude.Borrow
  
  let rec clone'0 (self:t_Expr'0) (return'  (ret:t_Expr'0))= any
    [ return' (result:t_Expr'0)-> {[%#site_normalize5] result = self} (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate is_normalized'0 [#"ite_normalize.rs" 126 4 126 34] (self : t_Expr'0) =
    [%#site_normalize6] match self with
      | C_IfThenElse'0 c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | C_IfThenElse'0 _ _ _ -> false
        | _ -> true
        end
      | C_Var'0 _ -> true
      | C_True'0 -> true
      | C_False'0 -> true
      end
  
  meta "compute_max_steps" 1000000
  
  let rec transpose'0 (self:t_Expr'0) (a:t_Expr'0) (b:t_Expr'0) (return'  (ret:t_Expr'0))= {[@expl:transpose requires #0] [%#site_normalize0] is_normalized'0 self}
    {[@expl:transpose requires #1] [%#site_normalize1] is_normalized'0 a}
    {[@expl:transpose requires #2] [%#site_normalize2] is_normalized'0 b}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = any
      [ br0 (x0:t_Expr'0) (x1:t_Expr'0) (x2:t_Expr'0)-> {self = C_IfThenElse'0 x0 x1 x2} (! bb6)
      | br1 (x0:usize)-> {self = C_Var'0 x0} (! bb7)
      | br2 -> {self = C_True'0 } (! bb8)
      | br3 -> {self = C_False'0 } (! bb9) ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb31 ] 
    | bb8 = bb30
    | bb30 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb31 ] 
    | bb7 = bb23
    | bb23 = bb24
    | bb24 = bb25
    | bb25 = bb26
    | bb26 = s0 [ s0 =  [ &_0 <- C_IfThenElse'0 self a b ] s1 | s1 = bb27 ] 
    | bb27 = bb28
    | bb28 = bb29
    | bb29 = bb31
    | bb6 = bb10
    | bb10 = s0
      [ s0 = v_IfThenElse'0 {self} (fun (rc'0:t_Expr'0) (rt'0:t_Expr'0) (re'0:t_Expr'0) ->  [ &c <- rc'0 ] s1)
      | s1 = v_IfThenElse'0 {self} (fun (rc'1:t_Expr'0) (rt'1:t_Expr'0) (re'1:t_Expr'0) ->  [ &t <- rt'1 ] s2)
      | s2 = v_IfThenElse'0 {self} (fun (rc'2:t_Expr'0) (rt'2:t_Expr'0) (re'2:t_Expr'0) ->  [ &e <- re'2 ] s3)
      | s3 = clone'0 {a} (fun (_ret':t_Expr'0) ->  [ &_17 <- _ret' ] s4)
      | s4 = bb11 ]
      
    | bb11 = s0 [ s0 = clone'0 {b} (fun (_ret':t_Expr'0) ->  [ &_19 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0 [ s0 = transpose'0 {t} {_17} {_19} (fun (_ret':t_Expr'0) ->  [ &_15 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = bb14
    | bb14 = s0 [ s0 = transpose'0 {e} {a} {b} (fun (_ret':t_Expr'0) ->  [ &_22 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = bb16
    | bb16 = s0 [ s0 =  [ &_0 <- C_IfThenElse'0 c _15 _22 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = bb22
    | bb22 = bb31
    | bb31 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb34 = return' {_0} ]
    )
    [ & _0 : t_Expr'0 = any_l ()
    | & self : t_Expr'0 = self
    | & a : t_Expr'0 = a
    | & b : t_Expr'0 = b
    | & c : t_Expr'0 = any_l ()
    | & t : t_Expr'0 = any_l ()
    | & e : t_Expr'0 = any_l ()
    | & _15 : t_Expr'0 = any_l ()
    | & _17 : t_Expr'0 = any_l ()
    | & _19 : t_Expr'0 = any_l ()
    | & _22 : t_Expr'0 = any_l () ]
    
    [ return' (result:t_Expr'0)-> {[@expl:transpose ensures] [%#site_normalize3] is_normalized'0 result}
      (! return' {result}) ]
    
end
module M_ite_normalize__qyi17570407315987535457__normalize [#"ite_normalize.rs" 145 4 145 35] (* Expr *)
  let%span site_normalize0 = "ite_normalize.rs" 143 14 143 36
  let%span site_normalize1 = "ite_normalize.rs" 144 14 144 18
  let%span site_normalize2 = "ite_normalize.rs" 55 9 55 14
  let%span site_normalize3 = "ite_normalize.rs" 105 15 105 35
  let%span site_normalize4 = "ite_normalize.rs" 106 15 106 32
  let%span site_normalize5 = "ite_normalize.rs" 107 15 107 32
  let%span site_normalize6 = "ite_normalize.rs" 108 14 108 36
  let%span site_normalize7 = "ite_normalize.rs" 109 14 109 18
  let%span site_normalize8 = "ite_normalize.rs" 127 8 140 9
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  use prelude.prelude.Borrow
  
  let rec clone'0 (self:t_Expr'0) (return'  (ret:t_Expr'0))= any
    [ return' (result:t_Expr'0)-> {[%#site_normalize2] result = self} (! return' {result}) ]
    
  
  let rec v_IfThenElse'0 (input:t_Expr'0) (ret  (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0))= any
    [ good (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0)-> {C_IfThenElse'0 c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c : t_Expr'0, t : t_Expr'0, e : t_Expr'0 [C_IfThenElse'0 c t e : t_Expr'0] . C_IfThenElse'0 c t e
      <> input}
      (! {false}
      any) ]
    
  
  predicate is_normalized'0 [#"ite_normalize.rs" 126 4 126 34] (self : t_Expr'0) =
    [%#site_normalize8] match self with
      | C_IfThenElse'0 c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | C_IfThenElse'0 _ _ _ -> false
        | _ -> true
        end
      | C_Var'0 _ -> true
      | C_True'0 -> true
      | C_False'0 -> true
      end
  
  let rec transpose'0 (self:t_Expr'0) (a:t_Expr'0) (b:t_Expr'0) (return'  (ret:t_Expr'0))= {[@expl:transpose requires #0] [%#site_normalize3] is_normalized'0 self}
    {[@expl:transpose requires #1] [%#site_normalize4] is_normalized'0 a}
    {[@expl:transpose requires #2] [%#site_normalize5] is_normalized'0 b}
    any [ return' (result:t_Expr'0)-> {[%#site_normalize6] is_normalized'0 result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec normalize'0 (self:t_Expr'0) (return'  (ret:t_Expr'0))= (! bb0
    [ bb0 = any
      [ br0 (x0:t_Expr'0) (x1:t_Expr'0) (x2:t_Expr'0)-> {self = C_IfThenElse'0 x0 x1 x2} (! bb2)
      | br1 (x0:usize)-> {self = C_Var'0 x0} (! bb1)
      | br2 -> {self = C_True'0 } (! bb1)
      | br3 -> {self = C_False'0 } (! bb1) ]
      
    | bb1 = s0
      [ s0 =  [ &e1 <- self ] s1 | s1 = clone'0 {e1} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s2) | s2 = bb11 ]
      
    | bb11 = bb12
    | bb2 = bb3
    | bb3 = s0
      [ s0 = v_IfThenElse'0 {self} (fun (rc'0:t_Expr'0) (rt'0:t_Expr'0) (re'0:t_Expr'0) ->  [ &c <- rc'0 ] s1)
      | s1 = v_IfThenElse'0 {self} (fun (rc'1:t_Expr'0) (rt'1:t_Expr'0) (re'1:t_Expr'0) ->  [ &t <- rt'1 ] s2)
      | s2 = v_IfThenElse'0 {self} (fun (rc'2:t_Expr'0) (rt'2:t_Expr'0) (re'2:t_Expr'0) ->  [ &e <- re'2 ] s3)
      | s3 = normalize'0 {c} (fun (_ret':t_Expr'0) ->  [ &cp <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = s0 [ s0 = normalize'0 {t} (fun (_ret':t_Expr'0) ->  [ &tp <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = normalize'0 {e} (fun (_ret':t_Expr'0) ->  [ &ep <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = transpose'0 {cp} {tp} {ep} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : t_Expr'0 = any_l ()
    | & self : t_Expr'0 = self
    | & c : t_Expr'0 = any_l ()
    | & t : t_Expr'0 = any_l ()
    | & e : t_Expr'0 = any_l ()
    | & cp : t_Expr'0 = any_l ()
    | & tp : t_Expr'0 = any_l ()
    | & ep : t_Expr'0 = any_l ()
    | & e1 : t_Expr'0 = any_l () ]
    
    [ return' (result:t_Expr'0)-> {[@expl:normalize ensures] [%#site_normalize0] is_normalized'0 result}
      (! return' {result}) ]
    
end
module M_ite_normalize__qyi17570407315987535457__simplify [#"ite_normalize.rs" 181 4 181 33] (* Expr *)
  let%span site_normalize0 = "ite_normalize.rs" 182 29 182 44
  let%span site_normalize1 = "ite_normalize.rs" 179 15 179 35
  let%span site_normalize2 = "ite_normalize.rs" 180 14 180 36
  let%span site_normalize3 = "ite_normalize.rs" 185 15 185 35
  let%span site_normalize4 = "ite_normalize.rs" 186 14 186 105
  let%span site_normalize5 = "ite_normalize.rs" 187 14 187 36
  let%span site_normalize6 = "ite_normalize.rs" 188 14 188 18
  let%span site_normalize7 = "ite_normalize.rs" 127 8 140 9
  let%span site_normalize8 = "ite_normalize.rs" 159 8 165 9
  let%span site_normalize9 = "ite_normalize.rs" 170 8 176 9
  
  type t_BTreeMap'0
  
  let rec new'0 (_1:()) (return'  (ret:t_BTreeMap'0))= any [ return' (result:t_BTreeMap'0)-> (! return' {result}) ] 
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  predicate is_normalized'0 [#"ite_normalize.rs" 126 4 126 34] (self : t_Expr'0) =
    [%#site_normalize7] match self with
      | C_IfThenElse'0 c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | C_IfThenElse'0 _ _ _ -> false
        | _ -> true
        end
      | C_Var'0 _ -> true
      | C_True'0 -> true
      | C_False'0 -> true
      end
  
  use prelude.prelude.Int
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 bool
  
  use map.Map
  
  function view'0 [#"ite_normalize.rs" 50 4 50 33] (self : t_BTreeMap'0) : Map.map int (t_Option'0)
  
  use prelude.prelude.UIntSize
  
  use map.Map
  
  predicate does_not_contain'0 [#"ite_normalize.rs" 169 4 169 48] (self : t_Expr'0) (vp : usize) =
    [%#site_normalize9] match self with
      | C_IfThenElse'0 c t e -> does_not_contain'0 c vp /\ does_not_contain'0 t vp /\ does_not_contain'0 e vp
      | C_Var'0 v -> v <> vp
      | _ -> true
      end
  
  predicate is_simplified'0 [#"ite_normalize.rs" 158 4 158 34] (self : t_Expr'0) =
    [%#site_normalize8] match self with
      | C_IfThenElse'0 c t e -> match c with
        | C_Var'0 v -> does_not_contain'0 t v /\ does_not_contain'0 e v
        | c -> is_simplified'0 c /\ is_simplified'0 t /\ is_simplified'0 e
        end
      | _ -> true
      end
  
  let rec simplify_helper'0 (self:t_Expr'0) (state:t_BTreeMap'0) (return'  (ret:t_Expr'0))= {[@expl:simplify_helper requires] [%#site_normalize3] is_normalized'0 self}
    any
    [ return' (result:t_Expr'0)-> {[%#site_normalize4] forall i : usize . (exists v : bool . Map.get (view'0 state) (UIntSize.to_int i)
      = C_Some'0 v)  -> does_not_contain'0 result i}
      {[%#site_normalize5] is_simplified'0 result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec simplify'0 (self:t_Expr'0) (return'  (ret:t_Expr'0))= {[@expl:simplify requires] [%#site_normalize1] is_normalized'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = new'0 {[%#site_normalize0] ()} (fun (_ret':t_BTreeMap'0) ->  [ &_5 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = simplify_helper'0 {self} {_5} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : t_Expr'0 = any_l () | & self : t_Expr'0 = self | & _5 : t_BTreeMap'0 = any_l () ] 
    [ return' (result:t_Expr'0)-> {[@expl:simplify ensures] [%#site_normalize2] is_simplified'0 result}
      (! return' {result}) ]
    
end
module M_ite_normalize__qyi17570407315987535457__simplify_helper [#"ite_normalize.rs" 189 4 189 66] (* Expr *)
  let%span site_normalize0 = "ite_normalize.rs" 203 46 203 50
  let%span site_normalize1 = "ite_normalize.rs" 208 46 208 51
  let%span site_normalize2 = "ite_normalize.rs" 185 15 185 35
  let%span site_normalize3 = "ite_normalize.rs" 186 14 186 105
  let%span site_normalize4 = "ite_normalize.rs" 187 14 187 36
  let%span site_normalize5 = "ite_normalize.rs" 188 14 188 18
  let%span site_normalize6 = "ite_normalize.rs" 19 25 19 28
  let%span site_normalize7 = "ite_normalize.rs" 19 40 19 53
  let%span site_normalize8 = "ite_normalize.rs" 17 14 17 68
  let%span site_normalize9 = "ite_normalize.rs" 18 14 18 89
  let%span site_normalize10 = "ite_normalize.rs" 38 14 38 29
  let%span site_normalize11 = "ite_normalize.rs" 28 25 28 28
  let%span site_normalize12 = "ite_normalize.rs" 28 33 28 38
  let%span site_normalize13 = "ite_normalize.rs" 28 46 28 55
  let%span site_normalize14 = "ite_normalize.rs" 27 14 27 123
  let%span site_normalize15 = "ite_normalize.rs" 127 8 140 9
  let%span site_normalize16 = "ite_normalize.rs" 170 8 176 9
  let%span site_normalize17 = "ite_normalize.rs" 159 8 165 9
  let%span smodel18 = "../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span smodel19 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span snum20 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span smodel21 = "../../../creusot-contracts/src/model.rs" 110 8 110 22
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  let rec v_Var'0 (input:t_Expr'0) (ret  (v:usize))= any
    [ good (v:usize)-> {C_Var'0 v = input} (! ret {v})
    | bad -> {forall v : usize [C_Var'0 v : t_Expr'0] . C_Var'0 v <> input} (! {false} any) ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : usize [inv'0 x] . inv'0 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 bool
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  type t_BTreeMap'0
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 bool
  
  use map.Map
  
  function view'0 [#"ite_normalize.rs" 50 4 50 33] (self : t_BTreeMap'0) : Map.map int (t_Option'1)
  
  function view'1 (self : t_BTreeMap'0) : Map.map int (t_Option'1) =
    [%#smodel18] view'0 self
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#snum20] UIntSize.to_int self
  
  function deep_model'0 (self : usize) : int =
    [%#smodel19] deep_model'1 self
  
  use map.Map
  
  let rec get'0 (self:t_BTreeMap'0) (key:usize) (return'  (ret:t_Option'0))= {[@expl:get 'key' type invariant] [%#site_normalize6] inv'0 key}
    any
    [ return' (result:t_Option'0)-> {[%#site_normalize7] inv'1 result}
      {[%#site_normalize8] result = C_None'0  -> Map.get (view'1 self) (deep_model'0 key) = C_None'1}
      {[%#site_normalize9] forall v : bool . result = C_Some'0 v
       -> Map.get (view'1 self) (deep_model'0 key) = C_Some'1 v}
      (! return' {result}) ]
    
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:bool))= any
    [ good (field_0:bool)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : bool [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  let rec v_IfThenElse'0 (input:t_Expr'0) (ret  (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0))= any
    [ good (c:t_Expr'0) (t:t_Expr'0) (e:t_Expr'0)-> {C_IfThenElse'0 c t e = input} (! ret {c} {t} {e})
    | bad -> {forall c : t_Expr'0, t : t_Expr'0, e : t_Expr'0 [C_IfThenElse'0 c t e : t_Expr'0] . C_IfThenElse'0 c t e
      <> input}
      (! {false}
      any) ]
    
  
  let rec clone'0 (self:t_BTreeMap'0) (return'  (ret:t_BTreeMap'0))= any
    [ return' (result:t_BTreeMap'0)-> {[%#site_normalize10] self = result} (! return' {result}) ]
    
  
  predicate inv'2 (_1 : usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : bool)
  
  axiom inv_axiom'3 [@rewrite] : forall x : bool [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : t_Option'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'1 [inv'4 x] . inv'4 x = true
  
  function view'2 (self : borrowed (t_BTreeMap'0)) : Map.map int (t_Option'1) =
    [%#smodel21] view'0 self.current
  
  let rec insert'0 (self:borrowed (t_BTreeMap'0)) (key:usize) (value:bool) (return'  (ret:t_Option'1))= {[@expl:insert 'key' type invariant] [%#site_normalize11] inv'2 key}
    {[@expl:insert 'value' type invariant] [%#site_normalize12] inv'3 value}
    any
    [ return' (result:t_Option'1)-> {[%#site_normalize13] inv'4 result}
      {[%#site_normalize14] forall i : int . Map.get (view'0 self.final) i
      = (if i = deep_model'1 key then C_Some'1 value else Map.get (view'2 self) i)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate is_normalized'0 [#"ite_normalize.rs" 126 4 126 34] (self : t_Expr'0) =
    [%#site_normalize15] match self with
      | C_IfThenElse'0 c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | C_IfThenElse'0 _ _ _ -> false
        | _ -> true
        end
      | C_Var'0 _ -> true
      | C_True'0 -> true
      | C_False'0 -> true
      end
  
  predicate does_not_contain'0 [#"ite_normalize.rs" 169 4 169 48] (self : t_Expr'0) (vp : usize) =
    [%#site_normalize16] match self with
      | C_IfThenElse'0 c t e -> does_not_contain'0 c vp /\ does_not_contain'0 t vp /\ does_not_contain'0 e vp
      | C_Var'0 v -> v <> vp
      | _ -> true
      end
  
  predicate is_simplified'0 [#"ite_normalize.rs" 158 4 158 34] (self : t_Expr'0) =
    [%#site_normalize17] match self with
      | C_IfThenElse'0 c t e -> match c with
        | C_Var'0 v -> does_not_contain'0 t v /\ does_not_contain'0 e v
        | c -> is_simplified'0 c /\ is_simplified'0 t /\ is_simplified'0 e
        end
      | _ -> true
      end
  
  meta "compute_max_steps" 1000000
  
  let rec simplify_helper'0 (self:t_Expr'0) (state:t_BTreeMap'0) (return'  (ret:t_Expr'0))= {[@expl:simplify_helper requires] [%#site_normalize2] is_normalized'0 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = any
      [ br0 (x0:t_Expr'0) (x1:t_Expr'0) (x2:t_Expr'0)-> {self = C_IfThenElse'0 x0 x1 x2} (! bb5)
      | br1 (x0:usize)-> {self = C_Var'0 x0} (! bb6)
      | br2 -> {self = C_True'0 } (! bb4)
      | br3 -> {self = C_False'0 } (! bb4) ]
      
    | bb4 = s0 [ s0 =  [ &c2 <- self ] s1 | s1 =  [ &_0 <- c2 ] s2 | s2 = bb51 ] 
    | bb51 = bb52
    | bb6 = bb42
    | bb42 = s0
      [ s0 = v_Var'0 {self} (fun (rv'0:usize) ->  [ &v1 <- rv'0 ] s1)
      | s1 =  [ &_52 <- v1 ] s2
      | s2 = get'0 {state} {_52} (fun (_ret':t_Option'0) ->  [ &_49 <- _ret' ] s3)
      | s3 = bb43 ]
      
    | bb43 = any [ br0 -> {_49 = C_None'0 } (! bb49) | br1 (x0:bool)-> {_49 = C_Some'0 x0} (! bb44) ] 
    | bb49 = s0 [ s0 =  [ &_0 <- C_Var'0 v1 ] s1 | s1 = bb50 ] 
    | bb44 = bb45
    | bb45 = s0
      [ s0 = v_Some'0 {_49} (fun (r0'0:bool) ->  [ &b1 <- r0'0 ] s1)
      | s1 = any [ br0 -> {b1 = false} (! bb47) | br1 -> {b1} (! bb46) ]  ]
      
    | bb46 = s0 [ s0 =  [ &_0 <- C_True'0 ] s1 | s1 = bb48 ] 
    | bb47 = s0 [ s0 =  [ &_0 <- C_False'0 ] s1 | s1 = bb48 ] 
    | bb48 = bb50
    | bb50 = bb52
    | bb5 = bb7
    | bb7 = s0
      [ s0 = v_IfThenElse'0 {self} (fun (rc'0:t_Expr'0) (rt'0:t_Expr'0) (re'0:t_Expr'0) ->  [ &c <- rc'0 ] s1)
      | s1 = v_IfThenElse'0 {self} (fun (rc'1:t_Expr'0) (rt'1:t_Expr'0) (re'1:t_Expr'0) ->  [ &t <- rt'1 ] s2)
      | s2 = v_IfThenElse'0 {self} (fun (rc'2:t_Expr'0) (rt'2:t_Expr'0) (re'2:t_Expr'0) ->  [ &e <- re'2 ] s3)
      | s3 = any
        [ br0 (x0:t_Expr'0) (x1:t_Expr'0) (x2:t_Expr'0)-> {c = C_IfThenElse'0 x0 x1 x2} (! bb8)
        | br1 (x0:usize)-> {c = C_Var'0 x0} (! bb9)
        | br2 -> {c = C_True'0 } (! bb8)
        | br3 -> {c = C_False'0 } (! bb8) ]
         ]
      
    | bb8 = s0
      [ s0 =  [ &c1 <- c ] s1
      | s1 = simplify_helper'0 {c1} {state} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb36 ]
      
    | bb36 = bb37
    | bb37 = bb38
    | bb9 = bb10
    | bb10 = s0
      [ s0 = v_Var'0 {c} (fun (rv'0:usize) ->  [ &v <- rv'0 ] s1)
      | s1 =  [ &_16 <- v ] s2
      | s2 = get'0 {state} {_16} (fun (_ret':t_Option'0) ->  [ &_13 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = any [ br0 -> {_13 = C_None'0 } (! bb19) | br1 (x0:bool)-> {_13 = C_Some'0 x0} (! bb12) ] 
    | bb19 = s0 [ s0 = clone'0 {state} (fun (_ret':t_BTreeMap'0) ->  [ &state_t <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 = Borrow.borrow_mut <t_BTreeMap'0> {state_t}
          (fun (_ret':borrowed (t_BTreeMap'0)) ->  [ &_27 <- _ret' ]  [ &state_t <- _ret'.final ] s1)
      | s1 = insert'0 {_27} {v} {[%#site_normalize0] true} (fun (_ret':t_Option'1) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb21 ]
      
    | bb21 = s0 [ s0 = simplify_helper'0 {t} {state_t} (fun (_ret':t_Expr'0) ->  [ &tp <- _ret' ] s1) | s1 = bb22 ] 
    | bb22 = s0 [ s0 = clone'0 {state} (fun (_ret':t_BTreeMap'0) ->  [ &state_e <- _ret' ] s1) | s1 = bb23 ] 
    | bb23 = s0
      [ s0 = Borrow.borrow_mut <t_BTreeMap'0> {state_e}
          (fun (_ret':borrowed (t_BTreeMap'0)) ->  [ &_35 <- _ret' ]  [ &state_e <- _ret'.final ] s1)
      | s1 = insert'0 {_35} {v} {[%#site_normalize1] false} (fun (_ret':t_Option'1) ->  [ &_34 <- _ret' ] s2)
      | s2 = bb24 ]
      
    | bb24 = s0 [ s0 = simplify_helper'0 {e} {state_e} (fun (_ret':t_Expr'0) ->  [ &ep <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = bb26
    | bb26 = bb27
    | bb27 = s0 [ s0 =  [ &_0 <- C_IfThenElse'0 c tp ep ] s1 | s1 = bb28 ] 
    | bb28 = bb29
    | bb29 = bb30
    | bb30 = bb31
    | bb31 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb34 = bb35
    | bb12 = bb13
    | bb13 = s0
      [ s0 = v_Some'0 {_13} (fun (r0'0:bool) ->  [ &b <- r0'0 ] s1)
      | s1 = any [ br0 -> {b = false} (! bb16) | br1 -> {b} (! bb14) ]  ]
      
    | bb14 = s0 [ s0 = simplify_helper'0 {t} {state} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = bb18
    | bb16 = s0 [ s0 = simplify_helper'0 {e} {state} (fun (_ret':t_Expr'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = bb35
    | bb35 = bb38
    | bb38 = bb39
    | bb39 = bb40
    | bb40 = bb41
    | bb41 = bb52
    | bb52 = bb53
    | bb53 = bb54
    | bb54 = return' {_0} ]
    )
    [ & _0 : t_Expr'0 = any_l ()
    | & self : t_Expr'0 = self
    | & state : t_BTreeMap'0 = state
    | & c : t_Expr'0 = any_l ()
    | & t : t_Expr'0 = any_l ()
    | & e : t_Expr'0 = any_l ()
    | & v : usize = any_l ()
    | & _13 : t_Option'0 = any_l ()
    | & _16 : usize = any_l ()
    | & b : bool = any_l ()
    | & state_t : t_BTreeMap'0 = any_l ()
    | & _26 : t_Option'1 = any_l ()
    | & _27 : borrowed (t_BTreeMap'0) = any_l ()
    | & tp : t_Expr'0 = any_l ()
    | & state_e : t_BTreeMap'0 = any_l ()
    | & _34 : t_Option'1 = any_l ()
    | & _35 : borrowed (t_BTreeMap'0) = any_l ()
    | & ep : t_Expr'0 = any_l ()
    | & c1 : t_Expr'0 = any_l ()
    | & v1 : usize = any_l ()
    | & _49 : t_Option'0 = any_l ()
    | & _52 : usize = any_l ()
    | & b1 : bool = any_l ()
    | & c2 : t_Expr'0 = any_l () ]
    
    [ return' (result:t_Expr'0)-> {[@expl:simplify_helper ensures #0] [%#site_normalize3] forall i : usize . (exists v : bool . Map.get (view'0 state) (UIntSize.to_int i)
      = C_Some'1 v)  -> does_not_contain'0 result i}
      {[@expl:simplify_helper ensures #1] [%#site_normalize4] is_simplified'0 result}
      (! return' {result}) ]
    
end
module M_ite_normalize__qyi5188891200283381660__clone__refines [#"ite_normalize.rs" 39 4 39 27] (* <BTreeMap<K, V> as creusot_contracts::Clone> *)
  let%span site_normalize0 = "ite_normalize.rs" 39 4 39 27
  
  use prelude.prelude.Borrow
  
  type t_BTreeMap'0
  
  predicate inv'0 (_1 : t_BTreeMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_BTreeMap'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_BTreeMap'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_BTreeMap'0 [inv'1 x] . inv'1 x = true
  
  goal refines : [%#site_normalize0] forall self : t_BTreeMap'0 . inv'0 self
   -> (forall result : t_BTreeMap'0 . self = result  -> result = self /\ inv'1 result)
end
module M_ite_normalize__qyi15119799284333837974__clone__refines [#"ite_normalize.rs" 55 9 55 14] (* <Expr as creusot_contracts::Clone> *)
  let%span site_normalize0 = "ite_normalize.rs" 55 9 55 14
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UIntSize
  
  type t_Expr'0  =
    | C_IfThenElse'0 (t_Expr'0) (t_Expr'0) (t_Expr'0)
    | C_Var'0 usize
    | C_True'0
    | C_False'0
  
  predicate inv'0 (_1 : t_Expr'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Expr'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_Expr'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Expr'0 [inv'1 x] . inv'1 x = true
  
  goal refines : [%#site_normalize0] forall self : t_Expr'0 . inv'0 self
   -> (forall result : t_Expr'0 . result = self  -> result = self /\ inv'1 result)
end
module M_ite_normalize__qyi12210208226808281580__from__refines [#"ite_normalize.rs" 80 4 80 29] (* <Expr as std::convert::From<usize>> *)
  let%span site_normalize0 = "ite_normalize.rs" 80 4 80 29
  
  goal refines : [%#site_normalize0] true
end
module M_ite_normalize__qyi1874907776010341903__from__refines [#"ite_normalize.rs" 86 4 86 28] (* <Expr as std::convert::From<bool>> *)
  let%span site_normalize0 = "ite_normalize.rs" 86 4 86 28
  
  goal refines : [%#site_normalize0] true
end
