
module IteNormalize_BTreeMap_Type
  type t_btreemap 'k 'v
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module IteNormalize_Expr_Type
  use prelude.UIntSize
  use prelude.Int
  type t_expr  =
    | C_IfThenElse (t_expr) (t_expr) (t_expr)
    | C_Var usize
    | C_True
    | C_False
    
  function any_l (_ : 'b) : 'a
  let rec if_then_else (input:t_expr) (ret  (c:t_expr) (t:t_expr) (e:t_expr))= any
    [ good (c:t_expr) (t:t_expr) (e:t_expr)-> {C_IfThenElse c t e = input} (! ret {c} {t} {e})
    | bad (c:t_expr) (t:t_expr) (e:t_expr)-> {C_IfThenElse c t e <> input} {false} any ]
    
  let rec var' (input:t_expr) (ret  (v:usize))= any
    [ good (v:usize)-> {C_Var v = input} (! ret {v}) | bad (v:usize)-> {C_Var v <> input} {false} any ]
    
  let rec true' (input:t_expr) (ret  )= any
    [ good -> {C_True  = input} (! ret) | bad -> {C_True  <> input} {false} any ]
    
  let rec false' (input:t_expr) (ret  )= any
    [ good -> {C_False  = input} (! ret) | bad -> {C_False  <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
  function any_l (_ : 'b) : 'a
end
module IteNormalize_Impl6_Clone
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant'1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : IteNormalize_Expr_Type.t_expr)
  let rec inv'1 (_x:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv'1 : forall x : IteNormalize_Expr_Type.t_expr . inv'1 x = true
  predicate invariant'0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : IteNormalize_Expr_Type.t_expr)
  let rec inv'0 (_x:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : IteNormalize_Expr_Type.t_expr . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  let rec clone'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {inv'1 result}
      {[#"../ite_normalize.rs" 68 0 77 1] result = self}
      (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  let rec clone'0 (self:usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {[#"../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self}
      (! return' {result}) ]
    
  let rec clone' (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (c:IteNormalize_Expr_Type.t_expr)-> {self
          = IteNormalize_Expr_Type.C_IfThenElse a b c}
          (! bb2)
        | br1 (a:usize)-> {self = IteNormalize_Expr_Type.C_Var a} (! bb3)
        | br2 -> {self = IteNormalize_Expr_Type.C_True } (! bb4)
        | br3 -> {self = IteNormalize_Expr_Type.C_False } (! bb5) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../ite_normalize.rs" 55 9 55 14] false} any ] 
    | bb5 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_False ] s1 | s1 = bb16 ] 
    | bb4 = s0 [ s0 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_True ] s1 | s1 = bb16 ] 
    | bb3 = s0 [ s0 = bb13 ] 
    | bb13 = s0
      [ s0 = IteNormalize_Expr_Type.var' {self} (fun (rv'0:usize) ->  [ &v_1 <- rv'0 ] s1)
      | s1 =  [ &_19 <- v_1 ] s2
      | s2 = clone'0 {_19} (fun (_ret':usize) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_Var _17 ] (any [ any_ (_any:usize)-> (!  [ &_17 <- _any ] s1) ] )
      | s1 = bb16 ]
      
    | bb2 = s0 [ s0 = bb6 ] 
    | bb6 = s0
      [ s0 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'0:IteNormalize_Expr_Type.t_expr) (rt'0:IteNormalize_Expr_Type.t_expr) (re'0:IteNormalize_Expr_Type.t_expr) ->
             [ &c_1 <- rc'0 ] 
            s1)
      | s1 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'1:IteNormalize_Expr_Type.t_expr) (rt'1:IteNormalize_Expr_Type.t_expr) (re'1:IteNormalize_Expr_Type.t_expr) ->
             [ &t_1 <- rt'1 ] 
            s2)
      | s2 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'2:IteNormalize_Expr_Type.t_expr) (rt'2:IteNormalize_Expr_Type.t_expr) (re'2:IteNormalize_Expr_Type.t_expr) ->
             [ &e_1 <- re'2 ] 
            s3)
      | s3 =  [ &_9 <- c_1 ] s4
      | s4 = clone'1 {_9} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_7 <- _ret' ] s5)
      | s5 = bb7 ]
      
    | bb7 = s0
      [ s0 =  [ &_12 <- t_1 ] s1
      | s1 = clone'1 {_12} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &_15 <- e_1 ] s1
      | s1 = clone'1 {_15} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_IfThenElse _7 _10 _13 ] 
        (any
        [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &_7 <- _any ] 
          (any
          [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &_10 <- _any ] 
            (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &_13 <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = bb11 ] 
    | bb11 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = bb16 ] 
    | bb16 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & self : IteNormalize_Expr_Type.t_expr = self
    | & c_1 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & t_1 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & e_1 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _7 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _9 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _10 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _12 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _13 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _15 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & v_1 : usize = any_l () : usize
    | & _17 : usize = any_l () : usize
    | & _19 : usize = any_l () : usize ]
    
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[@expl:postcondition] [#"../ite_normalize.rs" 55 9 55 14] result
      = self}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Variable
  use prelude.UIntSize
  use prelude.Int
  use prelude.Intrinsic
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec variable (v:usize) (return'  (ret:IteNormalize_Expr_Type.t_expr))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_Var v ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr | & v : usize = v ] 
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> (! return' {result}) ]
    
end
module IteNormalize_Impl3_From
  use prelude.UIntSize
  use prelude.Int
  use prelude.Intrinsic
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec variable'0 (v:usize) (return'  (ret:IteNormalize_Expr_Type.t_expr))= any
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> (! return' {result}) ]
    
  let rec from (a:usize) (return'  (ret:IteNormalize_Expr_Type.t_expr))= (! bb0
    [ bb0 = s0 [ s0 = variable'0 {a} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr | & a : usize = a ] 
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> (! return' {result}) ]
    
end
module IteNormalize_Impl4_From
  use prelude.Intrinsic
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec from (b:bool) (return'  (ret:IteNormalize_Expr_Type.t_expr))= (! bb0
    [ bb0 = s0 [ s0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ]  ] 
    | bb1 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_True ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_False ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr | & b : bool = b ] 
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> (! return' {result}) ]
    
end
module IteNormalize_Impl5_Ite
  use prelude.Intrinsic
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  let rec ite (c:IteNormalize_Expr_Type.t_expr) (t:IteNormalize_Expr_Type.t_expr) (e:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_IfThenElse c t e ] 
        (any
        [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &c <- _any ] 
          (any
          [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &t <- _any ] 
            (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &e <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = bb7 ] 
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & c : IteNormalize_Expr_Type.t_expr = c
    | & t : IteNormalize_Expr_Type.t_expr = t
    | & e : IteNormalize_Expr_Type.t_expr = e ]
    
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[@expl:postcondition] [#"../ite_normalize.rs" 96 14 96 91] result
      = IteNormalize_Expr_Type.C_IfThenElse c t e}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Transpose
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  let rec is_normalized'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_normalized'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Borrow
  let rec clone'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= any
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[#"../ite_normalize.rs" 55 9 55 14] result = self}
      (! return' {result}) ]
    
  predicate resolve'1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 35 8 35 31] resolve'1 self
  let rec resolve'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  let rec transpose (self:IteNormalize_Expr_Type.t_expr) (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= {[#"../ite_normalize.rs" 107 15 107 32] is_normalized'0 b}
    {[#"../ite_normalize.rs" 106 15 106 32] is_normalized'0 a}
    {[#"../ite_normalize.rs" 105 15 105 35] is_normalized'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = any
        [ br0 (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (c:IteNormalize_Expr_Type.t_expr)-> {self
          = IteNormalize_Expr_Type.C_IfThenElse a b c}
          (! bb6)
        | br1 (a:usize)-> {self = IteNormalize_Expr_Type.C_Var a} (! bb7)
        | br2 -> {self = IteNormalize_Expr_Type.C_True } (! bb8)
        | br3 -> {self = IteNormalize_Expr_Type.C_False } (! bb9) ]
         ]
      
    | bb5 = s0 [ s0 = {[#"../ite_normalize.rs" 111 14 111 18] false} any ] 
    | bb9 = s0
      [ s0 =  [ &_0 <- b ] (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &b <- _any ] s1) ] ) | s1 = bb31 ]
      
    | bb8 = s0 [ s0 = bb30 ] 
    | bb30 = s0
      [ s0 =  [ &_0 <- a ] (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &a <- _any ] s1) ] ) | s1 = bb31 ]
      
    | bb7 = s0 [ s0 = bb23 ] 
    | bb23 = s0 [ s0 = bb24 ] 
    | bb24 = s0 [ s0 = bb25 ] 
    | bb25 = s0 [ s0 = bb26 ] 
    | bb26 = s0
      [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_IfThenElse self a b ] 
        (any
        [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &self <- _any ] 
          (any
          [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &a <- _any ] 
            (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &b <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb27 ]
      
    | bb27 = s0 [ s0 = bb28 ] 
    | bb28 = s0 [ s0 = bb29 ] 
    | bb29 = s0 [ s0 = bb31 ] 
    | bb6 = s0 [ s0 = bb10 ] 
    | bb10 = s0
      [ s0 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'0:IteNormalize_Expr_Type.t_expr) (rt'0:IteNormalize_Expr_Type.t_expr) (re'0:IteNormalize_Expr_Type.t_expr) ->
             [ &c <- rc'0 ] 
            (any
            [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (! IteNormalize_Expr_Type.if_then_else {self}
                (fun (l_c'0:IteNormalize_Expr_Type.t_expr) (l_t'0:IteNormalize_Expr_Type.t_expr) (l_e'0:IteNormalize_Expr_Type.t_expr) ->
                   [ &self <- IteNormalize_Expr_Type.C_IfThenElse _any l_t'0 l_e'0 : IteNormalize_Expr_Type.t_expr ] 
                  s1)) ]
            ))
      | s1 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'1:IteNormalize_Expr_Type.t_expr) (rt'1:IteNormalize_Expr_Type.t_expr) (re'1:IteNormalize_Expr_Type.t_expr) ->
             [ &t <- rt'1 ] 
            (any
            [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (! IteNormalize_Expr_Type.if_then_else {self}
                (fun (l_c'1:IteNormalize_Expr_Type.t_expr) (l_t'1:IteNormalize_Expr_Type.t_expr) (l_e'1:IteNormalize_Expr_Type.t_expr) ->
                   [ &self <- IteNormalize_Expr_Type.C_IfThenElse l_c'1 _any l_e'1 : IteNormalize_Expr_Type.t_expr ] 
                  s2)) ]
            ))
      | s2 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'2:IteNormalize_Expr_Type.t_expr) (rt'2:IteNormalize_Expr_Type.t_expr) (re'2:IteNormalize_Expr_Type.t_expr) ->
             [ &e <- re'2 ] 
            (any
            [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (! IteNormalize_Expr_Type.if_then_else {self}
                (fun (l_c'2:IteNormalize_Expr_Type.t_expr) (l_t'2:IteNormalize_Expr_Type.t_expr) (l_e'2:IteNormalize_Expr_Type.t_expr) ->
                   [ &self <- IteNormalize_Expr_Type.C_IfThenElse l_c'2 l_t'2 _any : IteNormalize_Expr_Type.t_expr ] 
                  s3)) ]
            ))
      | s3 = -{resolve'0 t}- s4
      | s4 = clone'0 {a} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_17 <- _ret' ] s5)
      | s5 = bb11 ]
      
    | bb11 = s0 [ s0 = clone'0 {b} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_19 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 = transpose {t} {_17} {_19} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_15 <- _ret' ] s1)
      | s1 = bb13 ]
      
    | bb13 = s0 [ s0 = bb14 ] 
    | bb14 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = transpose {e} {a} {b} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0 [ s0 = bb16 ] 
    | bb16 = s0
      [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_IfThenElse c _15 _22 ] 
        (any
        [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &c <- _any ] 
          (any
          [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &_15 <- _any ] 
            (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &_22 <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb17 ]
      
    | bb17 = s0 [ s0 = bb18 ] 
    | bb18 = s0 [ s0 = bb19 ] 
    | bb19 = s0 [ s0 = bb20 ] 
    | bb20 = s0 [ s0 = bb21 ] 
    | bb21 = s0 [ s0 = bb22 ] 
    | bb22 = s0 [ s0 = bb31 ] 
    | bb31 = s0 [ s0 = bb32 ] 
    | bb32 = s0 [ s0 = bb33 ] 
    | bb33 = s0 [ s0 = bb34 ] 
    | bb34 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & self : IteNormalize_Expr_Type.t_expr = self
    | & a : IteNormalize_Expr_Type.t_expr = a
    | & b : IteNormalize_Expr_Type.t_expr = b
    | & c : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & t : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & e : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _15 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _17 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _19 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & _22 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr ]
    
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[@expl:postcondition] [#"../ite_normalize.rs" 108 14 108 36] is_normalized'0 result}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Normalize
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  let rec is_normalized'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_normalized'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Intrinsic
  let rec transpose'0 (self:IteNormalize_Expr_Type.t_expr) (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= {[@expl:precondition] [#"../ite_normalize.rs" 107 15 107 32] is_normalized'0 b}
    {[@expl:precondition] [#"../ite_normalize.rs" 106 15 106 32] is_normalized'0 a}
    {[@expl:precondition] [#"../ite_normalize.rs" 105 15 105 35] is_normalized'0 self}
    any
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[#"../ite_normalize.rs" 108 14 108 36] is_normalized'0 result}
      (! return' {result}) ]
    
  let rec clone'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= any
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[#"../ite_normalize.rs" 55 9 55 14] result = self}
      (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  let rec normalize (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (c:IteNormalize_Expr_Type.t_expr)-> {self
          = IteNormalize_Expr_Type.C_IfThenElse a b c}
          (! bb2)
        | br1 (a:usize)-> {self = IteNormalize_Expr_Type.C_Var a} (! bb1)
        | br2 -> {self = IteNormalize_Expr_Type.C_True } (! bb1)
        | br3 -> {self = IteNormalize_Expr_Type.C_False } (! bb1) ]
         ]
      
    | bb1 = s0
      [ s0 =  [ &e1 <- self ] s1
      | s1 = clone'0 {e1} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0 [ s0 = bb12 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0
      [ s0 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'0:IteNormalize_Expr_Type.t_expr) (rt'0:IteNormalize_Expr_Type.t_expr) (re'0:IteNormalize_Expr_Type.t_expr) ->
             [ &c <- rc'0 ] 
            s1)
      | s1 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'1:IteNormalize_Expr_Type.t_expr) (rt'1:IteNormalize_Expr_Type.t_expr) (re'1:IteNormalize_Expr_Type.t_expr) ->
             [ &t <- rt'1 ] 
            s2)
      | s2 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'2:IteNormalize_Expr_Type.t_expr) (rt'2:IteNormalize_Expr_Type.t_expr) (re'2:IteNormalize_Expr_Type.t_expr) ->
             [ &e <- re'2 ] 
            s3)
      | s3 = normalize {c} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &cp <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = s0 [ s0 = normalize {t} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &tp <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = normalize {e} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &ep <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 = transpose'0 {cp} {tp} {ep} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s1) | s1 = bb7 ]
      
    | bb7 = s0 [ s0 = bb8 ] 
    | bb8 = s0 [ s0 = bb9 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0 [ s0 = bb12 ] 
    | bb12 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & self : IteNormalize_Expr_Type.t_expr = self
    | & c : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & t : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & e : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & cp : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & tp : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & ep : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & e1 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr ]
    
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[@expl:postcondition] [#"../ite_normalize.rs" 143 14 143 36] is_normalized'0 result}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_SimplifyHelper
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'6 (self : Core_Option_Option_Type.t_option bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Core_Option_Option_Type.t_option bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Core_Option_Option_Type.t_option bool)
  let rec inv'6 (_x:Core_Option_Option_Type.t_option bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Core_Option_Option_Type.t_option bool . inv'6 x = true
  use prelude.Int
  predicate invariant'5 (self : int) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : int)
  let rec inv'5 (_x:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : int . inv'5 x = true
  predicate invariant'4 (self : bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : bool)
  let rec inv'4 (_x:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : bool . inv'4 x = true
  use prelude.UIntSize
  predicate invariant'3 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : usize)
  let rec inv'3 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : usize . inv'3 x = true
  predicate invariant'2 (self : Core_Option_Option_Type.t_option bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Option_Option_Type.t_option bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option bool)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option bool . inv'2 x = true
  predicate invariant'1 (self : bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : bool)
  let rec inv'1 (_x:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : bool . inv'1 x = true
  predicate invariant'0 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : usize)
  let rec inv'0 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : usize . inv'0 x = true
  use prelude.Int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain'0 [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
   =
    [#"../ite_normalize.rs" 170 8 176 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> does_not_contain'0 c vp
      /\ does_not_contain'0 t vp /\ does_not_contain'0 e vp
      | IteNormalize_Expr_Type.C_Var v -> v <> vp
      | _ -> true
      end
  let rec does_not_contain'0 (self:IteNormalize_Expr_Type.t_expr) (vp:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = does_not_contain'0 self vp} (! return' {result}) ]
    
  predicate is_simplified'0 [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 159 8 165 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> match c with
        | IteNormalize_Expr_Type.C_Var v -> does_not_contain'0 t v /\ does_not_contain'0 e v
        | c -> is_simplified'0 c /\ is_simplified'0 t /\ is_simplified'0 e
        end
      | _ -> true
      end
  let rec is_simplified'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_simplified'0 self} (! return' {result}) ]
    
  use map.Map
  use prelude.UIntSize
  use map.Map
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  function shallow_model'0 [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    
  let rec shallow_model'0 (self:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (return'  (ret:Map.map int (Core_Option_Option_Type.t_option bool)))= any
    [ return' (result:Map.map int (Core_Option_Option_Type.t_option bool))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  let rec is_normalized'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_normalized'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Borrow
  function shallow_model'2 (self : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) : Map.map int (Core_Option_Option_Type.t_option bool)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 108 8 108 31] shallow_model'0 ( * self)
  let rec shallow_model'2 (self:borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) (return'  (ret:Map.map int (Core_Option_Option_Type.t_option bool)))= any
    [ return' (result:Map.map int (Core_Option_Option_Type.t_option bool))-> {result = shallow_model'2 self}
      (! return' {result}) ]
    
  function deep_model'1 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  let rec deep_model'1 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'1 self} (! return' {result}) ]
    
  let rec insert'0 (self:borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) (key:usize) (value:bool) (return'  (ret:Core_Option_Option_Type.t_option bool))= {[@expl:precondition] [#"../ite_normalize.rs" 28 33 28 38] inv'4 value}
    {[@expl:precondition] [#"../ite_normalize.rs" 28 25 28 28] inv'3 key}
    any
    [ return' (result:Core_Option_Option_Type.t_option bool)-> {[#"../ite_normalize.rs" 28 46 28 55] inv'6 result}
      {[#"../ite_normalize.rs" 27 4 27 125] forall i : int . inv'5 i
       -> Map.get (shallow_model'0 ( ^ self)) i
      = (if i = deep_model'1 key then Core_Option_Option_Type.C_Some value else Map.get (shallow_model'2 self) i)}
      (! return' {result}) ]
    
  let rec clone'0 (self:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (return'  (ret:IteNormalize_BTreeMap_Type.t_btreemap usize bool))= any
    [ return' (result:IteNormalize_BTreeMap_Type.t_btreemap usize bool)-> {[#"../ite_normalize.rs" 38 14 38 29] self
      = result}
      (! return' {result}) ]
    
  predicate resolve'1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/resolve.rs" 35 8 35 31] resolve'1 self
  let rec resolve'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  function deep_model'0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  function shallow_model'1 (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'1 (self:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (return'  (ret:Map.map int (Core_Option_Option_Type.t_option bool)))= any
    [ return' (result:Map.map int (Core_Option_Option_Type.t_option bool))-> {result = shallow_model'1 self}
      (! return' {result}) ]
    
  let rec get'0 (self:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (key:usize) (return'  (ret:Core_Option_Option_Type.t_option bool))= {[@expl:precondition] [#"../ite_normalize.rs" 19 25 19 28] inv'0 key}
    any
    [ return' (result:Core_Option_Option_Type.t_option bool)-> {[#"../ite_normalize.rs" 19 40 19 53] inv'2 result}
      {[#"../ite_normalize.rs" 18 4 18 91] forall v : bool . inv'1 v
       -> result = Core_Option_Option_Type.C_Some v
       -> Map.get (shallow_model'1 self) (deep_model'0 key) = Core_Option_Option_Type.C_Some v}
      {[#"../ite_normalize.rs" 17 4 17 70] result = Core_Option_Option_Type.C_None
       -> Map.get (shallow_model'1 self) (deep_model'0 key) = Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
  let rec simplify_helper (self:IteNormalize_Expr_Type.t_expr) (state:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (return'  (ret:IteNormalize_Expr_Type.t_expr))= {[#"../ite_normalize.rs" 185 15 185 35] is_normalized'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = s0 [ s0 = bb3 ] 
    | bb3 = s0
      [ s0 = any
        [ br0 (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (c:IteNormalize_Expr_Type.t_expr)-> {self
          = IteNormalize_Expr_Type.C_IfThenElse a b c}
          (! bb5)
        | br1 (a:usize)-> {self = IteNormalize_Expr_Type.C_Var a} (! bb6)
        | br2 -> {self = IteNormalize_Expr_Type.C_True } (! bb4)
        | br3 -> {self = IteNormalize_Expr_Type.C_False } (! bb4) ]
         ]
      
    | bb4 = s0
      [ s0 =  [ &c2 <- self ] (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &self <- _any ] s1) ] )
      | s1 =  [ &_0 <- c2 ] (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &c2 <- _any ] s2) ] )
      | s2 = bb51 ]
      
    | bb51 = s0 [ s0 = bb52 ] 
    | bb6 = s0 [ s0 = bb42 ] 
    | bb42 = s0
      [ s0 = IteNormalize_Expr_Type.var' {self} (fun (rv'0:usize) ->  [ &v1 <- rv'0 ] s1)
      | s1 =  [ &_52 <- v1 ] s2
      | s2 = get'0 {state} {_52} (fun (_ret':Core_Option_Option_Type.t_option bool) ->  [ &_49 <- _ret' ] s3)
      | s3 = bb43 ]
      
    | bb43 = s0
      [ s0 = any
        [ br0 -> {_49 = Core_Option_Option_Type.C_None } (! bb49)
        | br1 (a:bool)-> {_49 = Core_Option_Option_Type.C_Some a} (! bb44) ]
         ]
      
    | bb49 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_Var v1 ] s1 | s1 = bb50 ] 
    | bb44 = s0 [ s0 = bb45 ] 
    | bb45 = s0
      [ s0 = Core_Option_Option_Type.some <bool> {_49} (fun (r0'0:bool) ->  [ &b1 <- r0'0 ] s1)
      | s1 = any [ br0 -> {b1 = false} (! bb47) | br1 -> {b1} (! bb46) ]  ]
      
    | bb46 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_True ] s1 | s1 = bb48 ] 
    | bb47 = s0 [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_False ] s1 | s1 = bb48 ] 
    | bb48 = s0 [ s0 = bb50 ] 
    | bb50 = s0 [ s0 = bb52 ] 
    | bb5 = s0 [ s0 = bb7 ] 
    | bb7 = s0
      [ s0 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'0:IteNormalize_Expr_Type.t_expr) (rt'0:IteNormalize_Expr_Type.t_expr) (re'0:IteNormalize_Expr_Type.t_expr) ->
             [ &c <- rc'0 ] 
            (any
            [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (! IteNormalize_Expr_Type.if_then_else {self}
                (fun (l_c'0:IteNormalize_Expr_Type.t_expr) (l_t'0:IteNormalize_Expr_Type.t_expr) (l_e'0:IteNormalize_Expr_Type.t_expr) ->
                   [ &self <- IteNormalize_Expr_Type.C_IfThenElse _any l_t'0 l_e'0 : IteNormalize_Expr_Type.t_expr ] 
                  s1)) ]
            ))
      | s1 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'1:IteNormalize_Expr_Type.t_expr) (rt'1:IteNormalize_Expr_Type.t_expr) (re'1:IteNormalize_Expr_Type.t_expr) ->
             [ &t <- rt'1 ] 
            (any
            [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (! IteNormalize_Expr_Type.if_then_else {self}
                (fun (l_c'1:IteNormalize_Expr_Type.t_expr) (l_t'1:IteNormalize_Expr_Type.t_expr) (l_e'1:IteNormalize_Expr_Type.t_expr) ->
                   [ &self <- IteNormalize_Expr_Type.C_IfThenElse l_c'1 _any l_e'1 : IteNormalize_Expr_Type.t_expr ] 
                  s2)) ]
            ))
      | s2 = IteNormalize_Expr_Type.if_then_else {self}
          (fun (rc'2:IteNormalize_Expr_Type.t_expr) (rt'2:IteNormalize_Expr_Type.t_expr) (re'2:IteNormalize_Expr_Type.t_expr) ->
             [ &e <- re'2 ] 
            (any
            [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (! IteNormalize_Expr_Type.if_then_else {self}
                (fun (l_c'2:IteNormalize_Expr_Type.t_expr) (l_t'2:IteNormalize_Expr_Type.t_expr) (l_e'2:IteNormalize_Expr_Type.t_expr) ->
                   [ &self <- IteNormalize_Expr_Type.C_IfThenElse l_c'2 l_t'2 _any : IteNormalize_Expr_Type.t_expr ] 
                  s3)) ]
            ))
      | s3 = any
        [ br0 (a:IteNormalize_Expr_Type.t_expr) (b:IteNormalize_Expr_Type.t_expr) (c:IteNormalize_Expr_Type.t_expr)-> {c
          = IteNormalize_Expr_Type.C_IfThenElse a b c}
          (! bb8)
        | br1 (a:usize)-> {c = IteNormalize_Expr_Type.C_Var a} (! bb9)
        | br2 -> {c = IteNormalize_Expr_Type.C_True } (! bb8)
        | br3 -> {c = IteNormalize_Expr_Type.C_False } (! bb8) ]
         ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = -{resolve'0 t}- s2
      | s2 =  [ &c1 <- c ] (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &c <- _any ] s3) ] )
      | s3 = -{resolve'0 c}- s4
      | s4 = simplify_helper {c1} {state} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb36 ]
      
    | bb36 = s0 [ s0 = bb37 ] 
    | bb37 = s0 [ s0 = bb38 ] 
    | bb9 = s0 [ s0 = bb10 ] 
    | bb10 = s0
      [ s0 = IteNormalize_Expr_Type.var' {c} (fun (rv'0:usize) ->  [ &v <- rv'0 ] s1)
      | s1 =  [ &_16 <- v ] s2
      | s2 = get'0 {state} {_16} (fun (_ret':Core_Option_Option_Type.t_option bool) ->  [ &_13 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = s0
      [ s0 = any
        [ br0 -> {_13 = Core_Option_Option_Type.C_None } (! bb19)
        | br1 (a:bool)-> {_13 = Core_Option_Option_Type.C_Some a} (! bb12) ]
         ]
      
    | bb19 = s0
      [ s0 = clone'0 {state} (fun (_ret':IteNormalize_BTreeMap_Type.t_btreemap usize bool) ->  [ &state_t <- _ret' ] s1)
      | s1 = bb20 ]
      
    | bb20 = s0
      [ s0 = Borrow.borrow_mut <IteNormalize_BTreeMap_Type.t_btreemap usize bool> {state_t}
          (fun (_ret':borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) ->
             [ &_27 <- _ret' ] 
             [ &state_t <-  ^ _27 ] 
            s1)
      | s1 = insert'0 {_27} {v} {[#"../ite_normalize.rs" 203 46 203 50] true}
          (fun (_ret':Core_Option_Option_Type.t_option bool) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb21 ]
      
    | bb21 = s0
      [ s0 = -{resolve'0 t}- s1
      | s1 = simplify_helper {t} {state_t} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &tp <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = s0
      [ s0 = clone'0 {state} (fun (_ret':IteNormalize_BTreeMap_Type.t_btreemap usize bool) ->  [ &state_e <- _ret' ] s1)
      | s1 = bb23 ]
      
    | bb23 = s0
      [ s0 = Borrow.borrow_mut <IteNormalize_BTreeMap_Type.t_btreemap usize bool> {state_e}
          (fun (_ret':borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)) ->
             [ &_35 <- _ret' ] 
             [ &state_e <-  ^ _35 ] 
            s1)
      | s1 = insert'0 {_35} {v} {[#"../ite_normalize.rs" 208 46 208 51] false}
          (fun (_ret':Core_Option_Option_Type.t_option bool) ->  [ &_34 <- _ret' ] s2)
      | s2 = bb24 ]
      
    | bb24 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = simplify_helper {e} {state_e} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &ep <- _ret' ] s2)
      | s2 = bb25 ]
      
    | bb25 = s0 [ s0 = bb26 ] 
    | bb26 = s0 [ s0 = bb27 ] 
    | bb27 = s0
      [ s0 =  [ &_0 <- IteNormalize_Expr_Type.C_IfThenElse c tp ep ] 
        (any
        [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &c <- _any ] 
          (any
          [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &tp <- _any ] 
            (any [ any_ (_any:IteNormalize_Expr_Type.t_expr)-> (!  [ &ep <- _any ] s1) ] )) ]
          )) ]
        )
      | s1 = bb28 ]
      
    | bb28 = s0 [ s0 = bb29 ] 
    | bb29 = s0 [ s0 = bb30 ] 
    | bb30 = s0 [ s0 = bb31 ] 
    | bb31 = s0 [ s0 = bb32 ] 
    | bb32 = s0 [ s0 = bb33 ] 
    | bb33 = s0 [ s0 = bb34 ] 
    | bb34 = s0 [ s0 = bb35 ] 
    | bb12 = s0 [ s0 = bb13 ] 
    | bb13 = s0
      [ s0 = -{resolve'0 c}- s1
      | s1 = Core_Option_Option_Type.some <bool> {_13} (fun (r0'0:bool) ->  [ &b <- r0'0 ] s2)
      | s2 = any [ br0 -> {b = false} (! bb16) | br1 -> {b} (! bb14) ]  ]
      
    | bb14 = s0
      [ s0 = -{resolve'0 e}- s1
      | s1 = -{resolve'0 t}- s2
      | s2 = simplify_helper {t} {state} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb15 ]
      
    | bb15 = s0 [ s0 = bb18 ] 
    | bb16 = s0
      [ s0 = -{resolve'0 t}- s1
      | s1 = -{resolve'0 e}- s2
      | s2 = simplify_helper {e} {state} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb17 ]
      
    | bb17 = s0 [ s0 = bb18 ] 
    | bb18 = s0 [ s0 = bb35 ] 
    | bb35 = s0 [ s0 = bb38 ] 
    | bb38 = s0 [ s0 = bb39 ] 
    | bb39 = s0 [ s0 = bb40 ] 
    | bb40 = s0 [ s0 = bb41 ] 
    | bb41 = s0 [ s0 = bb52 ] 
    | bb52 = s0 [ s0 = bb53 ] 
    | bb53 = s0 [ s0 = bb54 ] 
    | bb54 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & self : IteNormalize_Expr_Type.t_expr = self
    | & state : IteNormalize_BTreeMap_Type.t_btreemap usize bool = state
    | & c : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & t : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & e : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & v : usize = any_l () : usize
    | & _13 : Core_Option_Option_Type.t_option bool = any_l () : Core_Option_Option_Type.t_option bool
    | & _16 : usize = any_l () : usize
    | & b : bool = any_l () : bool
    | & state_t : IteNormalize_BTreeMap_Type.t_btreemap usize bool = any_l () : IteNormalize_BTreeMap_Type.t_btreemap usize bool
    | & _26 : Core_Option_Option_Type.t_option bool = any_l () : Core_Option_Option_Type.t_option bool
    | & _27 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool) = any_l () : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)
    | & tp : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & state_e : IteNormalize_BTreeMap_Type.t_btreemap usize bool = any_l () : IteNormalize_BTreeMap_Type.t_btreemap usize bool
    | & _34 : Core_Option_Option_Type.t_option bool = any_l () : Core_Option_Option_Type.t_option bool
    | & _35 : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool) = any_l () : borrowed (IteNormalize_BTreeMap_Type.t_btreemap usize bool)
    | & ep : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & c1 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & v1 : usize = any_l () : usize
    | & _49 : Core_Option_Option_Type.t_option bool = any_l () : Core_Option_Option_Type.t_option bool
    | & _52 : usize = any_l () : usize
    | & b1 : bool = any_l () : bool
    | & c2 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr ]
    
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[@expl:postcondition] [#"../ite_normalize.rs" 187 14 187 36] is_simplified'0 result}
      {[@expl:postcondition] [#"../ite_normalize.rs" 186 4 186 107] forall i : usize . (exists v : bool . Map.get (shallow_model'0 state) (UIntSize.to_int i)
      = Core_Option_Option_Type.C_Some v)  -> does_not_contain'0 result i}
      (! return' {result}) ]
    
end
module IteNormalize_Impl5_Simplify
  use prelude.UIntSize
  use prelude.Int
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate does_not_contain'0 [#"../ite_normalize.rs" 169 4 169 48] (self : IteNormalize_Expr_Type.t_expr) (vp : usize)
   =
    [#"../ite_normalize.rs" 170 8 176 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> does_not_contain'0 c vp
      /\ does_not_contain'0 t vp /\ does_not_contain'0 e vp
      | IteNormalize_Expr_Type.C_Var v -> v <> vp
      | _ -> true
      end
  let rec does_not_contain'0 (self:IteNormalize_Expr_Type.t_expr) (vp:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = does_not_contain'0 self vp} (! return' {result}) ]
    
  predicate is_simplified'0 [#"../ite_normalize.rs" 158 4 158 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 159 8 165 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> match c with
        | IteNormalize_Expr_Type.C_Var v -> does_not_contain'0 t v /\ does_not_contain'0 e v
        | c -> is_simplified'0 c /\ is_simplified'0 t /\ is_simplified'0 e
        end
      | _ -> true
      end
  let rec is_simplified'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_simplified'0 self} (! return' {result}) ]
    
  predicate is_normalized'0 [#"../ite_normalize.rs" 126 4 126 34] (self : IteNormalize_Expr_Type.t_expr) =
    [#"../ite_normalize.rs" 127 8 140 9] match self with
      | IteNormalize_Expr_Type.C_IfThenElse c t e -> is_normalized'0 c
      /\ is_normalized'0 t
      /\ is_normalized'0 e
      /\ match c with
        | IteNormalize_Expr_Type.C_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | IteNormalize_Expr_Type.C_Var _ -> true
      | IteNormalize_Expr_Type.C_True -> true
      | IteNormalize_Expr_Type.C_False -> true
      end
  let rec is_normalized'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_normalized'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  use map.Map
  use prelude.UIntSize
  function shallow_model'0 [#"../ite_normalize.rs" 50 4 50 50] (self : IteNormalize_BTreeMap_Type.t_btreemap usize bool) : Map.map int (Core_Option_Option_Type.t_option bool)
    
  let rec shallow_model'0 (self:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (return'  (ret:Map.map int (Core_Option_Option_Type.t_option bool)))= any
    [ return' (result:Map.map int (Core_Option_Option_Type.t_option bool))-> {result = shallow_model'0 self}
      (! return' {result}) ]
    
  let rec simplify_helper'0 (self:IteNormalize_Expr_Type.t_expr) (state:IteNormalize_BTreeMap_Type.t_btreemap usize bool) (return'  (ret:IteNormalize_Expr_Type.t_expr))= {[@expl:precondition] [#"../ite_normalize.rs" 185 15 185 35] is_normalized'0 self}
    any
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[#"../ite_normalize.rs" 187 14 187 36] is_simplified'0 result}
      {[#"../ite_normalize.rs" 186 4 186 107] forall i : usize . (exists v : bool . Map.get (shallow_model'0 state) (UIntSize.to_int i)
      = Core_Option_Option_Type.C_Some v)  -> does_not_contain'0 result i}
      (! return' {result}) ]
    
  let rec new'0 (_1:()) (return'  (ret:IteNormalize_BTreeMap_Type.t_btreemap usize bool))= any
    [ return' (result:IteNormalize_BTreeMap_Type.t_btreemap usize bool)-> (! return' {result}) ]
    
  let rec simplify (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:IteNormalize_Expr_Type.t_expr))= {[#"../ite_normalize.rs" 179 15 179 35] is_normalized'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0
      [ s0 = new'0 {[#"../ite_normalize.rs" 182 29 182 44] ()}
          (fun (_ret':IteNormalize_BTreeMap_Type.t_btreemap usize bool) ->  [ &_5 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = simplify_helper'0 {self} {_5} (fun (_ret':IteNormalize_Expr_Type.t_expr) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : IteNormalize_Expr_Type.t_expr = any_l () : IteNormalize_Expr_Type.t_expr
    | & self : IteNormalize_Expr_Type.t_expr = self
    | & _5 : IteNormalize_BTreeMap_Type.t_btreemap usize bool = any_l () : IteNormalize_BTreeMap_Type.t_btreemap usize bool ]
    
    [ return' (result:IteNormalize_Expr_Type.t_expr)-> {[@expl:postcondition] [#"../ite_normalize.rs" 180 14 180 36] is_simplified'0 result}
      (! return' {result}) ]
    
end
module IteNormalize_Impl1
  type k
  type v
  use IteNormalize_BTreeMap_Type as IteNormalize_BTreeMap_Type
  predicate invariant'1 (self : IteNormalize_BTreeMap_Type.t_btreemap k v)
  let rec invariant'1 (self:IteNormalize_BTreeMap_Type.t_btreemap k v) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : IteNormalize_BTreeMap_Type.t_btreemap k v)
  let rec inv'1 (_x:IteNormalize_BTreeMap_Type.t_btreemap k v) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : IteNormalize_BTreeMap_Type.t_btreemap k v . inv'1 x = true
  predicate invariant'0 (self : IteNormalize_BTreeMap_Type.t_btreemap k v)
  let rec invariant'0 (self:IteNormalize_BTreeMap_Type.t_btreemap k v) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : IteNormalize_BTreeMap_Type.t_btreemap k v)
  let rec inv'0 (_x:IteNormalize_BTreeMap_Type.t_btreemap k v) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : IteNormalize_BTreeMap_Type.t_btreemap k v . inv'0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../ite_normalize.rs" 39 4 39 27] forall self : IteNormalize_BTreeMap_Type.t_btreemap k v . inv'0 self
   -> (forall result : IteNormalize_BTreeMap_Type.t_btreemap k v . self = result  -> inv'1 result /\ result = self)
end
module IteNormalize_Impl6
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant'1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : IteNormalize_Expr_Type.t_expr)
  let rec inv'1 (_x:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : IteNormalize_Expr_Type.t_expr . inv'1 x = true
  predicate invariant'0 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : IteNormalize_Expr_Type.t_expr)
  let rec inv'0 (_x:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : IteNormalize_Expr_Type.t_expr . inv'0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../ite_normalize.rs" 55 9 55 14] forall self : IteNormalize_Expr_Type.t_expr . inv'0 self
   -> (forall result : IteNormalize_Expr_Type.t_expr . result = self  -> inv'1 result /\ result = self)
end
module IteNormalize_Impl2
  type k
  type v
end
module IteNormalize_Impl7
  
end
module IteNormalize_Impl3
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant'1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : IteNormalize_Expr_Type.t_expr)
  let rec inv'1 (_x:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : IteNormalize_Expr_Type.t_expr . inv'1 x = true
  use prelude.UIntSize
  predicate invariant'0 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : usize)
  let rec inv'0 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : usize . inv'0 x = true
  use prelude.Int
  goal from_refn : [#"../ite_normalize.rs" 80 4 80 29] forall value : usize . inv'0 value
   -> (forall result : IteNormalize_Expr_Type.t_expr . inv'1 result)
end
module IteNormalize_Impl4
  use IteNormalize_Expr_Type as IteNormalize_Expr_Type
  predicate invariant'1 (self : IteNormalize_Expr_Type.t_expr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : IteNormalize_Expr_Type.t_expr)
  let rec inv'1 (_x:IteNormalize_Expr_Type.t_expr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : IteNormalize_Expr_Type.t_expr . inv'1 x = true
  predicate invariant'0 (self : bool) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : bool)
  let rec inv'0 (_x:bool) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : bool . inv'0 x = true
  goal from_refn : [#"../ite_normalize.rs" 86 4 86 28] forall value : bool . inv'0 value
   -> (forall result : IteNormalize_Expr_Type.t_expr . inv'1 result)
end
