module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module UnusedInLoop_Main_Interface
  val main [@cfg:stackify] () : ()
end
module UnusedInLoop_Main
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module UnusedInLoop_UnusedInLoop_Interface
  use mach.int.Int
  use mach.int.UInt32
  val unused_in_loop [@cfg:stackify] (b : bool) : uint32
    ensures { result = (10 : uint32) }
    
end
module UnusedInLoop_UnusedInLoop
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = bool
  let rec cfg unused_in_loop [@cfg:stackify] (b : bool) : uint32
    ensures { result = (10 : uint32) }
    
   = 
  var _0 : uint32;
  var b_1 : bool;
  var x_2 : uint32;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : ();
  {
    b_1 <- b;
    goto BB0
  }
  BB0 {
    x_2 <- (10 : uint32);
    goto BB1
  }
  BB1 {
    invariant x { true };
    assume { Resolve0.resolve _5 };
    _5 <- b_1;
    switch (_5)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve b_1 };
    _3 <- ();
    assume { Resolve1.resolve _3 };
    assume { Resolve2.resolve _0 };
    _0 <- x_2;
    assume { Resolve2.resolve x_2 };
    return _0
  }
  BB3 {
    _4 <- ();
    assume { Resolve1.resolve _4 };
    goto BB1
  }
  
end
