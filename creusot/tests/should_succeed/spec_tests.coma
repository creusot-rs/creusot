module T_spec_tests__T [#"spec_tests.rs" 6 0 6 6]
  type t_T  =
    | C_A
    | C_B
  
  let rec v_A (input:t_T) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ] 
  
  let rec v_B (input:t_T) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} (! {false} any) ] 
end
module T_spec_tests__S [#"spec_tests.rs" 11 0 11 14]
  type t_S 'a 'b =
    | C_S 'a 'b
  
  let rec t_S < 'a > < 'b > (input:t_S 'a 'b) (ret  (field_0:'a) (field_1:'b))= any
    [ good (field_0:'a) (field_1:'b)-> {C_S field_0 field_1 = input} (! ret {field_0} {field_1}) ]
    
end
module M_spec_tests__test_specs [#"spec_tests.rs" 20 0 20 19]
  let%span sspec_tests0 = "spec_tests.rs" 18 10 18 22
  let%span sspec_tests1 = "spec_tests.rs" 19 10 19 41
  
  use T_spec_tests__S as S'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use T_spec_tests__T as T'0
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_specs (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sspec_tests1] S'0.C_S (0 : uint32) true
      = S'0.C_S (1 : uint32) false}
      {[@expl:postcondition] [%#sspec_tests0] T'0.C_A = T'0.C_B}
      (! return' {result}) ]
    
end
