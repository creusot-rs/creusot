
module SpecTests_T_Type
  type t_t  =
    | C_A
    | C_B
    
  function any_l (_ : 'b) : 'a
  let rec a (input:t_t) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  let rec b (input:t_t) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ] 
end
module SpecTests_S_Type
  type t_s 'a 'b =
    | C_S 'a 'b
    
  function any_l (_ : 'b) : 'a
  let rec t_s < 'a > < 'b > (input:t_s 'a 'b) (ret  (field_0:'a) (field_1:'b))= any
    [ good (field_0:'a) (field_1:'b)-> {C_S field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'a) (field_1:'b)-> {C_S field_0 field_1 <> input} {false} any ]
    
end
module SpecTests_TestSpecs
  use prelude.UInt32
  use SpecTests_S_Type as SpecTests_S_Type
  use prelude.Int
  use SpecTests_T_Type as SpecTests_T_Type
  use prelude.Intrinsic
  let rec test_specs (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../spec_tests.rs" 18 20 18 22] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../spec_tests.rs" 17 10 17 41] SpecTests_S_Type.C_S (0 : uint32) true
      = SpecTests_S_Type.C_S (1 : uint32) false}
      {[@expl:postcondition] [#"../spec_tests.rs" 16 10 16 22] SpecTests_T_Type.C_A = SpecTests_T_Type.C_B}
      (! return' {result}) ]
    
end
