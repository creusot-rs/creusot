
module SplitBorrow_Z
  use prelude.Intrinsic
  let rec z (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../split_borrow.rs" 6 4 6 8] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module SplitBorrow_MyInt_Type
  use prelude.UIntSize
  use prelude.Int
  type t_myint  =
    | C_MyInt usize
    
  function any_l (_ : 'b) : 'a
  let rec t_myint (input:t_myint) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_MyInt field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_MyInt field_0 <> input} {false} any ]
    
end
module SplitBorrow_F
  use prelude.Intrinsic
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  predicate resolve'2 (self : SplitBorrow_MyInt_Type.t_myint) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'2 (self:SplitBorrow_MyInt_Type.t_myint) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  predicate resolve'1 (self : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'2 (let (a, _) = self in a)
    /\ resolve'2 (let (_, a) = self in a)
  let rec resolve'1 (self:(SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate resolve'0 (self : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec z'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  use prelude.UIntSize
  use prelude.Int
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 23 10 24] (1 : usize)) ] s1
      | s1 =  [ &_3 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 10 33 10 34] (2 : usize)) ] s2
      | s2 =  [ &x <- (_2, _3) ] 
        (any
        [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_2 <- _any ] 
          (any [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_3 <- _any ] s3) ] )) ]
        )
      | s3 = Borrow.borrow_mut <(SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)> {x}
          (fun (_ret':borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) ->
             [ &y <- _ret' ] 
             [ &x <-  ^ y ] 
            s4)
      | s4 = z'0 {[#"../split_borrow.rs" 13 7 13 10] ()} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ]  ] 
    | bb2 = s0
      [ s0 =  [ &_7 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 14 23 14 24] (4 : usize)) ] s1
      | s1 =  [ &y <- { y with current = (let (l'1, _) =  * y in (l'1, _7)) ; } ] 
        (any [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_7 <- _any ] s2) ] )
      | s2 =  [ &_5 <- [#"../split_borrow.rs" 13 11 15 5] () ] s3
      | s3 = bb4 ]
      
    | bb3 = s0
      [ s0 =  [ &_8 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 16 23 16 25] (10 : usize)) ] s1
      | s1 =  [ &y <- { y with current = (let (_, l'2) =  * y in (_8, l'2)) ; } ] 
        (any [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_8 <- _any ] s2) ] )
      | s2 =  [ &_5 <- [#"../split_borrow.rs" 15 11 17 5] () ] s3
      | s3 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 y}- s1
      | s1 = -{resolve'1 x}- s2
      | s2 =  [ &_0 <- [#"../split_borrow.rs" 9 11 21 1] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint) = any_l () : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
    | & _2 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint
    | & _3 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint
    | & y : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint) = any_l () : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
    | & _5 : () = any_l () : ()
    | & _6 : bool = any_l () : bool
    | & _7 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint
    | & _8 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint ]
     [ return' (result:())-> (! return' {result}) ] 
end
module SplitBorrow_G
  use prelude.Intrinsic
  use SplitBorrow_MyInt_Type as SplitBorrow_MyInt_Type
  predicate resolve'3 (self : SplitBorrow_MyInt_Type.t_myint) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:SplitBorrow_MyInt_Type.t_myint) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'2 (self:(SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate resolve'1 (self : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (SplitBorrow_MyInt_Type.t_myint)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (SplitBorrow_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  let rec g (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 24 23 24 24] (1 : usize)) ] s1
      | s1 =  [ &_3 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 24 33 24 34] (2 : usize)) ] s2
      | s2 =  [ &a <- (_2, _3) ] 
        (any
        [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_2 <- _any ] 
          (any [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_3 <- _any ] s3) ] )) ]
        )
      | s3 = Borrow.borrow_mut <(SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)> {a}
          (fun (_ret':borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)) ->
             [ &x <- _ret' ] 
             [ &a <-  ^ x ] 
            s4)
      | s4 = Borrow.borrow_final
          <SplitBorrow_MyInt_Type.t_myint>
          {let (_, r'0) =  * x in r'0}
          {Borrow.inherit_id (Borrow.get_id x) 2}
          (fun (_ret':borrowed (SplitBorrow_MyInt_Type.t_myint)) ->
             [ &_z <- _ret' ] 
             [ &x <- { x with current = (let (l'1, _) =  * x in (l'1,  ^ _z)) ; } ] 
            s5)
      | s5 = -{resolve'0 _z}- s6
      | s6 =  [ &_6 <- SplitBorrow_MyInt_Type.C_MyInt ([#"../split_borrow.rs" 29 19 29 20] (3 : usize)) ] s7
      | s7 =  [ &x <- { x with current = (let (_, l'5) =  * x in (_6, l'5)) ; } ] 
        (any [ any_ (_any:SplitBorrow_MyInt_Type.t_myint)-> (!  [ &_6 <- _any ] s8) ] )
      | s8 = -{resolve'1 x}- s9
      | s9 = -{resolve'2 a}- s10
      | s10 =  [ &_0 <- [#"../split_borrow.rs" 23 11 32 1] () ] s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint) = any_l () : (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
    | & _2 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint
    | & _3 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint
    | & x : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint) = any_l () : borrowed (SplitBorrow_MyInt_Type.t_myint, SplitBorrow_MyInt_Type.t_myint)
    | & _z : borrowed (SplitBorrow_MyInt_Type.t_myint) = any_l () : borrowed (SplitBorrow_MyInt_Type.t_myint)
    | & _6 : SplitBorrow_MyInt_Type.t_myint = any_l () : SplitBorrow_MyInt_Type.t_myint ]
     [ return' (result:())-> (! return' {result}) ] 
end
