module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type splitmove_myint  = 
    | SplitMove_MyInt usize
    
  function splitmove_myint_MyInt_0 (self : splitmove_myint) : usize
  val splitmove_myint_MyInt_0 (self : splitmove_myint) : usize
    ensures { result = splitmove_myint_MyInt_0 self }
    
  axiom splitmove_myint_MyInt_0_acc : forall a : usize . splitmove_myint_MyInt_0 (SplitMove_MyInt a : splitmove_myint) = a
end
module SplitMove_Main_Interface
  val main [@cfg:stackify] () : ()
end
module SplitMove_Main
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  var a_1 : (Type.splitmove_myint, Type.splitmove_myint);
  var _2 : Type.splitmove_myint;
  var _3 : Type.splitmove_myint;
  var x_4 : borrowed (Type.splitmove_myint, Type.splitmove_myint);
  var z_5 : borrowed (Type.splitmove_myint);
  var _6 : Type.splitmove_myint;
  var _7 : bool;
  var _8 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.SplitMove_MyInt (1 : usize);
    _3 <- Type.SplitMove_MyInt (2 : usize);
    a_1 <- (_2, _3);
    x_4 <- borrow_mut a_1;
    a_1 <-  ^ x_4;
    z_5 <- borrow_mut (let (_, a) =  * x_4 in a);
    x_4 <- { x_4 with current = (let (a, b) =  * x_4 in (a,  ^ z_5)) };
    assume { (fun x -> true) z_5 };
    _6 <- Type.SplitMove_MyInt (3 : usize);
    assume { (fun x -> true) (let (a, _) =  * x_4 in a) };
    x_4 <- { x_4 with current = (let (a, b) =  * x_4 in (_6, b)) };
    assume { (fun x -> true) x_4 };
    assume { (fun x -> true) _8 };
    _8 <- Type.splitmove_myint_MyInt_0 (let (a, _) = a_1 in a);
    assume { (fun x -> true) a_1 };
    _7 <- _8 = (3 : usize);
    assume { (fun x -> true) _7 };
    _0 <- ();
    return _0
  }
  
end
