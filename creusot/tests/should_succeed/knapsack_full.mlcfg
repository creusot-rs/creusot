
module KnapsackFull_Max_Interface
  use mach.int.UInt64
  use int.MinMax
  use mach.int.Int
  use prelude.UIntSize
  val max [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 10 10 10 33] UInt64.to_int result = MinMax.max (UInt64.to_int a) (UInt64.to_int b) }
    
end
module KnapsackFull_Max
  use mach.int.UInt64
  use int.MinMax
  use mach.int.Int
  use prelude.UIntSize
  let rec cfg max [@cfg:stackify] [#"../knapsack_full.rs" 11 0 11 35] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 10 10 10 33] UInt64.to_int result = MinMax.max (UInt64.to_int a) (UInt64.to_int b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var a_1 : usize;
  var b_2 : usize;
  var _4 : bool;
  var _5 : usize;
  var _6 : usize;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _5 <- a_1;
    _6 <- b_2;
    _4 <- ([#"../knapsack_full.rs" 12 7 12 12] _5 < _6);
    switch (_4)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _0 <- b_2;
    goto BB3
  }
  BB2 {
    _0 <- a_1;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module KnapsackFull_Item_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_item 'name =
    | C_Item 'name usize usize
    
  let function item_weight (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Item _ a _ -> a
      end
  let function item_value (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Item _ _ a -> a
      end
end
module KnapsackFull_SumWeights_Stub
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  val ghost function sum_weights (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
end
module KnapsackFull_SumWeights_Interface
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  val ghost function sum_weights (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 21 11 21 33] 0 <= i /\ i <= Seq.length s}
    ensures { [#"../knapsack_full.rs" 22 10 22 21] result >= 0 }
    
end
module KnapsackFull_SumWeights
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use mach.int.UInt64
  val ghost function sum_weights [#"../knapsack_full.rs" 23 0 23 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_weights_spec : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . ([#"../knapsack_full.rs" 21 11 21 33] 0 <= i /\ i <= Seq.length s) -> ([#"../knapsack_full.rs" 22 10 22 21] sum_weights s i >= 0)
end
module KnapsackFull_SumWeights_Impl
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt64
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  let rec ghost function sum_weights (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 21 11 21 33] 0 <= i /\ i <= Seq.length s}
    ensures { [#"../knapsack_full.rs" 22 10 22 21] result >= 0 }
    variant {[#"../knapsack_full.rs" 20 10 20 19] Seq.length s - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 24 4 27 5] if pure {i = Seq.length s} then
      0
    else
      UInt64.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights s (i + 1)
    
end
module KnapsackFull_SumValues_Stub
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  val ghost function sum_values (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
end
module KnapsackFull_SumValues_Interface
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  val ghost function sum_values (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 32 11 32 33] i >= 0 /\ i <= Seq.length s}
    
end
module KnapsackFull_SumValues
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use mach.int.UInt64
  val ghost function sum_values [#"../knapsack_full.rs" 33 0 33 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_values_spec : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . ([#"../knapsack_full.rs" 32 11 32 33] i >= 0 /\ i <= Seq.length s) -> true
end
module KnapsackFull_SumValues_Impl
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt64
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  let rec ghost function sum_values (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 32 11 32 33] i >= 0 /\ i <= Seq.length s}
    variant {[#"../knapsack_full.rs" 31 10 31 19] Seq.length s - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 34 4 37 5] if pure {i = Seq.length s} then
      0
    else
      UInt64.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values s (i + 1)
    
end
module KnapsackFull_SubseqRev_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  val ghost predicate subseq_rev (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
end
module KnapsackFull_SubseqRev_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  val ghost predicate subseq_rev (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
    requires {[#"../knapsack_full.rs" 42 11 42 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 43 11 43 36] 0 <= i2 /\ i2 <= Seq.length s2}
    
end
module KnapsackFull_SubseqRev
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  val ghost predicate subseq_rev [#"../knapsack_full.rs" 44 0 44 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
    
  axiom subseq_rev_spec : forall s1 : Seq.seq t, i1 : int, s2 : Seq.seq t, i2 : int . ([#"../knapsack_full.rs" 42 11 42 36] 0 <= i1 /\ i1 <= Seq.length s1) -> ([#"../knapsack_full.rs" 43 11 43 36] 0 <= i2 /\ i2 <= Seq.length s2) -> true
end
module KnapsackFull_SubseqRev_Impl
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  let rec ghost function subseq_rev (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int) : bool
    requires {[#"../knapsack_full.rs" 42 11 42 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 43 11 43 36] 0 <= i2 /\ i2 <= Seq.length s2}
    variant {[#"../knapsack_full.rs" 41 10 41 12] i2}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 45 4 51 5] if pure {i2 = 0} then
      pure {i1 = Seq.length s1}
    else
      i1 < Seq.length s1 && pure {Seq.get s1 i1 = Seq.get s2 (i2 - 1)} && subseq_rev s1 (i1 + 1) s2 (i2 - 1) || subseq_rev s1 i1 s2 (i2 - 1)
    
end
module KnapsackFull_M_Stub
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with type t = KnapsackFull_Item_Type.t_item name, axiom .
  val ghost function m (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
end
module KnapsackFull_M_Interface
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with type t = KnapsackFull_Item_Type.t_item name, axiom .
  val ghost function m (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 56 11 56 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack_full.rs" 57 11 57 17] 0 <= w}
    ensures { [#"../knapsack_full.rs" 58 10 58 21] result >= 0 }
    ensures { [#"../knapsack_full.rs" 59 0 61 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . 0 <= j /\ j <= Seq.length s /\ SubseqRev0.subseq_rev s j items i /\ SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= result }
    
end
module KnapsackFull_M
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with type t = KnapsackFull_Item_Type.t_item name, axiom .
  use mach.int.UInt64
  use int.MinMax
  val ghost function m [#"../knapsack_full.rs" 62 0 62 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    
  axiom m_spec : forall items : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int, w : int . ([#"../knapsack_full.rs" 56 11 56 37] 0 <= i /\ i <= Seq.length items) -> ([#"../knapsack_full.rs" 57 11 57 17] 0 <= w) -> ([#"../knapsack_full.rs" 59 0 61 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . 0 <= j /\ j <= Seq.length s /\ SubseqRev0.subseq_rev s j items i /\ SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= m items i w) && ([#"../knapsack_full.rs" 58 10 58 21] m items i w >= 0)
end
module KnapsackFull_M_Impl
  type name
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt64
  use int.MinMax
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev as SubseqRev0 with type t = KnapsackFull_Item_Type.t_item name, axiom .
  let rec ghost function m (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 56 11 56 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack_full.rs" 57 11 57 17] 0 <= w}
    ensures { [#"../knapsack_full.rs" 58 10 58 21] result >= 0 }
    ensures { [#"../knapsack_full.rs" 59 0 61 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . 0 <= j /\ j <= Seq.length s /\ SubseqRev0.subseq_rev s j items i /\ SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= result }
    variant {[#"../knapsack_full.rs" 55 10 55 11] i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 63 4 70 5] if pure {i = 0} then
      0
    else
      if UInt64.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w then
        m items (i - 1) w
      else
        let a' = m items (i - 1) w in let b' = m items (i - 1) (w - UInt64.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))) + UInt64.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i - 1))) in MinMax.max a' b'
      
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Stub as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
    type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  let rec ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)}
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {Seq.get seq (UInt64.to_int self) = out}
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i}
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module KnapsackFull_Knapsack01Dyn_Interface
  type name
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with type t = KnapsackFull_Item_Type.t_item name, axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with type name = name, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  val knapsack01_dyn [@cfg:stackify] (items : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (max_weight : usize) : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../knapsack_full.rs" 73 11 73 36] Seq.length (Model0.model items) < 10000000}
    requires {[#"../knapsack_full.rs" 74 11 74 33] UInt64.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 75 0 75 91] forall i : int . 0 <= i /\ i < Seq.length (Model0.model items) -> UInt64.to_int (KnapsackFull_Item_Type.item_value (Seq.get (Model0.model items) i)) <= 10000000}
    ensures { [#"../knapsack_full.rs" 76 10 76 62] SumWeights0.sum_weights (Model1.model result) (Seq.length (Model1.model result)) <= UInt64.to_int max_weight }
    ensures { [#"../knapsack_full.rs" 77 10 77 56] SubseqRev0.subseq_rev (Model1.model result) 0 (Model0.model items) (Seq.length (Model0.model items)) }
    ensures { [#"../knapsack_full.rs" 78 0 80 2] forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . SubseqRev0.subseq_rev s 0 (Model0.model items) (Seq.length (Model0.model items)) /\ SumWeights0.sum_weights s (Seq.length s) <= UInt64.to_int max_weight -> SumValues0.sum_values s (Seq.length s) <= SumValues0.sum_values (Model1.model result) (Seq.length (Model1.model result)) }
    
end
module KnapsackFull_Knapsack01Dyn
  type name
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global
  clone KnapsackFull_SumValues as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev as SubseqRev0 with type t = KnapsackFull_Item_Type.t_item name, axiom .
  clone KnapsackFull_SumWeights as SumWeights0 with type name = name, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve6 with type t = usize, val Model0.model = Model4.model,
    val Resolve0.resolve = Resolve7.resolve
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy3 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = KnapsackFull_Item_Type.t_item name
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = KnapsackFull_Item_Type.t_item name
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = KnapsackFull_Item_Type.t_item name
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = KnapsackFull_Item_Type.t_item name
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve5 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    val Model0.model = Model3.model, val Resolve0.resolve = Resolve6.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = KnapsackFull_Item_Type.t_item name
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve4 with type t = KnapsackFull_Item_Type.t_item name,
    val Model0.model = Model1.model, val Resolve0.resolve = Resolve0.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model1.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = KnapsackFull_Item_Type.t_item name,
    val Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model4.model,
    val InBounds0.in_bounds = InBounds2.in_bounds, val HasValue0.has_value = HasValue2.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere, type Output0.output = Output2.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize, type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model3.model,
    val InBounds0.in_bounds = InBounds1.in_bounds, val HasValue0.has_value = HasValue1.has_value,
    val ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output1.output
  clone KnapsackFull_Max_Interface as Max0
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model4.model,
    val InBounds0.in_bounds = InBounds2.in_bounds, val HasValue0.has_value = HasValue2.has_value,
    type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize, type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model3.model,
    val InBounds0.in_bounds = InBounds1.in_bounds, val HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = KnapsackFull_Item_Type.t_item name, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone KnapsackFull_M as M0 with type name = name, val SubseqRev0.subseq_rev = SubseqRev0.subseq_rev,
    val SumWeights0.sum_weights = SumWeights0.sum_weights, val SumValues0.sum_values = SumValues0.sum_values, axiom .
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    val Model0.model = Model3.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model2.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, val Model0.model = Model4.model
  let rec cfg knapsack01_dyn [@cfg:stackify] [#"../knapsack_full.rs" 81 0 81 91] (items : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (max_weight : usize) : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../knapsack_full.rs" 73 11 73 36] Seq.length (Model0.model items) < 10000000}
    requires {[#"../knapsack_full.rs" 74 11 74 33] UInt64.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 75 0 75 91] forall i : int . 0 <= i /\ i < Seq.length (Model0.model items) -> UInt64.to_int (KnapsackFull_Item_Type.item_value (Seq.get (Model0.model items) i)) <= 10000000}
    ensures { [#"../knapsack_full.rs" 76 10 76 62] SumWeights0.sum_weights (Model1.model result) (Seq.length (Model1.model result)) <= UInt64.to_int max_weight }
    ensures { [#"../knapsack_full.rs" 77 10 77 56] SubseqRev0.subseq_rev (Model1.model result) 0 (Model0.model items) (Seq.length (Model0.model items)) }
    ensures { [#"../knapsack_full.rs" 78 0 80 2] forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . SubseqRev0.subseq_rev s 0 (Model0.model items) (Seq.length (Model0.model items)) /\ SumWeights0.sum_weights s (Seq.length s) <= UInt64.to_int max_weight -> SumValues0.sum_values s (Seq.length s) <= SumValues0.sum_values (Model1.model result) (Seq.length (Model1.model result)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var items_1 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var max_weight_2 : usize;
  var best_value_9 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _10 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _11 : usize;
  var _12 : usize;
  var _13 : usize;
  var _14 : usize;
  var _15 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var i_16 : usize;
  var _17 : ();
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var it_27 : KnapsackFull_Item_Type.t_item name;
  var _28 : KnapsackFull_Item_Type.t_item name;
  var _29 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _30 : usize;
  var w_31 : usize;
  var _32 : ();
  var _38 : bool;
  var _39 : usize;
  var _40 : usize;
  var _41 : usize;
  var _42 : bool;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  var _46 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _47 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _48 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _49 : usize;
  var _50 : usize;
  var _51 : usize;
  var _52 : usize;
  var _53 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _54 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _55 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _56 : usize;
  var _57 : usize;
  var _58 : usize;
  var _59 : usize;
  var _60 : usize;
  var _61 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _62 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _63 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _64 : usize;
  var _65 : usize;
  var _66 : usize;
  var _67 : usize;
  var _68 : usize;
  var _69 : borrowed usize;
  var _70 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _71 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _72 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _73 : usize;
  var _74 : usize;
  var _75 : usize;
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var _79 : ();
  var _80 : ();
  var _81 : ();
  var result_82 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _83 : usize;
  var _84 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var left_weight_85 : usize;
  var j_86 : usize;
  var _87 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _88 : ();
  var _94 : bool;
  var _95 : usize;
  var it_96 : KnapsackFull_Item_Type.t_item name;
  var _97 : KnapsackFull_Item_Type.t_item name;
  var _98 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _99 : usize;
  var _100 : bool;
  var _101 : usize;
  var _102 : usize;
  var _103 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _104 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _105 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _106 : usize;
  var _107 : usize;
  var _108 : usize;
  var _109 : usize;
  var _110 : usize;
  var _111 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _112 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _113 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _114 : usize;
  var _115 : usize;
  var _116 : ();
  var _117 : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global));
  var _118 : KnapsackFull_Item_Type.t_item name;
  var _119 : usize;
  var _120 : ();
  var _121 : ();
  var _122 : ();
  {
    items_1 <- items;
    max_weight_2 <- max_weight;
    goto BB0
  }
  BB0 {
    _12 <- max_weight_2;
    _11 <- ([#"../knapsack_full.rs" 83 41 83 55] _12 + (1 : usize));
    _10 <- ([#"../knapsack_full.rs" 83 23 83 56] FromElem0.from_elem (0 : usize) _11);
    goto BB1
  }
  BB1 {
    _15 <- items_1;
    _14 <- ([#"../knapsack_full.rs" 83 58 83 69] Len0.len _15);
    goto BB2
  }
  BB2 {
    _13 <- ([#"../knapsack_full.rs" 83 58 83 73] _14 + (1 : usize));
    best_value_9 <- ([#"../knapsack_full.rs" 83 8 83 74] FromElem1.from_elem _10 _13);
    goto BB3
  }
  BB3 {
    i_16 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant items_len { [#"../knapsack_full.rs" 86 27 86 68] Seq.length (Model0.model items_1) + 1 = Seq.length (Model3.model best_value_9) };
    invariant weight_len { [#"../knapsack_full.rs" 86 4 86 70] forall i : int . 0 <= i /\ i < Seq.length (Model3.model best_value_9) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model4.model (Seq.get (Model3.model best_value_9) i)) };
    invariant best_value { [#"../knapsack_full.rs" 86 4 86 70] forall ww : int . forall ii : int . 0 <= ii /\ ii <= UInt64.to_int i_16 /\ 0 <= ww /\ ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model4.model (Seq.get (Model3.model best_value_9) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value_bounds { [#"../knapsack_full.rs" 86 4 86 70] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (Model0.model items_1) /\ 0 <= ww /\ ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model4.model (Seq.get (Model3.model best_value_9) ii)) ww) <= 10000000 * ii };
    _24 <- i_16;
    _26 <- items_1;
    _25 <- ([#"../knapsack_full.rs" 93 14 93 25] Len0.len _26);
    goto BB9
  }
  BB9 {
    _23 <- ([#"../knapsack_full.rs" 93 10 93 25] _24 < _25);
    switch (_23)
      | False -> goto BB32
      | True -> goto BB10
      end
  }
  BB10 {
    _29 <- items_1;
    _30 <- i_16;
    _28 <- ([#"../knapsack_full.rs" 94 18 94 26] Index0.index _29 _30);
    goto BB11
  }
  BB11 {
    it_27 <- _28;
    assume { Resolve0.resolve _28 };
    w_31 <- (0 : usize);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant items_len2 { [#"../knapsack_full.rs" 100 32 100 73] Seq.length (Model0.model items_1) + 1 = Seq.length (Model3.model best_value_9) };
    invariant weight_len2 { [#"../knapsack_full.rs" 100 8 100 75] forall i : int . 0 <= i /\ i < Seq.length (Model3.model best_value_9) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model4.model (Seq.get (Model3.model best_value_9) i)) };
    invariant best_value2 { [#"../knapsack_full.rs" 100 8 100 75] forall ww : int . forall ii : int . 0 <= ii /\ ii <= UInt64.to_int i_16 /\ 0 <= ww /\ ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model4.model (Seq.get (Model3.model best_value_9) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value2 { [#"../knapsack_full.rs" 100 8 100 75] forall ww : int . 0 <= ww /\ ww <= UInt64.to_int w_31 - 1 -> UInt64.to_int (Seq.get (Model4.model (Seq.get (Model3.model best_value_9) (UInt64.to_int i_16 + 1))) ww) = M0.m (Model0.model items_1) (UInt64.to_int i_16 + 1) ww };
    invariant best_value_bounds { [#"../knapsack_full.rs" 100 8 100 75] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (Model0.model items_1) /\ 0 <= ww /\ ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model4.model (Seq.get (Model3.model best_value_9) ii)) ww) <= 10000000 * ii };
    _39 <- w_31;
    _40 <- max_weight_2;
    _38 <- ([#"../knapsack_full.rs" 110 14 110 29] _39 <= _40);
    switch (_38)
      | False -> goto BB31
      | True -> goto BB18
      end
  }
  BB18 {
    _43 <- KnapsackFull_Item_Type.item_weight it_27;
    _44 <- w_31;
    _42 <- ([#"../knapsack_full.rs" 111 38 111 51] _43 > _44);
    switch (_42)
      | False -> goto BB22
      | True -> goto BB19
      end
  }
  BB19 {
    _48 <- best_value_9;
    _49 <- i_16;
    _47 <- ([#"../knapsack_full.rs" 112 16 112 29] Index1.index _48 _49);
    goto BB20
  }
  BB20 {
    _46 <- _47;
    _50 <- w_31;
    _45 <- ([#"../knapsack_full.rs" 112 16 112 32] Index2.index _46 _50);
    goto BB21
  }
  BB21 {
    _41 <- _45;
    goto BB28
  }
  BB22 {
    _55 <- best_value_9;
    _56 <- i_16;
    _54 <- ([#"../knapsack_full.rs" 114 20 114 33] Index1.index _55 _56);
    goto BB23
  }
  BB23 {
    _53 <- _54;
    _57 <- w_31;
    _52 <- ([#"../knapsack_full.rs" 114 20 114 36] Index2.index _53 _57);
    goto BB24
  }
  BB24 {
    _51 <- _52;
    _63 <- best_value_9;
    _64 <- i_16;
    _62 <- ([#"../knapsack_full.rs" 114 38 114 51] Index1.index _63 _64);
    goto BB25
  }
  BB25 {
    _61 <- _62;
    _66 <- w_31;
    _67 <- KnapsackFull_Item_Type.item_weight it_27;
    _65 <- ([#"../knapsack_full.rs" 114 52 114 65] _66 - _67);
    _60 <- ([#"../knapsack_full.rs" 114 38 114 66] Index2.index _61 _65);
    goto BB26
  }
  BB26 {
    _59 <- _60;
    _68 <- KnapsackFull_Item_Type.item_value it_27;
    _58 <- ([#"../knapsack_full.rs" 114 38 114 77] _59 + _68);
    _41 <- ([#"../knapsack_full.rs" 114 16 114 78] Max0.max _51 _58);
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    _72 <- borrow_mut best_value_9;
    best_value_9 <-  ^ _72;
    _74 <- i_16;
    _73 <- ([#"../knapsack_full.rs" 111 23 111 28] _74 + (1 : usize));
    _71 <- ([#"../knapsack_full.rs" 111 12 111 29] IndexMut0.index_mut _72 _73);
    goto BB29
  }
  BB29 {
    _70 <- borrow_mut ( * _71);
    _71 <- { _71 with current = ( ^ _70) };
    assume { Resolve1.resolve _71 };
    _75 <- w_31;
    _69 <- ([#"../knapsack_full.rs" 111 12 111 32] IndexMut1.index_mut _70 _75);
    goto BB30
  }
  BB30 {
    _69 <- { _69 with current = _41 };
    _41 <- any usize;
    assume { Resolve2.resolve _69 };
    w_31 <- ([#"../knapsack_full.rs" 116 12 116 18] w_31 + (1 : usize));
    _22 <- ();
    goto BB17
  }
  BB31 {
    assume { Resolve0.resolve it_27 };
    _32 <- ();
    i_16 <- ([#"../knapsack_full.rs" 118 8 118 14] i_16 + (1 : usize));
    _22 <- ();
    goto BB8
  }
  BB32 {
    _17 <- ();
    _84 <- items_1;
    _83 <- ([#"../knapsack_full.rs" 121 49 121 60] Len0.len _84);
    goto BB33
  }
  BB33 {
    result_82 <- ([#"../knapsack_full.rs" 121 30 121 61] WithCapacity0.with_capacity _83);
    goto BB34
  }
  BB34 {
    left_weight_85 <- max_weight_2;
    _87 <- items_1;
    j_86 <- ([#"../knapsack_full.rs" 124 16 124 27] Len0.len _87);
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    invariant j_items_len { [#"../knapsack_full.rs" 125 29 125 49] UInt64.to_int j_86 <= Seq.length (Model0.model items_1) };
    invariant left_weight_le_max { [#"../knapsack_full.rs" 126 36 126 63] UInt64.to_int left_weight_85 <= UInt64.to_int max_weight_2 };
    invariant result_weight { [#"../knapsack_full.rs" 125 4 125 51] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . Seq.length (Model1.model result_82) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (Model1.model result_82) -> Seq.get (Model1.model result_82) i = Seq.get r i) /\ SumWeights0.sum_weights r (Seq.length (Model1.model result_82)) <= UInt64.to_int left_weight_85 -> SumWeights0.sum_weights r 0 <= UInt64.to_int max_weight_2 };
    invariant result_value { [#"../knapsack_full.rs" 125 4 125 51] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . Seq.length (Model1.model result_82) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (Model1.model result_82) -> Seq.get (Model1.model result_82) i = Seq.get r i) /\ SumValues0.sum_values r (Seq.length (Model1.model result_82)) = M0.m (Model0.model items_1) (UInt64.to_int j_86) (UInt64.to_int left_weight_85) -> SumValues0.sum_values r 0 = M0.m (Model0.model items_1) (Seq.length (Model0.model items_1)) (UInt64.to_int max_weight_2) };
    invariant result_subseq { [#"../knapsack_full.rs" 125 4 125 51] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . Seq.length (Model1.model result_82) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (Model1.model result_82) -> Seq.get (Model1.model result_82) i = Seq.get r i) /\ SubseqRev0.subseq_rev r (Seq.length (Model1.model result_82)) (Model0.model items_1) (UInt64.to_int j_86) -> SubseqRev0.subseq_rev r 0 (Model0.model items_1) (Seq.length (Model0.model items_1)) };
    _95 <- j_86;
    _94 <- ([#"../knapsack_full.rs" 142 10 142 15] (0 : usize) < _95);
    switch (_94)
      | False -> goto BB50
      | True -> goto BB40
      end
  }
  BB40 {
    j_86 <- ([#"../knapsack_full.rs" 143 8 143 14] j_86 - (1 : usize));
    _98 <- items_1;
    _99 <- j_86;
    _97 <- ([#"../knapsack_full.rs" 144 18 144 26] Index0.index _98 _99);
    goto BB41
  }
  BB41 {
    it_96 <- _97;
    assume { Resolve0.resolve _97 };
    _105 <- best_value_9;
    _107 <- j_86;
    _106 <- ([#"../knapsack_full.rs" 145 22 145 27] _107 + (1 : usize));
    _104 <- ([#"../knapsack_full.rs" 145 11 145 28] Index1.index _105 _106);
    goto BB42
  }
  BB42 {
    _103 <- _104;
    _108 <- left_weight_85;
    _102 <- ([#"../knapsack_full.rs" 145 11 145 41] Index2.index _103 _108);
    goto BB43
  }
  BB43 {
    _101 <- _102;
    _113 <- best_value_9;
    _114 <- j_86;
    _112 <- ([#"../knapsack_full.rs" 145 45 145 58] Index1.index _113 _114);
    goto BB44
  }
  BB44 {
    _111 <- _112;
    _115 <- left_weight_85;
    _110 <- ([#"../knapsack_full.rs" 145 45 145 71] Index2.index _111 _115);
    goto BB45
  }
  BB45 {
    _109 <- _110;
    _100 <- ([#"../knapsack_full.rs" 145 11 145 71] _101 <> _109);
    switch (_100)
      | False -> goto BB48
      | True -> goto BB46
      end
  }
  BB46 {
    _117 <- borrow_mut result_82;
    result_82 <-  ^ _117;
    _118 <- it_96;
    _116 <- ([#"../knapsack_full.rs" 146 12 146 27] Push0.push _117 _118);
    goto BB47
  }
  BB47 {
    _119 <- KnapsackFull_Item_Type.item_weight it_96;
    assume { Resolve0.resolve it_96 };
    left_weight_85 <- ([#"../knapsack_full.rs" 147 12 147 36] left_weight_85 - _119);
    _22 <- ();
    goto BB49
  }
  BB48 {
    assume { Resolve0.resolve it_96 };
    _22 <- ();
    goto BB49
  }
  BB49 {
    goto BB39
  }
  BB50 {
    assume { Resolve3.resolve items_1 };
    _88 <- ();
    assume { Resolve4.resolve _0 };
    _0 <- result_82;
    result_82 <- any Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    assume { Resolve5.resolve best_value_9 };
    return _0
  }
  
end
