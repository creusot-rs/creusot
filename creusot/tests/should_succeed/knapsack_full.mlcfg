
module KnapsackFull_Max
  use int.MinMax
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg max [#"../knapsack_full.rs" 15 0 15 35] [@cfg:stackify] [@cfg:subregion_analysis] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 14 10 14 31] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var a : usize = a;
  var b : usize = b;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../knapsack_full.rs" 16 7 16 12] ([#"../knapsack_full.rs" 16 7 16 8] a) < ([#"../knapsack_full.rs" 16 11 16 12] b))
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../knapsack_full.rs" 17 8 17 9] _0 <- ([#"../knapsack_full.rs" 17 8 17 9] b);
    goto BB3
  }
  BB2 {
    [#"../knapsack_full.rs" 19 8 19 9] _0 <- ([#"../knapsack_full.rs" 19 8 19 9] a);
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module KnapsackFull_Item_Type
  use prelude.UIntSize
  use prelude.Int
  type t_item 'name =
    | C_Item 'name usize usize
    
  let function item_weight (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Item _ a _ -> a
      end
  let function item_value (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Item _ _ a -> a
      end
end
module KnapsackFull_SumWeights_Impl
  type name
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use seq.Seq
  predicate invariant0 (self : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val invariant0 (self : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val inv0 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv0 x = true
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  let rec ghost function sum_weights [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 25 11 25 33] 0 <= i /\ i <= Seq.length s}
    requires {[#"../knapsack_full.rs" 27 21 27 22] inv0 s}
    ensures { [#"../knapsack_full.rs" 26 10 26 21] result >= 0 }
    variant {[#"../knapsack_full.rs" 24 10 24 19] Seq.length s - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 28 4 31 5] if pure {i = Seq.length s} then
      0
    else
      UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights s (i + 1)
    
end
module KnapsackFull_SumValues_Impl
  type name
  use prelude.UIntSize
  use seq.Seq
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use prelude.Int
  let rec ghost function sum_values [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 36 11 36 33] i >= 0 /\ i <= Seq.length s}
    variant {[#"../knapsack_full.rs" 35 10 35 19] Seq.length s - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 38 4 41 5] if pure {i = Seq.length s} then
      0
    else
      UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values s (i + 1)
    
end
module KnapsackFull_SubseqRev_Impl
  type t
  use seq.Seq
  use seq.Seq
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use prelude.Int
  let rec ghost predicate subseq_rev [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
    requires {[#"../knapsack_full.rs" 46 11 46 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 47 11 47 36] 0 <= i2 /\ i2 <= Seq.length s2}
    variant {[#"../knapsack_full.rs" 45 10 45 12] i2}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 49 4 55 5] if pure {i2 = 0} then
      pure {i1 = Seq.length s1}
    else
      pure {i1 < Seq.length s1} && pure {Seq.get s1 i1 = Seq.get s2 (i2 - 1)} && subseq_rev s1 (i1 + 1) s2 (i2 - 1) || subseq_rev s1 i1 s2 (i2 - 1)
    
end
module KnapsackFull_M_Impl
  type name
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use seq.Seq
  predicate invariant1 (self : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val invariant1 (self : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val inv1 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv1 x = true
  predicate invariant0 (self : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val invariant0 (self : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val inv0 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv0 x = true
  use int.MinMax
  use prelude.UIntSize
  use seq.Seq
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  function sum_values0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_values0_def : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . sum_values0 s i = ([#"../knapsack_full.rs" 38 4 41 5] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values0 s (i + 1)
  )
  val sum_values0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 36 11 36 33] i >= 0 /\ i <= Seq.length s}
    ensures { result = sum_values0 s i }
    
  function sum_weights0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_weights0_def : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . sum_weights0 s i = ([#"../knapsack_full.rs" 28 4 31 5] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights0 s (i + 1)
  )
  val sum_weights0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 25 11 25 33] 0 <= i /\ i <= Seq.length s}
    requires {[#"../knapsack_full.rs" 27 21 27 22] inv1 s}
    ensures { result = sum_weights0 s i }
    
  axiom sum_weights0_spec : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . ([#"../knapsack_full.rs" 25 11 25 33] 0 <= i /\ i <= Seq.length s) -> ([#"../knapsack_full.rs" 27 21 27 22] inv1 s) -> ([#"../knapsack_full.rs" 26 10 26 21] sum_weights0 s i >= 0)
  use seq.Seq
  predicate subseq_rev0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i1 : int) (s2 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i2 : int)
    
  axiom subseq_rev0_def : forall s1 : Seq.seq (KnapsackFull_Item_Type.t_item name), i1 : int, s2 : Seq.seq (KnapsackFull_Item_Type.t_item name), i2 : int . subseq_rev0 s1 i1 s2 i2 = ([#"../knapsack_full.rs" 49 4 55 5] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev0 s1 (i1 + 1) s2 (i2 - 1) \/ subseq_rev0 s1 i1 s2 (i2 - 1)
  )
  val subseq_rev0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i1 : int) (s2 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i2 : int) : bool
    requires {[#"../knapsack_full.rs" 46 11 46 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 47 11 47 36] 0 <= i2 /\ i2 <= Seq.length s2}
    ensures { result = subseq_rev0 s1 i1 s2 i2 }
    
  let rec ghost function m [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 60 11 60 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack_full.rs" 61 11 61 17] 0 <= w}
    requires {[#"../knapsack_full.rs" 66 11 66 16] inv0 items}
    ensures { [#"../knapsack_full.rs" 62 10 62 21] result >= 0 }
    ensures { [#"../knapsack_full.rs" 63 0 65 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv1 s -> 0 <= j /\ j <= Seq.length s /\ subseq_rev0 s j items i /\ sum_weights0 s j <= w -> sum_values0 s j <= result }
    variant {[#"../knapsack_full.rs" 59 10 59 11] i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 67 4 74 5] if pure {i = 0} then
      0
    else
      if pure {UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w} then
        m items (i - 1) w
      else
        let a' = m items (i - 1) w in let b' = m items (i - 1) (w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))) + UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i - 1))) in MinMax.max a' b'
      
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module KnapsackFull_Knapsack01Dyn
  type name
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use seq.Seq
  predicate inv11 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val inv11 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = inv11 _x }
    
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max1  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv22 (_x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
  val inv22 (_x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv22 _x }
    
  function shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    
  val shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv22 self}
    ensures { result = shallow_model5 self }
    
  axiom shallow_model5_spec : forall self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv22 self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv11 (shallow_model5 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model5 self) <= UIntSize.to_int max1)
  predicate invariant22 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv11 (shallow_model5 self)
  val invariant22 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant22 self }
    
  axiom inv22 : forall x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . inv22 x = true
  use prelude.Borrow
  predicate invariant21 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)))
    
  val invariant21 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant21 self }
    
  predicate inv21 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv21 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv21 _x }
    
  axiom inv21 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) . inv21 x = true
  predicate invariant20 (self : borrowed usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant20 (self : borrowed usize) : bool
    ensures { result = invariant20 self }
    
  predicate inv20 (_x : borrowed usize)
  val inv20 (_x : borrowed usize) : bool
    ensures { result = inv20 _x }
    
  axiom inv20 : forall x : borrowed usize . inv20 x = true
  predicate invariant19 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant19 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant19 self }
    
  predicate inv19 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv19 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv19 _x }
    
  axiom inv19 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv19 x = true
  predicate invariant18 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant18 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant18 self }
    
  predicate inv18 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)))
    
  val inv18 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv18 _x }
    
  axiom inv18 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) . inv18 x = true
  predicate invariant17 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant17 (self : usize) : bool
    ensures { result = invariant17 self }
    
  predicate inv17 (_x : usize)
  val inv17 (_x : usize) : bool
    ensures { result = inv17 _x }
    
  axiom inv17 : forall x : usize . inv17 x = true
  predicate invariant16 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant16 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant16 self }
    
  predicate inv16 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv16 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv16 _x }
    
  axiom inv16 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv16 x = true
  predicate invariant15 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant15 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv15 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv15 x = true
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate invariant14 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant14 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize))
  val inv14 (_x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) . inv14 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant13 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant13 (self : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : Core_Option_Option_Type.t_option usize)
  val inv13 (_x : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Core_Option_Option_Type.t_option usize . inv13 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant12 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant12 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize))
  val inv12 (_x : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range usize) . inv12 x = true
  predicate invariant11 (self : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val invariant11 (self : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = invariant11 self }
    
  axiom inv11 : forall x : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv11 x = true
  predicate invariant10 (self : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant10 (self : Seq.seq usize) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq usize)
  val inv10 (_x : Seq.seq usize) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq usize . inv10 x = true
  predicate invariant9 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
  val inv9 (_x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) . inv9 x = true
  use seq.Seq
  predicate inv8 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv8 (_x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv8 _x }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv8 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv8 self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv9 (shallow_model1 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max1)
  predicate invariant8 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv9 (shallow_model1 self)
  val invariant8 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant8 self }
    
  axiom inv8 : forall x : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global) . inv8 x = true
  use seq.Seq
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv7 self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model3 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max1)
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model3 self)
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  predicate invariant6 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : usize) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : usize)
  val inv6 (_x : usize) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : usize . inv6 x = true
  predicate inv3 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val inv3 (_x : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = inv3 _x }
    
  use seq.Seq
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  function shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    
  val shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model4 self }
    
  axiom shallow_model4_spec : forall self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv3 (shallow_model4 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model4 self) <= UIntSize.to_int max1)
  predicate invariant5 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv3 (shallow_model4 self)
  val invariant5 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . inv5 x = true
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) . inv4 x = true
  predicate invariant3 (self : Seq.seq (KnapsackFull_Item_Type.t_item name))
  val invariant3 (self : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv3 x = true
  use seq.Seq
  predicate inv2 (_x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
  val inv2 (_x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
    ensures { result = inv2 _x }
    
  use prelude.Int
  function start_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : usize
  val start_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : usize
    ensures { result = start_log0 self }
    
  function deep_model0 (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model0 (self : usize) : int
    ensures { result = deep_model0 self }
    
  use seq.Seq
  function end_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : usize
  val end_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : usize
    ensures { result = end_log0 self }
    
  use int.Int
  function is_empty_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
  val is_empty_log0 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
    requires {[#"../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv2 self}
    ensures { result = is_empty_log0 self }
    
  axiom is_empty_log0_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24] inv2 self) -> ([#"../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88] not is_empty_log0 self -> deep_model0 (start_log0 self) <= deep_model0 (end_log0 self))
  function range_inclusive_len0 (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : int =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5] if is_empty_log0 r then
      0
    else
      deep_model0 (end_log0 r) - deep_model0 (start_log0 r) + 1
    
  val range_inclusive_len0 (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : int
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv2 r}
    ensures { result = range_inclusive_len0 r }
    
  axiom range_inclusive_len0_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63] inv2 r) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43] is_empty_log0 r = (range_inclusive_len0 r = 0))
  predicate produces1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (visited : Seq.seq usize) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9] Seq.length visited = range_inclusive_len0 self - range_inclusive_len0 o /\ (is_empty_log0 self -> is_empty_log0 o) /\ (is_empty_log0 o \/ end_log0 self = end_log0 o) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> deep_model0 (Seq.get visited i) = deep_model0 (start_log0 self) + i)
  val produces1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (visited : Seq.seq usize) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
    ensures { result = produces1 self visited o }
    
  function produces_trans1 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (ab : Seq.seq usize) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (bc : Seq.seq usize) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10] ()
  val produces_trans1 (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (ab : Seq.seq usize) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (bc : Seq.seq usize) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces1 a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces1 b bc c}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv2 a}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv10 ab}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv2 b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv10 bc}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv2 c}
    ensures { result = produces_trans1 a ab b bc c }
    
  axiom produces_trans1_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize, ab : Seq.seq usize, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize, bc : Seq.seq usize, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32] produces1 a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32] produces1 b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23] inv2 a) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33] inv10 ab) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53] inv2 b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63] inv10 bc) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83] inv2 c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42] produces1 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10] ()
  val produces_refl1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25] inv2 self}
    ensures { result = produces_refl1 self }
    
  axiom produces_refl1_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25] inv2 self) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45] produces1 self (Seq.empty ) self)
  predicate invariant2 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize . inv2 x = true
  predicate invariant1 (self : KnapsackFull_Item_Type.t_item name)
  val invariant1 (self : KnapsackFull_Item_Type.t_item name) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : KnapsackFull_Item_Type.t_item name)
  val inv1 (_x : KnapsackFull_Item_Type.t_item name) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : KnapsackFull_Item_Type.t_item name . inv1 x = true
  predicate inv0 (_x : Core_Ops_Range_Range_Type.t_range usize)
  val inv0 (_x : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = inv0 _x }
    
  predicate produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ deep_model0 (Core_Ops_Range_Range_Type.range_start self) <= deep_model0 (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> deep_model0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model0 (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = deep_model0 (Core_Ops_Range_Range_Type.range_start o) - deep_model0 (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> deep_model0 (Seq.get visited i) = deep_model0 (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces0 (self : Core_Ops_Range_Range_Type.t_range usize) (visited : Seq.seq usize) (o : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = produces0 self visited o }
    
  function produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    
  val produces_trans0 (a : Core_Ops_Range_Range_Type.t_range usize) (ab : Seq.seq usize) (b : Core_Ops_Range_Range_Type.t_range usize) (bc : Seq.seq usize) (c : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv10 ab}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv10 bc}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c}
    ensures { result = produces_trans0 a ab b bc c }
    
  axiom produces_trans0_spec : forall a : Core_Ops_Range_Range_Type.t_range usize, ab : Seq.seq usize, b : Core_Ops_Range_Range_Type.t_range usize, bc : Seq.seq usize, c : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces0 a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces0 b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv0 a) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv10 ab) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv0 b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv10 bc) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv0 c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces0 a (Seq.(++) ab bc) c)
  function produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
  val produces_refl0 (self : Core_Ops_Range_Range_Type.t_range usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self}
    ensures { result = produces_refl0 self }
    
  axiom produces_refl0_spec : forall self : Core_Ops_Range_Range_Type.t_range usize . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv0 self) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces0 self (Seq.empty ) self)
  predicate invariant0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = invariant0 self }
    
  axiom inv0 : forall x : Core_Ops_Range_Range_Type.t_range usize . inv0 x = true
  use seq.Seq
  function index_logic4 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : KnapsackFull_Item_Type.t_item name
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model5 self) ix
  val index_logic4 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : KnapsackFull_Item_Type.t_item name
    ensures { result = index_logic4 self ix }
    
  use prelude.Ghost
  use seq.Seq
  function shallow_model10 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model4 ( * self)
  val shallow_model10 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    ensures { result = shallow_model10 self }
    
  val push0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))) (value : KnapsackFull_Item_Type.t_item name) : ()
    requires {inv21 self}
    requires {inv1 value}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 78 26 78 51] shallow_model4 ( ^ self) = Seq.snoc (shallow_model10 self) value }
    
  predicate resolve6 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global))
    
  val resolve6 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve6 self }
    
  predicate resolve8 (self : usize) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve8 (self : usize) : bool
    ensures { result = resolve8 self }
    
  function index_logic5 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic5 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (ix : int) : usize
    ensures { result = index_logic5 self ix }
    
  predicate resolve7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (shallow_model3 self) -> resolve8 (index_logic5 self i)
  val resolve7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve7 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model1 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    ensures { result = index_logic0 self ix }
    
  predicate resolve5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 self) -> resolve7 (index_logic0 self i)
  val resolve5 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve5 self }
    
  use seq.Seq
  predicate subseq_rev0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i1 : int) (s2 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i2 : int)
    
  axiom subseq_rev0_def : forall s1 : Seq.seq (KnapsackFull_Item_Type.t_item name), i1 : int, s2 : Seq.seq (KnapsackFull_Item_Type.t_item name), i2 : int . subseq_rev0 s1 i1 s2 i2 = ([#"../knapsack_full.rs" 49 4 55 5] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev0 s1 (i1 + 1) s2 (i2 - 1) \/ subseq_rev0 s1 i1 s2 (i2 - 1)
  )
  val subseq_rev0 [#"../knapsack_full.rs" 48 0 48 67] (s1 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i1 : int) (s2 : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i2 : int) : bool
    requires {[#"../knapsack_full.rs" 46 11 46 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 47 11 47 36] 0 <= i2 /\ i2 <= Seq.length s2}
    ensures { result = subseq_rev0 s1 i1 s2 i2 }
    
  function sum_values0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_values0_def : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . sum_values0 s i = ([#"../knapsack_full.rs" 38 4 41 5] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values0 s (i + 1)
  )
  val sum_values0 [#"../knapsack_full.rs" 37 0 37 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 36 11 36 33] i >= 0 /\ i <= Seq.length s}
    ensures { result = sum_values0 s i }
    
  function sum_weights0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_weights0_def : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . sum_weights0 s i = ([#"../knapsack_full.rs" 28 4 31 5] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights0 s (i + 1)
  )
  val sum_weights0 [#"../knapsack_full.rs" 27 0 27 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 25 11 25 33] 0 <= i /\ i <= Seq.length s}
    requires {[#"../knapsack_full.rs" 27 21 27 22] inv3 s}
    ensures { result = sum_weights0 s i }
    
  axiom sum_weights0_spec : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . ([#"../knapsack_full.rs" 25 11 25 33] 0 <= i /\ i <= Seq.length s) -> ([#"../knapsack_full.rs" 27 21 27 22] inv3 s) -> ([#"../knapsack_full.rs" 26 10 26 21] sum_weights0 s i >= 0)
  function index_logic2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : KnapsackFull_Item_Type.t_item name
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model4 self) ix
  val index_logic2 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : KnapsackFull_Item_Type.t_item name
    ensures { result = index_logic2 self ix }
    
  val with_capacity0 (capacity : usize) : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 71 26 71 44] Seq.length (shallow_model4 result) = 0 }
    ensures { inv5 result }
    
  predicate resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed usize) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed usize) : bool
    ensures { result = resolve3 self }
    
  use prelude.Slice
  predicate resolve_elswhere1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) : bool
    ensures { result = resolve_elswhere1 self old' fin }
    
  predicate has_value2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) : bool
    ensures { result = has_value2 self seq out }
    
  predicate in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) : bool
    ensures { result = in_bounds2 self seq }
    
  function shallow_model9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model3 ( * self)
  val shallow_model9 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : Seq.seq usize
    ensures { result = shallow_model9 self }
    
  val index_mut1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed usize
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds2 index (shallow_model9 self)}
    requires {inv19 self}
    requires {inv6 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value2 index (shallow_model9 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value2 index (shallow_model3 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere1 index (shallow_model9 self) (shallow_model3 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model3 ( ^ self)) = Seq.length (shallow_model9 self) }
    ensures { inv20 result }
    
  predicate resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 129 8 129 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere0 [@inline:trivial] (self : usize) (old' : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (fin : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve_elswhere0 self old' fin }
    
  predicate has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) (out : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = has_value1 self seq out }
    
  predicate in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)))
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds1 [@inline:trivial] (self : usize) (seq : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = in_bounds1 self seq }
    
  function shallow_model8 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model8 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    ensures { result = shallow_model8 self }
    
  val index_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))) (index : usize) : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 132 27 132 46] in_bounds1 index (shallow_model8 self)}
    requires {inv18 self}
    requires {inv6 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 133 26 133 54] has_value1 index (shallow_model8 self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 134 26 134 57] has_value1 index (shallow_model1 ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 135 26 135 62] resolve_elswhere0 index (shallow_model8 self) (shallow_model1 ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (shallow_model1 ( ^ self)) = Seq.length (shallow_model8 self) }
    ensures { inv19 result }
    
  use int.MinMax
  val max0 [#"../knapsack_full.rs" 15 0 15 35] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 14 10 14 31] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b) }
    
  function shallow_model7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model3 self
  val shallow_model7 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) : Seq.seq usize
    ensures { result = shallow_model7 self }
    
  val index2 (self : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (index : usize) : usize
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds2 index (shallow_model7 self)}
    requires {inv16 self}
    requires {inv6 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value2 index (shallow_model7 self) result }
    ensures { inv17 result }
    
  function shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model1 self
  val shallow_model6 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    ensures { result = shallow_model6 self }
    
  val index1 (self : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds1 index (shallow_model6 self)}
    requires {inv15 self}
    requires {inv6 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value1 index (shallow_model6 self) result }
    ensures { inv16 result }
    
  predicate resolve2 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) : bool
    ensures { result = resolve2 self }
    
  use seq.Seq
  predicate completed1 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57] is_empty_log0 ( * self) /\ is_empty_log0 ( ^ self)
  val completed1 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) : bool
    ensures { result = completed1 self }
    
  val next1 (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)) : Core_Option_Option_Type.t_option usize
    requires {inv14 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed1 self
      | Core_Option_Option_Type.C_Some v -> produces1 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv13 result }
    
  use prelude.Ghost
  use prelude.Ghost
  predicate into_iter_post1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (res : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) (res : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
    ensures { result = into_iter_post1 self res }
    
  predicate into_iter_pre1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : bool
    ensures { result = into_iter_pre1 self }
    
  val into_iter1 (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre1 self}
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post1 self result }
    ensures { inv2 result }
    
  val new2 (start : usize) (end' : usize) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
    requires {inv6 start}
    requires {inv6 end'}
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53] start_log0 result = start }
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49] end_log0 result = end' }
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93] deep_model0 start <= deep_model0 end' -> not is_empty_log0 result }
    ensures { inv2 result }
    
  predicate resolve1 (self : KnapsackFull_Item_Type.t_item name)
  val resolve1 (self : KnapsackFull_Item_Type.t_item name) : bool
    ensures { result = resolve1 self }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (KnapsackFull_Item_Type.t_item name)) (out : KnapsackFull_Item_Type.t_item name)
    
   =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (KnapsackFull_Item_Type.t_item name)) (out : KnapsackFull_Item_Type.t_item name) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (KnapsackFull_Item_Type.t_item name)) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (KnapsackFull_Item_Type.t_item name)) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model5 self
  val shallow_model0 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (KnapsackFull_Item_Type.t_item name)
    ensures { result = shallow_model0 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : KnapsackFull_Item_Type.t_item name
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model0 self)}
    requires {inv4 self}
    requires {inv6 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model0 self) result }
    ensures { inv1 result }
    
  predicate resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = resolve0 self }
    
  predicate completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve0 self /\ deep_model0 (Core_Ops_Range_Range_Type.range_start ( * self)) >= deep_model0 (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : bool
    ensures { result = completed0 self }
    
  val next0 (self : borrowed (Core_Ops_Range_Range_Type.t_range usize)) : Core_Option_Option_Type.t_option usize
    requires {inv12 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
      | Core_Option_Option_Type.C_None -> completed0 self
      | Core_Option_Option_Type.C_Some v -> produces0 ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { inv13 result }
    
  function m0 [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    
  axiom m0_def : forall items : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int, w : int . m0 items i w = ([#"../knapsack_full.rs" 67 4 74 5] if i = 0 then
    0
  else
    if UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w then
      m0 items (i - 1) w
    else
      MinMax.max (m0 items (i - 1) w) (m0 items (i - 1) (w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))) + UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i - 1))))
    
  )
  val m0 [#"../knapsack_full.rs" 66 0 66 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 60 11 60 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack_full.rs" 61 11 61 17] 0 <= w}
    requires {[#"../knapsack_full.rs" 66 11 66 16] inv11 items}
    ensures { result = m0 items i w }
    
  axiom m0_spec : forall items : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int, w : int . ([#"../knapsack_full.rs" 60 11 60 37] 0 <= i /\ i <= Seq.length items) -> ([#"../knapsack_full.rs" 61 11 61 17] 0 <= w) -> ([#"../knapsack_full.rs" 66 11 66 16] inv11 items) -> ([#"../knapsack_full.rs" 63 0 65 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv3 s -> 0 <= j /\ j <= Seq.length s /\ subseq_rev0 s j items i /\ sum_weights0 s j <= w -> sum_values0 s j <= m0 items i w) && ([#"../knapsack_full.rs" 62 10 62 21] m0 items i w >= 0)
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  predicate into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post0 (self : Core_Ops_Range_Range_Type.t_range usize) (res : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_post0 self res }
    
  predicate into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre0 (self : Core_Ops_Range_Range_Type.t_range usize) : bool
    ensures { result = into_iter_pre0 self }
    
  val into_iter0 (self : Core_Ops_Range_Range_Type.t_range usize) : Core_Ops_Range_Range_Type.t_range usize
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_pre0 self}
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 166 1] into_iter_post0 self result }
    ensures { inv0 result }
    
  val from_elem1 (elem : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (n : usize) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    requires {inv7 elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model1 result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> index_logic0 result i = elem }
    ensures { inv8 result }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model0 self) }
    
  val from_elem0 (elem : usize) (n : usize) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    requires {inv6 elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 157 22 157 41] Seq.length (shallow_model3 result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 158 12 158 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> index_logic5 result i = elem }
    ensures { inv7 result }
    
  let rec cfg knapsack01_dyn [#"../knapsack_full.rs" 85 0 85 91] [@cfg:stackify] [@cfg:subregion_analysis] (items : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (max_weight : usize) : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../knapsack_full.rs" 77 11 77 34] Seq.length (shallow_model0 items) < 10000000}
    requires {[#"../knapsack_full.rs" 78 11 78 33] UIntSize.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 79 0 79 86] forall i : int . 0 <= i /\ i < Seq.length (shallow_model0 items) -> UIntSize.to_int (KnapsackFull_Item_Type.item_value (index_logic4 items i)) <= 10000000}
    requires {[#"../knapsack_full.rs" 85 28 85 33] inv4 items}
    ensures { [#"../knapsack_full.rs" 80 10 80 60] sum_weights0 (shallow_model4 result) (Seq.length (shallow_model4 result)) <= UIntSize.to_int max_weight }
    ensures { [#"../knapsack_full.rs" 81 10 81 54] subseq_rev0 (shallow_model4 result) 0 (shallow_model0 items) (Seq.length (shallow_model0 items)) }
    ensures { [#"../knapsack_full.rs" 82 0 84 2] forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv3 s -> subseq_rev0 s 0 (shallow_model0 items) (Seq.length (shallow_model0 items)) /\ sum_weights0 s (Seq.length s) <= UIntSize.to_int max_weight -> sum_values0 s (Seq.length s) <= sum_values0 (shallow_model4 result) (Seq.length (shallow_model4 result)) }
    ensures { [#"../knapsack_full.rs" 85 75 85 91] inv5 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var items : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global) = items;
  var max_weight : usize = max_weight;
  var best_value : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _10 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _14 : usize;
  var iter : Core_Ops_Range_Range_Type.t_range usize;
  var _19 : usize;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced : Ghost.ghost_ty (Seq.seq usize);
  var _31 : ();
  var _32 : Core_Option_Option_Type.t_option usize;
  var _33 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _34 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem : usize;
  var _37 : Ghost.ghost_ty (Seq.seq usize);
  var i : usize;
  var it : KnapsackFull_Item_Type.t_item name;
  var _41 : KnapsackFull_Item_Type.t_item name;
  var iter1 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _45 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var iter_old1 : Ghost.ghost_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var produced1 : Ghost.ghost_ty (Seq.seq usize);
  var _58 : Core_Option_Option_Type.t_option usize;
  var _59 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _60 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var __creusot_proc_iter_elem1 : usize;
  var _63 : Ghost.ghost_ty (Seq.seq usize);
  var w : usize;
  var _66 : usize;
  var _70 : usize;
  var _72 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _77 : usize;
  var _79 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _85 : usize;
  var _87 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _94 : borrowed usize;
  var _95 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _96 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _97 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var result : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _104 : usize;
  var left_weight : usize;
  var j : usize;
  var it1 : KnapsackFull_Item_Type.t_item name;
  var _118 : KnapsackFull_Item_Type.t_item name;
  var _123 : usize;
  var _125 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _131 : usize;
  var _133 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _137 : ();
  var _138 : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../../../../creusot-contracts/src/lib.rs" 251 8 251 40] _10 <- ([#"../knapsack_full.rs" 86 30 86 53] from_elem0 ([#"../knapsack_full.rs" 86 35 86 36] [#"../knapsack_full.rs" 86 35 86 36] (0 : usize)) ([#"../knapsack_full.rs" 86 38 86 52] ([#"../knapsack_full.rs" 86 38 86 48] max_weight) + ([#"../knapsack_full.rs" 86 51 86 52] [#"../knapsack_full.rs" 86 51 86 52] (1 : usize))));
    goto BB1
  }
  BB1 {
    [#"../knapsack_full.rs" 86 55 86 66] _14 <- ([#"../knapsack_full.rs" 86 55 86 66] len0 ([#"../knapsack_full.rs" 86 55 86 60] items));
    goto BB2
  }
  BB2 {
    [#"../../../../creusot-contracts/src/lib.rs" 251 8 251 40] best_value <- ([#"../knapsack_full.rs" 86 25 86 71] from_elem1 _10 ([#"../knapsack_full.rs" 86 55 86 70] _14 + ([#"../knapsack_full.rs" 86 69 86 70] [#"../knapsack_full.rs" 86 69 86 70] (1 : usize))));
    _10 <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    _14 <- any usize;
    goto BB3
  }
  BB3 {
    [#"../knapsack_full.rs" 95 16 95 27] _19 <- ([#"../knapsack_full.rs" 95 16 95 27] len0 ([#"../knapsack_full.rs" 95 16 95 21] items));
    goto BB4
  }
  BB4 {
    [#"../knapsack_full.rs" 88 4 88 55] iter <- ([#"../knapsack_full.rs" 88 4 88 55] into_iter0 ([#"../knapsack_full.rs" 95 13 95 27] Core_Ops_Range_Range_Type.C_Range ([#"../knapsack_full.rs" 95 13 95 14] [#"../knapsack_full.rs" 95 13 95 14] (0 : usize)) _19));
    _19 <- any usize;
    goto BB5
  }
  BB5 {
    [#"../knapsack_full.rs" 88 4 88 55] iter_old <- ([#"../knapsack_full.rs" 88 4 88 55] Ghost.new iter);
    goto BB6
  }
  BB6 {
    [#"../knapsack_full.rs" 88 4 88 55] produced <- ([#"../knapsack_full.rs" 88 4 88 55] Ghost.new (Seq.empty ));
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    invariant { [#"../knapsack_full.rs" 88 4 88 55] inv0 iter };
    invariant { [#"../knapsack_full.rs" 88 4 88 55] produces0 (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"../knapsack_full.rs" 88 16 88 53] Seq.length (shallow_model0 items) + 1 = Seq.length (shallow_model1 best_value) };
    invariant { [#"../knapsack_full.rs" 88 4 88 55] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 best_value) -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model3 (index_logic0 best_value i)) };
    invariant { [#"../knapsack_full.rs" 88 4 88 55] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (Ghost.inner produced) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight -> UIntSize.to_int (Seq.get (shallow_model3 (index_logic0 best_value ii)) ww) = m0 (shallow_model0 items) ii ww };
    invariant { [#"../knapsack_full.rs" 88 4 88 55] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (shallow_model0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight -> UIntSize.to_int (Seq.get (shallow_model3 (index_logic0 best_value ii)) ww) <= 10000000 * ii };
    goto BB13
  }
  BB13 {
    [#"../knapsack_full.rs" 88 4 88 55] _34 <- Borrow.borrow_mut iter;
    [#"../knapsack_full.rs" 88 4 88 55] iter <-  ^ _34;
    [#"../knapsack_full.rs" 88 4 88 55] _33 <- Borrow.borrow_final ( * _34) (Borrow.get_id _34);
    [#"../knapsack_full.rs" 88 4 88 55] _34 <- { _34 with current = ( ^ _33) ; };
    [#"../knapsack_full.rs" 88 4 88 55] _32 <- ([#"../knapsack_full.rs" 88 4 88 55] next0 _33);
    _33 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB14
  }
  BB14 {
    assume { resolve0 _34 };
    switch (_32)
      | Core_Option_Option_Type.C_None -> goto BB15
      | Core_Option_Option_Type.C_Some _ -> goto BB16
      end
  }
  BB15 {
    [#"../knapsack_full.rs" 119 49 119 60] _104 <- ([#"../knapsack_full.rs" 119 49 119 60] len0 ([#"../knapsack_full.rs" 119 49 119 54] items));
    goto BB49
  }
  BB16 {
    goto BB18
  }
  BB17 {
    assert { [#"../knapsack_full.rs" 88 4 88 55] false };
    absurd
  }
  BB18 {
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] Core_Option_Option_Type.some_0 _32);
    [#"../knapsack_full.rs" 88 4 88 55] _37 <- ([#"../knapsack_full.rs" 88 4 88 55] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB19
  }
  BB19 {
    [#"../knapsack_full.rs" 88 4 88 55] produced <- ([#"../knapsack_full.rs" 88 4 88 55] _37);
    [#"../knapsack_full.rs" 88 4 88 55] _37 <- any Ghost.ghost_ty (Seq.seq usize);
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] i <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem);
    [#"../knapsack_full.rs" 96 23 96 26] _41 <- ([#"../knapsack_full.rs" 96 23 96 26] index0 ([#"../knapsack_full.rs" 96 18 96 23] items) ([#"../knapsack_full.rs" 96 24 96 25] i));
    goto BB20
  }
  BB20 {
    [#"../knapsack_full.rs" 96 17 96 26] it <- ([#"../knapsack_full.rs" 96 17 96 26] _41);
    assert { [@expl:type invariant] inv1 _41 };
    assume { resolve1 _41 };
    [#"../knapsack_full.rs" 110 17 110 31] _45 <- ([#"../knapsack_full.rs" 110 17 110 31] new2 ([#"../knapsack_full.rs" 110 17 110 18] [#"../knapsack_full.rs" 110 17 110 18] (0 : usize)) ([#"../knapsack_full.rs" 110 21 110 31] max_weight));
    goto BB21
  }
  BB21 {
    [#"../knapsack_full.rs" 98 8 98 59] iter1 <- ([#"../knapsack_full.rs" 98 8 98 59] into_iter1 _45);
    _45 <- any Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
    goto BB22
  }
  BB22 {
    [#"../knapsack_full.rs" 98 8 98 59] iter_old1 <- ([#"../knapsack_full.rs" 98 8 98 59] Ghost.new iter1);
    goto BB23
  }
  BB23 {
    [#"../knapsack_full.rs" 98 8 98 59] produced1 <- ([#"../knapsack_full.rs" 98 8 98 59] Ghost.new (Seq.empty ));
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    invariant { [#"../knapsack_full.rs" 98 8 98 59] inv2 iter1 };
    invariant { [#"../knapsack_full.rs" 98 8 98 59] produces1 (Ghost.inner iter_old1) (Ghost.inner produced1) iter1 };
    invariant { [#"../knapsack_full.rs" 98 20 98 57] Seq.length (shallow_model0 items) + 1 = Seq.length (shallow_model1 best_value) };
    invariant { [#"../knapsack_full.rs" 98 8 98 59] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 best_value) -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model3 (index_logic0 best_value i)) };
    invariant { [#"../knapsack_full.rs" 98 8 98 59] forall ww : int . forall ii : int . 0 <= ii /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight -> UIntSize.to_int (Seq.get (shallow_model3 (index_logic0 best_value ii)) ww) = m0 (shallow_model0 items) ii ww };
    invariant { [#"../knapsack_full.rs" 98 8 98 59] forall ww : int . 0 <= ww /\ ww <= Seq.length (Ghost.inner produced1) - 1 -> UIntSize.to_int (Seq.get (shallow_model3 (index_logic0 best_value (UIntSize.to_int i + 1))) ww) = m0 (shallow_model0 items) (UIntSize.to_int i + 1) ww };
    invariant { [#"../knapsack_full.rs" 98 8 98 59] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (shallow_model0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight -> UIntSize.to_int (Seq.get (shallow_model3 (index_logic0 best_value ii)) ww) <= 10000000 * ii };
    goto BB31
  }
  BB31 {
    [#"../knapsack_full.rs" 98 8 98 59] _60 <- Borrow.borrow_mut iter1;
    [#"../knapsack_full.rs" 98 8 98 59] iter1 <-  ^ _60;
    [#"../knapsack_full.rs" 98 8 98 59] _59 <- Borrow.borrow_final ( * _60) (Borrow.get_id _60);
    [#"../knapsack_full.rs" 98 8 98 59] _60 <- { _60 with current = ( ^ _59) ; };
    [#"../knapsack_full.rs" 98 8 98 59] _58 <- ([#"../knapsack_full.rs" 98 8 98 59] next1 _59);
    _59 <- any borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
    goto BB32
  }
  BB32 {
    assume { resolve2 _60 };
    switch (_58)
      | Core_Option_Option_Type.C_None -> goto BB33
      | Core_Option_Option_Type.C_Some _ -> goto BB34
      end
  }
  BB33 {
    assert { [@expl:type invariant] inv1 it };
    assume { resolve1 it };
    [#"../knapsack_full.rs" 98 8 98 59] _31 <- ([#"../knapsack_full.rs" 98 8 98 59] ());
    goto BB12
  }
  BB34 {
    goto BB35
  }
  BB35 {
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem1 <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] Core_Option_Option_Type.some_0 _58);
    [#"../knapsack_full.rs" 98 8 98 59] _63 <- ([#"../knapsack_full.rs" 98 8 98 59] Ghost.new (Seq.(++) (Ghost.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)));
    goto BB36
  }
  BB36 {
    [#"../knapsack_full.rs" 98 8 98 59] produced1 <- ([#"../knapsack_full.rs" 98 8 98 59] _63);
    [#"../knapsack_full.rs" 98 8 98 59] _63 <- any Ghost.ghost_ty (Seq.seq usize);
    [#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] w <- ([#"../../../../creusot-contracts-proc/src/lib.rs" 664 0 664 51] __creusot_proc_iter_elem1);
    switch ([#"../knapsack_full.rs" 111 38 111 51] ([#"../knapsack_full.rs" 111 38 111 47] KnapsackFull_Item_Type.item_weight it) > ([#"../knapsack_full.rs" 111 50 111 51] w))
      | False -> goto BB40
      | True -> goto BB37
      end
  }
  BB37 {
    [#"../knapsack_full.rs" 112 26 112 29] _72 <- ([#"../knapsack_full.rs" 112 26 112 29] index1 ([#"../knapsack_full.rs" 112 16 112 26] best_value) ([#"../knapsack_full.rs" 112 27 112 28] i));
    goto BB38
  }
  BB38 {
    [#"../knapsack_full.rs" 112 29 112 32] _70 <- ([#"../knapsack_full.rs" 112 29 112 32] index2 ([#"../knapsack_full.rs" 112 16 112 29] _72) ([#"../knapsack_full.rs" 112 30 112 31] w));
    goto BB39
  }
  BB39 {
    [#"../knapsack_full.rs" 112 16 112 32] _66 <- ([#"../knapsack_full.rs" 112 16 112 32] _70);
    goto BB46
  }
  BB40 {
    [#"../knapsack_full.rs" 114 30 114 33] _79 <- ([#"../knapsack_full.rs" 114 30 114 33] index1 ([#"../knapsack_full.rs" 114 20 114 30] best_value) ([#"../knapsack_full.rs" 114 31 114 32] i));
    goto BB41
  }
  BB41 {
    [#"../knapsack_full.rs" 114 33 114 36] _77 <- ([#"../knapsack_full.rs" 114 33 114 36] index2 ([#"../knapsack_full.rs" 114 20 114 33] _79) ([#"../knapsack_full.rs" 114 34 114 35] w));
    goto BB42
  }
  BB42 {
    [#"../knapsack_full.rs" 114 48 114 51] _87 <- ([#"../knapsack_full.rs" 114 48 114 51] index1 ([#"../knapsack_full.rs" 114 38 114 48] best_value) ([#"../knapsack_full.rs" 114 49 114 50] i));
    goto BB43
  }
  BB43 {
    [#"../knapsack_full.rs" 114 51 114 66] _85 <- ([#"../knapsack_full.rs" 114 51 114 66] index2 ([#"../knapsack_full.rs" 114 38 114 51] _87) ([#"../knapsack_full.rs" 114 52 114 65] ([#"../knapsack_full.rs" 114 52 114 53] w) - ([#"../knapsack_full.rs" 114 56 114 65] KnapsackFull_Item_Type.item_weight it)));
    goto BB44
  }
  BB44 {
    [#"../knapsack_full.rs" 114 16 114 78] _66 <- ([#"../knapsack_full.rs" 114 16 114 78] max0 ([#"../knapsack_full.rs" 114 20 114 36] _77) ([#"../knapsack_full.rs" 114 38 114 77] ([#"../knapsack_full.rs" 114 38 114 66] _85) + ([#"../knapsack_full.rs" 114 69 114 77] KnapsackFull_Item_Type.item_value it)));
    goto BB45
  }
  BB45 {
    goto BB46
  }
  BB46 {
    [#"../knapsack_full.rs" 111 12 111 22] _97 <- Borrow.borrow_mut best_value;
    [#"../knapsack_full.rs" 111 12 111 22] best_value <-  ^ _97;
    [#"../knapsack_full.rs" 111 22 111 29] _96 <- ([#"../knapsack_full.rs" 111 22 111 29] index_mut0 _97 ([#"../knapsack_full.rs" 111 23 111 28] ([#"../knapsack_full.rs" 111 23 111 24] i) + ([#"../knapsack_full.rs" 111 27 111 28] [#"../knapsack_full.rs" 111 27 111 28] (1 : usize))));
    _97 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    goto BB47
  }
  BB47 {
    [#"../knapsack_full.rs" 111 12 111 29] _95 <- Borrow.borrow_final ( * _96) (Borrow.get_id _96);
    [#"../knapsack_full.rs" 111 12 111 29] _96 <- { _96 with current = ( ^ _95) ; };
    [#"../knapsack_full.rs" 111 29 111 32] _94 <- ([#"../knapsack_full.rs" 111 29 111 32] index_mut1 _95 ([#"../knapsack_full.rs" 111 30 111 31] w));
    _95 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB48
  }
  BB48 {
    [#"../knapsack_full.rs" 111 12 115 13] _94 <- { _94 with current = ([#"../knapsack_full.rs" 111 12 115 13] _66) ; };
    [#"../knapsack_full.rs" 111 12 115 13] _66 <- any usize;
    assume { resolve3 _94 };
    assume { resolve4 _96 };
    [#"../knapsack_full.rs" 110 32 116 9] _31 <- ([#"../knapsack_full.rs" 110 32 116 9] ());
    goto BB30
  }
  BB49 {
    [#"../knapsack_full.rs" 119 30 119 61] result <- ([#"../knapsack_full.rs" 119 30 119 61] with_capacity0 _104);
    _104 <- any usize;
    goto BB50
  }
  BB50 {
    [#"../knapsack_full.rs" 120 26 120 36] left_weight <- ([#"../knapsack_full.rs" 120 26 120 36] max_weight);
    [#"../knapsack_full.rs" 122 16 122 27] j <- ([#"../knapsack_full.rs" 122 16 122 27] len0 ([#"../knapsack_full.rs" 122 16 122 21] items));
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    goto BB53
  }
  BB53 {
    goto BB54
  }
  BB54 {
    goto BB55
  }
  BB55 {
    invariant { [#"../knapsack_full.rs" 123 16 123 34] UIntSize.to_int j <= Seq.length (shallow_model0 items) };
    invariant { [#"../knapsack_full.rs" 124 16 124 43] UIntSize.to_int left_weight <= UIntSize.to_int max_weight };
    invariant { [#"../knapsack_full.rs" 123 4 123 36] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv3 r -> Seq.length (shallow_model4 result) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model4 result) -> index_logic2 result i = Seq.get r i) /\ sum_weights0 r (Seq.length (shallow_model4 result)) <= UIntSize.to_int left_weight -> sum_weights0 r 0 <= UIntSize.to_int max_weight };
    invariant { [#"../knapsack_full.rs" 123 4 123 36] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv3 r -> Seq.length (shallow_model4 result) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model4 result) -> index_logic2 result i = Seq.get r i) /\ sum_values0 r (Seq.length (shallow_model4 result)) = m0 (shallow_model0 items) (UIntSize.to_int j) (UIntSize.to_int left_weight) -> sum_values0 r 0 = m0 (shallow_model0 items) (Seq.length (shallow_model0 items)) (UIntSize.to_int max_weight) };
    invariant { [#"../knapsack_full.rs" 123 4 123 36] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . inv3 r -> Seq.length (shallow_model4 result) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model4 result) -> index_logic2 result i = Seq.get r i) /\ subseq_rev0 r (Seq.length (shallow_model4 result)) (shallow_model0 items) (UIntSize.to_int j) -> subseq_rev0 r 0 (shallow_model0 items) (Seq.length (shallow_model0 items)) };
    goto BB56
  }
  BB56 {
    switch ([#"../knapsack_full.rs" 140 10 140 15] ([#"../knapsack_full.rs" 140 10 140 11] [#"../knapsack_full.rs" 140 10 140 11] (0 : usize)) < ([#"../knapsack_full.rs" 140 14 140 15] j))
      | False -> goto BB67
      | True -> goto BB57
      end
  }
  BB57 {
    [#"../knapsack_full.rs" 141 8 141 14] j <- ([#"../knapsack_full.rs" 141 8 141 14] j - ([#"../knapsack_full.rs" 141 13 141 14] [#"../knapsack_full.rs" 141 13 141 14] (1 : usize)));
    [#"../knapsack_full.rs" 142 23 142 26] _118 <- ([#"../knapsack_full.rs" 142 23 142 26] index0 ([#"../knapsack_full.rs" 142 18 142 23] items) ([#"../knapsack_full.rs" 142 24 142 25] j));
    goto BB58
  }
  BB58 {
    [#"../knapsack_full.rs" 142 17 142 26] it1 <- ([#"../knapsack_full.rs" 142 17 142 26] _118);
    assert { [@expl:type invariant] inv1 _118 };
    assume { resolve1 _118 };
    [#"../knapsack_full.rs" 143 21 143 28] _125 <- ([#"../knapsack_full.rs" 143 21 143 28] index1 ([#"../knapsack_full.rs" 143 11 143 21] best_value) ([#"../knapsack_full.rs" 143 22 143 27] ([#"../knapsack_full.rs" 143 22 143 23] j) + ([#"../knapsack_full.rs" 143 26 143 27] [#"../knapsack_full.rs" 143 26 143 27] (1 : usize))));
    goto BB59
  }
  BB59 {
    [#"../knapsack_full.rs" 143 28 143 41] _123 <- ([#"../knapsack_full.rs" 143 28 143 41] index2 ([#"../knapsack_full.rs" 143 11 143 28] _125) ([#"../knapsack_full.rs" 143 29 143 40] left_weight));
    goto BB60
  }
  BB60 {
    [#"../knapsack_full.rs" 143 55 143 58] _133 <- ([#"../knapsack_full.rs" 143 55 143 58] index1 ([#"../knapsack_full.rs" 143 45 143 55] best_value) ([#"../knapsack_full.rs" 143 56 143 57] j));
    goto BB61
  }
  BB61 {
    [#"../knapsack_full.rs" 143 58 143 71] _131 <- ([#"../knapsack_full.rs" 143 58 143 71] index2 ([#"../knapsack_full.rs" 143 45 143 58] _133) ([#"../knapsack_full.rs" 143 59 143 70] left_weight));
    goto BB62
  }
  BB62 {
    switch ([#"../knapsack_full.rs" 143 11 143 71] ([#"../knapsack_full.rs" 143 11 143 41] _123) <> ([#"../knapsack_full.rs" 143 45 143 71] _131))
      | False -> goto BB65
      | True -> goto BB63
      end
  }
  BB63 {
    [#"../knapsack_full.rs" 144 12 144 18] _138 <- Borrow.borrow_mut result;
    [#"../knapsack_full.rs" 144 12 144 18] result <-  ^ _138;
    assume { inv5 ( ^ _138) };
    [#"../knapsack_full.rs" 144 12 144 27] _137 <- ([#"../knapsack_full.rs" 144 12 144 27] push0 _138 ([#"../knapsack_full.rs" 144 24 144 26] it1));
    _138 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global));
    goto BB64
  }
  BB64 {
    assert { [@expl:type invariant] inv1 it1 };
    assume { resolve1 it1 };
    [#"../knapsack_full.rs" 145 12 145 36] left_weight <- ([#"../knapsack_full.rs" 145 12 145 36] left_weight - ([#"../knapsack_full.rs" 145 27 145 36] KnapsackFull_Item_Type.item_weight it1));
    [#"../knapsack_full.rs" 143 72 146 9] _31 <- ([#"../knapsack_full.rs" 143 72 146 9] ());
    goto BB66
  }
  BB65 {
    assert { [@expl:type invariant] inv1 it1 };
    assume { resolve1 it1 };
    [#"../knapsack_full.rs" 146 9 146 9] _31 <- ([#"../knapsack_full.rs" 146 9 146 9] ());
    goto BB66
  }
  BB66 {
    goto BB55
  }
  BB67 {
    assume { resolve5 best_value };
    assert { [@expl:type invariant] inv4 items };
    assume { resolve6 items };
    [#"../knapsack_full.rs" 149 4 149 10] _0 <- ([#"../knapsack_full.rs" 149 4 149 10] result);
    [#"../knapsack_full.rs" 149 4 149 10] result <- any Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    return _0
  }
  BB74 {
    assume { resolve5 best_value };
    assert { [@expl:type invariant] inv4 items };
    assume { resolve6 items };
    goto BB17
  }
  BB75 {
    assert { [@expl:type invariant] inv1 it };
    assume { resolve1 it };
    assume { resolve5 best_value };
    assert { [@expl:type invariant] inv4 items };
    assume { resolve6 items };
    goto BB17
  }
  
end
