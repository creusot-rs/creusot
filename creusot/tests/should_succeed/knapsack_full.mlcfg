module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type knapsackfull_item 'name =
    | KnapsackFull_Item 'name usize usize
    
  let function knapsackfull_item_Item_weight (self : knapsackfull_item 'name) : usize =
    match (self) with
      | KnapsackFull_Item _ a _ -> a
      end
  let function knapsackfull_item_Item_value (self : knapsackfull_item 'name) : usize =
    match (self) with
      | KnapsackFull_Item _ _ a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module KnapsackFull_MaxLog_Interface
  use mach.int.Int
  function max_log (a : int) (b : int) : int
end
module KnapsackFull_MaxLog
  use mach.int.Int
  function max_log [#"../knapsack_full.rs" 13 0 33] (a : int) (b : int) : int =
    [#"../knapsack_full.rs" 13 0 33] if a < b then b else a
end
module KnapsackFull_Max_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone KnapsackFull_MaxLog_Interface as MaxLog0
  val max [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 21 0 38] UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
end
module KnapsackFull_Max
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone KnapsackFull_MaxLog as MaxLog0
  let rec cfg max [@cfg:stackify] [#"../knapsack_full.rs" 22 0 35] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 21 0 38] UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
   =
  var _0 : usize;
  var a_1 : usize;
  var b_2 : usize;
  var _3 : bool;
  var _4 : usize;
  var _5 : usize;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _4 <- a_1;
    _5 <- b_2;
    _3 <- ([#"../knapsack_full.rs" 23 7 12] _4 < _5);
    switch (_3)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _0 <- b_2;
    goto BB3
  }
  BB2 {
    _0 <- a_1;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module KnapsackFull_SumWeights_Interface
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  function sum_weights (s : Seq.seq (Type.knapsackfull_item name)) (i : int) : int
end
module KnapsackFull_SumWeights
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  function sum_weights [#"../knapsack_full.rs" 34 0 56] (s : Seq.seq (Type.knapsackfull_item name)) (i : int) : int
  axiom def : forall s : Seq.seq (Type.knapsackfull_item name), i : int . sum_weights s i = ([#"../knapsack_full.rs" 34 0 56] if i = Seq.length s then
    0
  else
    UInt64.to_int (Type.knapsackfull_item_Item_weight (Seq.get s i)) + sum_weights s (i + 1)
  )
  axiom sum_weights_spec : forall s : Seq.seq (Type.knapsackfull_item name), i : int . ([#"../knapsack_full.rs" 32 0 35] 0 <= i && i <= Seq.length s) -> ([#"../knapsack_full.rs" 33 0 23] sum_weights s i >= 0)
end
module KnapsackFull_SumWeights_Impl
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  let rec ghost function sum_weights (s : Seq.seq (Type.knapsackfull_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 32 0 35] 0 <= i && i <= Seq.length s}
    ensures { [#"../knapsack_full.rs" 33 0 23] result >= 0 }
    variant {[#"../knapsack_full.rs" 31 0 21] Seq.length s - i}
    
   =
    [#"../knapsack_full.rs" 34 0 56] if pure {i = Seq.length s} then
      0
    else
      (let a' = Type.knapsackfull_item_Item_weight (Seq.get s i) in UInt64.to_int a') + sum_weights s (i + 1)
    
end
module KnapsackFull_SumValues_Interface
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  function sum_values (s : Seq.seq (Type.knapsackfull_item name)) (i : int) : int
end
module KnapsackFull_SumValues
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  function sum_values [#"../knapsack_full.rs" 44 0 55] (s : Seq.seq (Type.knapsackfull_item name)) (i : int) : int
  axiom def : forall s : Seq.seq (Type.knapsackfull_item name), i : int . sum_values s i = ([#"../knapsack_full.rs" 44 0 55] if i = Seq.length s then
    0
  else
    UInt64.to_int (Type.knapsackfull_item_Item_value (Seq.get s i)) + sum_values s (i + 1)
  )
  axiom sum_values_spec : forall s : Seq.seq (Type.knapsackfull_item name), i : int . ([#"../knapsack_full.rs" 43 0 35] i >= 0 && i <= Seq.length s) -> true
end
module KnapsackFull_SumValues_Impl
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  let rec ghost function sum_values (s : Seq.seq (Type.knapsackfull_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 43 0 35] i >= 0 && i <= Seq.length s}
    variant {[#"../knapsack_full.rs" 42 0 21] Seq.length s - i}
    
   =
    [#"../knapsack_full.rs" 44 0 55] if pure {i = Seq.length s} then
      0
    else
      (let a' = Type.knapsackfull_item_Item_value (Seq.get s i) in UInt64.to_int a') + sum_values s (i + 1)
    
end
module KnapsackFull_SubseqRev_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  predicate subseq_rev (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
end
module KnapsackFull_SubseqRev
  type t
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  predicate subseq_rev [#"../knapsack_full.rs" 55 0 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
  axiom def : forall s1 : Seq.seq t, i1 : int, s2 : Seq.seq t, i2 : int . subseq_rev s1 i1 s2 i2 = ([#"../knapsack_full.rs" 55 0 67] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 && Seq.get s1 i1 = Seq.get s2 (i2 - 1) && subseq_rev s1 (i1 + 1) s2 (i2 - 1) || subseq_rev s1 i1 s2 (i2 - 1)
  )
  axiom subseq_rev_spec : forall s1 : Seq.seq t, i1 : int, s2 : Seq.seq t, i2 : int . ([#"../knapsack_full.rs" 54 0 38] 0 <= i2 && i2 <= Seq.length s2) -> ([#"../knapsack_full.rs" 53 0 38] 0 <= i1 && i1 <= Seq.length s1) -> true
end
module KnapsackFull_SubseqRev_Impl
  type t
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  let rec ghost function subseq_rev (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int) : bool
    requires {[#"../knapsack_full.rs" 54 0 38] 0 <= i2 && i2 <= Seq.length s2}
    requires {[#"../knapsack_full.rs" 53 0 38] 0 <= i1 && i1 <= Seq.length s1}
    variant {[#"../knapsack_full.rs" 52 0 14] i2}
    
   =
    [#"../knapsack_full.rs" 55 0 67] if pure {i2 = 0} then
      pure {i1 = Seq.length s1}
    else
      i1 < Seq.length s1 && pure {Seq.get s1 i1 = Seq.get s2 (i2 - 1)} && subseq_rev s1 (i1 + 1) s2 (i2 - 1) || subseq_rev s1 i1 s2 (i2 - 1)
    
end
module KnapsackFull_M_Interface
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone KnapsackFull_SumValues_Interface as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights_Interface as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Interface as SubseqRev0 with type t = Type.knapsackfull_item name, axiom .
  function m (items : Seq.seq (Type.knapsackfull_item name)) (i : int) (w : int) : int
end
module KnapsackFull_M
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone KnapsackFull_SumValues_Interface as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights_Interface as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Interface as SubseqRev0 with type t = Type.knapsackfull_item name, axiom .
  use mach.int.UInt64
  clone KnapsackFull_MaxLog_Interface as MaxLog0
  function m [#"../knapsack_full.rs" 73 0 57] (items : Seq.seq (Type.knapsackfull_item name)) (i : int) (w : int) : int
  axiom def : forall items : Seq.seq (Type.knapsackfull_item name), i : int, w : int . m items i w = ([#"../knapsack_full.rs" 73 0 57] if i = 0 then
    0
  else
    if UInt64.to_int (Type.knapsackfull_item_Item_weight (Seq.get items (i - 1))) > w then
      m items (i - 1) w
    else
      MaxLog0.max_log (m items (i - 1) w) (m items (i - 1) (w - UInt64.to_int (Type.knapsackfull_item_Item_weight (Seq.get items (i - 1)))) + UInt64.to_int (Type.knapsackfull_item_Item_value (Seq.get items (i - 1))))
    
  )
  axiom m_spec : forall items : Seq.seq (Type.knapsackfull_item name), i : int, w : int . ([#"../knapsack_full.rs" 68 0 19] 0 <= w) -> ([#"../knapsack_full.rs" 67 0 39] 0 <= i && i <= Seq.length items) -> ([#"../knapsack_full.rs" 69 0 23] m items i w >= 0) && ([#"../knapsack_full.rs" 70 0 2] forall j : (int) . forall s : (Seq.seq (Type.knapsackfull_item name)) . 0 <= j && j <= Seq.length s && SubseqRev0.subseq_rev s j items i && SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= m items i w)
end
module KnapsackFull_M_Impl
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone KnapsackFull_MaxLog as MaxLog0
  clone KnapsackFull_SumValues as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev as SubseqRev0 with type t = Type.knapsackfull_item name, axiom .
  let rec ghost function m (items : Seq.seq (Type.knapsackfull_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 68 0 19] 0 <= w}
    requires {[#"../knapsack_full.rs" 67 0 39] 0 <= i && i <= Seq.length items}
    ensures { [#"../knapsack_full.rs" 70 0 2] forall j : (int) . forall s : (Seq.seq (Type.knapsackfull_item name)) . 0 <= j && j <= Seq.length s && SubseqRev0.subseq_rev s j items i && SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= result }
    ensures { [#"../knapsack_full.rs" 69 0 23] result >= 0 }
    variant {[#"../knapsack_full.rs" 66 0 13] i}
    
   =
    [#"../knapsack_full.rs" 73 0 57] if pure {i = 0} then
      0
    else
      if (let a' = Type.knapsackfull_item_Item_weight (Seq.get items (i - 1)) in UInt64.to_int a') > w then
        m items (i - 1) w
      else
        let a' = m items (i - 1) w in let b' = (let c' = w - (let a' = Type.knapsackfull_item_Item_weight (Seq.get items (i - 1)) in UInt64.to_int a') in m items (i - 1) c') + (let a' = Type.knapsackfull_item_Item_value (Seq.get items (i - 1)) in UInt64.to_int a') in MaxLog0.max_log a' b'
      
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 9223372036854775807
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  =
    Output0.output
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module CreusotContracts_Std1_Slice_Impl3
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue1 with type self = usize,
  type t = seq t, predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds1 with type self = usize,
  type t = seq t, predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . Seq.length (model self) <= 9223372036854775807 && model self = Prelude.id self
end
module CreusotContracts_Std1_Slice_Impl0
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = seq t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module KnapsackFull_Knapsack01Dyn_Interface
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global, axiom .
  clone KnapsackFull_SumValues_Interface as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights_Interface as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev_Interface as SubseqRev0 with type t = Type.knapsackfull_item name, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val knapsack01_dyn [@cfg:stackify] (items : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global)) (max_weight : usize) : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global)
    requires {[#"../knapsack_full.rs" 86 0 91] forall i : (int) . 0 <= i && i < Seq.length (Model0.model items) -> UInt64.to_int (Type.knapsackfull_item_Item_value (Seq.get (Model0.model items) i)) <= 10000000}
    requires {[#"../knapsack_full.rs" 85 0 35] UInt64.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 84 0 38] Seq.length (Model0.model items) < 10000000}
    ensures { [#"../knapsack_full.rs" 89 0 2] forall s : (Seq.seq (Type.knapsackfull_item name)) . SubseqRev0.subseq_rev s 0 (Model0.model items) (Seq.length (Model0.model items)) && SumWeights0.sum_weights s (Seq.length s) <= UInt64.to_int max_weight -> SumValues0.sum_values s (Seq.length s) <= SumValues0.sum_values (Model1.model result) (Seq.length (Model1.model result)) }
    ensures { [#"../knapsack_full.rs" 88 0 58] SubseqRev0.subseq_rev (Model1.model result) 0 (Model0.model items) (Seq.length (Model0.model items)) }
    ensures { [#"../knapsack_full.rs" 87 0 64] SumWeights0.sum_weights (Model1.model result) (Seq.length (Model1.model result)) <= UInt64.to_int max_weight }
    
end
module KnapsackFull_Knapsack01Dyn
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone KnapsackFull_MaxLog as MaxLog0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global, axiom .
  clone KnapsackFull_SumValues as SumValues0 with type name = name, axiom .
  clone KnapsackFull_SumWeights as SumWeights0 with type name = name, axiom .
  clone KnapsackFull_SubseqRev as SubseqRev0 with type t = Type.knapsackfull_item name, axiom .
  clone KnapsackFull_M as M0 with type name = name, predicate SubseqRev0.subseq_rev = SubseqRev0.subseq_rev,
  function SumWeights0.sum_weights = SumWeights0.sum_weights, function SumValues0.sum_values = SumValues0.sum_values,
  function MaxLog0.max_log = MaxLog0.max_log, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy3 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.knapsackfull_item name
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.knapsackfull_item name
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.knapsackfull_item name
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.knapsackfull_item name
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.knapsackfull_item name
  clone KnapsackFull_Max_Interface as Max0 with function MaxLog0.max_log = MaxLog0.max_log
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve6 with type t = usize, function Model0.model = Model3.model,
  predicate Resolve0.resolve = Resolve7.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue2.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve5 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model2.model, predicate Resolve0.resolve = Resolve6.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve4 with type t = Type.knapsackfull_item name,
  function Model0.model = Model1.model, predicate Resolve0.resolve = Resolve0.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = Type.knapsackfull_item name,
  function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.knapsackfull_item name, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.knapsackfull_item name,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model
  let rec cfg knapsack01_dyn [@cfg:stackify] [#"../knapsack_full.rs" 92 0 87] (items : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global)) (max_weight : usize) : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global)
    requires {[#"../knapsack_full.rs" 86 0 91] forall i : (int) . 0 <= i && i < Seq.length (Model0.model items) -> UInt64.to_int (Type.knapsackfull_item_Item_value (Seq.get (Model0.model items) i)) <= 10000000}
    requires {[#"../knapsack_full.rs" 85 0 35] UInt64.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 84 0 38] Seq.length (Model0.model items) < 10000000}
    ensures { [#"../knapsack_full.rs" 89 0 2] forall s : (Seq.seq (Type.knapsackfull_item name)) . SubseqRev0.subseq_rev s 0 (Model0.model items) (Seq.length (Model0.model items)) && SumWeights0.sum_weights s (Seq.length s) <= UInt64.to_int max_weight -> SumValues0.sum_values s (Seq.length s) <= SumValues0.sum_values (Model1.model result) (Seq.length (Model1.model result)) }
    ensures { [#"../knapsack_full.rs" 88 0 58] SubseqRev0.subseq_rev (Model1.model result) 0 (Model0.model items) (Seq.length (Model0.model items)) }
    ensures { [#"../knapsack_full.rs" 87 0 64] SumWeights0.sum_weights (Model1.model result) (Seq.length (Model1.model result)) <= UInt64.to_int max_weight }
    
   =
  var _0 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var items_1 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var max_weight_2 : usize;
  var best_value_3 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _4 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var i_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var it_17 : Type.knapsackfull_item name;
  var _18 : Type.knapsackfull_item name;
  var _19 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var _20 : usize;
  var w_21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : usize;
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : usize;
  var _31 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _32 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _33 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _34 : usize;
  var _35 : usize;
  var _36 : usize;
  var _37 : usize;
  var _38 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _39 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _40 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _41 : usize;
  var _42 : usize;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  var _46 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _47 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _48 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _49 : usize;
  var _50 : usize;
  var _51 : usize;
  var _52 : usize;
  var _53 : usize;
  var _54 : borrowed usize;
  var _55 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _56 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _57 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _58 : usize;
  var _59 : usize;
  var _60 : usize;
  var _61 : ();
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var _66 : ();
  var result_67 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var _68 : usize;
  var _69 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var left_weight_70 : usize;
  var j_71 : usize;
  var _72 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var _73 : ();
  var _74 : bool;
  var _75 : usize;
  var it_76 : Type.knapsackfull_item name;
  var _77 : Type.knapsackfull_item name;
  var _78 : Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global);
  var _79 : usize;
  var _80 : bool;
  var _81 : usize;
  var _82 : usize;
  var _83 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _84 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _85 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _86 : usize;
  var _87 : usize;
  var _88 : usize;
  var _89 : usize;
  var _90 : usize;
  var _91 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _92 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _93 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _94 : usize;
  var _95 : usize;
  var _96 : ();
  var _97 : borrowed (Type.alloc_vec_vec (Type.knapsackfull_item name) (Type.alloc_alloc_global));
  var _98 : Type.knapsackfull_item name;
  var _99 : usize;
  var _100 : ();
  var _101 : ();
  var _102 : ();
  {
    items_1 <- items;
    max_weight_2 <- max_weight;
    goto BB0
  }
  BB0 {
    _6 <- max_weight_2;
    _5 <- ([#"../knapsack_full.rs" 94 41 55] _6 + (1 : usize));
    _4 <- ([#"../knapsack_full.rs" 94 23 56] FromElem0.from_elem (0 : usize) _5);
    goto BB1
  }
  BB1 {
    _9 <- items_1;
    _8 <- ([#"../knapsack_full.rs" 94 58 69] Len0.len _9);
    goto BB2
  }
  BB2 {
    _7 <- ([#"../knapsack_full.rs" 94 58 73] _8 + (1 : usize));
    best_value_3 <- ([#"../knapsack_full.rs" 94 8 74] FromElem1.from_elem _4 _7);
    goto BB3
  }
  BB3 {
    i_10 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant items_len { [#"../knapsack_full.rs" 97 4 70] Seq.length (Model0.model items_1) + 1 = Seq.length (Model2.model best_value_3) };
    invariant weight_len { [#"../knapsack_full.rs" 98 4 64] forall i : (int) . 0 <= i && i < Seq.length (Model2.model best_value_3) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model3.model (Seq.get (Model2.model best_value_3) i)) };
    invariant best_value { [#"../knapsack_full.rs" 100 4 66] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= UInt64.to_int i_10 && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model3.model (Seq.get (Model2.model best_value_3) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value_bounds { [#"../knapsack_full.rs" 102 4 62] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= Seq.length (Model0.model items_1) && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model3.model (Seq.get (Model2.model best_value_3) ii)) ww) <= 10000000 * ii };
    _14 <- i_10;
    _16 <- items_1;
    _15 <- ([#"../knapsack_full.rs" 104 14 25] Len0.len _16);
    goto BB9
  }
  BB9 {
    _13 <- ([#"../knapsack_full.rs" 104 10 25] _14 < _15);
    switch (_13)
      | False -> goto BB32
      | _ -> goto BB10
      end
  }
  BB10 {
    _19 <- items_1;
    _20 <- i_10;
    _18 <- ([#"../knapsack_full.rs" 105 18 26] Index0.index _19 _20);
    goto BB11
  }
  BB11 {
    it_17 <- _18;
    assume { Resolve0.resolve _18 };
    w_21 <- (0 : usize);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant items_len2 { [#"../knapsack_full.rs" 111 8 75] Seq.length (Model0.model items_1) + 1 = Seq.length (Model2.model best_value_3) };
    invariant weight_len2 { [#"../knapsack_full.rs" 112 8 68] forall i : (int) . 0 <= i && i < Seq.length (Model2.model best_value_3) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model3.model (Seq.get (Model2.model best_value_3) i)) };
    invariant best_value2 { [#"../knapsack_full.rs" 114 8 70] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= UInt64.to_int i_10 && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model3.model (Seq.get (Model2.model best_value_3) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value2 { [#"../knapsack_full.rs" 117 8 74] forall ww : (int) . 0 <= ww && ww <= UInt64.to_int w_21 - 1 -> UInt64.to_int (Seq.get (Model3.model (Seq.get (Model2.model best_value_3) (UInt64.to_int i_10 + 1))) ww) = M0.m (Model0.model items_1) (UInt64.to_int i_10 + 1) ww };
    invariant best_value_bounds { [#"../knapsack_full.rs" 119 8 62] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= Seq.length (Model0.model items_1) && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model3.model (Seq.get (Model2.model best_value_3) ii)) ww) <= 10000000 * ii };
    _24 <- w_21;
    _25 <- max_weight_2;
    _23 <- ([#"../knapsack_full.rs" 121 14 29] _24 <= _25);
    switch (_23)
      | False -> goto BB31
      | _ -> goto BB18
      end
  }
  BB18 {
    _28 <- Type.knapsackfull_item_Item_weight it_17;
    _29 <- w_21;
    _27 <- ([#"../knapsack_full.rs" 122 38 51] _28 > _29);
    switch (_27)
      | False -> goto BB22
      | _ -> goto BB19
      end
  }
  BB19 {
    _33 <- best_value_3;
    _34 <- i_10;
    _32 <- ([#"../knapsack_full.rs" 123 16 29] Index1.index _33 _34);
    goto BB20
  }
  BB20 {
    _31 <- _32;
    _35 <- w_21;
    _30 <- ([#"../knapsack_full.rs" 123 16 32] Index2.index _31 _35);
    goto BB21
  }
  BB21 {
    _26 <- _30;
    goto BB28
  }
  BB22 {
    _40 <- best_value_3;
    _41 <- i_10;
    _39 <- ([#"../knapsack_full.rs" 125 20 33] Index1.index _40 _41);
    goto BB23
  }
  BB23 {
    _38 <- _39;
    _42 <- w_21;
    _37 <- ([#"../knapsack_full.rs" 125 20 36] Index2.index _38 _42);
    goto BB24
  }
  BB24 {
    _36 <- _37;
    _48 <- best_value_3;
    _49 <- i_10;
    _47 <- ([#"../knapsack_full.rs" 125 38 51] Index1.index _48 _49);
    goto BB25
  }
  BB25 {
    _46 <- _47;
    _51 <- w_21;
    _52 <- Type.knapsackfull_item_Item_weight it_17;
    _50 <- ([#"../knapsack_full.rs" 125 52 65] _51 - _52);
    _45 <- ([#"../knapsack_full.rs" 125 38 66] Index2.index _46 _50);
    goto BB26
  }
  BB26 {
    _44 <- _45;
    _53 <- Type.knapsackfull_item_Item_value it_17;
    _43 <- ([#"../knapsack_full.rs" 125 38 77] _44 + _53);
    _26 <- ([#"../knapsack_full.rs" 125 16 78] Max0.max _36 _43);
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    _57 <- borrow_mut best_value_3;
    best_value_3 <-  ^ _57;
    _59 <- i_10;
    _58 <- ([#"../knapsack_full.rs" 122 23 28] _59 + (1 : usize));
    _56 <- ([#"../knapsack_full.rs" 122 12 29] IndexMut0.index_mut _57 _58);
    goto BB29
  }
  BB29 {
    _55 <- borrow_mut ( * _56);
    _56 <- { _56 with current = ( ^ _55) };
    assume { Resolve1.resolve _56 };
    _60 <- w_21;
    _54 <- ([#"../knapsack_full.rs" 122 12 32] IndexMut1.index_mut _55 _60);
    goto BB30
  }
  BB30 {
    _54 <- { _54 with current = _26 };
    assume { Resolve2.resolve _54 };
    w_21 <- ([#"../knapsack_full.rs" 127 12 18] w_21 + (1 : usize));
    _12 <- ();
    goto BB17
  }
  BB31 {
    assume { Resolve0.resolve it_17 };
    _22 <- ();
    i_10 <- ([#"../knapsack_full.rs" 129 8 14] i_10 + (1 : usize));
    _12 <- ();
    goto BB8
  }
  BB32 {
    _11 <- ();
    _69 <- items_1;
    _68 <- ([#"../knapsack_full.rs" 132 49 60] Len0.len _69);
    goto BB33
  }
  BB33 {
    result_67 <- ([#"../knapsack_full.rs" 132 30 61] WithCapacity0.with_capacity _68);
    goto BB34
  }
  BB34 {
    left_weight_70 <- max_weight_2;
    _72 <- items_1;
    j_71 <- ([#"../knapsack_full.rs" 135 16 27] Len0.len _72);
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    invariant j_items_len { [#"../knapsack_full.rs" 136 4 51] UInt64.to_int j_71 <= Seq.length (Model0.model items_1) };
    invariant left_weight_le_max { [#"../knapsack_full.rs" 137 4 65] UInt64.to_int left_weight_70 <= UInt64.to_int max_weight_2 };
    invariant result_weight { [#"../knapsack_full.rs" 138 4 50] forall r : (Seq.seq (Type.knapsackfull_item name)) . Seq.length (Model1.model result_67) <= Seq.length r && (forall i : (int) . 0 <= i && i < Seq.length (Model1.model result_67) -> Seq.get (Model1.model result_67) i = Seq.get r i) && SumWeights0.sum_weights r (Seq.length (Model1.model result_67)) <= UInt64.to_int left_weight_70 -> SumWeights0.sum_weights r 0 <= UInt64.to_int max_weight_2 };
    invariant result_value { [#"../knapsack_full.rs" 143 4 76] forall r : (Seq.seq (Type.knapsackfull_item name)) . Seq.length (Model1.model result_67) <= Seq.length r && (forall i : (int) . 0 <= i && i < Seq.length (Model1.model result_67) -> Seq.get (Model1.model result_67) i = Seq.get r i) && SumValues0.sum_values r (Seq.length (Model1.model result_67)) = M0.m (Model0.model items_1) (UInt64.to_int j_71) (UInt64.to_int left_weight_70) -> SumValues0.sum_values r 0 = M0.m (Model0.model items_1) (Seq.length (Model0.model items_1)) (UInt64.to_int max_weight_2) };
    invariant result_subseq { [#"../knapsack_full.rs" 148 4 58] forall r : (Seq.seq (Type.knapsackfull_item name)) . Seq.length (Model1.model result_67) <= Seq.length r && (forall i : (int) . 0 <= i && i < Seq.length (Model1.model result_67) -> Seq.get (Model1.model result_67) i = Seq.get r i) && SubseqRev0.subseq_rev r (Seq.length (Model1.model result_67)) (Model0.model items_1) (UInt64.to_int j_71) -> SubseqRev0.subseq_rev r 0 (Model0.model items_1) (Seq.length (Model0.model items_1)) };
    _75 <- j_71;
    _74 <- ([#"../knapsack_full.rs" 153 10 15] (0 : usize) < _75);
    switch (_74)
      | False -> goto BB50
      | _ -> goto BB40
      end
  }
  BB40 {
    j_71 <- ([#"../knapsack_full.rs" 154 8 14] j_71 - (1 : usize));
    _78 <- items_1;
    _79 <- j_71;
    _77 <- ([#"../knapsack_full.rs" 155 18 26] Index0.index _78 _79);
    goto BB41
  }
  BB41 {
    it_76 <- _77;
    assume { Resolve0.resolve _77 };
    _85 <- best_value_3;
    _87 <- j_71;
    _86 <- ([#"../knapsack_full.rs" 156 22 27] _87 + (1 : usize));
    _84 <- ([#"../knapsack_full.rs" 156 11 28] Index1.index _85 _86);
    goto BB42
  }
  BB42 {
    _83 <- _84;
    _88 <- left_weight_70;
    _82 <- ([#"../knapsack_full.rs" 156 11 41] Index2.index _83 _88);
    goto BB43
  }
  BB43 {
    _81 <- _82;
    _93 <- best_value_3;
    _94 <- j_71;
    _92 <- ([#"../knapsack_full.rs" 156 45 58] Index1.index _93 _94);
    goto BB44
  }
  BB44 {
    _91 <- _92;
    _95 <- left_weight_70;
    _90 <- ([#"../knapsack_full.rs" 156 45 71] Index2.index _91 _95);
    goto BB45
  }
  BB45 {
    _89 <- _90;
    _80 <- ([#"../knapsack_full.rs" 156 11 71] _81 <> _89);
    switch (_80)
      | False -> goto BB48
      | _ -> goto BB46
      end
  }
  BB46 {
    _97 <- borrow_mut result_67;
    result_67 <-  ^ _97;
    _98 <- it_76;
    _96 <- ([#"../knapsack_full.rs" 157 12 27] Push0.push _97 _98);
    goto BB47
  }
  BB47 {
    _99 <- Type.knapsackfull_item_Item_weight it_76;
    assume { Resolve0.resolve it_76 };
    left_weight_70 <- ([#"../knapsack_full.rs" 158 12 36] left_weight_70 - _99);
    _12 <- ();
    goto BB49
  }
  BB48 {
    assume { Resolve0.resolve it_76 };
    _12 <- ();
    goto BB49
  }
  BB49 {
    goto BB39
  }
  BB50 {
    assume { Resolve3.resolve items_1 };
    _73 <- ();
    assume { Resolve4.resolve _0 };
    _0 <- result_67;
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    assume { Resolve5.resolve best_value_3 };
    return _0
  }
  
end
