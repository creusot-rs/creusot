
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use mach.int.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val pop [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : Core_Option_Option_Type.t_option t
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) /\ Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module Alloc_Vec_Impl1_Pop
  type t
  type a
  use prelude.Borrow
  use mach.int.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val pop [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : Core_Option_Option_Type.t_option t
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) /\ Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  let rec ghost predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {forall i : int . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)}
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module InvariantMoves_TestInvariantMove_Interface
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val test_invariant_move [@cfg:stackify] (x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
end
module InvariantMoves_TestInvariantMove
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Borrow
  use prelude.IntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint32, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = uint32, val Model0.model = Model0.model,
    val Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Pop_Interface as Pop0 with type t = uint32, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model0.model
  let rec cfg test_invariant_move [@cfg:stackify] [#"../invariant_moves.rs" 5 0 5 43] (x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _3 : ();
  var _4 : Core_Option_Option_Type.t_option uint32;
  var _5 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _6 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _7 : isize;
  var _8 : ();
  var _9 : ();
  var _10 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant dummy { [#"../invariant_moves.rs" 6 23 6 29] x_1 = x_1 };
    _6 <- borrow_mut x_1;
    x_1 <-  ^ _6;
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    _4 <- ([#"../invariant_moves.rs" 7 26 7 40] Pop0.pop _5);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _6 };
    switch (_4)
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      | _ -> goto BB5
      end
  }
  BB4 {
    _3 <- ();
    goto BB2
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve x_1 };
    return _0
  }
  
end
