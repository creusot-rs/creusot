
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model self
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    ensures { result = Slice.id self }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module C01_IndexSlice_Interface
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = seq uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val index_slice [@cfg:stackify] (a : seq uint32) : uint32
    requires {[#"../01.rs" 5 11 5 26] 10 < Seq.length (Model0.model a)}
    
end
module C01_IndexSlice
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use prelude.UIntSize
  let rec cfg index_slice [@cfg:stackify] [#"../01.rs" 6 0 6 36] (a : seq uint32) : uint32
    requires {[#"../01.rs" 5 11 5 26] 10 < Seq.length (Model0.model a)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var a_1 : seq uint32;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _3 <- (10 : usize);
    _4 <- UIntSize.of_int (Seq.length a_1);
    _5 <- ([#"../01.rs" 7 4 7 9] _3 < _4);
    assert { [#"../01.rs" 7 4 7 9] _5 };
    goto BB1
  }
  BB1 {
    _0 <- Seq.get a_1 (UIntSize.to_int _3);
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module C01_IndexMutSlice_Interface
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt32
  use prelude.Slice
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = uint32
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model0 with type t = seq uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val index_mut_slice [@cfg:stackify] (a : borrowed (seq uint32)) : ()
    requires {[#"../01.rs" 10 11 10 26] Seq.length (Model0.model a) = 5}
    ensures { [#"../01.rs" 11 10 11 26] UInt32.to_int (Seq.get (Model1.model ( ^ a)) 2) = 3 }
    
end
module C01_IndexMutSlice
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt32
  use prelude.Slice
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = uint32
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = seq uint32,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use prelude.UIntSize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq uint32
  let rec cfg index_mut_slice [@cfg:stackify] [#"../01.rs" 12 0 12 37] (a : borrowed (seq uint32)) : ()
    requires {[#"../01.rs" 10 11 10 26] Seq.length (Model0.model a) = 5}
    ensures { [#"../01.rs" 11 10 11 26] UInt32.to_int (Seq.get (Model1.model ( ^ a)) 2) = 3 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : borrowed (seq uint32);
  var _4 : usize;
  var _5 : usize;
  var _6 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _4 <- (2 : usize);
    _5 <- UIntSize.of_int (Seq.length ( * a_1));
    _6 <- ([#"../01.rs" 13 4 13 8] _4 < _5);
    assert { [#"../01.rs" 13 4 13 8] _6 };
    goto BB1
  }
  BB1 {
    a_1 <- { a_1 with current = Seq.set ( * a_1) (UIntSize.to_int _4) (3 : uint32) };
    assume { Resolve0.resolve a_1 };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Core_Slice_Impl0_Len
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module C01_SliceFirst_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Stub as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  val slice_first [@cfg:stackify] (a : seq t) : Core_Option_Option_Type.t_option t
    ensures { [#"../01.rs" 16 10 19 1] match (result) with
      | Core_Option_Option_Type.C_Some v -> v = Seq.get (Model0.model a) 0
      | Core_Option_Option_Type.C_None -> Seq.length (Model0.model a) = 0
      end }
    
end
module C01_SliceFirst
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use Core_Option_Option_Type as Core_Option_Option_Type
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = seq t
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = t, val Model0.model = Model0.model
  let rec cfg slice_first [@cfg:stackify] [#"../01.rs" 20 0 20 44] (a : seq t) : Core_Option_Option_Type.t_option t
    ensures { [#"../01.rs" 16 10 19 1] match (result) with
      | Core_Option_Option_Type.C_Some v -> v = Seq.get (Model0.model a) 0
      | Core_Option_Option_Type.C_None -> Seq.length (Model0.model a) = 0
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var a_1 : seq t;
  var _3 : bool;
  var _4 : usize;
  var _5 : seq t;
  var _6 : t;
  var _7 : t;
  var _8 : usize;
  var _9 : usize;
  var _10 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _5 <- a_1;
    _4 <- ([#"../01.rs" 21 7 21 14] Len0.len _5);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../01.rs" 21 7 21 18] _4 > (0 : usize));
    switch (_3)
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    _8 <- (0 : usize);
    _9 <- UIntSize.of_int (Seq.length a_1);
    _10 <- ([#"../01.rs" 22 14 22 18] _8 < _9);
    assert { [#"../01.rs" 22 14 22 18] _10 };
    goto BB3
  }
  BB3 {
    _7 <- Seq.get a_1 (UIntSize.to_int _8);
    assume { Resolve0.resolve a_1 };
    _6 <- _7;
    assume { Resolve1.resolve _7 };
    _0 <- Core_Option_Option_Type.C_Some _6;
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve a_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
