
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module C01_IndexSlice_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint32
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_slice [@cfg:stackify] [#"../01.rs" 6 0 6 36] (a : seq uint32) : uint32
    requires {[#"../01.rs" 5 11 5 26] 10 < Seq.length (ShallowModel0.shallow_model a)}
    
end
module C01_IndexSlice
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use prelude.UIntSize
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint32
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg index_slice [@cfg:stackify] [#"../01.rs" 6 0 6 36] (a : seq uint32) : uint32
    requires {[#"../01.rs" 5 11 5 26] 10 < Seq.length (ShallowModel0.shallow_model a)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var a_1 : seq uint32;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _3 <- ([#"../01.rs" 7 6 7 8] (10 : usize));
    _4 <- UIntSize.of_int (Seq.length a_1);
    _5 <- ([#"../01.rs" 7 4 7 9] _3 < _4);
    assert { [#"../01.rs" 7 4 7 9] _5 };
    goto BB1
  }
  BB1 {
    _0 <- Seq.get a_1 (UIntSize.to_int _3);
    return _0
  }
  
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C01_IndexMutSlice_Interface
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt32
  use prelude.Slice
  use mach.int.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint32
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut_slice [@cfg:stackify] [#"../01.rs" 12 0 12 37] (a : borrowed (seq uint32)) : ()
    requires {[#"../01.rs" 10 11 10 26] Seq.length (ShallowModel0.shallow_model a) = 5}
    ensures { [#"../01.rs" 11 10 11 24] UInt32.to_int (Seq.get (ShallowModel1.shallow_model ( ^ a)) 2) = 3 }
    
end
module C01_IndexMutSlice
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use prelude.UIntSize
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = uint32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = seq uint32
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg index_mut_slice [@cfg:stackify] [#"../01.rs" 12 0 12 37] (a : borrowed (seq uint32)) : ()
    requires {[#"../01.rs" 10 11 10 26] Seq.length (ShallowModel0.shallow_model a) = 5}
    ensures { [#"../01.rs" 11 10 11 24] UInt32.to_int (Seq.get (ShallowModel1.shallow_model ( ^ a)) 2) = 3 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : borrowed (seq uint32);
  var _4 : usize;
  var _5 : usize;
  var _6 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _4 <- ([#"../01.rs" 13 6 13 7] (2 : usize));
    _5 <- UIntSize.of_int (Seq.length ( * a_1));
    _6 <- ([#"../01.rs" 13 4 13 8] _4 < _5);
    assert { [#"../01.rs" 13 4 13 8] _6 };
    goto BB1
  }
  BB1 {
    a_1 <- { a_1 with current = Seq.set ( * a_1) (UIntSize.to_int _4) ([#"../01.rs" 13 11 13 12] (3 : uint32)) };
    assume { Resolve0.resolve a_1 };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (ShallowModel0.shallow_model self) = UInt64.to_int result }
    
end
module Core_Slice_Impl0_Len
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (ShallowModel0.shallow_model self) = UInt64.to_int result }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C01_SliceFirst_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  val slice_first [@cfg:stackify] [#"../01.rs" 20 0 20 44] (a : seq t) : Core_Option_Option_Type.t_option t
    ensures { [#"../01.rs" 16 10 19 1] match (result) with
      | Core_Option_Option_Type.C_Some v -> v = Seq.get (ShallowModel0.shallow_model a) 0
      | Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model a) = 0
      end }
    
end
module C01_SliceFirst
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = seq t
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Core_Slice_Impl0_Len_Interface as Len0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg slice_first [@cfg:stackify] [#"../01.rs" 20 0 20 44] (a : seq t) : Core_Option_Option_Type.t_option t
    ensures { [#"../01.rs" 16 10 19 1] match (result) with
      | Core_Option_Option_Type.C_Some v -> v = Seq.get (ShallowModel0.shallow_model a) 0
      | Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model a) = 0
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var a_1 : seq t;
  var _3 : bool;
  var _4 : usize;
  var _5 : seq t;
  var _6 : t;
  var _7 : t;
  var _8 : usize;
  var _9 : usize;
  var _10 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _5 <- a_1;
    _4 <- ([#"../01.rs" 21 7 21 14] Len0.len _5);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../01.rs" 21 7 21 18] _4 > ([#"../01.rs" 21 17 21 18] (0 : usize)));
    switch (_3)
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    _8 <- ([#"../01.rs" 22 16 22 17] (0 : usize));
    _9 <- UIntSize.of_int (Seq.length a_1);
    _10 <- ([#"../01.rs" 22 14 22 18] _8 < _9);
    assert { [#"../01.rs" 22 14 22 18] _10 };
    goto BB3
  }
  BB3 {
    _7 <- Seq.get a_1 (UIntSize.to_int _8);
    assume { Resolve0.resolve a_1 };
    _6 <- _7;
    assume { Resolve1.resolve _7 };
    _0 <- Core_Option_Option_Type.C_Some _6;
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve a_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
