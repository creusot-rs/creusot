
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 78 8 78 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module C01_IndexSlice_Interface
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  val index_slice [#"../01.rs" 6 0 6 36] (a : slice uint32) : uint32
    requires {[#"../01.rs" 5 11 5 24] 10 < Seq.length (ShallowModel0.shallow_model a)}
    
end
module C01_IndexSlice
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg index_slice [#"../01.rs" 6 0 6 36] [@cfg:stackify] [@cfg:subregion_analysis] (a : slice uint32) : uint32
    requires {[#"../01.rs" 5 11 5 24] 10 < Seq.length (ShallowModel0.shallow_model a)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var a : slice uint32 = a;
  var _3 : usize;
  var _5 : bool;
  {
    goto BB0
  }
  BB0 {
    _3 <- ([#"../01.rs" 7 6 7 8] (10 : usize));
    _5 <- ([#"../01.rs" 7 4 7 9] _3 < Slice.length a);
    assert { [@expl:index in bounds] [#"../01.rs" 7 4 7 9] _5 };
    goto BB1
  }
  BB1 {
    _0 <- Slice.get a _3;
    return _0
  }
  
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 96 8 96 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C01_IndexMutSlice_Interface
  use seq.Seq
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = uint32,
    type s = slice uint32
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  val index_mut_slice [#"../01.rs" 12 0 12 37] (a : borrowed (slice uint32)) : ()
    requires {[#"../01.rs" 10 11 10 24] Seq.length (ShallowModel0.shallow_model a) = 5}
    ensures { [#"../01.rs" 11 10 11 23] UInt32.to_int (IndexLogic0.index_logic ( ^ a) 2) = 3 }
    
end
module C01_IndexMutSlice
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type s = slice uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = slice uint32
  let rec cfg index_mut_slice [#"../01.rs" 12 0 12 37] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed (slice uint32)) : ()
    requires {[#"../01.rs" 10 11 10 24] Seq.length (ShallowModel0.shallow_model a) = 5}
    ensures { [#"../01.rs" 11 10 11 23] UInt32.to_int (IndexLogic0.index_logic ( ^ a) 2) = 3 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed (slice uint32) = a;
  var _4 : usize;
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    _4 <- ([#"../01.rs" 13 6 13 7] (2 : usize));
    _6 <- ([#"../01.rs" 13 4 13 8] _4 < Slice.length ( * a));
    assert { [@expl:index in bounds] [#"../01.rs" 13 4 13 8] _6 };
    goto BB1
  }
  BB1 {
    a <- { a with current = Slice.set ( * a) _4 ([#"../01.rs" 13 11 13 12] (3 : uint32)) };
    assume { Resolve0.resolve a };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : slice t) : usize
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 232 0 324 1] Seq.length (ShallowModel0.shallow_model self) = UIntSize.to_int result }
    
end
module C01_SliceFirst_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val slice_first [#"../01.rs" 20 0 20 44] (a : slice t) : Core_Option_Option_Type.t_option t
    ensures { [#"../01.rs" 16 10 19 1] match (result) with
      | Core_Option_Option_Type.C_Some v -> v = IndexLogic0.index_logic a 0
      | Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model a) = 0
      end }
    
end
module C01_SliceFirst
  type t
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = t,
    type s = slice t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = slice t
  clone Core_Slice_Impl0_Len_Interface as Len0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg slice_first [#"../01.rs" 20 0 20 44] [@cfg:stackify] [@cfg:subregion_analysis] (a : slice t) : Core_Option_Option_Type.t_option t
    ensures { [#"../01.rs" 16 10 19 1] match (result) with
      | Core_Option_Option_Type.C_Some v -> v = IndexLogic0.index_logic a 0
      | Core_Option_Option_Type.C_None -> Seq.length (ShallowModel0.shallow_model a) = 0
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var a : slice t = a;
  var _7 : t;
  var _8 : usize;
  var _10 : bool;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    switch ([#"../01.rs" 21 7 21 18] ([#"../01.rs" 21 7 21 14] Len0.len a) > ([#"../01.rs" 21 17 21 18] (0 : usize)))
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    _8 <- ([#"../01.rs" 22 16 22 17] (0 : usize));
    _10 <- ([#"../01.rs" 22 14 22 18] _8 < Slice.length a);
    assert { [@expl:index in bounds] [#"../01.rs" 22 14 22 18] _10 };
    goto BB3
  }
  BB3 {
    _7 <- Slice.get a _8;
    assume { Resolve0.resolve a };
    assume { Resolve1.resolve _7 };
    _0 <- Core_Option_Option_Type.C_Some _7;
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve a };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
