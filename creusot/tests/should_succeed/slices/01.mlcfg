
module C01_IndexSlice
  use prelude.UInt32
  use seq.Seq
  predicate invariant1 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Seq.seq uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq uint32)
  val inv1 (_x : Seq.seq uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq uint32 . inv1 x = true
  use prelude.Slice
  predicate invariant0 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : slice uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : slice uint32)
  val inv0 (_x : slice uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : slice uint32 . inv0 x = true
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model1 (self : slice uint32) : Seq.seq uint32
  val shallow_model1 (self : slice uint32) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model1 self }
    
  axiom shallow_model1_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv1 (shallow_model1 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model1 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model1 self) <= UIntSize.to_int max0)
  use prelude.Borrow
  function shallow_model0 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model1 self
  val shallow_model0 (self : slice uint32) : Seq.seq uint32
    ensures { result = shallow_model0 self }
    
  let rec cfg index_slice [#"../01.rs" 6 0 6 36] [@cfg:stackify] [@cfg:subregion_analysis] (a : slice uint32) : uint32
    requires {[#"../01.rs" 5 11 5 24] 10 < Seq.length (shallow_model0 a)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var a : slice uint32 = a;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../01.rs" 7 6 7 8] _3 <- ([#"../01.rs" 7 6 7 8] (10 : usize));
    [#"../01.rs" 7 4 7 9] _4 <- Slice.length a;
    [#"../01.rs" 7 4 7 9] _5 <- _3 < _4;
    assert { [@expl:index in bounds] [#"../01.rs" 7 4 7 9] _5 };
    goto BB1
  }
  BB1 {
    [#"../01.rs" 7 4 7 9] _0 <- Slice.get a _3;
    return _0
  }
  
end
module C01_IndexMutSlice
  use prelude.UInt32
  use seq.Seq
  predicate invariant1 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : Seq.seq uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Seq.seq uint32)
  val inv1 (_x : Seq.seq uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Seq.seq uint32 . inv1 x = true
  use prelude.Slice
  predicate invariant0 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : slice uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : slice uint32)
  val inv0 (_x : slice uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : slice uint32 . inv0 x = true
  use prelude.UInt32
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model2 (self : slice uint32) : Seq.seq uint32
  val shallow_model2 (self : slice uint32) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv0 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv0 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv1 (shallow_model2 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model2 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  function index_logic0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32
    ensures { result = index_logic0 self ix }
    
  use prelude.Borrow
  function shallow_model0 (self : borrowed (slice uint32)) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model2 ( * self)
  val shallow_model0 (self : borrowed (slice uint32)) : Seq.seq uint32
    ensures { result = shallow_model0 self }
    
  predicate resolve0 (self : borrowed (slice uint32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (slice uint32)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg index_mut_slice [#"../01.rs" 12 0 12 37] [@cfg:stackify] [@cfg:subregion_analysis] (a : borrowed (slice uint32)) : ()
    requires {[#"../01.rs" 10 11 10 24] Seq.length (shallow_model0 a) = 5}
    ensures { [#"../01.rs" 11 10 11 23] UInt32.to_int (index_logic0 ( ^ a) 2) = 3 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : borrowed (slice uint32) = a;
  var _4 : usize;
  var _5 : usize;
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../01.rs" 13 6 13 7] _4 <- ([#"../01.rs" 13 6 13 7] (2 : usize));
    [#"../01.rs" 13 4 13 8] _5 <- Slice.length ( * a);
    [#"../01.rs" 13 4 13 8] _6 <- _4 < _5;
    assert { [@expl:index in bounds] [#"../01.rs" 13 4 13 8] _6 };
    goto BB1
  }
  BB1 {
    [#"../01.rs" 13 4 13 12] a <- { a with current = Slice.set ( * a) _4 ([#"../01.rs" 13 11 13 12] (3 : uint32)) ; };
    assume { resolve0 a };
    [#"../01.rs" 12 38 14 1] _0 <- ([#"../01.rs" 12 38 14 1] ());
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C01_SliceFirst
  type t
  use seq.Seq
  predicate invariant4 (self : Seq.seq t)
  val invariant4 (self : Seq.seq t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : Seq.seq t)
  val inv4 (_x : Seq.seq t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Seq.seq t . inv4 x = true
  use prelude.Slice
  predicate invariant3 (self : slice t)
  val invariant3 (self : slice t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : slice t)
  val inv3 (_x : slice t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : slice t . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : Core_Option_Option_Type.t_option t)
  val invariant2 (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option t)
  val inv2 (_x : Core_Option_Option_Type.t_option t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option t . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : slice t)
  val invariant0 (self : slice t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : slice t)
  val inv0 (_x : slice t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : slice t . inv0 x = true
  use seq.Seq
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  function shallow_model2 (self : slice t) : Seq.seq t
  val shallow_model2 (self : slice t) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv4 (shallow_model2 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model2 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  use prelude.Borrow
  function shallow_model0 (self : slice t) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model2 self
  val shallow_model0 (self : slice t) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : slice t)
  val resolve0 (self : slice t) : bool
    ensures { result = resolve0 self }
    
  val len0 (self : slice t) : usize
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] Seq.length (shallow_model0 self) = UIntSize.to_int result }
    
  let rec cfg slice_first [#"../01.rs" 20 0 20 44] [@cfg:stackify] [@cfg:subregion_analysis] (a : slice t) : Core_Option_Option_Type.t_option t
    requires {[#"../01.rs" 20 22 20 23] inv0 a}
    ensures { [#"../01.rs" 16 10 19 1] match result with
      | Core_Option_Option_Type.C_Some v -> v = index_logic0 a 0
      | Core_Option_Option_Type.C_None -> Seq.length (shallow_model0 a) = 0
      end }
    ensures { [#"../01.rs" 20 34 20 44] inv2 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var a : slice t = a;
  var _3 : bool;
  var _4 : usize;
  var _7 : t;
  var _8 : usize;
  var _9 : usize;
  var _10 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../01.rs" 21 7 21 14] _4 <- ([#"../01.rs" 21 7 21 14] len0 a);
    goto BB1
  }
  BB1 {
    [#"../01.rs" 21 7 21 18] _3 <- _4 > ([#"../01.rs" 21 17 21 18] (0 : usize));
    _4 <- any usize;
    switch (_3)
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    [#"../01.rs" 22 16 22 17] _8 <- ([#"../01.rs" 22 16 22 17] (0 : usize));
    [#"../01.rs" 22 14 22 18] _9 <- Slice.length a;
    [#"../01.rs" 22 14 22 18] _10 <- _8 < _9;
    assert { [@expl:index in bounds] [#"../01.rs" 22 14 22 18] _10 };
    goto BB3
  }
  BB3 {
    [#"../01.rs" 22 13 22 18] _7 <- Slice.get a _8;
    assert { [@expl:type invariant] inv0 a };
    assume { resolve0 a };
    assert { [@expl:type invariant] inv1 _7 };
    assume { resolve1 _7 };
    [#"../01.rs" 22 8 22 19] _0 <- Core_Option_Option_Type.C_Some _7;
    goto BB5
  }
  BB4 {
    assert { [@expl:type invariant] inv0 a };
    assume { resolve0 a };
    [#"../01.rs" 24 8 24 12] _0 <- Core_Option_Option_Type.C_None;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
