module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module C01_SliceArg_Interface
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  val slice_arg [@cfg:stackify] (a : seq uint32) : uint32
end
module C01_SliceArg
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = seq uint32
  let rec cfg slice_arg [@cfg:stackify] (a : seq uint32) : uint32 = 
  var _0 : uint32;
  var a_1 : seq uint32;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _0 <- (0 : uint32);
    assume { Resolve0.resolve a_1 };
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl2_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t   
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t   
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t = 
    Prelude.id self
end
module CreusotContracts_Logic_Model_Impl2
  type t   
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module C01_IndexSlice_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt32
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index_slice [@cfg:stackify] (a : seq uint32) : uint32
    requires {10 < Seq.length (Model0.model a) && Seq.length (Model0.model a) <= 100}
    
end
module C01_IndexSlice
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt32
  clone CreusotContracts_Logic_Model_Impl2_Model as Model1 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = seq uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = uint32
  let rec cfg index_slice [@cfg:stackify] (a : seq uint32) : uint32
    requires {10 < Seq.length (Model0.model a) && Seq.length (Model0.model a) <= 100}
    
   = 
  var _0 : uint32;
  var a_1 : seq uint32;
  var _2 : usize;
  var _3 : usize;
  var _4 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- (10 : usize);
    _3 <- UInt64.of_int (Seq.length a_1);
    _4 <- _2 < _3;
    assert { _4 };
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _0 };
    _0 <- Seq.get a_1 (UInt64.to_int _2);
    assume { Resolve1.resolve a_1 };
    assume { Resolve2.resolve _2 };
    return _0
  }
  
end
module C01_IndexMutSlice_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt32
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model0 with type t = uint32
  val index_mut_slice [@cfg:stackify] (a : borrowed (seq uint32)) : ()
    requires {Seq.length (Model0.model ( ^ a)) = 5}
    
end
module C01_IndexMutSlice
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt32
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = uint32
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (seq uint32)
  let rec cfg index_mut_slice [@cfg:stackify] (a : borrowed (seq uint32)) : ()
    requires {Seq.length (Model0.model ( ^ a)) = 5}
    
   = 
  var _0 : ();
  var a_1 : borrowed (seq uint32);
  var _2 : usize;
  var _3 : usize;
  var _4 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- (2 : usize);
    _3 <- UInt64.of_int (Seq.length ( * a_1));
    _4 <- _2 < _3;
    assert { _4 };
    goto BB1
  }
  BB1 {
    a_1 <- { a_1 with current = Seq.set ( * a_1) (UInt64.to_int _2) (3 : uint32) };
    assume { Resolve0.resolve a_1 };
    assume { Resolve1.resolve _2 };
    _0 <- ();
    return _0
  }
  
end
