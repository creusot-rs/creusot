
module C01_IndexSlice
  let%span s010 = "../01.rs" 7 6 7 8
  
  let%span s011 = "../01.rs" 7 4 7 9
  
  let%span s012 = "../01.rs" 5 11 5 24
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "" 0 0 0 0
  
  let%span span5 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span6 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span9 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq uint32) =
    [%#span3] true
  
  predicate inv'1 (_x : Seq.seq uint32)
  
  axiom inv'1 : forall x : Seq.seq uint32 . inv'1 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'0 (self : slice uint32) =
    [%#span3] true
  
  predicate inv'0 (_x : slice uint32)
  
  axiom inv'0 : forall x : slice uint32 . inv'0 x = true
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32
  
  axiom shallow_model'1_spec : forall self : slice uint32 . ([%#span5] inv'0 self)
   -> ([%#span8] inv'1 (shallow_model'1 self))
  && ([%#span7] shallow_model'1 self = Slice.id self)
  && ([%#span6] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : slice uint32) : Seq.seq uint32 =
    [%#span9] shallow_model'1 self
  
  use prelude.prelude.Intrinsic
  
  let rec index_slice (a:slice uint32) (return'  (ret:uint32))= {[%#s012] 10 < Seq.length (shallow_model'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s010] (10 : usize) ] s1
      | s1 =  [ &_4 <- Slice.length a ] s2
      | s2 = UIntSize.lt {_3} {_4} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s011] _5} s4
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = Slice.get <uint32> {a} {_3} (fun (r'0:uint32) ->  [ &_0 <- r'0 ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & a : slice uint32 = a
    | & _3 : usize = any_l ()
    | & _4 : usize = any_l ()
    | & _5 : bool = any_l () ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module C01_IndexMutSlice
  let%span s010 = "../01.rs" 13 6 13 7
  
  let%span s011 = "../01.rs" 13 4 13 8
  
  let%span s012 = "../01.rs" 13 11 13 12
  
  let%span s013 = "../01.rs" 10 11 10 24
  
  let%span s014 = "../01.rs" 11 10 11 23
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span9 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span10 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span12 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span13 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq uint32) =
    [%#span5] true
  
  predicate inv'1 (_x : Seq.seq uint32)
  
  axiom inv'1 : forall x : Seq.seq uint32 . inv'1 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'0 (self : slice uint32) =
    [%#span5] true
  
  predicate inv'0 (_x : slice uint32)
  
  axiom inv'0 : forall x : slice uint32 . inv'0 x = true
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  use seq.Seq
  
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32
  
  axiom shallow_model'1_spec : forall self : slice uint32 . ([%#span7] inv'0 self)
   -> ([%#span10] inv'1 (shallow_model'1 self))
  && ([%#span9] shallow_model'1 self = Slice.id self)
  && ([%#span8] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#span11] Seq.get (shallow_model'1 self) ix
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : borrowed (slice uint32)) : Seq.seq uint32 =
    [%#span12] shallow_model'1 ( * self)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (slice uint32)) =
    [%#span13]  ^ self =  * self
  
  let rec index_mut_slice (a:borrowed (slice uint32)) (return'  (ret:()))= {[%#s013] Seq.length (shallow_model'0 a) = 5}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- [%#s010] (2 : usize) ] s1
      | s1 =  [ &_5 <- Slice.length ( * a) ] s2
      | s2 = UIntSize.lt {_4} {_5} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s011] _6} s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Slice.get <uint32> { * a} {_4}
          (fun (l'0:uint32) ->
            Slice.set <uint32> { * a} {_4} {[%#s012] (3 : uint32)}
              (fun (l'1:slice uint32) ->  [ &a <- { a with current = l'1 ; } ] s1))
      | s1 = -{resolve'0 a}- s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed (slice uint32) = a
    | & _4 : usize = any_l ()
    | & _5 : usize = any_l ()
    | & _6 : bool = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s014] UInt32.to_int (index_logic'0 ( ^ a) 2) = 3}
      (! return' {result}) ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C01_SliceFirst
  type t
  
  let%span s010 = "../01.rs" 21 17 21 18
  
  let%span s011 = "../01.rs" 22 16 22 17
  
  let%span s012 = "../01.rs" 22 14 22 18
  
  let%span s013 = "../01.rs" 20 22 20 23
  
  let%span s014 = "../01.rs" 16 10 19 1
  
  let%span s015 = "../01.rs" 20 34 20 44
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "" 0 0 0 0
  
  let%span span8 = "../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  
  let%span span9 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span10 = "../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  
  let%span span12 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span13 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span14 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t) =
    [%#span6] true
  
  predicate inv'4 (_x : Seq.seq t)
  
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  
  use prelude.prelude.Slice
  
  predicate invariant'3 (self : slice t) =
    [%#span6] true
  
  predicate inv'3 (_x : slice t)
  
  axiom inv'3 : forall x : slice t . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option t) =
    [%#span6] true
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  predicate invariant'1 (self : t)
  
  predicate inv'1 (_x : t)
  
  axiom inv'1 : forall x : t . inv'1 x = true
  
  predicate invariant'0 (self : slice t) =
    [%#span6] true
  
  predicate inv'0 (_x : slice t)
  
  axiom inv'0 : forall x : slice t . inv'0 x = true
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant max'0 : usize = [%#span7] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice t) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : slice t . ([%#span8] inv'3 self)
   -> ([%#span11] inv'4 (shallow_model'1 self))
  && ([%#span10] shallow_model'1 self = Slice.id self)
  && ([%#span9] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : slice t) : Seq.seq t =
    [%#span12] shallow_model'1 self
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#span13] Seq.get (shallow_model'1 self) ix
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  predicate resolve'0 (self : slice t) =
    [%#span14] true
  
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] [%#span15] inv'0 self}
    any
    [ return' (result:usize)-> {[%#span16] Seq.length (shallow_model'0 self) = UIntSize.to_int result}
      (! return' {result}) ]
    
  
  let rec slice_first (a:slice t) (return'  (ret:Option'0.t_option t))= {[%#s013] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {a} (fun (_ret':usize) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.gt {_4} {[%#s010] (0 : usize)}
          (fun (_ret':bool) ->  [ &_3 <- _ret' ] (any [ any_ (_any:usize)-> (!  [ &_4 <- _any ] s1) ] ))
      | s1 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- [%#s011] (0 : usize) ] s1
      | s1 =  [ &_9 <- Slice.length a ] s2
      | s2 = UIntSize.lt {_8} {_9} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s012] _10} s4
      | s4 = bb3 ]
      
    | bb3 = s0
      [ s0 = Slice.get <t> {a} {_8} (fun (r'0:t) ->  [ &_7 <- r'0 ] s1)
      | s1 = {[@expl:type invariant] inv'0 a} s2
      | s2 = -{resolve'0 a}- s3
      | s3 = {[@expl:type invariant] inv'1 _7} s4
      | s4 = -{resolve'1 _7}- s5
      | s5 =  [ &_0 <- Option'0.C_Some _7 ] s6
      | s6 = bb5 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 = -{resolve'0 a}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb5 ]
      
    | bb5 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option t = any_l ()
    | & a : slice t = a
    | & _3 : bool = any_l ()
    | & _4 : usize = any_l ()
    | & _7 : t = any_l ()
    | & _8 : usize = any_l ()
    | & _9 : usize = any_l ()
    | & _10 : bool = any_l () ]
    
    [ return' (result:Option'0.t_option t)-> {[@expl:postcondition] [%#s015] inv'2 result}
      {[@expl:postcondition] [%#s014] match result with
        | Option'0.C_Some v -> v = index_logic'0 a 0
        | Option'0.C_None -> Seq.length (shallow_model'0 a) = 0
        end}
      (! return' {result}) ]
    
end
