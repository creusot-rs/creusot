module M_01__index_slice [#"01.rs" 6 0 6 36]
  let%span s010 = "01.rs" 7 6 7 8
  let%span s011 = "01.rs" 7 4 7 9
  let%span s012 = "01.rs" 5 11 5 24
  let%span smodel3 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice uint32) : Seq.seq uint32
  
  axiom view'1_spec : forall self : slice uint32 . ([%#sslice5] view'1 self = Slice.id self)
  && ([%#sslice4] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  use prelude.prelude.Borrow
  
  function view'0 (self : slice uint32) : Seq.seq uint32 =
    [%#smodel3] view'1 self
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec index_slice (a:slice uint32) (return'  (ret:uint32))= {[%#s012] 10 < Seq.length (view'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s010] (10 : usize) ] s1
      | s1 =  [ &_4 <- Slice.length a ] s2
      | s2 = UIntSize.lt {_3} {_4} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s011] _5} s4
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = Slice.get <uint32> {a} {_3} (fun (r'0:uint32) ->  [ &_0 <- r'0 ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & a : slice uint32 = a
    | & _3 : usize = any_l ()
    | & _4 : usize = any_l ()
    | & _5 : bool = any_l () ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
module M_01__index_mut_slice [#"01.rs" 12 0 12 37]
  let%span s010 = "01.rs" 13 6 13 7
  let%span s011 = "01.rs" 13 4 13 8
  let%span s012 = "01.rs" 13 11 13 12
  let%span s013 = "01.rs" 10 11 10 24
  let%span s014 = "01.rs" 11 10 11 23
  let%span smodel5 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sops6 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sresolve7 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice9 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'1 (self : slice uint32) : Seq.seq uint32
  
  axiom view'1_spec : forall self : slice uint32 . ([%#sslice9] view'1 self = Slice.id self)
  && ([%#sslice8] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#sops6] Seq.get (view'1 self) ix
  
  use prelude.prelude.Borrow
  
  function view'0 (self : borrowed (slice uint32)) : Seq.seq uint32 =
    [%#smodel5] view'1 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (slice uint32)) =
    [%#sresolve7] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (slice uint32)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec index_mut_slice (a:borrowed (slice uint32)) (return'  (ret:()))= {[%#s013] Seq.length (view'0 a) = 5}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- [%#s010] (2 : usize) ] s1
      | s1 =  [ &_5 <- Slice.length a.current ] s2
      | s2 = UIntSize.lt {_4} {_5} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s011] _6} s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Slice.set <uint32> {a.current} {_4} {[%#s012] (3 : uint32)}
          (fun (r'0:slice uint32) ->  [ &a <- { a with current = r'0 ; } ] s1)
      | s1 = -{resolve'0 a}- s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed (slice uint32) = a
    | & _4 : usize = any_l ()
    | & _5 : usize = any_l ()
    | & _6 : bool = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s014] UInt32.to_int (index_logic'0 a.final 2) = 3}
      (! return' {result}) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_01__slice_first [#"01.rs" 20 0 20 44]
  type t
  
  let%span s010 = "01.rs" 21 17 21 18
  let%span s011 = "01.rs" 22 16 22 17
  let%span s012 = "01.rs" 22 14 22 18
  let%span s013 = "01.rs" 20 22 20 23
  let%span s014 = "01.rs" 16 10 19 1
  let%span s015 = "01.rs" 20 34 20 44
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 249 0 358 1
  let%span sops7 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span smodel8 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sslice9 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice10 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sinvariant11 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq13 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed14 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'4 (_1 : t)
  
  predicate invariant'4 (self : t) =
    [%#sboxed14] inv'4 self
  
  predicate inv'6 (_1 : t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t [inv'6 x] . inv'6 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#sseq13] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t [inv'5 x] . inv'5 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice t) : Seq.seq t
  
  axiom view'1_spec : forall self : slice t . ([%#sslice10] view'1 self = Slice.id self)
  && ([%#sslice9] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'2 (self : slice t) =
    [%#sslice12] inv'5 (view'1 self)
  
  predicate inv'3 (_1 : slice t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : slice t [inv'3 x] . inv'3 x = invariant'2 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t) =
    [%#sinvariant11] inv'4 self
  
  predicate inv'2 (_1 : t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate invariant'0 (self : slice t) =
    [%#sinvariant11] inv'3 self
  
  predicate inv'0 (_1 : slice t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : slice t [inv'0 x] . inv'0 x = invariant'0 x
  
  function view'0 (self : slice t) : Seq.seq t =
    [%#smodel8] view'1 self
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t) (ix : int) : t =
    [%#sops7] Seq.get (view'1 self) ix
  
  use prelude.prelude.Intrinsic
  
  let rec len'0 (self:slice t) (return'  (ret:usize))= {[@expl:precondition] inv'0 self}
    any
    [ return' (result:usize)-> {[%#sslice6] Seq.length (view'0 self) = UIntSize.to_int result} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec slice_first (a:slice t) (return'  (ret:Option'0.t_Option t))= {[%#s013] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {a} (fun (_ret':usize) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.gt {_4} {[%#s010] (0 : usize)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- [%#s011] (0 : usize) ] s1
      | s1 =  [ &_9 <- Slice.length a ] s2
      | s2 = UIntSize.lt {_8} {_9} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s3)
      | s3 = {[@expl:index in bounds] [%#s012] _10} s4
      | s4 = bb3 ]
      
    | bb3 = s0
      [ s0 = Slice.get <t> {a} {_8} (fun (r'0:t) ->  [ &_7 <- r'0 ] s1)
      | s1 =  [ &_0 <- Option'0.C_Some _7 ] s2
      | s2 = bb5 ]
      
    | bb4 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t = any_l ()
    | & a : slice t = a
    | & _3 : bool = any_l ()
    | & _4 : usize = any_l ()
    | & _7 : t = any_l ()
    | & _8 : usize = any_l ()
    | & _9 : usize = any_l ()
    | & _10 : bool = any_l () ]
    
    [ return' (result:Option'0.t_Option t)-> {[@expl:postcondition] [%#s015] inv'1 result}
      {[@expl:postcondition] [%#s014] match result with
        | Option'0.C_Some v -> v = index_logic'0 a 0
        | Option'0.C_None -> Seq.length (view'0 a) = 0
        end}
      (! return' {result}) ]
    
end
