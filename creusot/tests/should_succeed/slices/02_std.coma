
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  function any_l (_ : 'b) : 'a
  
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module CreusotContracts_Logic_Seq2_Seq_Type
  use seq.Seq
  
  type t_seq 't =
    | C_Seq (Seq.seq 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seq < 't > (input:t_seq 't) (ret  (field_0:Seq.seq 't))= any
    [ good (field_0:Seq.seq 't)-> {C_Seq field_0 = input} (! ret {field_0})
    | bad (field_0:Seq.seq 't)-> {C_Seq field_0 <> input} {false} any ]
    
  
  function seq_0 [@inline:trivial] (self : t_seq 't) : Seq.seq 't =
    match self with
      | C_Seq a -> a
      end
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module C02Std_BinarySearch
  let%span s02_std0 = "../02_std.rs" 11 20 11 27
  
  let%span s02_std1 = "../02_std.rs" 6 0 6 64
  
  let%span s02_std2 = "../02_std.rs" 7 11 7 24
  
  let%span s02_std3 = "../02_std.rs" 9 30 9 31
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq2.rs" 72 15 72 19
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq2.rs" 71 14 71 25
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq2.rs" 19 4 19 25
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq2.rs" 23 14 23 36
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq2.rs" 21 4 21 10
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 18 21 18 25
  
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 18 4 18 50
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  
  let%span span15 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span16 = "../../../../../creusot-contracts/src/std/result.rs" 53 16 53 55
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../../creusot-contracts/src/std/result.rs" 18 0 135 1
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span21 = "../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span22 = "../../../../../creusot-contracts/src/std/slice.rs" 31 18 31 22
  
  let%span span23 = "../../../../../creusot-contracts/src/std/slice.rs" 29 14 29 44
  
  let%span span24 = "../../../../../creusot-contracts/src/std/slice.rs" 30 4 30 98
  
  let%span span25 = "../../../../../creusot-contracts/src/std/slice.rs" 31 4 31 44
  
  let%span span26 = "../../../../../creusot-contracts/src/logic/seq2.rs" 156 8 158 9
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq2.rs" 167 8 167 40
  
  let%span span28 = "../../../../../creusot-contracts/src/std/slice.rs" 223 0 332 1
  
  let%span span29 = "" 0 0 0 0
  
  let%span span30 = "" 0 0 0 0
  
  let%span span31 = "../../../../../creusot-contracts/src/std/slice.rs" 299 8 299 118
  
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 300 8 301 96
  
  let%span span33 = "../../../../../creusot-contracts/src/std/slice.rs" 302 8 303 78
  
  let%span span34 = "../../../../../creusot-contracts/src/std/slice.rs" 304 8 305 99
  
  use prelude.prelude.Int
  
  use CreusotContracts_Logic_Seq2_Seq_Type as Seq'0
  
  predicate invariant'6 (self : Seq'0.t_seq int) =
    [%#span4] true
  
  predicate inv'6 (_x : Seq'0.t_seq int)
  
  axiom inv'6 : forall x : Seq'0.t_seq int . inv'6 x = true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Slice
  
  predicate invariant'5 (self : slice uint32) =
    [%#span4] true
  
  predicate inv'5 (_x : slice uint32)
  
  axiom inv'5 : forall x : slice uint32 . inv'5 x = true
  
  predicate invariant'4 (self : Seq'0.t_seq uint32) =
    [%#span4] true
  
  predicate inv'4 (_x : Seq'0.t_seq uint32)
  
  axiom inv'4 : forall x : Seq'0.t_seq uint32 . inv'4 x = true
  
  use prelude.prelude.UIntSize
  
  use Core_Result_Result_Type as Result'0
  
  predicate invariant'3 (self : Result'0.t_result usize usize) =
    [%#span4] true
  
  predicate inv'3 (_x : Result'0.t_result usize usize)
  
  axiom inv'3 : forall x : Result'0.t_result usize usize . inv'3 x = true
  
  predicate invariant'2 (self : usize) =
    [%#span4] true
  
  predicate inv'2 (_x : usize)
  
  axiom inv'2 : forall x : usize . inv'2 x = true
  
  predicate invariant'1 (self : uint32) =
    [%#span4] true
  
  predicate inv'1 (_x : uint32)
  
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  
  predicate invariant'0 (self : slice uint32) =
    [%#span4] true
  
  predicate inv'0 (_x : slice uint32)
  
  axiom inv'0 : forall x : slice uint32 . inv'0 x = true
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use CreusotContracts_Logic_Seq2_Seq_Type as CreusotContracts_Logic_Seq2_Seq_Type
  
  function len'1 (self : Seq'0.t_seq int) : int
  
  axiom len'1_spec : forall self : Seq'0.t_seq int . ([%#span5] inv'6 self)  -> ([%#span6] len'1 self >= 0)
  
  constant empty'1 : Seq'0.t_seq int = [%#span7] ()
  
  function empty_len'1 (_1 : ()) : () =
    [%#span9] ()
  
  axiom empty_len'1_spec : forall _1 : () . [%#span8] len'1 (empty'1 : Seq'0.t_seq int) = 0
  
  use seq.Seq
  
  function len'0 (self : Seq'0.t_seq uint32) : int
  
  axiom len'0_spec : forall self : Seq'0.t_seq uint32 . ([%#span5] inv'4 self)  -> ([%#span6] len'0 self >= 0)
  
  constant empty'0 : Seq'0.t_seq uint32 = [%#span7] ()
  
  function empty_len'0 (_1 : ()) : () =
    [%#span9] ()
  
  axiom empty_len'0_spec : forall _1 : () . [%#span8] len'0 (empty'0 : Seq'0.t_seq uint32) = 0
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  function index_logic'2 (self : Seq'0.t_seq uint32) (x : int) : uint32
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : slice uint32) : Seq'0.t_seq uint32
  
  axiom shallow_model'1_spec : forall self : slice uint32 . ([%#span11] inv'5 self)
   -> ([%#span13] inv'4 (shallow_model'1 self))
  && ([%#span12] len'0 (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#span14] index_logic'2 (shallow_model'1 self) ix
  
  use prelude.prelude.Borrow
  
  function shallow_model'0 (self : slice uint32) : Seq'0.t_seq uint32 =
    [%#span15] shallow_model'1 self
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'0 (self:Result'0.t_result usize usize) (return'  (ret:usize))= {[@expl:precondition] [%#span17] inv'3 self}
    {[@expl:precondition] [%#span16] exists t : usize . inv'2 t /\ self = Result'0.C_Ok t}
    any
    [ return' (result:usize)-> {[%#span19] inv'2 result} {[%#span18] Result'0.C_Ok result = self} (! return' {result}) ]
    
  
  use int.Int
  
  function deep_model'3 (self : uint32) : int =
    [%#span20] UInt32.to_int self
  
  function deep_model'2 (self : uint32) : int =
    [%#span21] deep_model'3 self
  
  use seq.Seq
  
  function index_logic'1 (self : Seq'0.t_seq int) (x : int) : int
  
  function deep_model'1 (self : slice uint32) : Seq'0.t_seq int
  
  axiom deep_model'1_spec : forall self : slice uint32 . ([%#span22] inv'5 self)
   -> ([%#span25] inv'6 (deep_model'1 self))
  && ([%#span24] forall i : int . 0 <= i /\ i < len'1 (deep_model'1 self)
   -> index_logic'1 (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  && ([%#span23] len'0 (shallow_model'0 self) = len'1 (deep_model'1 self))
  
  use int.Int
  
  predicate sorted_range'0 (self : Seq'0.t_seq int) (l : int) (u : int) =
    [%#span26] forall j : int . forall i : int . l <= i /\ i <= j /\ j < u
     -> index_logic'1 self i <= index_logic'1 self j
  
  predicate sorted'0 (self : Seq'0.t_seq int) =
    [%#span27] sorted_range'0 self 0 (len'1 self)
  
  function deep_model'0 (self : slice uint32) : Seq'0.t_seq int =
    [%#span21] deep_model'1 self
  
  let rec binary_search'0 (self:slice uint32) (x:uint32) (return'  (ret:Result'0.t_result usize usize))= {[@expl:precondition] [%#span30] inv'1 x}
    {[@expl:precondition] [%#span29] inv'0 self}
    {[@expl:precondition] [%#span28] sorted'0 (deep_model'0 self)}
    any
    [ return' (result:Result'0.t_result usize usize)-> {[%#span34] forall i : usize . result = Result'0.C_Err i
       -> (forall j : usize . i <= j /\ UIntSize.to_int j < len'0 (shallow_model'0 self)
       -> deep_model'2 x < index_logic'1 (deep_model'0 self) (UIntSize.to_int j))}
      {[%#span33] forall i : usize . result = Result'0.C_Err i
       -> (forall j : usize . j < i  -> index_logic'1 (deep_model'0 self) (UIntSize.to_int j) < deep_model'2 x)}
      {[%#span32] forall i : usize . result = Result'0.C_Err i
       -> UIntSize.to_int i <= len'0 (shallow_model'0 self)
      /\ (forall j : int . 0 <= j /\ j < len'0 (shallow_model'0 self)
       -> index_logic'1 (deep_model'0 self) j <> deep_model'2 x)}
      {[%#span31] forall i : usize . result = Result'0.C_Ok i
       -> UIntSize.to_int i < len'0 (shallow_model'0 self)
      /\ index_logic'1 (deep_model'1 self) (UIntSize.to_int i) = deep_model'2 x}
      (! return' {result}) ]
    
  
  let rec promoted0 (return'  (ret:uint32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s02_std3] (2 : uint32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : uint32 = any_l () ]  [ return' (result:uint32)-> return' {result} ] 
  
  let rec binary_search (s:slice uint32) (return'  (ret:usize))= {[%#s02_std2] len'0 (shallow_model'0 s) = 5}
    {[%#s02_std1] forall i : int . 0 <= i /\ i < len'0 (shallow_model'0 s)  -> UInt32.to_int (index_logic'0 s i) = i}
    (! bb0
    [ bb0 = s0
      [ s0 = promoted0 (fun (pr0:uint32) ->  [ &_12 <- pr0 ] s1)
      | s1 =  [ &_8 <- _12 ] s2
      | s2 = binary_search'0 {s} {_8} (fun (_ret':Result'0.t_result usize usize) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_5} (fun (_ret':usize) ->  [ &ix <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s02_std0] UIntSize.to_int ix < 5} s1 | s1 =  [ &_0 <- ix ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l ()
    | & s : slice uint32 = s
    | & ix : usize = any_l ()
    | & _5 : Result'0.t_result usize usize = any_l ()
    | & _8 : uint32 = any_l ()
    | & _12 : uint32 = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
