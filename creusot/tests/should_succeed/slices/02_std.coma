
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  function any_l (_ : 'b) : 'a
  let rec ok < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Ok field_0 <> input} {false} any ]
    
  let rec err < 't > < 'e > (input:t_result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad (field_0:'e)-> {C_Err field_0 <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module C02Std_BinarySearch
  use prelude.UInt32
  use seq.Seq
  predicate invariant'6 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'6 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq uint32)
  let rec inv'6 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq uint32 . inv'6 x = true
  use prelude.Int
  predicate invariant'5 (self : Seq.seq int) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'5 (self:Seq.seq int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : Seq.seq int)
  let rec inv'5 (_x:Seq.seq int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : Seq.seq int . inv'5 x = true
  use prelude.Slice
  predicate invariant'4 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : slice uint32)
  let rec inv'4 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : slice uint32 . inv'4 x = true
  use prelude.UIntSize
  use Core_Result_Result_Type as Core_Result_Result_Type
  predicate invariant'3 (self : Core_Result_Result_Type.t_result usize usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Result_Result_Type.t_result usize usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Result_Result_Type.t_result usize usize)
  let rec inv'3 (_x:Core_Result_Result_Type.t_result usize usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Result_Result_Type.t_result usize usize . inv'3 x = true
  predicate invariant'2 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : usize)
  let rec inv'2 (_x:usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : usize . inv'2 x = true
  predicate invariant'1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : uint32)
  let rec inv'1 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  predicate invariant'0 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : slice uint32)
  let rec inv'0 (_x:slice uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : slice uint32 . inv'0 x = true
  use prelude.UInt32
  use seq.Seq
  use prelude.Slice
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model'1 (self : slice uint32) : Seq.seq uint32
  let rec shallow_model'1 (self:slice uint32) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'4 self}
    any [ return' (result:Seq.seq uint32)-> {result = shallow_model'1 self} (! return' {result}) ] 
  axiom shallow_model'1_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv'6 (shallow_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model'1 self = Slice.id self)
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (max'0 : usize))
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model'1 self) ix
  let rec index_logic'0 (self:slice uint32) (ix:int) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use prelude.Borrow
  function shallow_model'0 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'1 self
  let rec shallow_model'0 (self:slice uint32) (return'  (ret:Seq.seq uint32))= any
    [ return' (result:Seq.seq uint32)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec unwrap'0 (self:Core_Result_Result_Type.t_result usize usize) (return'  (ret:usize))= {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/result.rs" 53 16 53 55] exists t : usize . inv'2 t
    /\ self = Core_Result_Result_Type.C_Ok t}
    any
    [ return' (result:usize)-> {inv'2 result}
      {[#"../../../../../creusot-contracts/src/std/result.rs" 18 0 135 1] Core_Result_Result_Type.C_Ok result = self}
      (! return' {result}) ]
    
  use int.Int
  function deep_model'3 (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  let rec deep_model'3 (self:uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'3 self} (! return' {result}) ]
    
  function deep_model'2 (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'3 self
  let rec deep_model'2 (self:uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'2 self} (! return' {result}) ]
    
  use seq.Seq
  use seq.Seq
  function deep_model'1 (self : slice uint32) : Seq.seq int
  let rec deep_model'1 (self:slice uint32) (return'  (ret:Seq.seq int))= {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 32 18 32 22] inv'4 self}
    any [ return' (result:Seq.seq int)-> {result = deep_model'1 self} (! return' {result}) ] 
  axiom deep_model'1_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 32 18 32 22] inv'4 self)
   -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 32 4 32 44] inv'5 (deep_model'1 self))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 31 4 31 98] forall i : int . 0 <= i
  /\ i < Seq.length (deep_model'1 self)  -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  && ([#"../../../../../creusot-contracts/src/std/slice.rs" 30 14 30 44] Seq.length (shallow_model'0 self)
  = Seq.length (deep_model'1 self))
  use int.Int
  predicate sorted_range'0 (self : Seq.seq int) (l : int) (u : int) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 138 8 140 9] forall j : int . forall i : int . l <= i
    /\ i <= j /\ j < u  -> Seq.get self i <= Seq.get self j
  let rec sorted_range'0 (self:Seq.seq int) (l:int) (u:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = sorted_range'0 self l u} (! return' {result}) ]
    
  predicate sorted'0 (self : Seq.seq int) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 149 8 149 40] sorted_range'0 self 0 (Seq.length self)
  let rec sorted'0 (self:Seq.seq int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = sorted'0 self} (! return' {result}) ]
    
  function deep_model'0 (self : slice uint32) : Seq.seq int =
    [#"../../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'1 self
  let rec deep_model'0 (self:slice uint32) (return'  (ret:Seq.seq int))= any
    [ return' (result:Seq.seq int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  let rec binary_search'0 (self:slice uint32) (x:uint32) (return'  (ret:Core_Result_Result_Type.t_result usize usize))= {[@expl:precondition] inv'1 x}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1] sorted'0 (deep_model'0 self)}
    any
    [ return' (result:Core_Result_Result_Type.t_result usize usize)-> {[#"../../../../../creusot-contracts/src/std/slice.rs" 319 8 320 99] forall i : usize . result
      = Core_Result_Result_Type.C_Err i
       -> (forall j : usize . i <= j /\ UIntSize.to_int j < Seq.length (shallow_model'0 self)
       -> deep_model'2 x < Seq.get (deep_model'0 self) (UIntSize.to_int j))}
      {[#"../../../../../creusot-contracts/src/std/slice.rs" 317 8 318 78] forall i : usize . result
      = Core_Result_Result_Type.C_Err i
       -> (forall j : usize . j < i  -> Seq.get (deep_model'0 self) (UIntSize.to_int j) < deep_model'2 x)}
      {[#"../../../../../creusot-contracts/src/std/slice.rs" 315 8 316 96] forall i : usize . result
      = Core_Result_Result_Type.C_Err i
       -> UIntSize.to_int i <= Seq.length (shallow_model'0 self)
      /\ (forall j : int . 0 <= j /\ j < Seq.length (shallow_model'0 self)
       -> Seq.get (deep_model'0 self) j <> deep_model'2 x)}
      {[#"../../../../../creusot-contracts/src/std/slice.rs" 314 8 314 118] forall i : usize . result
      = Core_Result_Result_Type.C_Ok i
       -> UIntSize.to_int i < Seq.length (shallow_model'0 self)
      /\ Seq.get (deep_model'1 self) (UIntSize.to_int i) = deep_model'2 x}
      (! return' {result}) ]
    
  let rec promoted0 (return'  (ret:uint32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../02_std.rs" 9 30 9 31] (2 : uint32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : uint32 = any_l () : uint32 ]  [ return' (result:uint32)-> return' {result} ] 
  let rec binary_search (s:slice uint32) (return'  (ret:usize))= {[#"../02_std.rs" 7 11 7 24] Seq.length (shallow_model'0 s)
    = 5}
    {[#"../02_std.rs" 6 0 6 64] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 s)
     -> UInt32.to_int (index_logic'0 s i) = i}
    (! bb0
    [ bb0 = s0
      [ s0 = promoted0 (fun (pr0:uint32) ->  [ &_12 <- pr0 ] s1)
      | s1 =  [ &_8 <- _12 ] s2
      | s2 = binary_search'0 {s} {_8} (fun (_ret':Core_Result_Result_Type.t_result usize usize) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_5} (fun (_ret':usize) ->  [ &ix <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [#"../02_std.rs" 11 20 11 27] UIntSize.to_int ix < 5} s1
      | s1 =  [ &_0 <- ix ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l () : usize
    | & s : slice uint32 = s
    | & ix : usize = any_l () : usize
    | & _5 : Core_Result_Result_Type.t_result usize usize = any_l () : Core_Result_Result_Type.t_result usize usize
    | & _8 : uint32 = any_l () : uint32
    | & _12 : uint32 = any_l () : uint32 ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
