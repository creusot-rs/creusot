module T_core__result__Result
  type t_Result 't 'e =
    | C_Ok 't
    | C_Err 'e
  
  let rec v_Ok < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Ok field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Ok field_0 : t_Result 't 'e] . C_Ok field_0 <> input} (! {false} any) ]
    
  
  let rec v_Err < 't > < 'e > (input:t_Result 't 'e) (ret  (field_0:'e))= any
    [ good (field_0:'e)-> {C_Err field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'e [C_Err field_0 : t_Result 't 'e] . C_Err field_0 <> input} (! {false} any) ]
    
end
module M_02_std__binary_search [#"02_std.rs" 8 0 8 40]
  let%span s02_std0 = "02_std.rs" 11 20 11 27
  let%span s02_std1 = "02_std.rs" 6 0 6 64
  let%span s02_std2 = "02_std.rs" 7 11 7 24
  let%span s02_std3 = "02_std.rs" 9 30 9 31
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 249 0 358 1
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 325 8 325 118
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 326 8 327 96
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 328 8 329 78
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 330 8 331 99
  let%span sresult9 = "../../../../creusot-contracts/src/std/result.rs" 53 16 53 55
  let%span sresult10 = "../../../../creusot-contracts/src/std/result.rs" 18 0 135 1
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span sops12 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span smodel13 = "../../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span sseq14 = "../../../../creusot-contracts/src/logic/seq.rs" 165 8 165 40
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 42 14 42 44
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 43 4 43 98
  let%span sslice17 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice18 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sseq19 = "../../../../creusot-contracts/src/logic/seq.rs" 154 8 156 9
  let%span snum20 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  predicate inv'3 (_1 : usize)
  
  axiom inv_axiom'3 [@rewrite] : forall x : usize [inv'3 x] . inv'3 x = true
  
  use T_core__result__Result as Result'0
  
  predicate inv'2 (_1 : Result'0.t_Result usize usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Result'0.t_Result usize usize [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  predicate inv'1 (_1 : uint32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : uint32 [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Slice
  
  predicate inv'0 (_1 : slice uint32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : slice uint32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'1 (self : slice uint32) : Seq.seq uint32
  
  axiom view'1_spec : forall self : slice uint32 . ([%#sslice18] view'1 self = Slice.id self)
  && ([%#sslice17] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function index_logic'0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [%#sops12] Seq.get (view'1 self) ix
  
  function view'0 (self : slice uint32) : Seq.seq uint32 =
    [%#smodel11] view'1 self
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'0 (self:Result'0.t_Result usize usize) (return'  (ret:usize))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#sresult9] exists t : usize . self = Result'0.C_Ok t}
    any [ return' (result:usize)-> {inv'3 result} {[%#sresult10] Result'0.C_Ok result = self} (! return' {result}) ] 
  
  function deep_model'3 (self : uint32) : int =
    [%#snum20] UInt32.to_int self
  
  function deep_model'2 (self : uint32) : int =
    [%#smodel13] deep_model'3 self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'1 (self : slice uint32) : Seq.seq int
  
  axiom deep_model'1_spec : forall self : slice uint32 . ([%#sslice16] forall i : int . 0 <= i
  /\ i < Seq.length (deep_model'1 self)  -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  && ([%#sslice15] Seq.length (view'0 self) = Seq.length (deep_model'1 self))
  
  predicate sorted_range'0 (self : Seq.seq int) (l : int) (u : int) =
    [%#sseq19] forall i : int, j : int . l <= i /\ i <= j /\ j < u  -> Seq.get self i <= Seq.get self j
  
  predicate sorted'0 (self : Seq.seq int) =
    [%#sseq14] sorted_range'0 self 0 (Seq.length self)
  
  function deep_model'0 (self : slice uint32) : Seq.seq int =
    [%#smodel13] deep_model'1 self
  
  let rec binary_search'0 (self:slice uint32) (x:uint32) (return'  (ret:Result'0.t_Result usize usize))= {[@expl:precondition] inv'1 x}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#sslice4] sorted'0 (deep_model'0 self)}
    any
    [ return' (result:Result'0.t_Result usize usize)-> {[%#sslice8] forall i : usize . result = Result'0.C_Err i
       -> (forall j : usize . i <= j /\ UIntSize.to_int j < Seq.length (view'0 self)
       -> deep_model'2 x < Seq.get (deep_model'0 self) (UIntSize.to_int j))}
      {[%#sslice7] forall i : usize . result = Result'0.C_Err i
       -> (forall j : usize . j < i  -> Seq.get (deep_model'0 self) (UIntSize.to_int j) < deep_model'2 x)}
      {[%#sslice6] forall i : usize . result = Result'0.C_Err i
       -> UIntSize.to_int i <= Seq.length (view'0 self)
      /\ (forall j : int . 0 <= j /\ j < Seq.length (view'0 self)  -> Seq.get (deep_model'0 self) j <> deep_model'2 x)}
      {[%#sslice5] forall i : usize . result = Result'0.C_Ok i
       -> UIntSize.to_int i < Seq.length (view'0 self)
      /\ Seq.get (deep_model'1 self) (UIntSize.to_int i) = deep_model'2 x}
      (! return' {result}) ]
    
  
  let rec promoted0 (return'  (ret:uint32))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s02_std3] (2 : uint32) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : uint32 = any_l () ]  [ return' (result:uint32)-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search (s:slice uint32) (return'  (ret:usize))= {[%#s02_std2] Seq.length (view'0 s) = 5}
    {[%#s02_std1] forall i : int . 0 <= i /\ i < Seq.length (view'0 s)  -> UInt32.to_int (index_logic'0 s i) = i}
    (! bb0
    [ bb0 = s0
      [ s0 = promoted0 (fun (pr0:uint32) ->  [ &_12 <- pr0 ] s1)
      | s1 =  [ &_8 <- _12 ] s2
      | s2 = binary_search'0 {s} {_8} (fun (_ret':Result'0.t_Result usize usize) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_5} (fun (_ret':usize) ->  [ &ix <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s02_std0] UIntSize.to_int ix < 5} s1 | s1 =  [ &_0 <- ix ] s2 | s2 = return' {_0} ]
       ]
    )
    [ & _0 : usize = any_l ()
    | & s : slice uint32 = s
    | & ix : usize = any_l ()
    | & _5 : Result'0.t_Result usize usize = any_l ()
    | & _8 : uint32 = any_l ()
    | & _12 : uint32 = any_l () ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
