
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module C02Std_BinarySearch
  use prelude.UInt32
  use seq.Seq
  predicate invariant6 (self : Seq.seq uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Seq.seq uint32) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq uint32)
  val inv6 (_x : Seq.seq uint32) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq uint32 . inv6 x = true
  use prelude.Int
  predicate invariant5 (self : Seq.seq int) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq int) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Seq.seq int)
  val inv5 (_x : Seq.seq int) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Seq.seq int . inv5 x = true
  use prelude.Slice
  predicate invariant4 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : slice uint32) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : slice uint32)
  val inv4 (_x : slice uint32) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : slice uint32 . inv4 x = true
  use prelude.UIntSize
  use Core_Result_Result_Type as Core_Result_Result_Type
  predicate invariant3 (self : Core_Result_Result_Type.t_result usize usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Result_Result_Type.t_result usize usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Core_Result_Result_Type.t_result usize usize)
  val inv3 (_x : Core_Result_Result_Type.t_result usize usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Result_Result_Type.t_result usize usize . inv3 x = true
  predicate invariant2 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : usize) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : usize)
  val inv2 (_x : usize) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : usize . inv2 x = true
  predicate invariant1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : uint32)
  val inv1 (_x : uint32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : uint32 . inv1 x = true
  predicate invariant0 (self : slice uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : slice uint32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : slice uint32)
  val inv0 (_x : slice uint32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : slice uint32 . inv0 x = true
  use prelude.UInt32
  use seq.Seq
  use prelude.Slice
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  function shallow_model3 (self : slice uint32) : Seq.seq uint32
  val shallow_model3 (self : slice uint32) : Seq.seq uint32
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv6 (shallow_model3 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model3 self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max0)
  function index_logic0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32 =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31] Seq.get (shallow_model3 self) ix
  val index_logic0 [@inline:trivial] (self : slice uint32) (ix : int) : uint32
    ensures { result = index_logic0 self ix }
    
  use prelude.Borrow
  function shallow_model1 (self : slice uint32) : Seq.seq uint32 =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model3 self
  val shallow_model1 (self : slice uint32) : Seq.seq uint32
    ensures { result = shallow_model1 self }
    
  val unwrap0 (self : Core_Result_Result_Type.t_result usize usize) : usize
    requires {[#"../../../../../creusot-contracts/src/std/result.rs" 46 16 46 55] exists t : usize . inv2 t /\ self = Core_Result_Result_Type.C_Ok t}
    requires {inv3 self}
    ensures { [#"../../../../../creusot-contracts/src/std/result.rs" 18 0 119 1] Core_Result_Result_Type.C_Ok result = self }
    ensures { inv2 result }
    
  use int.Int
  function deep_model3 (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model3 (self : uint32) : int
    ensures { result = deep_model3 self }
    
  function deep_model2 (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model3 self
  val deep_model2 (self : uint32) : int
    ensures { result = deep_model2 self }
    
  use seq.Seq
  use seq.Seq
  function deep_model1 (self : slice uint32) : Seq.seq int
  val deep_model1 (self : slice uint32) : Seq.seq int
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 32 18 32 22] inv4 self}
    ensures { result = deep_model1 self }
    
  axiom deep_model1_spec : forall self : slice uint32 . ([#"../../../../../creusot-contracts/src/std/slice.rs" 32 18 32 22] inv4 self) -> ([#"../../../../../creusot-contracts/src/std/slice.rs" 32 4 32 44] inv5 (deep_model1 self)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 31 4 31 95] forall i : int . 0 <= i /\ i < Seq.length (deep_model1 self) -> Seq.get (deep_model1 self) i = deep_model3 (index_logic0 self i)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 30 14 30 41] Seq.length (shallow_model3 self) = Seq.length (deep_model1 self))
  use int.Int
  predicate sorted_range0 (self : Seq.seq int) (l : int) (u : int) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 138 8 140 9] forall j : int . forall i : int . l <= i /\ i <= j /\ j < u -> Seq.get self i <= Seq.get self j
  val sorted_range0 (self : Seq.seq int) (l : int) (u : int) : bool
    ensures { result = sorted_range0 self l u }
    
  predicate sorted0 (self : Seq.seq int) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 149 8 149 40] sorted_range0 self 0 (Seq.length self)
  val sorted0 (self : Seq.seq int) : bool
    ensures { result = sorted0 self }
    
  function deep_model0 (self : slice uint32) : Seq.seq int =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : slice uint32) : Seq.seq int
    ensures { result = deep_model0 self }
    
  val binary_search0 (self : slice uint32) (x : uint32) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 238 0 334 1] sorted0 (deep_model0 self)}
    requires {inv0 self}
    requires {inv1 x}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 304 8 304 118] forall i : usize . result = Core_Result_Result_Type.C_Ok i -> UIntSize.to_int i < Seq.length (shallow_model1 self) /\ Seq.get (deep_model1 self) (UIntSize.to_int i) = deep_model2 x }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 305 8 306 96] forall i : usize . result = Core_Result_Result_Type.C_Err i -> UIntSize.to_int i <= Seq.length (shallow_model1 self) /\ (forall j : int . 0 <= j /\ j < Seq.length (shallow_model1 self) -> Seq.get (deep_model0 self) j <> deep_model2 x) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 307 8 308 78] forall i : usize . result = Core_Result_Result_Type.C_Err i -> (forall j : usize . j < i -> Seq.get (deep_model0 self) (UIntSize.to_int j) < deep_model2 x) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 309 8 310 99] forall i : usize . result = Core_Result_Result_Type.C_Err i -> (forall j : usize . i <= j /\ UIntSize.to_int j < Seq.length (shallow_model1 self) -> deep_model2 x < Seq.get (deep_model0 self) (UIntSize.to_int j)) }
    
  let constant promoted0 [#"../02_std.rs" 8 0 8 40]  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../02_std.rs" 9 30 9 31] [#"../02_std.rs" 9 30 9 31] (2 : uint32) in let _0 = [#"../02_std.rs" 9 29 9 31] _1 in _0
  let rec cfg binary_search [#"../02_std.rs" 8 0 8 40] [@cfg:stackify] [@cfg:subregion_analysis] (s : slice uint32) : usize
    requires {[#"../02_std.rs" 6 0 6 64] forall i : int . 0 <= i /\ i < Seq.length (shallow_model1 s) -> UInt32.to_int (index_logic0 s i) = i}
    requires {[#"../02_std.rs" 7 11 7 24] Seq.length (shallow_model1 s) = 5}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var s : slice uint32 = s;
  var ix : usize;
  var _5 : Core_Result_Result_Type.t_result usize usize;
  var _8 : uint32;
  var _12 : uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../02_std.rs" 9 29 9 31] _12 <- ([#"../02_std.rs" 9 29 9 31] [#"../02_std.rs" 9 29 9 31] promoted0);
    [#"../02_std.rs" 9 29 9 31] _8 <- ([#"../02_std.rs" 9 29 9 31] _12);
    [#"../02_std.rs" 9 13 9 32] _5 <- ([#"../02_std.rs" 9 13 9 32] binary_search0 ([#"../02_std.rs" 9 13 9 32] s) ([#"../02_std.rs" 9 29 9 31] _8));
    goto BB1
  }
  BB1 {
    [#"../02_std.rs" 9 13 9 41] ix <- ([#"../02_std.rs" 9 13 9 41] unwrap0 _5);
    _5 <- any Core_Result_Result_Type.t_result usize usize;
    goto BB2
  }
  BB2 {
    assert { [@expl:assertion] [#"../02_std.rs" 11 20 11 27] UIntSize.to_int ix < 5 };
    [#"../02_std.rs" 12 4 12 6] _0 <- ([#"../02_std.rs" 12 4 12 6] ix);
    return _0
  }
  
end
