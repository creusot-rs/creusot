
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../../creusot-contracts/src/model.rs" 31 8 31 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Seq_Impl0_SortedRange_Stub
  type t
  use seq.Seq
  use prelude.Int
  predicate sorted_range (self : Seq.seq t) (l : int) (u : int)
end
module CreusotContracts_Logic_Seq_Impl0_SortedRange_Interface
  type t
  use seq.Seq
  use prelude.Int
  predicate sorted_range (self : Seq.seq t) (l : int) (u : int)
  val sorted_range (self : Seq.seq t) (l : int) (u : int) : bool
    ensures { result = sorted_range self l u }
    
end
module CreusotContracts_Logic_Seq_Impl0_SortedRange
  type t
  use seq.Seq
  use prelude.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = t
  predicate sorted_range (self : Seq.seq t) (l : int) (u : int) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 132 8 134 9] forall j : int . forall i : int . l <= i /\ i <= j /\ j < u -> LeLog0.le_log (Seq.get self i) (Seq.get self j)
  val sorted_range (self : Seq.seq t) (l : int) (u : int) : bool
    ensures { result = sorted_range self l u }
    
end
module CreusotContracts_Logic_Seq_Impl0_Sorted_Stub
  type t
  use seq.Seq
  predicate sorted (self : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_Sorted_Interface
  type t
  use seq.Seq
  predicate sorted (self : Seq.seq t)
  val sorted (self : Seq.seq t) : bool
    ensures { result = sorted self }
    
end
module CreusotContracts_Logic_Seq_Impl0_Sorted
  type t
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_SortedRange_Stub as SortedRange0 with
    type t = t
  predicate sorted (self : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/logic/seq.rs" 143 8 143 40] SortedRange0.sorted_range self 0 (Seq.length self)
  val sorted (self : Seq.seq t) : bool
    ensures { result = sorted self }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length (deep_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : slice t) : Seq.seq DeepModelTy0.deepModelTy
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : slice t . ([#"../../../../../creusot-contracts/src/std/slice.rs" 32 4 32 95] forall i : int . 0 <= i /\ i < Seq.length (deep_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"../../../../../creusot-contracts/src/std/slice.rs" 31 14 31 41] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"../../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module Core_Slice_Impl0_BinarySearch_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel3 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel2 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl1_DeepModel_Stub as DeepModel1 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Logic_Seq_Impl0_Sorted_Stub as Sorted0 with
    type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = slice t,
    type DeepModelTy0.deepModelTy = Seq.seq DeepModelTy0.deepModelTy
  val binary_search (self : slice t) (x : t) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../../../../../creusot-contracts/src/std/slice.rs" 232 0 325 1] Sorted0.sorted (DeepModel0.deep_model self)}
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 295 8 295 118] forall i : usize . result = Core_Result_Result_Type.C_Ok i -> UIntSize.to_int i < Seq.length (ShallowModel0.shallow_model self) /\ Seq.get (DeepModel1.deep_model self) (UIntSize.to_int i) = DeepModel2.deep_model x }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 296 8 297 96] forall i : usize . result = Core_Result_Result_Type.C_Err i -> UIntSize.to_int i <= Seq.length (ShallowModel0.shallow_model self) /\ (forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (DeepModel0.deep_model self) j <> DeepModel2.deep_model x) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 298 8 299 78] forall i : usize . result = Core_Result_Result_Type.C_Err i -> (forall j : usize . j < i -> LtLog0.lt_log (Seq.get (DeepModel0.deep_model self) (UIntSize.to_int j)) (DeepModel2.deep_model x)) }
    ensures { [#"../../../../../creusot-contracts/src/std/slice.rs" 300 8 301 99] forall i : usize . result = Core_Result_Result_Type.C_Err i -> (forall j : usize . i <= j /\ UIntSize.to_int j < Seq.length (ShallowModel0.shallow_model self) -> LtLog0.lt_log (DeepModel2.deep_model x) (Seq.get (DeepModel0.deep_model self) (UIntSize.to_int j))) }
    
end
module Core_Result_Impl0_Unwrap_Interface
  type t
  type e
  use Core_Result_Result_Type as Core_Result_Result_Type
  val unwrap (self : Core_Result_Result_Type.t_result t e) : t
    requires {[#"../../../../../creusot-contracts/src/std/result.rs" 46 16 46 55] exists t : t . self = Core_Result_Result_Type.C_Ok t}
    ensures { [#"../../../../../creusot-contracts/src/std/result.rs" 18 0 119 1] Core_Result_Result_Type.C_Ok result = self }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Stub
  use prelude.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LtLog_Interface
  use prelude.Int
  predicate lt_log (self : int) (_2' : int)
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LtLog
  use prelude.Int
  use int.Int
  predicate lt_log (self : int) (_2' : int) =
    Int.(<) self _2'
  val lt_log (self : int) (_2' : int) : bool
    ensures { result = lt_log self _2' }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Stub
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
end
module CreusotContracts_Std1_Num_Impl7_DeepModel_Interface
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl7_DeepModel
  use prelude.Int
  use prelude.UInt32
  function deep_model (self : uint32) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  val deep_model (self : uint32) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Stub
  use prelude.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Interface
  use prelude.Int
  predicate le_log (self : int) (_2' : int)
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Logic_Ord_Impl2_LeLog
  use prelude.Int
  use int.Int
  predicate le_log (self : int) (_2' : int) =
    Int.(<=) self _2'
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module C02Std_BinarySearch_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use prelude.UIntSize
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = uint32,
    type s = slice uint32
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32
  val binary_search [#"../02_std.rs" 8 0 8 40] (s : slice uint32) : usize
    requires {[#"../02_std.rs" 6 0 6 64] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model s) -> UInt32.to_int (IndexLogic0.index_logic s i) = i}
    requires {[#"../02_std.rs" 7 11 7 24] Seq.length (ShallowModel0.shallow_model s) = 5}
    
end
module C02Std_BinarySearch
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Logic_Ord_Impl2_LeLog as LeLog0
  use prelude.Int
  clone CreusotContracts_Logic_Seq_Impl0_SortedRange as SortedRange0 with
    type t = int,
    predicate LeLog0.le_log = LeLog0.le_log
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Num_Impl7_DeepModel as DeepModel3
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = uint32,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = uint32,
    type s = slice uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ord_Impl2_LtLog as LtLog0
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = uint32,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Std1_Slice_Impl1_DeepModel_Interface as DeepModel1 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    type DeepModelTy0.deepModelTy = int,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Sorted as Sorted0 with
    type t = int,
    predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = slice uint32,
    type DeepModelTy0.deepModelTy = Seq.seq int,
    function DeepModel0.deep_model = DeepModel1.deep_model
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone Core_Result_Impl0_Unwrap_Interface as Unwrap0 with
    type t = usize,
    type e = usize
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = slice uint32,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Core_Slice_Impl0_BinarySearch_Interface as BinarySearch0 with
    type t = uint32,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate Sorted0.sorted = Sorted0.sorted,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    function DeepModel2.deep_model = DeepModel2.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    type DeepModelTy0.deepModelTy = int,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function DeepModel3.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = uint32,
    type s = slice uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let constant promoted0 [#"../02_std.rs" 8 0 8 40]  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../02_std.rs" 9 30 9 31] (2 : uint32) in let _0 = _1 in _0
  let rec cfg binary_search [#"../02_std.rs" 8 0 8 40] [@cfg:stackify] [@cfg:subregion_analysis] (s : slice uint32) : usize
    requires {[#"../02_std.rs" 6 0 6 64] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model s) -> UInt32.to_int (IndexLogic0.index_logic s i) = i}
    requires {[#"../02_std.rs" 7 11 7 24] Seq.length (ShallowModel0.shallow_model s) = 5}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var s_1 : slice uint32;
  var ix_4 : usize;
  var _5 : Core_Result_Result_Type.t_result usize usize;
  var _6 : slice uint32;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : uint32;
  var _10 : ();
  var _12 : uint32;
  {
    s_1 <- s;
    goto BB0
  }
  BB0 {
    _6 <- s_1;
    _12 <- ([#"../02_std.rs" 9 29 9 31] promoted0);
    _8 <- _12;
    _7 <- _8;
    _5 <- ([#"../02_std.rs" 9 13 9 32] BinarySearch0.binary_search _6 _7);
    goto BB1
  }
  BB1 {
    ix_4 <- ([#"../02_std.rs" 9 13 9 41] Unwrap0.unwrap _5);
    goto BB2
  }
  BB2 {
    assert { [@expl:assertion] [#"../02_std.rs" 11 20 11 27] UIntSize.to_int ix_4 < 5 };
    _10 <- ();
    _0 <- ix_4;
    return _0
  }
  
end
