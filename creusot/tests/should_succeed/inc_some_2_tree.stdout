module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type incsome2tree_tree  = 
    | IncSome2Tree_Tree_Node (incsome2tree_tree) uint32 (incsome2tree_tree)
    | IncSome2Tree_Tree_Leaf
    
end
module IncSome2Tree_Impl1_Sum_Interface
  use Type
  use mach.int.Int
  function sum (self : Type.incsome2tree_tree) : int
end
module IncSome2Tree_Impl1_Sum
  use Type
  use mach.int.Int
  use mach.int.Int32
  function sum (self : Type.incsome2tree_tree) : int = 
    match (self) with
      | Type.IncSome2Tree_Tree_Node tl a tr -> sum tl + a + sum tr
      | Type.IncSome2Tree_Tree_Leaf -> 0
      end
end
module IncSome2Tree_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
end
module IncSome2Tree_Impl1_LemmaSumNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
  val lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
    ensures { Sum0.sum self >= 0 }
    ensures { result = lemma_sum_nonneg self }
    
  axiom spec : forall self : Type.incsome2tree_tree . Sum0.sum self >= 0
  axiom def : forall self : Type.incsome2tree_tree . lemma_sum_nonneg self = match (self) with
    | Type.IncSome2Tree_Tree_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
    | Type.IncSome2Tree_Tree_Leaf -> ()
    end
end
module IncSome2Tree_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum as Sum0
  let rec lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
    ensures { Sum0.sum self >= 0 }
    variant {self}
    
   = 
    match (self) with
      | Type.IncSome2Tree_Tree_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | Type.IncSome2Tree_Tree_Leaf -> ()
      end
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module IncSome2Tree_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt32
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  val sum_x (self : Type.incsome2tree_tree) : uint32
    requires {Sum0.sum self <= 1000000}
    ensures { result = Sum0.sum self }
    
end
module IncSome2Tree_Impl1_SumX
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt32
  clone IncSome2Tree_Impl1_Sum as Sum0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = isize
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = Type.incsome2tree_tree
  clone IncSome2Tree_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  let rec cfg sum_x (self : Type.incsome2tree_tree) : uint32
    requires {Sum0.sum self <= 1000000}
    ensures { result = Sum0.sum self }
    
   = 
  var _0 : uint32;
  var self_1 : Type.incsome2tree_tree;
  var _2 : isize;
  var tl_3 : Type.incsome2tree_tree;
  var a_4 : uint32;
  var tr_5 : Type.incsome2tree_tree;
  var _6 : ();
  var _7 : Type.incsome2tree_tree;
  var _8 : ();
  var _9 : Type.incsome2tree_tree;
  var _10 : uint32;
  var _11 : uint32;
  var _12 : Type.incsome2tree_tree;
  var _13 : uint32;
  var _14 : uint32;
  var _15 : Type.incsome2tree_tree;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IncSome2Tree_Tree_Node _ _ _ -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve1.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    _0 <- (0 : uint32);
    goto BB9
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    absurd
  }
  BB4 {
    tl_3 <- (let Type.IncSome2Tree_Tree_Node a _ _ = self_1 in a);
    a_4 <- (let Type.IncSome2Tree_Tree_Node _ a _ = self_1 in a);
    tr_5 <- (let Type.IncSome2Tree_Tree_Node _ _ a = self_1 in a);
    assume { Resolve0.resolve self_1 };
    _7 <- tl_3;
    _6 <- LemmaSumNonneg0.lemma_sum_nonneg _7;
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _7 };
    _9 <- tr_5;
    _8 <- LemmaSumNonneg0.lemma_sum_nonneg _9;
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve _9 };
    _12 <- tl_3;
    assume { Resolve2.resolve tl_3 };
    _11 <- sum_x _12;
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _13 };
    _13 <- a_4;
    assume { Resolve4.resolve a_4 };
    _10 <- _11 + _13;
    _15 <- tr_5;
    assume { Resolve2.resolve tr_5 };
    _14 <- sum_x _15;
    goto BB8
  }
  BB8 {
    _0 <- _10 + _14;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Builtins_Model_Model
  type self   
  type modelty   
  function model (self : self) : modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Int_Impl3_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int
end
module CreusotContracts_Builtins_Int_Impl3_Model
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int = 
    self
end
module CreusotContracts_Builtins_Int_Impl3_Interface
  use mach.int.Int
  use mach.int.UInt32
  clone export CreusotContracts_Builtins_Int_Impl3_Model_Interface
  type modelty  = 
    int
  clone export CreusotContracts_Builtins_Model_Model with type self = uint32, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Int_Impl3
  use mach.int.Int
  use mach.int.UInt32
  clone export CreusotContracts_Builtins_Int_Impl3_Model
  type modelty  = 
    int
  clone export CreusotContracts_Builtins_Model_Model with type self = uint32, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Rand_Random_Interface
  type t   
  val random () : t
end
module Rand_Random
  type t   
  val random () : t
end
module IncSome2Tree_Impl1_TakeSomeRest_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Int_Impl3_Interface as Model1
  clone CreusotContracts_Builtins_Model_Impl1_Model_Interface as Model0 with type t = uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  val take_some_rest (self : borrowed (Type.incsome2tree_tree)) : (borrowed uint32, borrowed (Type.incsome2tree_tree))
    ensures { Sum0.sum ( * (let (_, a) = result in a)) <= Sum0.sum ( * self) }
    ensures { Model0.model (let (a, _) = result in a) <= Sum0.sum ( * self) }
    ensures { Sum0.sum ( ^ self) - Sum0.sum ( * self) =  ^ (let (a, _) = result in a) + Sum0.sum ( ^ (let (_, a) = result in a)) - Model0.model (let (a, _) = result in a) - Sum0.sum ( * (let (_, a) = result in a)) }
    
end
module IncSome2Tree_Impl1_TakeSomeRest
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Int_Impl3 as Model1
  clone CreusotContracts_Builtins_Model_Impl1_Model as Model0 with type t = uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone IncSome2Tree_Impl1_Sum as Sum0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve6 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve5 with type t = uint32
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = bool
  clone Rand_Random_Interface as Random0 with type t = bool
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = isize
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve0 with type t = Type.incsome2tree_tree
  clone IncSome2Tree_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  let rec cfg take_some_rest (self : borrowed (Type.incsome2tree_tree)) : (borrowed uint32, borrowed (Type.incsome2tree_tree))
    ensures { Sum0.sum ( * (let (_, a) = result in a)) <= Sum0.sum ( * self) }
    ensures { Model0.model (let (a, _) = result in a) <= Sum0.sum ( * self) }
    ensures { Sum0.sum ( ^ self) - Sum0.sum ( * self) =  ^ (let (a, _) = result in a) + Sum0.sum ( ^ (let (_, a) = result in a)) - Model0.model (let (a, _) = result in a) - Sum0.sum ( * (let (_, a) = result in a)) }
    
   = 
  var _0 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var self_1 : borrowed (Type.incsome2tree_tree);
  var _2 : isize;
  var mtl_3 : borrowed (Type.incsome2tree_tree);
  var ma_4 : borrowed uint32;
  var mtr_5 : borrowed (Type.incsome2tree_tree);
  var _6 : ();
  var _7 : Type.incsome2tree_tree;
  var _8 : ();
  var _9 : Type.incsome2tree_tree;
  var _10 : bool;
  var _11 : borrowed uint32;
  var _12 : borrowed (Type.incsome2tree_tree);
  var _13 : borrowed (Type.incsome2tree_tree);
  var _14 : bool;
  var _15 : borrowed (Type.incsome2tree_tree);
  var _16 : bool;
  var _17 : borrowed (Type.incsome2tree_tree);
  var _18 : borrowed (Type.incsome2tree_tree);
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Type.IncSome2Tree_Tree_Node _ _ _ -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve1.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    goto BB21
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    absurd
  }
  BB4 {
    mtl_3 <- borrow_mut (let Type.IncSome2Tree_Tree_Node a _ _ =  * self_1 in a);
    self_1 <- { self_1 with current = (let Type.IncSome2Tree_Tree_Node a b c =  * self_1 in Type.IncSome2Tree_Tree_Node ( ^ mtl_3) b c) };
    ma_4 <- borrow_mut (let Type.IncSome2Tree_Tree_Node _ a _ =  * self_1 in a);
    self_1 <- { self_1 with current = (let Type.IncSome2Tree_Tree_Node a b c =  * self_1 in Type.IncSome2Tree_Tree_Node a ( ^ ma_4) c) };
    mtr_5 <- borrow_mut (let Type.IncSome2Tree_Tree_Node _ _ a =  * self_1 in a);
    self_1 <- { self_1 with current = (let Type.IncSome2Tree_Tree_Node a b c =  * self_1 in Type.IncSome2Tree_Tree_Node a b ( ^ mtr_5)) };
    assume { Resolve0.resolve self_1 };
    _7 <-  * mtl_3;
    _6 <- LemmaSumNonneg0.lemma_sum_nonneg _7;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _7 };
    _9 <-  * mtr_5;
    _8 <- LemmaSumNonneg0.lemma_sum_nonneg _9;
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve _9 };
    _10 <- Random0.random ();
    goto BB7
  }
  BB7 {
    switch (_10)
      | False -> goto BB13
      | True -> goto BB8
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve4.resolve _10 };
    _11 <- borrow_mut ( * ma_4);
    ma_4 <- { ma_4 with current = ( ^ _11) };
    assume { Resolve5.resolve ma_4 };
    _14 <- Random0.random ();
    goto BB9
  }
  BB9 {
    switch (_14)
      | False -> goto BB11
      | True -> goto BB10
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve6.resolve mtr_5 };
    assume { Resolve4.resolve _14 };
    _15 <- borrow_mut ( * mtl_3);
    mtl_3 <- { mtl_3 with current = ( ^ _15) };
    assume { Resolve6.resolve mtl_3 };
    _13 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _13) };
    assume { Resolve0.resolve _15 };
    goto BB12
  }
  BB11 {
    assume { Resolve6.resolve mtl_3 };
    assume { Resolve4.resolve _14 };
    _13 <- borrow_mut ( * mtr_5);
    mtr_5 <- { mtr_5 with current = ( ^ _13) };
    assume { Resolve6.resolve mtr_5 };
    goto BB12
  }
  BB12 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    assume { Resolve0.resolve _13 };
    _0 <- (_11, _12);
    goto BB20
  }
  BB13 {
    assume { Resolve5.resolve ma_4 };
    assume { Resolve4.resolve _10 };
    _16 <- Random0.random ();
    goto BB14
  }
  BB14 {
    switch (_16)
      | False -> goto BB17
      | True -> goto BB15
      | _ -> goto BB15
      end
  }
  BB15 {
    assume { Resolve6.resolve mtr_5 };
    assume { Resolve4.resolve _16 };
    _17 <- borrow_mut ( * mtl_3);
    mtl_3 <- { mtl_3 with current = ( ^ _17) };
    assume { Resolve6.resolve mtl_3 };
    _0 <- take_some_rest _17;
    goto BB16
  }
  BB16 {
    goto BB19
  }
  BB17 {
    assume { Resolve6.resolve mtl_3 };
    assume { Resolve4.resolve _16 };
    _18 <- borrow_mut ( * mtr_5);
    mtr_5 <- { mtr_5 with current = ( ^ _18) };
    assume { Resolve6.resolve mtr_5 };
    _0 <- take_some_rest _18;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  BB21 {
    goto BB22
  }
  BB22 {
    _20 <- ();
    assume { Resolve2.resolve _20 };
    goto BB21
  }
  
end
module CreusotContracts_Builtins_Resolve_Impl0_Resolve_Interface
  type t1   
  type t2   
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Builtins_Resolve_Impl0_Resolve
  type t1   
  type t2   
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = t2
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module Core_Panicking_Panic_Interface
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module CreusotContracts_Builtins_Resolve_Impl1_Interface
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module IncSome2Tree_IncSome2Tree_Interface
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  val inc_some_2_tree (t : Type.incsome2tree_tree) (j : uint32) (k : uint32) : ()
    requires {Sum0.sum t + j + k <= 1000000}
    
end
module IncSome2Tree_IncSome2Tree
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSome2Tree_Impl1_Sum as Sum0
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve6 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve5 with type self = ()
  clone Core_Panicking_Panic_Interface as Panic0
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = bool
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve8 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve7 with type t = uint32
  clone CreusotContracts_Builtins_Resolve_Impl0_Resolve as Resolve2 with type t1 = borrowed uint32,
  type t2 = borrowed (Type.incsome2tree_tree), predicate Resolve0.resolve = Resolve7.resolve,
  predicate Resolve1.resolve = Resolve8.resolve
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve1 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone CreusotContracts_Builtins_Int_Impl3 as Model1
  clone CreusotContracts_Builtins_Model_Impl1_Model as Model0 with type t = uint32,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone IncSome2Tree_Impl1_TakeSomeRest_Interface as TakeSomeRest0 with function Sum0.sum = Sum0.sum,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone IncSome2Tree_Impl1_SumX_Interface as SumX0 with function Sum0.sum = Sum0.sum
  let rec cfg inc_some_2_tree (t : Type.incsome2tree_tree) (j : uint32) (k : uint32) : ()
    requires {Sum0.sum t + j + k <= 1000000}
    
   = 
  var _0 : ();
  var t_1 : Type.incsome2tree_tree;
  var j_2 : uint32;
  var k_3 : uint32;
  var sum0_4 : uint32;
  var _5 : Type.incsome2tree_tree;
  var ma_6 : borrowed uint32;
  var mt_7 : borrowed (Type.incsome2tree_tree);
  var _8 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var _9 : borrowed (Type.incsome2tree_tree);
  var mb_10 : borrowed uint32;
  var _11 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var _12 : borrowed (Type.incsome2tree_tree);
  var _13 : uint32;
  var _14 : uint32;
  var _15 : ();
  var _16 : bool;
  var _17 : bool;
  var _18 : uint32;
  var _19 : Type.incsome2tree_tree;
  var _20 : uint32;
  var _21 : uint32;
  var _22 : uint32;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : ();
  {
    t_1 <- t;
    j_2 <- j;
    k_3 <- k;
    goto BB0
  }
  BB0 {
    _5 <- t_1;
    sum0_4 <- SumX0.sum_x _5;
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut t_1;
    t_1 <-  ^ _9;
    _8 <- TakeSomeRest0.take_some_rest _9;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve ma_6 };
    ma_6 <- (let (a, _) = _8 in a);
    assume { Resolve1.resolve mt_7 };
    mt_7 <- (let (_, a) = _8 in a);
    assume { Resolve2.resolve _8 };
    _12 <- borrow_mut ( * mt_7);
    mt_7 <- { mt_7 with current = ( ^ _12) };
    assume { Resolve1.resolve mt_7 };
    _11 <- TakeSomeRest0.take_some_rest _12;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve mb_10 };
    mb_10 <- (let (a, _) = _11 in a);
    assume { Resolve2.resolve _11 };
    assume { Resolve3.resolve _13 };
    _13 <- j_2;
    ma_6 <- { ma_6 with current = ( * ma_6 + _13) };
    assume { Resolve0.resolve ma_6 };
    assume { Resolve3.resolve _13 };
    assume { Resolve3.resolve _14 };
    _14 <- k_3;
    mb_10 <- { mb_10 with current = ( * mb_10 + _14) };
    assume { Resolve0.resolve mb_10 };
    assume { Resolve3.resolve _14 };
    _19 <- t_1;
    _18 <- SumX0.sum_x _19;
    goto BB4
  }
  BB4 {
    assume { Resolve3.resolve _22 };
    _22 <- sum0_4;
    assume { Resolve3.resolve sum0_4 };
    assume { Resolve3.resolve _23 };
    _23 <- j_2;
    assume { Resolve3.resolve j_2 };
    _21 <- _22 + _23;
    assume { Resolve3.resolve _24 };
    _24 <- k_3;
    assume { Resolve3.resolve k_3 };
    _20 <- _21 + _24;
    _17 <- _18 = _20;
    _16 <- not _17;
    switch (_16)
      | False -> goto BB6
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve4.resolve _16 };
    absurd
  }
  BB6 {
    assume { Resolve4.resolve _16 };
    _15 <- ();
    assume { Resolve5.resolve _15 };
    _0 <- ();
    goto BB7
  }
  BB7 {
    assume { Resolve6.resolve t_1 };
    return _0
  }
  
end
module CreusotContracts_WellFounded
  type self   
end
module IncSome2Tree_Impl0_Interface
  use Type
  clone export CreusotContracts_WellFounded with type self = Type.incsome2tree_tree
end
module IncSome2Tree_Impl0
  use Type
  clone export CreusotContracts_WellFounded with type self = Type.incsome2tree_tree
end
