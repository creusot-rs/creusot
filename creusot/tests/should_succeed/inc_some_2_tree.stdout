module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type incsome2tree_tree  = 
    | IncSome2Tree_Tree_Node (incsome2tree_tree) uint32 (incsome2tree_tree)
    | IncSome2Tree_Tree_Leaf
    
  function incsome2tree_tree_Node_0 (self : incsome2tree_tree) : incsome2tree_tree
  val incsome2tree_tree_Node_0 (self : incsome2tree_tree) : incsome2tree_tree
    ensures { result = incsome2tree_tree_Node_0 self }
    
  axiom incsome2tree_tree_Node_0_acc : forall a : incsome2tree_tree, b : uint32, c : incsome2tree_tree . incsome2tree_tree_Node_0 (IncSome2Tree_Tree_Node a b c : incsome2tree_tree) = a
  function incsome2tree_tree_Node_1 (self : incsome2tree_tree) : uint32
  val incsome2tree_tree_Node_1 (self : incsome2tree_tree) : uint32
    ensures { result = incsome2tree_tree_Node_1 self }
    
  axiom incsome2tree_tree_Node_1_acc : forall a : incsome2tree_tree, b : uint32, c : incsome2tree_tree . incsome2tree_tree_Node_1 (IncSome2Tree_Tree_Node a b c : incsome2tree_tree) = b
  function incsome2tree_tree_Node_2 (self : incsome2tree_tree) : incsome2tree_tree
  val incsome2tree_tree_Node_2 (self : incsome2tree_tree) : incsome2tree_tree
    ensures { result = incsome2tree_tree_Node_2 self }
    
  axiom incsome2tree_tree_Node_2_acc : forall a : incsome2tree_tree, b : uint32, c : incsome2tree_tree . incsome2tree_tree_Node_2 (IncSome2Tree_Tree_Node a b c : incsome2tree_tree) = c
end
module IncSome2Tree_Impl1_Sum_Interface
  use Type
  use mach.int.Int
  function sum (self : Type.incsome2tree_tree) : int
end
module IncSome2Tree_Impl1_Sum
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  function sum (self : Type.incsome2tree_tree) : int = 
    match (self) with
      | Type.IncSome2Tree_Tree_Node tl a tr -> sum tl + UInt32.to_int a + sum tr
      | Type.IncSome2Tree_Tree_Leaf -> 0
      end
end
module IncSome2Tree_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
end
module IncSome2Tree_Impl1_LemmaSumNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
  axiom def : forall self : Type.incsome2tree_tree . lemma_sum_nonneg self = match (self) with
    | Type.IncSome2Tree_Tree_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
    | Type.IncSome2Tree_Tree_Leaf -> ()
    end
  axiom lemma_sum_nonneg_spec : forall self : Type.incsome2tree_tree . Sum0.sum self >= 0
end
module IncSome2Tree_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum as Sum0
  let rec ghost function lemma_sum_nonneg (self : Type.incsome2tree_tree) : ()
    ensures { Sum0.sum self >= 0 }
    variant {self}
    
   = 
    match (self) with
      | Type.IncSome2Tree_Tree_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | Type.IncSome2Tree_Tree_Leaf -> ()
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module IncSome2Tree_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  val sum_x [@cfg:stackify] (self : Type.incsome2tree_tree) : uint32
    requires {Sum0.sum self <= 1000000}
    ensures { UInt32.to_int result = Sum0.sum self }
    
end
module IncSome2Tree_Impl1_SumX
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_Impl1_Sum as Sum0
  clone IncSome2Tree_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.incsome2tree_tree
  let rec cfg sum_x [@cfg:stackify] (self : Type.incsome2tree_tree) : uint32
    requires {Sum0.sum self <= 1000000}
    ensures { UInt32.to_int result = Sum0.sum self }
    
   = 
  var _0 : uint32;
  var self_1 : Type.incsome2tree_tree;
  var _2 : isize;
  var tl_3 : Type.incsome2tree_tree;
  var a_4 : uint32;
  var tr_5 : Type.incsome2tree_tree;
  var _6 : ();
  var _7 : uint32;
  var _8 : uint32;
  var _9 : Type.incsome2tree_tree;
  var _10 : uint32;
  var _11 : uint32;
  var _12 : Type.incsome2tree_tree;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IncSome2Tree_Tree_Node _ _ _ -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- (0 : uint32);
    goto BB7
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB4 {
    tl_3 <- Type.incsome2tree_tree_Node_0 self_1;
    a_4 <- Type.incsome2tree_tree_Node_1 self_1;
    tr_5 <- Type.incsome2tree_tree_Node_2 self_1;
    assume { Resolve0.resolve self_1 };
    assert { let _ = LemmaSumNonneg0.lemma_sum_nonneg tl_3 in let _ = LemmaSumNonneg0.lemma_sum_nonneg tr_5 in true };
    _6 <- ();
    assume { Resolve1.resolve _6 };
    _9 <- tl_3;
    assume { Resolve2.resolve tl_3 };
    _8 <- sum_x _9;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _10 };
    _10 <- a_4;
    assume { Resolve4.resolve a_4 };
    _7 <- _8 + _10;
    _12 <- tr_5;
    assume { Resolve2.resolve tr_5 };
    _11 <- sum_x _12;
    goto BB6
  }
  BB6 {
    _0 <- _7 + _11;
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Int_Impl3_ModelTy
  use mach.int.Int
  type modelTy  = 
    int
end
module CreusotContracts_Logic_Int_Impl3_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl3_Model
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int = 
    UInt32.to_int self
end
module CreusotContracts_Logic_Int_Impl3
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl3_Model as Model0
  clone CreusotContracts_Logic_Int_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = uint32, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Rand_Random_Interface
  type t   
  val random [@cfg:stackify] () : t
    requires {false}
    
end
module Rand_Random
  type t   
  val random [@cfg:stackify] () : t
    requires {false}
    
end
module IncSome2Tree_Impl1_TakeSomeRest_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Int_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  val take_some_rest [@cfg:stackify] (self : borrowed (Type.incsome2tree_tree)) : (borrowed uint32, borrowed (Type.incsome2tree_tree))
    ensures { Sum0.sum ( * (let (_, a) = result in a)) <= Sum0.sum ( * self) }
    ensures { Model0.model (let (a, _) = result in a) <= Sum0.sum ( * self) }
    ensures { Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + Sum0.sum ( ^ (let (_, a) = result in a)) - Model0.model (let (a, _) = result in a) - Sum0.sum ( * (let (_, a) = result in a)) }
    
end
module IncSome2Tree_Impl1_TakeSomeRest
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Int_Impl3_Model as Model1
  clone CreusotContracts_Logic_Int_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone IncSome2Tree_Impl1_Sum as Sum0
  clone IncSome2Tree_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = uint32
  clone Rand_Random_Interface as Random0 with type t = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.incsome2tree_tree
  let rec cfg take_some_rest [@cfg:stackify] (self : borrowed (Type.incsome2tree_tree)) : (borrowed uint32, borrowed (Type.incsome2tree_tree))
    ensures { Sum0.sum ( * (let (_, a) = result in a)) <= Sum0.sum ( * self) }
    ensures { Model0.model (let (a, _) = result in a) <= Sum0.sum ( * self) }
    ensures { Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + Sum0.sum ( ^ (let (_, a) = result in a)) - Model0.model (let (a, _) = result in a) - Sum0.sum ( * (let (_, a) = result in a)) }
    
   = 
  var _0 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var self_1 : borrowed (Type.incsome2tree_tree);
  var _2 : isize;
  var mtl_3 : borrowed (Type.incsome2tree_tree);
  var ma_4 : borrowed uint32;
  var mtr_5 : borrowed (Type.incsome2tree_tree);
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed uint32;
  var _9 : borrowed (Type.incsome2tree_tree);
  var _10 : borrowed (Type.incsome2tree_tree);
  var _11 : bool;
  var _12 : borrowed (Type.incsome2tree_tree);
  var _13 : bool;
  var _14 : borrowed (Type.incsome2tree_tree);
  var _15 : borrowed (Type.incsome2tree_tree);
  var _16 : ();
  var _17 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Type.IncSome2Tree_Tree_Node _ _ _ -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    goto BB19
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB4 {
    mtl_3 <- borrow_mut (Type.incsome2tree_tree_Node_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.IncSome2Tree_Tree_Node a b c =  * self_1 in Type.IncSome2Tree_Tree_Node ( ^ mtl_3) b c) };
    ma_4 <- borrow_mut (Type.incsome2tree_tree_Node_1 ( * self_1));
    self_1 <- { self_1 with current = (let Type.IncSome2Tree_Tree_Node a b c =  * self_1 in Type.IncSome2Tree_Tree_Node a ( ^ ma_4) c) };
    mtr_5 <- borrow_mut (Type.incsome2tree_tree_Node_2 ( * self_1));
    self_1 <- { self_1 with current = (let Type.IncSome2Tree_Tree_Node a b c =  * self_1 in Type.IncSome2Tree_Tree_Node a b ( ^ mtr_5)) };
    assume { Resolve0.resolve self_1 };
    assert { let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * mtl_3) in let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * mtr_5) in true };
    _6 <- ();
    assume { Resolve1.resolve _6 };
    _7 <- Random0.random ();
    goto BB5
  }
  BB5 {
    switch (_7)
      | False -> goto BB11
      | _ -> goto BB6
      end
  }
  BB6 {
    _8 <- borrow_mut ( * ma_4);
    ma_4 <- { ma_4 with current = ( ^ _8) };
    assume { Resolve2.resolve ma_4 };
    _11 <- Random0.random ();
    goto BB7
  }
  BB7 {
    switch (_11)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve3.resolve mtr_5 };
    _12 <- borrow_mut ( * mtl_3);
    mtl_3 <- { mtl_3 with current = ( ^ _12) };
    assume { Resolve3.resolve mtl_3 };
    _10 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _10) };
    assume { Resolve0.resolve _12 };
    goto BB10
  }
  BB9 {
    assume { Resolve3.resolve mtl_3 };
    _10 <- borrow_mut ( * mtr_5);
    mtr_5 <- { mtr_5 with current = ( ^ _10) };
    assume { Resolve3.resolve mtr_5 };
    goto BB10
  }
  BB10 {
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    assume { Resolve0.resolve _10 };
    _0 <- (_8, _9);
    goto BB18
  }
  BB11 {
    assume { Resolve2.resolve ma_4 };
    _13 <- Random0.random ();
    goto BB12
  }
  BB12 {
    switch (_13)
      | False -> goto BB15
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve3.resolve mtr_5 };
    _14 <- borrow_mut ( * mtl_3);
    mtl_3 <- { mtl_3 with current = ( ^ _14) };
    _0 <- take_some_rest _14;
    goto BB14
  }
  BB14 {
    assume { Resolve3.resolve mtl_3 };
    goto BB17
  }
  BB15 {
    assume { Resolve3.resolve mtl_3 };
    _15 <- borrow_mut ( * mtr_5);
    mtr_5 <- { mtr_5 with current = ( ^ _15) };
    _0 <- take_some_rest _15;
    goto BB16
  }
  BB16 {
    assume { Resolve3.resolve mtr_5 };
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  BB19 {
    goto BB20
  }
  BB20 {
    _17 <- ();
    assume { Resolve1.resolve _17 };
    goto BB19
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1   
  type t2   
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1   
  type t2   
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1   
  type t2   
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (t1, t2),
  predicate resolve = Resolve0.resolve
end
module IncSome2Tree_IncSome2Tree_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone IncSome2Tree_Impl1_Sum_Interface as Sum0
  val inc_some_2_tree [@cfg:stackify] (t : Type.incsome2tree_tree) (j : uint32) (k : uint32) : ()
    requires {Sum0.sum t + UInt32.to_int j + UInt32.to_int k <= 1000000}
    
end
module IncSome2Tree_IncSome2Tree
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone IncSome2Tree_Impl1_Sum as Sum0
  use prelude.Prelude
  clone CreusotContracts_Logic_Int_Impl3_Model as Model1
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = borrowed uint32,
  type t2 = borrowed (Type.incsome2tree_tree), predicate Resolve0.resolve = Resolve0.resolve,
  predicate Resolve1.resolve = Resolve1.resolve
  clone CreusotContracts_Logic_Int_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone IncSome2Tree_Impl1_TakeSomeRest_Interface as TakeSomeRest0 with function Sum0.sum = Sum0.sum,
  function Model0.model = Model0.model
  clone IncSome2Tree_Impl1_SumX_Interface as SumX0 with function Sum0.sum = Sum0.sum
  let rec cfg inc_some_2_tree [@cfg:stackify] (t : Type.incsome2tree_tree) (j : uint32) (k : uint32) : ()
    requires {Sum0.sum t + UInt32.to_int j + UInt32.to_int k <= 1000000}
    
   = 
  var _0 : ();
  var t_1 : Type.incsome2tree_tree;
  var j_2 : uint32;
  var k_3 : uint32;
  var sum0_4 : uint32;
  var _5 : Type.incsome2tree_tree;
  var ma_6 : borrowed uint32;
  var mt_7 : borrowed (Type.incsome2tree_tree);
  var _8 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var _9 : borrowed (Type.incsome2tree_tree);
  var mb_10 : borrowed uint32;
  var _11 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var _12 : borrowed (Type.incsome2tree_tree);
  var _13 : uint32;
  var _14 : uint32;
  var _15 : ();
  var _16 : bool;
  var _17 : bool;
  var _18 : uint32;
  var _19 : Type.incsome2tree_tree;
  var _20 : uint32;
  var _21 : uint32;
  var _22 : uint32;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : ();
  {
    t_1 <- t;
    j_2 <- j;
    k_3 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- t_1;
    sum0_4 <- SumX0.sum_x _5;
    goto BB2
  }
  BB2 {
    _9 <- borrow_mut t_1;
    t_1 <-  ^ _9;
    _8 <- TakeSomeRest0.take_some_rest _9;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve ma_6 };
    ma_6 <- (let (a, _) = _8 in a);
    assume { Resolve1.resolve mt_7 };
    mt_7 <- (let (_, a) = _8 in a);
    assume { Resolve2.resolve _8 };
    _12 <- borrow_mut ( * mt_7);
    mt_7 <- { mt_7 with current = ( ^ _12) };
    _11 <- TakeSomeRest0.take_some_rest _12;
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve mt_7 };
    assume { Resolve0.resolve mb_10 };
    mb_10 <- (let (a, _) = _11 in a);
    assume { Resolve2.resolve _11 };
    assume { Resolve3.resolve _13 };
    _13 <- j_2;
    ma_6 <- { ma_6 with current = ( * ma_6 + _13) };
    assume { Resolve0.resolve ma_6 };
    assume { Resolve3.resolve _14 };
    _14 <- k_3;
    mb_10 <- { mb_10 with current = ( * mb_10 + _14) };
    assume { Resolve0.resolve mb_10 };
    _19 <- t_1;
    _18 <- SumX0.sum_x _19;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _22 };
    _22 <- sum0_4;
    assume { Resolve3.resolve sum0_4 };
    assume { Resolve3.resolve _23 };
    _23 <- j_2;
    assume { Resolve3.resolve j_2 };
    _21 <- _22 + _23;
    assume { Resolve3.resolve _24 };
    _24 <- k_3;
    assume { Resolve3.resolve k_3 };
    _20 <- _21 + _24;
    _17 <- _18 = _20;
    _16 <- not _17;
    switch (_16)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    absurd
  }
  BB7 {
    _15 <- ();
    assume { Resolve4.resolve _15 };
    _0 <- ();
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve t_1 };
    return _0
  }
  
end
module IncSome2Tree_Impl0
  
end
