module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type incsome2tree_tree  = 
    | IncSome2Tree_Tree_Node(incsome2tree_tree, uint32, incsome2tree_tree)
    | IncSome2Tree_Tree_Leaf
    
end
module IncSome2Tree_SumTree_Interface
  use mach.int.Int
  use Type
  function sum_tree (t : Type.incsome2tree_tree) : int
end
module IncSome2Tree_SumTree
  use mach.int.Int
  use Type
  use mach.int.Int32
  function sum_tree (t : Type.incsome2tree_tree) : int = 
    match (t) with
      | Type.IncSome2Tree_Tree_Node(tl, a, tr) -> sum_tree tl + UInt32.to_int a + sum_tree tr
      | Type.IncSome2Tree_Tree_Leaf -> Int32.to_int (0 : int32)
      end
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module IncSome2Tree_LemmaSumTreeNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_SumTree_Interface as SumTree0
  val lemma_sum_tree_nonneg (t : Type.incsome2tree_tree) : ()
    ensures { SumTree0.sum_tree t >= Int32.to_int (0 : int32) }
    
end
module IncSome2Tree_LemmaSumTreeNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_SumTree as SumTree0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.incsome2tree_tree
  let rec cfg lemma_sum_tree_nonneg (t : Type.incsome2tree_tree) : ()
    ensures { SumTree0.sum_tree t >= Int32.to_int (0 : int32) }
    
   = 
  var _0 : ();
  var t_1 : Type.incsome2tree_tree;
  var _2 : isize;
  var tl_3 : Type.incsome2tree_tree;
  var tr_4 : Type.incsome2tree_tree;
  var _5 : ();
  var _6 : Type.incsome2tree_tree;
  var _7 : ();
  var _8 : Type.incsome2tree_tree;
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    switch (t_1)
      | Type.IncSome2Tree_Tree_Node(_, _, _) -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve2.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve t_1 };
    assume { Resolve2.resolve _2 };
    _0 <- ();
    goto BB7
  }
  BB3 {
    assume { Resolve1.resolve t_1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB4 {
    tl_3 <- (let Type.IncSome2Tree_Tree_Node(a, _, _) = t_1 in a);
    tr_4 <- (let Type.IncSome2Tree_Tree_Node(_, _, a) = t_1 in a);
    assume { Resolve1.resolve t_1 };
    _6 <- tl_3;
    assume { Resolve3.resolve tl_3 };
    _5 <- lemma_sum_tree_nonneg _6;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _6 };
    _8 <- tr_4;
    assume { Resolve3.resolve tr_4 };
    _7 <- lemma_sum_tree_nonneg _8;
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve _8 };
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSome2Tree_SumTreeX_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_SumTree_Interface as SumTree0
  val sum_tree_x (t : Type.incsome2tree_tree) : uint32
    requires {SumTree0.sum_tree t <= Int32.to_int (1000000 : int32)}
    ensures { UInt32.to_int result = SumTree0.sum_tree t }
    
end
module IncSome2Tree_SumTreeX
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSome2Tree_SumTree as SumTree0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Resolve as Resolve6 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve4 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.incsome2tree_tree
  clone IncSome2Tree_LemmaSumTreeNonneg_Interface as LemmaSumTreeNonneg3 with function SumTree0.sum_tree = SumTree0.sum_tree
  let rec cfg sum_tree_x (t : Type.incsome2tree_tree) : uint32
    requires {SumTree0.sum_tree t <= Int32.to_int (1000000 : int32)}
    ensures { UInt32.to_int result = SumTree0.sum_tree t }
    
   = 
  var _0 : uint32;
  var t_1 : Type.incsome2tree_tree;
  var _2 : isize;
  var tl_3 : Type.incsome2tree_tree;
  var a_4 : uint32;
  var tr_5 : Type.incsome2tree_tree;
  var _6 : ();
  var _7 : Type.incsome2tree_tree;
  var _8 : ();
  var _9 : Type.incsome2tree_tree;
  var _10 : uint32;
  var _11 : uint32;
  var _12 : Type.incsome2tree_tree;
  var _13 : uint32;
  var _14 : uint32;
  var _15 : Type.incsome2tree_tree;
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    switch (t_1)
      | Type.IncSome2Tree_Tree_Node(_, _, _) -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve2.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve t_1 };
    assume { Resolve2.resolve _2 };
    _0 <- (0 : uint32);
    goto BB9
  }
  BB3 {
    assume { Resolve1.resolve t_1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB4 {
    tl_3 <- (let Type.IncSome2Tree_Tree_Node(a, _, _) = t_1 in a);
    a_4 <- (let Type.IncSome2Tree_Tree_Node(_, a, _) = t_1 in a);
    tr_5 <- (let Type.IncSome2Tree_Tree_Node(_, _, a) = t_1 in a);
    assume { Resolve1.resolve t_1 };
    _7 <- tl_3;
    _6 <- LemmaSumTreeNonneg3.lemma_sum_tree_nonneg _7;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _7 };
    _9 <- tr_5;
    _8 <- LemmaSumTreeNonneg3.lemma_sum_tree_nonneg _9;
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve _9 };
    _12 <- tl_3;
    assume { Resolve4.resolve tl_3 };
    _11 <- sum_tree_x _12;
    goto BB7
  }
  BB7 {
    assume { Resolve5.resolve _13 };
    _13 <- a_4;
    assume { Resolve6.resolve a_4 };
    _10 <- _11 + _13;
    _15 <- tr_5;
    assume { Resolve4.resolve tr_5 };
    _14 <- sum_tree_x _15;
    goto BB8
  }
  BB8 {
    _0 <- _10 + _14;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Builtins_Impl12_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Impl12_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Rand_Random_Interface
  type t   
  val random () : t
end
module Rand_Random
  type t   
  val random () : t
end
module IncSome2Tree_TakeSomeRestTree_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use Type
  clone IncSome2Tree_SumTree_Interface as SumTree0
  val take_some_rest_tree (mt : borrowed (Type.incsome2tree_tree)) : (borrowed uint32, borrowed (Type.incsome2tree_tree))
    ensures { SumTree0.sum_tree ( * (let (_, a) = result in a)) <= SumTree0.sum_tree ( * mt) }
    ensures { UInt32.to_int ( * (let (a, _) = result in a)) <= SumTree0.sum_tree ( * mt) }
    ensures { SumTree0.sum_tree ( ^ mt) - SumTree0.sum_tree ( * mt) = UInt32.to_int ( ^ (let (a, _) = result in a)) + SumTree0.sum_tree ( ^ (let (_, a) = result in a)) - UInt32.to_int ( * (let (a, _) = result in a)) - SumTree0.sum_tree ( * (let (_, a) = result in a)) }
    
end
module IncSome2Tree_TakeSomeRestTree
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use Type
  clone IncSome2Tree_SumTree as SumTree0
  use mach.int.Int64
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve9 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve8 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve7 with type self = bool
  clone Rand_Random_Interface as Random6 with type t = bool
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = isize
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve1 with type t = Type.incsome2tree_tree
  clone IncSome2Tree_LemmaSumTreeNonneg_Interface as LemmaSumTreeNonneg4 with function SumTree0.sum_tree = SumTree0.sum_tree
  let rec cfg take_some_rest_tree (mt : borrowed (Type.incsome2tree_tree)) : (borrowed uint32, borrowed (Type.incsome2tree_tree))
    ensures { SumTree0.sum_tree ( * (let (_, a) = result in a)) <= SumTree0.sum_tree ( * mt) }
    ensures { UInt32.to_int ( * (let (a, _) = result in a)) <= SumTree0.sum_tree ( * mt) }
    ensures { SumTree0.sum_tree ( ^ mt) - SumTree0.sum_tree ( * mt) = UInt32.to_int ( ^ (let (a, _) = result in a)) + SumTree0.sum_tree ( ^ (let (_, a) = result in a)) - UInt32.to_int ( * (let (a, _) = result in a)) - SumTree0.sum_tree ( * (let (_, a) = result in a)) }
    
   = 
  var _0 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var mt_1 : borrowed (Type.incsome2tree_tree);
  var _2 : isize;
  var mtl_3 : borrowed (Type.incsome2tree_tree);
  var ma_4 : borrowed uint32;
  var mtr_5 : borrowed (Type.incsome2tree_tree);
  var _6 : ();
  var _7 : Type.incsome2tree_tree;
  var _8 : ();
  var _9 : Type.incsome2tree_tree;
  var _10 : bool;
  var _11 : borrowed uint32;
  var _12 : borrowed (Type.incsome2tree_tree);
  var _13 : borrowed (Type.incsome2tree_tree);
  var _14 : bool;
  var _15 : borrowed (Type.incsome2tree_tree);
  var _16 : bool;
  var _17 : borrowed (Type.incsome2tree_tree);
  var _18 : borrowed (Type.incsome2tree_tree);
  var _19 : ();
  var _20 : ();
  {
    mt_1 <- mt;
    goto BB0
  }
  BB0 {
    switch ( * mt_1)
      | Type.IncSome2Tree_Tree_Node(_, _, _) -> goto BB1
      | Type.IncSome2Tree_Tree_Leaf -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Resolve2.resolve _2 };
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve mt_1 };
    assume { Resolve2.resolve _2 };
    goto BB21
  }
  BB3 {
    assume { Resolve1.resolve mt_1 };
    assume { Resolve2.resolve _2 };
    absurd
  }
  BB4 {
    mtl_3 <- borrow_mut (let Type.IncSome2Tree_Tree_Node(a, _, _) =  * mt_1 in a);
    mt_1 <- { mt_1 with current = (let Type.IncSome2Tree_Tree_Node(a, b, c) =  * mt_1 in Type.IncSome2Tree_Tree_Node( ^ mtl_3, b, c)) };
    ma_4 <- borrow_mut (let Type.IncSome2Tree_Tree_Node(_, a, _) =  * mt_1 in a);
    mt_1 <- { mt_1 with current = (let Type.IncSome2Tree_Tree_Node(a, b, c) =  * mt_1 in Type.IncSome2Tree_Tree_Node(a,  ^ ma_4, c)) };
    mtr_5 <- borrow_mut (let Type.IncSome2Tree_Tree_Node(_, _, a) =  * mt_1 in a);
    mt_1 <- { mt_1 with current = (let Type.IncSome2Tree_Tree_Node(a, b, c) =  * mt_1 in Type.IncSome2Tree_Tree_Node(a, b,  ^ mtr_5)) };
    assume { Resolve1.resolve mt_1 };
    _7 <-  * mtl_3;
    _6 <- LemmaSumTreeNonneg4.lemma_sum_tree_nonneg _7;
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _7 };
    _9 <-  * mtr_5;
    _8 <- LemmaSumTreeNonneg4.lemma_sum_tree_nonneg _9;
    goto BB6
  }
  BB6 {
    assume { Resolve5.resolve _9 };
    _10 <- Random6.random ();
    goto BB7
  }
  BB7 {
    switch (_10)
      | False -> goto BB13
      | True -> goto BB8
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve7.resolve _10 };
    _11 <- borrow_mut ( * ma_4);
    ma_4 <- { ma_4 with current = ( ^ _11) };
    assume { Resolve8.resolve ma_4 };
    _14 <- Random6.random ();
    goto BB9
  }
  BB9 {
    switch (_14)
      | False -> goto BB11
      | True -> goto BB10
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve9.resolve mtr_5 };
    assume { Resolve7.resolve _14 };
    _15 <- borrow_mut ( * mtl_3);
    mtl_3 <- { mtl_3 with current = ( ^ _15) };
    assume { Resolve9.resolve mtl_3 };
    _13 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _13) };
    assume { Resolve1.resolve _15 };
    goto BB12
  }
  BB11 {
    assume { Resolve9.resolve mtl_3 };
    assume { Resolve7.resolve _14 };
    _13 <- borrow_mut ( * mtr_5);
    mtr_5 <- { mtr_5 with current = ( ^ _13) };
    assume { Resolve9.resolve mtr_5 };
    goto BB12
  }
  BB12 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    assume { Resolve1.resolve _13 };
    _0 <- (_11, _12);
    goto BB20
  }
  BB13 {
    assume { Resolve8.resolve ma_4 };
    assume { Resolve7.resolve _10 };
    _16 <- Random6.random ();
    goto BB14
  }
  BB14 {
    switch (_16)
      | False -> goto BB17
      | True -> goto BB15
      | _ -> goto BB15
      end
  }
  BB15 {
    assume { Resolve9.resolve mtr_5 };
    assume { Resolve7.resolve _16 };
    _17 <- borrow_mut ( * mtl_3);
    mtl_3 <- { mtl_3 with current = ( ^ _17) };
    assume { Resolve9.resolve mtl_3 };
    _0 <- take_some_rest_tree _17;
    goto BB16
  }
  BB16 {
    goto BB19
  }
  BB17 {
    assume { Resolve9.resolve mtl_3 };
    assume { Resolve7.resolve _16 };
    _18 <- borrow_mut ( * mtr_5);
    mtr_5 <- { mtr_5 with current = ( ^ _18) };
    assume { Resolve9.resolve mtr_5 };
    _0 <- take_some_rest_tree _18;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  BB21 {
    goto BB22
  }
  BB22 {
    _20 <- ();
    assume { Resolve3.resolve _20 };
    goto BB21
  }
  
end
module CreusotContracts_Builtins_Impl11_Resolve_Interface
  type t1   
  type t2   
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Builtins_Impl11_Resolve
  type t1   
  type t2   
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = t2
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module Core_Panicking_Panic_Interface
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module CreusotContracts_Builtins_Impl12
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Impl12_Resolve with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = resolve
end
module IncSome2Tree_IncSome2Tree_Interface
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSome2Tree_SumTree_Interface as SumTree0
  val inc_some_2_tree (t : Type.incsome2tree_tree) (j : uint32) (k : uint32) : ()
    requires {SumTree0.sum_tree t + UInt32.to_int j + UInt32.to_int k <= Int32.to_int (1000000 : int32)}
    
end
module IncSome2Tree_IncSome2Tree
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt32
  clone IncSome2Tree_SumTree as SumTree0
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve11 with type self = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve as Resolve10 with type self = ()
  clone Core_Panicking_Panic_Interface as Panic9
  clone CreusotContracts_Builtins_Resolve as Resolve8 with type self = bool
  clone CreusotContracts_Builtins_Resolve as Resolve7 with type self = uint32
  clone CreusotContracts_Builtins_Impl12 as Resolve13 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Impl12 as Resolve12 with type t = uint32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve6 with type t1 = borrowed uint32,
  type t2 = borrowed (Type.incsome2tree_tree), predicate Resolve0.resolve = Resolve12.resolve,
  predicate Resolve1.resolve = Resolve13.resolve
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve5 with type t = uint32
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve3 with type t = Type.incsome2tree_tree
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = Type.incsome2tree_tree
  clone IncSome2Tree_TakeSomeRestTree_Interface as TakeSomeRestTree4 with function SumTree0.sum_tree = SumTree0.sum_tree
  clone IncSome2Tree_SumTreeX_Interface as SumTreeX2 with function SumTree0.sum_tree = SumTree0.sum_tree
  let rec cfg inc_some_2_tree (t : Type.incsome2tree_tree) (j : uint32) (k : uint32) : ()
    requires {SumTree0.sum_tree t + UInt32.to_int j + UInt32.to_int k <= Int32.to_int (1000000 : int32)}
    
   = 
  var _0 : ();
  var t_1 : Type.incsome2tree_tree;
  var j_2 : uint32;
  var k_3 : uint32;
  var sum0_4 : uint32;
  var _5 : Type.incsome2tree_tree;
  var _6 : Type.incsome2tree_tree;
  var ma_7 : borrowed uint32;
  var mt_8 : borrowed (Type.incsome2tree_tree);
  var _9 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var _10 : borrowed (Type.incsome2tree_tree);
  var _11 : borrowed (Type.incsome2tree_tree);
  var mb_12 : borrowed uint32;
  var _13 : (borrowed uint32, borrowed (Type.incsome2tree_tree));
  var _14 : borrowed (Type.incsome2tree_tree);
  var _15 : uint32;
  var _16 : uint32;
  var _17 : ();
  var _18 : bool;
  var _19 : bool;
  var _20 : uint32;
  var _21 : Type.incsome2tree_tree;
  var _22 : Type.incsome2tree_tree;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : uint32;
  var _26 : uint32;
  var _27 : uint32;
  var _28 : ();
  {
    t_1 <- t;
    j_2 <- j;
    k_3 <- k;
    goto BB0
  }
  BB0 {
    _6 <- t_1;
    _5 <- _6;
    assume { Resolve1.resolve _6 };
    sum0_4 <- SumTreeX2.sum_tree_x _5;
    goto BB1
  }
  BB1 {
    _11 <- borrow_mut t_1;
    t_1 <-  ^ _11;
    _10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    assume { Resolve3.resolve _11 };
    _9 <- TakeSomeRestTree4.take_some_rest_tree _10;
    goto BB2
  }
  BB2 {
    assume { Resolve5.resolve ma_7 };
    ma_7 <- (let (a, _) = _9 in a);
    assume { Resolve3.resolve mt_8 };
    mt_8 <- (let (_, a) = _9 in a);
    assume { Resolve6.resolve _9 };
    _14 <- borrow_mut ( * mt_8);
    mt_8 <- { mt_8 with current = ( ^ _14) };
    assume { Resolve3.resolve mt_8 };
    _13 <- TakeSomeRestTree4.take_some_rest_tree _14;
    goto BB3
  }
  BB3 {
    assume { Resolve5.resolve mb_12 };
    mb_12 <- (let (a, _) = _13 in a);
    assume { Resolve6.resolve _13 };
    assume { Resolve7.resolve _15 };
    _15 <- j_2;
    ma_7 <- { ma_7 with current = ( * ma_7 + _15) };
    assume { Resolve5.resolve ma_7 };
    assume { Resolve7.resolve _15 };
    assume { Resolve7.resolve _16 };
    _16 <- k_3;
    mb_12 <- { mb_12 with current = ( * mb_12 + _16) };
    assume { Resolve5.resolve mb_12 };
    assume { Resolve7.resolve _16 };
    _22 <- t_1;
    _21 <- _22;
    assume { Resolve1.resolve _22 };
    _20 <- SumTreeX2.sum_tree_x _21;
    goto BB4
  }
  BB4 {
    assume { Resolve7.resolve _25 };
    _25 <- sum0_4;
    assume { Resolve7.resolve sum0_4 };
    assume { Resolve7.resolve _26 };
    _26 <- j_2;
    assume { Resolve7.resolve j_2 };
    _24 <- _25 + _26;
    assume { Resolve7.resolve _27 };
    _27 <- k_3;
    assume { Resolve7.resolve k_3 };
    _23 <- _24 + _27;
    _19 <- _20 = _23;
    _18 <- not _19;
    switch (_18)
      | False -> goto BB6
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve8.resolve _18 };
    absurd
  }
  BB6 {
    assume { Resolve8.resolve _18 };
    _17 <- ();
    assume { Resolve10.resolve _17 };
    _0 <- ();
    goto BB7
  }
  BB7 {
    assume { Resolve11.resolve t_1 };
    return _0
  }
  
end
