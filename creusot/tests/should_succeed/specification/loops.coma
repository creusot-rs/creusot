
module Loops_WhileLoopVariant
  use prelude.Intrinsic
  let rec while_loop_variant (x:bool) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = bb1
      [ bb1 = (! s0 [ s0 = bb2 ] )
        [ bb2 = s0 [ s0 = any [ br0 -> {x = false} (! bb4) | br1 -> {x} (! bb3) ]  ]  | bb3 = s0 [ s0 = bb1 ]  ]
         ]
      
    | bb4 = s0 [ s0 =  [ &_0 <- [#"../loops.rs" 6 4 6 14] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & x : bool = x ]  [ return' (result:())-> (! return' {result}) ] 
end
