
module Forall_F_Interface
  use prelude.Int
  use prelude.UInt32
  val f [#"../forall.rs" 6 0 6 10] (_1 : ()) : ()
    ensures { [#"../forall.rs" 5 0 5 95] forall _x : uint32 . true /\ true /\ true /\ true /\ true /\ true /\ true /\ true /\ true }
    
end
module Forall_F
  use prelude.Int
  use prelude.UInt32
  let rec cfg f [#"../forall.rs" 6 0 6 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../forall.rs" 5 0 5 95] forall _x : uint32 . true /\ true /\ true /\ true /\ true /\ true /\ true /\ true /\ true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../forall.rs" 6 11 6 13] ());
    return _0
  }
  
end
module Forall_Omg_Stub
  use prelude.Int
  predicate omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int)
end
module Forall_Omg_Interface
  use prelude.Int
  predicate omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int)
  val omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int) : bool
    requires {[#"../forall.rs" 10 11 10 17] a <= b}
    ensures { [#"../forall.rs" 11 10 11 14] true }
    ensures { result = omg a b }
    
  axiom omg_spec : forall a : int, b : int . ([#"../forall.rs" 10 11 10 17] a <= b) -> ([#"../forall.rs" 11 10 11 14] true)
end
module Forall_Omg
  use prelude.Int
  predicate omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int) =
    [#"../forall.rs" 13 4 15 7] exists c : int . a + c = b
  val omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int) : bool
    requires {[#"../forall.rs" 10 11 10 17] a <= b}
    ensures { [#"../forall.rs" 11 10 11 14] true }
    ensures { result = omg a b }
    
  axiom omg_spec : forall a : int, b : int . ([#"../forall.rs" 10 11 10 17] a <= b) -> ([#"../forall.rs" 11 10 11 14] true)
end
module Forall_Omg_Impl
  use prelude.Int
  let rec ghost predicate omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int)
    requires {[#"../forall.rs" 10 11 10 17] a <= b}
    ensures { [#"../forall.rs" 11 10 11 14] true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../forall.rs" 13 4 15 7] pure {exists c : int . a + c = b}
end
