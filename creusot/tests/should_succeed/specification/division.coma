module M_division__divide [#"division.rs" 6 0 6 36]
  let%span sdivision0 = "division.rs" 7 4 7 9
  let%span sdivision1 = "division.rs" 5 11 5 20
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  meta "compute_max_steps" 1000000
  
  let rec divide (y:uint32) (x:uint32) (return'  (ret:uint32))= {[%#sdivision1] x <> (0 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- x ] s1
      | s1 = UInt32.eq {_5} {[%#sdivision0] (0 : uint32)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = {[@expl:division by zero] [%#sdivision0] not _6} s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = UInt32.div {y} {_5} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & y : uint32 = y
    | & x : uint32 = x
    | & _5 : uint32 = any_l ()
    | & _6 : bool = any_l () ]
     [ return' (result:uint32)-> (! return' {result}) ] 
end
