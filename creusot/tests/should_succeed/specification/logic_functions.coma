
module LogicFunctions_UseLogic
  function logic'0 [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool =
    [#"../logic_functions.rs" 6 4 6 8] true
  let rec logic'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = logic'0 _1} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec use_logic (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../logic_functions.rs" 10 19 10 21] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../logic_functions.rs" 9 10 9 17] logic'0 ()}
      (! return' {result}) ]
    
end
module LogicFunctions_UseLogicPearlite
  function logic_pearlite'0 [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool =
    [#"../logic_functions.rs" 15 16 15 22] 0 = 0
  let rec logic_pearlite'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = logic_pearlite'0 _1} (! return' {result}) ]
    
  use prelude.Intrinsic
  let rec use_logic_pearlite (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../logic_functions.rs" 19 28 19 30] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../logic_functions.rs" 18 10 18 26] logic_pearlite'0 ()}
      (! return' {result}) ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
