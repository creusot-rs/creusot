
module M_logic_functions__use_logic
  let%span slogic_functions0 = "../logic_functions.rs" 9 10 9 17
  
  let%span span1 = "../logic_functions.rs" 6 4 6 8
  
  function logic'0 [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool =
    [%#span1] true
  
  use prelude.prelude.Intrinsic
  
  let rec use_logic (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#slogic_functions0] logic'0 ()} (! return' {result}) ]
    
end
module M_logic_functions__use_logic_pearlite
  let%span slogic_functions0 = "../logic_functions.rs" 18 10 18 26
  
  let%span span1 = "../logic_functions.rs" 15 16 15 22
  
  function logic_pearlite'0 [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool =
    [%#span1] 0 = 0
  
  use prelude.prelude.Intrinsic
  
  let rec use_logic_pearlite (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#slogic_functions0] logic_pearlite'0 ()} (! return' {result}) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
