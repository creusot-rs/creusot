module M_logic_functions__use_logic [#"logic_functions.rs" 10 0 10 18]
  let%span slogic_functions0 = "logic_functions.rs" 9 10 9 17
  let%span slogic_functions1 = "logic_functions.rs" 6 4 6 8
  
  use prelude.prelude.Intrinsic
  
  function logic'0 [#"logic_functions.rs" 5 0 5 18] (_1 : ()) : bool =
    [%#slogic_functions1] true
  
  meta "compute_max_steps" 1000000
  
  let rec use_logic'0 (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:use_logic ensures] [%#slogic_functions0] logic'0 ()} (! return' {result}) ]
    
end
module M_logic_functions__use_logic_pearlite [#"logic_functions.rs" 19 0 19 27]
  let%span slogic_functions0 = "logic_functions.rs" 18 10 18 26
  let%span slogic_functions1 = "logic_functions.rs" 15 16 15 22
  
  use prelude.prelude.Intrinsic
  
  function logic_pearlite'0 [#"logic_functions.rs" 14 0 14 27] (_1 : ()) : bool =
    [%#slogic_functions1] 0 = 0
  
  meta "compute_max_steps" 1000000
  
  let rec use_logic_pearlite'0 (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:use_logic_pearlite ensures] [%#slogic_functions0] logic_pearlite'0 ()}
      (! return' {result}) ]
    
end
