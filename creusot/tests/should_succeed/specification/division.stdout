module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Division_Divide_Interface
  use mach.int.Int
  use mach.int.UInt32
  val divide (y : uint32) (x : uint32) : uint32
    requires {x <> (0 : uint32)}
    
end
module Division_Divide
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = uint32
  let rec cfg divide (y : uint32) (x : uint32) : uint32
    requires {x <> (0 : uint32)}
    
   = 
  var _0 : uint32;
  var y_1 : uint32;
  var x_2 : uint32;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    y_1 <- y;
    x_2 <- x;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- y_1;
    assume { Resolve0.resolve y_1 };
    assume { Resolve0.resolve _4 };
    _4 <- x_2;
    assume { Resolve0.resolve x_2 };
    _5 <- _4 = (0 : uint32);
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _0 <- _3 / _4;
    return _0
  }
  
end
