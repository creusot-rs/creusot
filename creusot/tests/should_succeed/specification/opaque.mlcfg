
module Opaque_X_Transparent_Stub
  predicate transparent [#"../opaque.rs" 9 4 9 32] (_1' : ())
end
module Opaque_X_Transparent_Interface
  predicate transparent [#"../opaque.rs" 9 4 9 32] (_1' : ())
  val transparent [#"../opaque.rs" 9 4 9 32] (_1' : ()) : bool
    ensures { result = transparent _1' }
    
end
module Opaque_X_Transparent
  predicate transparent [#"../opaque.rs" 9 4 9 32] (_1' : ()) =
    [#"../opaque.rs" 10 8 10 12] true
  val transparent [#"../opaque.rs" 9 4 9 32] (_1' : ()) : bool
    ensures { result = transparent _1' }
    
end
module Opaque_X_TransparentCrate_Stub
  predicate transparent_crate [#"../opaque.rs" 15 4 15 38] (_1' : ())
end
module Opaque_X_TransparentCrate_Interface
  predicate transparent_crate [#"../opaque.rs" 15 4 15 38] (_1' : ())
  val transparent_crate [#"../opaque.rs" 15 4 15 38] (_1' : ()) : bool
    ensures { result = transparent_crate _1' }
    
end
module Opaque_X_TransparentCrate
  predicate transparent_crate [#"../opaque.rs" 15 4 15 38] (_1' : ()) =
    [#"../opaque.rs" 16 8 16 12] true
  val transparent_crate [#"../opaque.rs" 15 4 15 38] (_1' : ()) : bool
    ensures { result = transparent_crate _1' }
    
end
module Opaque_Test_Interface
  val test [#"../opaque.rs" 20 0 20 13] (_1' : ()) : ()
end
module Opaque_Test
  clone Opaque_X_TransparentCrate as TransparentCrate0
  clone Opaque_X_Transparent as Transparent0
  let rec cfg test [#"../opaque.rs" 20 0 20 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : ();
  var _3 : ();
  {
    goto BB0
  }
  BB0 {
    assert { [@expl:assertion] [#"../opaque.rs" 21 18 21 34] Transparent0.transparent () };
    _1 <- ();
    assert { [@expl:assertion] [#"../opaque.rs" 22 18 22 40] TransparentCrate0.transparent_crate () };
    _3 <- ();
    _0 <- ();
    return _0
  }
  
end
