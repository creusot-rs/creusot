
module LogicFunctions_Logic_Stub
  function logic [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool
end
module LogicFunctions_Logic_Interface
  function logic [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool
  val logic [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool
    ensures { result = logic _1 }
    
end
module LogicFunctions_Logic
  function logic [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool =
    [#"../logic_functions.rs" 6 4 6 8] true
  val logic [#"../logic_functions.rs" 5 0 5 18] (_1 : ()) : bool
    ensures { result = logic _1 }
    
end
module LogicFunctions_UseLogic_Interface
  clone LogicFunctions_Logic_Stub as Logic0
  val use_logic [#"../logic_functions.rs" 10 0 10 18] (_1 : ()) : ()
    ensures { [#"../logic_functions.rs" 9 10 9 17] Logic0.logic () }
    
end
module LogicFunctions_UseLogic
  clone LogicFunctions_Logic as Logic0
  let rec cfg use_logic [#"../logic_functions.rs" 10 0 10 18] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../logic_functions.rs" 9 10 9 17] Logic0.logic () }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../logic_functions.rs" 10 19 10 21] ());
    return _0
  }
  
end
module LogicFunctions_LogicPearlite_Stub
  function logic_pearlite [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool
end
module LogicFunctions_LogicPearlite_Interface
  function logic_pearlite [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool
  val logic_pearlite [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool
    ensures { result = logic_pearlite _1 }
    
end
module LogicFunctions_LogicPearlite
  function logic_pearlite [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool =
    [#"../logic_functions.rs" 15 16 15 22] 0 = 0
  val logic_pearlite [#"../logic_functions.rs" 14 0 14 27] (_1 : ()) : bool
    ensures { result = logic_pearlite _1 }
    
end
module LogicFunctions_UseLogicPearlite_Interface
  clone LogicFunctions_LogicPearlite_Stub as LogicPearlite0
  val use_logic_pearlite [#"../logic_functions.rs" 19 0 19 27] (_1 : ()) : ()
    ensures { [#"../logic_functions.rs" 18 10 18 26] LogicPearlite0.logic_pearlite () }
    
end
module LogicFunctions_UseLogicPearlite
  clone LogicFunctions_LogicPearlite as LogicPearlite0
  let rec cfg use_logic_pearlite [#"../logic_functions.rs" 19 0 19 27] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    ensures { [#"../logic_functions.rs" 18 10 18 26] LogicPearlite0.logic_pearlite () }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../logic_functions.rs" 19 28 19 30] ());
    return _0
  }
  
end
module LogicFunctions_Nested_Nested_Stub
  function nested [#"../logic_functions.rs" 26 4 26 27] (_1 : ()) : bool
end
module LogicFunctions_Nested_Nested_Interface
  function nested [#"../logic_functions.rs" 26 4 26 27] (_1 : ()) : bool
  val nested [#"../logic_functions.rs" 26 4 26 27] (_1 : ()) : bool
    ensures { result = nested _1 }
    
end
module LogicFunctions_Nested_Nested
  function nested [#"../logic_functions.rs" 26 4 26 27] (_1 : ()) : bool =
    [#"../logic_functions.rs" 27 8 27 12] true
  val nested [#"../logic_functions.rs" 26 4 26 27] (_1 : ()) : bool
    ensures { result = nested _1 }
    
end
module LogicFunctions_Arith_Stub
  use prelude.Int
  function arith [#"../logic_functions.rs" 33 0 33 36] (n : int) (b : bool) : int
end
module LogicFunctions_Arith_Interface
  use prelude.Int
  function arith [#"../logic_functions.rs" 33 0 33 36] (n : int) (b : bool) : int
  val arith [#"../logic_functions.rs" 33 0 33 36] (n : int) (b : bool) : int
    ensures { result = arith n b }
    
end
module LogicFunctions_Arith
  use prelude.Int
  function arith [#"../logic_functions.rs" 33 0 33 36] (n : int) (b : bool) : int =
    [#"../logic_functions.rs" 32 0 32 8] if not b then - n + n - n * n else n
  val arith [#"../logic_functions.rs" 33 0 33 36] (n : int) (b : bool) : int
    ensures { result = arith n b }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module LogicFunctions_DerefPat_Stub
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  function deref_pat [#"../logic_functions.rs" 43 0 43 47] (o : Core_Option_Option_Type.t_option int) : int
end
module LogicFunctions_DerefPat_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  function deref_pat [#"../logic_functions.rs" 43 0 43 47] (o : Core_Option_Option_Type.t_option int) : int
  val deref_pat [#"../logic_functions.rs" 43 0 43 47] (o : Core_Option_Option_Type.t_option int) : int
    ensures { result = deref_pat o }
    
end
module LogicFunctions_DerefPat
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  function deref_pat [#"../logic_functions.rs" 43 0 43 47] (o : Core_Option_Option_Type.t_option int) : int =
    [#"../logic_functions.rs" 44 4 47 5] match (o) with
      | Core_Option_Option_Type.C_Some a -> a
      | Core_Option_Option_Type.C_None -> 0
      end
  val deref_pat [#"../logic_functions.rs" 43 0 43 47] (o : Core_Option_Option_Type.t_option int) : int
    ensures { result = deref_pat o }
    
end
