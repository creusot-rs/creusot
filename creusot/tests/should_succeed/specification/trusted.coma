
module M_trusted__victim_of_lie
  let%span strusted0 = "../trusted.rs" 19 4 19 9
  
  let%span strusted1 = "../trusted.rs" 17 10 17 25
  
  let%span span2 = "../trusted.rs" 12 10 12 25
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  let rec lie'0 (_1:()) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#span2] result = (10 : uint32)} (! return' {result}) ]
    
  
  let rec victim_of_lie (_1:()) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 = lie'0 {[%#strusted0] ()} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#strusted1] result = (10 : uint32)} (! return' {result}) ]
    
end
module M_trusted__innocent_victim
  let%span strusted0 = "../trusted.rs" 31 4 31 29
  
  let%span strusted1 = "../trusted.rs" 32 4 32 44
  
  let%span strusted2 = "../trusted.rs" 29 10 29 25
  
  let%span span3 = "../trusted.rs" 45 18 45 23
  
  let%span span4 = "../trusted.rs" 38 14 38 19
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  let rec im_out_of_control'0 (_1:()) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#span3] false} (! return' {result}) ]
    
  
  let rec my_unverified_code'0 (_1:()) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {[%#span4] false} (! return' {result}) ]
    
  
  let rec innocent_victim (_1:()) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 = my_unverified_code'0 {[%#strusted0] ()} (fun (_ret':uint32) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = im_out_of_control'0 {[%#strusted1] ()} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : uint32 = any_l () | & _2 : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#strusted2] result = (10 : uint32)} (! return' {result}) ]
    
end
