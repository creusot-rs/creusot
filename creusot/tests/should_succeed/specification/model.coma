
module T_model__Seven
  type t_Seven  =
    | C_Seven
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Seven (input:t_Seven) (ret  )= any
    [ good -> {C_Seven  = input} (! ret) | bad -> {C_Seven  <> input} {false} any ]
    
end
module T_model__Pair
  type t_Pair 't 'u =
    | C_Pair 't 'u
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Pair < 't > < 'u > (input:t_Pair 't 'u) (ret  (field_0:'t) (field_1:'u))= any
    [ good (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 <> input} {false} any ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__cell__UnsafeCell
  type t_UnsafeCell 't =
    | C_UnsafeCell 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_UnsafeCell < 't > (input:t_UnsafeCell 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_UnsafeCell value = input} (! ret {value})
    | bad (value:'t)-> {C_UnsafeCell value <> input} {false} any ]
    
end
module T_core__sync__atomic__AtomicUsize
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__cell__UnsafeCell as UnsafeCell'0
  
  type t_AtomicUsize  =
    | C_AtomicUsize (UnsafeCell'0.t_UnsafeCell usize)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_AtomicUsize (input:t_AtomicUsize) (ret  (v:UnsafeCell'0.t_UnsafeCell usize))= any
    [ good (v:UnsafeCell'0.t_UnsafeCell usize)-> {C_AtomicUsize v = input} (! ret {v})
    | bad (v:UnsafeCell'0.t_UnsafeCell usize)-> {C_AtomicUsize v <> input} {false} any ]
    
end
module T_alloc__sync__ArcInner
  use T_core__sync__atomic__AtomicUsize as AtomicUsize'0
  
  type t_ArcInner 't =
    | C_ArcInner (AtomicUsize'0.t_AtomicUsize) (AtomicUsize'0.t_AtomicUsize) 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_ArcInner < 't > (input:t_ArcInner 't) (ret  (strong:AtomicUsize'0.t_AtomicUsize) (weak:AtomicUsize'0.t_AtomicUsize) (data:'t))= any
    [ good (strong:AtomicUsize'0.t_AtomicUsize) (weak:AtomicUsize'0.t_AtomicUsize) (data:'t)-> {C_ArcInner strong weak data
      = input}
      (! ret {strong} {weak} {data})
    | bad (strong:AtomicUsize'0.t_AtomicUsize) (weak:AtomicUsize'0.t_AtomicUsize) (data:'t)-> {C_ArcInner strong weak data
      <> input}
      {false}
      any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_alloc__sync__Arc
  use T_alloc__sync__ArcInner as ArcInner'0
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Arc 't 'a =
    | C_Arc (NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't)) (PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't)) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Arc < 't > < 'a > (input:t_Arc 't 'a) (ret  (ptr:NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't)) (phantom:PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't)) (alloc:'a))= any
    [ good (ptr:NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't)) (phantom:PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't)) (alloc:'a)-> {C_Arc ptr phantom alloc
      = input}
      (! ret {ptr} {phantom} {alloc})
    | bad (ptr:NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't)) (phantom:PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't)) (alloc:'a)-> {C_Arc ptr phantom alloc
      <> input}
      {false}
      any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_model__test_arc
  let%span smodel0 = "../model.rs" 42 11 42 19
  
  let%span span1 = "../../../../../creusot-contracts/src/model.rs" 72 20 72 26
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__sync__Arc as Arc'0
  
  use prelude.prelude.UIntSize
  
  function shallow_model'0 (self : Arc'0.t_Arc usize (Global'0.t_Global)) : usize
  
  use prelude.prelude.Intrinsic
  
  let rec test_arc (a:Arc'0.t_Arc usize (Global'0.t_Global)) (return'  (ret:()))= {[%#smodel0] UIntSize.to_int (shallow_model'0 a)
    = 0}
    (! bb0 [ bb0 = bb1 | bb1 = bb2 | bb2 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module T_core__cell__Cell
  use T_core__cell__UnsafeCell as UnsafeCell'0
  
  type t_Cell 't =
    | C_Cell (UnsafeCell'0.t_UnsafeCell 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cell < 't > (input:t_Cell 't) (ret  (value:UnsafeCell'0.t_UnsafeCell 't))= any
    [ good (value:UnsafeCell'0.t_UnsafeCell 't)-> {C_Cell value = input} (! ret {value})
    | bad (value:UnsafeCell'0.t_UnsafeCell 't)-> {C_Cell value <> input} {false} any ]
    
end
module T_alloc__rc__RcBox
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__cell__Cell as Cell'0
  
  type t_RcBox 't =
    | C_RcBox (Cell'0.t_Cell usize) (Cell'0.t_Cell usize) 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RcBox < 't > (input:t_RcBox 't) (ret  (strong:Cell'0.t_Cell usize) (weak:Cell'0.t_Cell usize) (value:'t))= any
    [ good (strong:Cell'0.t_Cell usize) (weak:Cell'0.t_Cell usize) (value:'t)-> {C_RcBox strong weak value = input}
      (! ret {strong} {weak} {value})
    | bad (strong:Cell'0.t_Cell usize) (weak:Cell'0.t_Cell usize) (value:'t)-> {C_RcBox strong weak value <> input}
      {false}
      any ]
    
end
module T_alloc__rc__Rc
  use T_alloc__rc__RcBox as RcBox'0
  
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Rc 't 'a =
    | C_Rc (NonNull'0.t_NonNull (RcBox'0.t_RcBox 't)) (PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't)) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Rc < 't > < 'a > (input:t_Rc 't 'a) (ret  (ptr:NonNull'0.t_NonNull (RcBox'0.t_RcBox 't)) (phantom:PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't)) (alloc:'a))= any
    [ good (ptr:NonNull'0.t_NonNull (RcBox'0.t_RcBox 't)) (phantom:PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't)) (alloc:'a)-> {C_Rc ptr phantom alloc
      = input}
      (! ret {ptr} {phantom} {alloc})
    | bad (ptr:NonNull'0.t_NonNull (RcBox'0.t_RcBox 't)) (phantom:PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't)) (alloc:'a)-> {C_Rc ptr phantom alloc
      <> input}
      {false}
      any ]
    
end
module M_model__test_rc
  let%span smodel0 = "../model.rs" 45 11 45 19
  
  let%span span1 = "../../../../../creusot-contracts/src/model.rs" 42 20 42 26
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__rc__Rc as Rc'0
  
  use prelude.prelude.UIntSize
  
  function shallow_model'0 (self : Rc'0.t_Rc usize (Global'0.t_Global)) : usize
  
  use prelude.prelude.Intrinsic
  
  let rec test_rc (v:Rc'0.t_Rc usize (Global'0.t_Global)) (return'  (ret:()))= {[%#smodel0] UIntSize.to_int (shallow_model'0 v)
    = 0}
    (! bb0 [ bb0 = bb1 | bb1 = bb2 | bb2 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_model__qy123zimplqy35z0qy125z
  
end
module M_model__qy123zimplqy35z1qy125z
  type t
  
  type u
end
