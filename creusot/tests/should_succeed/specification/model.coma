
module Model_Seven_Type
  type t_seven  =
    | C_Seven
  
  function any_l (_ : 'b) : 'a
  
  let rec t_seven (input:t_seven) (ret  )= any
    [ good -> {C_Seven  = input} (! ret) | bad -> {C_Seven  <> input} {false} any ]
    
end
module Model_Pair_Type
  type t_pair 't 'u =
    | C_Pair 't 'u
  
  function any_l (_ : 'b) : 'a
  
  let rec t_pair < 't > < 'u > (input:t_pair 't 'u) (ret  (field_0:'t) (field_1:'u))= any
    [ good (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'t) (field_1:'u)-> {C_Pair field_0 field_1 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Cell_UnsafeCell_Type
  type t_unsafecell 't =
    | C_UnsafeCell 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unsafecell < 't > (input:t_unsafecell 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_UnsafeCell value = input} (! ret {value})
    | bad (value:'t)-> {C_UnsafeCell value <> input} {false} any ]
    
end
module Core_Sync_Atomic_AtomicUsize_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Core_Cell_UnsafeCell_Type as UnsafeCell'0
  
  type t_atomicusize  =
    | C_AtomicUsize (UnsafeCell'0.t_unsafecell usize)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_atomicusize (input:t_atomicusize) (ret  (v:UnsafeCell'0.t_unsafecell usize))= any
    [ good (v:UnsafeCell'0.t_unsafecell usize)-> {C_AtomicUsize v = input} (! ret {v})
    | bad (v:UnsafeCell'0.t_unsafecell usize)-> {C_AtomicUsize v <> input} {false} any ]
    
end
module Alloc_Sync_ArcInner_Type
  use Core_Sync_Atomic_AtomicUsize_Type as AtomicUsize'0
  
  type t_arcinner 't =
    | C_ArcInner (AtomicUsize'0.t_atomicusize) (AtomicUsize'0.t_atomicusize) 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_arcinner < 't > (input:t_arcinner 't) (ret  (strong:AtomicUsize'0.t_atomicusize) (weak:AtomicUsize'0.t_atomicusize) (data:'t))= any
    [ good (strong:AtomicUsize'0.t_atomicusize) (weak:AtomicUsize'0.t_atomicusize) (data:'t)-> {C_ArcInner strong weak data
      = input}
      (! ret {strong} {weak} {data})
    | bad (strong:AtomicUsize'0.t_atomicusize) (weak:AtomicUsize'0.t_atomicusize) (data:'t)-> {C_ArcInner strong weak data
      <> input}
      {false}
      any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Alloc_Sync_Arc_Type
  use Alloc_Sync_ArcInner_Type as ArcInner'0
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_arc 't 'a =
    | C_Arc (NonNull'0.t_nonnull (ArcInner'0.t_arcinner 't)) (PhantomData'0.t_phantomdata (ArcInner'0.t_arcinner 't)) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_arc < 't > < 'a > (input:t_arc 't 'a) (ret  (ptr:NonNull'0.t_nonnull (ArcInner'0.t_arcinner 't)) (phantom:PhantomData'0.t_phantomdata (ArcInner'0.t_arcinner 't)) (alloc:'a))= any
    [ good (ptr:NonNull'0.t_nonnull (ArcInner'0.t_arcinner 't)) (phantom:PhantomData'0.t_phantomdata (ArcInner'0.t_arcinner 't)) (alloc:'a)-> {C_Arc ptr phantom alloc
      = input}
      (! ret {ptr} {phantom} {alloc})
    | bad (ptr:NonNull'0.t_nonnull (ArcInner'0.t_arcinner 't)) (phantom:PhantomData'0.t_phantomdata (ArcInner'0.t_arcinner 't)) (alloc:'a)-> {C_Arc ptr phantom alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Model_TestArc
  let%span smodel0 = "../model.rs" 42 11 42 19
  
  let%span span1 = "../../../../../creusot-contracts/src/model.rs" 72 20 72 26
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_Sync_Arc_Type as Arc'0
  
  use prelude.prelude.UIntSize
  
  function shallow_model'0 (self : Arc'0.t_arc usize (Global'0.t_global)) : usize
  
  use prelude.prelude.Intrinsic
  
  let rec test_arc (a:Arc'0.t_arc usize (Global'0.t_global)) (return'  (ret:()))= {[%#smodel0] UIntSize.to_int (shallow_model'0 a)
    = 0}
    (! bb0 [ bb0 = bb1 | bb1 = bb2 | bb2 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Core_Cell_Cell_Type
  use Core_Cell_UnsafeCell_Type as UnsafeCell'0
  
  type t_cell 't =
    | C_Cell (UnsafeCell'0.t_unsafecell 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cell < 't > (input:t_cell 't) (ret  (value:UnsafeCell'0.t_unsafecell 't))= any
    [ good (value:UnsafeCell'0.t_unsafecell 't)-> {C_Cell value = input} (! ret {value})
    | bad (value:UnsafeCell'0.t_unsafecell 't)-> {C_Cell value <> input} {false} any ]
    
end
module Alloc_Rc_RcBox_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Core_Cell_Cell_Type as Cell'0
  
  type t_rcbox 't =
    | C_RcBox (Cell'0.t_cell usize) (Cell'0.t_cell usize) 't
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rcbox < 't > (input:t_rcbox 't) (ret  (strong:Cell'0.t_cell usize) (weak:Cell'0.t_cell usize) (value:'t))= any
    [ good (strong:Cell'0.t_cell usize) (weak:Cell'0.t_cell usize) (value:'t)-> {C_RcBox strong weak value = input}
      (! ret {strong} {weak} {value})
    | bad (strong:Cell'0.t_cell usize) (weak:Cell'0.t_cell usize) (value:'t)-> {C_RcBox strong weak value <> input}
      {false}
      any ]
    
end
module Alloc_Rc_Rc_Type
  use Alloc_Rc_RcBox_Type as RcBox'0
  
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_rc 't 'a =
    | C_Rc (NonNull'0.t_nonnull (RcBox'0.t_rcbox 't)) (PhantomData'0.t_phantomdata (RcBox'0.t_rcbox 't)) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rc < 't > < 'a > (input:t_rc 't 'a) (ret  (ptr:NonNull'0.t_nonnull (RcBox'0.t_rcbox 't)) (phantom:PhantomData'0.t_phantomdata (RcBox'0.t_rcbox 't)) (alloc:'a))= any
    [ good (ptr:NonNull'0.t_nonnull (RcBox'0.t_rcbox 't)) (phantom:PhantomData'0.t_phantomdata (RcBox'0.t_rcbox 't)) (alloc:'a)-> {C_Rc ptr phantom alloc
      = input}
      (! ret {ptr} {phantom} {alloc})
    | bad (ptr:NonNull'0.t_nonnull (RcBox'0.t_rcbox 't)) (phantom:PhantomData'0.t_phantomdata (RcBox'0.t_rcbox 't)) (alloc:'a)-> {C_Rc ptr phantom alloc
      <> input}
      {false}
      any ]
    
end
module Model_TestRc
  let%span smodel0 = "../model.rs" 45 11 45 19
  
  let%span span1 = "../../../../../creusot-contracts/src/model.rs" 42 20 42 26
  
  use Alloc_Alloc_Global_Type as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_Rc_Rc_Type as Rc'0
  
  use prelude.prelude.UIntSize
  
  function shallow_model'0 (self : Rc'0.t_rc usize (Global'0.t_global)) : usize
  
  use prelude.prelude.Intrinsic
  
  let rec test_rc (v:Rc'0.t_rc usize (Global'0.t_global)) (return'  (ret:()))= {[%#smodel0] UIntSize.to_int (shallow_model'0 v)
    = 0}
    (! bb0 [ bb0 = bb1 | bb1 = bb2 | bb2 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Model_Impl0
  
end
module Model_Impl1
  type t
  
  type u
end
