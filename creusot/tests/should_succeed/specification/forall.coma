
module Forall_F
  use prelude.UInt32
  use prelude.Int
  use prelude.Intrinsic
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../forall.rs" 6 11 6 13] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ] 
    [ return' (result:())-> {[@expl:postcondition] [#"../forall.rs" 5 0 5 95] forall _x : uint32 . true
      /\ true /\ true /\ true /\ true /\ true /\ true /\ true /\ true}
      (! return' {result}) ]
    
end
module Forall_Omg_Impl
  use prelude.Int
  constant a  : int
  constant b  : int
  predicate omg [#"../forall.rs" 12 0 12 34] (a : int) (b : int)
  goal vc_omg : [#"../forall.rs" 11 10 11 14] true
end
