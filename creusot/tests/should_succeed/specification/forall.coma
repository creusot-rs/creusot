module M_forall__f [#"forall.rs" 6 0 6 10]
  let%span sforall0 = "forall.rs" 5 0 5 95
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:postcondition] [%#sforall0] forall _x : uint32 . true
      /\ true /\ true /\ true /\ true /\ true /\ true /\ true /\ true}
      (! return' {result}) ]
    
end
module M_forall__omg [#"forall.rs" 12 0 12 34]
  let%span sforall0 = "forall.rs" 10 11 10 17
  let%span sforall1 = "forall.rs" 11 10 11 14
  let%span sforall2 = "forall.rs" 13 4 15 7
  
  use prelude.prelude.Int
  
  constant a  : int
  
  constant b  : int
  
  predicate omg [#"forall.rs" 12 0 12 34] (a : int) (b : int)
  
  goal vc_omg : [%#sforall1] true
end
