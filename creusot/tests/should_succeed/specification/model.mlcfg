
module Model_Seven_Type
  type t_seven  =
    | C_Seven
    
end
module Model_Pair_Type
  type t_pair 't 'u =
    | C_Pair 't 'u
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Cell_UnsafeCell_Type
  type t_unsafecell 't =
    | C_UnsafeCell 't
    
end
module Core_Sync_Atomic_AtomicUsize_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Cell_UnsafeCell_Type as Core_Cell_UnsafeCell_Type
  type t_atomicusize  =
    | C_AtomicUsize (Core_Cell_UnsafeCell_Type.t_unsafecell usize)
    
end
module Alloc_Sync_ArcInner_Type
  use Core_Sync_Atomic_AtomicUsize_Type as Core_Sync_Atomic_AtomicUsize_Type
  type t_arcinner 't =
    | C_ArcInner (Core_Sync_Atomic_AtomicUsize_Type.t_atomicusize) (Core_Sync_Atomic_AtomicUsize_Type.t_atomicusize) 't
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Alloc_Sync_Arc_Type
  use Alloc_Sync_ArcInner_Type as Alloc_Sync_ArcInner_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_arc 't =
    | C_Arc (Core_Ptr_NonNull_NonNull_Type.t_nonnull (Alloc_Sync_ArcInner_Type.t_arcinner 't)) (Core_Marker_PhantomData_Type.t_phantomdata (Alloc_Sync_ArcInner_Type.t_arcinner 't))
    
end
module Model_TestArc
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Sync_Arc_Type as Alloc_Sync_Arc_Type
  use prelude.UIntSize
  function shallow_model0 (self : Alloc_Sync_Arc_Type.t_arc usize) : usize
  val shallow_model0 (self : Alloc_Sync_Arc_Type.t_arc usize) : usize
    ensures { result = shallow_model0 self }
    
  let rec cfg test_arc [#"../model.rs" 43 0 43 41] [@cfg:stackify] [@cfg:subregion_analysis] (a : Alloc_Sync_Arc_Type.t_arc usize) : ()
    requires {[#"../model.rs" 42 11 42 19] UIntSize.to_int (shallow_model0 a) = 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../model.rs" 43 42 43 44] _0 <- ([#"../model.rs" 43 42 43 44] ());
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Core_Cell_Cell_Type
  use Core_Cell_UnsafeCell_Type as Core_Cell_UnsafeCell_Type
  type t_cell 't =
    | C_Cell (Core_Cell_UnsafeCell_Type.t_unsafecell 't)
    
end
module Alloc_Rc_RcBox_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Cell_Cell_Type as Core_Cell_Cell_Type
  type t_rcbox 't =
    | C_RcBox (Core_Cell_Cell_Type.t_cell usize) (Core_Cell_Cell_Type.t_cell usize) 't
    
end
module Alloc_Rc_Rc_Type
  use Alloc_Rc_RcBox_Type as Alloc_Rc_RcBox_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_rc 't =
    | C_Rc (Core_Ptr_NonNull_NonNull_Type.t_nonnull (Alloc_Rc_RcBox_Type.t_rcbox 't)) (Core_Marker_PhantomData_Type.t_phantomdata (Alloc_Rc_RcBox_Type.t_rcbox 't))
    
end
module Model_TestRc
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Rc_Rc_Type as Alloc_Rc_Rc_Type
  use prelude.UIntSize
  function shallow_model0 (self : Alloc_Rc_Rc_Type.t_rc usize) : usize
  val shallow_model0 (self : Alloc_Rc_Rc_Type.t_rc usize) : usize
    ensures { result = shallow_model0 self }
    
  let rec cfg test_rc [#"../model.rs" 46 0 46 37] [@cfg:stackify] [@cfg:subregion_analysis] (v : Alloc_Rc_Rc_Type.t_rc usize) : ()
    requires {[#"../model.rs" 45 11 45 19] UIntSize.to_int (shallow_model0 v) = 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../model.rs" 46 38 46 40] _0 <- ([#"../model.rs" 46 38 46 40] ());
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Model_Impl0
  
end
module Model_Impl1
  type t
  type u
end
