module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module LogicCall_Reflexive_Interface
  type t   
  function reflexive (x : t) : bool
end
module LogicCall_Reflexive
  type t   
  function reflexive (x : t) : bool = 
    true = true
end
module LogicCall_Dummy_Interface
  use mach.int.Int
  use mach.int.UInt32
  clone LogicCall_Reflexive_Interface as Reflexive0 with type t = uint32
  val dummy () : uint32
    ensures { Reflexive0.reflexive result }
    
end
module LogicCall_Dummy
  use mach.int.Int
  use mach.int.UInt32
  clone LogicCall_Reflexive as Reflexive0 with type t = uint32
  let rec cfg dummy () : uint32
    ensures { Reflexive0.reflexive result }
    
   = 
  var _0 : uint32;
  {
    goto BB0
  }
  BB0 {
    _0 <- (0 : uint32);
    return _0
  }
  
end
