
module Opaque_Test
  use prelude.Intrinsic
  predicate transparent_crate'0 [#"../opaque.rs" 15 4 15 38] (_1 : ()) =
    [#"../opaque.rs" 16 8 16 12] true
  let rec transparent_crate'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = transparent_crate'0 _1} (! return' {result}) ]
    
  predicate transparent'0 [#"../opaque.rs" 9 4 9 32] (_1 : ()) =
    [#"../opaque.rs" 10 8 10 12] true
  let rec transparent'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = transparent'0 _1} (! return' {result}) ]
    
  let rec test (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [#"../opaque.rs" 21 18 21 34] transparent'0 ()} s1
      | s1 = {[@expl:assertion] [#"../opaque.rs" 22 18 22 40] transparent_crate'0 ()} s2
      | s2 =  [ &_0 <- [#"../opaque.rs" 20 14 23 1] () ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
