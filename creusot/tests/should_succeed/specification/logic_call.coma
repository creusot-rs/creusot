
module LogicCall_Dummy
  use prelude.UInt32
  function reflexive'0 [#"../logic_call.rs" 6 0 6 40] (x : uint32) : bool =
    [#"../logic_call.rs" 7 16 7 22] x = x
  let rec reflexive'0 (x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = reflexive'0 x} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Int
  let rec dummy (_1:()) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../logic_call.rs" 12 4 12 5] (0 : uint32) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () : uint32 ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../logic_call.rs" 10 10 10 27] reflexive'0 result}
      (! return' {result}) ]
    
end
