module M_logic_call__dummy [#"logic_call.rs" 11 0 11 21]
  let%span slogic_call0 = "logic_call.rs" 12 4 12 5
  let%span slogic_call1 = "logic_call.rs" 10 10 10 27
  let%span slogic_call2 = "logic_call.rs" 7 16 7 22
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function reflexive'0 [#"logic_call.rs" 6 0 6 40] (x : uint32) : bool =
    [%#slogic_call2] x = x
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec dummy (_1:()) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#slogic_call0] (0 : uint32) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : uint32 = any_l () ] 
    [ return' (result:uint32)-> {[@expl:postcondition] [%#slogic_call1] reflexive'0 result} (! return' {result}) ]
    
end
