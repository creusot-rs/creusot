
module Division_Divide_Interface
  use mach.int.Int
  use mach.int.UInt32
  val divide [@cfg:stackify] [#"../division.rs" 6 0 6 36] (y : uint32) (x : uint32) : uint32
    requires {[#"../division.rs" 5 11 5 20] x <> (0 : uint32)}
    
end
module Division_Divide
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg divide [@cfg:stackify] [#"../division.rs" 6 0 6 36] (y : uint32) (x : uint32) : uint32
    requires {[#"../division.rs" 5 11 5 20] x <> (0 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var y_1 : uint32;
  var x_2 : uint32;
  var _4 : uint32;
  var _5 : uint32;
  var _6 : bool;
  {
    y_1 <- y;
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _4 <- y_1;
    _5 <- x_2;
    _6 <- ([#"../division.rs" 7 4 7 9] _5 = ([#"../division.rs" 7 4 7 9] (0 : uint32)));
    assert { [#"../division.rs" 7 4 7 9] not _6 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../division.rs" 7 4 7 9] _4 / _5);
    return _0
  }
  
end
