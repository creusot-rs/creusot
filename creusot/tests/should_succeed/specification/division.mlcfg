
module Division_Divide_Interface
  use prelude.Int
  use prelude.UInt32
  val divide [#"../division.rs" 6 0 6 36] (y : uint32) (x : uint32) : uint32
    requires {[#"../division.rs" 5 11 5 20] x <> (0 : uint32)}
    
end
module Division_Divide
  use prelude.Int
  use prelude.UInt32
  let rec cfg divide [#"../division.rs" 6 0 6 36] [@cfg:stackify] [@cfg:subregion_analysis] (y : uint32) (x : uint32) : uint32
    requires {[#"../division.rs" 5 11 5 20] x <> (0 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var y : uint32 = y;
  var x : uint32 = x;
  var _5 : uint32;
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    _5 <- x;
    _6 <- ([#"../division.rs" 7 4 7 9] _5 = ([#"../division.rs" 7 4 7 9] (0 : uint32)));
    assert { [@expl:division by zero] [#"../division.rs" 7 4 7 9] not _6 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../division.rs" 7 4 7 9] y / _5);
    _5 <- any uint32;
    return _0
  }
  
end
