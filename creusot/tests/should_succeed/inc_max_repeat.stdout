module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl11_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl11
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = Resolve0.resolve
end
module IncMaxRepeat_TakeMax
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = bool
  let rec cfg take_max (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { match ( * ma >=  * mb) with
      | True ->  * mb =  ^ mb && result = ma
      | False ->  * ma =  ^ ma && result = mb
      end }
    
   = 
  var _0 : borrowed uint32;
  var ma_1 : borrowed uint32;
  var mb_2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : borrowed uint32;
  var _5 : bool;
  var _6 : uint32;
  var _7 : uint32;
  var _8 : borrowed uint32;
  var _9 : borrowed uint32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <-  * ma_1;
    assume { Resolve0.resolve _7 };
    _7 <-  * mb_2;
    _5 <- _6 >= _7;
    switch (_5)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve1.resolve mb_2 };
    assume { Resolve2.resolve _5 };
    _8 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _8) };
    assume { Resolve1.resolve ma_1 };
    _4 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _4) };
    assume { Resolve1.resolve _8 };
    goto BB3
  }
  BB2 {
    assume { Resolve1.resolve ma_1 };
    assume { Resolve2.resolve _5 };
    _9 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _9) };
    assume { Resolve1.resolve mb_2 };
    _4 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _4) };
    assume { Resolve1.resolve _9 };
    goto BB3
  }
  BB3 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    assume { Resolve1.resolve _4 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve1.resolve _3 };
    return _0
  }
  
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module IncMaxRepeat_IncMaxRepeat
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = bool
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve2 with type t = uint32
  clone IncMaxRepeat_TakeMax as TakeMax3
  clone CreusotContracts_Builtins_Resolve as Resolve4 with type self = ()
  clone Core_Panicking_Panic as Panic5
  let rec cfg inc_max_repeat (a : uint32) (b : uint32) (n : uint32) : ()
    requires {a <= (1000000 : uint32) && b <= (1000000 : uint32) && n <= (1000000 : uint32)}
    
   = 
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var n_3 : uint32;
  var i_4 : uint32;
  var _5 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : uint32;
  var _12 : uint32;
  var mc_13 : borrowed uint32;
  var _14 : borrowed uint32;
  var _15 : borrowed uint32;
  var _16 : borrowed uint32;
  var _17 : borrowed uint32;
  var _18 : ();
  var _19 : ();
  var _20 : bool;
  var _21 : bool;
  var _22 : bool;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : uint32;
  var _26 : uint32;
  var _27 : bool;
  var _28 : uint32;
  var _29 : uint32;
  var _30 : uint32;
  var _31 : uint32;
  var _32 : ();
  {
    a_1 <- a;
    b_2 <- b;
    n_3 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant cntr_bound { i_4 <= n_3 };
    invariant val_bound { a_1 <= (1000000 : uint32) + i_4 && b_2 <= (1000000 : uint32) + i_4 };
    invariant diff_bound { a_1 >= b_2 + i_4 || b_2 >= a_1 + i_4 };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _11 };
    _11 <- i_4;
    assume { Resolve0.resolve _12 };
    _12 <- n_3;
    _10 <- _11 < _12;
    switch (_10)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve _10 };
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve n_3 };
    assume { Resolve1.resolve _10 };
    _5 <- ();
    assume { Resolve4.resolve _5 };
    assume { Resolve0.resolve _23 };
    _23 <- a_1;
    assume { Resolve0.resolve _25 };
    _25 <- b_2;
    assume { Resolve0.resolve _26 };
    _26 <- i_4;
    _24 <- _25 + _26;
    _22 <- _23 >= _24;
    switch (_22)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB5 {
    _15 <- borrow_mut a_1;
    a_1 <-  ^ _15;
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    assume { Resolve2.resolve _15 };
    _17 <- borrow_mut b_2;
    b_2 <-  ^ _17;
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    assume { Resolve2.resolve _17 };
    mc_13 <- TakeMax3.take_max _14 _16;
    goto BB6
  }
  BB6 {
    mc_13 <- { mc_13 with current = ( * mc_13 + (1 : uint32)) };
    assume { Resolve2.resolve mc_13 };
    i_4 <- i_4 + (1 : uint32);
    _9 <- ();
    assume { Resolve4.resolve _9 };
    goto BB1
  }
  BB7 {
    assume { Resolve0.resolve a_1 };
    assume { Resolve0.resolve b_2 };
    assume { Resolve0.resolve i_4 };
    assume { Resolve1.resolve _22 };
    _21 <- true;
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve _22 };
    assume { Resolve0.resolve _28 };
    _28 <- b_2;
    assume { Resolve0.resolve b_2 };
    assume { Resolve0.resolve _30 };
    _30 <- a_1;
    assume { Resolve0.resolve a_1 };
    assume { Resolve0.resolve _31 };
    _31 <- i_4;
    assume { Resolve0.resolve i_4 };
    _29 <- _30 + _31;
    _27 <- _28 >= _29;
    assume { Resolve1.resolve _21 };
    _21 <- _27;
    goto BB9
  }
  BB9 {
    _20 <- not _21;
    switch (_20)
      | False -> goto BB11
      | True -> goto BB10
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve1.resolve _20 };
    absurd
  }
  BB11 {
    assume { Resolve1.resolve _20 };
    _19 <- ();
    assume { Resolve4.resolve _19 };
    _0 <- ();
    return _0
  }
  
end
