module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl8_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl8
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl8_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = Resolve0.resolve
end
module IncMaxRepeat_TakeMax
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = int32
  clone CreusotContracts_Builtins_Impl8_Resolve as Resolve1 with type t = int32
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = bool
  let rec cfg take_max (ma : borrowed int32) (mb : borrowed int32) : borrowed int32 = 
  var _0 : borrowed int32;
  var ma_1 : borrowed int32;
  var mb_2 : borrowed int32;
  var _3 : borrowed int32;
  var _4 : borrowed int32;
  var _5 : bool;
  var _6 : int32;
  var _7 : int32;
  var _8 : borrowed int32;
  var _9 : borrowed int32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <-  * ma_1;
    assume { Resolve0.resolve _7 };
    _7 <-  * mb_2;
    _5 <- _6 >= _7;
    switch (_5)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve1.resolve mb_2 };
    assume { Resolve2.resolve _5 };
    _8 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _8) };
    assume { Resolve1.resolve ma_1 };
    _4 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _4) };
    assume { Resolve1.resolve _8 };
    goto BB3
  }
  BB2 {
    assume { Resolve1.resolve ma_1 };
    assume { Resolve2.resolve _5 };
    _9 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _9) };
    assume { Resolve1.resolve mb_2 };
    _4 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _4) };
    assume { Resolve1.resolve _9 };
    goto BB3
  }
  BB3 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    assume { Resolve1.resolve _4 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve1.resolve _3 };
    return _0
  }
  
end
module Core_Num_Impl2_Abs
  use mach.int.Int
  use mach.int.Int32
  val abs (self : int32) : int32
end
module Core_Panicking_Panic
  use prelude.Prelude
  val panic (expr : string) : ()
    ensures { false }
    
end
module IncMaxRepeat_IncMaxRepeat
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone Core_Num_Impl2_Abs as Abs0
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = int32
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = bool
  clone CreusotContracts_Builtins_Impl8_Resolve as Resolve3 with type t = int32
  clone IncMaxRepeat_TakeMax as TakeMax4
  clone CreusotContracts_Builtins_Resolve as Resolve5 with type self = ()
  clone Core_Panicking_Panic as Panic6
  let rec cfg inc_max_repeat (a : int32) (b : int32) (n : int32) : ()
    ensures { true }
    
   = 
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var n_3 : int32;
  var i_4 : int32;
  var _5 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : int32;
  var _11 : int32;
  var mc_12 : borrowed int32;
  var _13 : borrowed int32;
  var _14 : borrowed int32;
  var _15 : borrowed int32;
  var _16 : borrowed int32;
  var _17 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : bool;
  var _21 : int32;
  var _22 : int32;
  var _23 : int32;
  var _24 : int32;
  var _25 : int32;
  var _26 : ();
  {
    a_1 <- a;
    b_2 <- b;
    n_3 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : int32);
    goto BB1
  }
  BB1 {
    invariant cntr_bound { i_4 < n_3 };
    invariant diff_bound { Abs0.abs (a_1 - b_2) >= i_4 };
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _10 };
    _10 <- i_4;
    assume { Resolve1.resolve _11 };
    _11 <- n_3;
    _9 <- _10 < _11;
    switch (_9)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve2.resolve _9 };
    goto BB5
  }
  BB4 {
    assume { Resolve1.resolve n_3 };
    assume { Resolve2.resolve _9 };
    _5 <- ();
    assume { Resolve5.resolve _5 };
    assume { Resolve1.resolve _23 };
    _23 <- a_1;
    assume { Resolve1.resolve a_1 };
    assume { Resolve1.resolve _24 };
    _24 <- b_2;
    assume { Resolve1.resolve b_2 };
    _22 <- _23 - _24;
    _21 <- Abs0.abs _22;
    goto BB7
  }
  BB5 {
    _14 <- borrow_mut a_1;
    a_1 <-  ^ _14;
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    assume { Resolve3.resolve _14 };
    _16 <- borrow_mut b_2;
    b_2 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    assume { Resolve3.resolve _16 };
    mc_12 <- TakeMax4.take_max _13 _15;
    goto BB6
  }
  BB6 {
    mc_12 <- { mc_12 with current = ( * mc_12 + (1 : int32)) };
    assume { Resolve3.resolve mc_12 };
    i_4 <- i_4 + (1 : int32);
    _8 <- ();
    assume { Resolve5.resolve _8 };
    goto BB1
  }
  BB7 {
    assume { Resolve1.resolve _25 };
    _25 <- i_4;
    assume { Resolve1.resolve i_4 };
    _20 <- _21 >= _25;
    _19 <- not _20;
    switch (_19)
      | False -> goto BB9
      | True -> goto BB8
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve2.resolve _19 };
    absurd
  }
  BB9 {
    assume { Resolve2.resolve _19 };
    _18 <- ();
    assume { Resolve5.resolve _18 };
    _0 <- ();
    return _0
  }
  
end
