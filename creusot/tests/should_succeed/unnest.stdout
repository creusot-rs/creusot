module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Unnest_Main_Interface
  val main () : ()
end
module Unnest_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl11_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Impl11_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl11
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = Resolve0.resolve
end
module Unnest_Unnest_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val unnest (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures {  ^  * x =  ^  ^ x }
    ensures {  ^ result =  *  ^ x }
    ensures {  * result =  *  * x }
    
end
module Unnest_Unnest
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t = borrowed uint32
  let rec cfg unnest (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures {  ^  * x =  ^  ^ x }
    ensures {  ^ result =  *  ^ x }
    ensures {  * result =  *  * x }
    
   = 
  var _0 : borrowed uint32;
  var x_1 : borrowed (borrowed uint32);
  var _2 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _2 <- borrow_mut ( *  * x_1);
    x_1 <- { x_1 with current = { ( * x_1) with current = ( ^ _2) } };
    assume { Resolve0.resolve x_1 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve1.resolve _2 };
    return _0
  }
  
end
