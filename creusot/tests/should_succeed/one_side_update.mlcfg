
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module OneSideUpdate_MyInt_Type
  use prelude.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
end
module OneSideUpdate_F_Interface
  val f [#"../one_side_update.rs" 5 0 5 10] (_1 : ()) : ()
end
module OneSideUpdate_F
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use OneSideUpdate_MyInt_Type as OneSideUpdate_MyInt_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = OneSideUpdate_MyInt_Type.t_myint
  let rec cfg f [#"../one_side_update.rs" 5 0 5 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : OneSideUpdate_MyInt_Type.t_myint;
  var b : borrowed (OneSideUpdate_MyInt_Type.t_myint);
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../one_side_update.rs" 6 16 6 25] OneSideUpdate_MyInt_Type.C_MyInt ([#"../one_side_update.rs" 6 22 6 24] [#"../one_side_update.rs" 6 22 6 24] (10 : usize)));
    b <- Borrow.borrow_mut a;
    a <-  ^ b;
    switch ([#"../one_side_update.rs" 8 7 8 11] [#"../one_side_update.rs" 8 7 8 11] true)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve b };
    _0 <- ([#"../one_side_update.rs" 8 12 10 5] ());
    goto BB3
  }
  BB2 {
    b <- { b with current = ([#"../one_side_update.rs" 11 13 11 21] OneSideUpdate_MyInt_Type.C_MyInt ([#"../one_side_update.rs" 11 19 11 20] [#"../one_side_update.rs" 11 19 11 20] (5 : usize))) };
    assume { Resolve0.resolve b };
    _0 <- ([#"../one_side_update.rs" 10 11 12 5] ());
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
