module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type branchborrow3_myint  = 
    | BranchBorrow3_MyInt usize
    
  function branchborrow3_myint_MyInt_0 (self : branchborrow3_myint) : usize
  val branchborrow3_myint_MyInt_0 (self : branchborrow3_myint) : usize
    ensures { result = branchborrow3_myint_MyInt_0 self }
    
  axiom branchborrow3_myint_MyInt_0_acc : forall a : usize . branchborrow3_myint_MyInt_0 (BranchBorrow3_MyInt a : branchborrow3_myint) = a
end
module BranchBorrow3_Main_Interface
  val main [@cfg:stackify] () : ()
end
module BranchBorrow3_Main
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  var a_1 : (Type.branchborrow3_myint, Type.branchborrow3_myint);
  var _2 : Type.branchborrow3_myint;
  var _3 : Type.branchborrow3_myint;
  var b_4 : borrowed (Type.branchborrow3_myint, Type.branchborrow3_myint);
  var c_5 : borrowed (Type.branchborrow3_myint);
  var d_6 : borrowed (Type.branchborrow3_myint);
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.BranchBorrow3_MyInt (10 : usize);
    _3 <- Type.BranchBorrow3_MyInt (5 : usize);
    a_1 <- (_2, _3);
    b_4 <- borrow_mut a_1;
    a_1 <-  ^ b_4;
    assume { (fun x -> true) a_1 };
    c_5 <- borrow_mut (let (_, a) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in (a,  ^ c_5)) };
    d_6 <- borrow_mut (let (a, _) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in ( ^ d_6, b)) };
    assume { (fun x -> true) b_4 };
    assume { (fun x -> true) _8 };
    _8 <- Type.branchborrow3_myint_MyInt_0 ( * c_5);
    assume { (fun x -> true) c_5 };
    assume { (fun x -> true) _9 };
    _9 <- Type.branchborrow3_myint_MyInt_0 ( * d_6);
    assume { (fun x -> true) d_6 };
    _7 <- _8 <> _9;
    assume { (fun x -> true) _7 };
    _0 <- ();
    return _0
  }
  
end
