
module SumOfOdds_SumOfOdd_Impl
  use prelude.Int
  constant x  : int
  function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  goal vc_sum_of_odd : match x <= 0 with
    | True -> true
    | False -> 0 <= ([#"../sum_of_odds.rs" 17 10 17 11] x)
    /\ ([#"../sum_of_odds.rs" 17 10 17 11] x - 1) < ([#"../sum_of_odds.rs" 17 10 17 11] x)
    end
end
module SumOfOdds_SumOfOddIsSqr_Impl
  use prelude.Int
  function sqr'0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  let rec sqr'0 (x:int) (return'  (ret:int))= any [ return' (result:int)-> {result = sqr'0 x} (! return' {result}) ] 
  function sum_of_odd'0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  let rec sum_of_odd'0 (x:int) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum_of_odd'0 x} (! return' {result}) ]
    
  constant x  : int
  function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  goal vc_sum_of_odd_is_sqr : ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0)
   -> match x > 0 with
    | True -> (([#"../sum_of_odds.rs" 27 11 27 17] x - 1 >= 0)
    /\ 0 <= ([#"../sum_of_odds.rs" 29 10 29 11] x)
    /\ ([#"../sum_of_odds.rs" 29 10 29 11] x - 1) < ([#"../sum_of_odds.rs" 29 10 29 11] x))
    /\ (([#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd'0 (x - 1) = sqr'0 (x - 1))
     -> ([#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd'0 x = sqr'0 x))
    | False -> [#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd'0 x = sqr'0 x
    end
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module SumOfOdds_ComputeSumOfOdd
  use prelude.UInt32
  use seq.Seq
  predicate invariant'3 (self : Seq.seq uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq uint32)
  let rec inv'3 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq uint32 . inv'3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'2 (self : Core_Option_Option_Type.t_option uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Core_Option_Option_Type.t_option uint32)
  let rec inv'2 (_x:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Core_Option_Option_Type.t_option uint32 . inv'2 x = true
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use prelude.Borrow
  predicate invariant'1 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Core_Ops_Range_Range_Type.t_range uint32))
  let rec inv'1 (_x:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Core_Ops_Range_Range_Type.t_range uint32) . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : Core_Ops_Range_Range_Type.t_range uint32)
  let rec inv'0 (_x:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  function deep_model'0 (self : uint32) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 22 16 22 35] UInt32.to_int self
  let rec deep_model'0 (self:uint32) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  predicate produces'0 (self : Core_Ops_Range_Range_Type.t_range uint32) (visited : Seq.seq uint32) (o : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self
    = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (visited:Seq.seq uint32) (o:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Core_Ops_Range_Range_Type.t_range uint32) (ab : Seq.seq uint32) (b : Core_Ops_Range_Range_Type.t_range uint32) (bc : Seq.seq uint32) (c : Core_Ops_Range_Range_Type.t_range uint32) : ()
    
  let rec produces_trans'0 (a:Core_Ops_Range_Range_Type.t_range uint32) (ab:Seq.seq uint32) (b:Core_Ops_Range_Range_Type.t_range uint32) (bc:Seq.seq uint32) (c:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Core_Ops_Range_Range_Type.t_range uint32, ab : Seq.seq uint32, b : Core_Ops_Range_Range_Type.t_range uint32, bc : Seq.seq uint32, c : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32] produces'0 a ab b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32] produces'0 b bc c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23] inv'0 a)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33] inv'3 ab)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53] inv'0 b)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63] inv'3 bc)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83] inv'0 c)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Core_Ops_Range_Range_Type.t_range uint32) : ()
  let rec produces_refl'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Core_Ops_Range_Range_Type.t_range uint32 . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25] inv'0 self)
   -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  predicate invariant'0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Ops_Range_Range_Type.t_range uint32 . inv'0 x = true
  use prelude.Intrinsic
  function sqr'0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  let rec sqr'0 (x:int) (return'  (ret:int))= any [ return' (result:int)-> {result = sqr'0 x} (! return' {result}) ] 
  function sum_of_odd'0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  let rec sum_of_odd'0 (x:int) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum_of_odd'0 x} (! return' {result}) ]
    
  function sum_of_odd_is_sqr'0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  axiom sum_of_odd_is_sqr'0_def : forall x : int . sum_of_odd_is_sqr'0 x
  = ([#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then sum_of_odd_is_sqr'0 (x - 1) else ())
  let rec sum_of_odd_is_sqr'0 (x:int) (return'  (ret:()))= {[@expl:precondition] [#"../sum_of_odds.rs" 27 11 27 17] x
    >= 0}
    any [ return' (result:())-> {result = sum_of_odd_is_sqr'0 x} (! return' {result}) ] 
  axiom sum_of_odd_is_sqr'0_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0)
   -> ([#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd'0 x = sqr'0 x)
  use seq.Seq
  predicate resolve'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Core_Ops_Range_Range_Type.t_range uint32)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Core_Ops_Range_Range_Type.t_range uint32)) (return'  (ret:Core_Option_Option_Type.t_option uint32))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {inv'2 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17] match result with
        | Core_Option_Option_Type.C_None -> completed'0 self
        | Core_Option_Option_Type.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Core_Ops_Range_Range_Type.t_range uint32) (res : Core_Ops_Range_Range_Type.t_range uint32)
    
   =
    [#"../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  let rec into_iter_post'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (res:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Core_Ops_Range_Range_Type.t_range uint32) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  let rec into_iter_pre'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Core_Ops_Range_Range_Type.t_range uint32) (return'  (ret:Core_Ops_Range_Range_Type.t_range uint32))= {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_pre'0 self}
    any
    [ return' (result:Core_Ops_Range_Range_Type.t_range uint32)-> {inv'0 result}
      {[#"../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1] into_iter_post'0 self result}
      (! return' {result}) ]
    
  let rec compute_sum_of_odd (x:uint32) (return'  (ret:uint32))= {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x
    < 65536}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &s <- [#"../sum_of_odds.rs" 37 21 37 22] (0 : uint32) ] s1
      | s1 = 
        [ &_8 <- Core_Ops_Range_Range_Type.C_Range ([#"../sum_of_odds.rs" 39 13 39 14] (0 : uint32)) x : Core_Ops_Range_Range_Type.t_range uint32 ]
        
        s2
      | s2 = into_iter'0 {_8} (fun (_ret':Core_Ops_Range_Range_Type.t_range uint32) ->  [ &iter <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = 
        [ &iter_old <- ([#"../sum_of_odds.rs" 38 4 38 50] Snapshot.new iter) : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range uint32) ]
        
        s1
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = 
        [ &produced <- ([#"../sum_of_odds.rs" 38 4 38 50] Snapshot.new (Seq.empty  : Seq.seq uint32)) : Snapshot.snap_ty (Seq.seq uint32) ]
        
        s1
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [#"../sum_of_odds.rs" 38 16 38 48] UInt32.to_int s
        = sum_of_odd'0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [#"../sum_of_odds.rs" 38 4 38 50] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [#"../sum_of_odds.rs" 38 4 38 50] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Core_Ops_Range_Range_Type.t_range uint32> {iter}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range uint32)) ->
                 [ &_20 <- _ret' ] 
                 [ &iter <-  ^ _20 ] 
                s1)
          | s1 = Borrow.borrow_final <Core_Ops_Range_Range_Type.t_range uint32> { * _20} {Borrow.get_id _20}
              (fun (_ret':borrowed (Core_Ops_Range_Range_Type.t_range uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = ( ^ _19) ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Core_Option_Option_Type.t_option uint32) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any
            [ br0 -> {_18 = Core_Option_Option_Type.C_None } (! bb9)
            | br1 (a:uint32)-> {_18 = Core_Option_Option_Type.C_Some a} (! bb8) ]
             ]
          
        | bb8 = s0 [ s0 = bb10 ] 
        | bb10 = s0
          [ s0 = Core_Option_Option_Type.some <uint32> {_18}
              (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- ([#"../sum_of_odds.rs" 38 4 38 50] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq uint32) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _23 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq uint32))-> (!  [ &_23 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = {[@expl:assertion] [#"../sum_of_odds.rs" 41 12 41 33] let _ = sum_of_odd_is_sqr'0 (UInt32.to_int i) in true}
            s3
          | s3 = UInt32.mul {[#"../sum_of_odds.rs" 44 13 44 14] (2 : uint32)} {i}
              (fun (_ret':uint32) ->  [ &_29 <- _ret' ] s4)
          | s4 = UInt32.add {_29} {[#"../sum_of_odds.rs" 44 21 44 22] (1 : uint32)}
              (fun (_ret':uint32) ->  [ &_28 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_29 <- _any ] s5) ] ))
          | s5 = UInt32.add {s} {_28}
              (fun (_ret':uint32) ->  [ &s <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_28 <- _any ] s6) ] ))
          | s6 = bb4 ]
           ]
         ]
      
    | bb7 = s0 [ s0 = {[#"../sum_of_odds.rs" 38 4 38 50] false} any ] 
    | bb9 = s0 [ s0 =  [ &_0 <- s ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & x : uint32 = x
    | & s : uint32 = any_l () : uint32
    | & iter : Core_Ops_Range_Range_Type.t_range uint32 = any_l () : Core_Ops_Range_Range_Type.t_range uint32
    | & _8 : Core_Ops_Range_Range_Type.t_range uint32 = any_l () : Core_Ops_Range_Range_Type.t_range uint32
    | & iter_old : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range uint32) = any_l () : Snapshot.snap_ty (Core_Ops_Range_Range_Type.t_range uint32)
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & _18 : Core_Option_Option_Type.t_option uint32 = any_l () : Core_Option_Option_Type.t_option uint32
    | & _19 : borrowed (Core_Ops_Range_Range_Type.t_range uint32) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range uint32)
    | & _20 : borrowed (Core_Ops_Range_Range_Type.t_range uint32) = any_l () : borrowed (Core_Ops_Range_Range_Type.t_range uint32)
    | & __creusot_proc_iter_elem : uint32 = any_l () : uint32
    | & _23 : Snapshot.snap_ty (Seq.seq uint32) = any_l () : Snapshot.snap_ty (Seq.seq uint32)
    | & i : uint32 = any_l () : uint32
    | & _28 : uint32 = any_l () : uint32
    | & _29 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result
      = sum_of_odd'0 (UInt32.to_int x)}
      (! return' {result}) ]
    
end
module SumOfOdds_Test
  use prelude.Intrinsic
  use prelude.Int
  function sqr'0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
  let rec sqr'0 (x:int) (return'  (ret:int))= any [ return' (result:int)-> {result = sqr'0 x} (! return' {result}) ] 
  predicate is_square'0 [#"../sum_of_odds.rs" 12 0 12 28] (y : int) =
    [#"../sum_of_odds.rs" 13 4 13 44] exists z : int . y = sqr'0 z
  let rec is_square'0 (y:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = is_square'0 y} (! return' {result}) ]
    
  function sum_of_odd'0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  let rec sum_of_odd'0 (x:int) (return'  (ret:int))= any
    [ return' (result:int)-> {result = sum_of_odd'0 x} (! return' {result}) ]
    
  function sum_of_odd_is_sqr'0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  axiom sum_of_odd_is_sqr'0_def : forall x : int . sum_of_odd_is_sqr'0 x
  = ([#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then sum_of_odd_is_sqr'0 (x - 1) else ())
  let rec sum_of_odd_is_sqr'0 (x:int) (return'  (ret:()))= {[@expl:precondition] [#"../sum_of_odds.rs" 27 11 27 17] x
    >= 0}
    any [ return' (result:())-> {result = sum_of_odd_is_sqr'0 x} (! return' {result}) ] 
  axiom sum_of_odd_is_sqr'0_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0)
   -> ([#"../sum_of_odds.rs" 28 10 28 33] sum_of_odd'0 x = sqr'0 x)
  use prelude.UInt32
  use prelude.UInt32
  let rec compute_sum_of_odd'0 (x:uint32) (return'  (ret:uint32))= {[@expl:precondition] [#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x
    < 65536}
    any
    [ return' (result:uint32)-> {[#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result
      = sum_of_odd'0 (UInt32.to_int x)}
      (! return' {result}) ]
    
  let rec test (x:uint32) (return'  (ret:()))= {[#"../sum_of_odds.rs" 49 11 49 23] UInt32.to_int x < 65536}
    (! bb0
    [ bb0 = s0 [ s0 = compute_sum_of_odd'0 {x} (fun (_ret':uint32) ->  [ &y <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [#"../sum_of_odds.rs" 53 8 53 29] let _ = sum_of_odd_is_sqr'0 (UInt32.to_int x) in is_square'0 (UInt32.to_int y)}
        s1
      | s1 =  [ &_0 <- [#"../sum_of_odds.rs" 52 4 55 5] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & x : uint32 = x | & y : uint32 = any_l () : uint32 ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
