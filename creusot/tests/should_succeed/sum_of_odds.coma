
module SumOfOdds_SumOfOdd_Impl
  let%span ssum_of_odds0 = "../sum_of_odds.rs" 17 10 17 11
  
  use prelude.prelude.Int
  
  constant x  : int
  
  function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  goal vc_sum_of_odd : if x <= 0 then
    true
  else
    0 <= ([%#ssum_of_odds0] x) /\ ([%#ssum_of_odds0] x - 1) < ([%#ssum_of_odds0] x)
  
end
module SumOfOdds_SumOfOddIsSqr_Impl
  let%span ssum_of_odds0 = "../sum_of_odds.rs" 27 11 27 17
  
  let%span ssum_of_odds1 = "../sum_of_odds.rs" 28 10 28 33
  
  let%span ssum_of_odds2 = "../sum_of_odds.rs" 29 10 29 11
  
  let%span span3 = "../sum_of_odds.rs" 8 4 8 9
  
  let%span span4 = "../sum_of_odds.rs" 17 10 17 11
  
  let%span span5 = "../sum_of_odds.rs" 16 0 16 8
  
  use prelude.prelude.Int
  
  function sqr'0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [%#span3] x * x
  
  function sum_of_odd'0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([%#span5] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  
  constant x  : int
  
  function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  
  goal vc_sum_of_odd_is_sqr : ([%#ssum_of_odds0] x >= 0)
   -> (if x > 0 then
    (([%#ssum_of_odds0] x - 1 >= 0) /\ 0 <= ([%#ssum_of_odds2] x) /\ ([%#ssum_of_odds2] x - 1) < ([%#ssum_of_odds2] x))
    /\ (([%#ssum_of_odds1] sum_of_odd'0 (x - 1) = sqr'0 (x - 1))  -> ([%#ssum_of_odds1] sum_of_odd'0 x = sqr'0 x))
  else
    [%#ssum_of_odds1] sum_of_odd'0 x = sqr'0 x
  )
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module SumOfOdds_ComputeSumOfOdd
  let%span ssum_of_odds0 = "../sum_of_odds.rs" 37 21 37 22
  
  let%span ssum_of_odds1 = "../sum_of_odds.rs" 39 13 39 14
  
  let%span ssum_of_odds2 = "../sum_of_odds.rs" 38 4 38 50
  
  let%span ssum_of_odds3 = "../sum_of_odds.rs" 38 4 38 50
  
  let%span ssum_of_odds4 = "../sum_of_odds.rs" 38 4 38 50
  
  let%span ssum_of_odds5 = "../sum_of_odds.rs" 38 16 38 48
  
  let%span ssum_of_odds6 = "../sum_of_odds.rs" 38 4 38 50
  
  let%span ssum_of_odds7 = "../sum_of_odds.rs" 41 12 41 33
  
  let%span ssum_of_odds8 = "../sum_of_odds.rs" 44 13 44 14
  
  let%span ssum_of_odds9 = "../sum_of_odds.rs" 44 21 44 22
  
  let%span ssum_of_odds10 = "../sum_of_odds.rs" 34 11 34 23
  
  let%span ssum_of_odds11 = "../sum_of_odds.rs" 35 10 35 35
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span13 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span14 = "../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  
  let%span span15 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  
  let%span span16 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  
  let%span span17 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  
  let%span span18 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  
  let%span span19 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  
  let%span span20 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  
  let%span span21 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  
  let%span span22 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  
  let%span span23 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  
  let%span span24 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  
  let%span span25 = "../sum_of_odds.rs" 8 4 8 9
  
  let%span span26 = "../sum_of_odds.rs" 17 10 17 11
  
  let%span span27 = "../sum_of_odds.rs" 16 0 16 8
  
  let%span span28 = "../sum_of_odds.rs" 27 11 27 17
  
  let%span span29 = "../sum_of_odds.rs" 28 10 28 33
  
  let%span span30 = "../sum_of_odds.rs" 29 10 29 11
  
  let%span span31 = "../sum_of_odds.rs" 31 4 31 65
  
  let%span span32 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span33 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span38 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span39 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq uint32) =
    [%#span12] true
  
  predicate inv'3 (_x : Seq.seq uint32)
  
  axiom inv'3 : forall x : Seq.seq uint32 . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option uint32) =
    [%#span12] true
  
  predicate inv'2 (_x : Option'0.t_option uint32)
  
  axiom inv'2 : forall x : Option'0.t_option uint32 . inv'2 x = true
  
  use Core_Ops_Range_Range_Type as Range'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Range'0.t_range uint32)) =
    [%#span12] true
  
  predicate inv'1 (_x : borrowed (Range'0.t_range uint32))
  
  axiom inv'1 : forall x : borrowed (Range'0.t_range uint32) . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : Range'0.t_range uint32)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function deep_model'0 (self : uint32) : int =
    [%#span13] UInt32.to_int self
  
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  
  predicate produces'0 (self : Range'0.t_range uint32) (visited : Seq.seq uint32) (o : Range'0.t_range uint32) =
    [%#span14] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  
  function produces_trans'0 (a : Range'0.t_range uint32) (ab : Seq.seq uint32) (b : Range'0.t_range uint32) (bc : Seq.seq uint32) (c : Range'0.t_range uint32) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_range uint32, ab : Seq.seq uint32, b : Range'0.t_range uint32, bc : Seq.seq uint32, c : Range'0.t_range uint32 . ([%#span15] produces'0 a ab b)
   -> ([%#span16] produces'0 b bc c)
   -> ([%#span17] inv'0 a)
   -> ([%#span18] inv'3 ab)
   -> ([%#span19] inv'0 b)
   -> ([%#span20] inv'3 bc)  -> ([%#span21] inv'0 c)  -> ([%#span22] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_range uint32) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_range uint32 . ([%#span23] inv'0 self)
   -> ([%#span24] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'0 (self : Range'0.t_range uint32) =
    [%#span12] true
  
  axiom inv'0 : forall x : Range'0.t_range uint32 . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  function sqr'0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [%#span25] x * x
  
  function sum_of_odd'0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([%#span27] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  
  function sum_of_odd_is_sqr'0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  
  axiom sum_of_odd_is_sqr'0_def : forall x : int . sum_of_odd_is_sqr'0 x
  = ([%#span31] if x > 0 then sum_of_odd_is_sqr'0 (x - 1) else ())
  
  axiom sum_of_odd_is_sqr'0_spec : forall x : int . ([%#span28] x >= 0)  -> ([%#span29] sum_of_odd'0 x = sqr'0 x)
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (Range'0.t_range uint32)) =
    [%#span32] self.final = self.current
  
  predicate completed'0 (self : borrowed (Range'0.t_range uint32)) =
    [%#span33] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self.current)
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_range uint32)) (return'  (ret:Option'0.t_option uint32))= {[@expl:precondition] [%#span34] inv'1 self}
    any
    [ return' (result:Option'0.t_option uint32)-> {[%#span36] inv'2 result}
      {[%#span35] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_range uint32) (res : Range'0.t_range uint32) =
    [%#span37] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_range uint32) =
    [%#span38] true
  
  let rec into_iter'0 (self:Range'0.t_range uint32) (return'  (ret:Range'0.t_range uint32))= {[@expl:precondition] [%#span40] inv'0 self}
    {[@expl:precondition] [%#span39] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range uint32)-> {[%#span41] inv'0 result}
      {[%#span39] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec compute_sum_of_odd (x:uint32) (return'  (ret:uint32))= {[%#ssum_of_odds10] UInt32.to_int x < 65536}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &s <- [%#ssum_of_odds0] (0 : uint32) ] s1
      | s1 =  [ &_8 <- Range'0.C_Range ([%#ssum_of_odds1] (0 : uint32)) x ] s2
      | s2 = into_iter'0 {_8} (fun (_ret':Range'0.t_range uint32) ->  [ &iter <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#ssum_of_odds2] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#ssum_of_odds3] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#ssum_of_odds5] UInt32.to_int s
        = sum_of_odd'0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [%#ssum_of_odds4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#ssum_of_odds4] inv'0 iter}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range uint32> {iter}
              (fun (_ret':borrowed (Range'0.t_range uint32)) ->  [ &_20 <- _ret' ]  [ &iter <- _20.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range uint32> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed (Range'0.t_range uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = _19.final ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_option uint32) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any [ br0 -> {_18 = Option'0.C_None } (! bb9) | br1 (a:uint32)-> {_18 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.some <uint32> {_18} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#ssum_of_odds6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _23 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq uint32))-> (!  [ &_23 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = {[@expl:assertion] [%#ssum_of_odds7] let _ = sum_of_odd_is_sqr'0 (UInt32.to_int i) in true} s3
          | s3 = UInt32.mul {[%#ssum_of_odds8] (2 : uint32)} {i} (fun (_ret':uint32) ->  [ &_29 <- _ret' ] s4)
          | s4 = UInt32.add {_29} {[%#ssum_of_odds9] (1 : uint32)}
              (fun (_ret':uint32) ->  [ &_28 <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_29 <- _any ] s5) ] ))
          | s5 = UInt32.add {s} {_28}
              (fun (_ret':uint32) ->  [ &s <- _ret' ] (any [ any_ (_any:uint32)-> (!  [ &_28 <- _any ] s6) ] ))
          | s6 = bb4 ]
           ]
         ]
      
    | bb9 = s0 [ s0 =  [ &_0 <- s ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & x : uint32 = x
    | & s : uint32 = any_l ()
    | & iter : Range'0.t_range uint32 = any_l ()
    | & _8 : Range'0.t_range uint32 = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_range uint32) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _18 : Option'0.t_option uint32 = any_l ()
    | & _19 : borrowed (Range'0.t_range uint32) = any_l ()
    | & _20 : borrowed (Range'0.t_range uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & i : uint32 = any_l ()
    | & _28 : uint32 = any_l ()
    | & _29 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#ssum_of_odds11] UInt32.to_int result
      = sum_of_odd'0 (UInt32.to_int x)}
      (! return' {result}) ]
    
end
module SumOfOdds_Test
  let%span ssum_of_odds0 = "../sum_of_odds.rs" 53 8 53 29
  
  let%span ssum_of_odds1 = "../sum_of_odds.rs" 49 11 49 23
  
  let%span span2 = "../sum_of_odds.rs" 8 4 8 9
  
  let%span span3 = "../sum_of_odds.rs" 13 4 13 44
  
  let%span span4 = "../sum_of_odds.rs" 17 10 17 11
  
  let%span span5 = "../sum_of_odds.rs" 16 0 16 8
  
  let%span span6 = "../sum_of_odds.rs" 27 11 27 17
  
  let%span span7 = "../sum_of_odds.rs" 28 10 28 33
  
  let%span span8 = "../sum_of_odds.rs" 29 10 29 11
  
  let%span span9 = "../sum_of_odds.rs" 31 4 31 65
  
  let%span span10 = "../sum_of_odds.rs" 34 11 34 23
  
  let%span span11 = "../sum_of_odds.rs" 35 10 35 35
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  function sqr'0 [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [%#span2] x * x
  
  predicate is_square'0 [#"../sum_of_odds.rs" 12 0 12 28] (y : int) =
    [%#span3] exists z : int . y = sqr'0 z
  
  function sum_of_odd'0 [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([%#span5] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  
  function sum_of_odd_is_sqr'0 [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  
  axiom sum_of_odd_is_sqr'0_def : forall x : int . sum_of_odd_is_sqr'0 x
  = ([%#span9] if x > 0 then sum_of_odd_is_sqr'0 (x - 1) else ())
  
  axiom sum_of_odd_is_sqr'0_spec : forall x : int . ([%#span6] x >= 0)  -> ([%#span7] sum_of_odd'0 x = sqr'0 x)
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UInt32
  
  let rec compute_sum_of_odd'0 (x:uint32) (return'  (ret:uint32))= {[@expl:precondition] [%#span10] UInt32.to_int x
    < 65536}
    any
    [ return' (result:uint32)-> {[%#span11] UInt32.to_int result = sum_of_odd'0 (UInt32.to_int x)}
      (! return' {result}) ]
    
  
  let rec test (x:uint32) (return'  (ret:()))= {[%#ssum_of_odds1] UInt32.to_int x < 65536}
    (! bb0
    [ bb0 = s0 [ s0 = compute_sum_of_odd'0 {x} (fun (_ret':uint32) ->  [ &y <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssum_of_odds0] let _ = sum_of_odd_is_sqr'0 (UInt32.to_int x) in is_square'0 (UInt32.to_int y)}
        s1
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & x : uint32 = x | & y : uint32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
