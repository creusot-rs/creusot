
module Std_Sys_Pal_Unix_Time_Nanoseconds_Type
  use prelude.UInt32
  use prelude.Int
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
  function any_l (_ : 'b) : 'a
  let rec t_nanoseconds (input:t_nanoseconds) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Nanoseconds field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_Nanoseconds field_0 <> input} {false} any ]
    
end
module Std_Sys_Pal_Unix_Time_Timespec_Type
  use Std_Sys_Pal_Unix_Time_Nanoseconds_Type as Std_Sys_Pal_Unix_Time_Nanoseconds_Type
  use prelude.Int64
  use prelude.Int
  type t_timespec  =
    | C_Timespec int64 (Std_Sys_Pal_Unix_Time_Nanoseconds_Type.t_nanoseconds)
    
  function any_l (_ : 'b) : 'a
  let rec t_timespec (input:t_timespec) (ret  (tv_sec:int64) (tv_nsec:Std_Sys_Pal_Unix_Time_Nanoseconds_Type.t_nanoseconds))= any
    [ good (tv_sec:int64) (tv_nsec:Std_Sys_Pal_Unix_Time_Nanoseconds_Type.t_nanoseconds)-> {C_Timespec tv_sec tv_nsec
      = input}
      (! ret {tv_sec} {tv_nsec})
    | bad (tv_sec:int64) (tv_nsec:Std_Sys_Pal_Unix_Time_Nanoseconds_Type.t_nanoseconds)-> {C_Timespec tv_sec tv_nsec
      <> input}
      {false}
      any ]
    
end
module Std_Sys_Pal_Unix_Time_Instant_Type
  use Std_Sys_Pal_Unix_Time_Timespec_Type as Std_Sys_Pal_Unix_Time_Timespec_Type
  type t_instant  =
    | C_Instant (Std_Sys_Pal_Unix_Time_Timespec_Type.t_timespec)
    
  function any_l (_ : 'b) : 'a
  let rec t_instant (input:t_instant) (ret  (t:Std_Sys_Pal_Unix_Time_Timespec_Type.t_timespec))= any
    [ good (t:Std_Sys_Pal_Unix_Time_Timespec_Type.t_timespec)-> {C_Instant t = input} (! ret {t})
    | bad (t:Std_Sys_Pal_Unix_Time_Timespec_Type.t_timespec)-> {C_Instant t <> input} {false} any ]
    
end
module Std_Time_Instant_Type
  use Std_Sys_Pal_Unix_Time_Instant_Type as Std_Sys_Pal_Unix_Time_Instant_Type
  type t_instant  =
    | C_Instant (Std_Sys_Pal_Unix_Time_Instant_Type.t_instant)
    
  function any_l (_ : 'b) : 'a
  let rec t_instant (input:t_instant) (ret  (field_0:Std_Sys_Pal_Unix_Time_Instant_Type.t_instant))= any
    [ good (field_0:Std_Sys_Pal_Unix_Time_Instant_Type.t_instant)-> {C_Instant field_0 = input} (! ret {field_0})
    | bad (field_0:Std_Sys_Pal_Unix_Time_Instant_Type.t_instant)-> {C_Instant field_0 <> input} {false} any ]
    
end
module Core_Time_Nanoseconds_Type
  use prelude.UInt32
  use prelude.Int
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
  function any_l (_ : 'b) : 'a
  let rec t_nanoseconds (input:t_nanoseconds) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Nanoseconds field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_Nanoseconds field_0 <> input} {false} any ]
    
end
module Core_Time_Duration_Type
  use Core_Time_Nanoseconds_Type as Core_Time_Nanoseconds_Type
  use prelude.UInt64
  use prelude.Int
  type t_duration  =
    | C_Duration uint64 (Core_Time_Nanoseconds_Type.t_nanoseconds)
    
  function any_l (_ : 'b) : 'a
  let rec t_duration (input:t_duration) (ret  (secs:uint64) (nanos:Core_Time_Nanoseconds_Type.t_nanoseconds))= any
    [ good (secs:uint64) (nanos:Core_Time_Nanoseconds_Type.t_nanoseconds)-> {C_Duration secs nanos = input}
      (! ret {secs} {nanos})
    | bad (secs:uint64) (nanos:Core_Time_Nanoseconds_Type.t_nanoseconds)-> {C_Duration secs nanos <> input}
      {false}
      any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Instant_TestInstant
  use prelude.Int
  function eq_cmp'2 (_1 : int) (_2 : int) : ()
  let rec eq_cmp'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = eq_cmp'2 _1 _2} (! return' {result}) ]
    
  function antisym2'2 (_1 : int) (_2 : int) : ()
  let rec antisym2'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = antisym2'2 _1 _2} (! return' {result}) ]
    
  function antisym1'2 (_1 : int) (_2 : int) : ()
  let rec antisym1'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = antisym1'2 _1 _2} (! return' {result}) ]
    
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans'2 (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  let rec trans'2 (_1:int) (_2:int) (_3:int) (_4:Core_Cmp_Ordering_Type.t_ordering) (return'  (ret:()))= any
    [ return' (result:())-> {result = trans'2 _1 _2 _3 _4} (! return' {result}) ]
    
  function refl'2 (_1 : int) : ()
  let rec refl'2 (_1:int) (return'  (ret:()))= any [ return' (result:())-> {result = refl'2 _1} (! return' {result}) ] 
  function cmp_gt_log'2 (_1 : int) (_2 : int) : ()
  let rec cmp_gt_log'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_gt_log'2 _1 _2} (! return' {result}) ]
    
  function cmp_ge_log'2 (_1 : int) (_2 : int) : ()
  let rec cmp_ge_log'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_ge_log'2 _1 _2} (! return' {result}) ]
    
  function cmp_lt_log'2 (_1 : int) (_2 : int) : ()
  let rec cmp_lt_log'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_lt_log'2 _1 _2} (! return' {result}) ]
    
  function cmp_le_log'2 (_1 : int) (_2 : int) : ()
  let rec cmp_le_log'2 (_1:int) (_2:int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_le_log'2 _1 _2} (! return' {result}) ]
    
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'4 (self : Core_Option_Option_Type.t_option int) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'4 (self:Core_Option_Option_Type.t_option int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : Core_Option_Option_Type.t_option int)
  let rec inv'4 (_x:Core_Option_Option_Type.t_option int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Core_Option_Option_Type.t_option int . inv'4 x = true
  function eq_cmp'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec eq_cmp'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = eq_cmp'1 _1 _2} (! return' {result}) ]
    
  function antisym2'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec antisym2'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = antisym2'1 _1 _2} (! return' {result}) ]
    
  function antisym1'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec antisym1'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = antisym1'1 _1 _2} (! return' {result}) ]
    
  function trans'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) (_3 : Core_Option_Option_Type.t_option int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  let rec trans'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (_3:Core_Option_Option_Type.t_option int) (_4:Core_Cmp_Ordering_Type.t_ordering) (return'  (ret:()))= any
    [ return' (result:())-> {result = trans'1 _1 _2 _3 _4} (! return' {result}) ]
    
  function refl'1 (_1 : Core_Option_Option_Type.t_option int) : ()
  let rec refl'1 (_1:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = refl'1 _1} (! return' {result}) ]
    
  function cmp_gt_log'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_gt_log'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_gt_log'1 _1 _2} (! return' {result}) ]
    
  function cmp_ge_log'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_ge_log'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_ge_log'1 _1 _2} (! return' {result}) ]
    
  function cmp_lt_log'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_lt_log'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_lt_log'1 _1 _2} (! return' {result}) ]
    
  function cmp_le_log'1 (_1 : Core_Option_Option_Type.t_option int) (_2 : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_le_log'1 (_1:Core_Option_Option_Type.t_option int) (_2:Core_Option_Option_Type.t_option int) (return'  (ret:()))= any
    [ return' (result:())-> {result = cmp_le_log'1 _1 _2} (! return' {result}) ]
    
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  predicate invariant'3 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'3 (self:Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration))
  let rec inv'3 (_x:Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration) . inv'3 x = true
  use Std_Time_Instant_Type as Std_Time_Instant_Type
  predicate invariant'2 (self : Std_Time_Instant_Type.t_instant) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'2 (self:Std_Time_Instant_Type.t_instant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : Std_Time_Instant_Type.t_instant)
  let rec inv'2 (_x:Std_Time_Instant_Type.t_instant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : Std_Time_Instant_Type.t_instant . inv'2 x = true
  predicate invariant'1 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant))
  let rec inv'1 (_x:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant) . inv'1 x = true
  function cmp_log'1 (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 140 16 146 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  let rec cmp_log'1 (self:int) (o:int) (return'  (ret:Core_Cmp_Ordering_Type.t_ordering))= any
    [ return' (result:Core_Cmp_Ordering_Type.t_ordering)-> {result = cmp_log'1 self o} (! return' {result}) ]
    
  function cmp_log'0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 262 8 267 9] match (self, o) with
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_None) -> Core_Cmp_Ordering_Type.C_Equal
      | (Core_Option_Option_Type.C_None, Core_Option_Option_Type.C_Some _) -> Core_Cmp_Ordering_Type.C_Less
      | (Core_Option_Option_Type.C_Some _, Core_Option_Option_Type.C_None) -> Core_Cmp_Ordering_Type.C_Greater
      | (Core_Option_Option_Type.C_Some x, Core_Option_Option_Type.C_Some y) -> cmp_log'1 x y
      end
  let rec cmp_log'0 (self:Core_Option_Option_Type.t_option int) (o:Core_Option_Option_Type.t_option int) (return'  (ret:Core_Cmp_Ordering_Type.t_ordering))= any
    [ return' (result:Core_Cmp_Ordering_Type.t_ordering)-> {result = cmp_log'0 self o} (! return' {result}) ]
    
  function eq_cmp'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec eq_cmp'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv'4 x}
    any [ return' (result:())-> {result = eq_cmp'0 x y} (! return' {result}) ] 
  axiom eq_cmp'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y)
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym2'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec antisym2'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv'4 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log'0 x y
    = Core_Cmp_Ordering_Type.C_Greater}
    any [ return' (result:())-> {result = antisym2'0 x y} (! return' {result}) ] 
  axiom antisym2'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log'0 x y
  = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log'0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym1'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec antisym1'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv'4 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log'0 x y
    = Core_Cmp_Ordering_Type.C_Less}
    any [ return' (result:())-> {result = antisym1'0 x y} (! return' {result}) ] 
  axiom antisym1'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log'0 x y
  = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log'0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) (z : Core_Option_Option_Type.t_option int) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  let rec trans'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (z:Core_Option_Option_Type.t_option int) (o:Core_Cmp_Ordering_Type.t_ordering) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv'4 z}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv'4 x}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log'0 y z = o}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log'0 x y = o}
    any [ return' (result:())-> {result = trans'0 x y z o} (! return' {result}) ] 
  axiom trans'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int, z : Core_Option_Option_Type.t_option int, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log'0 x y
  = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log'0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv'4 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log'0 x z = o)
  function refl'0 (x : Core_Option_Option_Type.t_option int) : ()
  let rec refl'0 (x:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv'4 x}
    any [ return' (result:())-> {result = refl'0 x} (! return' {result}) ] 
  axiom refl'0_spec : forall x : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log'0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log'0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 41 20 41 56] cmp_log'0 self o = Core_Cmp_Ordering_Type.C_Greater
  let rec gt_log'0 (self:Core_Option_Option_Type.t_option int) (o:Core_Option_Option_Type.t_option int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = gt_log'0 self o} (! return' {result}) ]
    
  function cmp_gt_log'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_gt_log'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv'4 x}
    any [ return' (result:())-> {result = cmp_gt_log'0 x y} (! return' {result}) ] 
  axiom cmp_gt_log'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log'0 x y
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log'0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53] cmp_log'0 self o <> Core_Cmp_Ordering_Type.C_Less
  let rec ge_log'0 (self:Core_Option_Option_Type.t_option int) (o:Core_Option_Option_Type.t_option int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = ge_log'0 self o} (! return' {result}) ]
    
  function cmp_ge_log'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_ge_log'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv'4 x}
    any [ return' (result:())-> {result = cmp_ge_log'0 x y} (! return' {result}) ] 
  axiom cmp_ge_log'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log'0 x y
  = (cmp_log'0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log'0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53] cmp_log'0 self o = Core_Cmp_Ordering_Type.C_Less
  let rec lt_log'0 (self:Core_Option_Option_Type.t_option int) (o:Core_Option_Option_Type.t_option int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = lt_log'0 self o} (! return' {result}) ]
    
  function cmp_lt_log'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_lt_log'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv'4 x}
    any [ return' (result:())-> {result = cmp_lt_log'0 x y} (! return' {result}) ] 
  axiom cmp_lt_log'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log'0 x y
  = (cmp_log'0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log'0 (self : Core_Option_Option_Type.t_option int) (o : Core_Option_Option_Type.t_option int) : bool =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56] cmp_log'0 self o <> Core_Cmp_Ordering_Type.C_Greater
  let rec le_log'0 (self:Core_Option_Option_Type.t_option int) (o:Core_Option_Option_Type.t_option int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = le_log'0 self o} (! return' {result}) ]
    
  function cmp_le_log'0 (x : Core_Option_Option_Type.t_option int) (y : Core_Option_Option_Type.t_option int) : ()
  let rec cmp_le_log'0 (x:Core_Option_Option_Type.t_option int) (y:Core_Option_Option_Type.t_option int) (return'  (ret:()))= {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv'4 y}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv'4 x}
    any [ return' (result:())-> {result = cmp_le_log'0 x y} (! return' {result}) ] 
  axiom cmp_le_log'0_spec : forall x : Core_Option_Option_Type.t_option int, y : Core_Option_Option_Type.t_option int . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv'4 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv'4 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log'0 x y
  = (cmp_log'0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant'0 (self : Core_Time_Duration_Type.t_duration) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:Core_Time_Duration_Type.t_duration) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Core_Time_Duration_Type.t_duration)
  let rec inv'0 (_x:Core_Time_Duration_Type.t_duration) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Core_Time_Duration_Type.t_duration . inv'0 x = true
  use prelude.Intrinsic
  use prelude.Borrow
  function secs_to_nanos'0 (secs : int) : int
  let rec secs_to_nanos'0 (secs:int) (return'  (ret:int))= any
    [ return' (result:int)-> {result = secs_to_nanos'0 secs} (! return' {result}) ]
    
  use prelude.UInt64
  use prelude.UInt64
  constant max'0 : uint64 = (18446744073709551615 : uint64)
  function shallow_model'1 (self : Core_Time_Duration_Type.t_duration) : int
  let rec shallow_model'1 (self:Core_Time_Duration_Type.t_duration) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  axiom shallow_model'1_spec : forall self : Core_Time_Duration_Type.t_duration . [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] shallow_model'1 self
  >= 0
  /\ shallow_model'1 self <= secs_to_nanos'0 (UInt64.to_int (max'0 : uint64)) + 999999999
  function shallow_model'0 (self : Std_Time_Instant_Type.t_instant) : int
  let rec shallow_model'0 (self:Std_Time_Instant_Type.t_instant) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  axiom shallow_model'0_spec : forall self : Std_Time_Instant_Type.t_instant . [#"../../../../creusot-contracts/src/std/time.rs" 57 14 57 25] shallow_model'0 self
  >= 0
  function shallow_model'2 (self : Std_Time_Instant_Type.t_instant) : int =
    [#"../../../../creusot-contracts/src/model.rs" 90 8 90 31] shallow_model'0 self
  let rec shallow_model'2 (self:Std_Time_Instant_Type.t_instant) (return'  (ret:int))= any
    [ return' (result:int)-> {result = shallow_model'2 self} (! return' {result}) ]
    
  let rec saturating_duration_since'0 (self:Std_Time_Instant_Type.t_instant) (earlier:Std_Time_Instant_Type.t_instant) (return'  (ret:Core_Time_Duration_Type.t_duration))= any
    [ return' (result:Core_Time_Duration_Type.t_duration)-> {[#"../../../../creusot-contracts/src/std/time.rs" 178 16 178 62] shallow_model'2 self
      <= shallow_model'0 earlier  -> shallow_model'1 result = 0}
      {[#"../../../../creusot-contracts/src/std/time.rs" 177 16 177 60] shallow_model'2 self > shallow_model'0 earlier
       -> shallow_model'1 result > 0}
      (! return' {result}) ]
    
  let rec is_none'0 (self:Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) (return'  (ret:bool))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/option.rs" 38 26 38 51] result
      = (self = Core_Option_Option_Type.C_None)}
      (! return' {result}) ]
    
  let rec is_some'0 (self:Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) (return'  (ret:bool))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/option.rs" 34 26 34 51] result
      = (self <> Core_Option_Option_Type.C_None)}
      (! return' {result}) ]
    
  let rec checked_duration_since'0 (self:Std_Time_Instant_Type.t_instant) (earlier:Std_Time_Instant_Type.t_instant) (return'  (ret:Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)))= any
    [ return' (result:Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration))-> {[#"../../../../creusot-contracts/src/std/time.rs" 173 16 173 63] shallow_model'2 self
      < shallow_model'0 earlier  -> result = Core_Option_Option_Type.C_None}
      {[#"../../../../creusot-contracts/src/std/time.rs" 172 16 172 64] shallow_model'2 self >= shallow_model'0 earlier
       -> result <> Core_Option_Option_Type.C_None}
      (! return' {result}) ]
    
  let rec duration_since'0 (self:Std_Time_Instant_Type.t_instant) (earlier:Std_Time_Instant_Type.t_instant) (return'  (ret:Core_Time_Duration_Type.t_duration))= any
    [ return' (result:Core_Time_Duration_Type.t_duration)-> {[#"../../../../creusot-contracts/src/std/time.rs" 168 16 168 62] shallow_model'2 self
      <= shallow_model'0 earlier  -> shallow_model'1 result = 0}
      {[#"../../../../creusot-contracts/src/std/time.rs" 167 16 167 60] shallow_model'2 self > shallow_model'0 earlier
       -> shallow_model'1 result > 0}
      (! return' {result}) ]
    
  use int.Int
  function deep_model'3 (self : Core_Time_Duration_Type.t_duration) : int
  let rec deep_model'3 (self:Core_Time_Duration_Type.t_duration) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'3 self} (! return' {result}) ]
    
  axiom deep_model'3_spec : forall self : Core_Time_Duration_Type.t_duration . ([#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] deep_model'3 self
  = shallow_model'1 self)
  && ([#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] deep_model'3 self >= 0
  /\ deep_model'3 self <= secs_to_nanos'0 (UInt64.to_int (max'0 : uint64)) + 999999999)
  function deep_model'0 (self : Core_Time_Duration_Type.t_duration) : int =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'3 self
  let rec deep_model'0 (self:Core_Time_Duration_Type.t_duration) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  let rec gt'0 (self:Core_Time_Duration_Type.t_duration) (other:Core_Time_Duration_Type.t_duration) (return'  (ret:bool))= {[@expl:precondition] inv'0 other}
    {[@expl:precondition] inv'0 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 39 26 39 76] result
      = (deep_model'0 self > deep_model'0 other)}
      (! return' {result}) ]
    
  let rec eq'1 (self:Core_Time_Duration_Type.t_duration) (other:Core_Time_Duration_Type.t_duration) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'0 self = deep_model'0 other)}
      (! return' {result}) ]
    
  let rec sub'1 (self:Std_Time_Instant_Type.t_instant) (other:Std_Time_Instant_Type.t_instant) (return'  (ret:Core_Time_Duration_Type.t_duration))= any
    [ return' (result:Core_Time_Duration_Type.t_duration)-> {[#"../../../../creusot-contracts/src/std/time.rs" 227 8 227 52] shallow_model'0 self
      <= shallow_model'0 other  -> shallow_model'1 result = 0}
      {[#"../../../../creusot-contracts/src/std/time.rs" 226 8 226 50] shallow_model'0 self > shallow_model'0 other
       -> shallow_model'1 result > 0}
      (! return' {result}) ]
    
  let rec sub'0 (self:Std_Time_Instant_Type.t_instant) (other:Core_Time_Duration_Type.t_duration) (return'  (ret:Std_Time_Instant_Type.t_instant))= any
    [ return' (result:Std_Time_Instant_Type.t_instant)-> {[#"../../../../creusot-contracts/src/std/time.rs" 220 8 220 48] shallow_model'1 other
      > 0  -> shallow_model'0 self > shallow_model'0 result}
      {[#"../../../../creusot-contracts/src/std/time.rs" 219 8 219 50] shallow_model'1 other = 0
       -> shallow_model'0 self = shallow_model'0 result}
      (! return' {result}) ]
    
  function deep_model'4 (self : Std_Time_Instant_Type.t_instant) : int
  let rec deep_model'4 (self:Std_Time_Instant_Type.t_instant) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'4 self} (! return' {result}) ]
    
  axiom deep_model'4_spec : forall self : Std_Time_Instant_Type.t_instant . ([#"../../../../creusot-contracts/src/std/time.rs" 70 14 70 44] deep_model'4 self
  = shallow_model'0 self)
  && ([#"../../../../creusot-contracts/src/std/time.rs" 69 14 69 25] deep_model'4 self >= 0)
  function deep_model'1 (self : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) : Core_Option_Option_Type.t_option int
    
   =
    [#"../../../../creusot-contracts/src/std/option.rs" 10 8 13 9] match self with
      | Core_Option_Option_Type.C_Some t -> Core_Option_Option_Type.C_Some (deep_model'4 t)
      | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
      end
  let rec deep_model'1 (self:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) (return'  (ret:Core_Option_Option_Type.t_option int))= any
    [ return' (result:Core_Option_Option_Type.t_option int)-> {result = deep_model'1 self} (! return' {result}) ]
    
  let rec checked_sub'0 (self:Std_Time_Instant_Type.t_instant) (duration:Core_Time_Duration_Type.t_duration) (return'  (ret:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)))= any
    [ return' (result:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant))-> {[#"../../../../creusot-contracts/src/std/time.rs" 188 16 188 97] shallow_model'1 duration
      > 0
      /\ result <> Core_Option_Option_Type.C_None
       -> gt_log'0 (Core_Option_Option_Type.C_Some (shallow_model'2 self)) (deep_model'1 result)}
      {[#"../../../../creusot-contracts/src/std/time.rs" 187 16 187 81] shallow_model'1 duration = 0
       -> deep_model'1 result = Core_Option_Option_Type.C_Some (shallow_model'2 self)}
      (! return' {result}) ]
    
  let rec add'0 (self:Std_Time_Instant_Type.t_instant) (other:Core_Time_Duration_Type.t_duration) (return'  (ret:Std_Time_Instant_Type.t_instant))= any
    [ return' (result:Std_Time_Instant_Type.t_instant)-> {[#"../../../../creusot-contracts/src/std/time.rs" 213 8 213 48] shallow_model'1 other
      > 0  -> shallow_model'0 self < shallow_model'0 result}
      {[#"../../../../creusot-contracts/src/std/time.rs" 212 8 212 50] shallow_model'1 other = 0
       -> shallow_model'0 self = shallow_model'0 result}
      (! return' {result}) ]
    
  function deep_model'2 (self : Std_Time_Instant_Type.t_instant) : int =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model'4 self
  let rec deep_model'2 (self:Std_Time_Instant_Type.t_instant) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'2 self} (! return' {result}) ]
    
  let rec eq'0 (self:Std_Time_Instant_Type.t_instant) (other:Std_Time_Instant_Type.t_instant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75] result
      = (deep_model'2 self = deep_model'2 other)}
      (! return' {result}) ]
    
  let rec unwrap'0 (self:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) (return'  (ret:Std_Time_Instant_Type.t_instant))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [#"../../../../creusot-contracts/src/std/option.rs" 29 0 140 1] self
    <> Core_Option_Option_Type.C_None}
    any
    [ return' (result:Std_Time_Instant_Type.t_instant)-> {inv'2 result}
      {[#"../../../../creusot-contracts/src/std/option.rs" 29 0 140 1] Core_Option_Option_Type.C_Some result = self}
      (! return' {result}) ]
    
  let rec checked_add'0 (self:Std_Time_Instant_Type.t_instant) (duration:Core_Time_Duration_Type.t_duration) (return'  (ret:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)))= any
    [ return' (result:Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant))-> {[#"../../../../creusot-contracts/src/std/time.rs" 183 16 183 97] shallow_model'1 duration
      > 0
      /\ result <> Core_Option_Option_Type.C_None
       -> lt_log'0 (Core_Option_Option_Type.C_Some (shallow_model'2 self)) (deep_model'1 result)}
      {[#"../../../../creusot-contracts/src/std/time.rs" 182 16 182 81] shallow_model'1 duration = 0
       -> deep_model'1 result = Core_Option_Option_Type.C_Some (shallow_model'2 self)}
      (! return' {result}) ]
    
  use int.Int
  let rec ge'0 (self:Core_Time_Duration_Type.t_duration) (other:Core_Time_Duration_Type.t_duration) (return'  (ret:bool))= {[@expl:precondition] inv'0 other}
    {[@expl:precondition] inv'0 self}
    any
    [ return' (result:bool)-> {[#"../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77] result
      = (deep_model'0 self >= deep_model'0 other)}
      (! return' {result}) ]
    
  let rec elapsed'0 (self:Std_Time_Instant_Type.t_instant) (return'  (ret:Core_Time_Duration_Type.t_duration))= any
    [ return' (result:Core_Time_Duration_Type.t_duration)-> {[#"../../../../creusot-contracts/src/std/time.rs" 163 26 163 38] shallow_model'1 result
      >= 0}
      (! return' {result}) ]
    
  let rec from_secs'0 (secs:uint64) (return'  (ret:Core_Time_Duration_Type.t_duration))= any
    [ return' (result:Core_Time_Duration_Type.t_duration)-> {[#"../../../../creusot-contracts/src/std/time.rs" 86 26 86 57] shallow_model'1 result
      = secs_to_nanos'0 (UInt64.to_int secs)}
      (! return' {result}) ]
    
  let rec now'0 (_1:()) (return'  (ret:Std_Time_Instant_Type.t_instant))= any
    [ return' (result:Std_Time_Instant_Type.t_instant)-> {[#"../../../../creusot-contracts/src/std/time.rs" 160 26 160 38] shallow_model'0 result
      >= 0}
      (! return' {result}) ]
    
  let rec test_instant (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = now'0 {[#"../instant.rs" 8 18 8 32] ()}
          (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &instant <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = from_secs'0 {[#"../instant.rs" 9 39 9 40] (0 : uint64)}
          (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &zero_dur <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = elapsed'0 {instant} (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = ge'0 {_6} {zero_dur} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb5) ]  ] 
    | bb5 = s0
      [ s0 = checked_add'0 {instant} {zero_dur}
          (fun (_ret':Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) ->  [ &_14 <- _ret' ] s1)
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = unwrap'0 {_14} (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &_13 <- _ret' ] s1) | s1 = bb8 ]
      
    | bb8 = s0 [ s0 = eq'0 {_13} {instant} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0 [ s0 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb10) ]  ] 
    | bb10 = s0
      [ s0 = add'0 {instant} {zero_dur} (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &_22 <- _ret' ] s1)
      | s1 = bb12 ]
      
    | bb12 = s0 [ s0 = eq'0 {_22} {instant} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0 [ s0 = any [ br0 -> {_20 = false} (! bb15) | br1 -> {_20} (! bb14) ]  ] 
    | bb14 = s0
      [ s0 = from_secs'0 {[#"../instant.rs" 14 44 14 45] (3 : uint64)}
          (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &three_seconds <- _ret' ] s1)
      | s1 = bb16 ]
      
    | bb16 = s0
      [ s0 = add'0 {instant} {three_seconds}
          (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &greater_instant <- _ret' ] s1)
      | s1 = bb17 ]
      
    | bb17 = s0
      [ s0 = {[@expl:assertion] [#"../instant.rs" 16 18 16 45] shallow_model'0 instant
        < shallow_model'0 greater_instant}
        s1
      | s1 = add'0 {greater_instant} {three_seconds}
          (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &even_greater_instant <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = s0
      [ s0 = {[@expl:assertion] [#"../instant.rs" 18 18 18 50] shallow_model'0 instant
        < shallow_model'0 even_greater_instant}
        s1
      | s1 = checked_sub'0 {instant} {zero_dur}
          (fun (_ret':Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)) ->  [ &_42 <- _ret' ] s2)
      | s2 = bb19 ]
      
    | bb19 = s0
      [ s0 = unwrap'0 {_42} (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &_41 <- _ret' ] s1) | s1 = bb20 ]
      
    | bb20 = s0 [ s0 = eq'0 {_41} {instant} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0 [ s0 = any [ br0 -> {_39 = false} (! bb23) | br1 -> {_39} (! bb22) ]  ] 
    | bb22 = s0
      [ s0 = sub'0 {instant} {zero_dur} (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &_50 <- _ret' ] s1)
      | s1 = bb24 ]
      
    | bb24 = s0 [ s0 = eq'0 {_50} {instant} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = s0 [ s0 = any [ br0 -> {_48 = false} (! bb27) | br1 -> {_48} (! bb26) ]  ] 
    | bb26 = s0
      [ s0 = sub'0 {instant} {three_seconds}
          (fun (_ret':Std_Time_Instant_Type.t_instant) ->  [ &lesser_instant <- _ret' ] s1)
      | s1 = bb28 ]
      
    | bb28 = s0
      [ s0 = {[@expl:assertion] [#"../instant.rs" 23 18 23 44] shallow_model'0 instant > shallow_model'0 lesser_instant}
        s1
      | s1 = sub'1 {instant} {instant} (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_63 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0 [ s0 = eq'1 {_63} {zero_dur} (fun (_ret':bool) ->  [ &_61 <- _ret' ] s1) | s1 = bb30 ] 
    | bb30 = s0 [ s0 = any [ br0 -> {_61 = false} (! bb32) | br1 -> {_61} (! bb31) ]  ] 
    | bb31 = s0
      [ s0 = sub'1 {instant} {greater_instant} (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_71 <- _ret' ] s1)
      | s1 = bb33 ]
      
    | bb33 = s0 [ s0 = eq'1 {_71} {zero_dur} (fun (_ret':bool) ->  [ &_69 <- _ret' ] s1) | s1 = bb34 ] 
    | bb34 = s0 [ s0 = any [ br0 -> {_69 = false} (! bb36) | br1 -> {_69} (! bb35) ]  ] 
    | bb35 = s0
      [ s0 = sub'1 {greater_instant} {instant} (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_79 <- _ret' ] s1)
      | s1 = bb37 ]
      
    | bb37 = s0 [ s0 = gt'0 {_79} {zero_dur} (fun (_ret':bool) ->  [ &_77 <- _ret' ] s1) | s1 = bb38 ] 
    | bb38 = s0 [ s0 = any [ br0 -> {_77 = false} (! bb40) | br1 -> {_77} (! bb39) ]  ] 
    | bb39 = s0
      [ s0 = duration_since'0 {greater_instant} {instant}
          (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_87 <- _ret' ] s1)
      | s1 = bb41 ]
      
    | bb41 = s0 [ s0 = gt'0 {_87} {zero_dur} (fun (_ret':bool) ->  [ &_85 <- _ret' ] s1) | s1 = bb42 ] 
    | bb42 = s0 [ s0 = any [ br0 -> {_85 = false} (! bb44) | br1 -> {_85} (! bb43) ]  ] 
    | bb43 = s0
      [ s0 = duration_since'0 {instant} {greater_instant}
          (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_95 <- _ret' ] s1)
      | s1 = bb45 ]
      
    | bb45 = s0 [ s0 = eq'1 {_95} {zero_dur} (fun (_ret':bool) ->  [ &_93 <- _ret' ] s1) | s1 = bb46 ] 
    | bb46 = s0 [ s0 = any [ br0 -> {_93 = false} (! bb48) | br1 -> {_93} (! bb47) ]  ] 
    | bb47 = s0
      [ s0 = checked_duration_since'0 {greater_instant} {instant}
          (fun (_ret':Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) ->  [ &_103 <- _ret' ] s1)
      | s1 = bb49 ]
      
    | bb49 = s0 [ s0 = is_some'0 {_103} (fun (_ret':bool) ->  [ &_101 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = s0 [ s0 = any [ br0 -> {_101 = false} (! bb52) | br1 -> {_101} (! bb51) ]  ] 
    | bb51 = s0
      [ s0 = checked_duration_since'0 {instant} {greater_instant}
          (fun (_ret':Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) ->  [ &_110 <- _ret' ] s1)
      | s1 = bb53 ]
      
    | bb53 = s0 [ s0 = is_none'0 {_110} (fun (_ret':bool) ->  [ &_108 <- _ret' ] s1) | s1 = bb54 ] 
    | bb54 = s0 [ s0 = any [ br0 -> {_108 = false} (! bb56) | br1 -> {_108} (! bb55) ]  ] 
    | bb55 = s0
      [ s0 = saturating_duration_since'0 {greater_instant} {instant}
          (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_117 <- _ret' ] s1)
      | s1 = bb57 ]
      
    | bb57 = s0 [ s0 = gt'0 {_117} {zero_dur} (fun (_ret':bool) ->  [ &_115 <- _ret' ] s1) | s1 = bb58 ] 
    | bb58 = s0 [ s0 = any [ br0 -> {_115 = false} (! bb60) | br1 -> {_115} (! bb59) ]  ] 
    | bb59 = s0
      [ s0 = saturating_duration_since'0 {instant} {greater_instant}
          (fun (_ret':Core_Time_Duration_Type.t_duration) ->  [ &_125 <- _ret' ] s1)
      | s1 = bb61 ]
      
    | bb61 = s0 [ s0 = eq'1 {_125} {zero_dur} (fun (_ret':bool) ->  [ &_123 <- _ret' ] s1) | s1 = bb62 ] 
    | bb62 = s0 [ s0 = any [ br0 -> {_123 = false} (! bb64) | br1 -> {_123} (! bb63) ]  ] 
    | bb63 = s0 [ s0 =  [ &_0 <- [#"../instant.rs" 7 22 34 1] () ] s1 | s1 = return' {_0} ] 
    | bb64 = s0 [ s0 = {[#"../instant.rs" 33 4 33 75] false} any ] 
    | bb60 = s0 [ s0 = {[#"../instant.rs" 32 4 32 74] false} any ] 
    | bb56 = s0 [ s0 = {[#"../instant.rs" 31 4 31 70] false} any ] 
    | bb52 = s0 [ s0 = {[#"../instant.rs" 30 4 30 70] false} any ] 
    | bb48 = s0 [ s0 = {[#"../instant.rs" 29 4 29 64] false} any ] 
    | bb44 = s0 [ s0 = {[#"../instant.rs" 28 4 28 63] false} any ] 
    | bb40 = s0 [ s0 = {[#"../instant.rs" 26 4 26 49] false} any ] 
    | bb36 = s0 [ s0 = {[#"../instant.rs" 25 4 25 50] false} any ] 
    | bb32 = s0 [ s0 = {[#"../instant.rs" 24 4 24 42] false} any ] 
    | bb27 = s0 [ s0 = {[#"../instant.rs" 21 4 21 42] false} any ] 
    | bb23 = s0 [ s0 = {[#"../instant.rs" 20 4 20 62] false} any ] 
    | bb15 = s0 [ s0 = {[#"../instant.rs" 13 4 13 42] false} any ] 
    | bb11 = s0 [ s0 = {[#"../instant.rs" 12 4 12 62] false} any ] 
    | bb6 = s0 [ s0 = {[#"../instant.rs" 10 4 10 42] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & instant : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & zero_dur : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _4 : bool = any_l () : bool
    | & _6 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _11 : bool = any_l () : bool
    | & _13 : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & _14 : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant) = any_l () : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)
    | & _20 : bool = any_l () : bool
    | & _22 : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & three_seconds : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & greater_instant : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & even_greater_instant : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & _39 : bool = any_l () : bool
    | & _41 : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & _42 : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant) = any_l () : Core_Option_Option_Type.t_option (Std_Time_Instant_Type.t_instant)
    | & _48 : bool = any_l () : bool
    | & _50 : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & lesser_instant : Std_Time_Instant_Type.t_instant = any_l () : Std_Time_Instant_Type.t_instant
    | & _61 : bool = any_l () : bool
    | & _63 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _69 : bool = any_l () : bool
    | & _71 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _77 : bool = any_l () : bool
    | & _79 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _85 : bool = any_l () : bool
    | & _87 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _93 : bool = any_l () : bool
    | & _95 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _101 : bool = any_l () : bool
    | & _103 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration) = any_l () : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    | & _108 : bool = any_l () : bool
    | & _110 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration) = any_l () : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    | & _115 : bool = any_l () : bool
    | & _117 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration
    | & _123 : bool = any_l () : bool
    | & _125 : Core_Time_Duration_Type.t_duration = any_l () : Core_Time_Duration_Type.t_duration ]
     [ return' (result:())-> (! return' {result}) ] 
end
