module M_instant__test_instant [#"instant.rs" 7 0 7 21]
  let%span sinstant0 = "instant.rs" 8 18 8 32
  let%span sinstant1 = "instant.rs" 9 39 9 40
  let%span sinstant2 = "instant.rs" 14 44 14 45
  let%span sinstant3 = "instant.rs" 16 18 16 45
  let%span sinstant4 = "instant.rs" 18 18 18 50
  let%span sinstant5 = "instant.rs" 23 18 23 44
  let%span sinstant6 = "instant.rs" 33 4 33 75
  let%span sinstant7 = "instant.rs" 32 4 32 74
  let%span sinstant8 = "instant.rs" 31 4 31 70
  let%span sinstant9 = "instant.rs" 30 4 30 70
  let%span sinstant10 = "instant.rs" 29 4 29 64
  let%span sinstant11 = "instant.rs" 28 4 28 63
  let%span sinstant12 = "instant.rs" 26 4 26 49
  let%span sinstant13 = "instant.rs" 25 4 25 50
  let%span sinstant14 = "instant.rs" 24 4 24 42
  let%span sinstant15 = "instant.rs" 21 4 21 42
  let%span sinstant16 = "instant.rs" 20 4 20 62
  let%span sinstant17 = "instant.rs" 13 4 13 42
  let%span sinstant18 = "instant.rs" 12 4 12 62
  let%span sinstant19 = "instant.rs" 10 4 10 42
  let%span stime20 = "../../../creusot-contracts/src/std/time.rs" 156 26 156 38
  let%span stime21 = "../../../creusot-contracts/src/std/time.rs" 82 26 82 57
  let%span stime22 = "../../../creusot-contracts/src/std/time.rs" 159 26 159 38
  let%span scmp23 = "../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77
  let%span stime24 = "../../../creusot-contracts/src/std/time.rs" 178 26 178 79
  let%span stime25 = "../../../creusot-contracts/src/std/time.rs" 179 26 179 95
  let%span soption26 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span scmp27 = "../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span stime28 = "../../../creusot-contracts/src/std/time.rs" 208 18 208 48
  let%span stime29 = "../../../creusot-contracts/src/std/time.rs" 209 18 209 46
  let%span stime30 = "../../../creusot-contracts/src/std/time.rs" 56 14 56 25
  let%span stime31 = "../../../creusot-contracts/src/std/time.rs" 183 26 183 79
  let%span stime32 = "../../../creusot-contracts/src/std/time.rs" 184 26 184 95
  let%span stime33 = "../../../creusot-contracts/src/std/time.rs" 215 18 215 48
  let%span stime34 = "../../../creusot-contracts/src/std/time.rs" 216 18 216 46
  let%span stime35 = "../../../creusot-contracts/src/std/time.rs" 191 0 226 1
  let%span scmp36 = "../../../creusot-contracts/src/std/cmp.rs" 39 26 39 76
  let%span stime37 = "../../../creusot-contracts/src/std/time.rs" 72 0 189 1
  let%span soption38 = "../../../creusot-contracts/src/std/option.rs" 36 26 36 51
  let%span soption39 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  let%span stime40 = "../../../creusot-contracts/src/std/time.rs" 12 14 12 77
  let%span stime41 = "../../../creusot-contracts/src/std/time.rs" 48 4 48 24
  let%span smodel42 = "../../../creusot-contracts/src/model.rs" 79 8 79 28
  let%span soption43 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span smodel44 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span sord45 = "../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53
  let%span sord46 = "../../../creusot-contracts/src/logic/ord.rs" 41 20 41 56
  let%span stime47 = "../../../creusot-contracts/src/std/time.rs" 24 8 24 19
  let%span stime48 = "../../../creusot-contracts/src/std/time.rs" 68 8 68 19
  let%span sord49 = "../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord50 = "../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord51 = "../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord52 = "../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord53 = "../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord54 = "../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord55 = "../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord56 = "../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord57 = "../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord58 = "../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord59 = "../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord60 = "../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord61 = "../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span soption62 = "../../../creusot-contracts/src/std/option.rs" 437 8 442 9
  let%span sord63 = "../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56
  let%span sord64 = "../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53
  let%span sord65 = "../../../creusot-contracts/src/logic/ord.rs" 135 16 141 17
  let%span sord66 = "../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord67 = "../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord68 = "../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord69 = "../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord70 = "../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord71 = "../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord72 = "../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord73 = "../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord74 = "../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord75 = "../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord76 = "../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord77 = "../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord78 = "../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int64
  
  use prelude.prelude.UInt32
  
  type t_Nanoseconds'1  =
    { t_Nanoseconds__0'1: uint32 }
  
  type t_Timespec'0  =
    { t_Timespec__tv_sec'0: int64; t_Timespec__tv_nsec'0: t_Nanoseconds'1 }
  
  type t_Instant'1  =
    { t_Instant__t'0: t_Timespec'0 }
  
  type t_Instant'0  =
    { t_Instant__0'0: t_Instant'1 }
  
  function view'0 (self : t_Instant'0) : int
  
  axiom view'0_spec : forall self : t_Instant'0 . [%#stime30] view'0 self >= 0
  
  let rec now'0 (_1:()) (return'  (ret:t_Instant'0))= any
    [ return' (result:t_Instant'0)-> {[%#stime20] view'0 result >= 0} (! return' {result}) ]
    
  
  use prelude.prelude.UInt64
  
  constant v_MAX'0 : uint64 = (18446744073709551615 : uint64)
  
  use prelude.prelude.UInt64
  
  function secs_to_nanos'0 (secs : int) : int =
    [%#stime41] secs * 1000000000
  
  type t_Nanoseconds'0  =
    { t_Nanoseconds__0'0: uint32 }
  
  type t_Duration'0  =
    { t_Duration__secs'0: uint64; t_Duration__nanos'0: t_Nanoseconds'0 }
  
  function view'1 (self : t_Duration'0) : int
  
  axiom view'1_spec : forall self : t_Duration'0 . [%#stime40] view'1 self >= 0
  /\ view'1 self <= secs_to_nanos'0 (UInt64.to_int (v_MAX'0 : uint64)) + 999999999
  
  let rec from_secs'0 (secs:uint64) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime21] view'1 result = secs_to_nanos'0 (UInt64.to_int secs)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  let rec elapsed'0 (self:t_Instant'0) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime22] view'1 result >= 0} (! return' {result}) ]
    
  
  predicate inv'0 (_1 : t_Duration'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Duration'0 [inv'0 x] . inv'0 x = true
  
  function deep_model'3 (self : t_Duration'0) : int =
    [%#stime47] view'1 self
  
  function deep_model'0 (self : t_Duration'0) : int =
    [%#smodel42] deep_model'3 self
  
  let rec ge'0 (self:t_Duration'0) (other:t_Duration'0) (return'  (ret:bool))= {[@expl:ge 'self' type invariant] inv'0 self}
    {[@expl:ge 'other' type invariant] inv'0 other}
    any
    [ return' (result:bool)-> {[%#scmp23] result = (deep_model'0 self >= deep_model'0 other)} (! return' {result}) ]
    
  
  type t_Option'0  =
    | C_None'0
    | C_Some'1 (t_Instant'0)
  
  type t_Option'2  =
    | C_None'2
    | C_Some'0 int
  
  function deep_model'4 (self : t_Instant'0) : int =
    [%#stime48] view'0 self
  
  function deep_model'1 (self : t_Option'0) : t_Option'2 =
    [%#soption43] match self with
      | C_Some'1 t -> C_Some'0 (deep_model'4 t)
      | C_None'0 -> C_None'2
      end
  
  function view'2 (self : t_Instant'0) : int =
    [%#smodel44] view'0 self
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'1 (self : int) (o : int) : t_Ordering'0 =
    [%#sord65] if self < o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'1 (x : int) (y : int) : ()
  
  axiom eq_cmp'1_spec : forall x : int, y : int . [%#sord78] (x = y) = (cmp_log'1 x y = C_Equal'0)
  
  function antisym2'1 (x : int) (y : int) : ()
  
  axiom antisym2'1_spec : forall x : int, y : int . ([%#sord76] cmp_log'1 x y = C_Greater'0)
   -> ([%#sord77] cmp_log'1 y x = C_Less'0)
  
  function antisym1'1 (x : int) (y : int) : ()
  
  axiom antisym1'1_spec : forall x : int, y : int . ([%#sord74] cmp_log'1 x y = C_Less'0)
   -> ([%#sord75] cmp_log'1 y x = C_Greater'0)
  
  function trans'1 (x : int) (y : int) (z : int) (o : t_Ordering'0) : ()
  
  axiom trans'1_spec : forall x : int, y : int, z : int, o : t_Ordering'0 . ([%#sord71] cmp_log'1 x y = o)
   -> ([%#sord72] cmp_log'1 y z = o)  -> ([%#sord73] cmp_log'1 x z = o)
  
  function refl'1 (x : int) : ()
  
  axiom refl'1_spec : forall x : int . [%#sord70] cmp_log'1 x x = C_Equal'0
  
  function cmp_gt_log'1 (x : int) (y : int) : ()
  
  axiom cmp_gt_log'1_spec : forall x : int, y : int . [%#sord69] (x > y) = (cmp_log'1 x y = C_Greater'0)
  
  function cmp_ge_log'1 (x : int) (y : int) : ()
  
  axiom cmp_ge_log'1_spec : forall x : int, y : int . [%#sord68] (x >= y) = (cmp_log'1 x y <> C_Less'0)
  
  function cmp_lt_log'1 (x : int) (y : int) : ()
  
  axiom cmp_lt_log'1_spec : forall x : int, y : int . [%#sord67] (x < y) = (cmp_log'1 x y = C_Less'0)
  
  function cmp_le_log'1 (x : int) (y : int) : ()
  
  axiom cmp_le_log'1_spec : forall x : int, y : int . [%#sord66] (x <= y) = (cmp_log'1 x y <> C_Greater'0)
  
  function cmp_log'0 (self : t_Option'2) (o : t_Option'2) : t_Ordering'0 =
    [%#soption62] match (self, o) with
      | (C_None'2, C_None'2) -> C_Equal'0
      | (C_None'2, C_Some'0 _) -> C_Less'0
      | (C_Some'0 _, C_None'2) -> C_Greater'0
      | (C_Some'0 x, C_Some'0 y) -> cmp_log'1 x y
      end
  
  function eq_cmp'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom eq_cmp'0_spec : forall x : t_Option'2, y : t_Option'2 . [%#sord61] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom antisym2'0_spec : forall x : t_Option'2, y : t_Option'2 . ([%#sord59] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord60] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom antisym1'0_spec : forall x : t_Option'2, y : t_Option'2 . ([%#sord57] cmp_log'0 x y = C_Less'0)
   -> ([%#sord58] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_Option'2) (y : t_Option'2) (z : t_Option'2) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_Option'2, y : t_Option'2, z : t_Option'2, o : t_Ordering'0 . ([%#sord54] cmp_log'0 x y
  = o)  -> ([%#sord55] cmp_log'0 y z = o)  -> ([%#sord56] cmp_log'0 x z = o)
  
  function refl'0 (x : t_Option'2) : ()
  
  axiom refl'0_spec : forall x : t_Option'2 . [%#sord53] cmp_log'0 x x = C_Equal'0
  
  function gt_log'0 (self : t_Option'2) (o : t_Option'2) : bool =
    [%#sord46] cmp_log'0 self o = C_Greater'0
  
  function cmp_gt_log'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_Option'2, y : t_Option'2 . [%#sord52] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  function ge_log'0 (self : t_Option'2) (o : t_Option'2) : bool =
    [%#sord64] cmp_log'0 self o <> C_Less'0
  
  function cmp_ge_log'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_Option'2, y : t_Option'2 . [%#sord51] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  function lt_log'0 (self : t_Option'2) (o : t_Option'2) : bool =
    [%#sord45] cmp_log'0 self o = C_Less'0
  
  function cmp_lt_log'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_Option'2, y : t_Option'2 . [%#sord50] lt_log'0 x y = (cmp_log'0 x y = C_Less'0)
  
  function le_log'0 (self : t_Option'2) (o : t_Option'2) : bool =
    [%#sord63] cmp_log'0 self o <> C_Greater'0
  
  function cmp_le_log'0 (x : t_Option'2) (y : t_Option'2) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_Option'2, y : t_Option'2 . [%#sord49] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec checked_add'0 (self:t_Instant'0) (duration:t_Duration'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#stime24] view'1 duration = 0  -> deep_model'1 result = C_Some'0 (view'2 self)}
      {[%#stime25] view'1 duration > 0 /\ result <> C_None'0
       -> lt_log'0 (C_Some'0 (view'2 self)) (deep_model'1 result)}
      (! return' {result}) ]
    
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : t_Instant'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Instant'0 [inv'2 x] . inv'2 x = true
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:t_Instant'0))= {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] [%#soption26] self <> C_None'0}
    any [ return' (result:t_Instant'0)-> {inv'2 result} {[%#soption26] C_Some'1 result = self} (! return' {result}) ] 
  
  function deep_model'2 (self : t_Instant'0) : int =
    [%#smodel42] deep_model'4 self
  
  let rec eq'0 (self:t_Instant'0) (other:t_Instant'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#scmp27] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ]
    
  
  let rec add'0 (self:t_Instant'0) (other:t_Duration'0) (return'  (ret:t_Instant'0))= any
    [ return' (result:t_Instant'0)-> {[%#stime28] view'1 other = 0  -> view'0 self = view'0 result}
      {[%#stime29] view'1 other > 0  -> view'0 self < view'0 result}
      (! return' {result}) ]
    
  
  let rec checked_sub'0 (self:t_Instant'0) (duration:t_Duration'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#stime31] view'1 duration = 0  -> deep_model'1 result = C_Some'0 (view'2 self)}
      {[%#stime32] view'1 duration > 0 /\ result <> C_None'0
       -> gt_log'0 (C_Some'0 (view'2 self)) (deep_model'1 result)}
      (! return' {result}) ]
    
  
  let rec sub'0 (self:t_Instant'0) (other:t_Duration'0) (return'  (ret:t_Instant'0))= any
    [ return' (result:t_Instant'0)-> {[%#stime33] view'1 other = 0  -> view'0 self = view'0 result}
      {[%#stime34] view'1 other > 0  -> view'0 self > view'0 result}
      (! return' {result}) ]
    
  
  let rec sub'1 (self:t_Instant'0) (other:t_Instant'0) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime35] view'0 self > view'0 other  -> view'1 result > 0}
      {[%#stime35] view'0 self <= view'0 other  -> view'1 result = 0}
      (! return' {result}) ]
    
  
  let rec eq'1 (self:t_Duration'0) (other:t_Duration'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#scmp27] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec gt'0 (self:t_Duration'0) (other:t_Duration'0) (return'  (ret:bool))= {[@expl:gt 'self' type invariant] inv'0 self}
    {[@expl:gt 'other' type invariant] inv'0 other}
    any [ return' (result:bool)-> {[%#scmp36] result = (deep_model'0 self > deep_model'0 other)} (! return' {result}) ] 
  
  let rec duration_since'0 (self:t_Instant'0) (earlier:t_Instant'0) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime37] view'2 self > view'0 earlier  -> view'1 result > 0}
      {[%#stime37] view'2 self <= view'0 earlier  -> view'1 result = 0}
      (! return' {result}) ]
    
  
  type t_Option'1  =
    | C_None'1
    | C_Some'2 (t_Duration'0)
  
  let rec checked_duration_since'0 (self:t_Instant'0) (earlier:t_Instant'0) (return'  (ret:t_Option'1))= any
    [ return' (result:t_Option'1)-> {[%#stime37] view'2 self >= view'0 earlier  -> result <> C_None'1}
      {[%#stime37] view'2 self < view'0 earlier  -> result = C_None'1}
      (! return' {result}) ]
    
  
  predicate inv'3 (_1 : t_Option'1)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'1 [inv'3 x] . inv'3 x = true
  
  let rec is_some'0 (self:t_Option'1) (return'  (ret:bool))= {[@expl:is_some 'self' type invariant] inv'3 self}
    any [ return' (result:bool)-> {[%#soption38] result = (self <> C_None'1)} (! return' {result}) ] 
  
  let rec is_none'0 (self:t_Option'1) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'3 self}
    any [ return' (result:bool)-> {[%#soption39] result = (self = C_None'1)} (! return' {result}) ] 
  
  let rec saturating_duration_since'0 (self:t_Instant'0) (earlier:t_Instant'0) (return'  (ret:t_Duration'0))= any
    [ return' (result:t_Duration'0)-> {[%#stime37] view'2 self > view'0 earlier  -> view'1 result > 0}
      {[%#stime37] view'2 self <= view'0 earlier  -> view'1 result = 0}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_instant'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = now'0 {[%#sinstant0] ()} (fun (_ret':t_Instant'0) ->  [ &instant <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = from_secs'0 {[%#sinstant1] (0 : uint64)} (fun (_ret':t_Duration'0) ->  [ &zero_dur <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = elapsed'0 {instant} (fun (_ret':t_Duration'0) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = ge'0 {_6} {zero_dur} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb5) ] 
    | bb5 = s0 [ s0 = checked_add'0 {instant} {zero_dur} (fun (_ret':t_Option'0) ->  [ &_14 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':t_Instant'0) ->  [ &_13 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 = eq'0 {_13} {instant} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb10) ] 
    | bb10 = s0 [ s0 = add'0 {instant} {zero_dur} (fun (_ret':t_Instant'0) ->  [ &_22 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0 [ s0 = eq'0 {_22} {instant} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = any [ br0 -> {_20 = false} (! bb15) | br1 -> {_20} (! bb14) ] 
    | bb14 = s0
      [ s0 = from_secs'0 {[%#sinstant2] (3 : uint64)} (fun (_ret':t_Duration'0) ->  [ &three_seconds <- _ret' ] s1)
      | s1 = bb16 ]
      
    | bb16 = s0
      [ s0 = add'0 {instant} {three_seconds} (fun (_ret':t_Instant'0) ->  [ &greater_instant <- _ret' ] s1)
      | s1 = bb17 ]
      
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#sinstant3] view'0 instant < view'0 greater_instant} s1
      | s1 = add'0 {greater_instant} {three_seconds} (fun (_ret':t_Instant'0) ->  [ &even_greater_instant <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sinstant4] view'0 instant < view'0 even_greater_instant} s1
      | s1 = checked_sub'0 {instant} {zero_dur} (fun (_ret':t_Option'0) ->  [ &_42 <- _ret' ] s2)
      | s2 = bb19 ]
      
    | bb19 = s0 [ s0 = unwrap'0 {_42} (fun (_ret':t_Instant'0) ->  [ &_41 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0 [ s0 = eq'0 {_41} {instant} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = any [ br0 -> {_39 = false} (! bb23) | br1 -> {_39} (! bb22) ] 
    | bb22 = s0 [ s0 = sub'0 {instant} {zero_dur} (fun (_ret':t_Instant'0) ->  [ &_50 <- _ret' ] s1) | s1 = bb24 ] 
    | bb24 = s0 [ s0 = eq'0 {_50} {instant} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = any [ br0 -> {_48 = false} (! bb27) | br1 -> {_48} (! bb26) ] 
    | bb26 = s0
      [ s0 = sub'0 {instant} {three_seconds} (fun (_ret':t_Instant'0) ->  [ &lesser_instant <- _ret' ] s1) | s1 = bb28 ]
      
    | bb28 = s0
      [ s0 = {[@expl:assertion] [%#sinstant5] view'0 instant > view'0 lesser_instant} s1
      | s1 = sub'1 {instant} {instant} (fun (_ret':t_Duration'0) ->  [ &_63 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0 [ s0 = eq'1 {_63} {zero_dur} (fun (_ret':bool) ->  [ &_61 <- _ret' ] s1) | s1 = bb30 ] 
    | bb30 = any [ br0 -> {_61 = false} (! bb32) | br1 -> {_61} (! bb31) ] 
    | bb31 = s0
      [ s0 = sub'1 {instant} {greater_instant} (fun (_ret':t_Duration'0) ->  [ &_71 <- _ret' ] s1) | s1 = bb33 ]
      
    | bb33 = s0 [ s0 = eq'1 {_71} {zero_dur} (fun (_ret':bool) ->  [ &_69 <- _ret' ] s1) | s1 = bb34 ] 
    | bb34 = any [ br0 -> {_69 = false} (! bb36) | br1 -> {_69} (! bb35) ] 
    | bb35 = s0
      [ s0 = sub'1 {greater_instant} {instant} (fun (_ret':t_Duration'0) ->  [ &_79 <- _ret' ] s1) | s1 = bb37 ]
      
    | bb37 = s0 [ s0 = gt'0 {_79} {zero_dur} (fun (_ret':bool) ->  [ &_77 <- _ret' ] s1) | s1 = bb38 ] 
    | bb38 = any [ br0 -> {_77 = false} (! bb40) | br1 -> {_77} (! bb39) ] 
    | bb39 = s0
      [ s0 = duration_since'0 {greater_instant} {instant} (fun (_ret':t_Duration'0) ->  [ &_87 <- _ret' ] s1)
      | s1 = bb41 ]
      
    | bb41 = s0 [ s0 = gt'0 {_87} {zero_dur} (fun (_ret':bool) ->  [ &_85 <- _ret' ] s1) | s1 = bb42 ] 
    | bb42 = any [ br0 -> {_85 = false} (! bb44) | br1 -> {_85} (! bb43) ] 
    | bb43 = s0
      [ s0 = duration_since'0 {instant} {greater_instant} (fun (_ret':t_Duration'0) ->  [ &_95 <- _ret' ] s1)
      | s1 = bb45 ]
      
    | bb45 = s0 [ s0 = eq'1 {_95} {zero_dur} (fun (_ret':bool) ->  [ &_93 <- _ret' ] s1) | s1 = bb46 ] 
    | bb46 = any [ br0 -> {_93 = false} (! bb48) | br1 -> {_93} (! bb47) ] 
    | bb47 = s0
      [ s0 = checked_duration_since'0 {greater_instant} {instant} (fun (_ret':t_Option'1) ->  [ &_103 <- _ret' ] s1)
      | s1 = bb49 ]
      
    | bb49 = s0 [ s0 = is_some'0 {_103} (fun (_ret':bool) ->  [ &_101 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = any [ br0 -> {_101 = false} (! bb52) | br1 -> {_101} (! bb51) ] 
    | bb51 = s0
      [ s0 = checked_duration_since'0 {instant} {greater_instant} (fun (_ret':t_Option'1) ->  [ &_110 <- _ret' ] s1)
      | s1 = bb53 ]
      
    | bb53 = s0 [ s0 = is_none'0 {_110} (fun (_ret':bool) ->  [ &_108 <- _ret' ] s1) | s1 = bb54 ] 
    | bb54 = any [ br0 -> {_108 = false} (! bb56) | br1 -> {_108} (! bb55) ] 
    | bb55 = s0
      [ s0 = saturating_duration_since'0 {greater_instant} {instant}
          (fun (_ret':t_Duration'0) ->  [ &_117 <- _ret' ] s1)
      | s1 = bb57 ]
      
    | bb57 = s0 [ s0 = gt'0 {_117} {zero_dur} (fun (_ret':bool) ->  [ &_115 <- _ret' ] s1) | s1 = bb58 ] 
    | bb58 = any [ br0 -> {_115 = false} (! bb60) | br1 -> {_115} (! bb59) ] 
    | bb59 = s0
      [ s0 = saturating_duration_since'0 {instant} {greater_instant}
          (fun (_ret':t_Duration'0) ->  [ &_125 <- _ret' ] s1)
      | s1 = bb61 ]
      
    | bb61 = s0 [ s0 = eq'1 {_125} {zero_dur} (fun (_ret':bool) ->  [ &_123 <- _ret' ] s1) | s1 = bb62 ] 
    | bb62 = any [ br0 -> {_123 = false} (! bb64) | br1 -> {_123} (! bb63) ] 
    | bb63 = return' {_0}
    | bb64 = {[%#sinstant6] false} any
    | bb60 = {[%#sinstant7] false} any
    | bb56 = {[%#sinstant8] false} any
    | bb52 = {[%#sinstant9] false} any
    | bb48 = {[%#sinstant10] false} any
    | bb44 = {[%#sinstant11] false} any
    | bb40 = {[%#sinstant12] false} any
    | bb36 = {[%#sinstant13] false} any
    | bb32 = {[%#sinstant14] false} any
    | bb27 = {[%#sinstant15] false} any
    | bb23 = {[%#sinstant16] false} any
    | bb15 = {[%#sinstant17] false} any
    | bb11 = {[%#sinstant18] false} any
    | bb6 = {[%#sinstant19] false} any ]
    )
    [ & _0 : () = any_l ()
    | & instant : t_Instant'0 = any_l ()
    | & zero_dur : t_Duration'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Duration'0 = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : t_Instant'0 = any_l ()
    | & _14 : t_Option'0 = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : t_Instant'0 = any_l ()
    | & three_seconds : t_Duration'0 = any_l ()
    | & greater_instant : t_Instant'0 = any_l ()
    | & even_greater_instant : t_Instant'0 = any_l ()
    | & _39 : bool = any_l ()
    | & _41 : t_Instant'0 = any_l ()
    | & _42 : t_Option'0 = any_l ()
    | & _48 : bool = any_l ()
    | & _50 : t_Instant'0 = any_l ()
    | & lesser_instant : t_Instant'0 = any_l ()
    | & _61 : bool = any_l ()
    | & _63 : t_Duration'0 = any_l ()
    | & _69 : bool = any_l ()
    | & _71 : t_Duration'0 = any_l ()
    | & _77 : bool = any_l ()
    | & _79 : t_Duration'0 = any_l ()
    | & _85 : bool = any_l ()
    | & _87 : t_Duration'0 = any_l ()
    | & _93 : bool = any_l ()
    | & _95 : t_Duration'0 = any_l ()
    | & _101 : bool = any_l ()
    | & _103 : t_Option'1 = any_l ()
    | & _108 : bool = any_l ()
    | & _110 : t_Option'1 = any_l ()
    | & _115 : bool = any_l ()
    | & _117 : t_Duration'0 = any_l ()
    | & _123 : bool = any_l ()
    | & _125 : t_Duration'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
