
module Std_Sys_Pal_Unix_Time_Nanoseconds_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_nanoseconds  =
    | C_Nanoseconds uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nanoseconds (input:t_nanoseconds) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Nanoseconds field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_Nanoseconds field_0 <> input} {false} any ]
    
end
module Std_Sys_Pal_Unix_Time_Timespec_Type
  use Std_Sys_Pal_Unix_Time_Nanoseconds_Type as Nanoseconds'0
  
  use prelude.prelude.Int64
  
  use prelude.prelude.Int
  
  type t_timespec  =
    | C_Timespec int64 (Nanoseconds'0.t_nanoseconds)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_timespec (input:t_timespec) (ret  (tv_sec:int64) (tv_nsec:Nanoseconds'0.t_nanoseconds))= any
    [ good (tv_sec:int64) (tv_nsec:Nanoseconds'0.t_nanoseconds)-> {C_Timespec tv_sec tv_nsec = input}
      (! ret {tv_sec} {tv_nsec})
    | bad (tv_sec:int64) (tv_nsec:Nanoseconds'0.t_nanoseconds)-> {C_Timespec tv_sec tv_nsec <> input} {false} any ]
    
end
module Std_Sys_Pal_Unix_Time_Instant_Type
  use Std_Sys_Pal_Unix_Time_Timespec_Type as Timespec'0
  
  type t_instant  =
    | C_Instant (Timespec'0.t_timespec)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_instant (input:t_instant) (ret  (t:Timespec'0.t_timespec))= any
    [ good (t:Timespec'0.t_timespec)-> {C_Instant t = input} (! ret {t})
    | bad (t:Timespec'0.t_timespec)-> {C_Instant t <> input} {false} any ]
    
end
module Std_Time_Instant_Type
  use Std_Sys_Pal_Unix_Time_Instant_Type as Instant'0
  
  type t_instant  =
    | C_Instant (Instant'0.t_instant)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_instant (input:t_instant) (ret  (field_0:Instant'0.t_instant))= any
    [ good (field_0:Instant'0.t_instant)-> {C_Instant field_0 = input} (! ret {field_0})
    | bad (field_0:Instant'0.t_instant)-> {C_Instant field_0 <> input} {false} any ]
    
end
module Core_Time_Nanoseconds_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_nanoseconds  =
    | C_Nanoseconds uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nanoseconds (input:t_nanoseconds) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_Nanoseconds field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_Nanoseconds field_0 <> input} {false} any ]
    
end
module Core_Time_Duration_Type
  use Core_Time_Nanoseconds_Type as Nanoseconds'0
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Int
  
  type t_duration  =
    | C_Duration uint64 (Nanoseconds'0.t_nanoseconds)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_duration (input:t_duration) (ret  (secs:uint64) (nanos:Nanoseconds'0.t_nanoseconds))= any
    [ good (secs:uint64) (nanos:Nanoseconds'0.t_nanoseconds)-> {C_Duration secs nanos = input} (! ret {secs} {nanos})
    | bad (secs:uint64) (nanos:Nanoseconds'0.t_nanoseconds)-> {C_Duration secs nanos <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Instant_TestInstant
  let%span sinstant0 = "../instant.rs" 8 18 8 32
  
  let%span sinstant1 = "../instant.rs" 9 39 9 40
  
  let%span sinstant2 = "../instant.rs" 14 44 14 45
  
  let%span sinstant3 = "../instant.rs" 16 18 16 45
  
  let%span sinstant4 = "../instant.rs" 18 18 18 50
  
  let%span sinstant5 = "../instant.rs" 23 18 23 44
  
  let%span sinstant6 = "../instant.rs" 33 4 33 75
  
  let%span sinstant7 = "../instant.rs" 32 4 32 74
  
  let%span sinstant8 = "../instant.rs" 31 4 31 70
  
  let%span sinstant9 = "../instant.rs" 30 4 30 70
  
  let%span sinstant10 = "../instant.rs" 29 4 29 64
  
  let%span sinstant11 = "../instant.rs" 28 4 28 63
  
  let%span sinstant12 = "../instant.rs" 26 4 26 49
  
  let%span sinstant13 = "../instant.rs" 25 4 25 50
  
  let%span sinstant14 = "../instant.rs" 24 4 24 42
  
  let%span sinstant15 = "../instant.rs" 21 4 21 42
  
  let%span sinstant16 = "../instant.rs" 20 4 20 62
  
  let%span sinstant17 = "../instant.rs" 13 4 13 42
  
  let%span sinstant18 = "../instant.rs" 12 4 12 62
  
  let%span sinstant19 = "../instant.rs" 10 4 10 42
  
  let%span span20 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 140 16 146 17
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 262 8 267 9
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span36 = "../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14
  
  let%span span37 = "../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23
  
  let%span span38 = "../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32
  
  let%span span39 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span40 = "../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13
  
  let%span span41 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span42 = "../../../../creusot-contracts/src/logic/ord.rs" 41 20 41 56
  
  let%span span43 = "../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19
  
  let%span span44 = "../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28
  
  let%span span45 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span46 = "../../../../creusot-contracts/src/logic/ord.rs" 31 20 31 53
  
  let%span span47 = "../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19
  
  let%span span48 = "../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28
  
  let%span span49 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span50 = "../../../../creusot-contracts/src/logic/ord.rs" 21 20 21 53
  
  let%span span51 = "../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19
  
  let%span span52 = "../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28
  
  let%span span53 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span54 = "../../../../creusot-contracts/src/logic/ord.rs" 11 20 11 56
  
  let%span span55 = "../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19
  
  let%span span56 = "../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28
  
  let%span span57 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span58 = "" 0 0 0 0
  
  let%span span59 = "../../../../creusot-contracts/src/std/time.rs" 13 14 13 77
  
  let%span span60 = "../../../../creusot-contracts/src/std/time.rs" 57 14 57 25
  
  let%span span61 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span62 = "../../../../creusot-contracts/src/std/time.rs" 177 16 177 60
  
  let%span span63 = "../../../../creusot-contracts/src/std/time.rs" 178 16 178 62
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../creusot-contracts/src/std/option.rs" 38 26 38 51
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "../../../../creusot-contracts/src/std/option.rs" 34 26 34 51
  
  let%span span68 = "../../../../creusot-contracts/src/std/time.rs" 172 16 172 64
  
  let%span span69 = "../../../../creusot-contracts/src/std/time.rs" 173 16 173 63
  
  let%span span70 = "../../../../creusot-contracts/src/std/time.rs" 167 16 167 60
  
  let%span span71 = "../../../../creusot-contracts/src/std/time.rs" 168 16 168 62
  
  let%span span72 = "../../../../creusot-contracts/src/std/time.rs" 25 14 25 77
  
  let%span span73 = "../../../../creusot-contracts/src/std/time.rs" 26 14 26 44
  
  let%span span74 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "" 0 0 0 0
  
  let%span span77 = "../../../../creusot-contracts/src/std/cmp.rs" 39 26 39 76
  
  let%span span78 = "../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  let%span span79 = "../../../../creusot-contracts/src/std/time.rs" 226 8 226 50
  
  let%span span80 = "../../../../creusot-contracts/src/std/time.rs" 227 8 227 52
  
  let%span span81 = "../../../../creusot-contracts/src/std/time.rs" 219 8 219 50
  
  let%span span82 = "../../../../creusot-contracts/src/std/time.rs" 220 8 220 48
  
  let%span span83 = "../../../../creusot-contracts/src/std/time.rs" 69 14 69 25
  
  let%span span84 = "../../../../creusot-contracts/src/std/time.rs" 70 14 70 44
  
  let%span span85 = "../../../../creusot-contracts/src/std/option.rs" 10 8 13 9
  
  let%span span86 = "../../../../creusot-contracts/src/std/time.rs" 187 16 187 81
  
  let%span span87 = "../../../../creusot-contracts/src/std/time.rs" 188 16 188 97
  
  let%span span88 = "../../../../creusot-contracts/src/std/time.rs" 212 8 212 50
  
  let%span span89 = "../../../../creusot-contracts/src/std/time.rs" 213 8 213 48
  
  let%span span90 = "../../../../creusot-contracts/src/std/option.rs" 29 0 140 1
  
  let%span span91 = "" 0 0 0 0
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "../../../../creusot-contracts/src/std/time.rs" 182 16 182 81
  
  let%span span94 = "../../../../creusot-contracts/src/std/time.rs" 183 16 183 97
  
  let%span span95 = "" 0 0 0 0
  
  let%span span96 = "" 0 0 0 0
  
  let%span span97 = "../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77
  
  let%span span98 = "../../../../creusot-contracts/src/std/time.rs" 163 26 163 38
  
  let%span span99 = "../../../../creusot-contracts/src/std/time.rs" 86 26 86 57
  
  let%span span100 = "../../../../creusot-contracts/src/std/time.rs" 160 26 160 38
  
  use prelude.prelude.Int
  
  function eq_cmp'2 (_1 : int) (_2 : int) : ()
  
  function antisym2'2 (_1 : int) (_2 : int) : ()
  
  function antisym1'2 (_1 : int) (_2 : int) : ()
  
  use Core_Cmp_Ordering_Type as Ordering'0
  
  function trans'2 (_1 : int) (_2 : int) (_3 : int) (_4 : Ordering'0.t_ordering) : ()
  
  function refl'2 (_1 : int) : ()
  
  function cmp_gt_log'2 (_1 : int) (_2 : int) : ()
  
  function cmp_ge_log'2 (_1 : int) (_2 : int) : ()
  
  function cmp_lt_log'2 (_1 : int) (_2 : int) : ()
  
  function cmp_le_log'2 (_1 : int) (_2 : int) : ()
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'4 (self : Option'0.t_option int) =
    [%#span20] true
  
  predicate inv'4 (_x : Option'0.t_option int)
  
  axiom inv'4 : forall x : Option'0.t_option int . inv'4 x = true
  
  function eq_cmp'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  function antisym2'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  function antisym1'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  function trans'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) (_3 : Option'0.t_option int) (_4 : Ordering'0.t_ordering) : ()
    
  
  function refl'1 (_1 : Option'0.t_option int) : ()
  
  function cmp_gt_log'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  function cmp_ge_log'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  function cmp_lt_log'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  function cmp_le_log'1 (_1 : Option'0.t_option int) (_2 : Option'0.t_option int) : ()
  
  use Core_Time_Duration_Type as Duration'0
  
  predicate invariant'3 (self : Option'0.t_option (Duration'0.t_duration)) =
    [%#span20] true
  
  predicate inv'3 (_x : Option'0.t_option (Duration'0.t_duration))
  
  axiom inv'3 : forall x : Option'0.t_option (Duration'0.t_duration) . inv'3 x = true
  
  use Std_Time_Instant_Type as Instant'0
  
  predicate invariant'2 (self : Instant'0.t_instant) =
    [%#span20] true
  
  predicate inv'2 (_x : Instant'0.t_instant)
  
  axiom inv'2 : forall x : Instant'0.t_instant . inv'2 x = true
  
  predicate invariant'1 (self : Option'0.t_option (Instant'0.t_instant)) =
    [%#span20] true
  
  predicate inv'1 (_x : Option'0.t_option (Instant'0.t_instant))
  
  axiom inv'1 : forall x : Option'0.t_option (Instant'0.t_instant) . inv'1 x = true
  
  function cmp_log'1 (self : int) (o : int) : Ordering'0.t_ordering =
    [%#span21] if self < o then Ordering'0.C_Less else if self = o then Ordering'0.C_Equal else Ordering'0.C_Greater
  
  function cmp_log'0 (self : Option'0.t_option int) (o : Option'0.t_option int) : Ordering'0.t_ordering =
    [%#span22] match (self, o) with
      | (Option'0.C_None, Option'0.C_None) -> Ordering'0.C_Equal
      | (Option'0.C_None, Option'0.C_Some _) -> Ordering'0.C_Less
      | (Option'0.C_Some _, Option'0.C_None) -> Ordering'0.C_Greater
      | (Option'0.C_Some x, Option'0.C_Some y) -> cmp_log'1 x y
      end
  
  function eq_cmp'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom eq_cmp'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span23] inv'4 x)
   -> ([%#span24] inv'4 y)  -> ([%#span25] (x = y) = (cmp_log'0 x y = Ordering'0.C_Equal))
  
  function antisym2'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom antisym2'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span26] cmp_log'0 x y
  = Ordering'0.C_Greater)
   -> ([%#span27] inv'4 x)  -> ([%#span28] inv'4 y)  -> ([%#span29] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom antisym1'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span30] cmp_log'0 x y
  = Ordering'0.C_Less)
   -> ([%#span31] inv'4 x)  -> ([%#span32] inv'4 y)  -> ([%#span33] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : Option'0.t_option int) (y : Option'0.t_option int) (z : Option'0.t_option int) (o : Ordering'0.t_ordering) : ()
    
  
  axiom trans'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int, z : Option'0.t_option int, o : Ordering'0.t_ordering . ([%#span34] cmp_log'0 x y
  = o)
   -> ([%#span35] cmp_log'0 y z = o)
   -> ([%#span36] inv'4 x)  -> ([%#span37] inv'4 y)  -> ([%#span38] inv'4 z)  -> ([%#span39] cmp_log'0 x z = o)
  
  function refl'0 (x : Option'0.t_option int) : ()
  
  axiom refl'0_spec : forall x : Option'0.t_option int . ([%#span40] inv'4 x)
   -> ([%#span41] cmp_log'0 x x = Ordering'0.C_Equal)
  
  function gt_log'0 (self : Option'0.t_option int) (o : Option'0.t_option int) : bool =
    [%#span42] cmp_log'0 self o = Ordering'0.C_Greater
  
  function cmp_gt_log'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom cmp_gt_log'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span43] inv'4 x)
   -> ([%#span44] inv'4 y)  -> ([%#span45] gt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Greater))
  
  function ge_log'0 (self : Option'0.t_option int) (o : Option'0.t_option int) : bool =
    [%#span46] cmp_log'0 self o <> Ordering'0.C_Less
  
  function cmp_ge_log'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom cmp_ge_log'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span47] inv'4 x)
   -> ([%#span48] inv'4 y)  -> ([%#span49] ge_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Less))
  
  function lt_log'0 (self : Option'0.t_option int) (o : Option'0.t_option int) : bool =
    [%#span50] cmp_log'0 self o = Ordering'0.C_Less
  
  function cmp_lt_log'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom cmp_lt_log'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span51] inv'4 x)
   -> ([%#span52] inv'4 y)  -> ([%#span53] lt_log'0 x y = (cmp_log'0 x y = Ordering'0.C_Less))
  
  function le_log'0 (self : Option'0.t_option int) (o : Option'0.t_option int) : bool =
    [%#span54] cmp_log'0 self o <> Ordering'0.C_Greater
  
  function cmp_le_log'0 (x : Option'0.t_option int) (y : Option'0.t_option int) : ()
  
  axiom cmp_le_log'0_spec : forall x : Option'0.t_option int, y : Option'0.t_option int . ([%#span55] inv'4 x)
   -> ([%#span56] inv'4 y)  -> ([%#span57] le_log'0 x y = (cmp_log'0 x y <> Ordering'0.C_Greater))
  
  predicate invariant'0 (self : Duration'0.t_duration) =
    [%#span20] true
  
  predicate inv'0 (_x : Duration'0.t_duration)
  
  axiom inv'0 : forall x : Duration'0.t_duration . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  function secs_to_nanos'0 (secs : int) : int
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  constant max'0 : uint64 = [%#span58] (18446744073709551615 : uint64)
  
  function shallow_model'1 (self : Duration'0.t_duration) : int
  
  axiom shallow_model'1_spec : forall self : Duration'0.t_duration . [%#span59] shallow_model'1 self >= 0
  /\ shallow_model'1 self <= secs_to_nanos'0 (UInt64.to_int (max'0 : uint64)) + 999999999
  
  function shallow_model'0 (self : Instant'0.t_instant) : int
  
  axiom shallow_model'0_spec : forall self : Instant'0.t_instant . [%#span60] shallow_model'0 self >= 0
  
  function shallow_model'2 (self : Instant'0.t_instant) : int =
    [%#span61] shallow_model'0 self
  
  let rec saturating_duration_since'0 (self:Instant'0.t_instant) (earlier:Instant'0.t_instant) (return'  (ret:Duration'0.t_duration))= any
    [ return' (result:Duration'0.t_duration)-> {[%#span63] shallow_model'2 self <= shallow_model'0 earlier
       -> shallow_model'1 result = 0}
      {[%#span62] shallow_model'2 self > shallow_model'0 earlier  -> shallow_model'1 result > 0}
      (! return' {result}) ]
    
  
  let rec is_none'0 (self:Option'0.t_option (Duration'0.t_duration)) (return'  (ret:bool))= {[@expl:precondition] [%#span64] inv'3 self}
    any [ return' (result:bool)-> {[%#span65] result = (self = Option'0.C_None)} (! return' {result}) ] 
  
  let rec is_some'0 (self:Option'0.t_option (Duration'0.t_duration)) (return'  (ret:bool))= {[@expl:precondition] [%#span66] inv'3 self}
    any [ return' (result:bool)-> {[%#span67] result = (self <> Option'0.C_None)} (! return' {result}) ] 
  
  let rec checked_duration_since'0 (self:Instant'0.t_instant) (earlier:Instant'0.t_instant) (return'  (ret:Option'0.t_option (Duration'0.t_duration)))= any
    [ return' (result:Option'0.t_option (Duration'0.t_duration))-> {[%#span69] shallow_model'2 self
      < shallow_model'0 earlier  -> result = Option'0.C_None}
      {[%#span68] shallow_model'2 self >= shallow_model'0 earlier  -> result <> Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec duration_since'0 (self:Instant'0.t_instant) (earlier:Instant'0.t_instant) (return'  (ret:Duration'0.t_duration))= any
    [ return' (result:Duration'0.t_duration)-> {[%#span71] shallow_model'2 self <= shallow_model'0 earlier
       -> shallow_model'1 result = 0}
      {[%#span70] shallow_model'2 self > shallow_model'0 earlier  -> shallow_model'1 result > 0}
      (! return' {result}) ]
    
  
  use int.Int
  
  function deep_model'3 (self : Duration'0.t_duration) : int
  
  axiom deep_model'3_spec : forall self : Duration'0.t_duration . ([%#span73] deep_model'3 self = shallow_model'1 self)
  && ([%#span72] deep_model'3 self >= 0
  /\ deep_model'3 self <= secs_to_nanos'0 (UInt64.to_int (max'0 : uint64)) + 999999999)
  
  function deep_model'0 (self : Duration'0.t_duration) : int =
    [%#span74] deep_model'3 self
  
  let rec gt'0 (self:Duration'0.t_duration) (other:Duration'0.t_duration) (return'  (ret:bool))= {[@expl:precondition] [%#span76] inv'0 other}
    {[@expl:precondition] [%#span75] inv'0 self}
    any [ return' (result:bool)-> {[%#span77] result = (deep_model'0 self > deep_model'0 other)} (! return' {result}) ] 
  
  let rec eq'1 (self:Duration'0.t_duration) (other:Duration'0.t_duration) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#span78] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec sub'1 (self:Instant'0.t_instant) (other:Instant'0.t_instant) (return'  (ret:Duration'0.t_duration))= any
    [ return' (result:Duration'0.t_duration)-> {[%#span80] shallow_model'0 self <= shallow_model'0 other
       -> shallow_model'1 result = 0}
      {[%#span79] shallow_model'0 self > shallow_model'0 other  -> shallow_model'1 result > 0}
      (! return' {result}) ]
    
  
  let rec sub'0 (self:Instant'0.t_instant) (other:Duration'0.t_duration) (return'  (ret:Instant'0.t_instant))= any
    [ return' (result:Instant'0.t_instant)-> {[%#span82] shallow_model'1 other > 0
       -> shallow_model'0 self > shallow_model'0 result}
      {[%#span81] shallow_model'1 other = 0  -> shallow_model'0 self = shallow_model'0 result}
      (! return' {result}) ]
    
  
  function deep_model'4 (self : Instant'0.t_instant) : int
  
  axiom deep_model'4_spec : forall self : Instant'0.t_instant . ([%#span84] deep_model'4 self = shallow_model'0 self)
  && ([%#span83] deep_model'4 self >= 0)
  
  function deep_model'1 (self : Option'0.t_option (Instant'0.t_instant)) : Option'0.t_option int =
    [%#span85] match self with
      | Option'0.C_Some t -> Option'0.C_Some (deep_model'4 t)
      | Option'0.C_None -> Option'0.C_None
      end
  
  let rec checked_sub'0 (self:Instant'0.t_instant) (duration:Duration'0.t_duration) (return'  (ret:Option'0.t_option (Instant'0.t_instant)))= any
    [ return' (result:Option'0.t_option (Instant'0.t_instant))-> {[%#span87] shallow_model'1 duration > 0
      /\ result <> Option'0.C_None  -> gt_log'0 (Option'0.C_Some (shallow_model'2 self)) (deep_model'1 result)}
      {[%#span86] shallow_model'1 duration = 0  -> deep_model'1 result = Option'0.C_Some (shallow_model'2 self)}
      (! return' {result}) ]
    
  
  let rec add'0 (self:Instant'0.t_instant) (other:Duration'0.t_duration) (return'  (ret:Instant'0.t_instant))= any
    [ return' (result:Instant'0.t_instant)-> {[%#span89] shallow_model'1 other > 0
       -> shallow_model'0 self < shallow_model'0 result}
      {[%#span88] shallow_model'1 other = 0  -> shallow_model'0 self = shallow_model'0 result}
      (! return' {result}) ]
    
  
  function deep_model'2 (self : Instant'0.t_instant) : int =
    [%#span74] deep_model'4 self
  
  let rec eq'0 (self:Instant'0.t_instant) (other:Instant'0.t_instant) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#span78] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_option (Instant'0.t_instant)) (return'  (ret:Instant'0.t_instant))= {[@expl:precondition] [%#span91] inv'1 self}
    {[@expl:precondition] [%#span90] self <> Option'0.C_None}
    any
    [ return' (result:Instant'0.t_instant)-> {[%#span92] inv'2 result}
      {[%#span90] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec checked_add'0 (self:Instant'0.t_instant) (duration:Duration'0.t_duration) (return'  (ret:Option'0.t_option (Instant'0.t_instant)))= any
    [ return' (result:Option'0.t_option (Instant'0.t_instant))-> {[%#span94] shallow_model'1 duration > 0
      /\ result <> Option'0.C_None  -> lt_log'0 (Option'0.C_Some (shallow_model'2 self)) (deep_model'1 result)}
      {[%#span93] shallow_model'1 duration = 0  -> deep_model'1 result = Option'0.C_Some (shallow_model'2 self)}
      (! return' {result}) ]
    
  
  use int.Int
  
  let rec ge'0 (self:Duration'0.t_duration) (other:Duration'0.t_duration) (return'  (ret:bool))= {[@expl:precondition] [%#span96] inv'0 other}
    {[@expl:precondition] [%#span95] inv'0 self}
    any
    [ return' (result:bool)-> {[%#span97] result = (deep_model'0 self >= deep_model'0 other)} (! return' {result}) ]
    
  
  let rec elapsed'0 (self:Instant'0.t_instant) (return'  (ret:Duration'0.t_duration))= any
    [ return' (result:Duration'0.t_duration)-> {[%#span98] shallow_model'1 result >= 0} (! return' {result}) ]
    
  
  let rec from_secs'0 (secs:uint64) (return'  (ret:Duration'0.t_duration))= any
    [ return' (result:Duration'0.t_duration)-> {[%#span99] shallow_model'1 result
      = secs_to_nanos'0 (UInt64.to_int secs)}
      (! return' {result}) ]
    
  
  let rec now'0 (_1:()) (return'  (ret:Instant'0.t_instant))= any
    [ return' (result:Instant'0.t_instant)-> {[%#span100] shallow_model'0 result >= 0} (! return' {result}) ]
    
  
  let rec test_instant (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = now'0 {[%#sinstant0] ()} (fun (_ret':Instant'0.t_instant) ->  [ &instant <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = from_secs'0 {[%#sinstant1] (0 : uint64)} (fun (_ret':Duration'0.t_duration) ->  [ &zero_dur <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = elapsed'0 {instant} (fun (_ret':Duration'0.t_duration) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = ge'0 {_6} {zero_dur} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb5) ] 
    | bb5 = s0
      [ s0 = checked_add'0 {instant} {zero_dur}
          (fun (_ret':Option'0.t_option (Instant'0.t_instant)) ->  [ &_14 <- _ret' ] s1)
      | s1 = bb7 ]
      
    | bb7 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':Instant'0.t_instant) ->  [ &_13 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0 [ s0 = eq'0 {_13} {instant} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = any [ br0 -> {_11 = false} (! bb11) | br1 -> {_11} (! bb10) ] 
    | bb10 = s0
      [ s0 = add'0 {instant} {zero_dur} (fun (_ret':Instant'0.t_instant) ->  [ &_22 <- _ret' ] s1) | s1 = bb12 ]
      
    | bb12 = s0 [ s0 = eq'0 {_22} {instant} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = any [ br0 -> {_20 = false} (! bb15) | br1 -> {_20} (! bb14) ] 
    | bb14 = s0
      [ s0 = from_secs'0 {[%#sinstant2] (3 : uint64)}
          (fun (_ret':Duration'0.t_duration) ->  [ &three_seconds <- _ret' ] s1)
      | s1 = bb16 ]
      
    | bb16 = s0
      [ s0 = add'0 {instant} {three_seconds} (fun (_ret':Instant'0.t_instant) ->  [ &greater_instant <- _ret' ] s1)
      | s1 = bb17 ]
      
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#sinstant3] shallow_model'0 instant < shallow_model'0 greater_instant} s1
      | s1 = add'0 {greater_instant} {three_seconds}
          (fun (_ret':Instant'0.t_instant) ->  [ &even_greater_instant <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sinstant4] shallow_model'0 instant < shallow_model'0 even_greater_instant} s1
      | s1 = checked_sub'0 {instant} {zero_dur}
          (fun (_ret':Option'0.t_option (Instant'0.t_instant)) ->  [ &_42 <- _ret' ] s2)
      | s2 = bb19 ]
      
    | bb19 = s0 [ s0 = unwrap'0 {_42} (fun (_ret':Instant'0.t_instant) ->  [ &_41 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0 [ s0 = eq'0 {_41} {instant} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = any [ br0 -> {_39 = false} (! bb23) | br1 -> {_39} (! bb22) ] 
    | bb22 = s0
      [ s0 = sub'0 {instant} {zero_dur} (fun (_ret':Instant'0.t_instant) ->  [ &_50 <- _ret' ] s1) | s1 = bb24 ]
      
    | bb24 = s0 [ s0 = eq'0 {_50} {instant} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = any [ br0 -> {_48 = false} (! bb27) | br1 -> {_48} (! bb26) ] 
    | bb26 = s0
      [ s0 = sub'0 {instant} {three_seconds} (fun (_ret':Instant'0.t_instant) ->  [ &lesser_instant <- _ret' ] s1)
      | s1 = bb28 ]
      
    | bb28 = s0
      [ s0 = {[@expl:assertion] [%#sinstant5] shallow_model'0 instant > shallow_model'0 lesser_instant} s1
      | s1 = sub'1 {instant} {instant} (fun (_ret':Duration'0.t_duration) ->  [ &_63 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0 [ s0 = eq'1 {_63} {zero_dur} (fun (_ret':bool) ->  [ &_61 <- _ret' ] s1) | s1 = bb30 ] 
    | bb30 = any [ br0 -> {_61 = false} (! bb32) | br1 -> {_61} (! bb31) ] 
    | bb31 = s0
      [ s0 = sub'1 {instant} {greater_instant} (fun (_ret':Duration'0.t_duration) ->  [ &_71 <- _ret' ] s1)
      | s1 = bb33 ]
      
    | bb33 = s0 [ s0 = eq'1 {_71} {zero_dur} (fun (_ret':bool) ->  [ &_69 <- _ret' ] s1) | s1 = bb34 ] 
    | bb34 = any [ br0 -> {_69 = false} (! bb36) | br1 -> {_69} (! bb35) ] 
    | bb35 = s0
      [ s0 = sub'1 {greater_instant} {instant} (fun (_ret':Duration'0.t_duration) ->  [ &_79 <- _ret' ] s1)
      | s1 = bb37 ]
      
    | bb37 = s0 [ s0 = gt'0 {_79} {zero_dur} (fun (_ret':bool) ->  [ &_77 <- _ret' ] s1) | s1 = bb38 ] 
    | bb38 = any [ br0 -> {_77 = false} (! bb40) | br1 -> {_77} (! bb39) ] 
    | bb39 = s0
      [ s0 = duration_since'0 {greater_instant} {instant} (fun (_ret':Duration'0.t_duration) ->  [ &_87 <- _ret' ] s1)
      | s1 = bb41 ]
      
    | bb41 = s0 [ s0 = gt'0 {_87} {zero_dur} (fun (_ret':bool) ->  [ &_85 <- _ret' ] s1) | s1 = bb42 ] 
    | bb42 = any [ br0 -> {_85 = false} (! bb44) | br1 -> {_85} (! bb43) ] 
    | bb43 = s0
      [ s0 = duration_since'0 {instant} {greater_instant} (fun (_ret':Duration'0.t_duration) ->  [ &_95 <- _ret' ] s1)
      | s1 = bb45 ]
      
    | bb45 = s0 [ s0 = eq'1 {_95} {zero_dur} (fun (_ret':bool) ->  [ &_93 <- _ret' ] s1) | s1 = bb46 ] 
    | bb46 = any [ br0 -> {_93 = false} (! bb48) | br1 -> {_93} (! bb47) ] 
    | bb47 = s0
      [ s0 = checked_duration_since'0 {greater_instant} {instant}
          (fun (_ret':Option'0.t_option (Duration'0.t_duration)) ->  [ &_103 <- _ret' ] s1)
      | s1 = bb49 ]
      
    | bb49 = s0 [ s0 = is_some'0 {_103} (fun (_ret':bool) ->  [ &_101 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = any [ br0 -> {_101 = false} (! bb52) | br1 -> {_101} (! bb51) ] 
    | bb51 = s0
      [ s0 = checked_duration_since'0 {instant} {greater_instant}
          (fun (_ret':Option'0.t_option (Duration'0.t_duration)) ->  [ &_110 <- _ret' ] s1)
      | s1 = bb53 ]
      
    | bb53 = s0 [ s0 = is_none'0 {_110} (fun (_ret':bool) ->  [ &_108 <- _ret' ] s1) | s1 = bb54 ] 
    | bb54 = any [ br0 -> {_108 = false} (! bb56) | br1 -> {_108} (! bb55) ] 
    | bb55 = s0
      [ s0 = saturating_duration_since'0 {greater_instant} {instant}
          (fun (_ret':Duration'0.t_duration) ->  [ &_117 <- _ret' ] s1)
      | s1 = bb57 ]
      
    | bb57 = s0 [ s0 = gt'0 {_117} {zero_dur} (fun (_ret':bool) ->  [ &_115 <- _ret' ] s1) | s1 = bb58 ] 
    | bb58 = any [ br0 -> {_115 = false} (! bb60) | br1 -> {_115} (! bb59) ] 
    | bb59 = s0
      [ s0 = saturating_duration_since'0 {instant} {greater_instant}
          (fun (_ret':Duration'0.t_duration) ->  [ &_125 <- _ret' ] s1)
      | s1 = bb61 ]
      
    | bb61 = s0 [ s0 = eq'1 {_125} {zero_dur} (fun (_ret':bool) ->  [ &_123 <- _ret' ] s1) | s1 = bb62 ] 
    | bb62 = any [ br0 -> {_123 = false} (! bb64) | br1 -> {_123} (! bb63) ] 
    | bb63 = return' {_0}
    | bb64 = {[%#sinstant6] false} any
    | bb60 = {[%#sinstant7] false} any
    | bb56 = {[%#sinstant8] false} any
    | bb52 = {[%#sinstant9] false} any
    | bb48 = {[%#sinstant10] false} any
    | bb44 = {[%#sinstant11] false} any
    | bb40 = {[%#sinstant12] false} any
    | bb36 = {[%#sinstant13] false} any
    | bb32 = {[%#sinstant14] false} any
    | bb27 = {[%#sinstant15] false} any
    | bb23 = {[%#sinstant16] false} any
    | bb15 = {[%#sinstant17] false} any
    | bb11 = {[%#sinstant18] false} any
    | bb6 = {[%#sinstant19] false} any ]
    )
    [ & _0 : () = any_l ()
    | & instant : Instant'0.t_instant = any_l ()
    | & zero_dur : Duration'0.t_duration = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : Duration'0.t_duration = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : Instant'0.t_instant = any_l ()
    | & _14 : Option'0.t_option (Instant'0.t_instant) = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : Instant'0.t_instant = any_l ()
    | & three_seconds : Duration'0.t_duration = any_l ()
    | & greater_instant : Instant'0.t_instant = any_l ()
    | & even_greater_instant : Instant'0.t_instant = any_l ()
    | & _39 : bool = any_l ()
    | & _41 : Instant'0.t_instant = any_l ()
    | & _42 : Option'0.t_option (Instant'0.t_instant) = any_l ()
    | & _48 : bool = any_l ()
    | & _50 : Instant'0.t_instant = any_l ()
    | & lesser_instant : Instant'0.t_instant = any_l ()
    | & _61 : bool = any_l ()
    | & _63 : Duration'0.t_duration = any_l ()
    | & _69 : bool = any_l ()
    | & _71 : Duration'0.t_duration = any_l ()
    | & _77 : bool = any_l ()
    | & _79 : Duration'0.t_duration = any_l ()
    | & _85 : bool = any_l ()
    | & _87 : Duration'0.t_duration = any_l ()
    | & _93 : bool = any_l ()
    | & _95 : Duration'0.t_duration = any_l ()
    | & _101 : bool = any_l ()
    | & _103 : Option'0.t_option (Duration'0.t_duration) = any_l ()
    | & _108 : bool = any_l ()
    | & _110 : Option'0.t_option (Duration'0.t_duration) = any_l ()
    | & _115 : bool = any_l ()
    | & _117 : Duration'0.t_duration = any_l ()
    | & _123 : bool = any_l ()
    | & _125 : Duration'0.t_duration = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
