
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module Immut_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module Immut_F
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  let rec cfg f [@cfg:stackify] [#"../immut.rs" 3 0 3 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : uint32;
  var b_2 : borrowed uint32;
  var _c_3 : uint32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : uint32);
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    _c_3 <-  * b_2;
    assume { Resolve0.resolve b_2 };
    _0 <- ();
    return _0
  }
  
end
