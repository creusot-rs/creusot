
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Immut_F_Interface
  val f [#"../immut.rs" 3 0 3 10] (_1' : ()) : ()
end
module Immut_F
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg f [#"../immut.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : uint32;
  var b_2 : borrowed uint32;
  var _c_3 : uint32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../immut.rs" 4 16 4 18] (10 : uint32));
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    _c_3 <-  * b_2;
    _0 <- ();
    assume { Resolve0.resolve b_2 };
    return _0
  }
  
end
