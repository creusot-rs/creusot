
module Loop_F
  use prelude.Borrow
  use prelude.Int32
  predicate resolve0 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed int32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg f [#"../loop.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    [#"../loop.rs" 4 16 4 18] a <- ([#"../loop.rs" 4 16 4 18] [#"../loop.rs" 4 16 4 18] (10 : int32));
    [#"../loop.rs" 5 12 5 18] b <- Borrow.borrow_mut a;
    [#"../loop.rs" 5 12 5 18] a <-  ^ b;
    [#"../loop.rs" 6 4 6 10] b <- { b with current = ([#"../loop.rs" 6 4 6 10] [#"../loop.rs" 6 9 6 10] (5 : int32)) };
    assume { resolve0 b };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch ([#"../loop.rs" 8 11 8 15] [#"../loop.rs" 8 11 8 15] true)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    [#"../loop.rs" 3 11 13 1] _0 <- ([#"../loop.rs" 3 11 13 1] ());
    return _0
  }
  BB4 {
    goto BB1
  }
  
end
