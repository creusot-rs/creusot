
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Loop_F_Interface
  val f [#"../loop.rs" 3 0 3 10] (_1 : ()) : ()
end
module Loop_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg f [#"../loop.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../loop.rs" 4 16 4 18] [#"../loop.rs" 4 16 4 18] (10 : int32));
    b <- Borrow.borrow_mut a;
    a <-  ^ b;
    b <- { b with current = ([#"../loop.rs" 6 9 6 10] [#"../loop.rs" 6 9 6 10] (5 : int32)) };
    assume { Resolve0.resolve b };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch ([#"../loop.rs" 8 11 8 15] [#"../loop.rs" 8 11 8 15] true)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    _0 <- ([#"../loop.rs" 3 11 13 1] ());
    return _0
  }
  BB4 {
    goto BB1
  }
  
end
