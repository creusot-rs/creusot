
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Loop_F_Interface
  val f [#"../loop.rs" 3 0 3 10] (_1' : ()) : ()
end
module Loop_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg f [#"../loop.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var b_2 : borrowed int32;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : ();
  var _7 : bool;
  var _8 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../loop.rs" 4 16 4 18] (10 : int32));
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    b_2 <- { b_2 with current = ([#"../loop.rs" 6 9 6 10] (5 : int32)) };
    assume { Resolve0.resolve b_2 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _5 <- ([#"../loop.rs" 8 11 8 15] true);
    switch (_5)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    _3 <- ();
    _8 <- a_1;
    _7 <- ([#"../loop.rs" 12 12 12 19] _8 = ([#"../loop.rs" 12 17 12 19] (15 : int32)));
    _0 <- ();
    return _0
  }
  BB4 {
    _4 <- ();
    goto BB1
  }
  
end
