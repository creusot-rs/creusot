
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module OrdTrait_X
  type t
  type deep_model_ty0
  predicate invariant2 (self : deep_model_ty0)
  val invariant2 (self : deep_model_ty0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : deep_model_ty0)
  val inv2 (_x : deep_model_ty0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : deep_model_ty0 . inv2 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y)
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y
    = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y
  = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y
    = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y
  = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y
  = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y
  = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y
  = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  use prelude.Borrow
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  function deep_model2 (self : t) : deep_model_ty0
  val deep_model2 (self : t) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  function deep_model1 (self : t) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model2 self
  val deep_model1 (self : t) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  function deep_model0 (self : t) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model1 self
  val deep_model0 (self : t) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  val le0 (self : t) (other : t) : bool
    requires {inv1 self}
    requires {inv1 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77] result
    = le_log0 (deep_model0 self) (deep_model0 other) }
    
  let rec cfg x [#"../ord_trait.rs" 5 0 7 29] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) : bool
    requires {[#"../ord_trait.rs" 5 29 5 30] inv0 x}
    ensures { [#"../ord_trait.rs" 4 10 4 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : t = x;
  var _5 : t;
  {
    goto BB0
  }
  BB0 {
    [#"../ord_trait.rs" 9 9 9 10] _5 <- x;
    [#"../ord_trait.rs" 9 4 9 10] _0 <- ([#"../ord_trait.rs" 9 4 9 10] le0 x _5);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 _5 };
    assume { resolve0 _5 };
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    return _0
  }
  
end
module OrdTrait_GtOrLe
  type t
  type deep_model_ty0
  predicate invariant2 (self : deep_model_ty0)
  val invariant2 (self : deep_model_ty0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : deep_model_ty0)
  val inv2 (_x : deep_model_ty0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : deep_model_ty0 . inv2 x = true
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y)
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y
    = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y
  = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y
    = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y
  = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y
  = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y
  = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y
  = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y
  = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  function deep_model0 (self : t) : deep_model_ty0
  val deep_model0 (self : t) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use prelude.Borrow
  function deep_model2 (self : t) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model0 self
  val deep_model2 (self : t) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  function deep_model1 (self : t) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 81 8 81 28] deep_model2 self
  val deep_model1 (self : t) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  val ge0 (self : t) (other : t) : bool
    requires {inv1 self}
    requires {inv1 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 42 26 42 77] result
    = ge_log0 (deep_model1 self) (deep_model1 other) }
    
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg gt_or_le [#"../ord_trait.rs" 13 0 15 29] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) (y : t) : bool
    requires {[#"../ord_trait.rs" 13 36 13 37] inv0 x}
    requires {[#"../ord_trait.rs" 13 43 13 44] inv0 y}
    ensures { [#"../ord_trait.rs" 12 10 12 60] result = le_log0 (deep_model0 y) (deep_model0 x) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : t = x;
  var y : t = y;
  var _6 : t;
  {
    goto BB0
  }
  BB0 {
    [#"../ord_trait.rs" 17 9 17 10] _6 <- y;
    assert { [@expl:type invariant] inv0 y };
    assume { resolve0 y };
    [#"../ord_trait.rs" 17 4 17 10] _0 <- ([#"../ord_trait.rs" 17 4 17 10] ge0 x _6);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 _6 };
    assume { resolve0 _6 };
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    return _0
  }
  
end
module OrdTrait_GtOrLeInt
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  let rec cfg gt_or_le_int [#"../ord_trait.rs" 21 0 21 47] [@cfg:stackify] [@cfg:subregion_analysis] (x : usize) (y : usize) : bool
    ensures { [#"../ord_trait.rs" 20 10 20 30] result = (UIntSize.to_int x <= UIntSize.to_int y) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x : usize = x;
  var y : usize = y;
  {
    goto BB0
  }
  BB0 {
    [#"../ord_trait.rs" 22 4 22 10] _0 <- x <= y;
    return _0
  }
  
end
