module M_option__is_some_none [#"option.rs" 6 0 6 21]
  let%span soption0 = "option.rs" 8 33 8 34
  let%span soption1 = "option.rs" 11 4 11 46
  let%span soption2 = "option.rs" 10 4 10 46
  let%span soption3 = "../../../creusot-contracts/src/std/option.rs" 36 26 36 51
  let%span soption4 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  let rec is_some'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_some 'self' type invariant] inv'0 self}
    any [ return' (result:bool)-> {[%#soption3] result = (self <> C_None'0)} (! return' {result}) ] 
  
  let rec is_none'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'0 self}
    any [ return' (result:bool)-> {[%#soption4] result = (self = C_None'0)} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec is_some_none'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = is_some'0 {some} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0 [ s0 = is_some'0 {none} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ] 
    | bb4 = bb7
    | bb5 = s0 [ s0 = is_none'0 {some} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = any [ br0 -> {_10 = false} (! bb10) | br1 -> {_10} (! bb9) ] 
    | bb9 = bb14
    | bb10 = s0 [ s0 = is_none'0 {none} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = any [ br0 -> {_12 = false} (! bb13) | br1 -> {_12} (! bb12) ] 
    | bb12 = return' {_0}
    | bb13 = bb14
    | bb14 = {[%#soption1] false} any
    | bb6 = bb7
    | bb7 = {[%#soption2] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : bool = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__unwrap [#"option.rs" 15 0 15 15]
  let%span soption0 = "option.rs" 17 33 17 34
  let%span soption1 = "option.rs" 19 29 19 30
  let%span soption2 = "option.rs" 20 24 20 32
  let%span soption3 = "option.rs" 20 37 20 38
  let%span soption4 = "option.rs" 22 27 22 28
  let%span soption5 = "option.rs" 22 33 22 34
  let%span soption6 = "option.rs" 23 27 23 28
  let%span soption7 = "option.rs" 23 33 23 34
  let%span soption8 = "option.rs" 25 40 25 41
  let%span soption9 = "option.rs" 26 40 26 41
  let%span soption10 = "option.rs" 32 13 32 14
  let%span soption11 = "option.rs" 38 13 38 14
  let%span soption12 = "option.rs" 41 50 41 51
  let%span soption13 = "option.rs" 41 4 41 52
  let%span soption14 = "option.rs" 34 4 39 5
  let%span soption15 = "option.rs" 28 4 33 5
  let%span soption16 = "option.rs" 26 4 26 42
  let%span soption17 = "option.rs" 25 4 25 42
  let%span soption18 = "option.rs" 23 4 23 35
  let%span soption19 = "option.rs" 22 4 22 35
  let%span soption20 = "option.rs" 20 4 20 39
  let%span soption21 = "option.rs" 19 4 19 31
  let%span soption22 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption23 = "option.rs" 30 23 30 28
  let%span soption24 = "../../../creusot-contracts/src/std/option.rs" 99 26 102 17
  let%span soption25 = "option.rs" 37 15 37 16
  let%span soption26 = "option.rs" 36 22 36 36
  let%span snum27 = "../../../creusot-contracts/src/std/num.rs" 29 28 29 32
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : int32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  let rec unwrap'1 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'0 self}
    {[@expl:unwrap requires] [%#soption22] self <> C_None'0}
    any [ return' (result:int32)-> {inv'1 result} {[%#soption22] C_Some'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Borrow
  
  let rec expect'0 (self:t_Option'0) (msg:string) (return'  (ret:int32))= {[@expl:expect 'self' type invariant] inv'0 self}
    {[@expl:expect requires] [%#soption22] self <> C_None'0}
    any [ return' (result:int32)-> {inv'1 result} {[%#soption22] C_Some'0 result = self} (! return' {result}) ] 
  
  let rec unwrap_or'0 (self:t_Option'0) (default:int32) (return'  (ret:int32))= {[@expl:unwrap_or 'self' type invariant] inv'0 self}
    {[@expl:unwrap_or 'default' type invariant] inv'1 default}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption22] self = C_None'0  -> result = default}
      {[%#soption22] self = C_None'0 \/ self = C_Some'0 result}
      (! return' {result}) ]
    
  
  predicate is_default'0 (self : int32) =
    [%#snum27] self = (0 : int32)
  
  let rec unwrap_or_default'0 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap_or_default 'self' type invariant] inv'0 self}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption22] self = C_None'0  -> is_default'0 result}
      {[%#soption22] self = C_None'0 \/ self = C_Some'0 result}
      (! return' {result}) ]
    
  
  let rec closure0'0 (_1:()) (return'  (ret:int32))= {[@expl:closure requires] [%#soption23] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:int32)-> (! return' {result}) ] 
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'2 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  predicate precondition'0 (self : ()) (args : ()) =
    [%#soption23] let () = args in false
  
  predicate postcondition_once'0 (self : ()) (args : ()) (result : int32) =
    let () = args in true
  
  let rec unwrap_or_else'0 (self:t_Option'0) (f:()) (return'  (ret:int32))= {[@expl:unwrap_or_else 'self' type invariant] inv'0 self}
    {[@expl:unwrap_or_else 'f' type invariant] inv'2 f}
    {[@expl:unwrap_or_else requires] [%#soption22] self = C_None'0  -> precondition'0 f ()}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption24] match self with
        | C_None'0 -> postcondition_once'0 f () result
        | C_Some'0 t -> result = t
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure1'0 (_1:()) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption25] (3 : int32) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & res : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption26] result = (3 : int32)} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : ()) =
    let () = args in true
  
  predicate postcondition_once'1 (self : ()) (args : ()) (result : int32) =
    [%#soption26] let () = args in result = (3 : int32)
  
  let rec unwrap_or_else'1 (self:t_Option'0) (f:()) (return'  (ret:int32))= {[@expl:unwrap_or_else 'self' type invariant] inv'0 self}
    {[@expl:unwrap_or_else 'f' type invariant] inv'3 f}
    {[@expl:unwrap_or_else requires] [%#soption22] self = C_None'0  -> precondition'1 f ()}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption24] match self with
        | C_None'0 -> postcondition_once'1 f () result
        | C_Some'0 t -> result = t
        end}
      (! return' {result}) ]
    
  
  let rec unwrap_unchecked'0 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap_unchecked 'self' type invariant] inv'0 self}
    {[@expl:unwrap_unchecked requires] [%#soption22] self <> C_None'0}
    any [ return' (result:int32)-> {inv'1 result} {[%#soption22] C_Some'0 result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec unwrap'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = unwrap'1 {some} (fun (_ret':int32) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Int32.eq {_5} {[%#soption1] (1 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 =  [ &_13 <- [%#soption2] "failed" ] s1
      | s1 = expect'0 {some} {_13} (fun (_ret':int32) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = Int32.eq {_10} {[%#soption3] (1 : int32)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = unwrap_or'0 {some} {[%#soption4] (2 : int32)} (fun (_ret':int32) ->  [ &_17 <- _ret' ] s1) | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = Int32.eq {_17} {[%#soption5] (1 : int32)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb8) ]  ]
      
    | bb8 = s0
      [ s0 = unwrap_or'0 {none} {[%#soption6] (2 : int32)} (fun (_ret':int32) ->  [ &_22 <- _ret' ] s1) | s1 = bb10 ]
      
    | bb10 = s0
      [ s0 = Int32.eq {_22} {[%#soption7] (2 : int32)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
      | s1 = any [ br0 -> {_21 = false} (! bb12) | br1 -> {_21} (! bb11) ]  ]
      
    | bb11 = s0 [ s0 = unwrap_or_default'0 {some} (fun (_ret':int32) ->  [ &_27 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Int32.eq {_27} {[%#soption8] (1 : int32)} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1)
      | s1 = any [ br0 -> {_26 = false} (! bb15) | br1 -> {_26} (! bb14) ]  ]
      
    | bb14 = s0 [ s0 = unwrap_or_default'0 {none} (fun (_ret':int32) ->  [ &_32 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = Int32.eq {_32} {[%#soption9] (0 : int32)} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1)
      | s1 = any [ br0 -> {_31 = false} (! bb18) | br1 -> {_31} (! bb17) ]  ]
      
    | bb17 = s0
      [ s0 =  [ &_39 <- () ] s1
      | s1 = unwrap_or_else'0 {some} {_39} (fun (_ret':int32) ->  [ &_37 <- _ret' ] s2)
      | s2 = bb19 ]
      
    | bb19 = s0
      [ s0 = Int32.eq {_37} {[%#soption10] (1 : int32)} (fun (_ret':bool) ->  [ &_36 <- _ret' ] s1)
      | s1 = any [ br0 -> {_36 = false} (! bb21) | br1 -> {_36} (! bb20) ]  ]
      
    | bb20 = s0
      [ s0 =  [ &_45 <- () ] s1
      | s1 = unwrap_or_else'1 {none} {_45} (fun (_ret':int32) ->  [ &_43 <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = s0
      [ s0 = Int32.eq {_43} {[%#soption11] (3 : int32)} (fun (_ret':bool) ->  [ &_42 <- _ret' ] s1)
      | s1 = any [ br0 -> {_42 = false} (! bb24) | br1 -> {_42} (! bb23) ]  ]
      
    | bb23 = s0 [ s0 = unwrap_unchecked'0 {some} (fun (_ret':int32) ->  [ &_49 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = s0
      [ s0 = Int32.eq {_49} {[%#soption12] (1 : int32)} (fun (_ret':bool) ->  [ &_48 <- _ret' ] s1)
      | s1 = any [ br0 -> {_48 = false} (! bb27) | br1 -> {_48} (! bb26) ]  ]
      
    | bb26 = return' {_0}
    | bb27 = {[%#soption13] false} any
    | bb24 = {[%#soption14] false} any
    | bb21 = {[%#soption15] false} any
    | bb18 = {[%#soption16] false} any
    | bb15 = {[%#soption17] false} any
    | bb12 = {[%#soption18] false} any
    | bb9 = {[%#soption19] false} any
    | bb6 = {[%#soption20] false} any
    | bb3 = {[%#soption21] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _5 : int32 = any_l ()
    | & _9 : bool = any_l ()
    | & _10 : int32 = any_l ()
    | & _13 : string = any_l ()
    | & _16 : bool = any_l ()
    | & _17 : int32 = any_l ()
    | & _21 : bool = any_l ()
    | & _22 : int32 = any_l ()
    | & _26 : bool = any_l ()
    | & _27 : int32 = any_l ()
    | & _31 : bool = any_l ()
    | & _32 : int32 = any_l ()
    | & _36 : bool = any_l ()
    | & _37 : int32 = any_l ()
    | & _39 : () = any_l ()
    | & _42 : bool = any_l ()
    | & _43 : int32 = any_l ()
    | & _45 : () = any_l ()
    | & _48 : bool = any_l ()
    | & _49 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__map [#"option.rs" 44 0 44 12]
  let%span soption0 = "option.rs" 46 33 46 34
  let%span soption1 = "option.rs" 60 4 66 5
  let%span soption2 = "option.rs" 54 4 59 5
  let%span soption3 = "option.rs" 48 4 53 5
  let%span soption4 = "option.rs" 50 23 50 28
  let%span soption5 = "../../../creusot-contracts/src/std/option.rs" 123 27 126 17
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 127 26 130 17
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption8 = "option.rs" 57 16 57 17
  let%span soption9 = "option.rs" 56 22 56 36
  let%span soption10 = "option.rs" 58 18 58 19
  let%span soption11 = "option.rs" 64 20 64 21
  let%span soption12 = "option.rs" 62 23 62 35
  let%span soption13 = "option.rs" 63 22 63 39
  let%span soption14 = "option.rs" 65 18 65 19
  let%span smodel15 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption16 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span stuples17 = "../../../creusot-contracts/src/std/tuples.rs" 9 20 9 22
  let%span snum18 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 int32
  
  let rec closure0'0 (_1:()) (_2:int32) (return'  (ret:()))= {[@expl:closure requires] [%#soption4] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:())-> (! return' {result}) ] 
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : int32) =
    [%#soption4] let (_2) = args in false
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 ()
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  predicate postcondition_once'0 (self : ()) (args : int32) (result : ()) =
    let (_2) = args in true
  
  let rec map'1 (self:t_Option'1) (f:()) (return'  (ret:t_Option'0))= {[@expl:map 'self' type invariant] inv'0 self}
    {[@expl:map 'f' type invariant] inv'1 f}
    {[@expl:map requires] [%#soption5] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'0 f (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'2 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_None'1
        | C_Some'0 t -> exists r : () . result = C_Some'1 r /\ postcondition_once'0 f (t) r
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted2__map'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'1 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  function deep_model'4 (self : ()) : () =
    [%#stuples17] ()
  
  function deep_model'2 (self : t_Option'0) : t_Option'0 =
    [%#soption16] match self with
      | C_Some'1 t -> C_Some'1 (deep_model'4 t)
      | C_None'1 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'0 =
    [%#smodel15] deep_model'2 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'3 self}
    {[@expl:eq 'other' type invariant] inv'3 other}
    any
    [ return' (result:bool)-> {[%#soption7] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec closure1'0 (_1:()) (_2:int32) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption8] (3 : int32) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & res : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption9] result = (3 : int32)} (! return' {result}) ]
    
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate precondition'1 (self : ()) (args : int32) =
    let (_2) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : int32) (result : int32) =
    [%#soption9] let (_2) = args in result = (3 : int32)
  
  let rec map'2 (self:t_Option'1) (f:()) (return'  (ret:t_Option'1))= {[@expl:map 'self' type invariant] inv'0 self}
    {[@expl:map 'f' type invariant] inv'4 f}
    {[@expl:map requires] [%#soption5] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'1 f (t)
      end}
    any
    [ return' (result:t_Option'1)-> {inv'0 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> exists r : int32 . result = C_Some'0 r /\ postcondition_once'1 f (t) r
        end}
      (! return' {result}) ]
    
  
  let rec promoted1__map'0 (return'  (ret:t_Option'1))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption10] (3 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'1 = any_l () | & _1 : t_Option'1 = any_l () ] 
    [ return' (result:t_Option'1)-> return' {result} ]
    
  
  predicate inv'5 (_1 : t_Option'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'1 [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.Int
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 int
  
  use prelude.prelude.Int32
  
  function deep_model'5 (self : int32) : int =
    [%#snum18] Int32.to_int self
  
  function deep_model'3 (self : t_Option'1) : t_Option'2 =
    [%#soption16] match self with
      | C_Some'0 t -> C_Some'2 (deep_model'5 t)
      | C_None'0 -> C_None'2
      end
  
  function deep_model'1 (self : t_Option'1) : t_Option'2 =
    [%#smodel15] deep_model'3 self
  
  let rec eq'1 (self:t_Option'1) (other:t_Option'1) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'5 self}
    {[@expl:eq 'other' type invariant] inv'5 other}
    any
    [ return' (result:bool)-> {[%#soption7] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ]
    
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  let rec closure2'0 (_1:()) (x:int32) (return'  (ret:int32))= {[@expl:closure requires] [%#soption12] x
    < (v_MAX'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x} {[%#soption11] (1 : int32)} (fun (_ret':int32) ->  [ &res1 <- _ret' ] s1)
      | s1 =  [ &res <- res1 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : int32 = any_l () | & x : int32 = x | & res : int32 = any_l () | & res1 : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption13] Int32.to_int result = Int32.to_int x + 1}
      (! return' {result}) ]
    
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  predicate precondition'2 (self : ()) (args : int32) =
    [%#soption12] let (x) = args in x < (v_MAX'0 : int32)
  
  predicate postcondition_once'2 (self : ()) (args : int32) (result : int32) =
    [%#soption13] let (x) = args in Int32.to_int result = Int32.to_int x + 1
  
  let rec map'3 (self:t_Option'1) (f:()) (return'  (ret:t_Option'1))= {[@expl:map 'self' type invariant] inv'0 self}
    {[@expl:map 'f' type invariant] inv'6 f}
    {[@expl:map requires] [%#soption5] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'2 f (t)
      end}
    any
    [ return' (result:t_Option'1)-> {inv'0 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> exists r : int32 . result = C_Some'0 r /\ postcondition_once'2 f (t) r
        end}
      (! return' {result}) ]
    
  
  let rec promoted0__map'0 (return'  (ret:t_Option'1))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption14] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'1 = any_l () | & _1 : t_Option'1 = any_l () ] 
    [ return' (result:t_Option'1)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec map'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &_8 <- () ] s3
      | s3 = map'1 {none} {_8} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted2__map'0 (fun (pr2:t_Option'0) ->  [ &_32 <- pr2 ] s1)
      | s1 = eq'0 {_6} {_32} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &_17 <- () ] s1 | s1 = map'2 {some} {_17} (fun (_ret':t_Option'1) ->  [ &_15 <- _ret' ] s2) | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted1__map'0 (fun (pr1:t_Option'1) ->  [ &_31 <- pr1 ] s1)
      | s1 = eq'1 {_15} {_31} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 =  [ &_26 <- () ] s1 | s1 = map'3 {some} {_26} (fun (_ret':t_Option'1) ->  [ &_24 <- _ret' ] s2) | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 = promoted0__map'0 (fun (pr0:t_Option'1) ->  [ &_30 <- pr0 ] s1)
      | s1 = eq'1 {_24} {_30} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] 
    | bb11 = return' {_0}
    | bb12 = {[%#soption1] false} any
    | bb8 = {[%#soption2] false} any
    | bb4 = {[%#soption3] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'1 = any_l ()
    | & some : t_Option'1 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _8 : () = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : t_Option'1 = any_l ()
    | & _17 : () = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : t_Option'1 = any_l ()
    | & _26 : () = any_l ()
    | & _30 : t_Option'1 = any_l ()
    | & _31 : t_Option'1 = any_l ()
    | & _32 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__inspect [#"option.rs" 69 0 69 16]
  let%span soption0 = "option.rs" 71 33 71 34
  let%span soption1 = "option.rs" 79 4 84 5
  let%span soption2 = "option.rs" 73 4 78 5
  let%span soption3 = "option.rs" 75 23 75 28
  let%span soption4 = "../../../creusot-contracts/src/std/option.rs" 140 27 143 17
  let%span soption5 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 145 26 148 17
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption8 = "option.rs" 81 22 81 26
  let%span soption9 = "option.rs" 83 18 83 19
  let%span smodel10 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption11 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum12 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  let rec closure0'0 (_1:()) (_2:int32) (return'  (ret:()))= {[@expl:closure requires] [%#soption3] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:())-> (! return' {result}) ] 
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : int32) =
    [%#soption3] let (_2) = args in false
  
  predicate postcondition_once'0 (self : ()) (args : int32) (result : ()) =
    let (_2) = args in true
  
  let rec inspect'1 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:inspect 'self' type invariant] inv'0 self}
    {[@expl:inspect 'f' type invariant] inv'1 f}
    {[@expl:inspect requires] [%#soption4] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'0 f (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption5] result = self}
      {[%#soption6] match self with
        | C_None'0 -> true
        | C_Some'0 t -> postcondition_once'0 f (t) ()
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec promoted1__inspect'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum12] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption11] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel10] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption7] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec closure1'0 (_1:()) (_2:int32) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> {[@expl:closure ensures] [%#soption8] true} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : int32) =
    let (_2) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : int32) (result : ()) =
    [%#soption8] let (_2) = args in true
  
  let rec inspect'2 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:inspect 'self' type invariant] inv'0 self}
    {[@expl:inspect 'f' type invariant] inv'3 f}
    {[@expl:inspect requires] [%#soption4] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'1 f (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption5] result = self}
      {[%#soption6] match self with
        | C_None'0 -> true
        | C_Some'0 t -> postcondition_once'1 f (t) ()
        end}
      (! return' {result}) ]
    
  
  let rec promoted0__inspect'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption9] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec inspect'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &_8 <- () ] s3
      | s3 = inspect'1 {none} {_8} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted1__inspect'0 (fun (pr1:t_Option'0) ->  [ &_22 <- pr1 ] s1)
      | s1 = eq'0 {_6} {_22} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &_17 <- () ] s1
      | s1 = inspect'2 {some} {_17} (fun (_ret':t_Option'0) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted0__inspect'0 (fun (pr0:t_Option'0) ->  [ &_21 <- pr0 ] s1)
      | s1 = eq'0 {_15} {_21} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = return' {_0}
    | bb8 = {[%#soption1] false} any
    | bb4 = {[%#soption2] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _8 : () = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : t_Option'0 = any_l ()
    | & _17 : () = any_l ()
    | & _21 : t_Option'0 = any_l ()
    | & _22 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__map_or [#"option.rs" 87 0 87 15]
  let%span soption0 = "option.rs" 89 33 89 34
  let%span soption1 = "option.rs" 94 12 94 13
  let%span soption2 = "option.rs" 97 13 97 14
  let%span soption3 = "option.rs" 101 12 101 14
  let%span soption4 = "option.rs" 104 13 104 14
  let%span soption5 = "option.rs" 108 12 108 14
  let%span soption6 = "option.rs" 112 13 112 14
  let%span soption7 = "option.rs" 122 13 122 14
  let%span soption8 = "option.rs" 131 13 131 14
  let%span soption9 = "option.rs" 124 4 132 5
  let%span soption10 = "option.rs" 116 4 123 5
  let%span soption11 = "option.rs" 106 4 113 5
  let%span soption12 = "option.rs" 99 4 105 5
  let%span soption13 = "option.rs" 92 4 98 5
  let%span soption14 = "option.rs" 95 23 95 28
  let%span soption15 = "../../../creusot-contracts/src/std/option.rs" 158 27 161 17
  let%span soption16 = "../../../creusot-contracts/src/std/option.rs" 162 26 165 17
  let%span soption17 = "option.rs" 103 16 103 17
  let%span soption18 = "option.rs" 102 22 102 36
  let%span soption19 = "option.rs" 111 20 111 21
  let%span soption20 = "option.rs" 109 23 109 35
  let%span soption21 = "option.rs" 110 22 110 39
  let%span soption22 = "option.rs" 119 15 119 16
  let%span soption23 = "option.rs" 118 22 118 36
  let%span soption24 = "option.rs" 120 23 120 28
  let%span soption25 = "../../../creusot-contracts/src/std/option.rs" 175 27 178 17
  let%span soption26 = "../../../creusot-contracts/src/std/option.rs" 179 26 182 17
  let%span soption27 = "option.rs" 126 23 126 28
  let%span soption28 = "option.rs" 130 20 130 21
  let%span soption29 = "option.rs" 128 23 128 35
  let%span soption30 = "option.rs" 129 22 129 39
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  let rec closure0'0 (_1:()) (_2:int32) (return'  (ret:int32))= {[@expl:closure requires] [%#soption14] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:int32)-> (! return' {result}) ] 
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : int32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'2 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  predicate precondition'0 (self : ()) (args : int32) =
    [%#soption14] let (_2) = args in false
  
  predicate postcondition_once'0 (self : ()) (args : int32) (result : int32) =
    let (_2) = args in true
  
  let rec map_or'1 (self:t_Option'0) (default:int32) (f:()) (return'  (ret:int32))= {[@expl:map_or 'self' type invariant] inv'0 self}
    {[@expl:map_or 'default' type invariant] inv'1 default}
    {[@expl:map_or 'f' type invariant] inv'2 f}
    {[@expl:map_or requires] [%#soption15] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'0 f (t)
      end}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption16] match self with
        | C_None'0 -> result = default
        | C_Some'0 t -> postcondition_once'0 f (t) result
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure1'0 (_1:()) (_2:int32) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption17] (3 : int32) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & res : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption18] result = (3 : int32)} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : int32) =
    let (_2) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : int32) (result : int32) =
    [%#soption18] let (_2) = args in result = (3 : int32)
  
  let rec map_or'2 (self:t_Option'0) (default:int32) (f:()) (return'  (ret:int32))= {[@expl:map_or 'self' type invariant] inv'0 self}
    {[@expl:map_or 'default' type invariant] inv'1 default}
    {[@expl:map_or 'f' type invariant] inv'3 f}
    {[@expl:map_or requires] [%#soption15] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'1 f (t)
      end}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption16] match self with
        | C_None'0 -> result = default
        | C_Some'0 t -> postcondition_once'1 f (t) result
        end}
      (! return' {result}) ]
    
  
  constant v_MAX'0 : int32 = (2147483647 : int32)
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  let rec closure2'0 (_1:()) (x:int32) (return'  (ret:int32))= {[@expl:closure requires] [%#soption20] x
    < (v_MAX'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x} {[%#soption19] (1 : int32)} (fun (_ret':int32) ->  [ &res1 <- _ret' ] s1)
      | s1 =  [ &res <- res1 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : int32 = any_l () | & x : int32 = x | & res : int32 = any_l () | & res1 : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption21] Int32.to_int result = Int32.to_int x + 1}
      (! return' {result}) ]
    
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate precondition'2 (self : ()) (args : int32) =
    [%#soption20] let (x) = args in x < (v_MAX'0 : int32)
  
  predicate postcondition_once'2 (self : ()) (args : int32) (result : int32) =
    [%#soption21] let (x) = args in Int32.to_int result = Int32.to_int x + 1
  
  let rec map_or'3 (self:t_Option'0) (default:int32) (f:()) (return'  (ret:int32))= {[@expl:map_or 'self' type invariant] inv'0 self}
    {[@expl:map_or 'default' type invariant] inv'1 default}
    {[@expl:map_or 'f' type invariant] inv'4 f}
    {[@expl:map_or requires] [%#soption15] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'2 f (t)
      end}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption16] match self with
        | C_None'0 -> result = default
        | C_Some'0 t -> postcondition_once'2 f (t) result
        end}
      (! return' {result}) ]
    
  
  let rec closure3'0 (_1:()) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption22] (2 : int32) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & res : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption23] result = (2 : int32)} (! return' {result}) ]
    
  
  let rec closure4'0 (_1:()) (_2:int32) (return'  (ret:int32))= {[@expl:closure requires] [%#soption24] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:int32)-> (! return' {result}) ] 
  
  predicate inv'5 (_1 : ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : () [inv'5 x] . inv'5 x = true
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  predicate precondition'3 (self : ()) (args : ()) =
    let () = args in true
  
  predicate precondition'4 (self : ()) (args : int32) =
    [%#soption24] let (_2) = args in false
  
  predicate postcondition_once'3 (self : ()) (args : ()) (result : int32) =
    [%#soption23] let () = args in result = (2 : int32)
  
  predicate postcondition_once'4 (self : ()) (args : int32) (result : int32) =
    let (_2) = args in true
  
  let rec map_or_else'0 (self:t_Option'0) (default:()) (f:()) (return'  (ret:int32))= {[@expl:map_or_else 'self' type invariant] inv'0 self}
    {[@expl:map_or_else 'default' type invariant] inv'5 default}
    {[@expl:map_or_else 'f' type invariant] inv'6 f}
    {[@expl:map_or_else requires] [%#soption25] match self with
      | C_None'0 -> precondition'3 default ()
      | C_Some'0 t -> precondition'4 f (t)
      end}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption26] match self with
        | C_None'0 -> postcondition_once'3 default () result
        | C_Some'0 t -> postcondition_once'4 f (t) result
        end}
      (! return' {result}) ]
    
  
  let rec closure5'0 (_1:()) (return'  (ret:int32))= {[@expl:closure requires] [%#soption27] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:int32)-> (! return' {result}) ] 
  
  let rec closure6'0 (_1:()) (x:int32) (return'  (ret:int32))= {[@expl:closure requires] [%#soption29] x
    < (v_MAX'0 : int32)}
    (! bb0
    [ bb0 = s0
      [ s0 = Int32.add {x} {[%#soption28] (1 : int32)} (fun (_ret':int32) ->  [ &res1 <- _ret' ] s1)
      | s1 =  [ &res <- res1 ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : int32 = any_l () | & x : int32 = x | & res : int32 = any_l () | & res1 : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption30] Int32.to_int result = Int32.to_int x + 1}
      (! return' {result}) ]
    
  
  predicate inv'7 (_1 : ())
  
  axiom inv_axiom'7 [@rewrite] : forall x : () [inv'7 x] . inv'7 x = true
  
  predicate inv'8 (_1 : ())
  
  axiom inv_axiom'8 [@rewrite] : forall x : () [inv'8 x] . inv'8 x = true
  
  predicate precondition'5 (self : ()) (args : ()) =
    [%#soption27] let () = args in false
  
  predicate precondition'6 (self : ()) (args : int32) =
    [%#soption29] let (x) = args in x < (v_MAX'0 : int32)
  
  predicate postcondition_once'5 (self : ()) (args : ()) (result : int32) =
    let () = args in true
  
  predicate postcondition_once'6 (self : ()) (args : int32) (result : int32) =
    [%#soption30] let (x) = args in Int32.to_int result = Int32.to_int x + 1
  
  let rec map_or_else'1 (self:t_Option'0) (default:()) (f:()) (return'  (ret:int32))= {[@expl:map_or_else 'self' type invariant] inv'0 self}
    {[@expl:map_or_else 'default' type invariant] inv'7 default}
    {[@expl:map_or_else 'f' type invariant] inv'8 f}
    {[@expl:map_or_else requires] [%#soption25] match self with
      | C_None'0 -> precondition'5 default ()
      | C_Some'0 t -> precondition'6 f (t)
      end}
    any
    [ return' (result:int32)-> {inv'1 result}
      {[%#soption26] match self with
        | C_None'0 -> postcondition_once'5 default () result
        | C_Some'0 t -> postcondition_once'6 f (t) result
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec map_or'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &_7 <- () ] s3
      | s3 = map_or'1 {none} {[%#soption1] (2 : int32)} {_7} (fun (_ret':int32) ->  [ &_5 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Int32.eq {_5} {[%#soption2] (2 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 =  [ &_13 <- () ] s1
      | s1 = map_or'2 {some} {[%#soption3] (-1 : int32)} {_13} (fun (_ret':int32) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = Int32.eq {_11} {[%#soption4] (3 : int32)} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 =  [ &_19 <- () ] s1
      | s1 = map_or'3 {some} {[%#soption5] (-1 : int32)} {_19} (fun (_ret':int32) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = Int32.eq {_17} {[%#soption6] (2 : int32)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1)
      | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb8) ]  ]
      
    | bb8 = s0
      [ s0 =  [ &_25 <- () ] s1
      | s1 =  [ &_26 <- () ] s2
      | s2 = map_or_else'0 {none} {_25} {_26} (fun (_ret':int32) ->  [ &_23 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = Int32.eq {_23} {[%#soption7] (2 : int32)} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1)
      | s1 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 =  [ &_32 <- () ] s1
      | s1 =  [ &_33 <- () ] s2
      | s2 = map_or_else'1 {some} {_32} {_33} (fun (_ret':int32) ->  [ &_30 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = Int32.eq {_30} {[%#soption8] (2 : int32)} (fun (_ret':bool) ->  [ &_29 <- _ret' ] s1)
      | s1 = any [ br0 -> {_29 = false} (! bb15) | br1 -> {_29} (! bb14) ]  ]
      
    | bb14 = return' {_0}
    | bb15 = {[%#soption9] false} any
    | bb12 = {[%#soption10] false} any
    | bb9 = {[%#soption11] false} any
    | bb6 = {[%#soption12] false} any
    | bb3 = {[%#soption13] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _5 : int32 = any_l ()
    | & _7 : () = any_l ()
    | & _10 : bool = any_l ()
    | & _11 : int32 = any_l ()
    | & _13 : () = any_l ()
    | & _16 : bool = any_l ()
    | & _17 : int32 = any_l ()
    | & _19 : () = any_l ()
    | & _22 : bool = any_l ()
    | & _23 : int32 = any_l ()
    | & _25 : () = any_l ()
    | & _26 : () = any_l ()
    | & _29 : bool = any_l ()
    | & _30 : int32 = any_l ()
    | & _32 : () = any_l ()
    | & _33 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__ok_or [#"option.rs" 135 0 135 14]
  let%span soption0 = "option.rs" 137 33 137 34
  let%span soption1 = "option.rs" 139 25 139 29
  let%span soption2 = "option.rs" 140 18 140 34
  let%span soption3 = "option.rs" 141 24 141 29
  let%span soption4 = "option.rs" 142 18 142 32
  let%span soption5 = "option.rs" 148 18 148 34
  let%span soption6 = "option.rs" 153 18 153 32
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 193 26 196 17
  let%span soption8 = "option.rs" 146 11 146 15
  let%span soption9 = "option.rs" 145 18 145 24
  let%span soption10 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption11 = "../../../creusot-contracts/src/std/option.rs" 200 26 203 17
  let%span soption12 = "option.rs" 151 11 151 16
  let%span soption13 = "option.rs" 150 19 150 24
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : bool)
  
  axiom inv_axiom'1 [@rewrite] : forall x : bool [inv'1 x] . inv'1 x = true
  
  type t_Result'0  =
    | C_Ok'0 int32
    | C_Err'0 bool
  
  predicate inv'2 (_1 : t_Result'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Result'0 [inv'2 x] . inv'2 x = true
  
  let rec ok_or'1 (self:t_Option'0) (err:bool) (return'  (ret:t_Result'0))= {[@expl:ok_or 'self' type invariant] inv'0 self}
    {[@expl:ok_or 'err' type invariant] inv'1 err}
    any
    [ return' (result:t_Result'0)-> {inv'2 result}
      {[%#soption7] match self with
        | C_None'0 -> result = C_Err'0 err
        | C_Some'0 t -> result = C_Ok'0 t
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure2'0 (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption8] true ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption9] result} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'0 (self : ()) (args : ()) =
    let () = args in true
  
  predicate postcondition_once'0 (self : ()) (args : ()) (result : bool) =
    [%#soption9] let () = args in result
  
  let rec ok_or_else'0 (self:t_Option'0) (err:()) (return'  (ret:t_Result'0))= {[@expl:ok_or_else 'self' type invariant] inv'0 self}
    {[@expl:ok_or_else 'err' type invariant] inv'3 err}
    {[@expl:ok_or_else requires] [%#soption10] self = C_None'0  -> precondition'0 err ()}
    any
    [ return' (result:t_Result'0)-> {inv'2 result}
      {[%#soption11] match self with
        | C_None'0 -> exists r : bool . result = C_Err'0 r /\ postcondition_once'0 err () r
        | C_Some'0 t -> result = C_Ok'0 t
        end}
      (! return' {result}) ]
    
  
  let rec closure4'0 (_1:()) (return'  (ret:bool))= {[@expl:closure requires] [%#soption13] false}
    (! bb0 [ bb0 = s0 [ s0 =  [ &res <- [%#soption12] false ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ] )
    [ & _0 : bool = any_l () | & res : bool = any_l () ]
     [ return' (result:bool)-> (! return' {result}) ] 
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate precondition'1 (self : ()) (args : ()) =
    [%#soption13] let () = args in false
  
  predicate postcondition_once'1 (self : ()) (args : ()) (result : bool) =
    let () = args in true
  
  let rec ok_or_else'1 (self:t_Option'0) (err:()) (return'  (ret:t_Result'0))= {[@expl:ok_or_else 'self' type invariant] inv'0 self}
    {[@expl:ok_or_else 'err' type invariant] inv'4 err}
    {[@expl:ok_or_else requires] [%#soption10] self = C_None'0  -> precondition'1 err ()}
    any
    [ return' (result:t_Result'0)-> {inv'2 result}
      {[%#soption11] match self with
        | C_None'0 -> exists r : bool . result = C_Err'0 r /\ postcondition_once'1 err () r
        | C_Some'0 t -> result = C_Ok'0 t
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ok_or'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = ok_or'1 {none} {[%#soption1] true} (fun (_ret':t_Result'0) ->  [ &err <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#soption2] err = C_Err'0 true} s1
      | s1 = ok_or'1 {some} {[%#soption3] false} (fun (_ret':t_Result'0) ->  [ &ok <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#soption4] ok = C_Ok'0 (1 : int32)} s1
      | s1 =  [ &_13 <- () ] s2
      | s2 = ok_or_else'0 {none} {_13} (fun (_ret':t_Result'0) ->  [ &err1 <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:assertion] [%#soption5] err1 = C_Err'0 true} s1
      | s1 =  [ &_18 <- () ] s2
      | s2 = ok_or_else'1 {some} {_18} (fun (_ret':t_Result'0) ->  [ &ok1 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = s0 [ s0 = {[@expl:assertion] [%#soption6] ok1 = C_Ok'0 (1 : int32)} s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & err : t_Result'0 = any_l ()
    | & ok : t_Result'0 = any_l ()
    | & err1 : t_Result'0 = any_l ()
    | & _13 : () = any_l ()
    | & ok1 : t_Result'0 = any_l ()
    | & _18 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__as_mut [#"option.rs" 156 0 156 15]
  let%span soption0 = "option.rs" 158 37 158 38
  let%span soption1 = "option.rs" 161 30 161 31
  let%span soption2 = "option.rs" 162 29 162 30
  let%span soption3 = "option.rs" 163 30 163 31
  let%span soption4 = "option.rs" 164 29 164 30
  let%span soption5 = "option.rs" 164 4 164 31
  let%span soption6 = "option.rs" 162 4 162 31
  let%span soption7 = "option.rs" 160 4 160 36
  let%span soption8 = "../../../creusot-contracts/src/std/option.rs" 62 26 62 75
  let%span soption9 = "../../../creusot-contracts/src/std/option.rs" 64 20 65 100
  let%span soption10 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  let%span soption11 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span sresolve12 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sresolve13 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Option'0) [inv'0 x] . inv'0 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 (borrowed int32)
  
  predicate inv'1 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'1 x] . inv'1 x = true
  
  let rec as_mut'1 (self:borrowed (t_Option'0)) (return'  (ret:t_Option'1))= {[@expl:as_mut 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'1)-> {inv'1 result}
      {[%#soption8] self.current = C_None'0  -> result = C_None'1 /\ self.final = C_None'0}
      {[%#soption9] self.current = C_None'0
      \/ (exists r : borrowed int32 . result = C_Some'1 r
      /\ self.current = C_Some'0 (r.current) /\ self.final = C_Some'0 (r.final))}
      (! return' {result}) ]
    
  
  predicate inv'2 (_1 : t_Option'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'1 [inv'2 x] . inv'2 x = true
  
  let rec is_none'0 (self:t_Option'1) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'2 self}
    any [ return' (result:bool)-> {[%#soption10] result = (self = C_None'1)} (! return' {result}) ] 
  
  predicate resolve'3 (self : borrowed int32) =
    [%#sresolve13] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'3 _1
  
  predicate resolve'2 (self : t_Option'1) =
    [%#sresolve12] match self with
      | C_Some'1 x -> resolve'1 x
      | C_None'1 -> true
      end
  
  predicate resolve'0 (_1 : t_Option'1) =
    resolve'2 _1
  
  predicate inv'3 (_1 : borrowed int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed int32 [inv'3 x] . inv'3 x = true
  
  let rec unwrap'0 (self:t_Option'1) (return'  (ret:borrowed int32))= {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] [%#soption11] self <> C_None'1}
    any
    [ return' (result:borrowed int32)-> {inv'3 result} {[%#soption11] C_Some'1 result = self} (! return' {result}) ]
    
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : int32 [inv'5 x] . inv'5 x = true
  
  let rec unwrap'1 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'4 self}
    {[@expl:unwrap requires] [%#soption11] self <> C_None'0}
    any [ return' (result:int32)-> {inv'5 result} {[%#soption11] C_Some'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec as_mut'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_7 <- _ret' ]  [ &none <- _ret'.final ] s3)
      | s3 = as_mut'1 {_7} (fun (_ret':t_Option'1) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = is_none'0 {_6} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = -{resolve'0 _6}- s1 | s1 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ]  ] 
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_11 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = as_mut'1 {_11} (fun (_ret':t_Option'1) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 = unwrap'0 {_10} (fun (_ret':borrowed int32) ->  [ &_9 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 =  [ &_9 <- { _9 with current = ([%#soption1] (2 : int32)) } ] s1
      | s1 = -{resolve'1 _9}- s2
      | s2 = unwrap'1 {some} (fun (_ret':int32) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Int32.eq {_14} {[%#soption2] (2 : int32)} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1)
      | s1 = any [ br0 -> {_13 = false} (! bb9) | br1 -> {_13} (! bb8) ]  ]
      
    | bb8 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_19 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = as_mut'1 {_19} (fun (_ret':t_Option'1) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0 [ s0 = unwrap'0 {_18} (fun (_ret':borrowed int32) ->  [ &_17 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 =  [ &_17 <- { _17 with current = ([%#soption3] (1 : int32)) } ] s1
      | s1 = -{resolve'1 _17}- s2
      | s2 = unwrap'1 {some} (fun (_ret':int32) ->  [ &_22 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = Int32.eq {_22} {[%#soption4] (1 : int32)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
      | s1 = any [ br0 -> {_21 = false} (! bb14) | br1 -> {_21} (! bb13) ]  ]
      
    | bb13 = return' {_0}
    | bb14 = {[%#soption5] false} any
    | bb9 = {[%#soption6] false} any
    | bb4 = {[%#soption7] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'1 = any_l ()
    | & _7 : borrowed (t_Option'0) = any_l ()
    | & _9 : borrowed int32 = any_l ()
    | & _10 : t_Option'1 = any_l ()
    | & _11 : borrowed (t_Option'0) = any_l ()
    | & _13 : bool = any_l ()
    | & _14 : int32 = any_l ()
    | & _17 : borrowed int32 = any_l ()
    | & _18 : t_Option'1 = any_l ()
    | & _19 : borrowed (t_Option'0) = any_l ()
    | & _21 : bool = any_l ()
    | & _22 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__as_ref [#"option.rs" 167 0 167 15]
  let%span soption0 = "option.rs" 169 33 169 34
  let%span soption1 = "option.rs" 172 39 172 40
  let%span soption2 = "option.rs" 172 4 172 41
  let%span soption3 = "option.rs" 171 4 171 36
  let%span soption4 = "../../../creusot-contracts/src/std/option.rs" 55 26 55 58
  let%span soption5 = "../../../creusot-contracts/src/std/option.rs" 57 20 57 89
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  
  use prelude.prelude.Int32
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 int32
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  let rec as_ref'1 (self:t_Option'1) (return'  (ret:t_Option'0))= {[@expl:as_ref 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#soption4] self = C_None'0  -> result = C_None'1}
      {[%#soption5] self = C_None'0 \/ (exists r : int32 . result = C_Some'1 r /\ self = C_Some'0 r)}
      (! return' {result}) ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  let rec is_none'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'2 self}
    any [ return' (result:bool)-> {[%#soption6] result = (self = C_None'1)} (! return' {result}) ] 
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] [%#soption7] self <> C_None'1}
    any [ return' (result:int32)-> {inv'3 result} {[%#soption7] C_Some'1 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec as_ref'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = as_ref'1 {none} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = is_none'0 {_6} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0 [ s0 = as_ref'1 {some} (fun (_ret':t_Option'0) ->  [ &_13 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = unwrap'0 {_13} (fun (_ret':int32) ->  [ &_12 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 = Int32.eq {_12} {[%#soption1] (1 : int32)} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb7) ]  ]
      
    | bb7 = return' {_0}
    | bb8 = {[%#soption2] false} any
    | bb4 = {[%#soption3] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'1 = any_l ()
    | & some : t_Option'1 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : int32 = any_l ()
    | & _13 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__replace [#"option.rs" 175 0 175 16]
  let%span soption0 = "option.rs" 177 37 177 38
  let%span soption1 = "option.rs" 179 25 179 26
  let%span soption2 = "option.rs" 180 29 180 30
  let%span soption3 = "option.rs" 181 25 181 26
  let%span soption4 = "option.rs" 181 40 181 41
  let%span soption5 = "option.rs" 182 29 182 30
  let%span soption6 = "option.rs" 183 25 183 26
  let%span soption7 = "option.rs" 183 40 183 41
  let%span soption8 = "option.rs" 184 29 184 30
  let%span soption9 = "option.rs" 184 4 184 31
  let%span soption10 = "option.rs" 183 4 183 42
  let%span soption11 = "option.rs" 182 4 182 31
  let%span soption12 = "option.rs" 181 4 181 42
  let%span soption13 = "option.rs" 180 4 180 31
  let%span soption14 = "option.rs" 179 4 179 38
  let%span soption15 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption16 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Option'0) [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : int32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  let rec replace'1 (self:borrowed (t_Option'0)) (value:int32) (return'  (ret:t_Option'0))= {[@expl:replace 'self' type invariant] inv'0 self}
    {[@expl:replace 'value' type invariant] inv'1 value}
    any
    [ return' (result:t_Option'0)-> {inv'2 result}
      {[%#soption15] result = self.current /\ self.final = C_Some'0 value}
      (! return' {result}) ]
    
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  let rec is_none'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'3 self}
    any [ return' (result:bool)-> {[%#soption16] result = (self = C_None'0)} (! return' {result}) ] 
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'2 self}
    {[@expl:unwrap requires] [%#soption15] self <> C_None'0}
    any [ return' (result:int32)-> {inv'1 result} {[%#soption15] C_Some'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec replace'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_7 <- _ret' ]  [ &none <- _ret'.final ] s3)
      | s3 = replace'1 {_7} {[%#soption1] (2 : int32)} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = is_none'0 {_6} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0 [ s0 = unwrap'0 {none} (fun (_ret':int32) ->  [ &_11 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = Int32.eq {_11} {[%#soption2] (2 : int32)} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb6) ]  ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_18 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = replace'1 {_18} {[%#soption3] (2 : int32)} (fun (_ret':t_Option'0) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0 [ s0 = unwrap'0 {_17} (fun (_ret':int32) ->  [ &_16 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = Int32.eq {_16} {[%#soption4] (1 : int32)} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s1)
      | s1 = any [ br0 -> {_15 = false} (! bb11) | br1 -> {_15} (! bb10) ]  ]
      
    | bb10 = s0 [ s0 = unwrap'0 {some} (fun (_ret':int32) ->  [ &_22 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 = Int32.eq {_22} {[%#soption5] (2 : int32)} (fun (_ret':bool) ->  [ &_21 <- _ret' ] s1)
      | s1 = any [ br0 -> {_21 = false} (! bb14) | br1 -> {_21} (! bb13) ]  ]
      
    | bb13 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_29 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = replace'1 {_29} {[%#soption6] (1 : int32)} (fun (_ret':t_Option'0) ->  [ &_28 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0 [ s0 = unwrap'0 {_28} (fun (_ret':int32) ->  [ &_27 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = Int32.eq {_27} {[%#soption7] (2 : int32)} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1)
      | s1 = any [ br0 -> {_26 = false} (! bb18) | br1 -> {_26} (! bb17) ]  ]
      
    | bb17 = s0 [ s0 = unwrap'0 {some} (fun (_ret':int32) ->  [ &_33 <- _ret' ] s1) | s1 = bb19 ] 
    | bb19 = s0
      [ s0 = Int32.eq {_33} {[%#soption8] (1 : int32)} (fun (_ret':bool) ->  [ &_32 <- _ret' ] s1)
      | s1 = any [ br0 -> {_32 = false} (! bb21) | br1 -> {_32} (! bb20) ]  ]
      
    | bb20 = return' {_0}
    | bb21 = {[%#soption9] false} any
    | bb18 = {[%#soption10] false} any
    | bb14 = {[%#soption11] false} any
    | bb11 = {[%#soption12] false} any
    | bb7 = {[%#soption13] false} any
    | bb4 = {[%#soption14] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _7 : borrowed (t_Option'0) = any_l ()
    | & _10 : bool = any_l ()
    | & _11 : int32 = any_l ()
    | & _15 : bool = any_l ()
    | & _16 : int32 = any_l ()
    | & _17 : t_Option'0 = any_l ()
    | & _18 : borrowed (t_Option'0) = any_l ()
    | & _21 : bool = any_l ()
    | & _22 : int32 = any_l ()
    | & _26 : bool = any_l ()
    | & _27 : int32 = any_l ()
    | & _28 : t_Option'0 = any_l ()
    | & _29 : borrowed (t_Option'0) = any_l ()
    | & _32 : bool = any_l ()
    | & _33 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__and_or_xor [#"option.rs" 187 0 187 19]
  let%span soption0 = "option.rs" 189 33 189 34
  let%span soption1 = "option.rs" 193 26 193 27
  let%span soption2 = "option.rs" 195 26 195 27
  let%span soption3 = "option.rs" 198 25 198 26
  let%span soption4 = "option.rs" 200 25 200 26
  let%span soption5 = "option.rs" 203 26 203 27
  let%span soption6 = "option.rs" 205 26 205 27
  let%span soption7 = "option.rs" 205 4 205 38
  let%span soption8 = "option.rs" 204 4 204 38
  let%span soption9 = "option.rs" 203 4 203 41
  let%span soption10 = "option.rs" 202 4 202 35
  let%span soption11 = "option.rs" 200 4 200 40
  let%span soption12 = "option.rs" 199 4 199 37
  let%span soption13 = "option.rs" 198 4 198 40
  let%span soption14 = "option.rs" 197 4 197 34
  let%span soption15 = "option.rs" 195 4 195 41
  let%span soption16 = "option.rs" 194 4 194 35
  let%span soption17 = "option.rs" 193 4 193 38
  let%span soption18 = "option.rs" 192 4 192 35
  let%span soption19 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption20 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption21 = "option.rs" 195 38 195 39
  let%span soption22 = "option.rs" 198 37 198 38
  let%span soption23 = "option.rs" 199 34 199 35
  let%span soption24 = "option.rs" 200 37 200 38
  let%span soption25 = "../../../creusot-contracts/src/std/option.rs" 283 26 288 17
  let%span soption26 = "option.rs" 203 38 203 39
  let%span soption27 = "option.rs" 204 35 204 36
  let%span sresolve28 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span smodel29 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption30 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum31 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (_1 : int32) =
    true
  
  predicate resolve'0 (self : t_Option'0) =
    [%#sresolve28] match self with
      | C_Some'0 x -> resolve'1 x
      | C_None'0 -> true
      end
  
  let rec and'0 (self:t_Option'0) (optb:t_Option'0) (return'  (ret:t_Option'0))= {[@expl:and 'self' type invariant] inv'0 self}
    {[@expl:and 'optb' type invariant] inv'0 optb}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption19] self = C_None'0  -> result = C_None'0}
      {[%#soption19] self = C_None'0 \/ result = optb /\ resolve'0 self}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec promoted11__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum31] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption30] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel29] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'1 self}
    {[@expl:eq 'other' type invariant] inv'1 other}
    any
    [ return' (result:bool)-> {[%#soption20] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec promoted10__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted9__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted8__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption21] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec or'0 (self:t_Option'0) (optb:t_Option'0) (return'  (ret:t_Option'0))= {[@expl:or 'self' type invariant] inv'0 self}
    {[@expl:or 'optb' type invariant] inv'0 optb}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption19] self = C_None'0  -> result = optb}
      {[%#soption19] self = C_None'0 \/ result = self /\ resolve'0 optb}
      (! return' {result}) ]
    
  
  let rec promoted7__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted6__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption22] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted5__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption23] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted4__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption24] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec xor'0 (self:t_Option'0) (optb:t_Option'0) (return'  (ret:t_Option'0))= {[@expl:xor 'self' type invariant] inv'0 self}
    {[@expl:xor 'optb' type invariant] inv'0 optb}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption25] match (self, optb) with
        | (C_None'0, C_None'0) -> result = C_None'0
        | (C_Some'0 t1, C_Some'0 t2) -> result = C_None'0 /\ resolve'1 t1 /\ resolve'1 t2
        | (C_Some'0 t, C_None'0) -> result = C_Some'0 t
        | (C_None'0, C_Some'0 t) -> result = C_Some'0 t
        end}
      (! return' {result}) ]
    
  
  let rec promoted3__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted2__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption26] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted1__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption27] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted0__and_or_xor'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec and_or_xor'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = and'0 {none} {none} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted11__and_or_xor'0 (fun (pr11:t_Option'0) ->  [ &_122 <- pr11 ] s1)
      | s1 = eq'0 {_6} {_122} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &_17 <- C_Some'0 ([%#soption1] (2 : int32)) ] s1
      | s1 = and'0 {none} {_17} (fun (_ret':t_Option'0) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted10__and_or_xor'0 (fun (pr10:t_Option'0) ->  [ &_121 <- pr10 ] s1)
      | s1 = eq'0 {_15} {_121} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0 [ s0 = and'0 {some} {none} (fun (_ret':t_Option'0) ->  [ &_24 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = promoted9__and_or_xor'0 (fun (pr9:t_Option'0) ->  [ &_120 <- pr9 ] s1)
      | s1 = eq'0 {_24} {_120} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_35 <- C_Some'0 ([%#soption2] (2 : int32)) ] s1
      | s1 = and'0 {some} {_35} (fun (_ret':t_Option'0) ->  [ &_33 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = s0
      [ s0 = promoted8__and_or_xor'0 (fun (pr8:t_Option'0) ->  [ &_119 <- pr8 ] s1)
      | s1 = eq'0 {_33} {_119} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = any [ br0 -> {_31 = false} (! bb16) | br1 -> {_31} (! bb15) ] 
    | bb15 = s0 [ s0 = or'0 {none} {none} (fun (_ret':t_Option'0) ->  [ &_42 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = promoted7__and_or_xor'0 (fun (pr7:t_Option'0) ->  [ &_118 <- pr7 ] s1)
      | s1 = eq'0 {_42} {_118} (fun (_ret':bool) ->  [ &_40 <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = any [ br0 -> {_40 = false} (! bb20) | br1 -> {_40} (! bb19) ] 
    | bb19 = s0
      [ s0 =  [ &_53 <- C_Some'0 ([%#soption3] (2 : int32)) ] s1
      | s1 = or'0 {none} {_53} (fun (_ret':t_Option'0) ->  [ &_51 <- _ret' ] s2)
      | s2 = bb21 ]
      
    | bb21 = s0
      [ s0 = promoted6__and_or_xor'0 (fun (pr6:t_Option'0) ->  [ &_117 <- pr6 ] s1)
      | s1 = eq'0 {_51} {_117} (fun (_ret':bool) ->  [ &_49 <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = any [ br0 -> {_49 = false} (! bb24) | br1 -> {_49} (! bb23) ] 
    | bb23 = s0 [ s0 = or'0 {some} {none} (fun (_ret':t_Option'0) ->  [ &_60 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = s0
      [ s0 = promoted5__and_or_xor'0 (fun (pr5:t_Option'0) ->  [ &_116 <- pr5 ] s1)
      | s1 = eq'0 {_60} {_116} (fun (_ret':bool) ->  [ &_58 <- _ret' ] s2)
      | s2 = bb26 ]
      
    | bb26 = any [ br0 -> {_58 = false} (! bb28) | br1 -> {_58} (! bb27) ] 
    | bb27 = s0
      [ s0 =  [ &_71 <- C_Some'0 ([%#soption4] (2 : int32)) ] s1
      | s1 = or'0 {some} {_71} (fun (_ret':t_Option'0) ->  [ &_69 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = promoted4__and_or_xor'0 (fun (pr4:t_Option'0) ->  [ &_115 <- pr4 ] s1)
      | s1 = eq'0 {_69} {_115} (fun (_ret':bool) ->  [ &_67 <- _ret' ] s2)
      | s2 = bb30 ]
      
    | bb30 = any [ br0 -> {_67 = false} (! bb32) | br1 -> {_67} (! bb31) ] 
    | bb31 = s0 [ s0 = xor'0 {none} {none} (fun (_ret':t_Option'0) ->  [ &_78 <- _ret' ] s1) | s1 = bb33 ] 
    | bb33 = s0
      [ s0 = promoted3__and_or_xor'0 (fun (pr3:t_Option'0) ->  [ &_114 <- pr3 ] s1)
      | s1 = eq'0 {_78} {_114} (fun (_ret':bool) ->  [ &_76 <- _ret' ] s2)
      | s2 = bb34 ]
      
    | bb34 = any [ br0 -> {_76 = false} (! bb36) | br1 -> {_76} (! bb35) ] 
    | bb35 = s0
      [ s0 =  [ &_89 <- C_Some'0 ([%#soption5] (2 : int32)) ] s1
      | s1 = xor'0 {none} {_89} (fun (_ret':t_Option'0) ->  [ &_87 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = promoted2__and_or_xor'0 (fun (pr2:t_Option'0) ->  [ &_113 <- pr2 ] s1)
      | s1 = eq'0 {_87} {_113} (fun (_ret':bool) ->  [ &_85 <- _ret' ] s2)
      | s2 = bb38 ]
      
    | bb38 = any [ br0 -> {_85 = false} (! bb40) | br1 -> {_85} (! bb39) ] 
    | bb39 = s0 [ s0 = xor'0 {some} {none} (fun (_ret':t_Option'0) ->  [ &_96 <- _ret' ] s1) | s1 = bb41 ] 
    | bb41 = s0
      [ s0 = promoted1__and_or_xor'0 (fun (pr1:t_Option'0) ->  [ &_112 <- pr1 ] s1)
      | s1 = eq'0 {_96} {_112} (fun (_ret':bool) ->  [ &_94 <- _ret' ] s2)
      | s2 = bb42 ]
      
    | bb42 = any [ br0 -> {_94 = false} (! bb44) | br1 -> {_94} (! bb43) ] 
    | bb43 = s0
      [ s0 =  [ &_107 <- C_Some'0 ([%#soption6] (2 : int32)) ] s1
      | s1 = xor'0 {some} {_107} (fun (_ret':t_Option'0) ->  [ &_105 <- _ret' ] s2)
      | s2 = bb45 ]
      
    | bb45 = s0
      [ s0 = promoted0__and_or_xor'0 (fun (pr0:t_Option'0) ->  [ &_111 <- pr0 ] s1)
      | s1 = eq'0 {_105} {_111} (fun (_ret':bool) ->  [ &_103 <- _ret' ] s2)
      | s2 = bb46 ]
      
    | bb46 = any [ br0 -> {_103 = false} (! bb48) | br1 -> {_103} (! bb47) ] 
    | bb47 = return' {_0}
    | bb48 = {[%#soption7] false} any
    | bb44 = {[%#soption8] false} any
    | bb40 = {[%#soption9] false} any
    | bb36 = {[%#soption10] false} any
    | bb32 = {[%#soption11] false} any
    | bb28 = {[%#soption12] false} any
    | bb24 = {[%#soption13] false} any
    | bb20 = {[%#soption14] false} any
    | bb16 = {[%#soption15] false} any
    | bb12 = {[%#soption16] false} any
    | bb8 = {[%#soption17] false} any
    | bb4 = {[%#soption18] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : t_Option'0 = any_l ()
    | & _17 : t_Option'0 = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : t_Option'0 = any_l ()
    | & _31 : bool = any_l ()
    | & _33 : t_Option'0 = any_l ()
    | & _35 : t_Option'0 = any_l ()
    | & _40 : bool = any_l ()
    | & _42 : t_Option'0 = any_l ()
    | & _49 : bool = any_l ()
    | & _51 : t_Option'0 = any_l ()
    | & _53 : t_Option'0 = any_l ()
    | & _58 : bool = any_l ()
    | & _60 : t_Option'0 = any_l ()
    | & _67 : bool = any_l ()
    | & _69 : t_Option'0 = any_l ()
    | & _71 : t_Option'0 = any_l ()
    | & _76 : bool = any_l ()
    | & _78 : t_Option'0 = any_l ()
    | & _85 : bool = any_l ()
    | & _87 : t_Option'0 = any_l ()
    | & _89 : t_Option'0 = any_l ()
    | & _94 : bool = any_l ()
    | & _96 : t_Option'0 = any_l ()
    | & _103 : bool = any_l ()
    | & _105 : t_Option'0 = any_l ()
    | & _107 : t_Option'0 = any_l ()
    | & _111 : t_Option'0 = any_l ()
    | & _112 : t_Option'0 = any_l ()
    | & _113 : t_Option'0 = any_l ()
    | & _114 : t_Option'0 = any_l ()
    | & _115 : t_Option'0 = any_l ()
    | & _116 : t_Option'0 = any_l ()
    | & _117 : t_Option'0 = any_l ()
    | & _118 : t_Option'0 = any_l ()
    | & _119 : t_Option'0 = any_l ()
    | & _120 : t_Option'0 = any_l ()
    | & _121 : t_Option'0 = any_l ()
    | & _122 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__and_then [#"option.rs" 208 0 208 17]
  let%span soption0 = "option.rs" 210 34 210 35
  let%span soption1 = "option.rs" 211 34 211 35
  let%span soption2 = "option.rs" 232 4 232 41
  let%span soption3 = "option.rs" 231 4 231 47
  let%span soption4 = "option.rs" 213 4 218 5
  let%span soption5 = "option.rs" 215 23 215 28
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 226 27 229 17
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 230 26 233 17
  let%span soption8 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption9 = "option.rs" 225 16 225 17
  let%span soption10 = "option.rs" 226 21 226 22
  let%span soption11 = "option.rs" 219 15 223 7
  let%span soption12 = "option.rs" 231 41 231 45
  let%span smodel13 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption14 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum15 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  let rec closure0'0 (_1:()) (_2:int32) (return'  (ret:t_Option'0))= {[@expl:closure requires] [%#soption5] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:t_Option'0)-> (! return' {result}) ] 
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : int32) =
    [%#soption5] let (_2) = args in false
  
  predicate postcondition_once'0 (self : ()) (args : int32) (result : t_Option'0) =
    let (_2) = args in true
  
  let rec and_then'1 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:and_then 'self' type invariant] inv'0 self}
    {[@expl:and_then 'f' type invariant] inv'1 f}
    {[@expl:and_then requires] [%#soption6] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'0 f (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption7] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> postcondition_once'0 f (t) result
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted2__and_then'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum15] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption14] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel13] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption8] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec closure1'0 (_1:()) (x:int32) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.eq {x} {[%#soption9] (1 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Int32.add {x} {[%#soption10] (1 : int32)} (fun (_ret':int32) ->  [ &_6 <- _ret' ] s1)
      | s1 =  [ &res <- C_Some'0 _6 ] s2
      | s2 = bb3 ]
      
    | bb2 = s0 [ s0 =  [ &res <- C_None'0 ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t_Option'0 = any_l ()
    | & x : int32 = x
    | & res : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : int32 = any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:closure ensures] [%#soption11] if Int32.to_int x = 1 then
        exists r : int32 . result = C_Some'0 r /\ Int32.to_int r = Int32.to_int x + 1
      else
        result = C_None'0
      }
      (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : int32) =
    let (x) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : int32) (result : t_Option'0) =
    [%#soption11] let (x) = args in if Int32.to_int x = 1 then
      exists r : int32 . result = C_Some'0 r /\ Int32.to_int r = Int32.to_int x + 1
    else
      result = C_None'0
    
  
  let rec and_then'2 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:and_then 'self' type invariant] inv'0 self}
    {[@expl:and_then 'f' type invariant] inv'3 f}
    {[@expl:and_then requires] [%#soption6] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'1 f (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption7] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> postcondition_once'1 f (t) result
        end}
      (! return' {result}) ]
    
  
  let rec promoted1__and_then'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption12] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted0__and_then'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec and_then'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some1 <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &some2 <- C_Some'0 ([%#soption1] (3 : int32)) ] s3
      | s3 =  [ &_9 <- () ] s4
      | s4 = and_then'1 {none} {_9} (fun (_ret':t_Option'0) ->  [ &_7 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted2__and_then'0 (fun (pr2:t_Option'0) ->  [ &_34 <- pr2 ] s1)
      | s1 = eq'0 {_7} {_34} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &clos <- () ] s1
      | s1 = and_then'2 {some1} {clos} (fun (_ret':t_Option'0) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted1__and_then'0 (fun (pr1:t_Option'0) ->  [ &_33 <- pr1 ] s1)
      | s1 = eq'0 {_17} {_33} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_15 = false} (! bb8) | br1 -> {_15} (! bb7) ] 
    | bb7 = s0 [ s0 = and_then'2 {some2} {clos} (fun (_ret':t_Option'0) ->  [ &_26 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = promoted0__and_then'0 (fun (pr0:t_Option'0) ->  [ &_32 <- pr0 ] s1)
      | s1 = eq'0 {_26} {_32} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_24 = false} (! bb12) | br1 -> {_24} (! bb11) ] 
    | bb11 = return' {_0}
    | bb12 = {[%#soption2] false} any
    | bb8 = {[%#soption3] false} any
    | bb4 = {[%#soption4] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some1 : t_Option'0 = any_l ()
    | & some2 : t_Option'0 = any_l ()
    | & _5 : bool = any_l ()
    | & _7 : t_Option'0 = any_l ()
    | & _9 : () = any_l ()
    | & clos : () = any_l ()
    | & _15 : bool = any_l ()
    | & _17 : t_Option'0 = any_l ()
    | & _24 : bool = any_l ()
    | & _26 : t_Option'0 = any_l ()
    | & _32 : t_Option'0 = any_l ()
    | & _33 : t_Option'0 = any_l ()
    | & _34 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__filter [#"option.rs" 235 0 235 15]
  let%span soption0 = "option.rs" 237 33 237 34
  let%span soption1 = "option.rs" 251 4 256 5
  let%span soption2 = "option.rs" 245 4 250 5
  let%span soption3 = "option.rs" 239 4 244 5
  let%span soption4 = "option.rs" 241 23 241 28
  let%span soption5 = "../../../creusot-contracts/src/std/option.rs" 243 27 246 17
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 247 26 253 17
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption8 = "option.rs" 248 22 248 23
  let%span soption9 = "option.rs" 247 22 247 41
  let%span soption10 = "option.rs" 249 18 249 22
  let%span soption11 = "option.rs" 254 22 254 23
  let%span soption12 = "option.rs" 253 22 253 41
  let%span smodel13 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span smodel14 = "../../../creusot-contracts/src/model.rs" 92 8 92 22
  let%span soption15 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum16 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  let rec closure0'0 (_1:()) (_2:int32) (return'  (ret:bool))= {[@expl:closure requires] [%#soption4] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:bool)-> (! return' {result}) ] 
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : int32) =
    [%#soption4] let (_2) = args in false
  
  predicate postcondition_once'0 (self : ()) (args : int32) (result : bool) =
    let (_2) = args in true
  
  predicate resolve'0 (_1 : int32) =
    true
  
  let rec filter'1 (self:t_Option'0) (predicate':()) (return'  (ret:t_Option'0))= {[@expl:filter 'self' type invariant] inv'0 self}
    {[@expl:filter 'predicate' type invariant] inv'1 predicate'}
    {[@expl:filter requires] [%#soption5] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'0 predicate' (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> match result with
          | C_None'0 -> postcondition_once'0 predicate' (t) false /\ resolve'0 t
          | C_Some'0 r -> postcondition_once'0 predicate' (t) true /\ r = t
          end
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec promoted2__filter'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum16] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption15] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel13] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption7] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  function view'0 (self : int32) : int =
    [%#smodel14] Int32.to_int self
  
  let rec closure1'0 (_1:()) (x:int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.eq {x} {[%#soption8] (1 : int32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1)
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : int32 = x | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption9] result = (view'0 x = 1)} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : int32) =
    let (x) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : int32) (result : bool) =
    [%#soption9] let (x) = args in result = (view'0 x = 1)
  
  let rec filter'2 (self:t_Option'0) (predicate':()) (return'  (ret:t_Option'0))= {[@expl:filter 'self' type invariant] inv'0 self}
    {[@expl:filter 'predicate' type invariant] inv'3 predicate'}
    {[@expl:filter requires] [%#soption5] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'1 predicate' (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> match result with
          | C_None'0 -> postcondition_once'1 predicate' (t) false /\ resolve'0 t
          | C_Some'0 r -> postcondition_once'1 predicate' (t) true /\ r = t
          end
        end}
      (! return' {result}) ]
    
  
  let rec promoted1__filter'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption10] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec closure2'0 (_1:()) (x:int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.eq {x} {[%#soption11] (2 : int32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1)
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : int32 = x | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption12] result = (view'0 x = 2)} (! return' {result}) ]
    
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate precondition'2 (self : ()) (args : int32) =
    let (x) = args in true
  
  predicate postcondition_once'2 (self : ()) (args : int32) (result : bool) =
    [%#soption12] let (x) = args in result = (view'0 x = 2)
  
  let rec filter'3 (self:t_Option'0) (predicate':()) (return'  (ret:t_Option'0))= {[@expl:filter 'self' type invariant] inv'0 self}
    {[@expl:filter 'predicate' type invariant] inv'4 predicate'}
    {[@expl:filter requires] [%#soption5] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'2 predicate' (t)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_None'0
        | C_Some'0 t -> match result with
          | C_None'0 -> postcondition_once'2 predicate' (t) false /\ resolve'0 t
          | C_Some'0 r -> postcondition_once'2 predicate' (t) true /\ r = t
          end
        end}
      (! return' {result}) ]
    
  
  let rec promoted0__filter'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec filter'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &_8 <- () ] s3
      | s3 = filter'1 {none} {_8} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted2__filter'0 (fun (pr2:t_Option'0) ->  [ &_32 <- pr2 ] s1)
      | s1 = eq'0 {_6} {_32} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &_17 <- () ] s1
      | s1 = filter'2 {some} {_17} (fun (_ret':t_Option'0) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted1__filter'0 (fun (pr1:t_Option'0) ->  [ &_31 <- pr1 ] s1)
      | s1 = eq'0 {_15} {_31} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 =  [ &_26 <- () ] s1
      | s1 = filter'3 {some} {_26} (fun (_ret':t_Option'0) ->  [ &_24 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 = promoted0__filter'0 (fun (pr0:t_Option'0) ->  [ &_30 <- pr0 ] s1)
      | s1 = eq'0 {_24} {_30} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] 
    | bb11 = return' {_0}
    | bb12 = {[%#soption1] false} any
    | bb8 = {[%#soption2] false} any
    | bb4 = {[%#soption3] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _8 : () = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : t_Option'0 = any_l ()
    | & _17 : () = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : t_Option'0 = any_l ()
    | & _26 : () = any_l ()
    | & _30 : t_Option'0 = any_l ()
    | & _31 : t_Option'0 = any_l ()
    | & _32 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__is_some_and [#"option.rs" 259 0 259 20]
  let%span soption0 = "option.rs" 261 34 261 35
  let%span soption1 = "option.rs" 262 34 262 35
  let%span soption2 = "option.rs" 268 4 271 6
  let%span soption3 = "option.rs" 272 4 275 6
  let%span soption4 = "option.rs" 264 4 267 6
  let%span soption5 = "option.rs" 266 17 266 18
  let%span soption6 = "option.rs" 265 18 265 39
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 39 27 42 17
  let%span soption8 = "../../../creusot-contracts/src/std/option.rs" 43 26 46 17
  let%span soption9 = "option.rs" 270 17 270 18
  let%span soption10 = "option.rs" 269 18 269 39
  let%span soption11 = "option.rs" 274 12 274 16
  let%span soption12 = "option.rs" 273 18 273 24
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (x:int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.eq {x} {[%#soption5] (1 : int32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1)
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : int32 = x | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption6] result = (x = (1 : int32))} (! return' {result}) ]
    
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : int32) =
    let (x) = args in true
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : int32) =
    true
  
  predicate postcondition_once'0 (self : ()) (args : int32) (result : bool) =
    [%#soption6] let (x) = args in result = (x = (1 : int32))
  
  let rec is_some_and'1 (self:t_Option'0) (f:()) (return'  (ret:bool))= {[@expl:is_some_and 'self' type invariant] inv'0 self}
    {[@expl:is_some_and 'f' type invariant] inv'1 f}
    {[@expl:is_some_and requires] [%#soption7] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'0 f (t)
      end}
    any
    [ return' (result:bool)-> {[%#soption8] match self with
        | C_None'0 -> result = false
        | C_Some'0 t -> resolve'0 t /\ postcondition_once'0 f (t) result
        end}
      (! return' {result}) ]
    
  
  let rec closure1'0 (_1:()) (x:int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.eq {x} {[%#soption9] (1 : int32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1)
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : int32 = x | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption10] result = (x = (1 : int32))} (! return' {result}) ]
    
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'2 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  predicate precondition'1 (self : ()) (args : int32) =
    let (x) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : int32) (result : bool) =
    [%#soption10] let (x) = args in result = (x = (1 : int32))
  
  let rec is_some_and'2 (self:t_Option'0) (f:()) (return'  (ret:bool))= {[@expl:is_some_and 'self' type invariant] inv'0 self}
    {[@expl:is_some_and 'f' type invariant] inv'2 f}
    {[@expl:is_some_and requires] [%#soption7] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'1 f (t)
      end}
    any
    [ return' (result:bool)-> {[%#soption8] match self with
        | C_None'0 -> result = false
        | C_Some'0 t -> resolve'0 t /\ postcondition_once'1 f (t) result
        end}
      (! return' {result}) ]
    
  
  let rec closure2'0 (_1:()) (_2:int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption11] true ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption12] result} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'2 (self : ()) (args : int32) =
    let (_2) = args in true
  
  predicate postcondition_once'2 (self : ()) (args : int32) (result : bool) =
    [%#soption12] let (_2) = args in result
  
  let rec is_some_and'3 (self:t_Option'0) (f:()) (return'  (ret:bool))= {[@expl:is_some_and 'self' type invariant] inv'0 self}
    {[@expl:is_some_and 'f' type invariant] inv'3 f}
    {[@expl:is_some_and requires] [%#soption7] match self with
      | C_None'0 -> true
      | C_Some'0 t -> precondition'2 f (t)
      end}
    any
    [ return' (result:bool)-> {[%#soption8] match self with
        | C_None'0 -> result = false
        | C_Some'0 t -> resolve'0 t /\ postcondition_once'2 f (t) result
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec is_some_and'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some1 <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &some2 <- C_Some'0 ([%#soption1] (2 : int32)) ] s3
      | s3 =  [ &_7 <- () ] s4
      | s4 = is_some_and'1 {some1} {_7} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ] 
    | bb2 = s0
      [ s0 =  [ &_12 <- () ] s1
      | s1 = is_some_and'2 {some2} {_12} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ] 
    | bb5 = {[%#soption2] false} any
    | bb6 = s0
      [ s0 =  [ &_17 <- () ] s1
      | s1 = is_some_and'3 {none} {_17} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = any [ br0 -> {_15 = false} (! bb9) | br1 -> {_15} (! bb8) ] 
    | bb8 = {[%#soption3] false} any
    | bb9 = return' {_0}
    | bb3 = {[%#soption4] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some1 : t_Option'0 = any_l ()
    | & some2 : t_Option'0 = any_l ()
    | & _5 : bool = any_l ()
    | & _7 : () = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : () = any_l ()
    | & _15 : bool = any_l ()
    | & _17 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__or_else [#"option.rs" 278 0 278 16]
  let%span soption0 = "option.rs" 280 33 280 34
  let%span soption1 = "option.rs" 294 4 299 5
  let%span soption2 = "option.rs" 288 4 293 5
  let%span soption3 = "option.rs" 282 4 287 5
  let%span soption4 = "option.rs" 285 20 285 21
  let%span soption5 = "option.rs" 284 22 284 42
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 269 26 272 17
  let%span soption8 = "option.rs" 286 18 286 19
  let%span soption9 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption10 = "option.rs" 290 22 290 36
  let%span soption11 = "option.rs" 296 23 296 28
  let%span soption12 = "option.rs" 298 18 298 19
  let%span smodel13 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption14 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum15 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &res <- C_Some'0 ([%#soption4] (2 : int32)) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]
       ]
    ) [ & _0 : t_Option'0 = any_l () | & res : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> {[@expl:closure ensures] [%#soption5] result = C_Some'0 (2 : int32)}
      (! return' {result}) ]
    
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : ()) =
    let () = args in true
  
  predicate postcondition_once'0 (self : ()) (args : ()) (result : t_Option'0) =
    [%#soption5] let () = args in result = C_Some'0 (2 : int32)
  
  let rec or_else'1 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:or_else 'self' type invariant] inv'0 self}
    {[@expl:or_else 'f' type invariant] inv'1 f}
    {[@expl:or_else requires] [%#soption6] self = C_None'0  -> precondition'0 f ()}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption7] match self with
        | C_None'0 -> postcondition_once'0 f () result
        | C_Some'0 t -> result = C_Some'0 t
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  let rec promoted2__or_else'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption8] (2 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum15] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption14] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel13] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption9] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec closure1'0 (_1:()) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- C_None'0 ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : t_Option'0 = any_l () | & res : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> {[@expl:closure ensures] [%#soption10] result = C_None'0} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : ()) =
    let () = args in true
  
  predicate postcondition_once'1 (self : ()) (args : ()) (result : t_Option'0) =
    [%#soption10] let () = args in result = C_None'0
  
  let rec or_else'2 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:or_else 'self' type invariant] inv'0 self}
    {[@expl:or_else 'f' type invariant] inv'3 f}
    {[@expl:or_else requires] [%#soption6] self = C_None'0  -> precondition'1 f ()}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption7] match self with
        | C_None'0 -> postcondition_once'1 f () result
        | C_Some'0 t -> result = C_Some'0 t
        end}
      (! return' {result}) ]
    
  
  let rec promoted1__or_else'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec closure2'0 (_1:()) (return'  (ret:t_Option'0))= {[@expl:closure requires] [%#soption11] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:t_Option'0)-> (! return' {result}) ] 
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate precondition'2 (self : ()) (args : ()) =
    [%#soption11] let () = args in false
  
  predicate postcondition_once'2 (self : ()) (args : ()) (result : t_Option'0) =
    let () = args in true
  
  let rec or_else'3 (self:t_Option'0) (f:()) (return'  (ret:t_Option'0))= {[@expl:or_else 'self' type invariant] inv'0 self}
    {[@expl:or_else 'f' type invariant] inv'4 f}
    {[@expl:or_else requires] [%#soption6] self = C_None'0  -> precondition'2 f ()}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption7] match self with
        | C_None'0 -> postcondition_once'2 f () result
        | C_Some'0 t -> result = C_Some'0 t
        end}
      (! return' {result}) ]
    
  
  let rec promoted0__or_else'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption12] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec or_else'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &_8 <- () ] s3
      | s3 = or_else'1 {none} {_8} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted2__or_else'0 (fun (pr2:t_Option'0) ->  [ &_32 <- pr2 ] s1)
      | s1 = eq'0 {_6} {_32} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &_17 <- () ] s1
      | s1 = or_else'2 {none} {_17} (fun (_ret':t_Option'0) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted1__or_else'0 (fun (pr1:t_Option'0) ->  [ &_31 <- pr1 ] s1)
      | s1 = eq'0 {_15} {_31} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 =  [ &_26 <- () ] s1
      | s1 = or_else'3 {some} {_26} (fun (_ret':t_Option'0) ->  [ &_24 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 = promoted0__or_else'0 (fun (pr0:t_Option'0) ->  [ &_30 <- pr0 ] s1)
      | s1 = eq'0 {_24} {_30} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] 
    | bb11 = return' {_0}
    | bb12 = {[%#soption1] false} any
    | bb8 = {[%#soption2] false} any
    | bb4 = {[%#soption3] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _8 : () = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : t_Option'0 = any_l ()
    | & _17 : () = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : t_Option'0 = any_l ()
    | & _26 : () = any_l ()
    | & _30 : t_Option'0 = any_l ()
    | & _31 : t_Option'0 = any_l ()
    | & _32 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__insert [#"option.rs" 302 0 302 15]
  let%span soption0 = "option.rs" 304 37 304 38
  let%span soption1 = "option.rs" 306 25 306 26
  let%span soption2 = "option.rs" 307 19 307 20
  let%span soption3 = "option.rs" 308 10 308 11
  let%span soption4 = "option.rs" 310 25 310 26
  let%span soption5 = "option.rs" 311 19 311 20
  let%span soption6 = "option.rs" 312 10 312 11
  let%span soption7 = "option.rs" 313 4 313 28
  let%span soption8 = "option.rs" 311 4 311 21
  let%span soption9 = "option.rs" 309 4 309 28
  let%span soption10 = "option.rs" 307 4 307 21
  let%span soption11 = "../../../creusot-contracts/src/std/option.rs" 292 26 295 17
  let%span soption12 = "../../../creusot-contracts/src/std/option.rs" 296 26 296 68
  let%span soption13 = "option.rs" 309 25 309 26
  let%span soption14 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption15 = "option.rs" 313 25 313 26
  let%span sresolve16 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel17 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption18 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum19 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Option'0) [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : int32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : borrowed int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed int32 [inv'2 x] . inv'2 x = true
  
  predicate resolve'1 (_1 : int32) =
    true
  
  let rec insert'1 (self:borrowed (t_Option'0)) (value:int32) (return'  (ret:borrowed int32))= {[@expl:insert 'self' type invariant] inv'0 self}
    {[@expl:insert 'value' type invariant] inv'1 value}
    any
    [ return' (result:borrowed int32)-> {inv'2 result}
      {[%#soption11] match self.current with
        | C_Some'0 t -> resolve'1 t
        | C_None'0 -> true
        end}
      {[%#soption12] result.current = value /\ self.final = C_Some'0 (result.final)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  use prelude.prelude.Intrinsic
  
  let rec promoted1__insert'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption13] (3 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum19] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption18] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel17] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'3 self}
    {[@expl:eq 'other' type invariant] inv'3 other}
    any
    [ return' (result:bool)-> {[%#soption14] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec promoted0__insert'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption15] (5 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec insert'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_4 <- _ret' ]  [ &none <- _ret'.final ] s3)
      | s3 = insert'1 {_4} {[%#soption1] (2 : int32)} (fun (_ret':borrowed int32) ->  [ &i1 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Int32.eq {i1.current} {[%#soption2] (2 : int32)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 =  [ &i1 <- { i1 with current = ([%#soption3] (3 : int32)) } ] s1
      | s1 = -{resolve'0 i1}- s2
      | s2 = promoted1__insert'0 (fun (pr1:t_Option'0) ->  [ &_28 <- pr1 ] s3)
      | s3 = eq'0 {none} {_28} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ] 
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_16 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = insert'1 {_16} {[%#soption4] (4 : int32)} (fun (_ret':borrowed int32) ->  [ &i2 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = Int32.eq {i2.current} {[%#soption5] (4 : int32)} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1)
      | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb8) ]  ]
      
    | bb8 = s0
      [ s0 =  [ &i2 <- { i2 with current = ([%#soption6] (5 : int32)) } ] s1
      | s1 = -{resolve'0 i2}- s2
      | s2 = promoted0__insert'0 (fun (pr0:t_Option'0) ->  [ &_27 <- pr0 ] s3)
      | s3 = eq'0 {some} {_27} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s4)
      | s4 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] 
    | bb11 = return' {_0}
    | bb12 = {[%#soption7] false} any
    | bb9 = s0 [ s0 = -{resolve'0 i2}- s1 | s1 = {[%#soption8] false} any ] 
    | bb6 = {[%#soption9] false} any
    | bb3 = s0 [ s0 = -{resolve'0 i1}- s1 | s1 = {[%#soption10] false} any ]  ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & i1 : borrowed int32 = any_l ()
    | & _4 : borrowed (t_Option'0) = any_l ()
    | & _6 : bool = any_l ()
    | & _10 : bool = any_l ()
    | & i2 : borrowed int32 = any_l ()
    | & _16 : borrowed (t_Option'0) = any_l ()
    | & _18 : bool = any_l ()
    | & _22 : bool = any_l ()
    | & _27 : t_Option'0 = any_l ()
    | & _28 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__get_or_insert [#"option.rs" 316 0 316 22]
  let%span soption0 = "option.rs" 318 37 318 38
  let%span soption1 = "option.rs" 321 32 321 33
  let%span soption2 = "option.rs" 322 19 322 20
  let%span soption3 = "option.rs" 323 10 323 11
  let%span soption4 = "option.rs" 325 32 325 33
  let%span soption5 = "option.rs" 326 19 326 20
  let%span soption6 = "option.rs" 327 10 327 11
  let%span soption7 = "option.rs" 331 16 331 17
  let%span soption8 = "option.rs" 338 19 338 20
  let%span soption9 = "option.rs" 339 10 339 11
  let%span soption10 = "option.rs" 345 19 345 20
  let%span soption11 = "option.rs" 346 10 346 11
  let%span soption12 = "option.rs" 347 4 347 28
  let%span soption13 = "option.rs" 345 4 345 21
  let%span soption14 = "option.rs" 340 4 340 28
  let%span soption15 = "option.rs" 338 4 338 21
  let%span soption16 = "option.rs" 328 4 328 28
  let%span soption17 = "option.rs" 326 4 326 21
  let%span soption18 = "option.rs" 324 4 324 28
  let%span soption19 = "option.rs" 322 4 322 21
  let%span soption20 = "../../../creusot-contracts/src/std/option.rs" 300 26 303 17
  let%span soption21 = "option.rs" 324 25 324 26
  let%span soption22 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption23 = "option.rs" 328 25 328 26
  let%span soption24 = "option.rs" 336 11 336 12
  let%span soption25 = "option.rs" 335 18 335 32
  let%span soption26 = "../../../creusot-contracts/src/std/option.rs" 306 27 306 63
  let%span soption27 = "../../../creusot-contracts/src/std/option.rs" 307 26 310 17
  let%span soption28 = "option.rs" 340 25 340 26
  let%span soption29 = "option.rs" 342 19 342 24
  let%span soption30 = "option.rs" 347 25 347 26
  let%span sresolve31 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel32 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption33 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum34 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Option'0) [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : int32)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : borrowed int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed int32 [inv'2 x] . inv'2 x = true
  
  predicate resolve'1 (_1 : int32) =
    true
  
  let rec get_or_insert'1 (self:borrowed (t_Option'0)) (value:int32) (return'  (ret:borrowed int32))= {[@expl:get_or_insert 'self' type invariant] inv'0 self}
    {[@expl:get_or_insert 'value' type invariant] inv'1 value}
    any
    [ return' (result:borrowed int32)-> {inv'2 result}
      {[%#soption20] match self.current with
        | C_None'0 -> result.current = value /\ self.final = C_Some'0 (result.final)
        | C_Some'0 _ -> self.current = C_Some'0 (result.current)
        /\ self.final = C_Some'0 (result.final) /\ resolve'1 value
        end}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed int32) =
    [%#sresolve31] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'2 _1
  
  use prelude.prelude.Intrinsic
  
  let rec promoted3__get_or_insert'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption21] (3 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum34] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption33] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel32] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'3 self}
    {[@expl:eq 'other' type invariant] inv'3 other}
    any
    [ return' (result:bool)-> {[%#soption22] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec promoted2__get_or_insert'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption23] (5 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec closure0'0 (_1:()) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption24] (2 : int32) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () | & res : int32 = any_l () ] 
    [ return' (result:int32)-> {[@expl:closure ensures] [%#soption25] result = (2 : int32)} (! return' {result}) ]
    
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate precondition'0 (self : ()) (args : ()) =
    let () = args in true
  
  predicate postcondition_once'0 (self : ()) (args : ()) (result : int32) =
    [%#soption25] let () = args in result = (2 : int32)
  
  let rec get_or_insert_with'0 (self:borrowed (t_Option'0)) (f:()) (return'  (ret:borrowed int32))= {[@expl:get_or_insert_with 'self' type invariant] inv'0 self}
    {[@expl:get_or_insert_with 'f' type invariant] inv'4 f}
    {[@expl:get_or_insert_with requires] [%#soption26] self.current = C_None'0  -> precondition'0 f ()}
    any
    [ return' (result:borrowed int32)-> {inv'2 result}
      {[%#soption27] match self.current with
        | C_None'0 -> postcondition_once'0 f () result.current /\ self.final = C_Some'0 (result.final)
        | C_Some'0 _ -> self.current = C_Some'0 (result.current) /\ self.final = C_Some'0 (result.final)
        end}
      (! return' {result}) ]
    
  
  let rec promoted1__get_or_insert'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption28] (3 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec closure1'0 (_1:()) (return'  (ret:int32))= {[@expl:closure requires] [%#soption29] false}
    (! bb0 [ bb0 = {false} any ] ) [ return' (result:int32)-> (! return' {result}) ] 
  
  predicate inv'5 (_1 : ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : () [inv'5 x] . inv'5 x = true
  
  predicate precondition'1 (self : ()) (args : ()) =
    [%#soption29] let () = args in false
  
  predicate postcondition_once'1 (self : ()) (args : ()) (result : int32) =
    let () = args in true
  
  let rec get_or_insert_with'1 (self:borrowed (t_Option'0)) (f:()) (return'  (ret:borrowed int32))= {[@expl:get_or_insert_with 'self' type invariant] inv'0 self}
    {[@expl:get_or_insert_with 'f' type invariant] inv'5 f}
    {[@expl:get_or_insert_with requires] [%#soption26] self.current = C_None'0  -> precondition'1 f ()}
    any
    [ return' (result:borrowed int32)-> {inv'2 result}
      {[%#soption27] match self.current with
        | C_None'0 -> postcondition_once'1 f () result.current /\ self.final = C_Some'0 (result.final)
        | C_Some'0 _ -> self.current = C_Some'0 (result.current) /\ self.final = C_Some'0 (result.final)
        end}
      (! return' {result}) ]
    
  
  let rec promoted0__get_or_insert'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption30] (5 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec get_or_insert'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_4 <- _ret' ]  [ &none <- _ret'.final ] s3)
      | s3 = get_or_insert'1 {_4} {[%#soption1] (2 : int32)} (fun (_ret':borrowed int32) ->  [ &i1 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = Int32.eq {i1.current} {[%#soption2] (2 : int32)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb3) | br1 -> {_6} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 =  [ &i1 <- { i1 with current = ([%#soption3] (3 : int32)) } ] s1
      | s1 = -{resolve'0 i1}- s2
      | s2 = promoted3__get_or_insert'0 (fun (pr3:t_Option'0) ->  [ &_58 <- pr3 ] s3)
      | s3 = eq'0 {none} {_58} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ] 
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_16 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = get_or_insert'1 {_16} {[%#soption4] (4 : int32)} (fun (_ret':borrowed int32) ->  [ &i2 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = Int32.eq {i2.current} {[%#soption5] (1 : int32)} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1)
      | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb8) ]  ]
      
    | bb8 = s0
      [ s0 =  [ &i2 <- { i2 with current = ([%#soption6] (5 : int32)) } ] s1
      | s1 = -{resolve'0 i2}- s2
      | s2 = promoted2__get_or_insert'0 (fun (pr2:t_Option'0) ->  [ &_57 <- pr2 ] s3)
      | s3 = eq'0 {some} {_57} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s4)
      | s4 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb12) | br1 -> {_22} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_27 <- C_None'0 ] s1
      | s1 =  [ &none <- _27 ] s2
      | s2 =  [ &_28 <- C_Some'0 ([%#soption7] (1 : int32)) ] s3
      | s3 =  [ &some <- _28 ] s4
      | s4 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_30 <- _ret' ]  [ &none <- _ret'.final ] s5)
      | s5 =  [ &_31 <- () ] s6
      | s6 = get_or_insert_with'0 {_30} {_31} (fun (_ret':borrowed int32) ->  [ &i11 <- _ret' ] s7)
      | s7 = bb13 ]
      
    | bb13 = s0
      [ s0 = Int32.eq {i11.current} {[%#soption8] (2 : int32)} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s1)
      | s1 = any [ br0 -> {_33 = false} (! bb15) | br1 -> {_33} (! bb14) ]  ]
      
    | bb14 = s0
      [ s0 =  [ &i11 <- { i11 with current = ([%#soption9] (3 : int32)) } ] s1
      | s1 = -{resolve'0 i11}- s2
      | s2 = promoted1__get_or_insert'0 (fun (pr1:t_Option'0) ->  [ &_56 <- pr1 ] s3)
      | s3 = eq'0 {none} {_56} (fun (_ret':bool) ->  [ &_37 <- _ret' ] s4)
      | s4 = bb16 ]
      
    | bb16 = any [ br0 -> {_37 = false} (! bb18) | br1 -> {_37} (! bb17) ] 
    | bb17 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_43 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 =  [ &_44 <- () ] s2
      | s2 = get_or_insert_with'1 {_43} {_44} (fun (_ret':borrowed int32) ->  [ &i21 <- _ret' ] s3)
      | s3 = bb19 ]
      
    | bb19 = s0
      [ s0 = Int32.eq {i21.current} {[%#soption10] (1 : int32)} (fun (_ret':bool) ->  [ &_46 <- _ret' ] s1)
      | s1 = any [ br0 -> {_46 = false} (! bb21) | br1 -> {_46} (! bb20) ]  ]
      
    | bb20 = s0
      [ s0 =  [ &i21 <- { i21 with current = ([%#soption11] (5 : int32)) } ] s1
      | s1 = -{resolve'0 i21}- s2
      | s2 = promoted0__get_or_insert'0 (fun (pr0:t_Option'0) ->  [ &_55 <- pr0 ] s3)
      | s3 = eq'0 {some} {_55} (fun (_ret':bool) ->  [ &_50 <- _ret' ] s4)
      | s4 = bb22 ]
      
    | bb22 = any [ br0 -> {_50 = false} (! bb24) | br1 -> {_50} (! bb23) ] 
    | bb23 = return' {_0}
    | bb24 = {[%#soption12] false} any
    | bb21 = s0 [ s0 = -{resolve'0 i21}- s1 | s1 = {[%#soption13] false} any ] 
    | bb18 = {[%#soption14] false} any
    | bb15 = s0 [ s0 = -{resolve'0 i11}- s1 | s1 = {[%#soption15] false} any ] 
    | bb12 = {[%#soption16] false} any
    | bb9 = s0 [ s0 = -{resolve'0 i2}- s1 | s1 = {[%#soption17] false} any ] 
    | bb6 = {[%#soption18] false} any
    | bb3 = s0 [ s0 = -{resolve'0 i1}- s1 | s1 = {[%#soption19] false} any ]  ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & i1 : borrowed int32 = any_l ()
    | & _4 : borrowed (t_Option'0) = any_l ()
    | & _6 : bool = any_l ()
    | & _10 : bool = any_l ()
    | & i2 : borrowed int32 = any_l ()
    | & _16 : borrowed (t_Option'0) = any_l ()
    | & _18 : bool = any_l ()
    | & _22 : bool = any_l ()
    | & _27 : t_Option'0 = any_l ()
    | & _28 : t_Option'0 = any_l ()
    | & i11 : borrowed int32 = any_l ()
    | & _30 : borrowed (t_Option'0) = any_l ()
    | & _31 : () = any_l ()
    | & _33 : bool = any_l ()
    | & _37 : bool = any_l ()
    | & i21 : borrowed int32 = any_l ()
    | & _43 : borrowed (t_Option'0) = any_l ()
    | & _44 : () = any_l ()
    | & _46 : bool = any_l ()
    | & _50 : bool = any_l ()
    | & _55 : t_Option'0 = any_l ()
    | & _56 : t_Option'0 = any_l ()
    | & _57 : t_Option'0 = any_l ()
    | & _58 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__take [#"option.rs" 350 0 350 13]
  let%span soption0 = "option.rs" 352 37 352 38
  let%span soption1 = "option.rs" 356 36 356 37
  let%span soption2 = "option.rs" 357 4 357 27
  let%span soption3 = "option.rs" 356 4 356 38
  let%span soption4 = "option.rs" 355 4 355 27
  let%span soption5 = "option.rs" 354 4 354 34
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Option'0) [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  let rec take'1 (self:borrowed (t_Option'0)) (return'  (ret:t_Option'0))= {[@expl:take 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#soption6] result = self.current /\ self.final = C_None'0}
      (! return' {result}) ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  let rec is_none'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'2 self}
    any [ return' (result:bool)-> {[%#soption7] result = (self = C_None'0)} (! return' {result}) ] 
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] [%#soption6] self <> C_None'0}
    any [ return' (result:int32)-> {inv'3 result} {[%#soption6] C_Some'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec take'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_7 <- _ret' ]  [ &none <- _ret'.final ] s3)
      | s3 = take'1 {_7} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = s0 [ s0 = is_none'0 {_6} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0 [ s0 = is_none'0 {none} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb6) ] 
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_17 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = take'1 {_17} (fun (_ret':t_Option'0) ->  [ &_16 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0 [ s0 = unwrap'0 {_16} (fun (_ret':int32) ->  [ &_15 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = Int32.eq {_15} {[%#soption1] (1 : int32)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s1)
      | s1 = any [ br0 -> {_14 = false} (! bb11) | br1 -> {_14} (! bb10) ]  ]
      
    | bb10 = s0 [ s0 = is_none'0 {some} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = any [ br0 -> {_20 = false} (! bb14) | br1 -> {_20} (! bb13) ] 
    | bb13 = return' {_0}
    | bb14 = {[%#soption2] false} any
    | bb11 = {[%#soption3] false} any
    | bb7 = {[%#soption4] false} any
    | bb4 = {[%#soption5] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _7 : borrowed (t_Option'0) = any_l ()
    | & _10 : bool = any_l ()
    | & _14 : bool = any_l ()
    | & _15 : int32 = any_l ()
    | & _16 : t_Option'0 = any_l ()
    | & _17 : borrowed (t_Option'0) = any_l ()
    | & _20 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__take_if [#"option.rs" 360 0 360 16]
  let%span soption0 = "option.rs" 362 37 362 38
  let%span soption1 = "option.rs" 389 4 389 25
  let%span soption2 = "option.rs" 378 4 388 5
  let%span soption3 = "option.rs" 377 4 377 28
  let%span soption4 = "option.rs" 370 4 376 5
  let%span soption5 = "option.rs" 364 4 369 5
  let%span soption6 = "option.rs" 366 23 366 28
  let%span soption7 = "../../../creusot-contracts/src/std/option.rs" 324 27 327 17
  let%span soption8 = "../../../creusot-contracts/src/std/option.rs" 328 26 337 17
  let%span soption9 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption10 = "option.rs" 374 22 374 23
  let%span soption11 = "option.rs" 372 22 372 44
  let%span soption12 = "option.rs" 373 22 373 30
  let%span soption13 = "option.rs" 377 25 377 26
  let%span soption14 = "option.rs" 383 32 383 33
  let%span soption15 = "option.rs" 384 21 384 22
  let%span soption16 = "option.rs" 380 22 380 44
  let%span soption17 = "option.rs" 381 22 381 32
  let%span soption18 = "option.rs" 387 18 387 19
  let%span smodel19 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span sresolve20 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span soption21 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum22 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed int32) =
    [%#sresolve20] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed int32) =
    resolve'1 _1
  
  let rec closure0'0 (_1:()) (_2:borrowed int32) (return'  (ret:bool))= {[@expl:closure requires] [%#soption6] false}
    (! bb0 [ bb0 = s0 [ s0 = -{resolve'0 _2}- s1 | s1 = {false} any ]  ] ) [ & _2 : borrowed int32 = _2 ] 
    [ return' (result:bool)-> (! return' {result}) ]
    
  
  predicate inv'0 (_1 : borrowed (t_Option'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Option'0) [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : borrowed int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed int32 [inv'2 x] . inv'2 x = true
  
  predicate precondition'0 (self : ()) (args : borrowed int32) =
    [%#soption6] let (_2) = args in false
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  predicate postcondition_once'0 (self : ()) (args : borrowed int32) (result : bool) =
    let (_2) = args in true
  
  let rec take_if'1 (self:borrowed (t_Option'0)) (predicate':()) (return'  (ret:t_Option'0))= {[@expl:take_if 'self' type invariant] inv'0 self}
    {[@expl:take_if 'predicate' type invariant] inv'1 predicate'}
    {[@expl:take_if requires] [%#soption7] match self.current with
      | C_None'0 -> true
      | C_Some'0 t -> forall b : borrowed int32 . inv'2 b /\ b.current = t  -> precondition'0 predicate' (b)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'3 result}
      {[%#soption8] match self.current with
        | C_None'0 -> result = C_None'0 /\ self.final = C_None'0
        | C_Some'0 cur -> exists b : borrowed int32, res : bool . inv'2 b
        /\ cur = b.current
        /\ postcondition_once'0 predicate' (b) res
        /\ (if res then
          self.final = C_None'0 /\ result = C_Some'0 (b.final)
        else
          self.final = C_Some'0 (b.final) /\ result = C_None'0
        )
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec promoted4__take_if'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  use prelude.prelude.Int
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum22] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption21] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel19] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'4 self}
    {[@expl:eq 'other' type invariant] inv'4 other}
    any
    [ return' (result:bool)-> {[%#soption9] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec closure1'0 (_1:()) (x:borrowed int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 x}- s1
      | s1 = Int32.eq {x.current} {[%#soption10] (2 : int32)} (fun (_ret':bool) ->  [ &res1 <- _ret' ] s2)
      | s2 =  [ &res <- res1 ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & x : borrowed int32 = x | & res : bool = any_l () | & res1 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures #0] [%#soption11] result = (x.current = (2 : int32))}
      {[@expl:closure ensures #1] [%#soption12] x.current = x.final}
      (! return' {result}) ]
    
  
  predicate inv'5 (_1 : ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : () [inv'5 x] . inv'5 x = true
  
  predicate precondition'1 (self : ()) (args : borrowed int32) =
    let (x) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : borrowed int32) (result : bool) =
    let (x) = args in x.current = x.final /\ result = (x.current = (2 : int32))
  
  let rec take_if'2 (self:borrowed (t_Option'0)) (predicate':()) (return'  (ret:t_Option'0))= {[@expl:take_if 'self' type invariant] inv'0 self}
    {[@expl:take_if 'predicate' type invariant] inv'5 predicate'}
    {[@expl:take_if requires] [%#soption7] match self.current with
      | C_None'0 -> true
      | C_Some'0 t -> forall b : borrowed int32 . inv'2 b /\ b.current = t  -> precondition'1 predicate' (b)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'3 result}
      {[%#soption8] match self.current with
        | C_None'0 -> result = C_None'0 /\ self.final = C_None'0
        | C_Some'0 cur -> exists b : borrowed int32, res : bool . inv'2 b
        /\ cur = b.current
        /\ postcondition_once'1 predicate' (b) res
        /\ (if res then
          self.final = C_None'0 /\ result = C_Some'0 (b.final)
        else
          self.final = C_Some'0 (b.final) /\ result = C_None'0
        )
        end}
      (! return' {result}) ]
    
  
  let rec promoted3__take_if'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted2__take_if'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption13] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec closure2'0 (_1:()) (x:borrowed int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Int32.eq {x.current} {[%#soption14] (1 : int32)} (fun (_ret':bool) ->  [ &res2 <- _ret' ] s1)
      | s1 =  [ &x <- { x with current = ([%#soption15] (3 : int32)) } ] s2
      | s2 = -{resolve'0 x}- s3
      | s3 =  [ &res1 <- res2 ] s4
      | s4 =  [ &res <- res1 ] s5
      | s5 =  [ &_0 <- res ] s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & x : borrowed int32 = x
    | & res : bool = any_l ()
    | & res1 : bool = any_l ()
    | & res2 : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:closure ensures #0] [%#soption16] result = (x.current = (1 : int32))}
      {[@expl:closure ensures #1] [%#soption17] x.final = (3 : int32)}
      (! return' {result}) ]
    
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  predicate precondition'2 (self : ()) (args : borrowed int32) =
    let (x) = args in true
  
  predicate postcondition_once'2 (self : ()) (args : borrowed int32) (result : bool) =
    let (x) = args in x.final = (3 : int32) /\ result = (x.current = (1 : int32))
  
  let rec take_if'3 (self:borrowed (t_Option'0)) (predicate':()) (return'  (ret:t_Option'0))= {[@expl:take_if 'self' type invariant] inv'0 self}
    {[@expl:take_if 'predicate' type invariant] inv'6 predicate'}
    {[@expl:take_if requires] [%#soption7] match self.current with
      | C_None'0 -> true
      | C_Some'0 t -> forall b : borrowed int32 . inv'2 b /\ b.current = t  -> precondition'2 predicate' (b)
      end}
    any
    [ return' (result:t_Option'0)-> {inv'3 result}
      {[%#soption8] match self.current with
        | C_None'0 -> result = C_None'0 /\ self.final = C_None'0
        | C_Some'0 cur -> exists b : borrowed int32, res : bool . inv'2 b
        /\ cur = b.current
        /\ postcondition_once'2 predicate' (b) res
        /\ (if res then
          self.final = C_None'0 /\ result = C_Some'0 (b.final)
        else
          self.final = C_Some'0 (b.final) /\ result = C_None'0
        )
        end}
      (! return' {result}) ]
    
  
  let rec promoted1__take_if'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption18] (3 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted0__take_if'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec take_if'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = Borrow.borrow_mut <t_Option'0> {none}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_7 <- _ret' ]  [ &none <- _ret'.final ] s3)
      | s3 =  [ &_8 <- () ] s4
      | s4 = take_if'1 {_7} {_8} (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted4__take_if'0 (fun (pr4:t_Option'0) ->  [ &_46 <- pr4 ] s1)
      | s1 = eq'0 {_6} {_46} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb3) ] 
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_16 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 =  [ &_17 <- () ] s2
      | s2 = take_if'2 {_16} {_17} (fun (_ret':t_Option'0) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = promoted3__take_if'0 (fun (pr3:t_Option'0) ->  [ &_45 <- pr3 ] s1)
      | s1 = eq'0 {_15} {_45} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 = promoted2__take_if'0 (fun (pr2:t_Option'0) ->  [ &_44 <- pr2 ] s1)
      | s1 = eq'0 {some} {_44} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = any [ br0 -> {_22 = false} (! bb11) | br1 -> {_22} (! bb10) ] 
    | bb10 = s0
      [ s0 = Borrow.borrow_mut <t_Option'0> {some}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &_31 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 =  [ &_32 <- () ] s2
      | s2 = take_if'3 {_31} {_32} (fun (_ret':t_Option'0) ->  [ &_30 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = promoted1__take_if'0 (fun (pr1:t_Option'0) ->  [ &_43 <- pr1 ] s1)
      | s1 = eq'0 {_30} {_43} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = any [ br0 -> {_28 = false} (! bb15) | br1 -> {_28} (! bb14) ] 
    | bb14 = s0
      [ s0 = promoted0__take_if'0 (fun (pr0:t_Option'0) ->  [ &_42 <- pr0 ] s1)
      | s1 = eq'0 {some} {_42} (fun (_ret':bool) ->  [ &_37 <- _ret' ] s2)
      | s2 = bb16 ]
      
    | bb16 = any [ br0 -> {_37 = false} (! bb18) | br1 -> {_37} (! bb17) ] 
    | bb17 = return' {_0}
    | bb18 = {[%#soption1] false} any
    | bb15 = {[%#soption2] false} any
    | bb11 = {[%#soption3] false} any
    | bb8 = {[%#soption4] false} any
    | bb4 = {[%#soption5] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'0 = any_l ()
    | & some : t_Option'0 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & _7 : borrowed (t_Option'0) = any_l ()
    | & _8 : () = any_l ()
    | & _13 : bool = any_l ()
    | & _15 : t_Option'0 = any_l ()
    | & _16 : borrowed (t_Option'0) = any_l ()
    | & _17 : () = any_l ()
    | & _22 : bool = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : t_Option'0 = any_l ()
    | & _31 : borrowed (t_Option'0) = any_l ()
    | & _32 : () = any_l ()
    | & _37 : bool = any_l ()
    | & _42 : t_Option'0 = any_l ()
    | & _43 : t_Option'0 = any_l ()
    | & _44 : t_Option'0 = any_l ()
    | & _45 : t_Option'0 = any_l ()
    | & _46 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__copied_cloned [#"option.rs" 392 0 392 22]
  let%span soption0 = "option.rs" 394 37 394 38
  let%span soption1 = "option.rs" 398 47 398 48
  let%span soption2 = "option.rs" 400 47 400 48
  let%span soption3 = "option.rs" 403 47 403 48
  let%span soption4 = "option.rs" 405 47 405 48
  let%span soption5 = "option.rs" 405 4 405 49
  let%span soption6 = "option.rs" 404 4 404 45
  let%span soption7 = "option.rs" 403 4 403 49
  let%span soption8 = "option.rs" 402 4 402 45
  let%span soption9 = "option.rs" 400 4 400 49
  let%span soption10 = "option.rs" 399 4 399 45
  let%span soption11 = "option.rs" 398 4 398 49
  let%span soption12 = "option.rs" 397 4 397 45
  let%span soption13 = "../../../creusot-contracts/src/std/option.rs" 55 26 55 58
  let%span soption14 = "../../../creusot-contracts/src/std/option.rs" 57 20 57 89
  let%span soption15 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption16 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  let%span soption17 = "../../../creusot-contracts/src/std/option.rs" 62 26 62 75
  let%span soption18 = "../../../creusot-contracts/src/std/option.rs" 64 20 65 100
  let%span sresolve19 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 int32
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  let rec as_ref'0 (self:t_Option'1) (return'  (ret:t_Option'0))= {[@expl:as_ref 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#soption13] self = C_None'0  -> result = C_None'1}
      {[%#soption14] self = C_None'0 \/ (exists r : int32 . result = C_Some'1 r /\ self = C_Some'0 r)}
      (! return' {result}) ]
    
  
  predicate inv'2 (_1 : t_Option'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'1 [inv'2 x] . inv'2 x = true
  
  let rec copied'0 (self:t_Option'0) (return'  (ret:t_Option'1))= {[@expl:copied 'self' type invariant] inv'1 self}
    any
    [ return' (result:t_Option'1)-> {inv'2 result}
      {[%#soption15] self = C_None'1  -> result = C_None'0}
      {[%#soption15] self = C_None'1 \/ (exists t : int32 . self = C_Some'1 t /\ result = C_Some'0 t)}
      (! return' {result}) ]
    
  
  let rec is_none'0 (self:t_Option'1) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'0 self}
    any [ return' (result:bool)-> {[%#soption16] result = (self = C_None'0)} (! return' {result}) ] 
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  let rec unwrap'0 (self:t_Option'1) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'2 self}
    {[@expl:unwrap requires] [%#soption15] self <> C_None'0}
    any [ return' (result:int32)-> {inv'3 result} {[%#soption15] C_Some'0 result = self} (! return' {result}) ] 
  
  predicate inv'4 (_1 : borrowed (t_Option'1))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_Option'1) [inv'4 x] . inv'4 x = true
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 (borrowed int32)
  
  predicate inv'5 (_1 : t_Option'2)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'2 [inv'5 x] . inv'5 x = true
  
  let rec as_mut'0 (self:borrowed (t_Option'1)) (return'  (ret:t_Option'2))= {[@expl:as_mut 'self' type invariant] inv'4 self}
    any
    [ return' (result:t_Option'2)-> {inv'5 result}
      {[%#soption17] self.current = C_None'0  -> result = C_None'2 /\ self.final = C_None'0}
      {[%#soption18] self.current = C_None'0
      \/ (exists r : borrowed int32 . result = C_Some'2 r
      /\ self.current = C_Some'0 (r.current) /\ self.final = C_Some'0 (r.final))}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed int32) =
    [%#sresolve19] self.final = self.current
  
  let rec copied'1 (self:t_Option'2) (return'  (ret:t_Option'1))= {[@expl:copied 'self' type invariant] inv'5 self}
    any
    [ return' (result:t_Option'1)-> {inv'2 result}
      {[%#soption15] self = C_None'2  -> result = C_None'0}
      {[%#soption15] self = C_None'2
      \/ (exists t : borrowed int32 . self = C_Some'2 t /\ result = C_Some'0 (t.current) /\ resolve'0 t)}
      (! return' {result}) ]
    
  
  let rec cloned'0 (self:t_Option'0) (return'  (ret:t_Option'1))= {[@expl:cloned 'self' type invariant] inv'1 self}
    any
    [ return' (result:t_Option'1)-> {inv'2 result}
      {[%#soption15] self = C_None'1  -> result = C_None'0}
      {[%#soption15] self = C_None'1 \/ (exists t : int32 . self = C_Some'1 t /\ result = C_Some'0 t)}
      (! return' {result}) ]
    
  
  let rec cloned'1 (self:t_Option'2) (return'  (ret:t_Option'1))= {[@expl:cloned 'self' type invariant] inv'5 self}
    any
    [ return' (result:t_Option'1)-> {inv'2 result}
      {[%#soption15] self = C_None'2  -> result = C_None'0}
      {[%#soption15] self = C_None'2
      \/ (exists t : borrowed int32 . self = C_Some'2 t /\ result = C_Some'0 (t.current) /\ resolve'0 t)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec copied_cloned'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &some <- C_Some'0 ([%#soption0] (1 : int32)) ] s2
      | s2 = as_ref'0 {none} (fun (_ret':t_Option'0) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = copied'0 {_7} (fun (_ret':t_Option'1) ->  [ &_6 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = is_none'0 {_6} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_4 = false} (! bb5) | br1 -> {_4} (! bb4) ] 
    | bb4 = s0 [ s0 = as_ref'0 {some} (fun (_ret':t_Option'0) ->  [ &_14 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = copied'0 {_14} (fun (_ret':t_Option'1) ->  [ &_13 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 = unwrap'0 {_13} (fun (_ret':int32) ->  [ &_12 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = Int32.eq {_12} {[%#soption1] (1 : int32)} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1)
      | s1 = any [ br0 -> {_11 = false} (! bb10) | br1 -> {_11} (! bb9) ]  ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_mut <t_Option'1> {none}
          (fun (_ret':borrowed (t_Option'1)) ->  [ &_22 <- _ret' ]  [ &none <- _ret'.final ] s1)
      | s1 = as_mut'0 {_22} (fun (_ret':t_Option'2) ->  [ &_21 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0 [ s0 = copied'1 {_21} (fun (_ret':t_Option'1) ->  [ &_20 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0 [ s0 = is_none'0 {_20} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = any [ br0 -> {_18 = false} (! bb15) | br1 -> {_18} (! bb14) ] 
    | bb14 = s0
      [ s0 = Borrow.borrow_mut <t_Option'1> {some}
          (fun (_ret':borrowed (t_Option'1)) ->  [ &_29 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = as_mut'0 {_29} (fun (_ret':t_Option'2) ->  [ &_28 <- _ret' ] s2)
      | s2 = bb16 ]
      
    | bb16 = s0 [ s0 = copied'1 {_28} (fun (_ret':t_Option'1) ->  [ &_27 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0 [ s0 = unwrap'0 {_27} (fun (_ret':int32) ->  [ &_26 <- _ret' ] s1) | s1 = bb18 ] 
    | bb18 = s0
      [ s0 = Int32.eq {_26} {[%#soption2] (1 : int32)} (fun (_ret':bool) ->  [ &_25 <- _ret' ] s1)
      | s1 = any [ br0 -> {_25 = false} (! bb20) | br1 -> {_25} (! bb19) ]  ]
      
    | bb19 = s0 [ s0 = as_ref'0 {none} (fun (_ret':t_Option'0) ->  [ &_35 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0 [ s0 = cloned'0 {_35} (fun (_ret':t_Option'1) ->  [ &_34 <- _ret' ] s1) | s1 = bb22 ] 
    | bb22 = s0 [ s0 = is_none'0 {_34} (fun (_ret':bool) ->  [ &_32 <- _ret' ] s1) | s1 = bb23 ] 
    | bb23 = any [ br0 -> {_32 = false} (! bb25) | br1 -> {_32} (! bb24) ] 
    | bb24 = s0 [ s0 = as_ref'0 {some} (fun (_ret':t_Option'0) ->  [ &_42 <- _ret' ] s1) | s1 = bb26 ] 
    | bb26 = s0 [ s0 = cloned'0 {_42} (fun (_ret':t_Option'1) ->  [ &_41 <- _ret' ] s1) | s1 = bb27 ] 
    | bb27 = s0 [ s0 = unwrap'0 {_41} (fun (_ret':int32) ->  [ &_40 <- _ret' ] s1) | s1 = bb28 ] 
    | bb28 = s0
      [ s0 = Int32.eq {_40} {[%#soption3] (1 : int32)} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s1)
      | s1 = any [ br0 -> {_39 = false} (! bb30) | br1 -> {_39} (! bb29) ]  ]
      
    | bb29 = s0
      [ s0 = Borrow.borrow_mut <t_Option'1> {none}
          (fun (_ret':borrowed (t_Option'1)) ->  [ &_50 <- _ret' ]  [ &none <- _ret'.final ] s1)
      | s1 = as_mut'0 {_50} (fun (_ret':t_Option'2) ->  [ &_49 <- _ret' ] s2)
      | s2 = bb31 ]
      
    | bb31 = s0 [ s0 = cloned'1 {_49} (fun (_ret':t_Option'1) ->  [ &_48 <- _ret' ] s1) | s1 = bb32 ] 
    | bb32 = s0 [ s0 = is_none'0 {_48} (fun (_ret':bool) ->  [ &_46 <- _ret' ] s1) | s1 = bb33 ] 
    | bb33 = any [ br0 -> {_46 = false} (! bb35) | br1 -> {_46} (! bb34) ] 
    | bb34 = s0
      [ s0 = Borrow.borrow_mut <t_Option'1> {some}
          (fun (_ret':borrowed (t_Option'1)) ->  [ &_57 <- _ret' ]  [ &some <- _ret'.final ] s1)
      | s1 = as_mut'0 {_57} (fun (_ret':t_Option'2) ->  [ &_56 <- _ret' ] s2)
      | s2 = bb36 ]
      
    | bb36 = s0 [ s0 = cloned'1 {_56} (fun (_ret':t_Option'1) ->  [ &_55 <- _ret' ] s1) | s1 = bb37 ] 
    | bb37 = s0 [ s0 = unwrap'0 {_55} (fun (_ret':int32) ->  [ &_54 <- _ret' ] s1) | s1 = bb38 ] 
    | bb38 = s0
      [ s0 = Int32.eq {_54} {[%#soption4] (1 : int32)} (fun (_ret':bool) ->  [ &_53 <- _ret' ] s1)
      | s1 = any [ br0 -> {_53 = false} (! bb40) | br1 -> {_53} (! bb39) ]  ]
      
    | bb39 = return' {_0}
    | bb40 = {[%#soption5] false} any
    | bb35 = {[%#soption6] false} any
    | bb30 = {[%#soption7] false} any
    | bb25 = {[%#soption8] false} any
    | bb20 = {[%#soption9] false} any
    | bb15 = {[%#soption10] false} any
    | bb10 = {[%#soption11] false} any
    | bb5 = {[%#soption12] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'1 = any_l ()
    | & some : t_Option'1 = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : t_Option'1 = any_l ()
    | & _7 : t_Option'0 = any_l ()
    | & _11 : bool = any_l ()
    | & _12 : int32 = any_l ()
    | & _13 : t_Option'1 = any_l ()
    | & _14 : t_Option'0 = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : t_Option'1 = any_l ()
    | & _21 : t_Option'2 = any_l ()
    | & _22 : borrowed (t_Option'1) = any_l ()
    | & _25 : bool = any_l ()
    | & _26 : int32 = any_l ()
    | & _27 : t_Option'1 = any_l ()
    | & _28 : t_Option'2 = any_l ()
    | & _29 : borrowed (t_Option'1) = any_l ()
    | & _32 : bool = any_l ()
    | & _34 : t_Option'1 = any_l ()
    | & _35 : t_Option'0 = any_l ()
    | & _39 : bool = any_l ()
    | & _40 : int32 = any_l ()
    | & _41 : t_Option'1 = any_l ()
    | & _42 : t_Option'0 = any_l ()
    | & _46 : bool = any_l ()
    | & _48 : t_Option'1 = any_l ()
    | & _49 : t_Option'2 = any_l ()
    | & _50 : borrowed (t_Option'1) = any_l ()
    | & _53 : bool = any_l ()
    | & _54 : int32 = any_l ()
    | & _55 : t_Option'1 = any_l ()
    | & _56 : t_Option'2 = any_l ()
    | & _57 : borrowed (t_Option'1) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__zip_unzip [#"option.rs" 408 0 408 18]
  let%span soption0 = "option.rs" 411 37 411 38
  let%span soption1 = "option.rs" 412 39 412 43
  let%span soption2 = "option.rs" 420 49 420 50
  let%span soption3 = "option.rs" 420 52 420 56
  let%span soption4 = "option.rs" 427 4 427 39
  let%span soption5 = "option.rs" 426 4 426 36
  let%span soption6 = "option.rs" 425 4 425 33
  let%span soption7 = "option.rs" 424 4 424 33
  let%span soption8 = "option.rs" 417 4 417 55
  let%span soption9 = "option.rs" 416 4 416 44
  let%span soption10 = "option.rs" 415 4 415 44
  let%span soption11 = "option.rs" 414 4 414 44
  let%span soption12 = "../../../creusot-contracts/src/std/option.rs" 352 26 356 17
  let%span soption13 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption14 = "option.rs" 417 45 417 46
  let%span soption15 = "option.rs" 417 48 417 52
  let%span soption16 = "../../../creusot-contracts/src/std/option.rs" 362 26 365 17
  let%span soption17 = "option.rs" 426 33 426 34
  let%span soption18 = "option.rs" 427 33 427 37
  let%span sresolve19 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span smodel20 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption21 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span stuples22 = "../../../creusot-contracts/src/std/tuples.rs" 29 28 29 57
  let%span snum23 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span smodel24 = "../../../creusot-contracts/src/model.rs" 120 8 120 12
  
  use prelude.prelude.Int32
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 int32
  
  type t_Option'2  =
    | C_None'1
    | C_Some'1 bool
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_Option'2)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'2 [inv'1 x] . inv'1 x = true
  
  type t_Option'0  =
    | C_None'2
    | C_Some'2 (int32, bool)
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate resolve'2 (_1 : bool) =
    true
  
  predicate resolve'0 (self : t_Option'2) =
    [%#sresolve19] match self with
      | C_Some'1 x -> resolve'2 x
      | C_None'1 -> true
      end
  
  predicate resolve'3 (_1 : int32) =
    true
  
  predicate resolve'1 (self : t_Option'1) =
    [%#sresolve19] match self with
      | C_Some'0 x -> resolve'3 x
      | C_None'0 -> true
      end
  
  let rec zip'0 (self:t_Option'1) (other:t_Option'2) (return'  (ret:t_Option'0))= {[@expl:zip 'self' type invariant] inv'0 self}
    {[@expl:zip 'other' type invariant] inv'1 other}
    any
    [ return' (result:t_Option'0)-> {inv'2 result}
      {[%#soption12] match (self, other) with
        | (C_None'0, _) -> result = C_None'2 /\ resolve'0 other
        | (_, C_None'1) -> result = C_None'2 /\ resolve'1 self
        | (C_Some'0 t, C_Some'1 u) -> result = C_Some'2 (t, u)
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec promoted7__zip_unzip'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'2 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  use prelude.prelude.Int
  
  type t_Option'3  =
    | C_None'3
    | C_Some'3 (int, bool)
  
  use prelude.prelude.Int32
  
  function deep_model'7 (self : int32) : int =
    [%#snum23] Int32.to_int self
  
  function deep_model'8 (self : bool) : bool =
    [%#smodel24] self
  
  function deep_model'6 (self : (int32, bool)) : (int, bool) =
    [%#stuples22] (deep_model'7 (let (a, _) = self in a), deep_model'8 (let (_, a) = self in a))
  
  function deep_model'3 (self : t_Option'0) : t_Option'3 =
    [%#soption21] match self with
      | C_Some'2 t -> C_Some'3 (deep_model'6 t)
      | C_None'2 -> C_None'3
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'3 =
    [%#smodel20] deep_model'3 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'3 self}
    {[@expl:eq 'other' type invariant] inv'3 other}
    any
    [ return' (result:bool)-> {[%#soption13] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec promoted6__zip_unzip'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'2 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted5__zip_unzip'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'2 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted4__zip_unzip'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- (([%#soption14] (1 : int32)), ([%#soption15] true)) ] s1
      | s1 =  [ &_1 <- C_Some'2 _2 ] s2
      | s2 =  [ &_0 <- _1 ] s3
      | s3 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () | & _2 : (int32, bool) = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'4 (_1 : (t_Option'1, t_Option'2))
  
  axiom inv_axiom'4 [@rewrite] : forall x : (t_Option'1, t_Option'2) [inv'4 x] . inv'4 x = true
  
  let rec unzip'0 (self:t_Option'0) (return'  (ret:(t_Option'1, t_Option'2)))= {[@expl:unzip 'self' type invariant] inv'2 self}
    any
    [ return' (result:(t_Option'1, t_Option'2))-> {inv'4 result}
      {[%#soption16] match self with
        | C_None'2 -> result = (C_None'0, C_None'1)
        | C_Some'2 (t, u) -> result = (C_Some'0 t, C_Some'1 u)
        end}
      (! return' {result}) ]
    
  
  let rec promoted3__zip_unzip'0 (return'  (ret:t_Option'1))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'1 = any_l () | & _1 : t_Option'1 = any_l () ] 
    [ return' (result:t_Option'1)-> return' {result} ]
    
  
  predicate inv'5 (_1 : t_Option'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'1 [inv'5 x] . inv'5 x = true
  
  type t_Option'4  =
    | C_None'4
    | C_Some'4 int
  
  function deep_model'4 (self : t_Option'1) : t_Option'4 =
    [%#soption21] match self with
      | C_Some'0 t -> C_Some'4 (deep_model'7 t)
      | C_None'0 -> C_None'4
      end
  
  function deep_model'1 (self : t_Option'1) : t_Option'4 =
    [%#smodel20] deep_model'4 self
  
  let rec eq'1 (self:t_Option'1) (other:t_Option'1) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'5 self}
    {[@expl:eq 'other' type invariant] inv'5 other}
    any
    [ return' (result:bool)-> {[%#soption13] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ]
    
  
  let rec promoted2__zip_unzip'0 (return'  (ret:t_Option'2))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'1 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'2 = any_l () | & _1 : t_Option'2 = any_l () ] 
    [ return' (result:t_Option'2)-> return' {result} ]
    
  
  predicate inv'6 (_1 : t_Option'2)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'2 [inv'6 x] . inv'6 x = true
  
  function deep_model'5 (self : t_Option'2) : t_Option'2 =
    [%#soption21] match self with
      | C_Some'1 t -> C_Some'1 (deep_model'8 t)
      | C_None'1 -> C_None'1
      end
  
  function deep_model'2 (self : t_Option'2) : t_Option'2 =
    [%#smodel20] deep_model'5 self
  
  let rec eq'2 (self:t_Option'2) (other:t_Option'2) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'6 self}
    {[@expl:eq 'other' type invariant] inv'6 other}
    any
    [ return' (result:bool)-> {[%#soption13] result = (deep_model'2 self = deep_model'2 other)} (! return' {result}) ]
    
  
  let rec promoted1__zip_unzip'0 (return'  (ret:t_Option'1))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#soption17] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'1 = any_l () | & _1 : t_Option'1 = any_l () ] 
    [ return' (result:t_Option'1)-> return' {result} ]
    
  
  let rec promoted0__zip_unzip'0 (return'  (ret:t_Option'2))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'1 ([%#soption18] true) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'2 = any_l () | & _1 : t_Option'2 = any_l () ] 
    [ return' (result:t_Option'2)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec zip_unzip'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none_int <- C_None'0 ] s1
      | s1 =  [ &none_bool <- C_None'1 ] s2
      | s2 =  [ &some_int <- C_Some'0 ([%#soption0] (1 : int32)) ] s3
      | s3 =  [ &some_bool <- C_Some'1 ([%#soption1] true) ] s4
      | s4 = zip'0 {none_int} {none_bool} (fun (_ret':t_Option'0) ->  [ &_8 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0
      [ s0 = promoted7__zip_unzip'0 (fun (pr7:t_Option'0) ->  [ &_80 <- pr7 ] s1)
      | s1 = eq'0 {_8} {_80} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = any [ br0 -> {_6 = false} (! bb4) | br1 -> {_6} (! bb3) ] 
    | bb3 = s0 [ s0 = zip'0 {none_int} {some_bool} (fun (_ret':t_Option'0) ->  [ &_17 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = promoted6__zip_unzip'0 (fun (pr6:t_Option'0) ->  [ &_79 <- pr6 ] s1)
      | s1 = eq'0 {_17} {_79} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = any [ br0 -> {_15 = false} (! bb8) | br1 -> {_15} (! bb7) ] 
    | bb7 = s0 [ s0 = zip'0 {some_int} {none_bool} (fun (_ret':t_Option'0) ->  [ &_26 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = promoted5__zip_unzip'0 (fun (pr5:t_Option'0) ->  [ &_78 <- pr5 ] s1)
      | s1 = eq'0 {_26} {_78} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = any [ br0 -> {_24 = false} (! bb12) | br1 -> {_24} (! bb11) ] 
    | bb11 = s0 [ s0 = zip'0 {some_int} {some_bool} (fun (_ret':t_Option'0) ->  [ &_35 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = promoted4__zip_unzip'0 (fun (pr4:t_Option'0) ->  [ &_77 <- pr4 ] s1)
      | s1 = eq'0 {_35} {_77} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = any [ br0 -> {_33 = false} (! bb16) | br1 -> {_33} (! bb15) ] 
    | bb15 = s0
      [ s0 =  [ &none_zipped <- C_None'2 ] s1
      | s1 =  [ &_44 <- (([%#soption2] (1 : int32)), ([%#soption3] true)) ] s2
      | s2 =  [ &some_zipped <- C_Some'2 _44 ] s3
      | s3 = unzip'0 {none_zipped} (fun (_ret':(t_Option'1, t_Option'2)) ->  [ &none_unzip <- _ret' ] s4)
      | s4 = bb17 ]
      
    | bb17 = s0
      [ s0 = unzip'0 {some_zipped} (fun (_ret':(t_Option'1, t_Option'2)) ->  [ &some_unzip <- _ret' ] s1) | s1 = bb18 ]
      
    | bb18 = s0
      [ s0 = promoted3__zip_unzip'0 (fun (pr3:t_Option'1) ->  [ &_76 <- pr3 ] s1)
      | s1 = eq'1 {let (r'0, _) = none_unzip in r'0} {_76} (fun (_ret':bool) ->  [ &_50 <- _ret' ] s2)
      | s2 = bb19 ]
      
    | bb19 = any [ br0 -> {_50 = false} (! bb21) | br1 -> {_50} (! bb20) ] 
    | bb20 = s0
      [ s0 = promoted2__zip_unzip'0 (fun (pr2:t_Option'2) ->  [ &_75 <- pr2 ] s1)
      | s1 = eq'2 {let (_, r'0) = none_unzip in r'0} {_75} (fun (_ret':bool) ->  [ &_56 <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = any [ br0 -> {_56 = false} (! bb24) | br1 -> {_56} (! bb23) ] 
    | bb23 = s0
      [ s0 = promoted1__zip_unzip'0 (fun (pr1:t_Option'1) ->  [ &_74 <- pr1 ] s1)
      | s1 = eq'1 {let (r'0, _) = some_unzip in r'0} {_74} (fun (_ret':bool) ->  [ &_62 <- _ret' ] s2)
      | s2 = bb25 ]
      
    | bb25 = any [ br0 -> {_62 = false} (! bb27) | br1 -> {_62} (! bb26) ] 
    | bb26 = s0
      [ s0 = promoted0__zip_unzip'0 (fun (pr0:t_Option'2) ->  [ &_73 <- pr0 ] s1)
      | s1 = eq'2 {let (_, r'0) = some_unzip in r'0} {_73} (fun (_ret':bool) ->  [ &_68 <- _ret' ] s2)
      | s2 = bb28 ]
      
    | bb28 = any [ br0 -> {_68 = false} (! bb30) | br1 -> {_68} (! bb29) ] 
    | bb29 = return' {_0}
    | bb30 = {[%#soption4] false} any
    | bb27 = {[%#soption5] false} any
    | bb24 = {[%#soption6] false} any
    | bb21 = {[%#soption7] false} any
    | bb16 = {[%#soption8] false} any
    | bb12 = {[%#soption9] false} any
    | bb8 = {[%#soption10] false} any
    | bb4 = {[%#soption11] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none_int : t_Option'1 = any_l ()
    | & none_bool : t_Option'2 = any_l ()
    | & some_int : t_Option'1 = any_l ()
    | & some_bool : t_Option'2 = any_l ()
    | & _6 : bool = any_l ()
    | & _8 : t_Option'0 = any_l ()
    | & _15 : bool = any_l ()
    | & _17 : t_Option'0 = any_l ()
    | & _24 : bool = any_l ()
    | & _26 : t_Option'0 = any_l ()
    | & _33 : bool = any_l ()
    | & _35 : t_Option'0 = any_l ()
    | & none_zipped : t_Option'0 = any_l ()
    | & some_zipped : t_Option'0 = any_l ()
    | & _44 : (int32, bool) = any_l ()
    | & none_unzip : (t_Option'1, t_Option'2) = any_l ()
    | & some_unzip : (t_Option'1, t_Option'2) = any_l ()
    | & _50 : bool = any_l ()
    | & _56 : bool = any_l ()
    | & _62 : bool = any_l ()
    | & _68 : bool = any_l ()
    | & _73 : t_Option'2 = any_l ()
    | & _74 : t_Option'1 = any_l ()
    | & _75 : t_Option'2 = any_l ()
    | & _76 : t_Option'1 = any_l ()
    | & _77 : t_Option'0 = any_l ()
    | & _78 : t_Option'0 = any_l ()
    | & _79 : t_Option'0 = any_l ()
    | & _80 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__transpose [#"option.rs" 430 0 430 18]
  let%span soption0 = "option.rs" 432 53 432 54
  let%span soption1 = "option.rs" 433 55 433 59
  let%span soption2 = "option.rs" 437 49 437 53
  let%span soption3 = "option.rs" 437 4 437 54
  let%span soption4 = "option.rs" 436 4 436 52
  let%span soption5 = "option.rs" 435 4 435 46
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 407 26 411 17
  let%span sresult7 = "../../../creusot-contracts/src/std/result.rs" 53 27 53 53
  let%span sresult8 = "../../../creusot-contracts/src/std/result.rs" 18 0 135 1
  let%span soption9 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span soption10 = "option.rs" 436 49 436 50
  let%span sresult11 = "../../../creusot-contracts/src/std/result.rs" 67 27 67 54
  let%span smodel12 = "../../../creusot-contracts/src/model.rs" 83 8 83 28
  let%span soption13 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span snum14 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  
  use prelude.prelude.Int32
  
  type t_Result'1  =
    | C_Ok'0 int32
    | C_Err'0 bool
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 (t_Result'1)
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 int32
  
  type t_Result'0  =
    | C_Ok'1 (t_Option'0)
    | C_Err'1 bool
  
  predicate inv'1 (_1 : t_Result'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Result'0 [inv'1 x] . inv'1 x = true
  
  let rec transpose'1 (self:t_Option'1) (return'  (ret:t_Result'0))= {[@expl:transpose 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Result'0)-> {inv'1 result}
      {[%#soption6] match self with
        | C_None'0 -> result = C_Ok'1 (C_None'1)
        | C_Some'0 (C_Ok'0 ok) -> result = C_Ok'1 (C_Some'1 ok)
        | C_Some'0 (C_Err'0 err) -> result = C_Err'1 err
        end}
      (! return' {result}) ]
    
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  let rec unwrap'0 (self:t_Result'0) (return'  (ret:t_Option'0))= {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] [%#sresult7] exists t : t_Option'0 . self = C_Ok'1 t}
    any [ return' (result:t_Option'0)-> {inv'2 result} {[%#sresult8] C_Ok'1 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted1__transpose'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'1 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  use prelude.prelude.Int
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 int
  
  use prelude.prelude.Int32
  
  function deep_model'2 (self : int32) : int =
    [%#snum14] Int32.to_int self
  
  function deep_model'1 (self : t_Option'0) : t_Option'2 =
    [%#soption13] match self with
      | C_Some'1 t -> C_Some'2 (deep_model'2 t)
      | C_None'1 -> C_None'2
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'2 =
    [%#smodel12] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'3 self}
    {[@expl:eq 'other' type invariant] inv'3 other}
    any
    [ return' (result:bool)-> {[%#soption9] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
    
  
  let rec promoted0__transpose'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'1 ([%#soption10] (1 : int32)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  predicate inv'4 (_1 : bool)
  
  axiom inv_axiom'4 [@rewrite] : forall x : bool [inv'4 x] . inv'4 x = true
  
  let rec unwrap_err'0 (self:t_Result'0) (return'  (ret:bool))= {[@expl:unwrap_err 'self' type invariant] inv'1 self}
    {[@expl:unwrap_err requires] [%#sresult11] exists e : bool . self = C_Err'1 e}
    any [ return' (result:bool)-> {inv'4 result} {[%#sresult8] C_Err'1 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Bool
  
  meta "compute_max_steps" 1000000
  
  let rec transpose'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &none <- C_None'0 ] s1
      | s1 =  [ &_3 <- C_Ok'0 ([%#soption0] (1 : int32)) ] s2
      | s2 =  [ &some_ok <- C_Some'0 _3 ] s3
      | s3 =  [ &_5 <- C_Err'0 ([%#soption1] true) ] s4
      | s4 =  [ &some_err <- C_Some'0 _5 ] s5
      | s5 = transpose'1 {none} (fun (_ret':t_Result'0) ->  [ &_10 <- _ret' ] s6)
      | s6 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_10} (fun (_ret':t_Option'0) ->  [ &_9 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = promoted1__transpose'0 (fun (pr1:t_Option'0) ->  [ &_31 <- pr1 ] s1)
      | s1 = eq'0 {_9} {_31} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb4) ] 
    | bb4 = s0 [ s0 = transpose'1 {some_ok} (fun (_ret':t_Result'0) ->  [ &_19 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = unwrap'0 {_19} (fun (_ret':t_Option'0) ->  [ &_18 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = promoted0__transpose'0 (fun (pr0:t_Option'0) ->  [ &_30 <- pr0 ] s1)
      | s1 = eq'0 {_18} {_30} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb9) ] 
    | bb9 = s0 [ s0 = transpose'1 {some_err} (fun (_ret':t_Result'0) ->  [ &_27 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0 [ s0 = unwrap_err'0 {_27} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 =  [ &_25 <- Bool.eq _26 ([%#soption2] true) ] s1
      | s1 = any [ br0 -> {_25 = false} (! bb14) | br1 -> {_25} (! bb13) ]  ]
      
    | bb13 = return' {_0}
    | bb14 = {[%#soption3] false} any
    | bb10 = {[%#soption4] false} any
    | bb5 = {[%#soption5] false} any ]
    )
    [ & _0 : () = any_l ()
    | & none : t_Option'1 = any_l ()
    | & some_ok : t_Option'1 = any_l ()
    | & _3 : t_Result'1 = any_l ()
    | & some_err : t_Option'1 = any_l ()
    | & _5 : t_Result'1 = any_l ()
    | & _7 : bool = any_l ()
    | & _9 : t_Option'0 = any_l ()
    | & _10 : t_Result'0 = any_l ()
    | & _16 : bool = any_l ()
    | & _18 : t_Option'0 = any_l ()
    | & _19 : t_Result'0 = any_l ()
    | & _25 : bool = any_l ()
    | & _26 : bool = any_l ()
    | & _27 : t_Result'0 = any_l ()
    | & _30 : t_Option'0 = any_l ()
    | & _31 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__flatten [#"option.rs" 440 0 440 16]
  let%span soption0 = "option.rs" 445 45 445 46
  let%span soption1 = "option.rs" 446 38 446 39
  let%span soption2 = "option.rs" 446 4 446 40
  let%span soption3 = "option.rs" 444 4 444 36
  let%span soption4 = "option.rs" 442 4 442 36
  let%span soption5 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 51 26 51 51
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 int32
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 (t_Option'0)
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  let rec flatten'1 (self:t_Option'1) (return'  (ret:t_Option'0))= {[@expl:flatten 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#soption5] self = C_None'0  -> result = C_None'1}
      {[%#soption5] self = C_None'0 \/ self = C_Some'0 result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  let rec is_none'0 (self:t_Option'0) (return'  (ret:bool))= {[@expl:is_none 'self' type invariant] inv'2 self}
    any [ return' (result:bool)-> {[%#soption6] result = (self = C_None'1)} (! return' {result}) ] 
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:int32))= {[@expl:unwrap 'self' type invariant] inv'1 self}
    {[@expl:unwrap requires] [%#soption5] self <> C_None'1}
    any [ return' (result:int32)-> {inv'3 result} {[%#soption5] C_Some'1 result = self} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec flatten'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &opt <- C_None'0 ] s1
      | s1 = flatten'1 {opt} (fun (_ret':t_Option'0) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = is_none'0 {_5} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = any [ br0 -> {_3 = false} (! bb4) | br1 -> {_3} (! bb3) ] 
    | bb3 = s0
      [ s0 =  [ &_9 <- C_None'1 ] s1
      | s1 =  [ &opt1 <- C_Some'0 _9 ] s2
      | s2 = flatten'1 {opt1} (fun (_ret':t_Option'0) ->  [ &_13 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = is_none'0 {_13} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = any [ br0 -> {_11 = false} (! bb8) | br1 -> {_11} (! bb7) ] 
    | bb7 = s0
      [ s0 =  [ &_17 <- C_Some'1 ([%#soption0] (1 : int32)) ] s1
      | s1 =  [ &opt2 <- C_Some'0 _17 ] s2
      | s2 = flatten'1 {opt2} (fun (_ret':t_Option'0) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0 [ s0 = unwrap'0 {_21} (fun (_ret':int32) ->  [ &_20 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0
      [ s0 = Int32.eq {_20} {[%#soption1] (1 : int32)} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1)
      | s1 = any [ br0 -> {_19 = false} (! bb12) | br1 -> {_19} (! bb11) ]  ]
      
    | bb11 = return' {_0}
    | bb12 = {[%#soption2] false} any
    | bb8 = {[%#soption3] false} any
    | bb4 = {[%#soption4] false} any ]
    )
    [ & _0 : () = any_l ()
    | & opt : t_Option'1 = any_l ()
    | & _3 : bool = any_l ()
    | & _5 : t_Option'0 = any_l ()
    | & opt1 : t_Option'1 = any_l ()
    | & _9 : t_Option'0 = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : t_Option'0 = any_l ()
    | & opt2 : t_Option'1 = any_l ()
    | & _17 : t_Option'0 = any_l ()
    | & _19 : bool = any_l ()
    | & _20 : int32 = any_l ()
    | & _21 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_option__resolve [#"option.rs" 449 0 449 16]
  let%span soption0 = "option.rs" 451 16 451 17
  let%span soption1 = "option.rs" 457 17 457 18
  let%span soption2 = "option.rs" 460 16 460 17
  let%span soption3 = "option.rs" 462 25 462 26
  let%span soption4 = "option.rs" 463 17 463 18
  let%span soption5 = "option.rs" 464 16 464 17
  let%span soption6 = "option.rs" 465 16 465 17
  let%span soption7 = "option.rs" 468 17 468 18
  let%span soption8 = "option.rs" 468 27 468 28
  let%span soption9 = "option.rs" 471 16 471 17
  let%span soption10 = "option.rs" 477 17 477 18
  let%span soption11 = "option.rs" 479 16 479 17
  let%span soption12 = "option.rs" 480 16 480 17
  let%span soption13 = "option.rs" 484 17 484 18
  let%span soption14 = "option.rs" 484 27 484 28
  let%span soption15 = "option.rs" 487 16 487 17
  let%span soption16 = "option.rs" 488 16 488 17
  let%span soption17 = "option.rs" 491 12 491 13
  let%span soption18 = "option.rs" 492 17 492 18
  let%span soption19 = "option.rs" 492 27 492 28
  let%span soption20 = "option.rs" 495 16 495 17
  let%span soption21 = "option.rs" 496 16 496 17
  let%span soption22 = "option.rs" 499 12 499 13
  let%span soption23 = "option.rs" 500 17 500 18
  let%span soption24 = "option.rs" 500 27 500 28
  let%span soption25 = "option.rs" 503 16 503 17
  let%span soption26 = "option.rs" 506 17 506 18
  let%span soption27 = "option.rs" 509 16 509 17
  let%span soption28 = "option.rs" 512 17 512 18
  let%span soption29 = "option.rs" 515 17 515 18
  let%span soption30 = "option.rs" 515 4 515 19
  let%span soption31 = "option.rs" 512 4 512 19
  let%span soption32 = "option.rs" 506 4 506 19
  let%span soption33 = "option.rs" 500 4 500 29
  let%span soption34 = "option.rs" 492 4 492 29
  let%span soption35 = "option.rs" 484 4 484 29
  let%span soption36 = "option.rs" 477 4 477 19
  let%span soption37 = "option.rs" 468 4 468 29
  let%span soption38 = "option.rs" 463 4 463 19
  let%span soption39 = "option.rs" 457 4 457 19
  let%span soption40 = "option.rs" 453 4 456 6
  let%span soption41 = "option.rs" 455 12 455 16
  let%span soption42 = "option.rs" 454 18 454 24
  let%span soption43 = "../../../creusot-contracts/src/std/option.rs" 39 27 42 17
  let%span soption44 = "../../../creusot-contracts/src/std/option.rs" 43 26 46 17
  let%span soption45 = "../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span soption46 = "option.rs" 475 12 475 17
  let%span soption47 = "option.rs" 474 18 474 25
  let%span soption48 = "../../../creusot-contracts/src/std/option.rs" 243 27 246 17
  let%span soption49 = "../../../creusot-contracts/src/std/option.rs" 247 26 253 17
  let%span soption50 = "../../../creusot-contracts/src/std/option.rs" 283 26 288 17
  let%span soption51 = "../../../creusot-contracts/src/std/option.rs" 292 26 295 17
  let%span soption52 = "../../../creusot-contracts/src/std/option.rs" 296 26 296 68
  let%span soption53 = "../../../creusot-contracts/src/std/option.rs" 300 26 303 17
  let%span soption54 = "../../../creusot-contracts/src/std/option.rs" 352 26 356 17
  let%span sresolve55 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sresolve56 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sresolve57 = "../../../creusot-contracts/src/resolve.rs" 40 8 40 44
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  type t_Option'1  =
    | C_None'1
    | C_Some'0 (borrowed int32)
  
  predicate resolve'6 (self : borrowed int32) =
    [%#sresolve56] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed int32) =
    resolve'6 _1
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (_2:borrowed int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'2 _2}- s1
      | s1 =  [ &res <- [%#soption41] true ] s2
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () | & _2 : borrowed int32 = _2 | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption42] result} (! return' {result}) ]
    
  
  predicate inv'0 (_1 : t_Option'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate precondition'0 (self : ()) (args : borrowed int32) =
    let (_2) = args in true
  
  predicate postcondition_once'0 (self : ()) (args : borrowed int32) (result : bool) =
    [%#soption42] let (_2) = args in result
  
  let rec is_some_and'0 (self:t_Option'1) (f:()) (return'  (ret:bool))= {[@expl:is_some_and 'self' type invariant] inv'0 self}
    {[@expl:is_some_and 'f' type invariant] inv'1 f}
    {[@expl:is_some_and requires] [%#soption43] match self with
      | C_None'1 -> true
      | C_Some'0 t -> precondition'0 f (t)
      end}
    any
    [ return' (result:bool)-> {[%#soption44] match self with
        | C_None'1 -> result = false
        | C_Some'0 t -> resolve'2 t /\ postcondition_once'0 f (t) result
        end}
      (! return' {result}) ]
    
  
  type t_Option'0  =
    | C_None'0
    | C_Some'1 int32
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  predicate resolve'5 (self : t_Option'1) =
    [%#sresolve55] match self with
      | C_Some'0 x -> resolve'2 x
      | C_None'1 -> true
      end
  
  let rec and'0 (self:t_Option'1) (optb:t_Option'0) (return'  (ret:t_Option'0))= {[@expl:and 'self' type invariant] inv'0 self}
    {[@expl:and 'optb' type invariant] inv'2 optb}
    any
    [ return' (result:t_Option'0)-> {inv'2 result}
      {[%#soption45] self = C_None'1  -> result = C_None'0}
      {[%#soption45] self = C_None'1 \/ result = optb /\ resolve'5 self}
      (! return' {result}) ]
    
  
  let rec or'0 (self:t_Option'1) (optb:t_Option'1) (return'  (ret:t_Option'1))= {[@expl:or 'self' type invariant] inv'0 self}
    {[@expl:or 'optb' type invariant] inv'0 optb}
    any
    [ return' (result:t_Option'1)-> {inv'0 result}
      {[%#soption45] self = C_None'1  -> result = optb}
      {[%#soption45] self = C_None'1 \/ result = self /\ resolve'5 optb}
      (! return' {result}) ]
    
  
  predicate resolve'1 (_1 : t_Option'1) =
    resolve'5 _1
  
  let rec closure1'0 (_1:()) (_2:borrowed int32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &res <- [%#soption46] false ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () | & res : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#soption47] not result} (! return' {result}) ]
    
  
  predicate inv'3 (_1 : ())
  
  axiom inv_axiom'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate precondition'1 (self : ()) (args : borrowed int32) =
    let (_2) = args in true
  
  predicate postcondition_once'1 (self : ()) (args : borrowed int32) (result : bool) =
    [%#soption47] let (_2) = args in not result
  
  let rec filter'0 (self:t_Option'1) (predicate':()) (return'  (ret:t_Option'1))= {[@expl:filter 'self' type invariant] inv'0 self}
    {[@expl:filter 'predicate' type invariant] inv'3 predicate'}
    {[@expl:filter requires] [%#soption48] match self with
      | C_None'1 -> true
      | C_Some'0 t -> precondition'1 predicate' (t)
      end}
    any
    [ return' (result:t_Option'1)-> {inv'0 result}
      {[%#soption49] match self with
        | C_None'1 -> result = C_None'1
        | C_Some'0 t -> match result with
          | C_None'1 -> postcondition_once'1 predicate' (t) false /\ resolve'2 t
          | C_Some'0 r -> postcondition_once'1 predicate' (t) true /\ r = t
          end
        end}
      (! return' {result}) ]
    
  
  let rec xor'0 (self:t_Option'1) (optb:t_Option'1) (return'  (ret:t_Option'1))= {[@expl:xor 'self' type invariant] inv'0 self}
    {[@expl:xor 'optb' type invariant] inv'0 optb}
    any
    [ return' (result:t_Option'1)-> {inv'0 result}
      {[%#soption50] match (self, optb) with
        | (C_None'1, C_None'1) -> result = C_None'1
        | (C_Some'0 t1, C_Some'0 t2) -> result = C_None'1 /\ resolve'2 t1 /\ resolve'2 t2
        | (C_Some'0 t, C_None'1) -> result = C_Some'0 t
        | (C_None'1, C_Some'0 t) -> result = C_Some'0 t
        end}
      (! return' {result}) ]
    
  
  predicate inv'4 (_1 : borrowed (t_Option'1))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_Option'1) [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : borrowed int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed int32 [inv'5 x] . inv'5 x = true
  
  predicate inv'6 (_1 : borrowed (borrowed int32))
  
  axiom inv_axiom'6 [@rewrite] : forall x : borrowed (borrowed int32) [inv'6 x] . inv'6 x = true
  
  let rec insert'0 (self:borrowed (t_Option'1)) (value:borrowed int32) (return'  (ret:borrowed (borrowed int32)))= {[@expl:insert 'self' type invariant] inv'4 self}
    {[@expl:insert 'value' type invariant] inv'5 value}
    any
    [ return' (result:borrowed (borrowed int32))-> {inv'6 result}
      {[%#soption51] match self.current with
        | C_Some'0 t -> resolve'2 t
        | C_None'1 -> true
        end}
      {[%#soption52] result.current = value /\ self.final = C_Some'0 (result.final)}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (borrowed int32)) =
    [%#sresolve56] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (borrowed int32)) =
    resolve'7 _1
  
  let rec get_or_insert'0 (self:borrowed (t_Option'1)) (value:borrowed int32) (return'  (ret:borrowed (borrowed int32)))= {[@expl:get_or_insert 'self' type invariant] inv'4 self}
    {[@expl:get_or_insert 'value' type invariant] inv'5 value}
    any
    [ return' (result:borrowed (borrowed int32))-> {inv'6 result}
      {[%#soption53] match self.current with
        | C_None'1 -> result.current = value /\ self.final = C_Some'0 (result.final)
        | C_Some'0 _ -> self.current = C_Some'0 (result.current)
        /\ self.final = C_Some'0 (result.final) /\ resolve'2 value
        end}
      (! return' {result}) ]
    
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 (borrowed int32, int32)
  
  predicate inv'7 (_1 : t_Option'2)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Option'2 [inv'7 x] . inv'7 x = true
  
  predicate resolve'10 (_1 : int32) =
    true
  
  predicate resolve'8 (self : t_Option'0) =
    [%#sresolve55] match self with
      | C_Some'1 x -> resolve'10 x
      | C_None'0 -> true
      end
  
  let rec zip'0 (self:t_Option'1) (other:t_Option'0) (return'  (ret:t_Option'2))= {[@expl:zip 'self' type invariant] inv'0 self}
    {[@expl:zip 'other' type invariant] inv'2 other}
    any
    [ return' (result:t_Option'2)-> {inv'7 result}
      {[%#soption54] match (self, other) with
        | (C_None'1, _) -> result = C_None'2 /\ resolve'8 other
        | (_, C_None'0) -> result = C_None'2 /\ resolve'5 self
        | (C_Some'0 t, C_Some'1 u) -> result = C_Some'2 (t, u)
        end}
      (! return' {result}) ]
    
  
  predicate resolve'12 (self : (borrowed int32, int32)) =
    [%#sresolve57] resolve'2 (let (a, _) = self in a) /\ resolve'10 (let (_, a) = self in a)
  
  predicate resolve'11 (_1 : (borrowed int32, int32)) =
    resolve'12 _1
  
  predicate resolve'9 (self : t_Option'2) =
    [%#sresolve55] match self with
      | C_Some'2 x -> resolve'11 x
      | C_None'2 -> true
      end
  
  predicate resolve'4 (_1 : t_Option'2) =
    resolve'9 _1
  
  let rec copied'0 (self:t_Option'1) (return'  (ret:t_Option'0))= {[@expl:copied 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {inv'2 result}
      {[%#soption45] self = C_None'1  -> result = C_None'0}
      {[%#soption45] self = C_None'1
      \/ (exists t : borrowed int32 . self = C_Some'0 t /\ result = C_Some'1 (t.current) /\ resolve'6 t)}
      (! return' {result}) ]
    
  
  let rec cloned'0 (self:t_Option'1) (return'  (ret:t_Option'0))= {[@expl:cloned 'self' type invariant] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {inv'2 result}
      {[%#soption45] self = C_None'1  -> result = C_None'0}
      {[%#soption45] self = C_None'1
      \/ (exists t : borrowed int32 . self = C_Some'0 t /\ result = C_Some'1 (t.current) /\ resolve'6 t)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec resolve'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#soption0] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &_3 <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 =  [ &opt <- C_Some'0 _3 ] s3
      | s3 =  [ &_7 <- () ] s4
      | s4 = is_some_and'0 {opt} {_7} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ] 
    | bb2 = s0
      [ s0 = Int32.eq {x} {[%#soption1] (1 : int32)} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
      | s1 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 =  [ &x1 <- [%#soption2] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x1}
          (fun (_ret':borrowed int32) ->  [ &_15 <- _ret' ]  [ &x1 <- _ret'.final ] s2)
      | s2 =  [ &opt1 <- C_Some'0 _15 ] s3
      | s3 =  [ &_18 <- C_Some'1 ([%#soption3] (2 : int32)) ] s4
      | s4 = and'0 {opt1} {_18} (fun (_ret':t_Option'0) ->  [ &_16 <- _ret' ] s5)
      | s5 = bb6 ]
      
    | bb6 = s0
      [ s0 = Int32.eq {x1} {[%#soption4] (1 : int32)} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1)
      | s1 = any [ br0 -> {_20 = false} (! bb8) | br1 -> {_20} (! bb7) ]  ]
      
    | bb7 = s0
      [ s0 =  [ &x2 <- [%#soption5] (1 : int32) ] s1
      | s1 =  [ &y <- [%#soption6] (2 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {x2}
          (fun (_ret':borrowed int32) ->  [ &_26 <- _ret' ]  [ &x2 <- _ret'.final ] s3)
      | s3 =  [ &opt2 <- C_Some'0 _26 ] s4
      | s4 = Borrow.borrow_mut <int32> {y} (fun (_ret':borrowed int32) ->  [ &_29 <- _ret' ]  [ &y <- _ret'.final ] s5)
      | s5 =  [ &_28 <- C_Some'0 _29 ] s6
      | s6 = or'0 {_28} {opt2} (fun (_ret':t_Option'1) ->  [ &_27 <- _ret' ] s7)
      | s7 = bb9 ]
      
    | bb9 = s0
      [ s0 = -{resolve'1 _27}- s1
      | s1 = Int32.eq {x2} {[%#soption7] (1 : int32)} (fun (_ret':bool) ->  [ &_32 <- _ret' ] s2)
      | s2 = any [ br0 -> {_32 = false} (! bb13) | br1 -> {_32} (! bb10) ]  ]
      
    | bb10 = s0
      [ s0 = Int32.eq {y} {[%#soption8] (2 : int32)} (fun (_ret':bool) ->  [ &_34 <- _ret' ] s1)
      | s1 = any [ br0 -> {_34 = false} (! bb12) | br1 -> {_34} (! bb11) ]  ]
      
    | bb11 = s0
      [ s0 =  [ &x3 <- [%#soption9] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x3}
          (fun (_ret':borrowed int32) ->  [ &_39 <- _ret' ]  [ &x3 <- _ret'.final ] s2)
      | s2 =  [ &opt3 <- C_Some'0 _39 ] s3
      | s3 =  [ &_42 <- () ] s4
      | s4 = filter'0 {opt3} {_42} (fun (_ret':t_Option'1) ->  [ &_40 <- _ret' ] s5)
      | s5 = bb15 ]
      
    | bb15 = s0
      [ s0 = -{resolve'1 _40}- s1
      | s1 = Int32.eq {x3} {[%#soption10] (1 : int32)} (fun (_ret':bool) ->  [ &_44 <- _ret' ] s2)
      | s2 = any [ br0 -> {_44 = false} (! bb17) | br1 -> {_44} (! bb16) ]  ]
      
    | bb16 = s0
      [ s0 =  [ &x4 <- [%#soption11] (1 : int32) ] s1
      | s1 =  [ &y1 <- [%#soption12] (2 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {x4}
          (fun (_ret':borrowed int32) ->  [ &_50 <- _ret' ]  [ &x4 <- _ret'.final ] s3)
      | s3 =  [ &optx <- C_Some'0 _50 ] s4
      | s4 = Borrow.borrow_mut <int32> {y1}
          (fun (_ret':borrowed int32) ->  [ &_52 <- _ret' ]  [ &y1 <- _ret'.final ] s5)
      | s5 =  [ &opty <- C_Some'0 _52 ] s6
      | s6 = xor'0 {optx} {opty} (fun (_ret':t_Option'1) ->  [ &_53 <- _ret' ] s7)
      | s7 = bb18 ]
      
    | bb18 = s0
      [ s0 = -{resolve'1 _53}- s1
      | s1 = Int32.eq {x4} {[%#soption13] (1 : int32)} (fun (_ret':bool) ->  [ &_57 <- _ret' ] s2)
      | s2 = any [ br0 -> {_57 = false} (! bb22) | br1 -> {_57} (! bb19) ]  ]
      
    | bb19 = s0
      [ s0 = Int32.eq {y1} {[%#soption14] (2 : int32)} (fun (_ret':bool) ->  [ &_59 <- _ret' ] s1)
      | s1 = any [ br0 -> {_59 = false} (! bb21) | br1 -> {_59} (! bb20) ]  ]
      
    | bb20 = s0
      [ s0 =  [ &x5 <- [%#soption15] (1 : int32) ] s1
      | s1 =  [ &y2 <- [%#soption16] (2 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {x5}
          (fun (_ret':borrowed int32) ->  [ &_65 <- _ret' ]  [ &x5 <- _ret'.final ] s3)
      | s3 =  [ &opt4 <- C_Some'0 _65 ] s4
      | s4 = Borrow.borrow_mut <t_Option'1> {opt4}
          (fun (_ret':borrowed (t_Option'1)) ->  [ &_67 <- _ret' ]  [ &opt4 <- _ret'.final ] s5)
      | s5 = Borrow.borrow_mut <int32> {y2}
          (fun (_ret':borrowed int32) ->  [ &_69 <- _ret' ]  [ &y2 <- _ret'.final ] s6)
      | s6 = Borrow.borrow_final <int32> {_69.current} {Borrow.get_id _69}
          (fun (_ret':borrowed int32) ->  [ &_68 <- _ret' ]  [ &_69 <- { _69 with current = _ret'.final } ] s7)
      | s7 = insert'0 {_67} {_68} (fun (_ret':borrowed (borrowed int32)) ->  [ &bor <- _ret' ] s8)
      | s8 = bb24 ]
      
    | bb24 = s0
      [ s0 = -{resolve'2 _69}- s1
      | s1 =  [ &bor <- { bor with current = { bor.current with current = ([%#soption17] (3 : int32)) } } ] s2
      | s2 = -{resolve'3 bor}- s3
      | s3 = -{resolve'1 opt4}- s4
      | s4 = Int32.eq {x5} {[%#soption18] (1 : int32)} (fun (_ret':bool) ->  [ &_71 <- _ret' ] s5)
      | s5 = any [ br0 -> {_71 = false} (! bb28) | br1 -> {_71} (! bb25) ]  ]
      
    | bb25 = s0
      [ s0 = Int32.eq {y2} {[%#soption19] (3 : int32)} (fun (_ret':bool) ->  [ &_73 <- _ret' ] s1)
      | s1 = any [ br0 -> {_73 = false} (! bb27) | br1 -> {_73} (! bb26) ]  ]
      
    | bb26 = s0
      [ s0 =  [ &x6 <- [%#soption20] (1 : int32) ] s1
      | s1 =  [ &y3 <- [%#soption21] (2 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {x6}
          (fun (_ret':borrowed int32) ->  [ &_79 <- _ret' ]  [ &x6 <- _ret'.final ] s3)
      | s3 =  [ &opt5 <- C_Some'0 _79 ] s4
      | s4 = Borrow.borrow_mut <t_Option'1> {opt5}
          (fun (_ret':borrowed (t_Option'1)) ->  [ &_81 <- _ret' ]  [ &opt5 <- _ret'.final ] s5)
      | s5 = Borrow.borrow_mut <int32> {y3}
          (fun (_ret':borrowed int32) ->  [ &_83 <- _ret' ]  [ &y3 <- _ret'.final ] s6)
      | s6 = Borrow.borrow_final <int32> {_83.current} {Borrow.get_id _83}
          (fun (_ret':borrowed int32) ->  [ &_82 <- _ret' ]  [ &_83 <- { _83 with current = _ret'.final } ] s7)
      | s7 = get_or_insert'0 {_81} {_82} (fun (_ret':borrowed (borrowed int32)) ->  [ &bor1 <- _ret' ] s8)
      | s8 = bb30 ]
      
    | bb30 = s0
      [ s0 = -{resolve'2 _83}- s1
      | s1 =  [ &bor1 <- { bor1 with current = { bor1.current with current = ([%#soption22] (3 : int32)) } } ] s2
      | s2 = -{resolve'3 bor1}- s3
      | s3 = -{resolve'1 opt5}- s4
      | s4 = Int32.eq {x6} {[%#soption23] (3 : int32)} (fun (_ret':bool) ->  [ &_85 <- _ret' ] s5)
      | s5 = any [ br0 -> {_85 = false} (! bb34) | br1 -> {_85} (! bb31) ]  ]
      
    | bb31 = s0
      [ s0 = Int32.eq {y3} {[%#soption24] (2 : int32)} (fun (_ret':bool) ->  [ &_87 <- _ret' ] s1)
      | s1 = any [ br0 -> {_87 = false} (! bb33) | br1 -> {_87} (! bb32) ]  ]
      
    | bb32 = s0
      [ s0 =  [ &x7 <- [%#soption25] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x7}
          (fun (_ret':borrowed int32) ->  [ &_92 <- _ret' ]  [ &x7 <- _ret'.final ] s2)
      | s2 =  [ &opt6 <- C_Some'0 _92 ] s3
      | s3 =  [ &_95 <- C_None'0 ] s4
      | s4 = zip'0 {opt6} {_95} (fun (_ret':t_Option'2) ->  [ &_93 <- _ret' ] s5)
      | s5 = bb36 ]
      
    | bb36 = s0
      [ s0 = -{resolve'4 _93}- s1
      | s1 = Int32.eq {x7} {[%#soption26] (1 : int32)} (fun (_ret':bool) ->  [ &_97 <- _ret' ] s2)
      | s2 = any [ br0 -> {_97 = false} (! bb38) | br1 -> {_97} (! bb37) ]  ]
      
    | bb37 = s0
      [ s0 =  [ &x8 <- [%#soption27] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x8}
          (fun (_ret':borrowed int32) ->  [ &_102 <- _ret' ]  [ &x8 <- _ret'.final ] s2)
      | s2 =  [ &opt7 <- C_Some'0 _102 ] s3
      | s3 = copied'0 {opt7} (fun (_ret':t_Option'0) ->  [ &_103 <- _ret' ] s4)
      | s4 = bb39 ]
      
    | bb39 = s0
      [ s0 = Int32.eq {x8} {[%#soption28] (1 : int32)} (fun (_ret':bool) ->  [ &_106 <- _ret' ] s1)
      | s1 = any [ br0 -> {_106 = false} (! bb41) | br1 -> {_106} (! bb40) ]  ]
      
    | bb40 = s0
      [ s0 = Borrow.borrow_mut <int32> {x8}
          (fun (_ret':borrowed int32) ->  [ &_110 <- _ret' ]  [ &x8 <- _ret'.final ] s1)
      | s1 =  [ &opt8 <- C_Some'0 _110 ] s2
      | s2 = cloned'0 {opt8} (fun (_ret':t_Option'0) ->  [ &_111 <- _ret' ] s3)
      | s3 = bb42 ]
      
    | bb42 = s0
      [ s0 = Int32.eq {x8} {[%#soption29] (1 : int32)} (fun (_ret':bool) ->  [ &_114 <- _ret' ] s1)
      | s1 = any [ br0 -> {_114 = false} (! bb44) | br1 -> {_114} (! bb43) ]  ]
      
    | bb43 = return' {_0}
    | bb44 = {[%#soption30] false} any
    | bb41 = {[%#soption31] false} any
    | bb38 = {[%#soption32] false} any
    | bb33 = bb35
    | bb34 = bb35
    | bb35 = {[%#soption33] false} any
    | bb27 = bb29
    | bb28 = bb29
    | bb29 = {[%#soption34] false} any
    | bb21 = bb23
    | bb22 = bb23
    | bb23 = {[%#soption35] false} any
    | bb17 = {[%#soption36] false} any
    | bb12 = bb14
    | bb13 = bb14
    | bb14 = {[%#soption37] false} any
    | bb8 = {[%#soption38] false} any
    | bb5 = {[%#soption39] false} any
    | bb3 = {[%#soption40] false} any ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & opt : t_Option'1 = any_l ()
    | & _3 : borrowed int32 = any_l ()
    | & _5 : bool = any_l ()
    | & _7 : () = any_l ()
    | & _10 : bool = any_l ()
    | & x1 : int32 = any_l ()
    | & opt1 : t_Option'1 = any_l ()
    | & _15 : borrowed int32 = any_l ()
    | & _16 : t_Option'0 = any_l ()
    | & _18 : t_Option'0 = any_l ()
    | & _20 : bool = any_l ()
    | & x2 : int32 = any_l ()
    | & y : int32 = any_l ()
    | & opt2 : t_Option'1 = any_l ()
    | & _26 : borrowed int32 = any_l ()
    | & _27 : t_Option'1 = any_l ()
    | & _28 : t_Option'1 = any_l ()
    | & _29 : borrowed int32 = any_l ()
    | & _32 : bool = any_l ()
    | & _34 : bool = any_l ()
    | & x3 : int32 = any_l ()
    | & opt3 : t_Option'1 = any_l ()
    | & _39 : borrowed int32 = any_l ()
    | & _40 : t_Option'1 = any_l ()
    | & _42 : () = any_l ()
    | & _44 : bool = any_l ()
    | & x4 : int32 = any_l ()
    | & y1 : int32 = any_l ()
    | & optx : t_Option'1 = any_l ()
    | & _50 : borrowed int32 = any_l ()
    | & opty : t_Option'1 = any_l ()
    | & _52 : borrowed int32 = any_l ()
    | & _53 : t_Option'1 = any_l ()
    | & _57 : bool = any_l ()
    | & _59 : bool = any_l ()
    | & x5 : int32 = any_l ()
    | & y2 : int32 = any_l ()
    | & opt4 : t_Option'1 = any_l ()
    | & _65 : borrowed int32 = any_l ()
    | & bor : borrowed (borrowed int32) = any_l ()
    | & _67 : borrowed (t_Option'1) = any_l ()
    | & _68 : borrowed int32 = any_l ()
    | & _69 : borrowed int32 = any_l ()
    | & _71 : bool = any_l ()
    | & _73 : bool = any_l ()
    | & x6 : int32 = any_l ()
    | & y3 : int32 = any_l ()
    | & opt5 : t_Option'1 = any_l ()
    | & _79 : borrowed int32 = any_l ()
    | & bor1 : borrowed (borrowed int32) = any_l ()
    | & _81 : borrowed (t_Option'1) = any_l ()
    | & _82 : borrowed int32 = any_l ()
    | & _83 : borrowed int32 = any_l ()
    | & _85 : bool = any_l ()
    | & _87 : bool = any_l ()
    | & x7 : int32 = any_l ()
    | & opt6 : t_Option'1 = any_l ()
    | & _92 : borrowed int32 = any_l ()
    | & _93 : t_Option'2 = any_l ()
    | & _95 : t_Option'0 = any_l ()
    | & _97 : bool = any_l ()
    | & x8 : int32 = any_l ()
    | & opt7 : t_Option'1 = any_l ()
    | & _102 : borrowed int32 = any_l ()
    | & _103 : t_Option'0 = any_l ()
    | & _106 : bool = any_l ()
    | & opt8 : t_Option'1 = any_l ()
    | & _110 : borrowed int32 = any_l ()
    | & _111 : t_Option'0 = any_l ()
    | & _114 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
