
module Literals_FloatOperation
  use prelude.Intrinsic
  use prelude.Float32
  let rec float_operation (_1:()) (return'  (ret:Float32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [#"../literals.rs" 4 17 4 20] (0.0 : Float32.t) ] s1
      | s1 = Float32.add {x} {[#"../literals.rs" 6 11 6 17] (0x1.020c40000000p0 : Float32.t)}
          (fun (_ret':Float32.t) ->  [ &_3 <- _ret' ] s2)
      | s2 = Float32.eq {_3} {[#"../literals.rs" 6 21 6 24] (2.0 : Float32.t)}
          (fun (_ret':bool) ->  [ &_2 <- _ret' ] (any [ any_ (_any:Float32.t)-> (!  [ &_3 <- _any ] s3) ] ))
      | s3 = any [ br0 -> {_2 = false} (! bb2) | br1 -> {_2} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Float32.sub
          {[#"../literals.rs" 7 8 7 11] (3.0 : Float32.t)}
          {[#"../literals.rs" 7 14 7 17] (1.0 : Float32.t)}
          (fun (_ret':Float32.t) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../literals.rs" 9 8 9 11] (0.0 : Float32.t) ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : Float32.t = any_l () : Float32.t
    | & x : Float32.t = any_l () : Float32.t
    | & _2 : bool = any_l () : bool
    | & _3 : Float32.t = any_l () : Float32.t ]
     [ return' (result:Float32.t)-> (! return' {result}) ] 
end
