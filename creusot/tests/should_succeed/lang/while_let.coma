
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module WhileLet_F
  let%span swhile_let0 = "../while_let.rs" 5 21 5 23
  
  let%span swhile_let1 = "../while_let.rs" 8 16 8 20
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int32
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Option'0.t_option int32)) =
    [%#span2]  ^ self =  * self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- Option'0.C_Some ([%#swhile_let0] (10 : int32)) ] s1
      | s1 = Borrow.borrow_mut <Option'0.t_option int32> {a}
          (fun (_ret':borrowed (Option'0.t_option int32)) ->  [ &b <- _ret' ]  [ &a <-  ^ b ] s2)
      | s2 =  [ &old_1_0 <- Snapshot.new b ] s3
      | s3 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant]  ^ Snapshot.inner old_1_0 =  ^ b}
        {[@expl:loop invariant] [%#swhile_let1] true}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any [ br0 -> { * b = Option'0.C_None } (! bb5) | br1 (a:int32)-> { * b = Option'0.C_Some a} (! bb3) ] 
        | bb3 = bb4
        | bb4 = s0
          [ s0 =  [ &_6 <- Option'0.C_None ] s1
          | s1 =  [ &b <- { b with current = _6 ; } ] 
            (any [ any_ (_any:Option'0.t_option int32)-> (!  [ &_6 <- _any ] s2) ] )
          | s2 = bb1 ]
           ]
         ]
      
    | bb5 = s0 [ s0 = -{resolve'0 b}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & a : Option'0.t_option int32 = any_l ()
    | & b : borrowed (Option'0.t_option int32) = any_l ()
    | & _6 : Option'0.t_option int32 = any_l ()
    | & old_1_0 : Snapshot.snap_ty (borrowed (Option'0.t_option int32)) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
