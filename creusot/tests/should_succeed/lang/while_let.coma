module M_while_let__f [#"while_let.rs" 4 0 4 10]
  let%span swhile_let0 = "while_let.rs" 5 21 5 23
  let%span swhile_let1 = "while_let.rs" 8 16 8 20
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'1 (self : borrowed (t_Option'0)) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Option'0)) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- C_Some'0 ([%#swhile_let0] (10 : int32)) ] s1
      | s1 = Borrow.borrow_mut <t_Option'0> {a}
          (fun (_ret':borrowed (t_Option'0)) ->  [ &b <- _ret' ]  [ &a <- _ret'.final ] s2)
      | s2 =  [ &old_1_0 <- Snapshot.new b ] s3
      | s3 = bb1 ]
      
    | bb1 = bb1
      [ bb1 = {[@expl:mut invariant] (Snapshot.inner old_1_0).final = b.final}
        {[@expl:loop invariant] [%#swhile_let1] true}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = any [ br0 -> {b.current = C_None'0 } (! bb5) | br1 (x0:int32)-> {b.current = C_Some'0 x0} (! bb3) ] 
        | bb3 = bb4
        | bb4 = s0 [ s0 =  [ &_6 <- C_None'0 ] s1 | s1 =  [ &b <- { b with current = _6 } ] s2 | s2 = bb1 ]  ]
         ]
      
    | bb5 = s0 [ s0 = -{resolve'0 b}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & a : t_Option'0 = any_l ()
    | & b : borrowed (t_Option'0) = any_l ()
    | & _6 : t_Option'0 = any_l ()
    | & old_1_0 : Snapshot.snap_ty (borrowed (t_Option'0)) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
