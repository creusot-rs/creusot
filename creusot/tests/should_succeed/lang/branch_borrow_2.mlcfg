
module BranchBorrow2_F
  use prelude.Borrow
  use prelude.Int32
  predicate resolve0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed int32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg f [#"../branch_borrow_2.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : int32;
  var c : int32;
  var x : borrowed int32;
  var y : borrowed int32;
  var z : borrowed int32;
  var w : borrowed int32;
  var _8 : ();
  var _11 : borrowed int32;
  var _12 : borrowed int32;
  var _14 : bool;
  {
    goto BB0
  }
  BB0 {
    [#"../branch_borrow_2.rs" 4 16 4 18] a <- ([#"../branch_borrow_2.rs" 4 16 4 18] (10 : int32));
    [#"../branch_borrow_2.rs" 5 16 5 18] b <- ([#"../branch_borrow_2.rs" 5 16 5 18] (10 : int32));
    [#"../branch_borrow_2.rs" 6 16 6 18] c <- ([#"../branch_borrow_2.rs" 6 16 6 18] (10 : int32));
    [#"../branch_borrow_2.rs" 8 12 8 18] x <- Borrow.borrow_mut a;
    [#"../branch_borrow_2.rs" 8 12 8 18] a <-  ^ x;
    [#"../branch_borrow_2.rs" 9 12 9 18] y <- Borrow.borrow_mut b;
    [#"../branch_borrow_2.rs" 9 12 9 18] b <-  ^ y;
    [#"../branch_borrow_2.rs" 10 12 10 18] z <- Borrow.borrow_mut c;
    [#"../branch_borrow_2.rs" 10 12 10 18] c <-  ^ z;
    switch (([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32)) = 1)
      | True -> goto BB1
      | False -> switch (([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32)) = 2)
        | True -> goto BB2
        | False -> goto BB12
        end
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    goto BB5
  }
  BB3 {
    [#"../branch_borrow_2.rs" 23 12 23 18] z <- { z with current = ([#"../branch_borrow_2.rs" 23 17 23 18] (8 : int32)) ; };
    [#"../branch_borrow_2.rs" 24 16 24 17] _12 <- Borrow.borrow_final ( * z) (Borrow.get_id z);
    [#"../branch_borrow_2.rs" 24 16 24 17] z <- { z with current = ( ^ _12) ; };
    [#"../branch_borrow_2.rs" 24 12 24 17] w <- _12;
    _12 <- any borrowed int32;
    [#"../branch_borrow_2.rs" 22 13 25 9] _8 <- ([#"../branch_borrow_2.rs" 22 13 25 9] ());
    goto BB6
  }
  BB4 {
    assume { resolve0 z };
    assume { resolve0 y };
    [#"../branch_borrow_2.rs" 15 12 15 18] x <- { x with current = ([#"../branch_borrow_2.rs" 15 17 15 18] (6 : int32)) ; };
    [#"../branch_borrow_2.rs" 16 12 16 17] w <- x;
    x <- any borrowed int32;
    [#"../branch_borrow_2.rs" 14 13 17 9] _8 <- ([#"../branch_borrow_2.rs" 14 13 17 9] ());
    goto BB6
  }
  BB5 {
    assume { resolve0 z };
    [#"../branch_borrow_2.rs" 19 12 19 18] y <- { y with current = ([#"../branch_borrow_2.rs" 19 17 19 18] (7 : int32)) ; };
    [#"../branch_borrow_2.rs" 20 16 20 17] _11 <- Borrow.borrow_final ( * y) (Borrow.get_id y);
    [#"../branch_borrow_2.rs" 20 16 20 17] y <- { y with current = ( ^ _11) ; };
    [#"../branch_borrow_2.rs" 20 12 20 17] w <- _11;
    _11 <- any borrowed int32;
    [#"../branch_borrow_2.rs" 18 13 21 9] _8 <- ([#"../branch_borrow_2.rs" 18 13 21 9] ());
    goto BB6
  }
  BB6 {
    [#"../branch_borrow_2.rs" 28 4 28 10] w <- { w with current = ([#"../branch_borrow_2.rs" 28 9 28 10] (5 : int32)) ; };
    assume { resolve0 w };
    assume { resolve0 z };
    assume { resolve0 y };
    [#"../branch_borrow_2.rs" 30 12 30 18] _14 <- c = ([#"../branch_borrow_2.rs" 30 17 30 18] (5 : int32));
    switch (_14)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    [#"../branch_borrow_2.rs" 3 11 31 1] _0 <- ([#"../branch_borrow_2.rs" 3 11 31 1] ());
    return _0
  }
  BB8 {
    assert { [#"../branch_borrow_2.rs" 30 4 30 19] false };
    absurd
  }
  BB10 {
    assume { resolve0 x };
    goto BB2
  }
  BB11 {
    assume { resolve0 x };
    goto BB2
  }
  BB12 {
    assume { resolve0 y };
    assume { resolve0 x };
    goto BB3
  }
  BB13 {
    assume { resolve0 y };
    goto BB3
  }
  
end
module BranchBorrow2_MyInt_Type
  use prelude.UIntSize
  use prelude.Int
  type t_myint  =
    | C_MyInt usize
    
end
module BranchBorrow2_G
  use prelude.Borrow
  use BranchBorrow2_MyInt_Type as BranchBorrow2_MyInt_Type
  predicate resolve3 (self : BranchBorrow2_MyInt_Type.t_myint) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : BranchBorrow2_MyInt_Type.t_myint) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve3 (let (a, _) = self in a) /\ resolve3 (let (_, a) = self in a)
  val resolve2 (self : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (BranchBorrow2_MyInt_Type.t_myint)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed (BranchBorrow2_MyInt_Type.t_myint)) : bool
    ensures { result = resolve0 self }
    
  use prelude.UIntSize
  use prelude.Int
  let rec cfg g [#"../branch_borrow_2.rs" 35 0 35 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint);
  var _2 : BranchBorrow2_MyInt_Type.t_myint;
  var _3 : BranchBorrow2_MyInt_Type.t_myint;
  var b : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint);
  var c : borrowed (BranchBorrow2_MyInt_Type.t_myint);
  var d : borrowed (BranchBorrow2_MyInt_Type.t_myint);
  {
    goto BB0
  }
  BB0 {
    [#"../branch_borrow_2.rs" 36 17 36 26] _2 <- BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 23 36 25] (10 : usize));
    [#"../branch_borrow_2.rs" 36 28 36 36] _3 <- BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 34 36 35] (5 : usize));
    [#"../branch_borrow_2.rs" 36 16 36 37] a <- (_2, _3);
    _2 <- any BranchBorrow2_MyInt_Type.t_myint;
    _3 <- any BranchBorrow2_MyInt_Type.t_myint;
    [#"../branch_borrow_2.rs" 37 12 37 18] b <- Borrow.borrow_mut a;
    [#"../branch_borrow_2.rs" 37 12 37 18] a <-  ^ b;
    [#"../branch_borrow_2.rs" 39 12 39 20] c <- Borrow.borrow_final (let (_, a) =  * b in a) (Borrow.inherit_id (Borrow.get_id b) 2);
    [#"../branch_borrow_2.rs" 39 12 39 20] b <- { b with current = (let (x0, x1) =  * b in (x0,  ^ c)) ; };
    [#"../branch_borrow_2.rs" 40 12 40 20] d <- Borrow.borrow_final (let (a, _) =  * b in a) (Borrow.inherit_id (Borrow.get_id b) 1);
    [#"../branch_borrow_2.rs" 40 12 40 20] b <- { b with current = (let (x0, x1) =  * b in ( ^ d, x1)) ; };
    assume { resolve0 c };
    assume { resolve0 d };
    assume { resolve1 b };
    assume { resolve2 a };
    [#"../branch_borrow_2.rs" 35 11 43 1] _0 <- ([#"../branch_borrow_2.rs" 35 11 43 1] ());
    return _0
  }
  
end
module BranchBorrow2_H
  use prelude.Borrow
  use prelude.Int32
  predicate resolve0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed int32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg h [#"../branch_borrow_2.rs" 45 0 45 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : int32;
  var x : borrowed int32;
  var y : borrowed int32;
  var w : borrowed int32;
  var _6 : ();
  var _9 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    [#"../branch_borrow_2.rs" 46 16 46 18] a <- ([#"../branch_borrow_2.rs" 46 16 46 18] (10 : int32));
    [#"../branch_borrow_2.rs" 47 16 47 18] b <- ([#"../branch_borrow_2.rs" 47 16 47 18] (10 : int32));
    [#"../branch_borrow_2.rs" 49 12 49 18] x <- Borrow.borrow_mut a;
    [#"../branch_borrow_2.rs" 49 12 49 18] a <-  ^ x;
    [#"../branch_borrow_2.rs" 50 12 50 18] y <- Borrow.borrow_mut b;
    [#"../branch_borrow_2.rs" 50 12 50 18] b <-  ^ y;
    switch ([#"../branch_borrow_2.rs" 52 7 52 11] true)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { resolve0 y };
    [#"../branch_borrow_2.rs" 53 8 53 14] x <- { x with current = ([#"../branch_borrow_2.rs" 53 13 53 14] (5 : int32)) ; };
    [#"../branch_borrow_2.rs" 54 8 54 13] w <- x;
    x <- any borrowed int32;
    [#"../branch_borrow_2.rs" 52 12 55 5] _6 <- ([#"../branch_borrow_2.rs" 52 12 55 5] ());
    goto BB3
  }
  BB2 {
    assume { resolve0 x };
    [#"../branch_borrow_2.rs" 56 8 56 14] y <- { y with current = ([#"../branch_borrow_2.rs" 56 13 56 14] (6 : int32)) ; };
    [#"../branch_borrow_2.rs" 57 12 57 13] _9 <- Borrow.borrow_final ( * y) (Borrow.get_id y);
    [#"../branch_borrow_2.rs" 57 12 57 13] y <- { y with current = ( ^ _9) ; };
    [#"../branch_borrow_2.rs" 57 8 57 13] w <- _9;
    _9 <- any borrowed int32;
    [#"../branch_borrow_2.rs" 55 11 60 5] _6 <- ([#"../branch_borrow_2.rs" 55 11 60 5] ());
    goto BB3
  }
  BB3 {
    assume { resolve0 w };
    [#"../branch_borrow_2.rs" 45 11 68 1] _0 <- ([#"../branch_borrow_2.rs" 45 11 68 1] ());
    assume { resolve0 y };
    return _0
  }
  
end
