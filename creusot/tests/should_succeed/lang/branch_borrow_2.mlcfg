
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module BranchBorrow2_F_Interface
  val f [#"../branch_borrow_2.rs" 3 0 3 10] (_1 : ()) : ()
end
module BranchBorrow2_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg f [#"../branch_borrow_2.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : int32;
  var c : int32;
  var x : borrowed int32;
  var y : borrowed int32;
  var z : borrowed int32;
  var w : borrowed int32;
  var _8 : ();
  var _11 : borrowed int32;
  var _12 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../branch_borrow_2.rs" 4 16 4 18] (10 : int32));
    b <- ([#"../branch_borrow_2.rs" 5 16 5 18] (10 : int32));
    c <- ([#"../branch_borrow_2.rs" 6 16 6 18] (10 : int32));
    x <- borrow_mut a;
    a <-  ^ x;
    y <- borrow_mut b;
    b <-  ^ y;
    z <- borrow_mut c;
    c <-  ^ z;
    switch (([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32)) = 1)
      | True -> goto BB1
      | False -> switch (([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32)) = 2)
        | True -> goto BB2
        | False -> goto BB12
        end
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    goto BB5
  }
  BB3 {
    z <- { z with current = ([#"../branch_borrow_2.rs" 23 17 23 18] (8 : int32)) };
    _12 <- borrow_mut ( * z);
    z <- { z with current = ( ^ _12) };
    w <- _12;
    _12 <- any borrowed int32;
    _8 <- ();
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve y };
    assume { Resolve0.resolve z };
    x <- { x with current = ([#"../branch_borrow_2.rs" 15 17 15 18] (6 : int32)) };
    w <- x;
    x <- any borrowed int32;
    _8 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve0.resolve z };
    y <- { y with current = ([#"../branch_borrow_2.rs" 19 17 19 18] (7 : int32)) };
    _11 <- borrow_mut ( * y);
    y <- { y with current = ( ^ _11) };
    w <- _11;
    _11 <- any borrowed int32;
    _8 <- ();
    goto BB6
  }
  BB6 {
    w <- { w with current = ([#"../branch_borrow_2.rs" 28 9 28 10] (5 : int32)) };
    assume { Resolve0.resolve w };
    assume { Resolve0.resolve y };
    assume { Resolve0.resolve z };
    switch (not ([#"../branch_borrow_2.rs" 30 12 30 18] c = ([#"../branch_borrow_2.rs" 30 17 30 18] (5 : int32))))
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    absurd
  }
  BB8 {
    _0 <- ();
    return _0
  }
  BB10 {
    assume { Resolve0.resolve x };
    goto BB2
  }
  BB11 {
    assume { Resolve0.resolve x };
    goto BB2
  }
  BB12 {
    assume { Resolve0.resolve x };
    assume { Resolve0.resolve y };
    goto BB3
  }
  BB13 {
    assume { Resolve0.resolve y };
    goto BB3
  }
  
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module BranchBorrow2_MyInt_Type
  use prelude.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module BranchBorrow2_G_Interface
  val g [#"../branch_borrow_2.rs" 35 0 35 10] (_1 : ()) : ()
end
module BranchBorrow2_G
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use BranchBorrow2_MyInt_Type as BranchBorrow2_MyInt_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = BranchBorrow2_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = BranchBorrow2_MyInt_Type.t_myint,
    type t2 = BranchBorrow2_MyInt_Type.t_myint,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = BranchBorrow2_MyInt_Type.t_myint
  let rec cfg g [#"../branch_borrow_2.rs" 35 0 35 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint);
  var b : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint);
  var c : borrowed (BranchBorrow2_MyInt_Type.t_myint);
  var d : borrowed (BranchBorrow2_MyInt_Type.t_myint);
  {
    goto BB0
  }
  BB0 {
    a <- (BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 23 36 25] (10 : usize)), BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 34 36 35] (5 : usize)));
    b <- borrow_mut a;
    a <-  ^ b;
    c <- borrow_mut (let (_, a) =  * b in a);
    b <- { b with current = (let (a, b) =  * b in (a,  ^ c)) };
    d <- borrow_mut (let (a, _) =  * b in a);
    b <- { b with current = (let (a, b) =  * b in ( ^ d, b)) };
    assume { Resolve0.resolve c };
    assume { Resolve0.resolve d };
    assume { Resolve1.resolve a };
    assume { Resolve2.resolve b };
    _0 <- ();
    return _0
  }
  
end
module BranchBorrow2_H_Interface
  val h [#"../branch_borrow_2.rs" 45 0 45 10] (_1 : ()) : ()
end
module BranchBorrow2_H
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg h [#"../branch_borrow_2.rs" 45 0 45 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32;
  var b : int32;
  var x : borrowed int32;
  var y : borrowed int32;
  var w : borrowed int32;
  var _6 : ();
  var _9 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../branch_borrow_2.rs" 46 16 46 18] (10 : int32));
    b <- ([#"../branch_borrow_2.rs" 47 16 47 18] (10 : int32));
    x <- borrow_mut a;
    a <-  ^ x;
    y <- borrow_mut b;
    b <-  ^ y;
    switch ([#"../branch_borrow_2.rs" 52 7 52 11] true)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve y };
    x <- { x with current = ([#"../branch_borrow_2.rs" 53 13 53 14] (5 : int32)) };
    w <- x;
    x <- any borrowed int32;
    _6 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve x };
    y <- { y with current = ([#"../branch_borrow_2.rs" 56 13 56 14] (6 : int32)) };
    _9 <- borrow_mut ( * y);
    y <- { y with current = ( ^ _9) };
    w <- _9;
    _9 <- any borrowed int32;
    _6 <- ();
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve w };
    _0 <- ();
    assume { Resolve0.resolve y };
    return _0
  }
  
end
