
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module BranchBorrow2_F_Interface
  val f [#"../branch_borrow_2.rs" 3 0 3 10] (_1' : ()) : ()
end
module BranchBorrow2_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg f [#"../branch_borrow_2.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var c_3 : int32;
  var x_4 : borrowed int32;
  var y_5 : borrowed int32;
  var z_6 : borrowed int32;
  var w_7 : borrowed int32;
  var _8 : ();
  var _9 : int32;
  var _10 : borrowed int32;
  var _11 : borrowed int32;
  var _12 : borrowed int32;
  var _13 : ();
  var _14 : bool;
  var _15 : bool;
  var _16 : int32;
  var _17 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../branch_borrow_2.rs" 4 16 4 18] (10 : int32));
    b_2 <- ([#"../branch_borrow_2.rs" 5 16 5 18] (10 : int32));
    c_3 <- ([#"../branch_borrow_2.rs" 6 16 6 18] (10 : int32));
    x_4 <- borrow_mut a_1;
    a_1 <-  ^ x_4;
    y_5 <- borrow_mut b_2;
    b_2 <-  ^ y_5;
    z_6 <- borrow_mut c_3;
    c_3 <-  ^ z_6;
    _9 <- ([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32));
    switch (_9 = 1)
      | True -> goto BB1
      | False -> switch (_9 = 2)
        | True -> goto BB2
        | False -> goto BB12
        end
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    goto BB5
  }
  BB3 {
    z_6 <- { z_6 with current = ([#"../branch_borrow_2.rs" 23 17 23 18] (8 : int32)) };
    _12 <- borrow_mut ( * z_6);
    z_6 <- { z_6 with current = ( ^ _12) };
    w_7 <- _12;
    _12 <- any borrowed int32;
    _8 <- ();
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve y_5 };
    assume { Resolve0.resolve z_6 };
    x_4 <- { x_4 with current = ([#"../branch_borrow_2.rs" 15 17 15 18] (6 : int32)) };
    _10 <- x_4;
    x_4 <- any borrowed int32;
    w_7 <- _10;
    _10 <- any borrowed int32;
    _8 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve0.resolve z_6 };
    y_5 <- { y_5 with current = ([#"../branch_borrow_2.rs" 19 17 19 18] (7 : int32)) };
    _11 <- borrow_mut ( * y_5);
    y_5 <- { y_5 with current = ( ^ _11) };
    w_7 <- _11;
    _11 <- any borrowed int32;
    _8 <- ();
    goto BB6
  }
  BB6 {
    w_7 <- { w_7 with current = ([#"../branch_borrow_2.rs" 28 9 28 10] (5 : int32)) };
    assume { Resolve0.resolve w_7 };
    assume { Resolve0.resolve y_5 };
    assume { Resolve0.resolve z_6 };
    _16 <- c_3;
    _15 <- ([#"../branch_borrow_2.rs" 30 12 30 18] _16 = ([#"../branch_borrow_2.rs" 30 17 30 18] (5 : int32)));
    _14 <- not _15;
    switch (_14)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    absurd
  }
  BB8 {
    _13 <- ();
    _0 <- ();
    return _0
  }
  BB10 {
    assume { Resolve0.resolve x_4 };
    goto BB2
  }
  BB11 {
    assume { Resolve0.resolve x_4 };
    goto BB2
  }
  BB12 {
    assume { Resolve0.resolve x_4 };
    assume { Resolve0.resolve y_5 };
    goto BB3
  }
  BB13 {
    assume { Resolve0.resolve y_5 };
    goto BB3
  }
  
end
module BranchBorrow2_MyInt_Type
  use prelude.Int
  use prelude.UIntSize
  type t_myint  =
    | C_MyInt usize
    
  let function myint_0 (self : t_myint) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_MyInt a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module BranchBorrow2_G_Interface
  val g [#"../branch_borrow_2.rs" 35 0 35 10] (_1' : ()) : ()
end
module BranchBorrow2_G
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use BranchBorrow2_MyInt_Type as BranchBorrow2_MyInt_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = BranchBorrow2_MyInt_Type.t_myint
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve1 with
    type t1 = BranchBorrow2_MyInt_Type.t_myint,
    type t2 = BranchBorrow2_MyInt_Type.t_myint,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = BranchBorrow2_MyInt_Type.t_myint
  let rec cfg g [#"../branch_borrow_2.rs" 35 0 35 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint);
  var _2 : BranchBorrow2_MyInt_Type.t_myint;
  var _3 : BranchBorrow2_MyInt_Type.t_myint;
  var b_4 : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint);
  var c_5 : borrowed (BranchBorrow2_MyInt_Type.t_myint);
  var d_6 : borrowed (BranchBorrow2_MyInt_Type.t_myint);
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 23 36 25] (10 : usize));
    _3 <- BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 34 36 35] (5 : usize));
    a_1 <- (_2, _3);
    b_4 <- borrow_mut a_1;
    a_1 <-  ^ b_4;
    c_5 <- borrow_mut (let (_, a) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in (a,  ^ c_5)) };
    d_6 <- borrow_mut (let (a, _) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in ( ^ d_6, b)) };
    _8 <- BranchBorrow2_MyInt_Type.myint_0 ( * c_5);
    assume { Resolve0.resolve c_5 };
    _9 <- BranchBorrow2_MyInt_Type.myint_0 ( * d_6);
    assume { Resolve0.resolve d_6 };
    _7 <- ([#"../branch_borrow_2.rs" 42 12 42 28] _8 <> _9);
    assume { Resolve1.resolve a_1 };
    assume { Resolve2.resolve b_4 };
    _0 <- ();
    return _0
  }
  
end
module BranchBorrow2_H_Interface
  val h [#"../branch_borrow_2.rs" 45 0 45 10] (_1' : ()) : ()
end
module BranchBorrow2_H
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = int32
  let rec cfg h [#"../branch_borrow_2.rs" 45 0 45 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var x_3 : borrowed int32;
  var y_4 : borrowed int32;
  var w_5 : borrowed int32;
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed int32;
  var _9 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../branch_borrow_2.rs" 46 16 46 18] (10 : int32));
    b_2 <- ([#"../branch_borrow_2.rs" 47 16 47 18] (10 : int32));
    x_3 <- borrow_mut a_1;
    a_1 <-  ^ x_3;
    y_4 <- borrow_mut b_2;
    b_2 <-  ^ y_4;
    _7 <- ([#"../branch_borrow_2.rs" 52 7 52 11] true);
    switch (_7)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve y_4 };
    x_3 <- { x_3 with current = ([#"../branch_borrow_2.rs" 53 13 53 14] (5 : int32)) };
    _8 <- x_3;
    x_3 <- any borrowed int32;
    w_5 <- _8;
    _8 <- any borrowed int32;
    _6 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve x_3 };
    y_4 <- { y_4 with current = ([#"../branch_borrow_2.rs" 56 13 56 14] (6 : int32)) };
    _9 <- borrow_mut ( * y_4);
    y_4 <- { y_4 with current = ( ^ _9) };
    w_5 <- _9;
    _9 <- any borrowed int32;
    _6 <- ();
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve w_5 };
    _0 <- ();
    assume { Resolve0.resolve y_4 };
    return _0
  }
  
end
