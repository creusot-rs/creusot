
module T_module_paths__a__T
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_T  =
    | C_T uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_T (input:t_T) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_T field_0 <> input} {false} any ]
    
end
module T_module_paths__S
  use T_module_paths__a__T as T'0
  
  type t_S  =
    | C_S (T'0.t_T)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_S (input:t_S) (ret  (field_0:T'0.t_T))= any
    [ good (field_0:T'0.t_T)-> {C_S field_0 = input} (! ret {field_0})
    | bad (field_0:T'0.t_T)-> {C_S field_0 <> input} {false} any ]
    
end
module T_module_paths__b__O
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_O  =
    | C_O uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_O (input:t_O) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_O field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_O field_0 <> input} {false} any ]
    
end
module T_module_paths__b__c__T
  use T_module_paths__a__T as T'0
  
  type t_T  =
    | C_T (T'0.t_T)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_T (input:t_T) (ret  (field_0:T'0.t_T))= any
    [ good (field_0:T'0.t_T)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:T'0.t_T)-> {C_T field_0 <> input} {false} any ]
    
end
module M_module_paths__test
  use T_module_paths__b__c__T as T'1
  
  use T_module_paths__b__O as O'0
  
  use T_module_paths__S as S'0
  
  use T_module_paths__a__T as T'0
  
  use prelude.prelude.Intrinsic
  
  let rec test (_a:T'0.t_T) (_b:S'0.t_S) (_c:O'0.t_O) (_d:T'1.t_T) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
