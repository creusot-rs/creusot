
module ModulePaths_A_T_Type
  use prelude.UInt32
  use prelude.Int
  type t_t  =
    | C_T uint32
    
  function any_l (_ : 'b) : 'a
  let rec t_t (input:t_t) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_T field_0 <> input} {false} any ]
    
end
module ModulePaths_S_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  type t_s  =
    | C_S (ModulePaths_A_T_Type.t_t)
    
  function any_l (_ : 'b) : 'a
  let rec t_s (input:t_s) (ret  (field_0:ModulePaths_A_T_Type.t_t))= any
    [ good (field_0:ModulePaths_A_T_Type.t_t)-> {C_S field_0 = input} (! ret {field_0})
    | bad (field_0:ModulePaths_A_T_Type.t_t)-> {C_S field_0 <> input} {false} any ]
    
end
module ModulePaths_B_O_Type
  use prelude.UInt32
  use prelude.Int
  type t_o  =
    | C_O uint32
    
  function any_l (_ : 'b) : 'a
  let rec t_o (input:t_o) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_O field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_O field_0 <> input} {false} any ]
    
end
module ModulePaths_B_C_T_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  type t_t  =
    | C_T (ModulePaths_A_T_Type.t_t)
    
  function any_l (_ : 'b) : 'a
  let rec t_t (input:t_t) (ret  (field_0:ModulePaths_A_T_Type.t_t))= any
    [ good (field_0:ModulePaths_A_T_Type.t_t)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:ModulePaths_A_T_Type.t_t)-> {C_T field_0 <> input} {false} any ]
    
end
module ModulePaths_Test
  use ModulePaths_B_C_T_Type as ModulePaths_B_C_T_Type
  use ModulePaths_B_O_Type as ModulePaths_B_O_Type
  use ModulePaths_S_Type as ModulePaths_S_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  use prelude.Intrinsic
  let rec test (_a:ModulePaths_A_T_Type.t_t) (_b:ModulePaths_S_Type.t_s) (_c:ModulePaths_B_O_Type.t_o) (_d:ModulePaths_B_C_T_Type.t_t) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../module_paths.rs" 22 52 22 54] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
