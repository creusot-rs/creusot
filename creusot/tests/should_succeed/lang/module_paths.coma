
module ModulePaths_A_T_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_t  =
    | C_T uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_t (input:t_t) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_T field_0 <> input} {false} any ]
    
end
module ModulePaths_S_Type
  use ModulePaths_A_T_Type as T'0
  
  type t_s  =
    | C_S (T'0.t_t)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_s (input:t_s) (ret  (field_0:T'0.t_t))= any
    [ good (field_0:T'0.t_t)-> {C_S field_0 = input} (! ret {field_0})
    | bad (field_0:T'0.t_t)-> {C_S field_0 <> input} {false} any ]
    
end
module ModulePaths_B_O_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_o  =
    | C_O uint32
  
  function any_l (_ : 'b) : 'a
  
  let rec t_o (input:t_o) (ret  (field_0:uint32))= any
    [ good (field_0:uint32)-> {C_O field_0 = input} (! ret {field_0})
    | bad (field_0:uint32)-> {C_O field_0 <> input} {false} any ]
    
end
module ModulePaths_B_C_T_Type
  use ModulePaths_A_T_Type as T'0
  
  type t_t  =
    | C_T (T'0.t_t)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_t (input:t_t) (ret  (field_0:T'0.t_t))= any
    [ good (field_0:T'0.t_t)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:T'0.t_t)-> {C_T field_0 <> input} {false} any ]
    
end
module ModulePaths_Test
  use ModulePaths_B_C_T_Type as T'1
  
  use ModulePaths_B_O_Type as O'0
  
  use ModulePaths_S_Type as S'0
  
  use ModulePaths_A_T_Type as T'0
  
  use prelude.prelude.Intrinsic
  
  let rec test (_a:T'0.t_t) (_b:S'0.t_s) (_c:O'0.t_o) (_d:T'1.t_t) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
