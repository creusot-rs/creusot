
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module PromotedConstants_PromotedNone
  use prelude.Borrow
  use prelude.Int32
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate resolve1 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve1 (self : Core_Option_Option_Type.t_option int32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32)) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let constant promoted0 [#"../promoted_constants.rs" 3 0 3 22]  : Core_Option_Option_Type.t_option int32
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../promoted_constants.rs" 6 23 6 31] Core_Option_Option_Type.C_Some ([#"../promoted_constants.rs" 6 28 6 30] [#"../promoted_constants.rs" 6 28 6 30] (43 : int32)) in let _0 = [#"../promoted_constants.rs" 6 22 6 31] _1 in _0
  let constant promoted1 [#"../promoted_constants.rs" 3 0 3 22]  : Core_Option_Option_Type.t_option int32
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../promoted_constants.rs" 6 12 6 20] Core_Option_Option_Type.C_Some ([#"../promoted_constants.rs" 6 17 6 19] [#"../promoted_constants.rs" 6 17 6 19] (42 : int32)) in let _0 = [#"../promoted_constants.rs" 6 11 6 20] _1 in _0
  let rec cfg promoted_none [#"../promoted_constants.rs" 3 0 3 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _ix : Core_Option_Option_Type.t_option int32;
  var _2 : (Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32);
  var _10 : Core_Option_Option_Type.t_option int32;
  var _11 : Core_Option_Option_Type.t_option int32;
  {
    goto BB0
  }
  BB0 {
    [#"../promoted_constants.rs" 4 14 4 21] _ix <- ([#"../promoted_constants.rs" 4 14 4 21] Core_Option_Option_Type.C_Some ([#"../promoted_constants.rs" 4 19 4 20] [#"../promoted_constants.rs" 4 19 4 20] (0 : int32)));
    [#"../promoted_constants.rs" 6 11 6 20] _11 <- ([#"../promoted_constants.rs" 6 11 6 20] [#"../promoted_constants.rs" 6 11 6 20] promoted1);
    [#"../promoted_constants.rs" 6 22 6 31] _10 <- ([#"../promoted_constants.rs" 6 22 6 31] [#"../promoted_constants.rs" 6 22 6 31] promoted0);
    [#"../promoted_constants.rs" 6 10 6 32] _2 <- ([#"../promoted_constants.rs" 6 10 6 32] (([#"../promoted_constants.rs" 6 11 6 20] _11), ([#"../promoted_constants.rs" 6 22 6 31] _10)));
    switch (let (a, _) = _2 in a)
      | Core_Option_Option_Type.C_None -> goto BB1
      | _ -> goto BB6
      end
  }
  BB1 {
    assume { resolve0 _2 };
    switch (let (_, a) = _2 in a)
      | Core_Option_Option_Type.C_None -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB4
  }
  BB3 {
    [#"../promoted_constants.rs" 8 13 8 15] _0 <- ([#"../promoted_constants.rs" 8 13 8 15] ());
    return _0
  }
  BB4 {
    assert { false };
    absurd
  }
  BB6 {
    assume { resolve0 _2 };
    goto BB3
  }
  
end
module PromotedConstants_PromotedInt
  use prelude.Borrow
  use prelude.Int32
  use prelude.Int
  let constant promoted0 [#"../promoted_constants.rs" 12 0 12 21]  : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _2 = [#"../promoted_constants.rs" 13 15 13 20] ([#"../promoted_constants.rs" 13 15 13 16] [#"../promoted_constants.rs" 13 15 13 16] (1 : int32)) + ([#"../promoted_constants.rs" 13 19 13 20] [#"../promoted_constants.rs" 13 19 13 20] (5 : int32)) in let _1 = [#"../promoted_constants.rs" 13 14 13 26] _2 + ([#"../promoted_constants.rs" 13 23 13 25] [#"../promoted_constants.rs" 13 23 13 25] (10 : int32)) in let _2 = any int32 in let _0 = [#"../promoted_constants.rs" 13 13 13 26] _1 in _0
  let rec cfg promoted_int [#"../promoted_constants.rs" 12 0 12 21] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var ix : int32;
  var _9 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../promoted_constants.rs" 13 13 13 26] _9 <- ([#"../promoted_constants.rs" 13 13 13 26] [#"../promoted_constants.rs" 13 13 13 26] promoted0);
    [#"../promoted_constants.rs" 13 13 13 26] ix <- ([#"../promoted_constants.rs" 13 13 13 26] _9);
    switch ([#"../promoted_constants.rs" 15 7 15 16] ([#"../promoted_constants.rs" 15 7 15 10] ix) <> ([#"../promoted_constants.rs" 15 14 15 16] [#"../promoted_constants.rs" 15 14 15 16] (16 : int32)))
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assert { false };
    absurd
  }
  BB2 {
    [#"../promoted_constants.rs" 17 5 17 5] _0 <- ([#"../promoted_constants.rs" 17 5 17 5] ());
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Alloc_String_String_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UInt8
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_string  =
    | C_String (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    
end
module PromotedConstants_String
  use Alloc_String_String_Type as Alloc_String_String_Type
  let rec cfg string [#"../promoted_constants.rs" 20 0 20 25] [@cfg:stackify] [@cfg:subregion_analysis] (_s : Alloc_String_String_Type.t_string) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../promoted_constants.rs" 20 26 20 28] _0 <- ([#"../promoted_constants.rs" 20 26 20 28] ());
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module PromotedConstants_Str
  use prelude.Borrow
  let rec cfg str [#"../promoted_constants.rs" 22 0 22 12] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _s : string;
  {
    goto BB0
  }
  BB0 {
    [#"../promoted_constants.rs" 23 13 23 115] _s <- ([#"../promoted_constants.rs" 23 13 23 115] [#"../promoted_constants.rs" 23 13 23 115] "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
    [#"../promoted_constants.rs" 22 13 24 1] _0 <- ([#"../promoted_constants.rs" 22 13 24 1] ());
    return _0
  }
  
end
