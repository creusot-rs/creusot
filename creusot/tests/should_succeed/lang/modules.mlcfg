
module Modules_Nested_Nested_Type
  type t_nested  =
    | C_Test
    
end
module Modules_Nested_Impl0_Resolve_Stub
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  predicate resolve [#"../modules.rs" 7 13 7 20] (self : Modules_Nested_Nested_Type.t_nested)
end
module Modules_Nested_Impl0_Resolve_Interface
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  predicate resolve [#"../modules.rs" 7 13 7 20] (self : Modules_Nested_Nested_Type.t_nested)
  val resolve [#"../modules.rs" 7 13 7 20] (self : Modules_Nested_Nested_Type.t_nested) : bool
    ensures { result = resolve self }
    
end
module Modules_Nested_Impl0_Resolve
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  predicate resolve [#"../modules.rs" 7 13 7 20] (self : Modules_Nested_Nested_Type.t_nested) =
    [#"../modules.rs" 7 13 7 20] match (self) with
      | Modules_Nested_Nested_Type.C_Test -> true
      end
  val resolve [#"../modules.rs" 7 13 7 20] (self : Modules_Nested_Nested_Type.t_nested) : bool
    ensures { result = resolve self }
    
end
module Modules_Nested_InnerFunc_Interface
  val inner_func [#"../modules.rs" 13 4 13 31] (_1 : ()) : bool
    ensures { [#"../modules.rs" 12 14 12 28] result = true }
    
end
module Modules_Nested_InnerFunc
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  clone Modules_Nested_Impl0_Resolve as Resolve0
  let rec cfg inner_func [#"../modules.rs" 13 4 13 31] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../modules.rs" 12 14 12 28] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _2 : Modules_Nested_Nested_Type.t_nested;
  {
    goto BB0
  }
  BB0 {
    _2 <- Modules_Nested_Nested_Type.C_Test;
    assume { Resolve0.resolve _2 };
    _0 <- ([#"../modules.rs" 15 8 15 12] true);
    return _0
  }
  
end
module Modules_Nested_Further_Another_Interface
  val another [#"../modules.rs" 19 8 19 32] (_1 : ()) : bool
end
module Modules_Nested_Further_Another
  let rec cfg another [#"../modules.rs" 19 8 19 32] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../modules.rs" 20 12 20 17] false);
    return _0
  }
  
end
module Modules_F_Interface
  val f [#"../modules.rs" 25 0 25 10] (_1 : ()) : ()
end
module Modules_F
  clone Modules_Nested_Further_Another_Interface as Another0
  clone Modules_Nested_InnerFunc_Interface as InnerFunc0
  let rec cfg f [#"../modules.rs" 25 0 25 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : bool;
  var _2 : bool;
  {
    goto BB0
  }
  BB0 {
    _1 <- ([#"../modules.rs" 26 4 26 24] InnerFunc0.inner_func ());
    goto BB1
  }
  BB1 {
    _2 <- ([#"../modules.rs" 28 4 28 13] Another0.another ());
    goto BB2
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module Modules_Nested_Impl0
  
end
