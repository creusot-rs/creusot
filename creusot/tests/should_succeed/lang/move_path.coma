
module MovePath_F
  let%span smove_path0 = "../move_path.rs" 4 16 4 17
  
  let%span smove_path1 = "../move_path.rs" 10 17 10 18
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span2]  ^ self =  * self
  
  use prelude.prelude.Int
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#smove_path0] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &y <- _ret' ]  [ &x <-  ^ y ] s2)
      | s2 =  [ &d <- y ] (any [ any_ (_any:borrowed int32)-> (!  [ &y <- _any ] s3) ] )
      | s3 =  [ &z <- d ] (any [ any_ (_any:borrowed int32)-> (!  [ &d <- _any ] s4) ] )
      | s4 =  [ &z <- { z with current = ([%#smove_path1] (2 : int32)) ; } ] s5
      | s5 = -{resolve'0 z}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & y : borrowed int32 = any_l ()
    | & d : borrowed int32 = any_l ()
    | & z : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
