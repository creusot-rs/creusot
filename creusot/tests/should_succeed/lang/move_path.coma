
module MovePath_F
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int32
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [#"../move_path.rs" 4 16 4 17] (1 : int32) ] s1
      | s1 = Borrow.borrow_mut <int32> {x} (fun (_ret':borrowed int32) ->  [ &y <- _ret' ]  [ &x <-  ^ y ] s2)
      | s2 =  [ &d <- y ] (any [ any_ (_any:borrowed int32)-> (!  [ &y <- _any ] s3) ] )
      | s3 =  [ &z <- d ] (any [ any_ (_any:borrowed int32)-> (!  [ &d <- _any ] s4) ] )
      | s4 =  [ &z <- { z with current = ([#"../move_path.rs" 10 17 10 18] (2 : int32)) ; } ] s5
      | s5 = -{resolve'0 z}- s6
      | s6 =  [ &_0 <- [#"../move_path.rs" 3 11 15 1] () ] s7
      | s7 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & x : int32 = any_l () : int32
    | & y : borrowed int32 = any_l () : borrowed int32
    | & d : borrowed int32 = any_l () : borrowed int32
    | & z : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
