module M_move_path__f [#"move_path.rs" 3 0 3 10]
  let%span smove_path0 = "move_path.rs" 4 16 4 17
  let%span smove_path1 = "move_path.rs" 10 17 10 18
  let%span sresolve2 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed Int32.t) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Int32.t) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#smove_path0] (1 : Int32.t) ] s1
      | s1 = Borrow.borrow_mut <Int32.t> {x}
          (fun (_ret':borrowed Int32.t) ->  [ &y <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 =  [ &d <- y ] s3
      | s3 =  [ &z <- d ] s4
      | s4 =  [ &z <- { z with current = ([%#smove_path1] (2 : Int32.t)) } ] s5
      | s5 = -{resolve'0 z}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : Int32.t = any_l ()
    | & y : borrowed Int32.t = any_l ()
    | & d : borrowed Int32.t = any_l ()
    | & z : borrowed Int32.t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
