module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_promoted_constants__promoted_none [#"promoted_constants.rs" 3 0 3 22]
  let%span spromoted_constants0 = "promoted_constants.rs" 4 19 4 20
  let%span spromoted_constants1 = "promoted_constants.rs" 6 28 6 30
  let%span spromoted_constants2 = "promoted_constants.rs" 6 17 6 19
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  let rec promoted0 (return'  (ret:Option'0.t_Option int32))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Option'0.C_Some ([%#spromoted_constants1] (43 : int32)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : Option'0.t_Option int32 = any_l () | & _1 : Option'0.t_Option int32 = any_l () ] 
    [ return' (result:Option'0.t_Option int32)-> return' {result} ]
    
  
  let rec promoted1 (return'  (ret:Option'0.t_Option int32))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Option'0.C_Some ([%#spromoted_constants2] (42 : int32)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : Option'0.t_Option int32 = any_l () | & _1 : Option'0.t_Option int32 = any_l () ] 
    [ return' (result:Option'0.t_Option int32)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec promoted_none (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_ix <- Option'0.C_Some ([%#spromoted_constants0] (0 : int32)) ] s1
      | s1 = promoted1 (fun (pr1:Option'0.t_Option int32) ->  [ &_11 <- pr1 ] s2)
      | s2 = promoted0 (fun (pr0:Option'0.t_Option int32) ->  [ &_10 <- pr0 ] s3)
      | s3 =  [ &_2 <- (_11, _10) ] s4
      | s4 = any
        [ br0 -> {(let (r'0, _) = _2 in r'0) = Option'0.C_None } (! bb2)
        | br1 (a:int32)-> {(let (r'0, _) = _2 in r'0) = Option'0.C_Some a} (! bb6) ]
         ]
      
    | bb6 = bb1
    | bb2 = any
      [ br0 -> {(let (_, r'0) = _2 in r'0) = Option'0.C_None } (! bb3)
      | br1 (a:int32)-> {(let (_, r'0) = _2 in r'0) = Option'0.C_Some a} (! bb1) ]
      
    | bb1 = return' {_0}
    | bb3 = bb4
    | bb4 = {false} any ]
    )
    [ & _0 : () = any_l ()
    | & _ix : Option'0.t_Option int32 = any_l ()
    | & _2 : (Option'0.t_Option int32, Option'0.t_Option int32) = any_l ()
    | & _10 : Option'0.t_Option int32 = any_l ()
    | & _11 : Option'0.t_Option int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__promoted_int [#"promoted_constants.rs" 12 0 12 21]
  let%span spromoted_constants0 = "promoted_constants.rs" 15 14 15 16
  let%span spromoted_constants1 = "promoted_constants.rs" 13 15 13 16
  let%span spromoted_constants2 = "promoted_constants.rs" 13 19 13 20
  let%span spromoted_constants3 = "promoted_constants.rs" 13 23 13 25
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  let rec promoted0 (return'  (ret:int32))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {[%#spromoted_constants1] (1 : int32)} {[%#spromoted_constants2] (5 : int32)}
          (fun (_ret':int32) ->  [ &_2 <- _ret' ] s1)
      | s1 = Int32.add {_2} {[%#spromoted_constants3] (10 : int32)} (fun (_ret':int32) ->  [ &_1 <- _ret' ] s2)
      | s2 =  [ &_0 <- _1 ] s3
      | s3 = return' {_0} ]
       ]
     [ & _0 : int32 = any_l () | & _1 : int32 = any_l () | & _2 : int32 = any_l () ] 
    [ return' (result:int32)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec promoted_int (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted0 (fun (pr0:int32) ->  [ &_9 <- pr0 ] s1)
      | s1 =  [ &ix <- _9 ] s2
      | s2 = Int32.ne {ix} {[%#spromoted_constants0] (16 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s3)
      | s3 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = {false} any
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & ix : int32 = any_l () | & _4 : bool = any_l () | & _9 : int32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_alloc__string__String
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt8
  
  use prelude.prelude.Int
  
  use T_alloc__vec__Vec as Vec'0
  
  type t_String  =
    | C_String (Vec'0.t_Vec uint8 (Global'0.t_Global))
  
  let rec t_String (input:t_String) (ret  (vec:Vec'0.t_Vec uint8 (Global'0.t_Global)))= any
    [ good (vec:Vec'0.t_Vec uint8 (Global'0.t_Global))-> {C_String vec = input} (! ret {vec}) ]
    
end
module M_promoted_constants__string [#"promoted_constants.rs" 20 0 20 25]
  use T_alloc__string__String as String'0
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec string (_s:String'0.t_String) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__str [#"promoted_constants.rs" 22 0 22 12]
  let%span spromoted_constants0 = "promoted_constants.rs" 23 13 23 115
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec str (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_s <- [%#spromoted_constants0] "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" ]
        
        s1
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _s : string = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
