
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module PromotedConstants_PromotedNone
  use prelude.Intrinsic
  use prelude.Int32
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate resolve'1 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'1 (self:Core_Option_Option_Type.t_option int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : (Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'1 (let (a, _) = self in a)
    /\ resolve'1 (let (_, a) = self in a)
  let rec resolve'0 (self:(Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Borrow
  use prelude.Int
  let rec promoted0 (return'  (ret:Core_Option_Option_Type.t_option int32))= bb0
    [ bb0 = s0
      [ s0 = 
        [ &_1 <- Core_Option_Option_Type.C_Some ([#"../promoted_constants.rs" 6 28 6 30] (43 : int32)) : Core_Option_Option_Type.t_option int32 ]
        
        s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
    
    [ & _0 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _1 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32 ]
     [ return' (result:Core_Option_Option_Type.t_option int32)-> return' {result} ] 
  let rec promoted1 (return'  (ret:Core_Option_Option_Type.t_option int32))= bb0
    [ bb0 = s0
      [ s0 = 
        [ &_1 <- Core_Option_Option_Type.C_Some ([#"../promoted_constants.rs" 6 17 6 19] (42 : int32)) : Core_Option_Option_Type.t_option int32 ]
        
        s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
    
    [ & _0 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _1 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32 ]
     [ return' (result:Core_Option_Option_Type.t_option int32)-> return' {result} ] 
  let rec promoted_none (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_ix <- Core_Option_Option_Type.C_Some ([#"../promoted_constants.rs" 4 19 4 20] (0 : int32)) : Core_Option_Option_Type.t_option int32 ]
        
        s1
      | s1 = promoted1 (fun (pr1:Core_Option_Option_Type.t_option int32) ->  [ &_11 <- pr1 ] s2)
      | s2 = promoted0 (fun (pr0:Core_Option_Option_Type.t_option int32) ->  [ &_10 <- pr0 ] s3)
      | s3 =  [ &_2 <- (_11, _10) ] s4
      | s4 = any
        [ br0 -> {(let (r'0, _) = _2 in r'0) = Core_Option_Option_Type.C_None } (! bb2)
        | br1 (a:int32)-> {(let (r'0, _) = _2 in r'0) = Core_Option_Option_Type.C_Some a} (! bb6) ]
         ]
      
    | bb6 = s0 [ s0 = -{resolve'0 _2}- s1 | s1 = bb1 ] 
    | bb2 = s0
      [ s0 = -{resolve'0 _2}- s1
      | s1 = any
        [ br0 -> {(let (_, r'0) = _2 in r'0) = Core_Option_Option_Type.C_None } (! bb3)
        | br1 (a:int32)-> {(let (_, r'0) = _2 in r'0) = Core_Option_Option_Type.C_Some a} (! bb1) ]
         ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = return' {_0} ] 
    | bb3 = s0 [ s0 = bb4 ] 
    | bb4 = s0 [ s0 = {false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _ix : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _2 : (Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32) = any_l () : (Core_Option_Option_Type.t_option int32, Core_Option_Option_Type.t_option int32)
    | & _10 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32
    | & _11 : Core_Option_Option_Type.t_option int32 = any_l () : Core_Option_Option_Type.t_option int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module PromotedConstants_PromotedInt
  use prelude.Intrinsic
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  let rec promoted0 (return'  (ret:int32))= bb0
    [ bb0 = s0
      [ s0 = Int32.add
          {[#"../promoted_constants.rs" 13 15 13 16] (1 : int32)}
          {[#"../promoted_constants.rs" 13 19 13 20] (5 : int32)}
          (fun (_ret':int32) ->  [ &_2 <- _ret' ] s1)
      | s1 = Int32.add {_2} {[#"../promoted_constants.rs" 13 23 13 25] (10 : int32)}
          (fun (_ret':int32) ->  [ &_1 <- _ret' ] (any [ any_ (_any:int32)-> (!  [ &_2 <- _any ] s2) ] ))
      | s2 =  [ &_0 <- _1 ] s3
      | s3 = return' {_0} ]
       ]
     [ & _0 : int32 = any_l () : int32 | & _1 : int32 = any_l () : int32 | & _2 : int32 = any_l () : int32 ] 
    [ return' (result:int32)-> return' {result} ]
    
  let rec promoted_int (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted0 (fun (pr0:int32) ->  [ &_9 <- pr0 ] s1)
      | s1 =  [ &ix <- _9 ] s2
      | s2 = Int32.ne {ix} {[#"../promoted_constants.rs" 15 14 15 16] (16 : int32)}
          (fun (_ret':bool) ->  [ &_4 <- _ret' ] s3)
      | s3 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 = {false} any ] 
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../promoted_constants.rs" 17 5 17 5] () ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & ix : int32 = any_l () : int32
    | & _4 : bool = any_l () : bool
    | & _9 : int32 = any_l () : int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Alloc_String_String_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use prelude.UInt8
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_string  =
    | C_String (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    
  function any_l (_ : 'b) : 'a
  let rec t_string (input:t_string) (ret  (vec:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)))= any
    [ good (vec:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))-> {C_String vec = input}
      (! ret {vec})
    | bad (vec:Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))-> {C_String vec <> input}
      {false}
      any ]
    
end
module PromotedConstants_String
  use Alloc_String_String_Type as Alloc_String_String_Type
  use prelude.Intrinsic
  let rec string (_s:Alloc_String_String_Type.t_string) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../promoted_constants.rs" 20 26 20 28] () ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
module PromotedConstants_Str
  use prelude.Borrow
  use prelude.Intrinsic
  let rec str (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_s <- [#"../promoted_constants.rs" 23 13 23 115] "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" ]
        
        s1
      | s1 =  [ &_0 <- [#"../promoted_constants.rs" 22 13 24 1] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & _s : string = any_l () : string ]  [ return' (result:())-> (! return' {result}) ] 
end
