module M_promoted_constants__promoted_none [#"promoted_constants.rs" 3 0 3 22]
  let%span spromoted_constants0 = "promoted_constants.rs" 4 19 4 20
  let%span spromoted_constants1 = "promoted_constants.rs" 6 17 6 19
  let%span spromoted_constants2 = "promoted_constants.rs" 6 28 6 30
  
  use prelude.prelude.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted1__promoted_none'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#spromoted_constants1] (42 : int32)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  let rec promoted0__promoted_none'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#spromoted_constants2] (43 : int32)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : t_Option'0 = any_l () | & _1 : t_Option'0 = any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec promoted_none'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_ix <- C_Some'0 ([%#spromoted_constants0] (0 : int32)) ] s1
      | s1 = promoted1__promoted_none'0 (fun (pr1:t_Option'0) ->  [ &_11 <- pr1 ] s2)
      | s2 = promoted0__promoted_none'0 (fun (pr0:t_Option'0) ->  [ &_10 <- pr0 ] s3)
      | s3 =  [ &_2 <- (_11, _10) ] s4
      | s4 = any
        [ br0 -> {(let (r'0, _) = _2 in r'0) = C_None'0 } (! bb2)
        | br1 (x0:int32)-> {(let (r'0, _) = _2 in r'0) = C_Some'0 x0} (! bb6) ]
         ]
      
    | bb6 = bb1
    | bb2 = any
      [ br0 -> {(let (_, r'0) = _2 in r'0) = C_None'0 } (! bb3)
      | br1 (x0:int32)-> {(let (_, r'0) = _2 in r'0) = C_Some'0 x0} (! bb1) ]
      
    | bb1 = return' {_0}
    | bb3 = bb4
    | bb4 = {false} any ]
    )
    [ & _0 : () = any_l ()
    | & _ix : t_Option'0 = any_l ()
    | & _2 : (t_Option'0, t_Option'0) = any_l ()
    | & _10 : t_Option'0 = any_l ()
    | & _11 : t_Option'0 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__promoted_int [#"promoted_constants.rs" 12 0 12 21]
  let%span spromoted_constants0 = "promoted_constants.rs" 15 14 15 16
  let%span spromoted_constants1 = "promoted_constants.rs" 13 15 13 16
  let%span spromoted_constants2 = "promoted_constants.rs" 13 19 13 20
  let%span spromoted_constants3 = "promoted_constants.rs" 13 23 13 25
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec promoted0__promoted_int'0 (return'  (ret:int32))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {[%#spromoted_constants1] (1 : int32)} {[%#spromoted_constants2] (5 : int32)}
          (fun (_ret':int32) ->  [ &_2 <- _ret' ] s1)
      | s1 = Int32.add {_2} {[%#spromoted_constants3] (10 : int32)} (fun (_ret':int32) ->  [ &_1 <- _ret' ] s2)
      | s2 =  [ &_0 <- _1 ] s3
      | s3 = return' {_0} ]
       ]
     [ & _0 : int32 = any_l () | & _1 : int32 = any_l () | & _2 : int32 = any_l () ] 
    [ return' (result:int32)-> return' {result} ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec promoted_int'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted0__promoted_int'0 (fun (pr0:int32) ->  [ &_9 <- pr0 ] s1)
      | s1 =  [ &ix <- _9 ] s2
      | s2 = Int32.ne {ix} {[%#spromoted_constants0] (16 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s3)
      | s3 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = {false} any
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & ix : int32 = any_l () | & _4 : bool = any_l () | & _9 : int32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_promoted_constants__string [#"promoted_constants.rs" 20 0 20 25]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  type t_String'0  =
    { t_String__vec'0: t_Vec'0 }
  
  meta "compute_max_steps" 1000000
  
  let rec string'0 (_s:t_String'0) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_promoted_constants__str [#"promoted_constants.rs" 22 0 22 12]
  let%span spromoted_constants0 = "promoted_constants.rs" 23 13 23 115
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  meta "compute_max_steps" 1000000
  
  let rec str'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_s <- [%#spromoted_constants0] "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" ]
        
        s1
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _s : string = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
