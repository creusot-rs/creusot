
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module PromotedConstants_PromotedNone
  let%span spromoted_constants0 = "../promoted_constants.rs" 4 19 4 20
  
  let%span spanic1 = "" 0 0 0 0
  
  let%span spromoted_constants2 = "../promoted_constants.rs" 6 28 6 30
  
  let%span spromoted_constants3 = "../promoted_constants.rs" 6 17 6 19
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use Core_Option_Option_Type as Option'0
  
  let rec promoted0 (return'  (ret:Option'0.t_option int32))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Option'0.C_Some ([%#spromoted_constants2] (43 : int32)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : Option'0.t_option int32 = any_l () | & _1 : Option'0.t_option int32 = any_l () ] 
    [ return' (result:Option'0.t_option int32)-> return' {result} ]
    
  
  let rec promoted1 (return'  (ret:Option'0.t_option int32))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Option'0.C_Some ([%#spromoted_constants3] (42 : int32)) ] s1
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
       ]
     [ & _0 : Option'0.t_option int32 = any_l () | & _1 : Option'0.t_option int32 = any_l () ] 
    [ return' (result:Option'0.t_option int32)-> return' {result} ]
    
  
  let rec promoted_none (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_ix <- Option'0.C_Some ([%#spromoted_constants0] (0 : int32)) ] s1
      | s1 = promoted1 (fun (pr1:Option'0.t_option int32) ->  [ &_11 <- pr1 ] s2)
      | s2 = promoted0 (fun (pr0:Option'0.t_option int32) ->  [ &_10 <- pr0 ] s3)
      | s3 =  [ &_2 <- (_11, _10) ] s4
      | s4 = any
        [ br0 -> {(let (r'0, _) = _2 in r'0) = Option'0.C_None } (! bb2)
        | br1 (a:int32)-> {(let (r'0, _) = _2 in r'0) = Option'0.C_Some a} (! bb6) ]
         ]
      
    | bb6 = bb1
    | bb2 = any
      [ br0 -> {(let (_, r'0) = _2 in r'0) = Option'0.C_None } (! bb3)
      | br1 (a:int32)-> {(let (_, r'0) = _2 in r'0) = Option'0.C_Some a} (! bb1) ]
      
    | bb1 = return' {_0}
    | bb3 = bb4
    | bb4 = {[%#spanic1] false} any ]
    )
    [ & _0 : () = any_l ()
    | & _ix : Option'0.t_option int32 = any_l ()
    | & _2 : (Option'0.t_option int32, Option'0.t_option int32) = any_l ()
    | & _10 : Option'0.t_option int32 = any_l ()
    | & _11 : Option'0.t_option int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module PromotedConstants_PromotedInt
  let%span spromoted_constants0 = "../promoted_constants.rs" 15 14 15 16
  
  let%span spanic1 = "" 0 0 0 0
  
  let%span spromoted_constants2 = "../promoted_constants.rs" 13 15 13 16
  
  let%span spromoted_constants3 = "../promoted_constants.rs" 13 19 13 20
  
  let%span spromoted_constants4 = "../promoted_constants.rs" 13 23 13 25
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  let rec promoted0 (return'  (ret:int32))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {[%#spromoted_constants2] (1 : int32)} {[%#spromoted_constants3] (5 : int32)}
          (fun (_ret':int32) ->  [ &_2 <- _ret' ] s1)
      | s1 = Int32.add {_2} {[%#spromoted_constants4] (10 : int32)} (fun (_ret':int32) ->  [ &_1 <- _ret' ] s2)
      | s2 =  [ &_0 <- _1 ] s3
      | s3 = return' {_0} ]
       ]
     [ & _0 : int32 = any_l () | & _1 : int32 = any_l () | & _2 : int32 = any_l () ] 
    [ return' (result:int32)-> return' {result} ]
    
  
  let rec promoted_int (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted0 (fun (pr0:int32) ->  [ &_9 <- pr0 ] s1)
      | s1 =  [ &ix <- _9 ] s2
      | s2 = Int32.ne {ix} {[%#spromoted_constants0] (16 : int32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s3)
      | s3 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = {[%#spanic1] false} any
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & ix : int32 = any_l () | & _4 : bool = any_l () | & _9 : int32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Alloc_String_String_Type
  use prelude.prelude.Opaque
  
  type t_string  =
    | C_String hidden_field
  
  function any_l (_ : 'b) : 'a
  
  let rec t_string (input:t_string) (ret  (vec:hidden_field))= any
    [ good (vec:hidden_field)-> {C_String vec = input} (! ret {vec})
    | bad (vec:hidden_field)-> {C_String vec <> input} {false} any ]
    
end
module PromotedConstants_String
  use Alloc_String_String_Type as String'0
  
  use prelude.prelude.Intrinsic
  
  let rec string (_s:String'0.t_string) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module PromotedConstants_Str
  let%span spromoted_constants0 = "../promoted_constants.rs" 23 13 23 115
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  let rec str (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = 
        [ &_s <- [%#spromoted_constants0] "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" ]
        
        s1
      | s1 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & _s : string = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
