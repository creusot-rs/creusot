
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module WhileLet_F_Interface
  val f [#"../while_let.rs" 4 0 4 10] (_1' : ()) : ()
end
module WhileLet_F
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  use prelude.IntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Option_Option_Type.t_option int32
  let rec cfg f [#"../while_let.rs" 4 0 4 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : Core_Option_Option_Type.t_option int32;
  var b_2 : borrowed (Core_Option_Option_Type.t_option int32);
  var _4 : ();
  var _5 : isize;
  var _6 : Core_Option_Option_Type.t_option int32;
  var _7 : ();
  var _8 : ();
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- Core_Option_Option_Type.C_Some ([#"../while_let.rs" 5 21 5 23] (10 : int32));
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    goto BB1
  }
  BB1 {
    invariant { [#"../while_let.rs" 8 16 8 20] true };
    goto BB2
  }
  BB2 {
    switch ( * b_2)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB5
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _6 <- Core_Option_Option_Type.C_None;
    b_2 <- { b_2 with current = _6 };
    _6 <- any Core_Option_Option_Type.t_option int32;
    _4 <- ();
    goto BB1
  }
  BB5 {
    assume { Resolve0.resolve b_2 };
    _0 <- ();
    return _0
  }
  
end
