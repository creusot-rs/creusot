
module BranchBorrow2_F
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int32
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [#"../branch_borrow_2.rs" 4 16 4 18] (10 : int32) ] s1
      | s1 =  [ &b <- [#"../branch_borrow_2.rs" 5 16 5 18] (10 : int32) ] s2
      | s2 =  [ &c <- [#"../branch_borrow_2.rs" 6 16 6 18] (10 : int32) ] s3
      | s3 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &x <- _ret' ]  [ &a <-  ^ x ] s4)
      | s4 = Borrow.borrow_mut <int32> {b} (fun (_ret':borrowed int32) ->  [ &y <- _ret' ]  [ &b <-  ^ y ] s5)
      | s5 = Borrow.borrow_mut <int32> {c} (fun (_ret':borrowed int32) ->  [ &z <- _ret' ]  [ &c <-  ^ z ] s6)
      | s6 = any
        [ br0 -> {([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32)) = 1} (! bb2)
        | br1 -> {([#"../branch_borrow_2.rs" 13 10 13 11] (3 : int32)) = 2} (! bb3)
        | default -> (! bb12) ]
         ]
      
    | bb12 = s0 [ s0 = -{resolve'0 y}- s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &z <- { z with current = ([#"../branch_borrow_2.rs" 23 17 23 18] (8 : int32)) ; } ] s1
      | s1 = Borrow.borrow_final <int32> { * z} {Borrow.get_id z}
          (fun (_ret':borrowed int32) ->  [ &_12 <- _ret' ]  [ &z <- { z with current = ( ^ _12) ; } ] s2)
      | s2 =  [ &w <- _12 ] (any [ any_ (_any:borrowed int32)-> (!  [ &_12 <- _any ] s3) ] )
      | s3 =  [ &_8 <- [#"../branch_borrow_2.rs" 22 13 25 9] () ] s4
      | s4 = bb6 ]
      
    | bb3 = s0 [ s0 = bb5 ] 
    | bb5 = s0
      [ s0 = -{resolve'0 z}- s1
      | s1 =  [ &y <- { y with current = ([#"../branch_borrow_2.rs" 19 17 19 18] (7 : int32)) ; } ] s2
      | s2 = Borrow.borrow_final <int32> { * y} {Borrow.get_id y}
          (fun (_ret':borrowed int32) ->  [ &_11 <- _ret' ]  [ &y <- { y with current = ( ^ _11) ; } ] s3)
      | s3 =  [ &w <- _11 ] (any [ any_ (_any:borrowed int32)-> (!  [ &_11 <- _any ] s4) ] )
      | s4 =  [ &_8 <- [#"../branch_borrow_2.rs" 18 13 21 9] () ] s5
      | s5 = bb6 ]
      
    | bb2 = s0 [ s0 = bb4 ] 
    | bb4 = s0
      [ s0 = -{resolve'0 z}- s1
      | s1 = -{resolve'0 y}- s2
      | s2 =  [ &x <- { x with current = ([#"../branch_borrow_2.rs" 15 17 15 18] (6 : int32)) ; } ] s3
      | s3 =  [ &w <- x ] (any [ any_ (_any:borrowed int32)-> (!  [ &x <- _any ] s4) ] )
      | s4 =  [ &_8 <- [#"../branch_borrow_2.rs" 14 13 17 9] () ] s5
      | s5 = bb6 ]
      
    | bb6 = s0
      [ s0 =  [ &w <- { w with current = ([#"../branch_borrow_2.rs" 28 9 28 10] (5 : int32)) ; } ] s1
      | s1 = -{resolve'0 w}- s2
      | s2 = -{resolve'0 z}- s3
      | s3 = -{resolve'0 y}- s4
      | s4 = Int32.eq {c} {[#"../branch_borrow_2.rs" 30 17 30 18] (5 : int32)}
          (fun (_ret':bool) ->  [ &_14 <- _ret' ] s5)
      | s5 = any [ br0 -> {_14 = false} (! bb8) | br1 -> {_14} (! bb7) ]  ]
      
    | bb7 = s0 [ s0 =  [ &_0 <- [#"../branch_borrow_2.rs" 3 11 31 1] () ] s1 | s1 = return' {_0} ] 
    | bb8 = s0 [ s0 = {[#"../branch_borrow_2.rs" 30 4 30 19] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & a : int32 = any_l () : int32
    | & b : int32 = any_l () : int32
    | & c : int32 = any_l () : int32
    | & x : borrowed int32 = any_l () : borrowed int32
    | & y : borrowed int32 = any_l () : borrowed int32
    | & z : borrowed int32 = any_l () : borrowed int32
    | & w : borrowed int32 = any_l () : borrowed int32
    | & _8 : () = any_l () : ()
    | & _11 : borrowed int32 = any_l () : borrowed int32
    | & _12 : borrowed int32 = any_l () : borrowed int32
    | & _14 : bool = any_l () : bool ]
     [ return' (result:())-> (! return' {result}) ] 
end
module BranchBorrow2_MyInt_Type
  use prelude.UIntSize
  use prelude.Int
  type t_myint  =
    | C_MyInt usize
    
  function any_l (_ : 'b) : 'a
  let rec t_myint (input:t_myint) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_MyInt field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_MyInt field_0 <> input} {false} any ]
    
end
module BranchBorrow2_G
  use prelude.Intrinsic
  use BranchBorrow2_MyInt_Type as BranchBorrow2_MyInt_Type
  predicate resolve'3 (self : BranchBorrow2_MyInt_Type.t_myint) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  let rec resolve'3 (self:BranchBorrow2_MyInt_Type.t_myint) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'3 self} (! return' {result}) ]
    
  predicate resolve'2 (self : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve'3 (let (a, _) = self in a)
    /\ resolve'3 (let (_, a) = self in a)
  let rec resolve'2 (self:(BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use prelude.Borrow
  predicate resolve'1 (self : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'1 (self:borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (BranchBorrow2_MyInt_Type.t_myint)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed (BranchBorrow2_MyInt_Type.t_myint)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.UIntSize
  use prelude.Int
  let rec g (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 23 36 25] (10 : usize)) ] s1
      | s1 =  [ &_3 <- BranchBorrow2_MyInt_Type.C_MyInt ([#"../branch_borrow_2.rs" 36 34 36 35] (5 : usize)) ] s2
      | s2 =  [ &a <- (_2, _3) ] 
        (any
        [ any_ (_any:BranchBorrow2_MyInt_Type.t_myint)-> (!  [ &_2 <- _any ] 
          (any [ any_ (_any:BranchBorrow2_MyInt_Type.t_myint)-> (!  [ &_3 <- _any ] s3) ] )) ]
        )
      | s3 = Borrow.borrow_mut <(BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)> {a}
          (fun (_ret':borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)) ->
             [ &b <- _ret' ] 
             [ &a <-  ^ b ] 
            s4)
      | s4 = Borrow.borrow_final
          <BranchBorrow2_MyInt_Type.t_myint>
          {let (_, r'0) =  * b in r'0}
          {Borrow.inherit_id (Borrow.get_id b) 2}
          (fun (_ret':borrowed (BranchBorrow2_MyInt_Type.t_myint)) ->
             [ &c <- _ret' ] 
             [ &b <- { b with current = (let (l'1, _) =  * b in (l'1,  ^ c)) ; } ] 
            s5)
      | s5 = Borrow.borrow_final
          <BranchBorrow2_MyInt_Type.t_myint>
          {let (r'1, _) =  * b in r'1}
          {Borrow.inherit_id (Borrow.get_id b) 1}
          (fun (_ret':borrowed (BranchBorrow2_MyInt_Type.t_myint)) ->
             [ &d <- _ret' ] 
             [ &b <- { b with current = (let (_, l'5) =  * b in ( ^ d, l'5)) ; } ] 
            s6)
      | s6 = -{resolve'0 c}- s7
      | s7 = -{resolve'0 d}- s8
      | s8 = -{resolve'1 b}- s9
      | s9 = -{resolve'2 a}- s10
      | s10 =  [ &_0 <- [#"../branch_borrow_2.rs" 35 11 43 1] () ] s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint) = any_l () : (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)
    | & _2 : BranchBorrow2_MyInt_Type.t_myint = any_l () : BranchBorrow2_MyInt_Type.t_myint
    | & _3 : BranchBorrow2_MyInt_Type.t_myint = any_l () : BranchBorrow2_MyInt_Type.t_myint
    | & b : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint) = any_l () : borrowed (BranchBorrow2_MyInt_Type.t_myint, BranchBorrow2_MyInt_Type.t_myint)
    | & c : borrowed (BranchBorrow2_MyInt_Type.t_myint) = any_l () : borrowed (BranchBorrow2_MyInt_Type.t_myint)
    | & d : borrowed (BranchBorrow2_MyInt_Type.t_myint) = any_l () : borrowed (BranchBorrow2_MyInt_Type.t_myint) ]
     [ return' (result:())-> (! return' {result}) ] 
end
module BranchBorrow2_H
  use prelude.Intrinsic
  use prelude.Borrow
  use prelude.Int32
  predicate resolve'0 (self : borrowed int32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  let rec resolve'0 (self:borrowed int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.Int
  let rec h (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [#"../branch_borrow_2.rs" 46 16 46 18] (10 : int32) ] s1
      | s1 =  [ &b <- [#"../branch_borrow_2.rs" 47 16 47 18] (10 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &x <- _ret' ]  [ &a <-  ^ x ] s3)
      | s3 = Borrow.borrow_mut <int32> {b} (fun (_ret':borrowed int32) ->  [ &y <- _ret' ]  [ &b <-  ^ y ] s4)
      | s4 = any [ br0 -> {false} (! bb2) | br1 -> {true} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 y}- s1
      | s1 =  [ &x <- { x with current = ([#"../branch_borrow_2.rs" 53 13 53 14] (5 : int32)) ; } ] s2
      | s2 =  [ &w <- x ] (any [ any_ (_any:borrowed int32)-> (!  [ &x <- _any ] s3) ] )
      | s3 =  [ &_6 <- [#"../branch_borrow_2.rs" 52 12 55 5] () ] s4
      | s4 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 x}- s1
      | s1 =  [ &y <- { y with current = ([#"../branch_borrow_2.rs" 56 13 56 14] (6 : int32)) ; } ] s2
      | s2 = Borrow.borrow_final <int32> { * y} {Borrow.get_id y}
          (fun (_ret':borrowed int32) ->  [ &_9 <- _ret' ]  [ &y <- { y with current = ( ^ _9) ; } ] s3)
      | s3 =  [ &w <- _9 ] (any [ any_ (_any:borrowed int32)-> (!  [ &_9 <- _any ] s4) ] )
      | s4 =  [ &_6 <- [#"../branch_borrow_2.rs" 55 11 60 5] () ] s5
      | s5 = bb3 ]
      
    | bb3 = s0
      [ s0 = -{resolve'0 w}- s1
      | s1 =  [ &_0 <- [#"../branch_borrow_2.rs" 45 11 68 1] () ] s2
      | s2 = -{resolve'0 y}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & a : int32 = any_l () : int32
    | & b : int32 = any_l () : int32
    | & x : borrowed int32 = any_l () : borrowed int32
    | & y : borrowed int32 = any_l () : borrowed int32
    | & w : borrowed int32 = any_l () : borrowed int32
    | & _6 : () = any_l () : ()
    | & _9 : borrowed int32 = any_l () : borrowed int32 ]
     [ return' (result:())-> (! return' {result}) ] 
end
