
module BranchBorrow2_F
  let%span sbranch_borrow_20 = "../branch_borrow_2.rs" 13 10 13 11
  
  let%span sbranch_borrow_21 = "../branch_borrow_2.rs" 4 16 4 18
  
  let%span sbranch_borrow_22 = "../branch_borrow_2.rs" 5 16 5 18
  
  let%span sbranch_borrow_23 = "../branch_borrow_2.rs" 6 16 6 18
  
  let%span sbranch_borrow_24 = "../branch_borrow_2.rs" 23 17 23 18
  
  let%span sbranch_borrow_25 = "../branch_borrow_2.rs" 19 17 19 18
  
  let%span sbranch_borrow_26 = "../branch_borrow_2.rs" 15 17 15 18
  
  let%span sbranch_borrow_27 = "../branch_borrow_2.rs" 28 9 28 10
  
  let%span sbranch_borrow_28 = "../branch_borrow_2.rs" 30 17 30 18
  
  let%span sbranch_borrow_29 = "../branch_borrow_2.rs" 30 4 30 19
  
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span10]  ^ self =  * self
  
  use prelude.prelude.Int
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sbranch_borrow_21] (10 : int32) ] s1
      | s1 =  [ &b <- [%#sbranch_borrow_22] (10 : int32) ] s2
      | s2 =  [ &c <- [%#sbranch_borrow_23] (10 : int32) ] s3
      | s3 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &x <- _ret' ]  [ &a <-  ^ x ] s4)
      | s4 = Borrow.borrow_mut <int32> {b} (fun (_ret':borrowed int32) ->  [ &y <- _ret' ]  [ &b <-  ^ y ] s5)
      | s5 = Borrow.borrow_mut <int32> {c} (fun (_ret':borrowed int32) ->  [ &z <- _ret' ]  [ &c <-  ^ z ] s6)
      | s6 = any
        [ br0 -> {([%#sbranch_borrow_20] (3 : int32)) = 1} (! bb2)
        | br1 -> {([%#sbranch_borrow_20] (3 : int32)) = 2} (! bb3)
        | default -> (! bb12) ]
         ]
      
    | bb12 = s0 [ s0 = -{resolve'0 y}- s1 | s1 = -{resolve'0 x}- s2 | s2 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &z <- { z with current = ([%#sbranch_borrow_24] (8 : int32)) ; } ] s1
      | s1 = Borrow.borrow_final <int32> { * z} {Borrow.get_id z}
          (fun (_ret':borrowed int32) ->  [ &_12 <- _ret' ]  [ &z <- { z with current = ( ^ _12) ; } ] s2)
      | s2 =  [ &w <- _12 ] (any [ any_ (_any:borrowed int32)-> (!  [ &_12 <- _any ] s3) ] )
      | s3 = bb6 ]
      
    | bb3 = bb5
    | bb5 = s0
      [ s0 = -{resolve'0 z}- s1
      | s1 =  [ &y <- { y with current = ([%#sbranch_borrow_25] (7 : int32)) ; } ] s2
      | s2 = Borrow.borrow_final <int32> { * y} {Borrow.get_id y}
          (fun (_ret':borrowed int32) ->  [ &_11 <- _ret' ]  [ &y <- { y with current = ( ^ _11) ; } ] s3)
      | s3 =  [ &w <- _11 ] (any [ any_ (_any:borrowed int32)-> (!  [ &_11 <- _any ] s4) ] )
      | s4 = bb6 ]
      
    | bb2 = bb4
    | bb4 = s0
      [ s0 = -{resolve'0 z}- s1
      | s1 = -{resolve'0 y}- s2
      | s2 =  [ &x <- { x with current = ([%#sbranch_borrow_26] (6 : int32)) ; } ] s3
      | s3 =  [ &w <- x ] (any [ any_ (_any:borrowed int32)-> (!  [ &x <- _any ] s4) ] )
      | s4 = bb6 ]
      
    | bb6 = s0
      [ s0 =  [ &w <- { w with current = ([%#sbranch_borrow_27] (5 : int32)) ; } ] s1
      | s1 = -{resolve'0 w}- s2
      | s2 = -{resolve'0 z}- s3
      | s3 = -{resolve'0 y}- s4
      | s4 = Int32.eq {c} {[%#sbranch_borrow_28] (5 : int32)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s5)
      | s5 = any [ br0 -> {_14 = false} (! bb8) | br1 -> {_14} (! bb7) ]  ]
      
    | bb7 = return' {_0}
    | bb8 = {[%#sbranch_borrow_29] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & c : int32 = any_l ()
    | & x : borrowed int32 = any_l ()
    | & y : borrowed int32 = any_l ()
    | & z : borrowed int32 = any_l ()
    | & w : borrowed int32 = any_l ()
    | & _11 : borrowed int32 = any_l ()
    | & _12 : borrowed int32 = any_l ()
    | & _14 : bool = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module BranchBorrow2_MyInt_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_myint  =
    | C_MyInt usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_myint (input:t_myint) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_MyInt field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_MyInt field_0 <> input} {false} any ]
    
end
module BranchBorrow2_G
  let%span sbranch_borrow_20 = "../branch_borrow_2.rs" 36 23 36 25
  
  let%span sbranch_borrow_21 = "../branch_borrow_2.rs" 36 34 36 35
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 17 8 17 60
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use BranchBorrow2_MyInt_Type as MyInt'0
  
  predicate resolve'3 (self : MyInt'0.t_myint) =
    [%#span2] true
  
  predicate resolve'2 (self : (MyInt'0.t_myint, MyInt'0.t_myint)) =
    [%#span3] resolve'3 (let (a, _) = self in a) /\ resolve'3 (let (_, a) = self in a)
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed (MyInt'0.t_myint, MyInt'0.t_myint)) =
    [%#span4]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed (MyInt'0.t_myint)) =
    [%#span4]  ^ self =  * self
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  let rec g (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- MyInt'0.C_MyInt ([%#sbranch_borrow_20] (10 : usize)) ] s1
      | s1 =  [ &_3 <- MyInt'0.C_MyInt ([%#sbranch_borrow_21] (5 : usize)) ] s2
      | s2 =  [ &a <- (_2, _3) ] 
        (any
        [ any_ (_any:MyInt'0.t_myint)-> (!  [ &_2 <- _any ] 
          (any [ any_ (_any:MyInt'0.t_myint)-> (!  [ &_3 <- _any ] s3) ] )) ]
        )
      | s3 = Borrow.borrow_mut <(MyInt'0.t_myint, MyInt'0.t_myint)> {a}
          (fun (_ret':borrowed (MyInt'0.t_myint, MyInt'0.t_myint)) ->  [ &b <- _ret' ]  [ &a <-  ^ b ] s4)
      | s4 = Borrow.borrow_final <MyInt'0.t_myint> {let (_, r'0) =  * b in r'0} {Borrow.inherit_id (Borrow.get_id b) 2}
          (fun (_ret':borrowed (MyInt'0.t_myint)) ->
             [ &c <- _ret' ] 
             [ &b <- { b with current = (let (l'1, _) =  * b in (l'1,  ^ c)) ; } ] 
            s5)
      | s5 = Borrow.borrow_final <MyInt'0.t_myint> {let (r'1, _) =  * b in r'1} {Borrow.inherit_id (Borrow.get_id b) 1}
          (fun (_ret':borrowed (MyInt'0.t_myint)) ->
             [ &d <- _ret' ] 
             [ &b <- { b with current = (let (_, l'5) =  * b in ( ^ d, l'5)) ; } ] 
            s6)
      | s6 = -{resolve'0 c}- s7
      | s7 = -{resolve'0 d}- s8
      | s8 = -{resolve'1 b}- s9
      | s9 = -{resolve'2 a}- s10
      | s10 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & a : (MyInt'0.t_myint, MyInt'0.t_myint) = any_l ()
    | & _2 : MyInt'0.t_myint = any_l ()
    | & _3 : MyInt'0.t_myint = any_l ()
    | & b : borrowed (MyInt'0.t_myint, MyInt'0.t_myint) = any_l ()
    | & c : borrowed (MyInt'0.t_myint) = any_l ()
    | & d : borrowed (MyInt'0.t_myint) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module BranchBorrow2_H
  let%span sbranch_borrow_20 = "../branch_borrow_2.rs" 52 7 52 11
  
  let%span sbranch_borrow_21 = "../branch_borrow_2.rs" 46 16 46 18
  
  let%span sbranch_borrow_22 = "../branch_borrow_2.rs" 47 16 47 18
  
  let%span sbranch_borrow_23 = "../branch_borrow_2.rs" 53 13 53 14
  
  let%span sbranch_borrow_24 = "../branch_borrow_2.rs" 56 13 56 14
  
  let%span span5 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int32
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span5]  ^ self =  * self
  
  use prelude.prelude.Int
  
  let rec h (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#sbranch_borrow_21] (10 : int32) ] s1
      | s1 =  [ &b <- [%#sbranch_borrow_22] (10 : int32) ] s2
      | s2 = Borrow.borrow_mut <int32> {a} (fun (_ret':borrowed int32) ->  [ &x <- _ret' ]  [ &a <-  ^ x ] s3)
      | s3 = Borrow.borrow_mut <int32> {b} (fun (_ret':borrowed int32) ->  [ &y <- _ret' ]  [ &b <-  ^ y ] s4)
      | s4 = any [ br0 -> {false} (! bb2) | br1 -> {true} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 y}- s1
      | s1 =  [ &x <- { x with current = ([%#sbranch_borrow_23] (5 : int32)) ; } ] s2
      | s2 =  [ &w <- x ] (any [ any_ (_any:borrowed int32)-> (!  [ &x <- _any ] s3) ] )
      | s3 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 x}- s1
      | s1 =  [ &y <- { y with current = ([%#sbranch_borrow_24] (6 : int32)) ; } ] s2
      | s2 = Borrow.borrow_final <int32> { * y} {Borrow.get_id y}
          (fun (_ret':borrowed int32) ->  [ &_9 <- _ret' ]  [ &y <- { y with current = ( ^ _9) ; } ] s3)
      | s3 =  [ &w <- _9 ] (any [ any_ (_any:borrowed int32)-> (!  [ &_9 <- _any ] s4) ] )
      | s4 = bb3 ]
      
    | bb3 = s0 [ s0 = -{resolve'0 w}- s1 | s1 = -{resolve'0 y}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & a : int32 = any_l ()
    | & b : int32 = any_l ()
    | & x : borrowed int32 = any_l ()
    | & y : borrowed int32 = any_l ()
    | & w : borrowed int32 = any_l ()
    | & _9 : borrowed int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
