
module Modules_Nested_Nested_Type
  type t_nested  =
    | C_Test
    
  function any_l (_ : 'b) : 'a
  let rec test (input:t_nested) (ret  )= any
    [ good -> {C_Test  = input} (! ret) | bad -> {C_Test  <> input} {false} any ]
    
end
module Modules_Nested_InnerFunc
  use prelude.Intrinsic
  use Modules_Nested_Nested_Type as Modules_Nested_Nested_Type
  predicate resolve'0 [#"../modules.rs" 7 13 7 20] (self : Modules_Nested_Nested_Type.t_nested) =
    [#"../modules.rs" 7 13 7 20] match self with
      | Modules_Nested_Nested_Type.C_Test -> true
      end
  let rec resolve'0 (self:Modules_Nested_Nested_Type.t_nested) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec inner_func (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- Modules_Nested_Nested_Type.C_Test ] s1
      | s1 = -{resolve'0 _2}- s2
      | s2 =  [ &_0 <- [#"../modules.rs" 15 8 15 12] true ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l () : bool
    | & _2 : Modules_Nested_Nested_Type.t_nested = any_l () : Modules_Nested_Nested_Type.t_nested ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [#"../modules.rs" 12 14 12 28] result = true}
      (! return' {result}) ]
    
end
module Modules_Nested_Further_Another
  use prelude.Intrinsic
  let rec another (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../modules.rs" 20 12 20 17] false ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module Modules_F
  use prelude.Intrinsic
  let rec another'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  let rec inner_func'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[#"../modules.rs" 12 14 12 28] result = true} (! return' {result}) ]
    
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = inner_func'0 {[#"../modules.rs" 26 4 26 24] ()} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s1) | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = another'0 {[#"../modules.rs" 28 4 28 13] ()} (fun (_ret':bool) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../modules.rs" 25 11 29 1] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & _1 : bool = any_l () : bool | & _2 : bool = any_l () : bool ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Modules_Nested_Impl0
  
end
