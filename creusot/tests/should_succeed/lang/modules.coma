
module T_modules__nested__Nested
  type t_Nested  =
    | C_Test
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Test (input:t_Nested) (ret  )= any
    [ good -> {C_Test  = input} (! ret) | bad -> {C_Test  <> input} {false} any ]
    
end
module M_modules__nested__inner_func
  let%span smodules0 = "../modules.rs" 15 8 15 12
  
  let%span smodules1 = "../modules.rs" 12 14 12 28
  
  use prelude.prelude.Intrinsic
  
  let rec inner_func (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#smodules0] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#smodules1] result = true} (! return' {result}) ]
    
end
module M_modules__nested__further__another
  let%span smodules0 = "../modules.rs" 20 12 20 17
  
  use prelude.prelude.Intrinsic
  
  let rec another (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#smodules0] false ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module M_modules__f
  let%span smodules0 = "../modules.rs" 26 4 26 24
  
  let%span smodules1 = "../modules.rs" 28 4 28 13
  
  let%span span2 = "../modules.rs" 12 14 12 28
  
  use prelude.prelude.Intrinsic
  
  let rec another'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  let rec inner_func'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#span2] result = true} (! return' {result}) ]
    
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = inner_func'0 {[%#smodules0] ()} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = another'0 {[%#smodules1] ()} (fun (_ret':bool) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : bool = any_l () | & _2 : bool = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_modules__nested__qy123zimplqy35z0qy125z
  
end
