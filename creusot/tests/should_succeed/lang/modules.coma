module M_modules__nested__qyi3235025002392720358__resolve_coherence [#"modules.rs" 7 13 7 20] (* <nested::Nested as creusot_contracts::Resolve> *)
  let%span smodules0 = "modules.rs" 7 13 7 20
  let%span smodules1 = "modules.rs" 7 13 7 20
  
  use prelude.prelude.Borrow
  
  type t_Nested'0  =
    | C_Test'0
  
  predicate structural_resolve'0 (_1 : t_Nested'0) =
    match _1 with
      | C_Test'0 -> true
      end
  
  predicate resolve'0 [#"modules.rs" 7 13 7 20] (self : t_Nested'0) =
    [%#smodules0] match self with
      | C_Test'0 -> true
      end
  
  constant self  : t_Nested'0
  
  function resolve_coherence'0 [#"modules.rs" 7 13 7 20] (self : t_Nested'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#smodules0] structural_resolve'0 self)  -> ([%#smodules0] resolve'0 self)
end
module M_modules__nested__inner_func [#"modules.rs" 13 4 13 31]
  let%span smodules0 = "modules.rs" 15 8 15 12
  let%span smodules1 = "modules.rs" 12 14 12 28
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec inner_func'0 (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#smodules0] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ] 
    [ return' (result:bool)-> {[@expl:inner_func ensures] [%#smodules1] result = true} (! return' {result}) ]
    
end
module M_modules__nested__further__another [#"modules.rs" 19 8 19 32]
  let%span smodules0 = "modules.rs" 20 12 20 17
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec another'0 (_1:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#smodules0] false ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module M_modules__f [#"modules.rs" 25 0 25 10]
  let%span smodules0 = "modules.rs" 26 4 26 24
  let%span smodules1 = "modules.rs" 28 4 28 13
  let%span smodules2 = "modules.rs" 12 14 12 28
  
  let rec inner_func'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#smodules2] result = true} (! return' {result}) ]
    
  
  let rec another'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = inner_func'0 {[%#smodules0] ()} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = another'0 {[%#smodules1] ()} (fun (_ret':bool) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : bool = any_l () | & _2 : bool = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_modules__nested__qyi3235025002392720358__resolve_coherence__refines [#"modules.rs" 7 13 7 20] (* <nested::Nested as creusot_contracts::Resolve> *)
  let%span smodules0 = "modules.rs" 7 13 7 20
  
  use prelude.prelude.Borrow
  
  type t_Nested'0  =
    | C_Test'0
  
  predicate structural_resolve'0 (_1 : t_Nested'0) =
    match _1 with
      | C_Test'0 -> true
      end
  
  predicate inv'0 (_1 : t_Nested'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Nested'0 [inv'0 x] . inv'0 x = true
  
  predicate resolve'0 [#"modules.rs" 7 13 7 20] (self : t_Nested'0) =
    [%#smodules0] match self with
      | C_Test'0 -> true
      end
  
  goal refines : [%#smodules0] forall self : t_Nested'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
