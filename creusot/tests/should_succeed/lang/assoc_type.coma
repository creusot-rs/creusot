module M_assoc_type__uses3 [#"assoc_type.rs" 36 0 36 33]
  type t_A'0
  
  type t_Assoc'0  =
    { t_Assoc__item'0: t_A'0 }
  
  type t_Nested'0  =
    { t_Nested__item'0: t_Assoc'0 }
  
  predicate inv'2 (_1 : t_A'0)
  
  predicate inv'1 (_1 : t_Assoc'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Assoc'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Assoc__item'0 = item} -> inv'2 item
    end
  
  predicate inv'0 (_1 : t_Nested'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Nested'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Nested__item'0 = item} -> inv'1 item
    end
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec uses3'0 (_1:t_Nested'0) (return'  (ret:()))= {[@expl:uses3 '_1' type invariant] inv'0 _1}
    (! bb0 [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _1} s1 | s1 = bb1 ]  | bb1 = return' {_0} ] )
    [ & _0 : () = any_l () | & _1 : t_Nested'0 = _1 ]
     [ return' (result:())-> (! return' {result}) ] 
end
