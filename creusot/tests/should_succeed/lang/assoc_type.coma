
module AssocType_Assoc_Type
  type a'0
  type t_assoc 'u 'proj0 =
    | C_Assoc 'proj0
    
  function any_l (_ : 'b) : 'a
  let rec t_assoc < 'u > < 'proj0 > (input:t_assoc 'u 'proj0) (ret  (item:'proj0))= any
    [ good (item:'proj0)-> {C_Assoc item = input} (! ret {item})
    | bad (item:'proj0)-> {C_Assoc item <> input} {false} any ]
    
end
module AssocType_Nested_Type
  type a'0
  use AssocType_Assoc_Type as AssocType_Assoc_Type
  type t_nested 't 'proj0 =
    | C_Nested (AssocType_Assoc_Type.t_assoc 't 'proj0)
    
  function any_l (_ : 'b) : 'a
  let rec t_nested < 't > < 'proj0 > (input:t_nested 't 'proj0) (ret  (item:AssocType_Assoc_Type.t_assoc 't 'proj0))= any
    [ good (item:AssocType_Assoc_Type.t_assoc 't 'proj0)-> {C_Nested item = input} (! ret {item})
    | bad (item:AssocType_Assoc_Type.t_assoc 't 'proj0)-> {C_Nested item <> input} {false} any ]
    
end
module AssocType_Uses3
  type t
  type a'0
  use AssocType_Nested_Type as AssocType_Nested_Type
  predicate invariant'0 (self : AssocType_Nested_Type.t_nested t a'0)
  let rec invariant'0 (self:AssocType_Nested_Type.t_nested t a'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : AssocType_Nested_Type.t_nested t a'0)
  let rec inv'0 (_x:AssocType_Nested_Type.t_nested t a'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  type a'1
  axiom inv'0 : forall x : AssocType_Nested_Type.t_nested t a'0 . inv'0 x = true
  use prelude.Intrinsic
  predicate resolve'0 (self : AssocType_Nested_Type.t_nested t a'0)
  let rec resolve'0 (self:AssocType_Nested_Type.t_nested t a'0) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  let rec uses3 (_1:AssocType_Nested_Type.t_nested t a'0) (return'  (ret:()))= {inv'0 _1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- [#"../assoc_type.rs" 36 34 36 36] () ] s1
      | s1 = {[@expl:type invariant] inv'0 _1} s2
      | s2 = -{resolve'0 _1}- s3
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & _1 : AssocType_Nested_Type.t_nested t a'0 = _1 ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
