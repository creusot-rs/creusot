
module Unions_DummyUnion_Type
  use prelude.IntSize
  use prelude.UIntSize
  use prelude.Int
  type t_dummyunion  =
    | C_DummyUnion usize isize
    
  function any_l (_ : 'b) : 'a
  let rec t_dummyunion (input:t_dummyunion) (ret  (_field1:usize) (_field2:isize))= any
    [ good (_field1:usize) (_field2:isize)-> {C_DummyUnion _field1 _field2 = input} (! ret {_field1} {_field2})
    | bad (_field1:usize) (_field2:isize)-> {C_DummyUnion _field1 _field2 <> input} {false} any ]
    
end
module Unions_X
  use Unions_DummyUnion_Type as Unions_DummyUnion_Type
  use prelude.Intrinsic
  let rec x (_1:Unions_DummyUnion_Type.t_dummyunion) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../unions.rs" 10 24 10 26] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
