
module UnaryOp_F
  use prelude.Intrinsic
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ br0 -> {([#"../unary_op.rs" 5 13 5 18] false) = false} (! bb2)
        | br1 -> {[#"../unary_op.rs" 5 13 5 18] false} (! bb1) ]
         ]
      
    | bb1 = s0 [ s0 = {[#"../unary_op.rs" 5 4 5 19] false} any ] 
    | bb2 = s0 [ s0 =  [ &_0 <- [#"../unary_op.rs" 4 11 6 1] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () ]  [ return' (result:())-> (! return' {result}) ] 
end
