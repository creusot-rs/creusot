
module FloatOps_Eq_Interface
  val eq [#"../float_ops.rs" 5 0 5 19] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 4 10 4 24] result = true }
    
end
module FloatOps_Eq
  use prelude.Float64
  let rec cfg eq [#"../float_ops.rs" 5 0 5 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 4 10 4 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../float_ops.rs" 6 4 6 14] ([#"../float_ops.rs" 6 4 6 7] (1.0 : Float64.t)) .= ([#"../float_ops.rs" 6 11 6 14] (2.0 : Float64.t)));
    return _0
  }
  
end
module FloatOps_Lt_Interface
  val lt [#"../float_ops.rs" 10 0 10 19] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 9 10 9 24] result = true }
    
end
module FloatOps_Lt
  use prelude.Float64
  let rec cfg lt [#"../float_ops.rs" 10 0 10 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 9 10 9 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../float_ops.rs" 11 4 11 13] ([#"../float_ops.rs" 11 4 11 7] (1.0 : Float64.t)) .< ([#"../float_ops.rs" 11 10 11 13] (2.0 : Float64.t)));
    return _0
  }
  
end
module FloatOps_Le_Interface
  val le [#"../float_ops.rs" 15 0 15 19] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 14 10 14 24] result = true }
    
end
module FloatOps_Le
  use prelude.Float64
  let rec cfg le [#"../float_ops.rs" 15 0 15 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 14 10 14 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../float_ops.rs" 16 4 16 14] ([#"../float_ops.rs" 16 4 16 7] (1.0 : Float64.t)) .<= ([#"../float_ops.rs" 16 11 16 14] (2.0 : Float64.t)));
    return _0
  }
  
end
module FloatOps_Gt_Interface
  val gt [#"../float_ops.rs" 20 0 20 19] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 19 10 19 24] result = true }
    
end
module FloatOps_Gt
  use prelude.Float64
  let rec cfg gt [#"../float_ops.rs" 20 0 20 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 19 10 19 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../float_ops.rs" 21 4 21 13] ([#"../float_ops.rs" 21 4 21 7] (2.0 : Float64.t)) .> ([#"../float_ops.rs" 21 10 21 13] (1.0 : Float64.t)));
    return _0
  }
  
end
module FloatOps_Ge_Interface
  val ge [#"../float_ops.rs" 25 0 25 19] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 24 10 24 24] result = true }
    
end
module FloatOps_Ge
  use prelude.Float64
  let rec cfg ge [#"../float_ops.rs" 25 0 25 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 24 10 24 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../float_ops.rs" 26 4 26 14] ([#"../float_ops.rs" 26 4 26 7] (2.0 : Float64.t)) .>= ([#"../float_ops.rs" 26 11 26 14] (1.0 : Float64.t)));
    return _0
  }
  
end
module FloatOps_Neg_Interface
  val neg [#"../float_ops.rs" 30 0 30 20] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 29 10 29 24] result = true }
    
end
module FloatOps_Neg
  use prelude.Float64
  let rec cfg neg [#"../float_ops.rs" 30 0 30 20] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : bool
    ensures { [#"../float_ops.rs" 29 10 29 24] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../float_ops.rs" 31 4 31 15] ([#"../float_ops.rs" 31 4 31 8] (-2.0 : Float64.t)) .<= ([#"../float_ops.rs" 31 12 31 15] (1.0 : Float64.t)));
    return _0
  }
  
end
