
module AssocType_Assoc_Type
  type a0
  type t_assoc 'u 'proj0 =
    | C_Assoc 'proj0
    
end
module AssocType_Nested_Type
  type a0
  use AssocType_Assoc_Type as AssocType_Assoc_Type
  type t_nested 't 'proj0 =
    | C_Nested (AssocType_Assoc_Type.t_assoc 't 'proj0)
    
end
module AssocType_Uses3
  type t
  type a0
  use AssocType_Nested_Type as AssocType_Nested_Type
  predicate invariant0 (self : AssocType_Nested_Type.t_nested t a0)
  val invariant0 (self : AssocType_Nested_Type.t_nested t a0) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : AssocType_Nested_Type.t_nested t a0)
  val inv0 (_x : AssocType_Nested_Type.t_nested t a0) : bool
    ensures { result = inv0 _x }
    
  type a1
  axiom inv0 : forall x : AssocType_Nested_Type.t_nested t a0 . inv0 x = true
  predicate resolve0 (self : AssocType_Nested_Type.t_nested t a0)
  val resolve0 (self : AssocType_Nested_Type.t_nested t a0) : bool
    ensures { result = resolve0 self }
    
  let rec cfg uses3 [#"../assoc_type.rs" 36 0 36 33] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Nested_Type.t_nested t a0) : ()
    requires {inv0 _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : AssocType_Nested_Type.t_nested t a0 = _1;
  {
    goto BB0
  }
  BB0 {
    [#"../assoc_type.rs" 36 34 36 36] _0 <- ([#"../assoc_type.rs" 36 34 36 36] ());
    assert { [@expl:type invariant] inv0 _1 };
    assume { resolve0 _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
