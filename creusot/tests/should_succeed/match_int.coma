
module M_match_int__f
  let%span smatch_int0 = "../match_int.rs" 7 10 7 11
  
  let%span smatch_int1 = "../match_int.rs" 8 8 8 13
  
  let%span smatch_int2 = "../match_int.rs" 9 20 9 24
  
  let%span smatch_int3 = "../match_int.rs" 9 12 9 25
  
  let%span smatch_int4 = "../match_int.rs" 15 20 15 25
  
  let%span smatch_int5 = "../match_int.rs" 15 12 15 26
  
  let%span smatch_int6 = "../match_int.rs" 12 20 12 25
  
  let%span smatch_int7 = "../match_int.rs" 12 12 12 26
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- [%#smatch_int0] (1 : int32) ] s1
      | s1 = Int32.le {[%#smatch_int1] (0 : int32)} {_1} (fun (_ret':bool) ->  [ &_2 <- _ret' ] s2)
      | s2 = any [ br0 -> {_2 = false} (! bb1) | br1 -> {_2} (! bb3) ]  ]
      
    | bb3 = s0
      [ s0 = Int32.lt {_1} {[%#smatch_int1] (10 : int32)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb1) | br1 -> {_3} (! bb2) ]  ]
      
    | bb2 = bb6
    | bb6 = any [ br0 -> {false} (! bb7) | br1 -> {true} (! bb8) ] 
    | bb8 = bb14
    | bb7 = {[%#smatch_int3] false} any
    | bb1 = any [ br0 -> {_1 = 5} (! bb5) | br1 -> {_1 = 6} (! bb5) | default -> (! bb4) ] 
    | bb4 = any [ br0 -> {([%#smatch_int4] false) = false} (! bb12) | br1 -> {[%#smatch_int4] false} (! bb13) ] 
    | bb13 = bb14
    | bb12 = {[%#smatch_int5] false} any
    | bb5 = bb9
    | bb9 = any [ br0 -> {([%#smatch_int6] false) = false} (! bb10) | br1 -> {[%#smatch_int6] false} (! bb11) ] 
    | bb11 = bb14
    | bb14 = return' {_0}
    | bb10 = {[%#smatch_int7] false} any ]
    ) [ & _0 : () = any_l () | & _1 : int32 = any_l () | & _2 : bool = any_l () | & _3 : bool = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
