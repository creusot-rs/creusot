
module MatchInt_F
  use prelude.Intrinsic
  use prelude.Int32
  use prelude.Int
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- [#"../match_int.rs" 7 10 7 11] (1 : int32) ] s1
      | s1 = Int32.le {[#"../match_int.rs" 8 8 8 13] (0 : int32)} {_1} (fun (_ret':bool) ->  [ &_2 <- _ret' ] s2)
      | s2 = any [ br0 -> {_2 = false} (! bb1) | br1 -> {_2} (! bb4) ]  ]
      
    | bb4 = s0
      [ s0 = Int32.lt {_1} {[#"../match_int.rs" 8 8 8 13] (10 : int32)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb1) | br1 -> {_3} (! bb3) ]  ]
      
    | bb3 = s0 [ s0 = bb6 ] 
    | bb6 = s0 [ s0 = any [ br0 -> {false} (! bb7) | br1 -> {true} (! bb8) ]  ] 
    | bb8 = s0 [ s0 =  [ &_0 <- [#"../match_int.rs" 9 25 9 25] () ] s1 | s1 = bb14 ] 
    | bb7 = s0 [ s0 = {[#"../match_int.rs" 9 12 9 25] false} any ] 
    | bb1 = s0 [ s0 = any [ br0 -> {_1 = 5} (! bb5) | br1 -> {_1 = 6} (! bb5) | default -> (! bb16) ]  ] 
    | bb16 = s0 [ s0 = bb2 ] 
    | bb2 = s0
      [ s0 = any
        [ br0 -> {([#"../match_int.rs" 15 20 15 25] false) = false} (! bb12)
        | br1 -> {[#"../match_int.rs" 15 20 15 25] false} (! bb13) ]
         ]
      
    | bb13 = s0 [ s0 =  [ &_0 <- [#"../match_int.rs" 15 26 15 26] () ] s1 | s1 = bb14 ] 
    | bb12 = s0 [ s0 = {[#"../match_int.rs" 15 12 15 26] false} any ] 
    | bb5 = s0 [ s0 = bb9 ] 
    | bb9 = s0
      [ s0 = any
        [ br0 -> {([#"../match_int.rs" 12 20 12 25] false) = false} (! bb10)
        | br1 -> {[#"../match_int.rs" 12 20 12 25] false} (! bb11) ]
         ]
      
    | bb11 = s0 [ s0 =  [ &_0 <- [#"../match_int.rs" 12 26 12 26] () ] s1 | s1 = bb14 ] 
    | bb14 = s0 [ s0 = return' {_0} ] 
    | bb10 = s0 [ s0 = {[#"../match_int.rs" 12 12 12 26] false} any ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : int32 = any_l () : int32
    | & _2 : bool = any_l () : bool
    | & _3 : bool = any_l () : bool ]
     [ return' (result:())-> (! return' {result}) ] 
end
