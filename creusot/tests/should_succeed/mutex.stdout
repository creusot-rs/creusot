module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type mutex_mutexinner 't  
  type mutex_mutex 't 'i = 
    | Mutex_Mutex (mutex_mutexinner 't) 'i
    
  function mutex_mutex_Mutex_1 (self : mutex_mutex 't 'i) : 'i
  val mutex_mutex_Mutex_1 (self : mutex_mutex 't 'i) : 'i
    ensures { result = mutex_mutex_Mutex_1 self }
    
  axiom mutex_mutex_Mutex_1_acc : forall a : mutex_mutexinner 't, b : 'i . mutex_mutex_Mutex_1 (Mutex_Mutex a b : mutex_mutex 't 'i) = b
  type mutex_even  = 
    | Mutex_Even
    
  type mutex_addstwo  = 
    | Mutex_AddsTwo (mutex_mutex uint32 (mutex_even))
    
  function mutex_addstwo_AddsTwo_mutex (self : mutex_addstwo) : mutex_mutex uint32 (mutex_even)
  val mutex_addstwo_AddsTwo_mutex (self : mutex_addstwo) : mutex_mutex uint32 (mutex_even)
    ensures { result = mutex_addstwo_AddsTwo_mutex self }
    
  axiom mutex_addstwo_AddsTwo_mutex_acc : forall a : mutex_mutex uint32 (mutex_even) . mutex_addstwo_AddsTwo_mutex (Mutex_AddsTwo a : mutex_addstwo) = a
  type mutex_guardinner 't  
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
  type mutex_mutexguard 't 'i = 
    | Mutex_MutexGuard (mutex_guardinner 't) (creusotcontracts_logic_ghost_ghost 'i)
    
  function mutex_mutexguard_MutexGuard_1 (self : mutex_mutexguard 't 'i) : creusotcontracts_logic_ghost_ghost 'i
  val mutex_mutexguard_MutexGuard_1 (self : mutex_mutexguard 't 'i) : creusotcontracts_logic_ghost_ghost 'i
    ensures { result = mutex_mutexguard_MutexGuard_1 self }
    
  axiom mutex_mutexguard_MutexGuard_1_acc : forall a : mutex_guardinner 't, b : creusotcontracts_logic_ghost_ghost 'i . mutex_mutexguard_MutexGuard_1 (Mutex_MutexGuard a b : mutex_mutexguard 't 'i) = b
  type mutex_joinhandleinner 't  
  type mutex_joinhandle 't 'i = 
    | Mutex_JoinHandle (mutex_joinhandleinner 't) (creusotcontracts_logic_ghost_ghost 'i)
    
  function mutex_joinhandle_JoinHandle_1 (self : mutex_joinhandle 't 'i) : creusotcontracts_logic_ghost_ghost 'i
  val mutex_joinhandle_JoinHandle_1 (self : mutex_joinhandle 't 'i) : creusotcontracts_logic_ghost_ghost 'i
    ensures { result = mutex_joinhandle_JoinHandle_1 self }
    
  axiom mutex_joinhandle_JoinHandle_1_acc : forall a : mutex_joinhandleinner 't, b : creusotcontracts_logic_ghost_ghost 'i . mutex_joinhandle_JoinHandle_1 (Mutex_JoinHandle a b : mutex_joinhandle 't 'i) = b
  type mutex_spawnpostcond 'f = 
    | Mutex_SpawnPostCond 'f
    
  function mutex_spawnpostcond_SpawnPostCond_f (self : mutex_spawnpostcond 'f) : 'f
  val mutex_spawnpostcond_SpawnPostCond_f (self : mutex_spawnpostcond 'f) : 'f
    ensures { result = mutex_spawnpostcond_SpawnPostCond_f self }
    
  axiom mutex_spawnpostcond_SpawnPostCond_f_acc : forall a : 'f . mutex_spawnpostcond_SpawnPostCond_f (Mutex_SpawnPostCond a : mutex_spawnpostcond 'f) = a
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
end
module Mutex_FakeFnOnce_Return
  type self   
  type return'   
end
module Mutex_FakeFnOnce_Precondition_Interface
  type self   
  predicate precondition (self : self)
end
module Mutex_FakeFnOnce_Precondition
  type self   
  predicate precondition (self : self)
end
module Mutex_FakeFnOnce_Postcondition_Interface
  type self   
  clone Mutex_FakeFnOnce_Return as Return0 with type self = self
  predicate postcondition (self : self) (_2 : Return0.return')
end
module Mutex_FakeFnOnce_Postcondition
  type self   
  clone Mutex_FakeFnOnce_Return as Return0 with type self = self
  predicate postcondition (self : self) (_2 : Return0.return')
end
module Mutex_FakeFnOnce_Call_Interface
  type self   
  clone Mutex_FakeFnOnce_Return as Return0 with type self = self
  clone Mutex_FakeFnOnce_Postcondition_Interface as Postcondition0 with type self = self,
  type Return0.return' = Return0.return'
  clone Mutex_FakeFnOnce_Precondition_Interface as Precondition0 with type self = self
  val call [@cfg:stackify] (self : self) : Return0.return'
    requires {Precondition0.precondition self}
    ensures { Postcondition0.postcondition self result }
    
end
module Mutex_FakeFnOnce_Call
  type self   
  clone Mutex_FakeFnOnce_Return as Return0 with type self = self
  clone Mutex_FakeFnOnce_Postcondition as Postcondition0 with type self = self, type Return0.return' = Return0.return'
  clone Mutex_FakeFnOnce_Precondition as Precondition0 with type self = self
  val call [@cfg:stackify] (self : self) : Return0.return'
    requires {Precondition0.precondition self}
    ensures { Postcondition0.postcondition self result }
    
end
module Mutex_Impl3_Return
  type return'  = 
    ()
end
module Mutex_Impl3_Precondition_Interface
  use Type
  predicate precondition (self : Type.mutex_addstwo)
end
module Mutex_Impl3_Precondition
  use Type
  predicate precondition (self : Type.mutex_addstwo) = 
    true
end
module Mutex_Impl3_Postcondition_Interface
  use Type
  predicate postcondition (self : Type.mutex_addstwo) (_2 : ())
end
module Mutex_Impl3_Postcondition
  use Type
  predicate postcondition (self : Type.mutex_addstwo) (_2 : ()) = 
    true
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module Mutex_Impl0_Lock_Interface
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = i
  val lock [@cfg:stackify] (self : Type.mutex_mutex t i) : Type.mutex_mutexguard t i
    ensures { Type.mutex_mutex_Mutex_1 self = Model0.model (Type.mutex_mutexguard_MutexGuard_1 result) }
    
end
module Mutex_Impl0_Lock
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = i
  val lock [@cfg:stackify] (self : Type.mutex_mutex t i) : Type.mutex_mutexguard t i
    ensures { Type.mutex_mutex_Mutex_1 self = Model0.model (Type.mutex_mutexguard_MutexGuard_1 result) }
    
end
module Mutex_Inv_Inv_Interface
  type self   
  type t   
  use prelude.Prelude
  predicate inv (self : self) (x : t)
end
module Mutex_Inv_Inv
  type self   
  type t   
  use prelude.Prelude
  predicate inv (self : self) (x : t)
end
module Mutex_Impl1_Deref_Interface
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = i
  val deref [@cfg:stackify] (self : Type.mutex_mutexguard t i) : t
    ensures { Inv0.inv (Model0.model (Type.mutex_mutexguard_MutexGuard_1 self)) result }
    
end
module Mutex_Impl1_Deref
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone Mutex_Inv_Inv as Inv0 with type self = i, type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = i
  val deref [@cfg:stackify] (self : Type.mutex_mutexguard t i) : t
    ensures { Inv0.inv (Model0.model (Type.mutex_mutexguard_MutexGuard_1 self)) result }
    
end
module Mutex_Impl1_Set_Interface
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = i
  val set [@cfg:stackify] (self : borrowed (Type.mutex_mutexguard t i)) (v : t) : ()
    requires {Inv0.inv (Model0.model (Type.mutex_mutexguard_MutexGuard_1 ( * self))) v}
    
end
module Mutex_Impl1_Set
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone Mutex_Inv_Inv as Inv0 with type self = i, type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = i
  val set [@cfg:stackify] (self : borrowed (Type.mutex_mutexguard t i)) (v : t) : ()
    requires {Inv0.inv (Model0.model (Type.mutex_mutexguard_MutexGuard_1 ( * self))) v}
    
end
module Mutex_Impl2_Inv_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  predicate inv (self : Type.mutex_even) (x : uint32)
end
module Mutex_Impl2_Inv
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  predicate inv (self : Type.mutex_even) (x : uint32) = 
    mod x (2 : uint32) = (0 : uint32)
end
module Mutex_Impl2
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone Mutex_Impl2_Inv as Inv0
  clone Mutex_Inv_Inv as Inv1 with type self = Type.mutex_even, type t = uint32, predicate inv = Inv0.inv
end
module Mutex_Impl3_Call_Interface
  use Type
  val call [@cfg:stackify] (self : Type.mutex_addstwo) : ()
end
module Mutex_Impl3_Call
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.mutex_mutexguard uint32 (Type.mutex_even)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = uint32
  clone Mutex_Impl2_Inv as Inv0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.mutex_even
  clone Mutex_Impl1_Set_Interface as Set0 with type t = uint32, type i = Type.mutex_even,
  function Model0.model = Model0.model, predicate Inv0.inv = Inv0.inv
  clone Mutex_Impl1_Deref_Interface as Deref0 with type t = uint32, type i = Type.mutex_even,
  function Model0.model = Model0.model, predicate Inv0.inv = Inv0.inv
  clone Mutex_Impl0_Lock_Interface as Lock0 with type t = uint32, type i = Type.mutex_even,
  function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.mutex_addstwo
  let rec cfg call [@cfg:stackify] (self : Type.mutex_addstwo) : () = 
  var _0 : ();
  var self_1 : Type.mutex_addstwo;
  var v_2 : Type.mutex_mutexguard uint32 (Type.mutex_even);
  var _3 : Type.mutex_mutex uint32 (Type.mutex_even);
  var val'_4 : uint32;
  var _5 : uint32;
  var _6 : Type.mutex_mutexguard uint32 (Type.mutex_even);
  var _7 : bool;
  var _8 : uint32;
  var _9 : ();
  var _10 : borrowed (Type.mutex_mutexguard uint32 (Type.mutex_even));
  var _11 : uint32;
  var _12 : uint32;
  var _13 : ();
  var _14 : borrowed (Type.mutex_mutexguard uint32 (Type.mutex_even));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.mutex_addstwo_AddsTwo_mutex self_1;
    assume { Resolve0.resolve self_1 };
    v_2 <- Lock0.lock _3;
    goto BB1
  }
  BB1 {
    _6 <- v_2;
    _5 <- Deref0.deref _6;
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve val'_4 };
    val'_4 <- _5;
    assume { Resolve2.resolve _5 };
    assume { Resolve1.resolve _8 };
    _8 <- val'_4;
    _7 <- _8 < (100000 : uint32);
    switch (_7)
      | False -> goto BB5
      | _ -> goto BB3
      end
  }
  BB3 {
    _10 <- borrow_mut v_2;
    v_2 <-  ^ _10;
    assume { Resolve1.resolve _12 };
    _12 <- val'_4;
    assume { Resolve1.resolve val'_4 };
    _11 <- _12 + (2 : uint32);
    _9 <- Set0.set _10 _11;
    goto BB4
  }
  BB4 {
    _0 <- ();
    goto BB7
  }
  BB5 {
    assume { Resolve1.resolve val'_4 };
    _14 <- borrow_mut v_2;
    v_2 <-  ^ _14;
    _13 <- Set0.set _14 (0 : uint32);
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    assume { Resolve3.resolve v_2 };
    return _0
  }
  
end
module Mutex_Impl3
  use Type
  clone Mutex_Impl3_Call_Interface as Call0
  clone Mutex_Impl3_Postcondition as Postcondition0
  clone Mutex_Impl3_Precondition as Precondition0
  clone Mutex_FakeFnOnce_Precondition as Precondition1 with type self = Type.mutex_addstwo,
  predicate precondition = Precondition0.precondition
  clone Mutex_Impl3_Return as Return0
  clone Mutex_FakeFnOnce_Call_Interface as Call1 with type self = Type.mutex_addstwo,
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate Postcondition0.postcondition = Postcondition0.postcondition, type Return0.return' = Return0.return',
  val call = Call0.call
  clone Mutex_FakeFnOnce_Postcondition as Postcondition1 with type self = Type.mutex_addstwo,
  type Return0.return' = Return0.return', predicate postcondition = Postcondition0.postcondition
  clone Mutex_FakeFnOnce_Return as Return1 with type self = Type.mutex_addstwo, type return' = Return0.return'
end
module Mutex_Impl0_New_Interface
  type t   
  type i   
  use Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val new [@cfg:stackify] (val' : t) (i : i) : Type.mutex_mutex t i
    requires {Inv0.inv i val'}
    
end
module Mutex_Impl0_New
  type t   
  type i   
  use Type
  clone Mutex_Inv_Inv as Inv0 with type self = i, type t = t
  val new [@cfg:stackify] (val' : t) (i : i) : Type.mutex_mutex t i
    requires {Inv0.inv i val'}
    
end
module Mutex_Leak_Interface
  type t   
  use prelude.Prelude
  val leak [@cfg:stackify] (b : t) : borrowed t
    ensures {  * result = b }
    
end
module Mutex_Leak
  type t   
  use prelude.Prelude
  val leak [@cfg:stackify] (b : t) : borrowed t
    ensures {  * result = b }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Mutex_Spawn_Interface
  type t   
  type f   
  use Type
  clone Mutex_FakeFnOnce_Precondition_Interface as Precondition0 with type self = f
  val spawn [@cfg:stackify] (f : f) : Type.mutex_joinhandle t (Type.mutex_spawnpostcond f)
    requires {Precondition0.precondition f}
    
end
module Mutex_Spawn
  type t   
  type f   
  use Type
  clone Mutex_FakeFnOnce_Precondition as Precondition0 with type self = f
  val spawn [@cfg:stackify] (f : f) : Type.mutex_joinhandle t (Type.mutex_spawnpostcond f)
    requires {Precondition0.precondition f}
    
end
module Mutex_Impl4_Join_Interface
  type t   
  type i   
  use Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = i
  val join [@cfg:stackify] (self : Type.mutex_joinhandle t i) : Type.core_result_result t ()
    ensures { match (result) with
      | Type.Core_Result_Result_Ok v -> Inv0.inv (Model0.model (Type.mutex_joinhandle_JoinHandle_1 self)) v
      | _ -> true
      end }
    
end
module Mutex_Impl4_Join
  type t   
  type i   
  use Type
  clone Mutex_Inv_Inv as Inv0 with type self = i, type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = i
  val join [@cfg:stackify] (self : Type.mutex_joinhandle t i) : Type.core_result_result t ()
    ensures { match (result) with
      | Type.Core_Result_Result_Ok v -> Inv0.inv (Model0.model (Type.mutex_joinhandle_JoinHandle_1 self)) v
      | _ -> true
      end }
    
end
module Mutex_Impl5_Inv_Interface
  type f   
  use Type
  clone Mutex_FakeFnOnce_Return as Return0 with type self = f
  predicate inv (self : Type.mutex_spawnpostcond f) (v : Return0.return')
end
module Mutex_Impl5_Inv
  type f   
  use Type
  clone Mutex_FakeFnOnce_Return as Return0 with type self = f
  clone Mutex_FakeFnOnce_Postcondition_Interface as Postcondition0 with type self = f,
  type Return0.return' = Return0.return'
  predicate inv (self : Type.mutex_spawnpostcond f) (v : Return0.return') = 
    Postcondition0.postcondition (Type.mutex_spawnpostcond_SpawnPostCond_f self) v
end
module Mutex_Impl5
  type f   
  use Type
  clone Mutex_FakeFnOnce_Return as Return0 with type self = f
  clone Mutex_FakeFnOnce_Postcondition as Postcondition0 with type self = f, type Return0.return' = Return0.return'
  clone Mutex_Impl5_Inv as Inv0 with type f = f, type Return0.return' = Return0.return',
  predicate Postcondition0.postcondition = Postcondition0.postcondition
  clone Mutex_Inv_Inv as Inv1 with type self = Type.mutex_spawnpostcond f, type t = Return0.return',
  predicate inv = Inv0.inv
end
module Mutex_Concurrent_Interface
  val concurrent [@cfg:stackify] () : ()
end
module Mutex_Concurrent
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone Mutex_Impl3_Postcondition as Postcondition0
  clone Mutex_Impl3_Return as Return0
  clone Mutex_Impl5_Inv as Inv1 with type f = Type.mutex_addstwo, type Return0.return' = Return0.return',
  predicate Postcondition0.postcondition = Postcondition0.postcondition
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.mutex_spawnpostcond (Type.mutex_addstwo)
  clone Mutex_Impl4_Join_Interface as Join0 with type t = (), type i = Type.mutex_spawnpostcond (Type.mutex_addstwo),
  function Model0.model = Model0.model, predicate Inv0.inv = Inv1.inv
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.mutex_joinhandle () (Type.mutex_spawnpostcond (Type.mutex_addstwo))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.mutex_mutex uint32 (Type.mutex_even)
  clone Mutex_Impl3_Precondition as Precondition0
  clone Mutex_Spawn_Interface as Spawn0 with type t = (), type f = Type.mutex_addstwo,
  predicate Precondition0.precondition = Precondition0.precondition
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.mutex_addstwo
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.mutex_mutex uint32 (Type.mutex_even)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.mutex_mutex uint32 (Type.mutex_even)
  clone Mutex_Leak_Interface as Leak0 with type t = Type.mutex_mutex uint32 (Type.mutex_even)
  clone Mutex_Impl2_Inv as Inv0
  clone Mutex_Impl0_New_Interface as New0 with type t = uint32, type i = Type.mutex_even, predicate Inv0.inv = Inv0.inv
  let rec cfg concurrent [@cfg:stackify] () : () = 
  var _0 : ();
  var m_1 : Type.mutex_mutex uint32 (Type.mutex_even);
  var _2 : borrowed (Type.mutex_mutex uint32 (Type.mutex_even));
  var _3 : Type.mutex_mutex uint32 (Type.mutex_even);
  var _4 : Type.mutex_mutex uint32 (Type.mutex_even);
  var _5 : Type.mutex_even;
  var t1_6 : Type.mutex_addstwo;
  var _7 : Type.mutex_mutex uint32 (Type.mutex_even);
  var _8 : Type.mutex_mutex uint32 (Type.mutex_even);
  var j1_9 : Type.mutex_joinhandle () (Type.mutex_spawnpostcond (Type.mutex_addstwo));
  var _10 : Type.mutex_addstwo;
  var t2_11 : Type.mutex_addstwo;
  var _12 : Type.mutex_mutex uint32 (Type.mutex_even);
  var _13 : Type.mutex_mutex uint32 (Type.mutex_even);
  var j2_14 : Type.mutex_joinhandle () (Type.mutex_spawnpostcond (Type.mutex_addstwo));
  var _15 : Type.mutex_addstwo;
  var _16 : Type.core_result_result () ();
  var _17 : Type.mutex_joinhandle () (Type.mutex_spawnpostcond (Type.mutex_addstwo));
  var _18 : Type.core_result_result () ();
  var _19 : Type.mutex_joinhandle () (Type.mutex_spawnpostcond (Type.mutex_addstwo));
  {
    goto BB0
  }
  BB0 {
    _5 <- Type.Mutex_Even;
    _4 <- New0.new (0 : uint32) _5;
    goto BB1
  }
  BB1 {
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- Leak0.leak _3;
    goto BB3
  }
  BB3 {
    m_1 <-  * _2;
    assume { Resolve0.resolve _2 };
    _8 <- m_1;
    _7 <- _8;
    assume { Resolve1.resolve _8 };
    t1_6 <- Type.Mutex_AddsTwo _7;
    assume { Resolve2.resolve _10 };
    _10 <- t1_6;
    j1_9 <- Spawn0.spawn _10;
    goto BB4
  }
  BB4 {
    _13 <- m_1;
    assume { Resolve3.resolve m_1 };
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    t2_11 <- Type.Mutex_AddsTwo _12;
    assume { Resolve2.resolve _15 };
    _15 <- t2_11;
    j2_14 <- Spawn0.spawn _15;
    goto BB5
  }
  BB5 {
    assume { Resolve4.resolve _17 };
    _17 <- j1_9;
    _16 <- Join0.join _17;
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _19 };
    _19 <- j2_14;
    _18 <- Join0.join _19;
    goto BB7
  }
  BB7 {
    _0 <- ();
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Mutex_Impl0_IntoInner_Interface
  type t   
  type i   
  use Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val into_inner [@cfg:stackify] (self : Type.mutex_mutex t i) : t
    ensures { Inv0.inv (Type.mutex_mutex_Mutex_1 self) result }
    
end
module Mutex_Impl0_IntoInner
  type t   
  type i   
  use Type
  clone Mutex_Inv_Inv as Inv0 with type self = i, type t = t
  val into_inner [@cfg:stackify] (self : Type.mutex_mutex t i) : t
    ensures { Inv0.inv (Type.mutex_mutex_Mutex_1 self) result }
    
end
module Mutex_Impl0_GetMut_Interface
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone Mutex_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val get_mut [@cfg:stackify] (self : borrowed (Type.mutex_mutex t i)) : borrowed t
    ensures { forall v : (t) . Inv0.inv (Type.mutex_mutex_Mutex_1 ( ^ self)) v = true }
    ensures { Inv0.inv (Type.mutex_mutex_Mutex_1 ( * self)) ( * result) }
    
end
module Mutex_Impl0_GetMut
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone Mutex_Inv_Inv as Inv0 with type self = i, type t = t
  val get_mut [@cfg:stackify] (self : borrowed (Type.mutex_mutex t i)) : borrowed t
    ensures { forall v : (t) . Inv0.inv (Type.mutex_mutex_Mutex_1 ( ^ self)) v = true }
    ensures { Inv0.inv (Type.mutex_mutex_Mutex_1 ( * self)) ( * result) }
    
end
