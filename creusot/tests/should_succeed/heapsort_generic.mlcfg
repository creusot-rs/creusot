
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module HeapsortGeneric_HeapFragMax_Impl
  type t
  predicate invariant1 (self : t)
  val invariant1 (self : t) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : t . inv1 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : t) (_2 : t) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : t) (_2 : t) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : t) (y : t) : ()
  val eq_cmp0 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : t) (y : t) : ()
  val antisym20 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : t) (y : t) : ()
  val antisym10 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : t) (y : t) (z : t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans0 (x : t) (y : t) (z : t) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : t, y : t, z : t, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : t) : ()
  val refl0 (x : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : t) (o : t) : bool
  val gt_log0 (self : t) (o : t) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : t) (y : t) : ()
  val cmp_gt_log0 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : t) (o : t) : bool
  val ge_log0 (self : t) (o : t) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : t) (y : t) : ()
  val cmp_ge_log0 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : t) (o : t) : bool
  val lt_log0 (self : t) (o : t) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : t) (y : t) : ()
  val cmp_lt_log0 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : t) (o : t) : bool
  val le_log0 (self : t) (o : t) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : t) (y : t) : ()
  val cmp_le_log0 (x : t) (y : t) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : t, y : t . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use seq.Seq
  predicate invariant0 (self : Seq.seq t)
  val invariant0 (self : Seq.seq t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Seq.seq t)
  val inv0 (_x : Seq.seq t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Seq.seq t . inv0 x = true
  use prelude.Int
  function parent0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [#"../heapsort_generic.rs" 11 4 11 19] div (i + 1) 2 - 1
  val parent0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int
    ensures { result = parent0 i }
    
  use seq.Seq
  predicate heap_frag0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t) (start : int) (end' : int) =
    [#"../heapsort_generic.rs" 16 4 17 26] forall i : int . start <= parent0 i /\ i < end'
     -> le_log0 (Seq.get s i) (Seq.get s (parent0 i))
  val heap_frag0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t) (start : int) (end' : int) : bool
    ensures { result = heap_frag0 s start end' }
    
  constant s  : Seq.seq t
  constant i  : int
  constant end'  : int
  function heap_frag_max [#"../heapsort_generic.rs" 25 0 25 58] (s : Seq.seq t) (i : int) (end' : int) : ()
  goal vc_heap_frag_max : ([#"../heapsort_generic.rs" 25 30 25 31] inv0 s)
   -> ([#"../heapsort_generic.rs" 22 11 22 28] 0 <= i /\ i < end')
   -> ([#"../heapsort_generic.rs" 21 11 21 31] heap_frag0 s 0 end')
   -> match i > 0 with
    | True -> ((([#"../heapsort_generic.rs" 25 30 25 31] inv0 s) && ([#"../heapsort_generic.rs" 22 11 22 28] 0 <= parent0 i /\ parent0 i < end') && ([#"../heapsort_generic.rs" 21 11 21 31] heap_frag0 s 0 end')) /\ 0 <= ([#"../heapsort_generic.rs" 24 10 24 11] i) /\ ([#"../heapsort_generic.rs" 24 10 24 11] parent0 i) < ([#"../heapsort_generic.rs" 24 10 24 11] i)) /\ (([#"../heapsort_generic.rs" 23 10 23 22] le_log0 (Seq.get s (parent0 i)) (Seq.get s 0))
     -> ([#"../heapsort_generic.rs" 23 10 23 22] le_log0 (Seq.get s i) (Seq.get s 0)))
    | False -> [#"../heapsort_generic.rs" 23 10 23 22] le_log0 (Seq.get s i) (Seq.get s 0)
    end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module HeapsortGeneric_SiftDown
  type t
  use seq.Seq
  predicate invariant10 (self : Seq.seq t)
  val invariant10 (self : Seq.seq t) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : Seq.seq t)
  val inv10 (_x : Seq.seq t) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Seq.seq t . inv10 x = true
  type deep_model_ty0
  predicate invariant9 (self : Seq.seq deep_model_ty0)
  val invariant9 (self : Seq.seq deep_model_ty0) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : Seq.seq deep_model_ty0)
  val inv9 (_x : Seq.seq deep_model_ty0) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Seq.seq deep_model_ty0 . inv9 x = true
  use prelude.UIntSize
  predicate invariant8 (self : usize) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant8 (self : usize) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : usize)
  val inv8 (_x : usize) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : usize . inv8 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant7 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv7 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv7 x = true
  use prelude.Borrow
  predicate invariant6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant6 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv6 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv6 x = true
  use prelude.Slice
  predicate invariant5 (self : borrowed (slice t))
  val invariant5 (self : borrowed (slice t)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (slice t))
  val inv5 (_x : borrowed (slice t)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (slice t) . inv5 x = true
  predicate invariant4 (self : slice t)
  val invariant4 (self : slice t) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : slice t)
  val inv4 (_x : slice t) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : slice t . inv4 x = true
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv3 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv3 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv3 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv10 (shallow_model3 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max0)
  predicate invariant3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv10 (shallow_model3 self)
  val invariant3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant3 self }
    
  axiom inv3 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv3 x = true
  predicate invariant2 (self : t)
  val invariant2 (self : t) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : t . inv2 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv1 (_x : deep_model_ty0)
  val inv1 (_x : deep_model_ty0) : bool
    ensures { result = inv1 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant1 (self : deep_model_ty0)
  val invariant1 (self : deep_model_ty0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : deep_model_ty0 . inv1 x = true
  use prelude.Snapshot
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  val inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv0 x = true
  function deep_model3 (self : t) : deep_model_ty0
  val deep_model3 (self : t) : deep_model_ty0
    ensures { result = deep_model3 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    ensures { result = index_logic0 self ix }
    
  use seq.Seq
  use seq.Seq
  function deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
  val deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv3 self}
    ensures { result = deep_model1 self }
    
  axiom deep_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv3 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44] inv9 (deep_model1 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (shallow_model3 self)
   -> Seq.get (deep_model1 self) i = deep_model3 (index_logic0 self i)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (shallow_model3 self) = Seq.length (deep_model1 self))
  function parent0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [#"../heapsort_generic.rs" 11 4 11 19] div (i + 1) 2 - 1
  val parent0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int
    ensures { result = parent0 i }
    
  predicate heap_frag0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq deep_model_ty0) (start : int) (end' : int) =
    [#"../heapsort_generic.rs" 16 4 17 26] forall i : int . start <= parent0 i /\ i < end'
     -> le_log0 (Seq.get s i) (Seq.get s (parent0 i))
  val heap_frag0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq deep_model_ty0) (start : int) (end' : int) : bool
    ensures { result = heap_frag0 s start end' }
    
  predicate resolve3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve3 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed (slice t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (slice t)) : bool
    ensures { result = resolve2 self }
    
  use seq.Permut
  use prelude.Slice
  function shallow_model7 (self : slice t) : Seq.seq t
  val shallow_model7 (self : slice t) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model7 self }
    
  axiom shallow_model7_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv4 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv10 (shallow_model7 self)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model7 self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model7 self) <= UIntSize.to_int max0)
  function shallow_model6 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model7 ( * self)
  val shallow_model6 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model6 self }
    
  val swap0 (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 247 19 247 35] UIntSize.to_int a < Seq.length (shallow_model6 self)}
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 248 19 248 35] UIntSize.to_int b < Seq.length (shallow_model6 self)}
    requires {inv5 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 249 8 249 52] Permut.exchange (shallow_model7 ( ^ self)) (shallow_model6 self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
  function shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model3 ( * self)
  val shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  val deref_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : borrowed (slice t)
    requires {inv6 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] shallow_model6 result = shallow_model0 self }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] shallow_model7 ( ^ result) = shallow_model3 ( ^ self) }
    ensures { inv5 result }
    
  function deep_model2 (self : t) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 70 8 70 28] deep_model3 self
  val deep_model2 (self : t) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  val le0 (self : t) (other : t) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77] result = le_log0 (deep_model2 self) (deep_model2 other) }
    
  val lt0 (self : t) (other : t) : bool
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 33 26 33 76] result = lt_log0 (deep_model2 self) (deep_model2 other) }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model3 self
  val shallow_model5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model5 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (index : usize) : t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model5 self)}
    requires {inv7 self}
    requires {inv8 index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model5 self) result }
    ensures { inv2 result }
    
  function deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 88 8 88 28] deep_model1 ( * self)
  val deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    ensures { result = deep_model0 self }
    
  use prelude.Snapshot
  use seq.Permut
  predicate permutation_of0 (self : Seq.seq t) (o : Seq.seq t) =
    [#"../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37] Permut.permut self o 0 (Seq.length self)
  val permutation_of0 (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of0 self o }
    
  function shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model0 self
  val shallow_model4 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model4 self }
    
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model4 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  let rec cfg sift_down [#"../heapsort_generic.rs" 41 0 43 29] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (start : usize) (end' : usize) : ()
    requires {[#"../heapsort_generic.rs" 31 11 31 54] heap_frag0 (deep_model0 v) (UIntSize.to_int start + 1) (UIntSize.to_int end')}
    requires {[#"../heapsort_generic.rs" 32 11 32 24] UIntSize.to_int start < UIntSize.to_int end'}
    requires {[#"../heapsort_generic.rs" 33 11 33 27] UIntSize.to_int end' <= Seq.length (shallow_model0 v)}
    requires {[#"../heapsort_generic.rs" 41 33 41 34] inv6 v}
    ensures { [#"../heapsort_generic.rs" 34 10 34 52] heap_frag0 (deep_model1 ( ^ v)) (UIntSize.to_int start) (UIntSize.to_int end') }
    ensures { [#"../heapsort_generic.rs" 35 0 35 36] permutation_of0 (shallow_model3 ( ^ v)) (shallow_model0 v) }
    ensures { [#"../heapsort_generic.rs" 36 0 37 43] forall i : int . 0 <= i /\ i < UIntSize.to_int start \/ UIntSize.to_int end' <= i /\ i < Seq.length (shallow_model0 v)
     -> index_logic0 ( * v) i = index_logic0 ( ^ v) i }
    ensures { [#"../heapsort_generic.rs" 38 0 40 80] forall m : deep_model_ty0 . inv1 m
     -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
     -> le_log0 (Seq.get (deep_model0 v) j) m)
     -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
     -> le_log0 (Seq.get (deep_model1 ( ^ v)) j) m) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v;
  var start : usize = start;
  var end' : usize = end';
  var old_v : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var i : usize;
  var _24 : bool;
  var _26 : usize;
  var _28 : bool;
  var child : usize;
  var _31 : usize;
  var _33 : ();
  var _34 : bool;
  var _35 : usize;
  var _38 : bool;
  var _40 : t;
  var _44 : t;
  var _46 : usize;
  var _49 : bool;
  var _51 : t;
  var _55 : t;
  var _59 : ();
  var _60 : borrowed (slice t);
  var _61 : borrowed (slice t);
  var _62 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../heapsort_generic.rs" 45 16 45 31] old_v <- ([#"../heapsort_generic.rs" 45 16 45 31] Snapshot.new v);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_v };
    assume { resolve0 old_v };
    [#"../heapsort_generic.rs" 46 16 46 21] i <- start;
    goto BB2
  }
  BB2 {
    invariant { [#"../heapsort_generic.rs" 48 4 48 43] permutation_of0 (shallow_model0 v) (shallow_model1 old_v) };
    invariant { [#"../heapsort_generic.rs" 49 16 49 41] UIntSize.to_int start <= UIntSize.to_int i /\ UIntSize.to_int i < UIntSize.to_int end' };
    invariant { [#"../heapsort_generic.rs" 48 4 48 43] forall j : int . 0 <= j /\ j < UIntSize.to_int start \/ UIntSize.to_int end' <= j /\ j < Seq.length (shallow_model0 v)
     -> index_logic0 ( * Snapshot.inner old_v) j = index_logic0 ( * v) j };
    invariant { [#"../heapsort_generic.rs" 48 4 48 43] forall m : deep_model_ty0 . inv1 m
     -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
     -> le_log0 (Seq.get (deep_model0 (Snapshot.inner old_v)) j) m)
     -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
     -> le_log0 (Seq.get (deep_model0 v) j) m) };
    invariant { [#"../heapsort_generic.rs" 48 4 48 43] forall j : int . UIntSize.to_int start <= parent0 j /\ j < UIntSize.to_int end' /\ UIntSize.to_int i <> parent0 j
     -> le_log0 (Seq.get (deep_model0 v) j) (Seq.get (deep_model0 v) (parent0 j)) };
    invariant { [#"../heapsort_generic.rs" 48 4 48 43] let c = 2 * UIntSize.to_int i + 1 in c < UIntSize.to_int end' /\ UIntSize.to_int start <= parent0 (UIntSize.to_int i)
     -> le_log0 (Seq.get (deep_model0 v) c) (Seq.get (deep_model0 v) (parent0 (parent0 c))) };
    invariant { [#"../heapsort_generic.rs" 48 4 48 43] let c = 2 * UIntSize.to_int i + 2 in c < UIntSize.to_int end' /\ UIntSize.to_int start <= parent0 (UIntSize.to_int i)
     -> le_log0 (Seq.get (deep_model0 v) c) (Seq.get (deep_model0 v) (parent0 (parent0 c))) };
    goto BB3
  }
  BB3 {
    [#"../heapsort_generic.rs" 60 16 60 23] _28 <- ([#"../heapsort_generic.rs" 60 22 60 23] (2 : usize)) = ([#"../heapsort_generic.rs" 60 16 60 23] (0 : usize));
    assert { [@expl:division by zero] [#"../heapsort_generic.rs" 60 16 60 23] not _28 };
    goto BB4
  }
  BB4 {
    [#"../heapsort_generic.rs" 60 16 60 23] _26 <- end' / ([#"../heapsort_generic.rs" 60 22 60 23] (2 : usize));
    [#"../heapsort_generic.rs" 60 11 60 23] _24 <- i >= _26;
    _26 <- any usize;
    switch (_24)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    assert { [@expl:type invariant] inv6 v };
    assume { resolve3 v };
    [#"../heapsort_generic.rs" 61 12 61 18] _0 <- ([#"../heapsort_generic.rs" 61 12 61 18] ());
    goto BB23
  }
  BB6 {
    [#"../heapsort_generic.rs" 64 24 64 29] _31 <- ([#"../heapsort_generic.rs" 64 24 64 25] (2 : usize)) * i;
    [#"../heapsort_generic.rs" 64 24 64 33] child <- _31 + ([#"../heapsort_generic.rs" 64 32 64 33] (1 : usize));
    _31 <- any usize;
    [#"../heapsort_generic.rs" 65 11 65 20] _35 <- child + ([#"../heapsort_generic.rs" 65 19 65 20] (1 : usize));
    [#"../heapsort_generic.rs" 65 11 65 26] _34 <- _35 < end';
    _35 <- any usize;
    switch (_34)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    [#"../heapsort_generic.rs" 65 31 65 38] _40 <- ([#"../heapsort_generic.rs" 65 31 65 38] index0 ( * v) child);
    goto BB9
  }
  BB8 {
    goto BB14
  }
  BB9 {
    assert { [@expl:type invariant] inv2 _40 };
    assume { resolve1 _40 };
    [#"../heapsort_generic.rs" 65 43 65 52] _46 <- child + ([#"../heapsort_generic.rs" 65 51 65 52] (1 : usize));
    [#"../heapsort_generic.rs" 65 42 65 53] _44 <- ([#"../heapsort_generic.rs" 65 42 65 53] index0 ( * v) _46);
    _46 <- any usize;
    goto BB10
  }
  BB10 {
    assert { [@expl:type invariant] inv2 _44 };
    assume { resolve1 _44 };
    [#"../heapsort_generic.rs" 65 30 65 53] _38 <- ([#"../heapsort_generic.rs" 65 30 65 53] lt0 _40 _44);
    goto BB11
  }
  BB11 {
    switch (_38)
      | False -> goto BB13
      | True -> goto BB12
      end
  }
  BB12 {
    [#"../heapsort_generic.rs" 66 12 66 22] child <- child + ([#"../heapsort_generic.rs" 66 21 66 22] (1 : usize));
    [#"../heapsort_generic.rs" 66 12 66 22] _33 <- ([#"../heapsort_generic.rs" 66 12 66 22] ());
    goto BB15
  }
  BB13 {
    goto BB14
  }
  BB14 {
    [#"../heapsort_generic.rs" 67 9 67 9] _33 <- ([#"../heapsort_generic.rs" 67 9 67 9] ());
    goto BB15
  }
  BB15 {
    [#"../heapsort_generic.rs" 68 12 68 19] _51 <- ([#"../heapsort_generic.rs" 68 12 68 19] index0 ( * v) child);
    goto BB16
  }
  BB16 {
    assert { [@expl:type invariant] inv2 _51 };
    assume { resolve1 _51 };
    [#"../heapsort_generic.rs" 68 24 68 27] _55 <- ([#"../heapsort_generic.rs" 68 24 68 27] index0 ( * v) i);
    goto BB17
  }
  BB17 {
    assert { [@expl:type invariant] inv2 _55 };
    assume { resolve1 _55 };
    [#"../heapsort_generic.rs" 68 11 68 27] _49 <- ([#"../heapsort_generic.rs" 68 11 68 27] le0 _51 _55);
    goto BB18
  }
  BB18 {
    switch (_49)
      | False -> goto BB20
      | True -> goto BB19
      end
  }
  BB19 {
    assert { [@expl:type invariant] inv6 v };
    assume { resolve3 v };
    [#"../heapsort_generic.rs" 69 12 69 18] _0 <- ([#"../heapsort_generic.rs" 69 12 69 18] ());
    goto BB23
  }
  BB20 {
    [#"../heapsort_generic.rs" 71 8 71 9] _62 <- Borrow.borrow_mut ( * v);
    [#"../heapsort_generic.rs" 71 8 71 9] v <- { v with current = ( ^ _62) ; };
    assume { inv3 ( ^ _62) };
    [#"../heapsort_generic.rs" 71 8 71 24] _61 <- ([#"../heapsort_generic.rs" 71 8 71 24] deref_mut0 _62);
    _62 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB21
  }
  BB21 {
    [#"../heapsort_generic.rs" 71 8 71 9] _60 <- Borrow.borrow_final ( * _61) (Borrow.get_id _61);
    [#"../heapsort_generic.rs" 71 8 71 9] _61 <- { _61 with current = ( ^ _60) ; };
    assume { inv4 ( ^ _60) };
    [#"../heapsort_generic.rs" 71 8 71 24] _59 <- ([#"../heapsort_generic.rs" 71 8 71 24] swap0 _60 i child);
    _60 <- any borrowed (slice t);
    goto BB22
  }
  BB22 {
    assert { [@expl:type invariant] inv5 _61 };
    assume { resolve2 _61 };
    [#"../heapsort_generic.rs" 72 8 72 17] i <- child;
    goto BB2
  }
  BB23 {
    return _0
  }
  
end
module HeapsortGeneric_HeapSort
  type t
  use seq.Seq
  predicate invariant8 (self : Seq.seq t)
  val invariant8 (self : Seq.seq t) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Seq.seq t)
  val inv8 (_x : Seq.seq t) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Seq.seq t . inv8 x = true
  type deep_model_ty0
  predicate invariant7 (self : deep_model_ty0)
  val invariant7 (self : deep_model_ty0) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : deep_model_ty0)
  val inv7 (_x : deep_model_ty0) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : deep_model_ty0 . inv7 x = true
  predicate invariant6 (self : Seq.seq deep_model_ty0)
  val invariant6 (self : Seq.seq deep_model_ty0) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Seq.seq deep_model_ty0)
  val inv6 (_x : Seq.seq deep_model_ty0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq deep_model_ty0 . inv6 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate invariant5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val invariant5 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv5 x = true
  use prelude.Slice
  use prelude.Borrow
  predicate invariant4 (self : borrowed (slice t))
  val invariant4 (self : borrowed (slice t)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (slice t))
  val inv4 (_x : borrowed (slice t)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (slice t) . inv4 x = true
  predicate invariant3 (self : slice t)
  val invariant3 (self : slice t) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : slice t)
  val inv3 (_x : slice t) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : slice t . inv3 x = true
  use prelude.UIntSize
  use prelude.Int
  use prelude.UIntSize
  let constant max1  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv2 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv2 _x }
    
  function shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model3 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv2 self}
    ensures { result = shallow_model3 self }
    
  axiom shallow_model3_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv8 (shallow_model3 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model3 self) <= UIntSize.to_int max1)
  predicate invariant2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv8 (shallow_model3 self)
  val invariant2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv2 x = true
  predicate invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val invariant1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  val inv1 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) . inv1 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv7 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv7 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv7 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv7 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv7 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv7 z)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv7 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv7 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv7 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv7 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv7 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv7 x)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv7 y)
   -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use prelude.Snapshot
  predicate invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val invariant0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
  val inv0 (_x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) . inv0 x = true
  use seq.Seq
  predicate sorted_range0 [#"../heapsort_generic.rs" 77 0 77 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int) =
    [#"../heapsort_generic.rs" 78 4 80 5] forall j : int . forall i : int . l <= i /\ i < j /\ j < u
     -> le_log0 (Seq.get s i) (Seq.get s j)
  val sorted_range0 [#"../heapsort_generic.rs" 77 0 77 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int) : bool
    ensures { result = sorted_range0 s l u }
    
  use seq.Seq
  predicate sorted0 [#"../heapsort_generic.rs" 84 0 84 41] (s : Seq.seq deep_model_ty0) =
    [#"../heapsort_generic.rs" 86 8 86 35] sorted_range0 s 0 (Seq.length s)
  val sorted0 [#"../heapsort_generic.rs" 84 0 84 41] (s : Seq.seq deep_model_ty0) : bool
    ensures { result = sorted0 s }
    
  function deep_model2 (self : t) : deep_model_ty0
  val deep_model2 (self : t) : deep_model_ty0
    ensures { result = deep_model2 self }
    
  use seq.Seq
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model3 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    ensures { result = index_logic1 self ix }
    
  function deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
  val deep_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv2 self}
    ensures { result = deep_model1 self }
    
  axiom deep_model1_spec : forall self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv2 self)
   -> ([#"../../../../creusot-contracts/src/std/vec.rs" 33 4 33 44] inv6 (deep_model1 self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (shallow_model3 self)
   -> Seq.get (deep_model1 self) i = deep_model2 (index_logic1 self i)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (shallow_model3 self) = Seq.length (deep_model1 self))
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Permut
  predicate permutation_of0 (self : Seq.seq t) (o : Seq.seq t) =
    [#"../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37] Permut.permut self o 0 (Seq.length self)
  val permutation_of0 (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of0 self o }
    
  function shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model3 ( * self)
  val shallow_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model0 self }
    
  function parent0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [#"../heapsort_generic.rs" 11 4 11 19] div (i + 1) 2 - 1
  val parent0 [#"../heapsort_generic.rs" 10 0 10 24] (i : int) : int
    ensures { result = parent0 i }
    
  predicate heap_frag0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq deep_model_ty0) (start : int) (end' : int) =
    [#"../heapsort_generic.rs" 16 4 17 26] forall i : int . start <= parent0 i /\ i < end'
     -> le_log0 (Seq.get s i) (Seq.get s (parent0 i))
  val heap_frag0 [#"../heapsort_generic.rs" 15 0 15 66] (s : Seq.seq deep_model_ty0) (start : int) (end' : int) : bool
    ensures { result = heap_frag0 s start end' }
    
  function deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 88 8 88 28] deep_model1 ( * self)
  val deep_model0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq deep_model_ty0
    ensures { result = deep_model0 self }
    
  val sift_down0 [#"../heapsort_generic.rs" 41 0 43 29] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (start : usize) (end' : usize) : ()
    requires {[#"../heapsort_generic.rs" 31 11 31 54] heap_frag0 (deep_model0 v) (UIntSize.to_int start + 1) (UIntSize.to_int end')}
    requires {[#"../heapsort_generic.rs" 32 11 32 24] UIntSize.to_int start < UIntSize.to_int end'}
    requires {[#"../heapsort_generic.rs" 33 11 33 27] UIntSize.to_int end' <= Seq.length (shallow_model0 v)}
    requires {[#"../heapsort_generic.rs" 41 33 41 34] inv1 v}
    ensures { [#"../heapsort_generic.rs" 34 10 34 52] heap_frag0 (deep_model1 ( ^ v)) (UIntSize.to_int start) (UIntSize.to_int end') }
    ensures { [#"../heapsort_generic.rs" 35 0 35 36] permutation_of0 (shallow_model3 ( ^ v)) (shallow_model0 v) }
    ensures { [#"../heapsort_generic.rs" 36 0 37 43] forall i : int . 0 <= i /\ i < UIntSize.to_int start \/ UIntSize.to_int end' <= i /\ i < Seq.length (shallow_model0 v)
     -> index_logic1 ( * v) i = index_logic1 ( ^ v) i }
    ensures { [#"../heapsort_generic.rs" 38 0 40 80] forall m : deep_model_ty0 . inv7 m
     -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
     -> le_log0 (Seq.get (deep_model0 v) j) m)
     -> (forall j : int . UIntSize.to_int start <= j /\ j < UIntSize.to_int end'
     -> le_log0 (Seq.get (deep_model1 ( ^ v)) j) m) }
    
  function heap_frag_max0 [#"../heapsort_generic.rs" 25 0 25 58] (s : Seq.seq deep_model_ty0) (i : int) (end' : int) : ()
    
  axiom heap_frag_max0_def : forall s : Seq.seq deep_model_ty0, i : int, end' : int . heap_frag_max0 s i end' = ([#"../heapsort_generic.rs" 26 4 28 5] if i > 0 then
    heap_frag_max0 s (parent0 i) end'
  else
    ()
  )
  val heap_frag_max0 [#"../heapsort_generic.rs" 25 0 25 58] (s : Seq.seq deep_model_ty0) (i : int) (end' : int) : ()
    requires {[#"../heapsort_generic.rs" 21 11 21 31] heap_frag0 s 0 end'}
    requires {[#"../heapsort_generic.rs" 22 11 22 28] 0 <= i /\ i < end'}
    requires {[#"../heapsort_generic.rs" 25 30 25 31] inv6 s}
    ensures { result = heap_frag_max0 s i end' }
    
  axiom heap_frag_max0_spec : forall s : Seq.seq deep_model_ty0, i : int, end' : int . ([#"../heapsort_generic.rs" 21 11 21 31] heap_frag0 s 0 end')
   -> ([#"../heapsort_generic.rs" 22 11 22 28] 0 <= i /\ i < end')
   -> ([#"../heapsort_generic.rs" 25 30 25 31] inv6 s)
   -> ([#"../heapsort_generic.rs" 23 10 23 22] le_log0 (Seq.get s i) (Seq.get s 0))
  predicate resolve2 (self : borrowed (slice t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve2 (self : borrowed (slice t)) : bool
    ensures { result = resolve2 self }
    
  use seq.Permut
  use prelude.Slice
  function shallow_model7 (self : slice t) : Seq.seq t
  val shallow_model7 (self : slice t) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self}
    ensures { result = shallow_model7 self }
    
  axiom shallow_model7_spec : forall self : slice t . ([#"../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25] inv3 self)
   -> ([#"../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50] inv8 (shallow_model7 self)) && ([#"../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42] shallow_model7 self = Slice.id self) && ([#"../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model7 self) <= UIntSize.to_int max1)
  function shallow_model6 (self : borrowed (slice t)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 97 8 97 31] shallow_model7 ( * self)
  val shallow_model6 (self : borrowed (slice t)) : Seq.seq t
    ensures { result = shallow_model6 self }
    
  val swap0 (self : borrowed (slice t)) (a : usize) (b : usize) : ()
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 247 19 247 35] UIntSize.to_int a < Seq.length (shallow_model6 self)}
    requires {[#"../../../../creusot-contracts/src/std/slice.rs" 248 19 248 35] UIntSize.to_int b < Seq.length (shallow_model6 self)}
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/slice.rs" 249 8 249 52] Permut.exchange (shallow_model7 ( ^ self)) (shallow_model6 self) (UIntSize.to_int a) (UIntSize.to_int b) }
    
  val deref_mut0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : borrowed (slice t)
    requires {inv1 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 152 26 152 42] shallow_model6 result = shallow_model0 self }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 153 26 153 48] shallow_model7 ( ^ result) = shallow_model3 ( ^ self) }
    ensures { inv4 result }
    
  predicate resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : bool
    ensures { result = resolve1 self }
    
  function shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
   =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model0 self
  val shallow_model5 (self : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : Seq.seq t
    ensures { result = shallow_model5 self }
    
  use prelude.Snapshot
  function shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    
   =
    [#"../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48] shallow_model5 (Snapshot.inner self)
  val shallow_model1 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  function shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model3 self
  val shallow_model4 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model4 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv5 self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model4 self) }
    
  predicate resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))))
    
  val resolve0 (self : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Snapshot
  let rec cfg heap_sort [#"../heapsort_generic.rs" 93 0 95 29] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    requires {[#"../heapsort_generic.rs" 90 11 90 40] Seq.length (shallow_model0 v) < div (UIntSize.to_int max0) 2}
    requires {[#"../heapsort_generic.rs" 93 37 93 38] inv1 v}
    ensures { [#"../heapsort_generic.rs" 91 10 91 35] sorted0 (deep_model1 ( ^ v)) }
    ensures { [#"../heapsort_generic.rs" 92 0 92 36] permutation_of0 (shallow_model3 ( ^ v)) (shallow_model0 v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) = v;
  var old_v : Snapshot.snap_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var start : usize;
  var _8 : usize;
  var _10 : bool;
  var _15 : ();
  var _16 : bool;
  var _18 : ();
  var _19 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _21 : usize;
  var end' : usize;
  var _33 : bool;
  var _35 : ();
  var _36 : borrowed (slice t);
  var _37 : borrowed (slice t);
  var _38 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _42 : ();
  var _43 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    [#"../heapsort_generic.rs" 97 16 97 31] old_v <- ([#"../heapsort_generic.rs" 97 16 97 31] Snapshot.new v);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_v };
    assume { resolve0 old_v };
    [#"../heapsort_generic.rs" 99 20 99 27] _8 <- ([#"../heapsort_generic.rs" 99 20 99 27] len0 ( * v));
    goto BB2
  }
  BB2 {
    [#"../heapsort_generic.rs" 99 20 99 31] _10 <- ([#"../heapsort_generic.rs" 99 30 99 31] (2 : usize)) = ([#"../heapsort_generic.rs" 99 20 99 31] (0 : usize));
    assert { [@expl:division by zero] [#"../heapsort_generic.rs" 99 20 99 31] not _10 };
    goto BB3
  }
  BB3 {
    [#"../heapsort_generic.rs" 99 20 99 31] start <- _8 / ([#"../heapsort_generic.rs" 99 30 99 31] (2 : usize));
    _8 <- any usize;
    goto BB4
  }
  BB4 {
    invariant { [#"../heapsort_generic.rs" 100 4 100 43] permutation_of0 (shallow_model0 v) (shallow_model1 old_v) };
    invariant { [#"../heapsort_generic.rs" 101 16 101 59] heap_frag0 (deep_model0 v) (UIntSize.to_int start) (Seq.length (shallow_model0 v)) };
    invariant { [#"../heapsort_generic.rs" 102 16 102 36] UIntSize.to_int start <= div (Seq.length (shallow_model0 v)) 2 };
    goto BB5
  }
  BB5 {
    [#"../heapsort_generic.rs" 103 10 103 19] _16 <- start > ([#"../heapsort_generic.rs" 103 18 103 19] (0 : usize));
    switch (_16)
      | False -> goto BB9
      | True -> goto BB6
      end
  }
  BB6 {
    [#"../heapsort_generic.rs" 104 8 104 18] start <- start - ([#"../heapsort_generic.rs" 104 17 104 18] (1 : usize));
    [#"../heapsort_generic.rs" 105 18 105 19] _19 <- Borrow.borrow_mut ( * v);
    [#"../heapsort_generic.rs" 105 18 105 19] v <- { v with current = ( ^ _19) ; };
    assume { inv2 ( ^ _19) };
    [#"../heapsort_generic.rs" 105 28 105 35] _21 <- ([#"../heapsort_generic.rs" 105 28 105 35] len0 ( * _19));
    goto BB7
  }
  BB7 {
    [#"../heapsort_generic.rs" 105 8 105 36] _18 <- ([#"../heapsort_generic.rs" 105 8 105 36] sift_down0 _19 start _21);
    _19 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    _21 <- any usize;
    goto BB8
  }
  BB8 {
    [#"../heapsort_generic.rs" 103 20 106 5] _15 <- ([#"../heapsort_generic.rs" 103 20 106 5] ());
    goto BB4
  }
  BB9 {
    [#"../heapsort_generic.rs" 108 18 108 25] end' <- ([#"../heapsort_generic.rs" 108 18 108 25] len0 ( * v));
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    invariant { [#"../heapsort_generic.rs" 109 16 109 32] UIntSize.to_int end' <= Seq.length (shallow_model0 v) };
    invariant { [#"../heapsort_generic.rs" 109 4 109 34] permutation_of0 (shallow_model0 v) (shallow_model1 old_v) };
    invariant { [#"../heapsort_generic.rs" 111 16 111 50] heap_frag0 (deep_model0 v) 0 (UIntSize.to_int end') };
    invariant { [#"../heapsort_generic.rs" 112 16 112 60] sorted_range0 (deep_model0 v) (UIntSize.to_int end') (Seq.length (shallow_model0 v)) };
    invariant { [#"../heapsort_generic.rs" 109 4 109 34] forall j : int . forall i : int . 0 <= i /\ i < UIntSize.to_int end' /\ UIntSize.to_int end' <= j /\ j < Seq.length (shallow_model0 v)
     -> le_log0 (Seq.get (deep_model0 v) i) (Seq.get (deep_model0 v) j) };
    goto BB12
  }
  BB12 {
    [#"../heapsort_generic.rs" 115 10 115 17] _33 <- end' > ([#"../heapsort_generic.rs" 115 16 115 17] (1 : usize));
    switch (_33)
      | False -> goto BB17
      | True -> goto BB13
      end
  }
  BB13 {
    [#"../heapsort_generic.rs" 116 8 116 16] end' <- end' - ([#"../heapsort_generic.rs" 116 15 116 16] (1 : usize));
    [#"../heapsort_generic.rs" 117 8 117 9] _38 <- Borrow.borrow_mut ( * v);
    [#"../heapsort_generic.rs" 117 8 117 9] v <- { v with current = ( ^ _38) ; };
    assume { inv2 ( ^ _38) };
    [#"../heapsort_generic.rs" 117 8 117 22] _37 <- ([#"../heapsort_generic.rs" 117 8 117 22] deref_mut0 _38);
    _38 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB14
  }
  BB14 {
    [#"../heapsort_generic.rs" 117 8 117 9] _36 <- Borrow.borrow_final ( * _37) (Borrow.get_id _37);
    [#"../heapsort_generic.rs" 117 8 117 9] _37 <- { _37 with current = ( ^ _36) ; };
    assume { inv3 ( ^ _36) };
    [#"../heapsort_generic.rs" 117 8 117 22] _35 <- ([#"../heapsort_generic.rs" 117 8 117 22] swap0 _36 ([#"../heapsort_generic.rs" 117 15 117 16] (0 : usize)) end');
    _36 <- any borrowed (slice t);
    goto BB15
  }
  BB15 {
    assert { [@expl:type invariant] inv4 _37 };
    assume { resolve2 _37 };
    assert { [@expl:assertion] [#"../heapsort_generic.rs" 119 12 119 59] let _ = heap_frag_max0 (deep_model0 v) 0 (UIntSize.to_int end') in forall j : int . forall i : int . 0 <= i /\ i < UIntSize.to_int end' /\ UIntSize.to_int end' <= j /\ j < Seq.length (shallow_model0 v)
     -> le_log0 (Seq.get (deep_model0 v) i) (Seq.get (deep_model0 v) j) };
    [#"../heapsort_generic.rs" 123 18 123 19] _43 <- Borrow.borrow_mut ( * v);
    [#"../heapsort_generic.rs" 123 18 123 19] v <- { v with current = ( ^ _43) ; };
    assume { inv2 ( ^ _43) };
    [#"../heapsort_generic.rs" 123 8 123 28] _42 <- ([#"../heapsort_generic.rs" 123 8 123 28] sift_down0 _43 ([#"../heapsort_generic.rs" 123 21 123 22] (0 : usize)) end');
    _43 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB16
  }
  BB16 {
    [#"../heapsort_generic.rs" 115 18 124 5] _15 <- ([#"../heapsort_generic.rs" 115 18 124 5] ());
    goto BB11
  }
  BB17 {
    assert { [@expl:type invariant] inv1 v };
    assume { resolve1 v };
    [#"../heapsort_generic.rs" 115 4 124 5] _0 <- ([#"../heapsort_generic.rs" 115 4 124 5] ());
    return _0
  }
  
end
