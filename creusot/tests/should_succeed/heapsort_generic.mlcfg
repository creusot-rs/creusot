
module HeapsortGeneric_Parent_Stub
  use mach.int.Int
  val ghost function parent (i : int) : int
end
module HeapsortGeneric_Parent_Interface
  use mach.int.Int
  val ghost function parent (i : int) : int
end
module HeapsortGeneric_Parent
  use mach.int.Int
  let rec ghost function parent [#"../heapsort_generic.rs" 7 0 7 24] (i : int) : int = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../heapsort_generic.rs" 8 4 8 19] div (i + 1) 2 - 1
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  val ghost function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  val ghost function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  val ghost function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  val ghost predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  val ghost predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  let rec ghost predicate le_log (self : self) (o : self) = [@vc:do_not_keep_trace] [@vc:sp]
    let a = CmpLog0.cmp_log self o in pure {a <> Core_Cmp_Ordering_Type.C_Greater}
end
module HeapsortGeneric_HeapFrag_Stub
  type t
  use seq.Seq
  use mach.int.Int
  val ghost predicate heap_frag (s : Seq.seq t) (start : int) (end' : int)
end
module HeapsortGeneric_HeapFrag_Interface
  type t
  use seq.Seq
  use mach.int.Int
  val ghost predicate heap_frag (s : Seq.seq t) (start : int) (end' : int)
end
module HeapsortGeneric_HeapFrag
  type t
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  clone HeapsortGeneric_Parent_Stub as Parent0
  let rec ghost predicate heap_frag [#"../heapsort_generic.rs" 12 0 12 66] (s : Seq.seq t) (start : int) (end' : int)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../heapsort_generic.rs" 13 4 14 26] pure {forall i : int . start <= Parent0.parent i /\ i < end' -> LeLog0.le_log (Seq.get s i) (Seq.get s (Parent0.parent i))}
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  val ghost function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  val ghost function cmp_le_log (x : self) (y : self) : ()
    ensures { LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  val ghost function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  val ghost predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  val ghost predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  let rec ghost predicate lt_log (self : self) (o : self) = [@vc:do_not_keep_trace] [@vc:sp]
    let a = CmpLog0.cmp_log self o in pure {a = Core_Cmp_Ordering_Type.C_Less}
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  val ghost function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  val ghost function cmp_lt_log (x : self) (y : self) : ()
    ensures { LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  val ghost function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  val ghost predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  val ghost predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  let rec ghost predicate ge_log (self : self) (o : self) = [@vc:do_not_keep_trace] [@vc:sp]
    let a = CmpLog0.cmp_log self o in pure {a <> Core_Cmp_Ordering_Type.C_Less}
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with type self = self
  val ghost function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with type self = self
  val ghost function cmp_ge_log (x : self) (y : self) : ()
    ensures { GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with type self = self
  val ghost function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  val ghost predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  val ghost predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  let rec ghost predicate gt_log (self : self) (o : self) = [@vc:do_not_keep_trace] [@vc:sp]
    let a = CmpLog0.cmp_log self o in pure {a = Core_Cmp_Ordering_Type.C_Greater}
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with type self = self
  val ghost function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with type self = self
  val ghost function cmp_gt_log (x : self) (y : self) : ()
    ensures { GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with type self = self
  val ghost function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function refl (x : self) : ()
    ensures { CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {CmpLog0.cmp_log x y = o}
    requires {CmpLog0.cmp_log y z = o}
    ensures { CmpLog0.cmp_log x z = o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function antisym1 (x : self) (y : self) : ()
    requires {CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function antisym2 (x : self) (y : self) : ()
    requires {CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function eq_cmp (x : self) (y : self) : ()
    ensures { (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  val ghost function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module HeapsortGeneric_HeapFragMax_Stub
  type t
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Stub as HeapFrag0 with type t = t
  val ghost function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
end
module HeapsortGeneric_HeapFragMax_Interface
  type t
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Stub as HeapFrag0 with type t = t
  val ghost function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
    requires {[#"../heapsort_generic.rs" 18 11 18 31] HeapFrag0.heap_frag s 0 end'}
    requires {[#"../heapsort_generic.rs" 19 11 19 28] 0 <= i /\ i < end'}
    ensures { [#"../heapsort_generic.rs" 20 10 20 22] LeLog0.le_log (Seq.get s i) (Seq.get s 0) }
    
end
module HeapsortGeneric_HeapFragMax
  type t
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Stub as HeapFrag0 with type t = t
  clone HeapsortGeneric_Parent_Stub as Parent0
  val ghost function heap_frag_max [#"../heapsort_generic.rs" 22 0 22 58] (s : Seq.seq t) (i : int) (end' : int) : ()
  axiom heap_frag_max_spec : forall s : Seq.seq t, i : int, end' : int . ([#"../heapsort_generic.rs" 18 11 18 31] HeapFrag0.heap_frag s 0 end') -> ([#"../heapsort_generic.rs" 19 11 19 28] 0 <= i /\ i < end') -> ([#"../heapsort_generic.rs" 20 10 20 22] LeLog0.le_log (Seq.get s i) (Seq.get s 0))
end
module HeapsortGeneric_HeapFragMax_Impl
  type t
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t, val GtLog0.gt_log = GtLog0.gt_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t, val GeLog0.ge_log = GeLog0.ge_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t, val LtLog0.lt_log = LtLog0.lt_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t, val LeLog0.le_log = LeLog0.le_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_Parent as Parent0
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, val Parent0.parent = Parent0.parent,
    val LeLog0.le_log = LeLog0.le_log
  let rec ghost function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
    requires {[#"../heapsort_generic.rs" 18 11 18 31] HeapFrag0.heap_frag s 0 end'}
    requires {[#"../heapsort_generic.rs" 19 11 19 28] 0 <= i /\ i < end'}
    ensures { [#"../heapsort_generic.rs" 20 10 20 22] LeLog0.le_log (Seq.get s i) (Seq.get s 0) }
    variant {[#"../heapsort_generic.rs" 21 10 21 11] i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../heapsort_generic.rs" 23 4 25 5] if i > 0 then let b' = Parent0.parent i in heap_frag_max s b' end' else ()
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val ghost function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  val ghost function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  let rec ghost function model (self : borrowed t) : ModelTy0.modelTy = [@vc:do_not_keep_trace] [@vc:sp]
    Model0.model ( * self)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf_Stub
  type t
  use seq.Seq
  val ghost predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface
  type t
  use seq.Seq
  val ghost predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf
  type t
  use seq.Seq
  use seq.Permut
  let rec ghost predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = [@vc:do_not_keep_trace] [@vc:sp]
    Permut.permut self o 0 (Seq.length self)
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  val ghost predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Std1_Cmp_Ord_Lt_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  val lt [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Cmp_Ord_Lt
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  val lt [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Cmp_Ord_Le_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  val le [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Cmp_Ord_Le
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  val le [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model_Stub
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
    ensures { Seq.length result <= UInt64.to_int (18446744073709551615 : usize) }
    ensures { result = Slice.id self }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Slice
  val ghost function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Stub as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Ghost_Impl1_Inner_Stub
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl1_Inner_Interface
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl1_Inner
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  let rec ghost function inner (self : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost t) : t
   = [@vc:do_not_keep_trace] [@vc:sp]
    CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 self
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  val ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  let rec ghost predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    pure {Seq.get seq (UInt64.to_int self) = out}
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module HeapsortGeneric_SiftDown_Interface
  type t
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Stub as PermutationOf0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone HeapsortGeneric_HeapFrag_Stub as HeapFrag0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val sift_down [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (start : usize) (end' : usize) : ()
    requires {[#"../heapsort_generic.rs" 28 11 28 43] HeapFrag0.heap_frag (Model0.model ( * v)) (UInt64.to_int start + 1) (UInt64.to_int end')}
    requires {[#"../heapsort_generic.rs" 29 11 29 24] UInt64.to_int start < UInt64.to_int end'}
    requires {[#"../heapsort_generic.rs" 30 11 30 30] UInt64.to_int end' <= Seq.length (Model0.model ( * v))}
    ensures { [#"../heapsort_generic.rs" 31 10 31 38] HeapFrag0.heap_frag (Model0.model ( ^ v)) (UInt64.to_int start) (UInt64.to_int end') }
    ensures { [#"../heapsort_generic.rs" 32 10 32 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { [#"../heapsort_generic.rs" 33 0 34 47] forall i : int . 0 <= i /\ i < UInt64.to_int start \/ UInt64.to_int end' <= i /\ i < Seq.length (Model1.model v) -> Seq.get (Model1.model v) i = Seq.get (Model0.model ( ^ v)) i }
    ensures { [#"../heapsort_generic.rs" 35 0 37 68] forall m : t . (forall j : int . UInt64.to_int start <= j /\ j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model1.model v) j) m) -> (forall j : int . UInt64.to_int start <= j /\ j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model0.model ( ^ v)) j) m) }
    
end
module HeapsortGeneric_SiftDown
  type t
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t, val GtLog0.gt_log = GtLog0.gt_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t, val GeLog0.ge_log = GeLog0.ge_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t, val LtLog0.lt_log = LtLog0.lt_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t, val LeLog0.le_log = LeLog0.le_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone HeapsortGeneric_Parent as Parent0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model0.model
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, val Parent0.parent = Parent0.parent,
    val LeLog0.le_log = LeLog0.le_log
  use prelude.Slice
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq t,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model2.model
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = seq t
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t, val Model0.model = Model3.model,
    val Model1.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model2.model, val Model1.model = Model0.model
  clone CreusotContracts_Std1_Cmp_Ord_Le_Interface as Le0 with type self = t, val LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Std1_Cmp_Ord_Lt_Interface as Lt0 with type self = t, val LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, val Model0.model = Model0.model,
    val InBounds0.in_bounds = InBounds0.in_bounds, val HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Ghost_Impl1_Inner as Inner0 with type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg sift_down [@cfg:stackify] [#"../heapsort_generic.rs" 38 0 38 62] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (start : usize) (end' : usize) : ()
    requires {[#"../heapsort_generic.rs" 28 11 28 43] HeapFrag0.heap_frag (Model0.model ( * v)) (UInt64.to_int start + 1) (UInt64.to_int end')}
    requires {[#"../heapsort_generic.rs" 29 11 29 24] UInt64.to_int start < UInt64.to_int end'}
    requires {[#"../heapsort_generic.rs" 30 11 30 30] UInt64.to_int end' <= Seq.length (Model0.model ( * v))}
    ensures { [#"../heapsort_generic.rs" 31 10 31 38] HeapFrag0.heap_frag (Model0.model ( ^ v)) (UInt64.to_int start) (UInt64.to_int end') }
    ensures { [#"../heapsort_generic.rs" 32 10 32 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { [#"../heapsort_generic.rs" 33 0 34 47] forall i : int . 0 <= i /\ i < UInt64.to_int start \/ UInt64.to_int end' <= i /\ i < Seq.length (Model1.model v) -> Seq.get (Model1.model v) i = Seq.get (Model0.model ( ^ v)) i }
    ensures { [#"../heapsort_generic.rs" 35 0 37 68] forall m : t . (forall j : int . UInt64.to_int start <= j /\ j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model1.model v) j) m) -> (forall j : int . UInt64.to_int start <= j /\ j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model0.model ( ^ v)) j) m) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var start_2 : usize;
  var end'_3 : usize;
  var old_v_11 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _13 : ();
  var i_14 : usize;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : bool;
  var _27 : usize;
  var _28 : usize;
  var _29 : usize;
  var _30 : bool;
  var _31 : ();
  var child_32 : usize;
  var _33 : usize;
  var _34 : usize;
  var _35 : ();
  var _36 : bool;
  var _37 : bool;
  var _38 : usize;
  var _39 : usize;
  var _40 : usize;
  var _41 : bool;
  var _42 : t;
  var _43 : t;
  var _44 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _45 : usize;
  var _46 : t;
  var _47 : t;
  var _48 : t;
  var _49 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _50 : usize;
  var _51 : usize;
  var _52 : ();
  var _53 : bool;
  var _54 : t;
  var _55 : t;
  var _56 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _57 : usize;
  var _58 : t;
  var _59 : t;
  var _60 : t;
  var _61 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _62 : usize;
  var _63 : ();
  var _64 : ();
  var _65 : borrowed (seq t);
  var _66 : borrowed (seq t);
  var _67 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _68 : usize;
  var _69 : usize;
  var _70 : usize;
  {
    v_1 <- v;
    start_2 <- start;
    end'_3 <- end';
    goto BB0
  }
  BB0 {
    _13 <- ();
    old_v_11 <- ([#"../heapsort_generic.rs" 39 16 39 28] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost v_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_v_11 };
    i_14 <- start_2;
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../heapsort_generic.rs" 42 29 42 49]  ^ v_1 =  ^ Inner0.inner old_v_11 };
    invariant permutation { [#"../heapsort_generic.rs" 43 29 43 64] PermutationOf0.permutation_of (Model1.model v_1) (Model1.model (Inner0.inner old_v_11)) };
    invariant i_bounds { [#"../heapsort_generic.rs" 44 26 44 51] UInt64.to_int start_2 <= UInt64.to_int i_14 /\ UInt64.to_int i_14 < UInt64.to_int end'_3 };
    invariant unchanged { [#"../heapsort_generic.rs" 42 4 42 51] forall j : int . 0 <= j /\ j < UInt64.to_int start_2 \/ UInt64.to_int end'_3 <= j /\ j < Seq.length (Model1.model v_1) -> Seq.get (Model1.model (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_v_11)) j = Seq.get (Model1.model v_1) j };
    invariant keep_bound { [#"../heapsort_generic.rs" 42 4 42 51] forall m : t . (forall j : int . UInt64.to_int start_2 <= j /\ j < UInt64.to_int end'_3 -> LeLog0.le_log (Seq.get (Model1.model (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_v_11)) j) m) -> (forall j : int . UInt64.to_int start_2 <= j /\ j < UInt64.to_int end'_3 -> LeLog0.le_log (Seq.get (Model1.model v_1) j) m) };
    invariant heap { [#"../heapsort_generic.rs" 42 4 42 51] forall j : int . UInt64.to_int start_2 <= Parent0.parent j /\ j < UInt64.to_int end'_3 /\ UInt64.to_int i_14 <> Parent0.parent j -> LeLog0.le_log (Seq.get (Model1.model v_1) j) (Seq.get (Model1.model v_1) (Parent0.parent j)) };
    invariant hole_left { [#"../heapsort_generic.rs" 42 4 42 51] let c = 2 * UInt64.to_int i_14 + 1 in c < UInt64.to_int end'_3 /\ UInt64.to_int start_2 <= Parent0.parent (UInt64.to_int i_14) -> LeLog0.le_log (Seq.get (Model1.model v_1) c) (Seq.get (Model1.model v_1) (Parent0.parent (Parent0.parent c))) };
    invariant hole_right { [#"../heapsort_generic.rs" 42 4 42 51] let c = 2 * UInt64.to_int i_14 + 2 in c < UInt64.to_int end'_3 /\ UInt64.to_int start_2 <= Parent0.parent (UInt64.to_int i_14) -> LeLog0.le_log (Seq.get (Model1.model v_1) c) (Seq.get (Model1.model v_1) (Parent0.parent (Parent0.parent c))) };
    _27 <- i_14;
    _29 <- end'_3;
    _30 <- ([#"../heapsort_generic.rs" 55 16 55 23] (2 : usize) = (0 : usize));
    assert { [#"../heapsort_generic.rs" 55 16 55 23] not _30 };
    goto BB3
  }
  BB3 {
    _28 <- ([#"../heapsort_generic.rs" 55 16 55 23] _29 / (2 : usize));
    _26 <- ([#"../heapsort_generic.rs" 55 11 55 23] _27 >= _28);
    switch (_26)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    goto BB22
  }
  BB5 {
    _25 <- ();
    _34 <- i_14;
    _33 <- ([#"../heapsort_generic.rs" 59 24 59 29] (2 : usize) * _34);
    child_32 <- ([#"../heapsort_generic.rs" 59 24 59 33] _33 + (1 : usize));
    _39 <- child_32;
    _38 <- ([#"../heapsort_generic.rs" 60 11 60 20] _39 + (1 : usize));
    _40 <- end'_3;
    _37 <- ([#"../heapsort_generic.rs" 60 11 60 26] _38 < _40);
    switch (_37)
      | False -> goto BB6
      | True -> goto BB7
      end
  }
  BB6 {
    _36 <- false;
    goto BB8
  }
  BB7 {
    _44 <-  * v_1;
    _45 <- child_32;
    _43 <- ([#"../heapsort_generic.rs" 60 30 60 38] Index0.index _44 _45);
    goto BB9
  }
  BB8 {
    switch (_36)
      | False -> goto BB13
      | True -> goto BB12
      end
  }
  BB9 {
    _42 <- _43;
    assume { Resolve2.resolve _43 };
    _49 <-  * v_1;
    _51 <- child_32;
    _50 <- ([#"../heapsort_generic.rs" 60 45 60 54] _51 + (1 : usize));
    _48 <- ([#"../heapsort_generic.rs" 60 43 60 55] Index0.index _49 _50);
    goto BB10
  }
  BB10 {
    _47 <- _48;
    assume { Resolve2.resolve _48 };
    _46 <- _47;
    assume { Resolve2.resolve _47 };
    _41 <- ([#"../heapsort_generic.rs" 60 30 60 56] Lt0.lt _42 _46);
    goto BB11
  }
  BB11 {
    _36 <- _41;
    _41 <- any bool;
    goto BB8
  }
  BB12 {
    child_32 <- ([#"../heapsort_generic.rs" 61 12 61 22] child_32 + (1 : usize));
    _35 <- ();
    goto BB14
  }
  BB13 {
    _35 <- ();
    goto BB14
  }
  BB14 {
    _56 <-  * v_1;
    _57 <- child_32;
    _55 <- ([#"../heapsort_generic.rs" 63 11 63 19] Index0.index _56 _57);
    goto BB15
  }
  BB15 {
    _54 <- _55;
    assume { Resolve2.resolve _55 };
    _61 <-  * v_1;
    _62 <- i_14;
    _60 <- ([#"../heapsort_generic.rs" 63 24 63 28] Index0.index _61 _62);
    goto BB16
  }
  BB16 {
    _59 <- _60;
    assume { Resolve2.resolve _60 };
    _58 <- _59;
    assume { Resolve2.resolve _59 };
    _53 <- ([#"../heapsort_generic.rs" 63 11 63 29] Le0.le _54 _58);
    goto BB17
  }
  BB17 {
    switch (_53)
      | False -> goto BB19
      | True -> goto BB18
      end
  }
  BB18 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    goto BB22
  }
  BB19 {
    _52 <- ();
    _67 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _67) };
    _66 <- ([#"../heapsort_generic.rs" 66 8 66 24] DerefMut0.deref_mut _67);
    goto BB20
  }
  BB20 {
    _65 <- borrow_mut ( * _66);
    _66 <- { _66 with current = ( ^ _65) };
    _68 <- i_14;
    _69 <- child_32;
    _64 <- ([#"../heapsort_generic.rs" 66 8 66 24] Swap0.swap _65 _68 _69);
    goto BB21
  }
  BB21 {
    assume { Resolve3.resolve _66 };
    _70 <- child_32;
    i_14 <- _70;
    _70 <- any usize;
    _24 <- ();
    goto BB2
  }
  BB22 {
    return _0
  }
  
end
module HeapsortGeneric_SortedRange_Stub
  type t
  use seq.Seq
  use mach.int.Int
  val ghost predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module HeapsortGeneric_SortedRange_Interface
  type t
  use seq.Seq
  use mach.int.Int
  val ghost predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module HeapsortGeneric_SortedRange
  type t
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  let rec ghost predicate sorted_range [#"../heapsort_generic.rs" 72 0 72 58] (s : Seq.seq t) (l : int) (u : int)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../heapsort_generic.rs" 73 4 75 5] pure {forall j : int . forall i : int . l <= i /\ i < j /\ j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)}
end
module HeapsortGeneric_Sorted_Stub
  type t
  use seq.Seq
  val ghost predicate sorted (s : Seq.seq t)
end
module HeapsortGeneric_Sorted_Interface
  type t
  use seq.Seq
  val ghost predicate sorted (s : Seq.seq t)
end
module HeapsortGeneric_Sorted
  type t
  use seq.Seq
  clone HeapsortGeneric_SortedRange_Stub as SortedRange0 with type t = t
  let rec ghost predicate sorted [#"../heapsort_generic.rs" 79 0 79 36] (s : Seq.seq t)
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../heapsort_generic.rs" 81 8 81 35] SortedRange0.sorted_range s 0 (Seq.length s)
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module HeapsortGeneric_HeapSort_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Stub as PermutationOf0 with type t = t
  clone HeapsortGeneric_Sorted_Stub as Sorted0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  val heap_sort [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    requires {[#"../heapsort_generic.rs" 85 11 85 42] Seq.length (Model0.model v) < div (UInt64.to_int (18446744073709551615 : usize)) 2}
    ensures { [#"../heapsort_generic.rs" 86 10 86 21] Sorted0.sorted (Model1.model ( ^ v)) }
    ensures { [#"../heapsort_generic.rs" 87 10 87 34] PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    
end
module HeapsortGeneric_HeapSort
  type t
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = t
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t, val CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t, val GtLog0.gt_log = GtLog0.gt_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t, val GeLog0.ge_log = GeLog0.ge_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t, val LtLog0.lt_log = LtLog0.lt_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t, val LeLog0.le_log = LeLog0.le_log,
    val CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_SortedRange as SortedRange0 with type t = t, val LeLog0.le_log = LeLog0.le_log
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = t
  clone HeapsortGeneric_Sorted as Sorted0 with type t = t, val SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, val Model0.model = Model1.model
  use prelude.Slice
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq t,
    type ModelTy0.modelTy = ModelTy1.modelTy, val Model0.model = Model2.model
  clone HeapsortGeneric_Parent as Parent0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, val Parent0.parent = Parent0.parent,
    val LeLog0.le_log = LeLog0.le_log
  clone HeapsortGeneric_HeapFragMax as HeapFragMax0 with type t = t, val HeapFrag0.heap_frag = HeapFrag0.heap_frag,
    val LeLog0.le_log = LeLog0.le_log, val Parent0.parent = Parent0.parent, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq t
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t, val Model0.model = Model3.model,
    val Model1.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model2.model, val Model1.model = Model1.model
  clone HeapsortGeneric_SiftDown_Interface as SiftDown0 with type t = t, val Model0.model = Model1.model,
    val HeapFrag0.heap_frag = HeapFrag0.heap_frag, val Model1.model = Model0.model,
    val PermutationOf0.permutation_of = PermutationOf0.permutation_of, val LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Logic_Ghost_Impl1_Inner as Inner0 with type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    val Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg heap_sort [@cfg:stackify] [#"../heapsort_generic.rs" 88 0 88 40] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    requires {[#"../heapsort_generic.rs" 85 11 85 42] Seq.length (Model0.model v) < div (UInt64.to_int (18446744073709551615 : usize)) 2}
    ensures { [#"../heapsort_generic.rs" 86 10 86 21] Sorted0.sorted (Model1.model ( ^ v)) }
    ensures { [#"../heapsort_generic.rs" 87 10 87 34] PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var old_v_5 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _7 : ();
  var start_8 : usize;
  var _9 : usize;
  var _10 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _11 : bool;
  var _12 : ();
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var _20 : ();
  var _21 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _22 : usize;
  var _23 : usize;
  var _24 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _25 : ();
  var _26 : ();
  var _27 : ();
  var end'_28 : usize;
  var _29 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _36 : bool;
  var _37 : usize;
  var _38 : ();
  var _39 : borrowed (seq t);
  var _40 : borrowed (seq t);
  var _41 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _42 : usize;
  var _43 : ();
  var _45 : ();
  var _46 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _47 : usize;
  var _48 : ();
  var _49 : ();
  var _50 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_v_5 <- ([#"../heapsort_generic.rs" 89 16 89 28] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost v_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_v_5 };
    _10 <-  * v_1;
    _9 <- ([#"../heapsort_generic.rs" 91 20 91 27] Len0.len _10);
    goto BB2
  }
  BB2 {
    _11 <- ([#"../heapsort_generic.rs" 91 20 91 31] (2 : usize) = (0 : usize));
    assert { [#"../heapsort_generic.rs" 91 20 91 31] not _11 };
    goto BB3
  }
  BB3 {
    start_8 <- ([#"../heapsort_generic.rs" 91 20 91 31] _9 / (2 : usize));
    goto BB4
  }
  BB4 {
    invariant permutation { [#"../heapsort_generic.rs" 92 29 92 64] PermutationOf0.permutation_of (Model0.model v_1) (Model0.model (Inner0.inner old_v_5)) };
    invariant proph_const { [#"../heapsort_generic.rs" 93 29 93 49]  ^ v_1 =  ^ Inner0.inner old_v_5 };
    invariant heap { [#"../heapsort_generic.rs" 94 22 94 55] HeapFrag0.heap_frag (Model0.model v_1) (UInt64.to_int start_8) (Seq.length (Model0.model v_1)) };
    invariant start_bound { [#"../heapsort_generic.rs" 95 29 95 51] UInt64.to_int start_8 <= div (Seq.length (Model0.model v_1)) 2 };
    _19 <- start_8;
    _18 <- ([#"../heapsort_generic.rs" 96 10 96 19] _19 > (0 : usize));
    switch (_18)
      | False -> goto BB8
      | True -> goto BB5
      end
  }
  BB5 {
    start_8 <- ([#"../heapsort_generic.rs" 97 8 97 18] start_8 - (1 : usize));
    _21 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _21) };
    _22 <- start_8;
    _24 <-  * _21;
    _23 <- ([#"../heapsort_generic.rs" 98 28 98 35] Len0.len _24);
    goto BB6
  }
  BB6 {
    _20 <- ([#"../heapsort_generic.rs" 98 8 98 36] SiftDown0.sift_down _21 _22 _23);
    goto BB7
  }
  BB7 {
    _17 <- ();
    goto BB4
  }
  BB8 {
    _12 <- ();
    _29 <-  * v_1;
    end'_28 <- ([#"../heapsort_generic.rs" 101 18 101 25] Len0.len _29);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant end_bound { [#"../heapsort_generic.rs" 102 27 102 45] UInt64.to_int end'_28 <= Seq.length (Model0.model v_1) };
    invariant permutation { [#"../heapsort_generic.rs" 103 29 103 64] PermutationOf0.permutation_of (Model0.model v_1) (Model0.model (Inner0.inner old_v_5)) };
    invariant proph_const { [#"../heapsort_generic.rs" 104 29 104 49]  ^ v_1 =  ^ Inner0.inner old_v_5 };
    invariant heap { [#"../heapsort_generic.rs" 105 22 105 44] HeapFrag0.heap_frag (Model0.model v_1) 0 (UInt64.to_int end'_28) };
    invariant sorted { [#"../heapsort_generic.rs" 106 24 106 58] SortedRange0.sorted_range (Model0.model v_1) (UInt64.to_int end'_28) (Seq.length (Model0.model v_1)) };
    invariant heap_le { [#"../heapsort_generic.rs" 102 4 102 47] forall j : int . forall i : int . 0 <= i /\ i < UInt64.to_int end'_28 /\ UInt64.to_int end'_28 <= j /\ j < Seq.length (Model0.model v_1) -> LeLog0.le_log (Seq.get (Model0.model v_1) i) (Seq.get (Model0.model v_1) j) };
    _37 <- end'_28;
    _36 <- ([#"../heapsort_generic.rs" 109 10 109 17] _37 > (1 : usize));
    switch (_36)
      | False -> goto BB15
      | True -> goto BB11
      end
  }
  BB11 {
    end'_28 <- ([#"../heapsort_generic.rs" 110 8 110 16] end'_28 - (1 : usize));
    _41 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _41) };
    _40 <- ([#"../heapsort_generic.rs" 111 8 111 22] DerefMut0.deref_mut _41);
    goto BB12
  }
  BB12 {
    _39 <- borrow_mut ( * _40);
    _40 <- { _40 with current = ( ^ _39) };
    _42 <- end'_28;
    _38 <- ([#"../heapsort_generic.rs" 111 8 111 22] Swap0.swap _39 (0 : usize) _42);
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve _40 };
    assert { [#"../heapsort_generic.rs" 113 12 113 47] let _ = HeapFragMax0.heap_frag_max (Model0.model v_1) 0 (UInt64.to_int end'_28) in forall j : int . forall i : int . 0 <= i /\ i < UInt64.to_int end'_28 /\ UInt64.to_int end'_28 <= j /\ j < Seq.length (Model0.model v_1) -> LeLog0.le_log (Seq.get (Model0.model v_1) i) (Seq.get (Model0.model v_1) j) };
    _43 <- ();
    _46 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _46) };
    _47 <- end'_28;
    _45 <- ([#"../heapsort_generic.rs" 117 8 117 28] SiftDown0.sift_down _46 (0 : usize) _47);
    goto BB14
  }
  BB14 {
    _17 <- ();
    goto BB10
  }
  BB15 {
    assume { Resolve2.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
