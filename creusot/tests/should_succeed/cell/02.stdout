module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_cell_unsafecell 't = 
    | Core_Cell_UnsafeCell 't
    
  type core_cell_cell 't = 
    | Core_Cell_Cell (core_cell_unsafecell 't)
    
  type c02_cell 't 'i = 
    | C02_Cell (core_cell_cell 't) 'i
    
  function c02_cell_Cell_ghost_inv (self : c02_cell 't 'i) : 'i
  val c02_cell_Cell_ghost_inv (self : c02_cell 't 'i) : 'i
    ensures { result = c02_cell_Cell_ghost_inv self }
    
  axiom c02_cell_Cell_ghost_inv_acc : forall a : core_cell_cell 't, b : 'i . c02_cell_Cell_ghost_inv (C02_Cell a b : c02_cell 't 'i) = b
  type c02_fib  = 
    | C02_Fib usize
    
  function c02_fib_Fib_ix (self : c02_fib) : usize
  val c02_fib_Fib_ix (self : c02_fib) : usize
    ensures { result = c02_fib_Fib_ix self }
    
  axiom c02_fib_Fib_ix_acc : forall a : usize . c02_fib_Fib_ix (C02_Fib a : c02_fib) = a
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
  type creusotcontracts_std1_vec_vec 't  
end
module C02_Inv_Inv_Interface
  type self   
  type t   
  use prelude.Prelude
  predicate inv (self : self) (x : t)
end
module C02_Inv_Inv
  type self   
  type t   
  use prelude.Prelude
  predicate inv (self : self) (x : t)
end
module C02_Impl0_Get_Interface
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val get [@cfg:stackify] (self : Type.c02_cell t i) : t
    ensures { Inv0.inv (Type.c02_cell_Cell_ghost_inv self) result }
    
end
module C02_Impl0_Get
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv as Inv0 with type self = i, type t = t
  val get [@cfg:stackify] (self : Type.c02_cell t i) : t
    ensures { Inv0.inv (Type.c02_cell_Cell_ghost_inv self) result }
    
end
module C02_Impl0_Set_Interface
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val set [@cfg:stackify] (self : Type.c02_cell t i) (v : t) : ()
    requires {Inv0.inv (Type.c02_cell_Cell_ghost_inv self) v}
    
end
module C02_Impl0_Set
  type t   
  type i   
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv as Inv0 with type self = i, type t = t
  val set [@cfg:stackify] (self : Type.c02_cell t i) (v : t) : ()
    requires {Inv0.inv (Type.c02_cell_Cell_ghost_inv self) v}
    
end
module C02_Fib_Interface
  use mach.int.Int
  function fib (i : int) : int
end
module C02_Fib
  use mach.int.Int
  use mach.int.Int32
  function fib (i : int) : int
  axiom def : forall i : int . fib i = (if i <= 0 then 0 else if i = 1 then 1 else fib (i - 1) + fib (i - 2))
  axiom fib_spec : forall i : int . true
end
module C02_Fib_Impl
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function fib (i : int) : int
    variant {i}
    
   = 
    if i <= 0 then 0 else if i = 1 then 1 else fib (i - 1) + fib (i - 2)
end
module C02_LemmaFibBound_Interface
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  clone C02_Fib_Interface as Fib0 with axiom .
  function lemma_fib_bound (i : int) : ()
end
module C02_LemmaFibBound
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  clone C02_Fib_Interface as Fib0 with axiom .
  function lemma_fib_bound (i : int) : ()
  axiom def : forall i : int . lemma_fib_bound i = (if i = 0 then
    ()
  else
    if i = 1 then () else let _ = lemma_fib_bound (i - 2) in lemma_fib_bound (i - 1)
  )
  axiom lemma_fib_bound_spec : forall i : int . 0 <= i -> Fib0.fib i <= Power.power 2 i
end
module C02_LemmaFibBound_Impl
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  clone C02_Fib as Fib0 with axiom .
  let rec ghost function lemma_fib_bound (i : int) : ()
    requires {0 <= i}
    ensures { Fib0.fib i <= Power.power 2 i }
    variant {i}
    
   = 
    if i = 0 then () else if i = 1 then () else let _ = lemma_fib_bound (i - 2) in lemma_fib_bound (i - 1)
end
module C02_LemmaMaxInt_Interface
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  use prelude.Prelude
  use mach.int.UInt64
  function lemma_max_int () : ()
end
module C02_LemmaMaxInt
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  use prelude.Prelude
  use mach.int.UInt64
  function lemma_max_int () : ()
  axiom lemma_max_int_spec : Power.power 2 63 < 18446744073709551615
end
module C02_Impl1_Inv_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate inv (self : Type.c02_fib) (v : Type.core_option_option usize)
end
module C02_Impl1_Inv
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C02_Fib_Interface as Fib0 with axiom .
  predicate inv (self : Type.c02_fib) (v : Type.core_option_option usize) = 
    match (v) with
      | Type.Core_Option_Option_None -> true
      | Type.Core_Option_Option_Some i -> UInt64.to_int i = Fib0.fib (UInt64.to_int (Type.c02_fib_Fib_ix self))
      end
end
module C02_Impl1
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone C02_Fib as Fib0 with axiom .
  clone C02_Impl1_Inv as Inv0 with function Fib0.fib = Fib0.fib
  clone C02_Inv_Inv as Inv1 with type self = Type.c02_fib, type t = Type.core_option_option usize,
  predicate inv = Inv0.inv
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module C02_FibCell_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate fib_cell (v : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)))
    
end
module C02_FibCell
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  predicate fib_cell (v : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)))
    
   = 
    forall i : (int) . UInt64.to_int (Type.c02_fib_Fib_ix (Type.c02_cell_Cell_ghost_inv (Seq.get (Model0.model v) i))) = i
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module C02_FibMemo_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone C02_Fib_Interface as Fib0 with axiom .
  clone C02_FibCell_Interface as FibCell0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val fib_memo [@cfg:stackify] (mem : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib))) (i : usize) : usize
    requires {UInt64.to_int i <= 63}
    requires {UInt64.to_int i < Seq.length (Model0.model mem)}
    requires {FibCell0.fib_cell mem}
    ensures { UInt64.to_int result = Fib0.fib (UInt64.to_int i) }
    
end
module C02_FibMemo
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone C02_FibCell as FibCell0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone C02_Fib as Fib0 with axiom .
  clone C02_LemmaFibBound as LemmaFibBound0 with function Fib0.fib = Fib0.fib, axiom .
  clone C02_LemmaMaxInt as LemmaMaxInt0 with axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib),
  function Model0.model = Model0.model
  clone C02_Impl1_Inv as Inv0 with function Fib0.fib = Fib0.fib
  clone C02_Impl0_Set_Interface as Set0 with type t = Type.core_option_option usize, type i = Type.c02_fib,
  predicate Inv0.inv = Inv0.inv
  clone C02_Impl0_Get_Interface as Get0 with type t = Type.core_option_option usize, type i = Type.c02_fib,
  predicate Inv0.inv = Inv0.inv
  let rec cfg fib_memo [@cfg:stackify] (mem : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib))) (i : usize) : usize
    requires {UInt64.to_int i <= 63}
    requires {UInt64.to_int i < Seq.length (Model0.model mem)}
    requires {FibCell0.fib_cell mem}
    ensures { UInt64.to_int result = Fib0.fib (UInt64.to_int i) }
    
   = 
  var _0 : usize;
  var mem_1 : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib));
  var i_2 : usize;
  var _3 : Type.core_option_option usize;
  var _4 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _5 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _6 : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib));
  var _7 : usize;
  var _8 : isize;
  var v_9 : usize;
  var fib_i_10 : usize;
  var _11 : bool;
  var _12 : usize;
  var _13 : bool;
  var _14 : usize;
  var _15 : ();
  var _16 : ();
  var _17 : usize;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib));
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib));
  var _23 : usize;
  var _24 : usize;
  var _25 : ();
  var _26 : ();
  var _27 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _28 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _29 : Type.creusotcontracts_std1_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib));
  var _30 : usize;
  var _31 : Type.core_option_option usize;
  var _32 : usize;
  {
    mem_1 <- mem;
    i_2 <- i;
    goto BB0
  }
  BB0 {
    _6 <- mem_1;
    assume { Resolve0.resolve _7 };
    _7 <- i_2;
    _5 <- Index0.index _6 _7;
    goto BB1
  }
  BB1 {
    _4 <- _5;
    assume { Resolve1.resolve _5 };
    _3 <- Get0.get _4;
    goto BB2
  }
  BB2 {
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve3.resolve _3 };
    assume { Resolve0.resolve _12 };
    _12 <- i_2;
    _11 <- _12 = (0 : usize);
    switch (_11)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB4 {
    assume { Resolve2.resolve mem_1 };
    assume { Resolve0.resolve i_2 };
    assume { Resolve3.resolve _3 };
    absurd
  }
  BB5 {
    assume { Resolve2.resolve mem_1 };
    assume { Resolve0.resolve i_2 };
    assume { Resolve0.resolve v_9 };
    v_9 <- Type.core_option_option_Some_0 _3;
    assume { Resolve3.resolve _3 };
    assume { Resolve0.resolve _0 };
    _0 <- v_9;
    assume { Resolve0.resolve v_9 };
    goto BB16
  }
  BB6 {
    fib_i_10 <- (0 : usize);
    goto BB13
  }
  BB7 {
    assume { Resolve0.resolve _14 };
    _14 <- i_2;
    _13 <- _14 = (1 : usize);
    switch (_13)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    fib_i_10 <- (1 : usize);
    goto BB12
  }
  BB9 {
    assert { let _ = LemmaMaxInt0.lemma_max_int () in true };
    _15 <- ();
    assume { Resolve4.resolve _15 };
    assert { let _ = LemmaFibBound0.lemma_fib_bound 0 in true };
    _16 <- ();
    assume { Resolve4.resolve _16 };
    _18 <- mem_1;
    assume { Resolve0.resolve _20 };
    _20 <- i_2;
    _19 <- _20 - (1 : usize);
    _17 <- fib_memo _18 _19;
    goto BB10
  }
  BB10 {
    _22 <- mem_1;
    assume { Resolve0.resolve _24 };
    _24 <- i_2;
    _23 <- _24 - (2 : usize);
    _21 <- fib_memo _22 _23;
    goto BB11
  }
  BB11 {
    fib_i_10 <- _17 + _21;
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    assert { UInt64.to_int fib_i_10 = Fib0.fib (UInt64.to_int i_2) };
    _25 <- ();
    assume { Resolve4.resolve _25 };
    _29 <- mem_1;
    assume { Resolve2.resolve mem_1 };
    assume { Resolve0.resolve _30 };
    _30 <- i_2;
    assume { Resolve0.resolve i_2 };
    _28 <- Index0.index _29 _30;
    goto BB14
  }
  BB14 {
    _27 <- _28;
    assume { Resolve1.resolve _28 };
    assume { Resolve0.resolve _32 };
    _32 <- fib_i_10;
    _31 <- Type.Core_Option_Option_Some _32;
    _26 <- Set0.set _27 _31;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _0 };
    _0 <- fib_i_10;
    assume { Resolve0.resolve fib_i_10 };
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
