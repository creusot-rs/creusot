
module Core_Cell_UnsafeCell_Type
  type t_unsafecell 't =
    | C_UnsafeCell 't
    
end
module Core_Cell_Cell_Type
  use Core_Cell_UnsafeCell_Type as Core_Cell_UnsafeCell_Type
  type t_cell 't =
    | C_Cell (Core_Cell_UnsafeCell_Type.t_unsafecell 't)
    
end
module C02_Cell_Type
  use Core_Cell_Cell_Type as Core_Cell_Cell_Type
  type t_cell 't 'i =
    | C_Cell (Core_Cell_Cell_Type.t_cell 't) 'i
    
  let function cell_ghost_inv (self : t_cell 't 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Cell _ a -> a
      end
end
module C02_Fib_Impl
  use prelude.Int
  constant i  : int
  function fib [#"../02.rs" 32 0 32 25] (i : int) : int
  goal vc_fib : match i <= 0 with
    | True -> true
    | False -> match i = 1 with
      | True -> true
      | False -> (0 <= ([#"../02.rs" 31 10 31 11] i) /\ ([#"../02.rs" 31 10 31 11] i - 1) < ([#"../02.rs" 31 10 31 11] i)) /\ 0 <= ([#"../02.rs" 31 10 31 11] i) /\ ([#"../02.rs" 31 10 31 11] i - 2) < ([#"../02.rs" 31 10 31 11] i)
      end
    end
end
module C02_LemmaFibBound_Impl
  use int.Power
  use prelude.Int
  function fib0 [#"../02.rs" 32 0 32 25] (i : int) : int
  axiom fib0_def : forall i : int . fib0 i = ([#"../02.rs" 29 0 29 8] if i <= 0 then
    0
  else
    if i = 1 then 1 else fib0 (i - 1) + fib0 (i - 2)
  )
  val fib0 [#"../02.rs" 32 0 32 25] (i : int) : int
    ensures { result = fib0 i }
    
  constant i  : int
  function lemma_fib_bound [#"../02.rs" 47 0 47 30] (i : int) : ()
  goal vc_lemma_fib_bound : ([#"../02.rs" 44 11 44 17] 0 <= i)
   -> match i = 0 with
    | True -> [#"../02.rs" 45 10 45 28] fib0 i <= Power.power 2 i
    | False -> match i = 1 with
      | True -> [#"../02.rs" 45 10 45 28] fib0 i <= Power.power 2 i
      | False -> (([#"../02.rs" 44 11 44 17] 0 <= i - 2) /\ 0 <= ([#"../02.rs" 46 10 46 11] i) /\ ([#"../02.rs" 46 10 46 11] i - 2) < ([#"../02.rs" 46 10 46 11] i)) /\ (([#"../02.rs" 45 10 45 28] fib0 (i - 2) <= Power.power 2 (i - 2))
       -> (let _ = lemma_fib_bound (i - 2) in (([#"../02.rs" 44 11 44 17] 0 <= i - 1) /\ 0 <= ([#"../02.rs" 46 10 46 11] i) /\ ([#"../02.rs" 46 10 46 11] i - 1) < ([#"../02.rs" 46 10 46 11] i)) /\ (([#"../02.rs" 45 10 45 28] fib0 (i - 1) <= Power.power 2 (i - 1))
       -> ([#"../02.rs" 45 10 45 28] fib0 i <= Power.power 2 i))))
      end
    end
end
module C02_Fib_Type
  use prelude.UIntSize
  use prelude.Int
  type t_fib  =
    | C_Fib usize
    
  let function fib_ix (self : t_fib) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Fib a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module C02_FibMemo
  use C02_Fib_Type as C02_Fib_Type
  use prelude.UIntSize
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C02_Cell_Type as C02_Cell_Type
  use seq.Seq
  predicate invariant5 (self : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))) : bool
    ensures { result = invariant5 self }
    
  predicate inv6 (_x : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)))
  val inv6 (_x : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) . inv6 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  let constant max0  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
  use seq.Seq
  predicate inv5 (_x : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv5 (_x : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv5 _x }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))
    
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self}
    ensures { result = shallow_model2 self }
    
  axiom shallow_model2_spec : forall self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global) . ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv5 self)
   -> ([#"../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] inv6 (shallow_model2 self)) && ([#"../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model2 self) <= UIntSize.to_int max0)
  predicate invariant4 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41] inv6 (shallow_model2 self)
  val invariant4 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant4 self }
    
  axiom inv5 : forall x : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global) . inv5 x = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = invariant3 self }
    
  predicate inv4 (_x : Core_Option_Option_Type.t_option usize)
  val inv4 (_x : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : Core_Option_Option_Type.t_option usize . inv4 x = true
  predicate invariant2 (self : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))
  val inv2 (_x : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib) . inv2 x = true
  predicate invariant1 (self : usize) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : usize) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : usize)
  val inv1 (_x : usize) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : usize . inv1 x = true
  predicate invariant0 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global))
    
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use prelude.Borrow
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))
    
   =
    [#"../../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model2 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))
    ensures { result = shallow_model1 self }
    
  use seq.Seq
  function index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) (ix : int) : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)
    ensures { result = index_logic0 self ix }
    
  predicate fib_cell0 [#"../02.rs" 84 0 84 32] (v : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global))
    
   =
    [#"../02.rs" 85 4 87 5] forall i : int . UIntSize.to_int (C02_Fib_Type.fib_ix (C02_Cell_Type.cell_ghost_inv (index_logic0 v i))) = i
  val fib_cell0 [#"../02.rs" 84 0 84 32] (v : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = fib_cell0 v }
    
  use prelude.Snapshot
  function fib0 [#"../02.rs" 32 0 32 25] (i : int) : int
  axiom fib0_def : forall i : int . fib0 i = ([#"../02.rs" 29 0 29 8] if i <= 0 then
    0
  else
    if i = 1 then 1 else fib0 (i - 1) + fib0 (i - 2)
  )
  val fib0 [#"../02.rs" 32 0 32 25] (i : int) : int
    ensures { result = fib0 i }
    
  predicate inv3 [#"../02.rs" 70 4 70 43] (self : C02_Fib_Type.t_fib) (v : Core_Option_Option_Type.t_option usize) =
    [#"../02.rs" 72 12 75 13] match v with
      | Core_Option_Option_Type.C_None -> true
      | Core_Option_Option_Type.C_Some i -> UIntSize.to_int i = fib0 (UIntSize.to_int (C02_Fib_Type.fib_ix self))
      end
  val inv3 [#"../02.rs" 70 4 70 43] (self : C02_Fib_Type.t_fib) (v : Core_Option_Option_Type.t_option usize) : bool
    ensures { result = inv3 self v }
    
  val set0 [#"../02.rs" 24 4 24 27] (self : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (v : Core_Option_Option_Type.t_option usize) : ()
    requires {[#"../02.rs" 23 4 23 38] inv3 (C02_Cell_Type.cell_ghost_inv self) v}
    requires {[#"../02.rs" 24 16 24 20] inv2 self}
    requires {[#"../02.rs" 24 22 24 23] inv4 v}
    
  use prelude.Snapshot
  use int.Power
  function lemma_fib_bound0 [#"../02.rs" 47 0 47 30] (i : int) : ()
  axiom lemma_fib_bound0_def : forall i : int . lemma_fib_bound0 i = ([#"../02.rs" 43 0 43 8] if i = 0 then
    ()
  else
    if i = 1 then () else let _ = lemma_fib_bound0 (i - 2) in lemma_fib_bound0 (i - 1)
  )
  val lemma_fib_bound0 [#"../02.rs" 47 0 47 30] (i : int) : ()
    requires {[#"../02.rs" 44 11 44 17] 0 <= i}
    ensures { result = lemma_fib_bound0 i }
    
  axiom lemma_fib_bound0_spec : forall i : int . ([#"../02.rs" 44 11 44 17] 0 <= i)
   -> ([#"../02.rs" 45 10 45 28] fib0 i <= Power.power 2 i)
  use prelude.Snapshot
  function lemma_max_int0 [#"../02.rs" 62 0 62 22] (_1 : ()) : () =
    [#"../02.rs" 60 0 60 8] ()
  val lemma_max_int0 [#"../02.rs" 62 0 62 22] (_1 : ()) : ()
    ensures { result = lemma_max_int0 _1 }
    
  axiom lemma_max_int0_spec : forall _1 : () . [#"../02.rs" 61 10 61 49] Power.power 2 63 < UIntSize.to_int (18446744073709551615 : usize)
  val get0 [#"../02.rs" 18 4 18 26] (self : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) : Core_Option_Option_Type.t_option usize
    requires {[#"../02.rs" 18 16 18 20] inv2 self}
    ensures { [#"../02.rs" 17 4 17 42] inv3 (C02_Cell_Type.cell_ghost_inv self) result }
    ensures { [#"../02.rs" 18 25 18 26] inv4 result }
    
  use prelude.Slice
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))) (out : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))) (out : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) : bool
    ensures { result = has_value0 self seq out }
    
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)))
    
   =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib))) : bool
    ensures { result = in_bounds0 self seq }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) (index : usize) : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv1 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv2 result }
    
  let rec cfg fib_memo [#"../02.rs" 95 0 95 50] [@cfg:stackify] [@cfg:subregion_analysis] (mem : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global)) (i : usize) : usize
    requires {[#"../02.rs" 91 11 91 25] fib_cell0 mem}
    requires {[#"../02.rs" 92 11 92 26] UIntSize.to_int i < Seq.length (shallow_model1 mem)}
    requires {[#"../02.rs" 94 11 94 19] UIntSize.to_int i <= 63}
    ensures { [#"../02.rs" 93 10 93 28] UIntSize.to_int result = fib0 (UIntSize.to_int i) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var mem : Alloc_Vec_Vec_Type.t_vec (C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib)) (Alloc_Alloc_Global_Type.t_global) = mem;
  var i : usize = i;
  var _7 : Core_Option_Option_Type.t_option usize;
  var _9 : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib);
  var v : usize;
  var fib_i : usize;
  var _15 : bool;
  var _17 : bool;
  var _19 : Snapshot.snap_ty ();
  var _21 : Snapshot.snap_ty ();
  var _23 : usize;
  var _25 : usize;
  var _27 : usize;
  var _29 : usize;
  var _33 : ();
  var _35 : C02_Cell_Type.t_cell (Core_Option_Option_Type.t_option usize) (C02_Fib_Type.t_fib);
  var _38 : Core_Option_Option_Type.t_option usize;
  {
    goto BB0
  }
  BB0 {
    [#"../02.rs" 96 13 96 16] _9 <- ([#"../02.rs" 96 13 96 16] index0 mem i);
    goto BB1
  }
  BB1 {
    [#"../02.rs" 96 10 96 22] _7 <- ([#"../02.rs" 96 10 96 22] get0 _9);
    goto BB2
  }
  BB2 {
    switch (_7)
      | Core_Option_Option_Type.C_None -> goto BB3
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB3 {
    [#"../02.rs" 99 27 99 33] _15 <- i = ([#"../02.rs" 99 32 99 33] (0 : usize));
    switch (_15)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB4 {
    goto BB6
  }
  BB5 {
    assert { [#"../02.rs" 96 10 96 22] false };
    absurd
  }
  BB6 {
    [#"../02.rs" 97 13 97 14] v <- Core_Option_Option_Type.some_0 _7;
    [#"../02.rs" 97 19 97 20] _0 <- v;
    goto BB19
  }
  BB7 {
    [#"../02.rs" 100 16 100 17] fib_i <- ([#"../02.rs" 100 16 100 17] (0 : usize));
    goto BB16
  }
  BB8 {
    [#"../02.rs" 101 22 101 28] _17 <- i = ([#"../02.rs" 101 27 101 28] (1 : usize));
    switch (_17)
      | False -> goto BB10
      | True -> goto BB9
      end
  }
  BB9 {
    [#"../02.rs" 102 16 102 17] fib_i <- ([#"../02.rs" 102 16 102 17] (1 : usize));
    goto BB15
  }
  BB10 {
    [#"../02.rs" 104 16 104 43] _19 <- ([#"../02.rs" 104 16 104 43] Snapshot.new ());
    goto BB11
  }
  BB11 {
    [#"../02.rs" 105 16 105 45] _21 <- ([#"../02.rs" 105 16 105 45] Snapshot.new ());
    goto BB12
  }
  BB12 {
    [#"../02.rs" 106 30 106 35] _25 <- i - ([#"../02.rs" 106 34 106 35] (1 : usize));
    [#"../02.rs" 106 16 106 36] _23 <- ([#"../02.rs" 106 16 106 36] fib_memo mem _25);
    _25 <- any usize;
    goto BB13
  }
  BB13 {
    [#"../02.rs" 106 53 106 58] _29 <- i - ([#"../02.rs" 106 57 106 58] (2 : usize));
    [#"../02.rs" 106 39 106 59] _27 <- ([#"../02.rs" 106 39 106 59] fib_memo mem _29);
    _29 <- any usize;
    goto BB14
  }
  BB14 {
    [#"../02.rs" 106 16 106 59] fib_i <- _23 + _27;
    _23 <- any usize;
    _27 <- any usize;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    assert { [@expl:assertion] [#"../02.rs" 108 28 108 45] UIntSize.to_int fib_i = fib0 (UIntSize.to_int i) };
    [#"../02.rs" 109 15 109 18] _35 <- ([#"../02.rs" 109 15 109 18] index0 mem i);
    goto BB17
  }
  BB17 {
    [#"../02.rs" 109 23 109 34] _38 <- Core_Option_Option_Type.C_Some fib_i;
    [#"../02.rs" 109 12 109 35] _33 <- ([#"../02.rs" 109 12 109 35] set0 _35 _38);
    _38 <- any Core_Option_Option_Type.t_option usize;
    goto BB18
  }
  BB18 {
    [#"../02.rs" 110 12 110 17] _0 <- fib_i;
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module C02_Impl1
  
end
