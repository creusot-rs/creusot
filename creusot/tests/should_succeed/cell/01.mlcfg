
module Core_Cell_UnsafeCell_Type
  type t_unsafecell 't =
    | C_UnsafeCell 't
    
end
module Core_Cell_Cell_Type
  use Core_Cell_UnsafeCell_Type as Core_Cell_UnsafeCell_Type
  type t_cell 't =
    | C_Cell (Core_Cell_UnsafeCell_Type.t_unsafecell 't)
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module C01_Cell_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Cell_Cell_Type as Core_Cell_Cell_Type
  type t_cell 't 'i =
    | C_Cell (Core_Cell_Cell_Type.t_cell 't) (Core_Marker_PhantomData_Type.t_phantomdata 'i)
    
end
module C01_Even_Type
  type t_even  =
    | C_Even
    
end
module C01_AddsTwo
  use prelude.UInt32
  predicate invariant1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : uint32) : bool
    ensures { result = invariant1 self }
    
  predicate inv2 (_x : uint32)
  val inv2 (_x : uint32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : uint32 . inv2 x = true
  use C01_Even_Type as C01_Even_Type
  use C01_Cell_Type as C01_Cell_Type
  predicate invariant0 (self : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even))
  val inv0 (_x : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even) . inv0 x = true
  use prelude.Borrow
  use prelude.Int
  predicate inv1 [#"../01.rs" 35 4 35 26] (x : uint32) =
    [#"../01.rs" 36 8 36 24] mod x (2 : uint32) = (0 : uint32)
  val inv1 [#"../01.rs" 35 4 35 26] (x : uint32) : bool
    ensures { result = inv1 x }
    
  val set0 [#"../01.rs" 25 4 25 27] (self : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) (v : uint32) : ()
    requires {[#"../01.rs" 24 15 24 24] inv1 v}
    requires {[#"../01.rs" 25 16 25 20] inv0 self}
    requires {[#"../01.rs" 25 22 25 23] inv2 v}
    
  val get0 [#"../01.rs" 19 4 19 26] (self : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) : uint32
    requires {[#"../01.rs" 19 16 19 20] inv0 self}
    ensures { [#"../01.rs" 18 14 18 28] inv1 result }
    ensures { [#"../01.rs" 19 25 19 26] inv2 result }
    
  let rec cfg adds_two [#"../01.rs" 40 0 40 36] [@cfg:stackify] [@cfg:subregion_analysis] (c : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var c : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even) = c;
  var v : uint32;
  var _4 : bool;
  var _6 : ();
  var _8 : uint32;
  var _10 : ();
  {
    goto BB0
  }
  BB0 {
    [#"../01.rs" 41 12 41 19] v <- ([#"../01.rs" 41 12 41 19] get0 c);
    goto BB1
  }
  BB1 {
    [#"../01.rs" 43 7 43 17] _4 <- v < ([#"../01.rs" 43 11 43 17] (100000 : uint32));
    switch (_4)
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    [#"../01.rs" 44 14 44 19] _8 <- v + ([#"../01.rs" 44 18 44 19] (2 : uint32));
    [#"../01.rs" 44 8 44 20] _6 <- ([#"../01.rs" 44 8 44 20] set0 c _8);
    _8 <- any uint32;
    goto BB3
  }
  BB3 {
    [#"../01.rs" 43 18 45 5] _0 <- ([#"../01.rs" 43 18 45 5] ());
    goto BB6
  }
  BB4 {
    [#"../01.rs" 46 8 46 16] _10 <- ([#"../01.rs" 46 8 46 16] set0 c ([#"../01.rs" 46 14 46 15] (0 : uint32)));
    goto BB5
  }
  BB5 {
    [#"../01.rs" 45 11 47 5] _0 <- ([#"../01.rs" 45 11 47 5] ());
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module C01_Impl1
  
end
