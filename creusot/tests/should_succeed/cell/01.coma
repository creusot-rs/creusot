module M_01__adds_two [#"01.rs" 40 0 40 36]
  let%span s010 = "01.rs" 43 11 43 17
  let%span s011 = "01.rs" 44 18 44 19
  let%span s012 = "01.rs" 46 14 46 15
  let%span s013 = "01.rs" 19 16 19 20
  let%span s014 = "01.rs" 19 25 19 26
  let%span s015 = "01.rs" 18 14 18 28
  let%span s016 = "01.rs" 25 16 25 20
  let%span s017 = "01.rs" 25 22 25 23
  let%span s018 = "01.rs" 24 15 24 24
  let%span s019 = "01.rs" 36 8 36 24
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  type t_UnsafeCell'0  =
    { t_UnsafeCell__value'0: UInt32.t }
  
  type t_Cell'1  =
    { t_Cell__value'0: t_UnsafeCell'0 }
  
  type t_Cell'0  =
    { t_Cell__inner'0: t_Cell'1; t_Cell__inv'0: () }
  
  predicate inv'0 (_1 : t_Cell'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Cell'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : UInt32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt32.t [inv'1 x] . inv'1 x = true
  
  predicate inv'2 [#"01.rs" 35 4 35 26] (x : UInt32.t) =
    [%#s019] mod x (2 : UInt32.t) = (0 : UInt32.t)
  
  let rec get'0 (self:t_Cell'0) (return'  (ret:UInt32.t))= {[@expl:get 'self' type invariant] [%#s013] inv'0 self}
    any [ return' (result:UInt32.t)-> {[%#s014] inv'1 result} {[%#s015] inv'2 result} (! return' {result}) ] 
  
  let rec set'0 (self:t_Cell'0) (v:UInt32.t) (return'  (ret:()))= {[@expl:set 'self' type invariant] [%#s016] inv'0 self}
    {[@expl:set 'v' type invariant] [%#s017] inv'1 v}
    {[@expl:set requires] [%#s018] inv'2 v}
    any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec adds_two'0 (c:t_Cell'0) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = get'0 {c} (fun (_ret':UInt32.t) ->  [ &v <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UInt32.lt {v} {[%#s010] (100000 : UInt32.t)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = UInt32.add {v} {[%#s011] (2 : UInt32.t)} (fun (_ret':UInt32.t) ->  [ &_8 <- _ret' ] s1)
      | s1 = set'0 {c} {_8} (fun (_ret':()) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = bb6
    | bb4 = s0 [ s0 = set'0 {c} {[%#s012] (0 : UInt32.t)} (fun (_ret':()) ->  [ &_10 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & c : t_Cell'0 = c
    | & v : UInt32.t = any_l ()
    | & _4 : bool = any_l ()
    | & _6 : () = any_l ()
    | & _8 : UInt32.t = any_l ()
    | & _10 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
