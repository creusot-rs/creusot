
module Core_Cell_UnsafeCell_Type
  type t_unsafecell 't =
    | C_UnsafeCell 't
    
  function any_l (_ : 'b) : 'a
  let rec t_unsafecell < 't > (input:t_unsafecell 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_UnsafeCell value = input} (! ret {value})
    | bad (value:'t)-> {C_UnsafeCell value <> input} {false} any ]
    
end
module Core_Cell_Cell_Type
  use Core_Cell_UnsafeCell_Type as Core_Cell_UnsafeCell_Type
  type t_cell 't =
    | C_Cell (Core_Cell_UnsafeCell_Type.t_unsafecell 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_cell < 't > (input:t_cell 't) (ret  (value:Core_Cell_UnsafeCell_Type.t_unsafecell 't))= any
    [ good (value:Core_Cell_UnsafeCell_Type.t_unsafecell 't)-> {C_Cell value = input} (! ret {value})
    | bad (value:Core_Cell_UnsafeCell_Type.t_unsafecell 't)-> {C_Cell value <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module C01_Cell_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Cell_Cell_Type as Core_Cell_Cell_Type
  type t_cell 't 'i =
    | C_Cell (Core_Cell_Cell_Type.t_cell 't) (Core_Marker_PhantomData_Type.t_phantomdata 'i)
    
  function any_l (_ : 'b) : 'a
  let rec t_cell < 't > < 'i > (input:t_cell 't 'i) (ret  (inner:Core_Cell_Cell_Type.t_cell 't) (inv:Core_Marker_PhantomData_Type.t_phantomdata 'i))= any
    [ good (inner:Core_Cell_Cell_Type.t_cell 't) (inv:Core_Marker_PhantomData_Type.t_phantomdata 'i)-> {C_Cell inner inv
      = input}
      (! ret {inner} {inv})
    | bad (inner:Core_Cell_Cell_Type.t_cell 't) (inv:Core_Marker_PhantomData_Type.t_phantomdata 'i)-> {C_Cell inner inv
      <> input}
      {false}
      any ]
    
end
module C01_Even_Type
  type t_even  =
    | C_Even
    
  function any_l (_ : 'b) : 'a
  let rec t_even (input:t_even) (ret  )= any
    [ good -> {C_Even  = input} (! ret) | bad -> {C_Even  <> input} {false} any ]
    
end
module C01_AddsTwo
  use prelude.UInt32
  predicate invariant'1 (self : uint32) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'1 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'2 (_x : uint32)
  let rec inv'2 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : uint32 . inv'2 x = true
  use C01_Even_Type as C01_Even_Type
  use C01_Cell_Type as C01_Cell_Type
  predicate invariant'0 (self : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  let rec invariant'0 (self:C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even))
  let rec inv'0 (_x:C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even) . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  use prelude.Int
  predicate inv'1 [#"../01.rs" 35 4 35 26] (x : uint32) =
    [#"../01.rs" 36 8 36 24] mod x (2 : uint32) = (0 : uint32)
  let rec inv'1 (x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 x} (! return' {result}) ]
    
  let rec set'0 (self:C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) (v:uint32) (return'  (ret:()))= {[@expl:precondition] [#"../01.rs" 25 22 25 23] inv'2 v}
    {[@expl:precondition] [#"../01.rs" 25 16 25 20] inv'0 self}
    {[@expl:precondition] [#"../01.rs" 24 15 24 24] inv'1 v}
    any [ return' (result:())-> (! return' {result}) ] 
  let rec get'0 (self:C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) (return'  (ret:uint32))= {[@expl:precondition] [#"../01.rs" 19 16 19 20] inv'0 self}
    any
    [ return' (result:uint32)-> {[#"../01.rs" 19 25 19 26] inv'2 result}
      {[#"../01.rs" 18 14 18 28] inv'1 result}
      (! return' {result}) ]
    
  let rec adds_two (c:C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = get'0 {c} (fun (_ret':uint32) ->  [ &v <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UInt32.lt {v} {[#"../01.rs" 43 11 43 17] (100000 : uint32)} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb4) | br1 -> {_4} (! bb2) ]  ]
      
    | bb2 = s0
      [ s0 = UInt32.add {v} {[#"../01.rs" 44 18 44 19] (2 : uint32)} (fun (_ret':uint32) ->  [ &_8 <- _ret' ] s1)
      | s1 = set'0 {c} {_8} (fun (_ret':()) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &_0 <- [#"../01.rs" 43 18 45 5] () ] s1 | s1 = bb6 ] 
    | bb4 = s0
      [ s0 = set'0 {c} {[#"../01.rs" 46 14 46 15] (0 : uint32)} (fun (_ret':()) ->  [ &_10 <- _ret' ] s1) | s1 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &_0 <- [#"../01.rs" 45 11 47 5] () ] s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & c : C01_Cell_Type.t_cell uint32 (C01_Even_Type.t_even) = c
    | & v : uint32 = any_l () : uint32
    | & _4 : bool = any_l () : bool
    | & _6 : () = any_l () : ()
    | & _8 : uint32 = any_l () : uint32
    | & _10 : () = any_l () : () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C01_Impl1
  
end
