
module ModulePaths_A_T_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_t  =
    | C_T uint32
    
end
module ModulePaths_S_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  type t_s  =
    | C_S (ModulePaths_A_T_Type.t_t)
    
end
module ModulePaths_B_O_Type
  use mach.int.Int
  use mach.int.UInt32
  type t_o  =
    | C_O uint32
    
end
module ModulePaths_B_C_T_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  type t_t  =
    | C_T (ModulePaths_A_T_Type.t_t)
    
end
module ModulePaths_Test_Interface
  use ModulePaths_B_C_T_Type as ModulePaths_B_C_T_Type
  use ModulePaths_B_O_Type as ModulePaths_B_O_Type
  use ModulePaths_S_Type as ModulePaths_S_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  val test [@cfg:stackify] [#"../module_paths.rs" 22 0 22 51] (_a : ModulePaths_A_T_Type.t_t) (_b : ModulePaths_S_Type.t_s) (_c : ModulePaths_B_O_Type.t_o) (_d : ModulePaths_B_C_T_Type.t_t) : ()
    
end
module ModulePaths_Test
  use ModulePaths_B_C_T_Type as ModulePaths_B_C_T_Type
  use ModulePaths_B_O_Type as ModulePaths_B_O_Type
  use ModulePaths_S_Type as ModulePaths_S_Type
  use ModulePaths_A_T_Type as ModulePaths_A_T_Type
  let rec cfg test [@cfg:stackify] [#"../module_paths.rs" 22 0 22 51] (_a : ModulePaths_A_T_Type.t_t) (_b : ModulePaths_S_Type.t_s) (_c : ModulePaths_B_O_Type.t_o) (_d : ModulePaths_B_C_T_Type.t_t) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _a_1 : ModulePaths_A_T_Type.t_t;
  var _b_2 : ModulePaths_S_Type.t_s;
  var _c_3 : ModulePaths_B_O_Type.t_o;
  var _d_4 : ModulePaths_B_C_T_Type.t_t;
  {
    _a_1 <- _a;
    _b_2 <- _b;
    _c_3 <- _c;
    _d_4 <- _d;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
