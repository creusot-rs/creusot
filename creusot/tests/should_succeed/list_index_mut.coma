
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module ListIndexMut_List_Type
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  type t_list  =
    | C_List uint32 (Option'0.t_option (t_list))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_list (input:t_list) (ret  (field_0:uint32) (field_1:Option'0.t_option (t_list)))= any
    [ good (field_0:uint32) (field_1:Option'0.t_option (t_list))-> {C_List field_0 field_1 = input}
      (! ret {field_0} {field_1})
    | bad (field_0:uint32) (field_1:Option'0.t_option (t_list))-> {C_List field_0 field_1 <> input} {false} any ]
    
end
module ListIndexMut_IndexMut
  let%span slist_index_mut0 = "../list_index_mut.rs" 38 16 38 31
  
  let%span slist_index_mut1 = "../list_index_mut.rs" 39 17 39 33
  
  let%span slist_index_mut2 = "../list_index_mut.rs" 40 16 40 45
  
  let%span slist_index_mut3 = "../list_index_mut.rs" 41 16 41 52
  
  let%span slist_index_mut4 = "../list_index_mut.rs" 42 16 42 55
  
  let%span slist_index_mut5 = "../list_index_mut.rs" 40 4 40 47
  
  let%span slist_index_mut6 = "../list_index_mut.rs" 49 15 49 16
  
  let%span slist_index_mut7 = "../list_index_mut.rs" 52 14 52 15
  
  let%span slist_index_mut8 = "../list_index_mut.rs" 32 11 32 24
  
  let%span slist_index_mut9 = "../list_index_mut.rs" 33 10 33 37
  
  let%span slist_index_mut10 = "../list_index_mut.rs" 34 10 34 40
  
  let%span slist_index_mut11 = "../list_index_mut.rs" 35 10 35 34
  
  let%span slist_index_mut12 = "../list_index_mut.rs" 36 0 36 87
  
  let%span span13 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span14 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span15 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span16 = "" 0 0 0 0
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span20 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span21 = "" 0 0 0 0
  
  let%span span22 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span23 = "../../../../creusot-contracts/src/snapshot.rs" 28 20 28 48
  
  let%span span24 = "../list_index_mut.rs" 17 4 17 12
  
  let%span span25 = "../list_index_mut.rs" 6 4 6 12
  
  use ListIndexMut_List_Type as List'0
  
  use prelude.prelude.Borrow
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option (borrowed (List'0.t_list))) =
    [%#span13] true
  
  predicate inv'2 (_x : Option'0.t_option (borrowed (List'0.t_list)))
  
  axiom inv'2 : forall x : Option'0.t_option (borrowed (List'0.t_list)) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (List'0.t_list)) =
    [%#span13] true
  
  predicate inv'1 (_x : borrowed (List'0.t_list))
  
  axiom inv'1 : forall x : borrowed (List'0.t_list) . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (Option'0.t_option (List'0.t_list))) =
    [%#span13] true
  
  predicate inv'0 (_x : borrowed (Option'0.t_option (List'0.t_list)))
  
  axiom inv'0 : forall x : borrowed (Option'0.t_option (List'0.t_list)) . inv'0 x = true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'2 (self : borrowed uint32) =
    [%#span14]  ^ self =  * self
  
  predicate resolve'1 (self : borrowed (List'0.t_list)) =
    [%#span14]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed (List'0.t_list)) =
    [%#span14]  ^ self =  * self
  
  let rec unwrap'0 (self:Option'0.t_option (borrowed (List'0.t_list))) (return'  (ret:borrowed (List'0.t_list)))= {[@expl:precondition] [%#span16] inv'2 self}
    {[@expl:precondition] [%#span15] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (List'0.t_list))-> {[%#span17] inv'1 result}
      {[%#span15] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_option (List'0.t_list))) (return'  (ret:Option'0.t_option (borrowed (List'0.t_list))))= {[@expl:precondition] [%#span18] inv'0 self}
    any
    [ return' (result:Option'0.t_option (borrowed (List'0.t_list)))-> {[%#span21] inv'2 result}
      {[%#span20]  * self = Option'0.C_None
      \/ (exists r : borrowed (List'0.t_list) . inv'1 r
      /\ result = Option'0.C_Some r /\  * self = Option'0.C_Some ( * r) /\  ^ self = Option'0.C_Some ( ^ r))}
      {[%#span19]  * self = Option'0.C_None  -> result = Option'0.C_None /\  ^ self = Option'0.C_None}
      (! return' {result}) ]
    
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function shallow_model'1 (self : usize) : int =
    [%#span22] UIntSize.to_int self
  
  use prelude.prelude.Snapshot
  
  function shallow_model'0 (self : Snapshot.snap_ty usize) : int =
    [%#span23] shallow_model'1 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  function get'0 [#"../list_index_mut.rs" 18 4 18 46] (self : List'0.t_list) (ix : int) : Option'0.t_option uint32 =
    [%#span24] let List'0.C_List i ls = self in if ix > 0 then
      match ls with
        | Option'0.C_Some ls -> get'0 ls (ix - 1)
        | Option'0.C_None -> Option'0.C_None
        end
    else
      Option'0.C_Some i
    
  
  function len'0 [#"../list_index_mut.rs" 7 4 7 29] (self : List'0.t_list) : int =
    [%#span25] let List'0.C_List _ ls = self in 1
    + match ls with
      | Option'0.C_Some ls -> len'0 ls
      | Option'0.C_None -> 0
      end
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec index_mut (l:borrowed (List'0.t_list)) (ix:usize) (return'  (ret:borrowed uint32))= {[%#slist_index_mut8] UIntSize.to_int ix
    < len'0 ( * l)}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_l <- [%#slist_index_mut0] Snapshot.new l ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &old_ix <- [%#slist_index_mut1] Snapshot.new ix ] s1 | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] [%#slist_index_mut5] (forall i : int . 0 <= i
        /\ i < len'0 ( * l) /\ i <> UIntSize.to_int ix  -> get'0 ( ^ l) i = get'0 ( * l) i)
         -> (forall i : int . 0 <= i /\ i < len'0 ( * Snapshot.inner old_l) /\ i <> shallow_model'0 old_ix
         -> get'0 ( ^ Snapshot.inner old_l) i = get'0 ( * Snapshot.inner old_l) i)}
        {[@expl:loop invariant] [%#slist_index_mut5] len'0 ( ^ l) = len'0 ( * l)
         -> len'0 ( ^ Snapshot.inner old_l) = len'0 ( * Snapshot.inner old_l)}
        {[@expl:loop invariant] [%#slist_index_mut4] get'0 ( ^ l) (UIntSize.to_int ix)
        = get'0 ( ^ Snapshot.inner old_l) (shallow_model'0 old_ix)}
        {[@expl:loop invariant] [%#slist_index_mut3] get'0 ( * l) (UIntSize.to_int ix)
        = get'0 ( * Snapshot.inner old_l) (shallow_model'0 old_ix)}
        {[@expl:loop invariant] [%#slist_index_mut2] (0 : usize) <= ix /\ UIntSize.to_int ix < len'0 ( * l)}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 = UIntSize.gt {ix} {[%#slist_index_mut6] (0 : usize)} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1)
          | s1 = any [ br0 -> {_20 = false} (! bb8) | br1 -> {_20} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = List'0.t_list { * l}
              (fun (r0'0:uint32) (r1'0:Option'0.t_option (List'0.t_list)) ->
                Borrow.borrow_final <Option'0.t_option (List'0.t_list)> {r1'0} {Borrow.inherit_id (Borrow.get_id l) 2}
                  (fun (_ret':borrowed (Option'0.t_option (List'0.t_list))) ->
                     [ &_25 <- _ret' ] 
                    List'0.t_list { * l}
                      (fun (l_0'0:uint32) (l_1'0:Option'0.t_option (List'0.t_list)) ->
                         [ &l <- { l with current = List'0.C_List l_0'0 ( ^ _25) ; } ] 
                        s1)))
          | s1 = as_mut'0 {_25} (fun (_ret':Option'0.t_option (borrowed (List'0.t_list))) ->  [ &_24 <- _ret' ] s2)
          | s2 = bb6 ]
          
        | bb6 = s0 [ s0 = unwrap'0 {_24} (fun (_ret':borrowed (List'0.t_list)) ->  [ &_23 <- _ret' ] s1) | s1 = bb7 ] 
        | bb7 = s0
          [ s0 = Borrow.borrow_mut <List'0.t_list> { * _23}
              (fun (_ret':borrowed (List'0.t_list)) ->
                 [ &_22 <- _ret' ] 
                 [ &_23 <- { _23 with current = ( ^ _22) ; } ] 
                s1)
          | s1 = -{resolve'0 l}- s2
          | s2 =  [ &l <- _22 ] (any [ any_ (_any:borrowed (List'0.t_list))-> (!  [ &_22 <- _any ] s3) ] )
          | s3 = -{resolve'1 _23}- s4
          | s4 = UIntSize.sub {ix} {[%#slist_index_mut7] (1 : usize)} (fun (_ret':usize) ->  [ &ix <- _ret' ] s5)
          | s5 = bb3 ]
           ]
         ]
      
    | bb8 = s0
      [ s0 = List'0.t_list { * l}
          (fun (r0'0:uint32) (r1'0:Option'0.t_option (List'0.t_list)) ->
            Borrow.borrow_final <uint32> {r0'0} {Borrow.inherit_id (Borrow.get_id l) 1}
              (fun (_ret':borrowed uint32) ->
                 [ &_29 <- _ret' ] 
                List'0.t_list { * l}
                  (fun (l_0'0:uint32) (l_1'0:Option'0.t_option (List'0.t_list)) ->
                     [ &l <- { l with current = List'0.C_List ( ^ _29) l_1'0 ; } ] 
                    s1)))
      | s1 = Borrow.borrow_final <uint32> { * _29} {Borrow.get_id _29}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &_29 <- { _29 with current = ( ^ _3) ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> { * _3} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = ( ^ _0) ; } ] s3)
      | s3 = -{resolve'2 _29}- s4
      | s4 = -{resolve'2 _3}- s5
      | s5 = -{resolve'0 l}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l ()
    | & l : borrowed (List'0.t_list) = l
    | & ix : usize = ix
    | & _3 : borrowed uint32 = any_l ()
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_list)) = any_l ()
    | & old_ix : Snapshot.snap_ty usize = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : borrowed (List'0.t_list) = any_l ()
    | & _23 : borrowed (List'0.t_list) = any_l ()
    | & _24 : Option'0.t_option (borrowed (List'0.t_list)) = any_l ()
    | & _25 : borrowed (Option'0.t_option (List'0.t_list)) = any_l ()
    | & _29 : borrowed uint32 = any_l () ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [%#slist_index_mut12] forall i : int . 0 <= i
      /\ i < len'0 ( * l) /\ i <> UIntSize.to_int ix  -> get'0 ( * l) i = get'0 ( ^ l) i}
      {[@expl:postcondition] [%#slist_index_mut11] len'0 ( ^ l) = len'0 ( * l)}
      {[@expl:postcondition] [%#slist_index_mut10] Option'0.C_Some ( ^ result) = get'0 ( ^ l) (UIntSize.to_int ix)}
      {[@expl:postcondition] [%#slist_index_mut9] Option'0.C_Some ( * result) = get'0 ( * l) (UIntSize.to_int ix)}
      (! return' {result}) ]
    
end
module ListIndexMut_Write
  let%span slist_index_mut0 = "../list_index_mut.rs" 59 11 59 24
  
  let%span slist_index_mut1 = "../list_index_mut.rs" 60 10 60 34
  
  let%span slist_index_mut2 = "../list_index_mut.rs" 61 10 61 31
  
  let%span slist_index_mut3 = "../list_index_mut.rs" 62 0 62 87
  
  let%span span4 = "../list_index_mut.rs" 17 4 17 12
  
  let%span span5 = "../list_index_mut.rs" 6 4 6 12
  
  let%span span6 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span7 = "../list_index_mut.rs" 32 11 32 24
  
  let%span span8 = "../list_index_mut.rs" 33 10 33 37
  
  let%span span9 = "../list_index_mut.rs" 34 10 34 40
  
  let%span span10 = "../list_index_mut.rs" 35 10 35 34
  
  let%span span11 = "../list_index_mut.rs" 36 0 36 87
  
  use ListIndexMut_List_Type as List'0
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function get'0 [#"../list_index_mut.rs" 18 4 18 46] (self : List'0.t_list) (ix : int) : Option'0.t_option uint32 =
    [%#span4] let List'0.C_List i ls = self in if ix > 0 then
      match ls with
        | Option'0.C_Some ls -> get'0 ls (ix - 1)
        | Option'0.C_None -> Option'0.C_None
        end
    else
      Option'0.C_Some i
    
  
  function len'0 [#"../list_index_mut.rs" 7 4 7 29] (self : List'0.t_list) : int =
    [%#span5] let List'0.C_List _ ls = self in 1
    + match ls with
      | Option'0.C_Some ls -> len'0 ls
      | Option'0.C_None -> 0
      end
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (self : borrowed (List'0.t_list)) =
    [%#span6]  ^ self =  * self
  
  predicate resolve'0 (self : borrowed uint32) =
    [%#span6]  ^ self =  * self
  
  let rec index_mut'0 (l:borrowed (List'0.t_list)) (ix:usize) (return'  (ret:borrowed uint32))= {[@expl:precondition] [%#span7] UIntSize.to_int ix
    < len'0 ( * l)}
    any
    [ return' (result:borrowed uint32)-> {[%#span11] forall i : int . 0 <= i
      /\ i < len'0 ( * l) /\ i <> UIntSize.to_int ix  -> get'0 ( * l) i = get'0 ( ^ l) i}
      {[%#span10] len'0 ( ^ l) = len'0 ( * l)}
      {[%#span9] Option'0.C_Some ( ^ result) = get'0 ( ^ l) (UIntSize.to_int ix)}
      {[%#span8] Option'0.C_Some ( * result) = get'0 ( * l) (UIntSize.to_int ix)}
      (! return' {result}) ]
    
  
  let rec write (l:borrowed (List'0.t_list)) (ix:usize) (v:uint32) (return'  (ret:()))= {[%#slist_index_mut0] UIntSize.to_int ix
    < len'0 ( * l)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <List'0.t_list> { * l} {Borrow.get_id l}
          (fun (_ret':borrowed (List'0.t_list)) ->  [ &_10 <- _ret' ]  [ &l <- { l with current = ( ^ _10) ; } ] s1)
      | s1 = index_mut'0 {_10} {ix} (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_9 <- { _9 with current = v ; } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'1 l}- s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & l : borrowed (List'0.t_list) = l
    | & ix : usize = ix
    | & v : uint32 = v
    | & _9 : borrowed uint32 = any_l ()
    | & _10 : borrowed (List'0.t_list) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#slist_index_mut3] forall i : int . 0 <= i
      /\ i < len'0 ( * l) /\ i <> UIntSize.to_int ix  -> get'0 ( * l) i = get'0 ( ^ l) i}
      {[@expl:postcondition] [%#slist_index_mut2] len'0 ( ^ l) = len'0 ( * l)}
      {[@expl:postcondition] [%#slist_index_mut1] Option'0.C_Some v = get'0 ( ^ l) (UIntSize.to_int ix)}
      (! return' {result}) ]
    
end
module ListIndexMut_F
  let%span slist_index_mut0 = "../list_index_mut.rs" 68 43 68 45
  
  let%span slist_index_mut1 = "../list_index_mut.rs" 68 21 68 22
  
  let%span slist_index_mut2 = "../list_index_mut.rs" 69 18 69 19
  
  let%span slist_index_mut3 = "../list_index_mut.rs" 69 21 69 22
  
  let%span span4 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span5 = "../list_index_mut.rs" 17 4 17 12
  
  let%span span6 = "../list_index_mut.rs" 6 4 6 12
  
  let%span span7 = "../list_index_mut.rs" 59 11 59 24
  
  let%span span8 = "../list_index_mut.rs" 60 10 60 34
  
  let%span span9 = "../list_index_mut.rs" 61 10 61 31
  
  let%span span10 = "../list_index_mut.rs" 62 0 62 87
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use ListIndexMut_List_Type as List'0
  
  predicate resolve'0 (self : borrowed (List'0.t_list)) =
    [%#span4]  ^ self =  * self
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.UIntSize
  
  use Core_Option_Option_Type as Option'0
  
  use prelude.prelude.Int
  
  function get'0 [#"../list_index_mut.rs" 18 4 18 46] (self : List'0.t_list) (ix : int) : Option'0.t_option uint32 =
    [%#span5] let List'0.C_List i ls = self in if ix > 0 then
      match ls with
        | Option'0.C_Some ls -> get'0 ls (ix - 1)
        | Option'0.C_None -> Option'0.C_None
        end
    else
      Option'0.C_Some i
    
  
  function len'0 [#"../list_index_mut.rs" 7 4 7 29] (self : List'0.t_list) : int =
    [%#span6] let List'0.C_List _ ls = self in 1
    + match ls with
      | Option'0.C_Some ls -> len'0 ls
      | Option'0.C_None -> 0
      end
  
  use prelude.prelude.UIntSize
  
  let rec write'0 (l:borrowed (List'0.t_list)) (ix:usize) (v:uint32) (return'  (ret:()))= {[@expl:precondition] [%#span7] UIntSize.to_int ix
    < len'0 ( * l)}
    any
    [ return' (result:())-> {[%#span10] forall i : int . 0 <= i /\ i < len'0 ( * l) /\ i <> UIntSize.to_int ix
       -> get'0 ( * l) i = get'0 ( ^ l) i}
      {[%#span9] len'0 ( ^ l) = len'0 ( * l)}
      {[%#span8] Option'0.C_Some v = get'0 ( ^ l) (UIntSize.to_int ix)}
      (! return' {result}) ]
    
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- Option'0.C_None ] s1
      | s1 =  [ &_4 <- List'0.C_List ([%#slist_index_mut0] (10 : uint32)) _5 ] 
        (any [ any_ (_any:Option'0.t_option (List'0.t_list))-> (!  [ &_5 <- _any ] s2) ] )
      | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_2 <- Option'0.C_Some _4 ] (any [ any_ (_any:List'0.t_list)-> (!  [ &_4 <- _any ] s1) ] ) | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &l <- List'0.C_List ([%#slist_index_mut1] (1 : uint32)) _2 ] 
        (any [ any_ (_any:Option'0.t_option (List'0.t_list))-> (!  [ &_2 <- _any ] s1) ] )
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = Borrow.borrow_mut <List'0.t_list> {l}
          (fun (_ret':borrowed (List'0.t_list)) ->  [ &_8 <- _ret' ]  [ &l <-  ^ _8 ] s1)
      | s1 = Borrow.borrow_final <List'0.t_list> { * _8} {Borrow.get_id _8}
          (fun (_ret':borrowed (List'0.t_list)) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = ( ^ _7) ; } ] s2)
      | s2 = write'0 {_7} {[%#slist_index_mut2] (0 : usize)} {[%#slist_index_mut3] (2 : uint32)}
          (fun (_ret':()) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0 [ s0 = -{resolve'0 _8}- s1 | s1 = bb6 ] 
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & l : List'0.t_list = any_l ()
    | & _2 : Option'0.t_option (List'0.t_list) = any_l ()
    | & _4 : List'0.t_list = any_l ()
    | & _5 : Option'0.t_option (List'0.t_list) = any_l ()
    | & _6 : () = any_l ()
    | & _7 : borrowed (List'0.t_list) = any_l ()
    | & _8 : borrowed (List'0.t_list) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
