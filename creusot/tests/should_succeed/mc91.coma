
module Mc91_Mc91
  use prelude.Intrinsic
  use prelude.Int
  use prelude.UInt32
  let rec mc91 (x:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.gt {x} {[#"../mc91.rs" 8 11 8 14] (100 : uint32)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = UInt32.sub {x} {[#"../mc91.rs" 9 12 9 14] (10 : uint32)} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb2 = s0
      [ s0 = UInt32.add {x} {[#"../mc91.rs" 11 22 11 24] (11 : uint32)} (fun (_ret':uint32) ->  [ &_7 <- _ret' ] s1)
      | s1 = mc91 {_7} (fun (_ret':uint32) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = mc91 {_6} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 = bb5 ] 
    | bb5 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l () : uint32
    | & x : uint32 = x
    | & _3 : bool = any_l () : bool
    | & _6 : uint32 = any_l () : uint32
    | & _7 : uint32 = any_l () : uint32 ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [#"../mc91.rs" 5 0 6 40] x <= (100 : uint32)
       -> result = (91 : uint32) /\ x > (100 : uint32)  -> result = x - (10 : uint32)}
      (! return' {result}) ]
    
end
