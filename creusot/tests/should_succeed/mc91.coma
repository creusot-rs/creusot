module M_mc91__mc91 [#"mc91.rs" 7 0 7 26]
  let%span smc910 = "mc91.rs" 8 11 8 14
  let%span smc911 = "mc91.rs" 9 12 9 14
  let%span smc912 = "mc91.rs" 11 22 11 24
  let%span smc913 = "mc91.rs" 5 10 6 38
  let%span sord4 = "../../../creusot-contracts/src/logic/ord.rs" 78 39 78 89
  let%span sord5 = "../../../creusot-contracts/src/logic/ord.rs" 83 39 83 86
  let%span sord6 = "../../../creusot-contracts/src/logic/ord.rs" 88 39 88 86
  let%span sord7 = "../../../creusot-contracts/src/logic/ord.rs" 93 39 93 89
  let%span sord8 = "../../../creusot-contracts/src/logic/ord.rs" 98 39 98 70
  let%span sord9 = "../../../creusot-contracts/src/logic/ord.rs" 103 40 103 57
  let%span sord10 = "../../../creusot-contracts/src/logic/ord.rs" 104 40 104 57
  let%span sord11 = "../../../creusot-contracts/src/logic/ord.rs" 105 39 105 56
  let%span sord12 = "../../../creusot-contracts/src/logic/ord.rs" 110 40 110 70
  let%span sord13 = "../../../creusot-contracts/src/logic/ord.rs" 111 39 111 72
  let%span sord14 = "../../../creusot-contracts/src/logic/ord.rs" 116 40 116 73
  let%span sord15 = "../../../creusot-contracts/src/logic/ord.rs" 117 39 117 69
  let%span sord16 = "../../../creusot-contracts/src/logic/ord.rs" 122 39 122 84
  let%span sord17 = "../../../creusot-contracts/src/logic/ord.rs" 185 16 191 17
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Intrinsic
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.prelude.UInt32
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord17] if UInt32.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord16] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord14] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord15] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord12] cmp_log'0 x y = C_Less'0)
   -> ([%#sord13] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord9] cmp_log'0 x y = o)
   -> ([%#sord10] cmp_log'0 y z = o)  -> ([%#sord11] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord8] cmp_log'0 x x = C_Equal'0
  
  use prelude.prelude.UInt32
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord7] UInt32.ugt x y = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.prelude.UInt32
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord6] UInt32.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord5] UInt32.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.prelude.UInt32
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord4] UInt32.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec mc91'0 (x:UInt32.t) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.gt {x} {[%#smc910] (100 : UInt32.t)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = UInt32.sub {x} {[%#smc911] (10 : UInt32.t)} (fun (_ret':UInt32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb5 ]
      
    | bb2 = s0
      [ s0 = UInt32.add {x} {[%#smc912] (11 : UInt32.t)} (fun (_ret':UInt32.t) ->  [ &_7 <- _ret' ] s1)
      | s1 = mc91'0 {_7} (fun (_ret':UInt32.t) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = mc91'0 {_6} (fun (_ret':UInt32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = return' {_0} ]
    )
    [ & _0 : UInt32.t = any_l ()
    | & x : UInt32.t = x
    | & _3 : bool = any_l ()
    | & _6 : UInt32.t = any_l ()
    | & _7 : UInt32.t = any_l () ]
    
    [ return' (result:UInt32.t)-> {[@expl:mc91 ensures] [%#smc913] UInt32.ule x (100 : UInt32.t)
       -> result = (91 : UInt32.t) /\ UInt32.ugt x (100 : UInt32.t)  -> result = x - (10 : UInt32.t)}
      (! return' {result}) ]
    
end
