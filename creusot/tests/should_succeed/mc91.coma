
module M_mc91__mc91
  let%span smc910 = "../mc91.rs" 8 11 8 14
  
  let%span smc911 = "../mc91.rs" 9 12 9 14
  
  let%span smc912 = "../mc91.rs" 11 22 11 24
  
  let%span smc913 = "../mc91.rs" 5 0 6 40
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  let rec mc91 (x:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.gt {x} {[%#smc910] (100 : uint32)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1)
      | s1 = any [ br0 -> {_3 = false} (! bb2) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = UInt32.sub {x} {[%#smc911] (10 : uint32)} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb5 ]
      
    | bb2 = s0
      [ s0 = UInt32.add {x} {[%#smc912] (11 : uint32)} (fun (_ret':uint32) ->  [ &_7 <- _ret' ] s1)
      | s1 = mc91 {_7} (fun (_ret':uint32) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = mc91 {_6} (fun (_ret':uint32) ->  [ &_0 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = return' {_0} ]
    )
    [ & _0 : uint32 = any_l ()
    | & x : uint32 = x
    | & _3 : bool = any_l ()
    | & _6 : uint32 = any_l ()
    | & _7 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#smc913] x <= (100 : uint32)
       -> result = (91 : uint32) /\ x > (100 : uint32)  -> result = x - (10 : uint32)}
      (! return' {result}) ]
    
end
