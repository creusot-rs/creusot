module M_open_inv__test_open_inv_param [#"open_inv.rs" 15 0 15 58]
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  type t_IsZero'0  =
    { t_IsZero__0'0: int32 }
  
  meta "compute_max_steps" 1000000
  
  let rec test_open_inv_param'0 (_1:t_IsZero'0) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_open_inv__test_open_inv_param_call [#"open_inv.rs" 16 0 16 33]
  let%span sopen_inv0 = "open_inv.rs" 17 23 17 24
  let%span sopen_inv1 = "open_inv.rs" 18 11 18 12
  
  use prelude.prelude.Int32
  
  type t_IsZero'0  =
    { t_IsZero__0'0: int32 }
  
  let rec test_open_inv_param'0 (_1:t_IsZero'0) (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_open_inv_param_call'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- { t_IsZero__0'0 = ([%#sopen_inv0] (0 : int32)) } ] s1
      | s1 = Int32.sub {a.t_IsZero__0'0} {[%#sopen_inv1] (1 : int32)}
          (fun (_ret':int32) ->  [ &a <- { t_IsZero__0'0 = _ret' } ] s2)
      | s2 = test_open_inv_param'0 {a} (fun (_ret':()) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & a : t_IsZero'0 = any_l () | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_open_inv__test_open_inv_result [#"open_inv.rs" 23 0 23 39]
  let%span sopen_inv0 = "open_inv.rs" 24 23 24 24
  let%span sopen_inv1 = "open_inv.rs" 25 11 25 12
  
  use prelude.prelude.Int32
  
  type t_IsZero'0  =
    { t_IsZero__0'0: int32 }
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_open_inv_result'0 (_1:()) (return'  (ret:t_IsZero'0))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- { t_IsZero__0'0 = ([%#sopen_inv0] (0 : int32)) } ] s1
      | s1 = Int32.sub {a.t_IsZero__0'0} {[%#sopen_inv1] (1 : int32)}
          (fun (_ret':int32) ->  [ &a <- { t_IsZero__0'0 = _ret' } ] s2)
      | s2 =  [ &_0 <- a ] s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : t_IsZero'0 = any_l () | & a : t_IsZero'0 = any_l () ] 
    [ return' (result:t_IsZero'0)-> (! return' {result}) ]
    
end
