
module RedBlackTree_Color_Type
  type t_color  =
    | C_Red
    | C_Black
    
end
module RedBlackTree_Impl16_Clone
  use prelude.Borrow
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  let rec cfg clone' [#"../red_black_tree.rs" 8 9 8 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : RedBlackTree_Color_Type.t_color) : RedBlackTree_Color_Type.t_color
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Color_Type.t_color;
  var self : RedBlackTree_Color_Type.t_color = self;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | RedBlackTree_Color_Type.C_Red -> goto BB1
      | RedBlackTree_Color_Type.C_Black -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    [#"../red_black_tree.rs" 9 5 11 9] _0 <- ([#"../red_black_tree.rs" 9 5 11 9] RedBlackTree_Color_Type.C_Black);
    goto BB5
  }
  BB3 {
    assert { [#"../red_black_tree.rs" 8 9 8 14] false };
    absurd
  }
  BB4 {
    [#"../red_black_tree.rs" 9 5 10 7] _0 <- ([#"../red_black_tree.rs" 9 5 10 7] RedBlackTree_Color_Type.C_Red);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_node 'k 'v =
    | C_Node (t_tree 'k 'v) (RedBlackTree_Color_Type.t_color) 'k 'v (t_tree 'k 'v)
    with t_tree 'k 'v =
    | C_Tree (Core_Option_Option_Type.t_option (t_node 'k 'v))
    
  let function node_left (self : t_node 'k 'v) : t_tree 'k 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node a _ _ _ _ -> a
      end
  let function node_key (self : t_node 'k 'v) : 'k = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ _ a _ _ -> a
      end
  let function node_right (self : t_node 'k 'v) : t_tree 'k 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ _ _ _ a -> a
      end
  let function node_val (self : t_node 'k 'v) : 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ _ _ a _ -> a
      end
  let function node_color (self : t_node 'k 'v) : RedBlackTree_Color_Type.t_color = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ a _ _ _ -> a
      end
  let function tree_node (self : t_tree 'k 'v) : Core_Option_Option_Type.t_option (t_node 'k 'v)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Tree a -> a
      end
end
module RedBlackTree_Tree_Type
  use export RedBlackTree_Node_Type
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  predicate invariant3 (self : v)
  val invariant3 (self : v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : v)
  val inv3 (_x : v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : v . inv3 x = true
  type deep_model_ty0
  predicate invariant2 (self : deep_model_ty0)
  val invariant2 (self : deep_model_ty0) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : deep_model_ty0)
  val inv2 (_x : deep_model_ty0) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : deep_model_ty0 . inv2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  predicate invariant1 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant1 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv1 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv1 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  use map.Map
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  let rec ghost function model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv0 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv1 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv2 k}
    ensures { [#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv3 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = model_acc0 left accu in let accu2 = let b' = deep_model0 key in Map.set accu1 b' (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping right accu2 k
      end
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv2 (_x : deep_model_ty0)
  val inv2 (_x : deep_model_ty0) : bool
    ensures { result = inv2 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant3 (self : v)
  val invariant3 (self : v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : v)
  val inv3 (_x : v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : v . inv3 x = true
  predicate invariant2 (self : deep_model_ty0)
  val invariant2 (self : deep_model_ty0) : bool
    ensures { result = invariant2 self }
    
  axiom inv2 : forall x : deep_model_ty0 . inv2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  predicate invariant1 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant1 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv1 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv1 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  use map.Map
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv0 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv1 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv2 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv0 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv1 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv2 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv3 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv3 v -> inv2 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv3 v -> inv2 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  let rec ghost function has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv0 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv1 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv2 k}
    ensures { [#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv3 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = model_acc0 left accu in let accu2 = let b' = deep_model0 key in Map.set accu1 b' (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc right accu2 k in model_acc_has_mapping0 right accu2 k
      end
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv1 (_x : deep_model_ty0)
  val inv1 (_x : deep_model_ty0) : bool
    ensures { result = inv1 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  predicate invariant3 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant3 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv3 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv3 x = true
  predicate invariant2 (self : v)
  val invariant2 (self : v) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : v)
  val inv2 (_x : v) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : v . inv2 x = true
  predicate invariant1 (self : deep_model_ty0)
  val invariant1 (self : deep_model_ty0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : deep_model_ty0 . inv1 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  use map.Map
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv0 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv3 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv1 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv0 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv3 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv1 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv2 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv2 v -> inv1 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv2 v -> inv1 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv0 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv3 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv1 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv0 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv3 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv1 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv2 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  use map.Const
  function shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  let rec ghost function has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv0 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv1 k}
    ensures { [#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv2 v -> has_mapping0 self k v = (Map.get (shallow_model0 self) k = Core_Option_Option_Type.C_Some v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  type deep_model_ty0
  use map.Map
  predicate invariant3 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant3 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv3 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv3 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv1 (_x : deep_model_ty0)
  val inv1 (_x : deep_model_ty0) : bool
    ensures { result = inv1 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv1 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv1 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv1 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant2 (self : v)
  val invariant2 (self : v) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : v)
  val inv2 (_x : v) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : v . inv2 x = true
  predicate invariant1 (self : deep_model_ty0)
  val invariant1 (self : deep_model_ty0) : bool
    ensures { result = invariant1 self }
    
  axiom inv1 : forall x : deep_model_ty0 . inv1 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use map.Map
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  use map.Const
  function shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv0 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv3 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv1 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv0 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv3 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv1 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv2 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv2 v -> inv1 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv2 v -> inv1 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv0 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv3 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv1 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv0 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv3 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv1 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv2 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv0 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv1 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv0 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv1 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv2 v -> has_mapping0 self k v = (Map.get (shallow_model0 self) k = Core_Option_Option_Type.C_Some v))
  let rec ghost function has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 121 15 121 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 122 15 122 38] has_mapping0 self k v1}
    requires {[#"../red_black_tree.rs" 123 15 123 38] has_mapping0 self k v2}
    requires {[#"../red_black_tree.rs" 125 23 125 27] inv0 self}
    requires {[#"../red_black_tree.rs" 125 29 125 30] inv1 k}
    requires {[#"../red_black_tree.rs" 125 48 125 50] inv2 v1}
    requires {[#"../red_black_tree.rs" 125 55 125 57] inv2 v2}
    ensures { [#"../red_black_tree.rs" 124 14 124 22] v1 = v2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 130 12 130 37] let _ = has_mapping_model0 self k in match let a' = shallow_model0 self in Map.get a' k with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _v -> ()
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module RedBlackTree_Impl1_HasMapping_Impl
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant3 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant3 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv3 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv3 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv3 : forall x : RedBlackTree_Node_Type.t_node k v . inv3 x = true
  predicate invariant2 (self : v)
  val invariant2 (self : v) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : v)
  val inv2 (_x : v) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : v . inv2 x = true
  type deep_model_ty0
  predicate invariant1 (self : deep_model_ty0)
  val invariant1 (self : deep_model_ty0) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : deep_model_ty0)
  val inv1 (_x : deep_model_ty0) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : deep_model_ty0 . inv1 x = true
  predicate invariant0 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant0 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv0 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Node_Type.t_node k v . inv0 x = true
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  let rec ghost predicate has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv0 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv1 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv2 v}
    ensures { [#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv3 node -> self = node -> result = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v || has_mapping0 (RedBlackTree_Node_Type.node_right self) k v || (let x0 = deep_model0 (RedBlackTree_Node_Type.node_key self) in pure {k = x0}) && pure {v = RedBlackTree_Node_Type.node_val self}
end
module RedBlackTree_Cp_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_cp  =
    | C_CPL (RedBlackTree_Color_Type.t_color)
    | C_CPN (RedBlackTree_Color_Type.t_color) (t_cp) (t_cp)
    
end
module RedBlackTree_Impl9_Height_Impl
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use prelude.Int
  let rec ghost function height [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv0 self}
    ensures { [#"../red_black_tree.rs" 295 14 295 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height left
        | RedBlackTree_Color_Type.C_Black -> height left + 1
        end
      end
end
module RedBlackTree_Impl10_Height_Impl
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant2 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant2 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv2 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv2 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant1 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant1 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant0 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant0 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv0 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Node_Type.t_node k v . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv2 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv2 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  let rec ghost function height [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv0 self}
    ensures { [#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> result = height0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height0 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height0 (RedBlackTree_Node_Type.node_left self) + 1
      end
end
module RedBlackTree_Impl13_IsRed
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  use prelude.Borrow
  predicate resolve0 (self : RedBlackTree_Tree_Type.t_tree k v)
  val resolve0 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = resolve0 self }
    
  let rec cfg is_red [#"../red_black_tree.rs" 388 4 388 28] [@cfg:stackify] [@cfg:subregion_analysis] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv0 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : RedBlackTree_Tree_Type.t_tree k v = self;
  {
    goto BB0
  }
  BB0 {
    switch (RedBlackTree_Tree_Type.tree_node self)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB6
      end
  }
  BB1 {
    [#"../red_black_tree.rs" 391 17 391 22] _0 <- ([#"../red_black_tree.rs" 391 17 391 22] [#"../red_black_tree.rs" 391 17 391 22] false);
    goto BB5
  }
  BB2 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    switch (RedBlackTree_Node_Type.node_color (Core_Option_Option_Type.some_0 (RedBlackTree_Tree_Type.tree_node self)))
      | RedBlackTree_Color_Type.C_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    [#"../red_black_tree.rs" 390 49 390 53] _0 <- ([#"../red_black_tree.rs" 390 49 390 53] [#"../red_black_tree.rs" 390 49 390 53] true);
    goto BB5
  }
  BB5 {
    return _0
  }
  BB6 {
    assert { [@expl:type invariant] inv0 self };
    assume { resolve0 self };
    goto BB1
  }
  
end
module RedBlackTree_Impl14_RotateRight
  type k
  type v
  type deep_model_ty0
  predicate invariant11 (self : deep_model_ty0)
  val invariant11 (self : deep_model_ty0) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : deep_model_ty0)
  val inv11 (_x : deep_model_ty0) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : deep_model_ty0 . inv11 x = true
  predicate invariant10 (self : v)
  val invariant10 (self : v) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : v)
  val inv10 (_x : v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : v . inv10 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use prelude.Borrow
  predicate invariant9 (self : borrowed (RedBlackTree_Color_Type.t_color)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed (RedBlackTree_Color_Type.t_color))
  val inv9 (_x : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed (RedBlackTree_Color_Type.t_color) . inv9 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv11 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv11 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv11 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv11 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv11 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv11 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv11 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv11 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv11 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv11 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv11 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant8 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant8 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv8 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv8 x = true
  predicate invariant7 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant7 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv7 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv7 x = true
  predicate invariant6 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv6 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv6 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv6 : forall x : RedBlackTree_Node_Type.t_node k v . inv6 x = true
  predicate invariant5 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv5 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : RedBlackTree_Node_Type.t_node k v . inv5 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv4 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv4 x = true
  predicate invariant3 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant3 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv3 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv2 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  use prelude.Ghost
  predicate invariant0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv0 x = true
  use prelude.Int
  function height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height1 left
        | RedBlackTree_Color_Type.C_Black -> height1 left + 1
        end
      end
  val height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv3 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv3 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height1 self >= 0)
  function height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height1 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv5 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv5 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> height0 self = height1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping0 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv5 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv11 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv10 v}
    ensures { result = has_mapping1 self k v }
    
  axiom has_mapping1_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv5 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv11 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv10 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> has_mapping1 self k v = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv10 v -> inv11 k -> has_mapping1 self k v = has_mapping1 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height1 (RedBlackTree_Node_Type.node_left self) = height1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant1 left /\ height_invariant1 right
      end
  val height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant1 (RedBlackTree_Node_Type.node_left self) /\ height_invariant1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv10 v -> inv11 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv10 v -> inv11 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant1 left /\ bst_invariant1 right
      end
  val bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant1 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant1 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate resolve6 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve6 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : RedBlackTree_Tree_Type.t_tree k v)
  val resolve5 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = resolve5 self }
    
  use prelude.Ghost
  predicate resolve4 (self : borrowed (RedBlackTree_Color_Type.t_color)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = resolve4 self }
    
  val swap2 (x : borrowed (RedBlackTree_Color_Type.t_color)) (y : borrowed (RedBlackTree_Color_Type.t_color)) : ()
    requires {inv9 x}
    requires {inv9 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve3 self }
    
  val swap1 (x : borrowed (RedBlackTree_Node_Type.t_node k v)) (y : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {inv8 x}
    requires {inv8 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve2 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve2 self }
    
  val swap0 (x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (y : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : ()
    requires {inv4 x}
    requires {inv4 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv1 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv6 result }
    
  predicate resolve1 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve1 self }
    
  predicate is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/std/option.rs" 120 20 120 32] self = Core_Option_Option_Type.C_None
  val is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv2 dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv1 result }
    
  predicate resolve0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val resolve0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  let rec cfg rotate_right [#"../red_black_tree.rs" 412 4 412 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 400 15 400 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 401 15 401 42] color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 412 25 412 29] inv8 self}
    ensures { [#"../red_black_tree.rs" 402 14 402 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 403 14 403 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 14 404 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 405 14 405 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 406 14 406 42] color0 (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 407 14 407 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 408 4 411 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv6 r /\ inv6 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (RedBlackTree_Node_Type.t_node k v) = self;
  var old_self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v));
  var x : RedBlackTree_Node_Type.t_node k v;
  var _14 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : ();
  var _18 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _22 : ();
  var _23 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : ();
  var _27 : borrowed (RedBlackTree_Color_Type.t_color);
  var _28 : borrowed (RedBlackTree_Color_Type.t_color);
  var _29 : borrowed (RedBlackTree_Color_Type.t_color);
  var _30 : borrowed (RedBlackTree_Color_Type.t_color);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 413 23 413 35] old_self <- ([#"../red_black_tree.rs" 413 23 413 35] Ghost.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve0 old_self };
    [#"../red_black_tree.rs" 421 35 421 54] _16 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)));
    [#"../red_black_tree.rs" 421 35 421 54] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_left ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _16)) x1 x2 x3 x4) };
    assume { inv1 ( ^ _16) };
    [#"../red_black_tree.rs" 421 35 421 54] _15 <- Borrow.borrow_mut ( * _16);
    [#"../red_black_tree.rs" 421 35 421 54] _16 <- { _16 with current =  ^ _15 };
    assume { inv1 ( ^ _15) };
    [#"../red_black_tree.rs" 421 20 421 55] _14 <- ([#"../red_black_tree.rs" 421 20 421 55] take0 _15);
    _15 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv2 _16 };
    assume { resolve1 _16 };
    [#"../red_black_tree.rs" 421 20 421 64] x <- ([#"../red_black_tree.rs" 421 20 421 64] unwrap0 _14);
    _14 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 428 23 428 37] _19 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_left ( * self));
    [#"../red_black_tree.rs" 428 23 428 37] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node ( ^ _19) x1 x2 x3 x4) };
    assume { inv3 ( ^ _19) };
    [#"../red_black_tree.rs" 428 23 428 37] _18 <- Borrow.borrow_mut ( * _19);
    [#"../red_black_tree.rs" 428 23 428 37] _19 <- { _19 with current =  ^ _18 };
    assume { inv3 ( ^ _18) };
    [#"../red_black_tree.rs" 428 39 428 51] _21 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right x);
    [#"../red_black_tree.rs" 428 39 428 51] x <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = x in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _21));
    assume { inv3 ( ^ _21) };
    [#"../red_black_tree.rs" 428 39 428 51] _20 <- Borrow.borrow_mut ( * _21);
    [#"../red_black_tree.rs" 428 39 428 51] _21 <- { _21 with current =  ^ _20 };
    assume { inv3 ( ^ _20) };
    [#"../red_black_tree.rs" 428 8 428 52] _17 <- ([#"../red_black_tree.rs" 428 8 428 52] swap0 _18 _20);
    _18 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    _20 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] inv4 _21 };
    assume { resolve2 _21 };
    assert { [@expl:type invariant] inv4 _19 };
    assume { resolve2 _19 };
    [#"../red_black_tree.rs" 434 23 434 27] _23 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 434 23 434 27] self <- { self with current =  ^ _23 };
    assume { inv5 ( ^ _23) };
    [#"../red_black_tree.rs" 434 29 434 35] _25 <- Borrow.borrow_mut x;
    [#"../red_black_tree.rs" 434 29 434 35] x <-  ^ _25;
    assume { inv6 ( ^ _25) };
    [#"../red_black_tree.rs" 434 29 434 35] _24 <- Borrow.borrow_mut ( * _25);
    [#"../red_black_tree.rs" 434 29 434 35] _25 <- { _25 with current =  ^ _24 };
    assume { inv5 ( ^ _24) };
    [#"../red_black_tree.rs" 434 8 434 36] _22 <- ([#"../red_black_tree.rs" 434 8 434 36] swap1 _23 _24);
    _23 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    _24 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] inv7 _25 };
    assume { resolve3 _25 };
    [#"../red_black_tree.rs" 435 23 435 38] _28 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_color ( * self));
    [#"../red_black_tree.rs" 435 23 435 38] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 ( ^ _28) x2 x3 x4) };
    [#"../red_black_tree.rs" 435 23 435 38] _27 <- Borrow.borrow_mut ( * _28);
    [#"../red_black_tree.rs" 435 23 435 38] _28 <- { _28 with current =  ^ _27 };
    [#"../red_black_tree.rs" 435 40 435 52] _30 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_color x);
    [#"../red_black_tree.rs" 435 40 435 52] x <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = x in RedBlackTree_Node_Type.C_Node x0 ( ^ _30) x2 x3 x4);
    [#"../red_black_tree.rs" 435 40 435 52] _29 <- Borrow.borrow_mut ( * _30);
    [#"../red_black_tree.rs" 435 40 435 52] _30 <- { _30 with current =  ^ _29 };
    [#"../red_black_tree.rs" 435 8 435 53] _26 <- ([#"../red_black_tree.rs" 435 8 435 53] swap2 _27 _29);
    _27 <- any borrowed (RedBlackTree_Color_Type.t_color);
    _29 <- any borrowed (RedBlackTree_Color_Type.t_color);
    goto BB6
  }
  BB6 {
    assume { resolve4 _30 };
    assume { resolve4 _28 };
    assert { [@expl:assertion] [#"../red_black_tree.rs" 441 8 441 90] has_mapping0 (RedBlackTree_Node_Type.node_left ( * Ghost.inner old_self)) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) (RedBlackTree_Node_Type.node_val ( * self)) };
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    [#"../red_black_tree.rs" 442 8 442 18] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ([#"../red_black_tree.rs" 442 21 442 43] RedBlackTree_Tree_Type.C_Tree ([#"../red_black_tree.rs" 442 34 442 41] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 442 39 442 40] x)))) };
    [#"../red_black_tree.rs" 442 39 442 40] x <- any RedBlackTree_Node_Type.t_node k v;
    assert { [@expl:type invariant] inv3 (RedBlackTree_Node_Type.node_right ( * self)) };
    assume { resolve5 (RedBlackTree_Node_Type.node_right ( * self)) };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve6 self };
    goto BB11
  }
  BB11 {
    [#"../red_black_tree.rs" 412 31 448 5] _0 <- ([#"../red_black_tree.rs" 412 31 448 5] ());
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl14_RotateLeft
  type k
  type v
  type deep_model_ty0
  predicate invariant11 (self : deep_model_ty0)
  val invariant11 (self : deep_model_ty0) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : deep_model_ty0)
  val inv11 (_x : deep_model_ty0) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : deep_model_ty0 . inv11 x = true
  predicate invariant10 (self : v)
  val invariant10 (self : v) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : v)
  val inv10 (_x : v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : v . inv10 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use prelude.Borrow
  predicate invariant9 (self : borrowed (RedBlackTree_Color_Type.t_color)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant9 (self : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : borrowed (RedBlackTree_Color_Type.t_color))
  val inv9 (_x : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed (RedBlackTree_Color_Type.t_color) . inv9 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv11 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv11 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv11 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv11 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv11 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv11 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv11 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv11 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv11 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv11 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv11 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv11 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv11 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv11 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant8 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant8 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv8 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv8 x = true
  predicate invariant7 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant7 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv7 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv7 x = true
  predicate invariant6 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv6 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv6 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv6 : forall x : RedBlackTree_Node_Type.t_node k v . inv6 x = true
  predicate invariant5 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv5 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : RedBlackTree_Node_Type.t_node k v . inv5 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv4 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv4 x = true
  predicate invariant3 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant3 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv3 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv3 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv2 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  use prelude.Ghost
  predicate invariant0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv0 x = true
  use prelude.Int
  function height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height1 left
        | RedBlackTree_Color_Type.C_Black -> height1 left + 1
        end
      end
  val height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv3 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv3 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height1 self >= 0)
  function height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height1 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv5 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv5 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> height0 self = height1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping0 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv5 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv11 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv10 v}
    ensures { result = has_mapping1 self k v }
    
  axiom has_mapping1_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv5 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv11 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv10 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> has_mapping1 self k v = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv10 v -> inv11 k -> has_mapping1 self k v = has_mapping1 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height1 (RedBlackTree_Node_Type.node_left self) = height1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant1 left /\ height_invariant1 right
      end
  val height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant1 (RedBlackTree_Node_Type.node_left self) /\ height_invariant1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv10 v -> inv11 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv10 v -> inv11 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant1 left /\ bst_invariant1 right
      end
  val bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant1 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant1 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate resolve6 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve6 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : RedBlackTree_Tree_Type.t_tree k v)
  val resolve5 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = resolve5 self }
    
  use prelude.Ghost
  predicate resolve4 (self : borrowed (RedBlackTree_Color_Type.t_color)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = resolve4 self }
    
  val swap2 (x : borrowed (RedBlackTree_Color_Type.t_color)) (y : borrowed (RedBlackTree_Color_Type.t_color)) : ()
    requires {inv9 x}
    requires {inv9 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve3 self }
    
  val swap1 (x : borrowed (RedBlackTree_Node_Type.t_node k v)) (y : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {inv8 x}
    requires {inv8 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve2 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve2 self }
    
  val swap0 (x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (y : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : ()
    requires {inv4 x}
    requires {inv4 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv1 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv6 result }
    
  predicate resolve1 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve1 self }
    
  predicate is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/std/option.rs" 120 20 120 32] self = Core_Option_Option_Type.C_None
  val is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv2 dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv1 result }
    
  predicate resolve0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val resolve0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  let rec cfg rotate_left [#"../red_black_tree.rs" 462 4 462 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 450 15 450 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 451 15 451 43] color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 462 24 462 28] inv8 self}
    ensures { [#"../red_black_tree.rs" 452 14 452 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 453 14 453 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 454 14 454 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 455 14 455 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 456 14 456 41] color0 (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 457 14 457 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 458 4 461 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv6 r /\ inv6 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (RedBlackTree_Node_Type.t_node k v) = self;
  var old_self : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v));
  var x : RedBlackTree_Node_Type.t_node k v;
  var _14 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : ();
  var _18 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _22 : ();
  var _23 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : ();
  var _27 : borrowed (RedBlackTree_Color_Type.t_color);
  var _28 : borrowed (RedBlackTree_Color_Type.t_color);
  var _29 : borrowed (RedBlackTree_Color_Type.t_color);
  var _30 : borrowed (RedBlackTree_Color_Type.t_color);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 463 23 463 35] old_self <- ([#"../red_black_tree.rs" 463 23 463 35] Ghost.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve0 old_self };
    [#"../red_black_tree.rs" 464 35 464 55] _16 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)));
    [#"../red_black_tree.rs" 464 35 464 55] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_right ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _16))) };
    assume { inv1 ( ^ _16) };
    [#"../red_black_tree.rs" 464 35 464 55] _15 <- Borrow.borrow_mut ( * _16);
    [#"../red_black_tree.rs" 464 35 464 55] _16 <- { _16 with current =  ^ _15 };
    assume { inv1 ( ^ _15) };
    [#"../red_black_tree.rs" 464 20 464 56] _14 <- ([#"../red_black_tree.rs" 464 20 464 56] take0 _15);
    _15 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv2 _16 };
    assume { resolve1 _16 };
    [#"../red_black_tree.rs" 464 20 464 65] x <- ([#"../red_black_tree.rs" 464 20 464 65] unwrap0 _14);
    _14 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 465 23 465 38] _19 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * self));
    [#"../red_black_tree.rs" 465 23 465 38] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _19)) };
    assume { inv3 ( ^ _19) };
    [#"../red_black_tree.rs" 465 23 465 38] _18 <- Borrow.borrow_mut ( * _19);
    [#"../red_black_tree.rs" 465 23 465 38] _19 <- { _19 with current =  ^ _18 };
    assume { inv3 ( ^ _18) };
    [#"../red_black_tree.rs" 465 40 465 51] _21 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_left x);
    [#"../red_black_tree.rs" 465 40 465 51] x <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = x in RedBlackTree_Node_Type.C_Node ( ^ _21) x1 x2 x3 x4);
    assume { inv3 ( ^ _21) };
    [#"../red_black_tree.rs" 465 40 465 51] _20 <- Borrow.borrow_mut ( * _21);
    [#"../red_black_tree.rs" 465 40 465 51] _21 <- { _21 with current =  ^ _20 };
    assume { inv3 ( ^ _20) };
    [#"../red_black_tree.rs" 465 8 465 52] _17 <- ([#"../red_black_tree.rs" 465 8 465 52] swap0 _18 _20);
    _18 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    _20 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] inv4 _21 };
    assume { resolve2 _21 };
    assert { [@expl:type invariant] inv4 _19 };
    assume { resolve2 _19 };
    [#"../red_black_tree.rs" 466 23 466 27] _23 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 466 23 466 27] self <- { self with current =  ^ _23 };
    assume { inv5 ( ^ _23) };
    [#"../red_black_tree.rs" 466 29 466 35] _25 <- Borrow.borrow_mut x;
    [#"../red_black_tree.rs" 466 29 466 35] x <-  ^ _25;
    assume { inv6 ( ^ _25) };
    [#"../red_black_tree.rs" 466 29 466 35] _24 <- Borrow.borrow_mut ( * _25);
    [#"../red_black_tree.rs" 466 29 466 35] _25 <- { _25 with current =  ^ _24 };
    assume { inv5 ( ^ _24) };
    [#"../red_black_tree.rs" 466 8 466 36] _22 <- ([#"../red_black_tree.rs" 466 8 466 36] swap1 _23 _24);
    _23 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    _24 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] inv7 _25 };
    assume { resolve3 _25 };
    [#"../red_black_tree.rs" 467 23 467 38] _28 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_color ( * self));
    [#"../red_black_tree.rs" 467 23 467 38] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 ( ^ _28) x2 x3 x4) };
    [#"../red_black_tree.rs" 467 23 467 38] _27 <- Borrow.borrow_mut ( * _28);
    [#"../red_black_tree.rs" 467 23 467 38] _28 <- { _28 with current =  ^ _27 };
    [#"../red_black_tree.rs" 467 40 467 52] _30 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_color x);
    [#"../red_black_tree.rs" 467 40 467 52] x <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = x in RedBlackTree_Node_Type.C_Node x0 ( ^ _30) x2 x3 x4);
    [#"../red_black_tree.rs" 467 40 467 52] _29 <- Borrow.borrow_mut ( * _30);
    [#"../red_black_tree.rs" 467 40 467 52] _30 <- { _30 with current =  ^ _29 };
    [#"../red_black_tree.rs" 467 8 467 53] _26 <- ([#"../red_black_tree.rs" 467 8 467 53] swap2 _27 _29);
    _27 <- any borrowed (RedBlackTree_Color_Type.t_color);
    _29 <- any borrowed (RedBlackTree_Color_Type.t_color);
    goto BB6
  }
  BB6 {
    assume { resolve4 _30 };
    assume { resolve4 _28 };
    assert { [@expl:assertion] [#"../red_black_tree.rs" 468 8 468 91] has_mapping0 (RedBlackTree_Node_Type.node_right ( * Ghost.inner old_self)) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) (RedBlackTree_Node_Type.node_val ( * self)) };
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    [#"../red_black_tree.rs" 469 8 469 17] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node ([#"../red_black_tree.rs" 469 20 469 42] RedBlackTree_Tree_Type.C_Tree ([#"../red_black_tree.rs" 469 33 469 40] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 469 38 469 39] x))) x1 x2 x3 x4) };
    [#"../red_black_tree.rs" 469 38 469 39] x <- any RedBlackTree_Node_Type.t_node k v;
    assert { [@expl:type invariant] inv3 (RedBlackTree_Node_Type.node_left ( * self)) };
    assume { resolve5 (RedBlackTree_Node_Type.node_left ( * self)) };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve6 self };
    goto BB11
  }
  BB11 {
    [#"../red_black_tree.rs" 462 30 470 5] _0 <- ([#"../red_black_tree.rs" 462 30 470 5] ());
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl14_FlipColors
  type k
  type v
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv9 (_x : deep_model_ty0)
  val inv9 (_x : deep_model_ty0) : bool
    ensures { result = inv9 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv9 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv9 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv9 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv9 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv9 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv9 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv9 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv9 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv9 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv9 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv9 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv9 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv9 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv9 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant10 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant10 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv10 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv10 x = true
  predicate invariant9 (self : deep_model_ty0)
  val invariant9 (self : deep_model_ty0) : bool
    ensures { result = invariant9 self }
    
  axiom inv9 : forall x : deep_model_ty0 . inv9 x = true
  predicate invariant8 (self : v)
  val invariant8 (self : v) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : v)
  val inv8 (_x : v) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : v . inv8 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant7 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant7 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv7 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : RedBlackTree_Node_Type.t_node k v . inv7 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use prelude.Borrow
  predicate invariant6 (self : borrowed (RedBlackTree_Color_Type.t_color)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (RedBlackTree_Color_Type.t_color))
  val inv6 (_x : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (RedBlackTree_Color_Type.t_color) . inv6 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant5 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant5 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv5 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv5 x = true
  predicate invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv4 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv4 x = true
  predicate invariant3 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant3 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv3 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv3 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv3 : forall x : RedBlackTree_Node_Type.t_node k v . inv3 x = true
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  predicate invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping1 left k v \/ has_mapping1 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping1 self k v }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping1 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping1 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv7 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv9 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv8 v}
    ensures { result = has_mapping0 self k v }
    
  axiom has_mapping0_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv7 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv9 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv8 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv3 node -> self = node -> has_mapping0 self k v = has_mapping1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv8 v -> inv9 k -> has_mapping0 self k v = has_mapping0 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  use prelude.Int
  function height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height1 left
        | RedBlackTree_Color_Type.C_Black -> height1 left + 1
        end
      end
  val height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv10 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv10 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height1 self >= 0)
  function height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height1 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv7 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv7 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv3 node -> self = node -> height0 self = height1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height1 (RedBlackTree_Node_Type.node_left self) = height1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant1 left /\ height_invariant1 right
      end
  val height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant1 (RedBlackTree_Node_Type.node_left self) /\ height_invariant1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv8 v -> inv9 k -> has_mapping1 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv8 v -> inv9 k -> has_mapping1 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant1 left /\ bst_invariant1 right
      end
  val bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant1 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant1 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate resolve2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Color_Type.t_color)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Color_Type.t_color)) : bool
    ensures { result = resolve1 self }
    
  val swap0 (x : borrowed (RedBlackTree_Color_Type.t_color)) (y : borrowed (RedBlackTree_Color_Type.t_color)) : ()
    requires {inv6 x}
    requires {inv6 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv5 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv1 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv1 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv5 result }
    
  let rec cfg flip_colors [#"../red_black_tree.rs" 486 4 486 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 472 15 472 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 473 15 473 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 474 15 474 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 475 15 475 60] color0 (RedBlackTree_Node_Type.node_left ( * self)) = color0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 486 24 486 28] inv2 self}
    ensures { [#"../red_black_tree.rs" 476 14 476 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 477 14 477 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 478 14 478 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 479 14 479 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 480 4 482 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . inv3 l2 /\ inv3 l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 483 4 485 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . inv3 r2 /\ inv3 r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (RedBlackTree_Node_Type.t_node k v) = self;
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : borrowed (RedBlackTree_Color_Type.t_color);
  var _18 : borrowed (RedBlackTree_Color_Type.t_color);
  var _19 : borrowed (RedBlackTree_Color_Type.t_color);
  var _20 : borrowed (RedBlackTree_Color_Type.t_color);
  var _21 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _22 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _23 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 487 8 487 31] _15 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)));
    [#"../red_black_tree.rs" 487 8 487 31] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_left ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _15)) x1 x2 x3 x4) };
    assume { inv0 ( ^ _15) };
    [#"../red_black_tree.rs" 487 8 487 31] _14 <- ([#"../red_black_tree.rs" 487 8 487 31] as_mut0 _15);
    _15 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 487 8 487 40] _13 <- ([#"../red_black_tree.rs" 487 8 487 40] unwrap0 _14);
    _14 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 487 8 487 59] _13 <- { _13 with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * _13 in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 487 49 487 59] RedBlackTree_Node_Type.node_color ( * self)) x2 x3 x4) };
    assert { [@expl:type invariant] inv1 _13 };
    assume { resolve0 _13 };
    [#"../red_black_tree.rs" 488 23 488 38] _18 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_color ( * self));
    [#"../red_black_tree.rs" 488 23 488 38] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 ( ^ _18) x2 x3 x4) };
    [#"../red_black_tree.rs" 488 23 488 38] _17 <- Borrow.borrow_mut ( * _18);
    [#"../red_black_tree.rs" 488 23 488 38] _18 <- { _18 with current =  ^ _17 };
    [#"../red_black_tree.rs" 488 45 488 69] _23 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)));
    [#"../red_black_tree.rs" 488 45 488 69] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_right ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _23))) };
    assume { inv0 ( ^ _23) };
    [#"../red_black_tree.rs" 488 45 488 69] _22 <- ([#"../red_black_tree.rs" 488 45 488 69] as_mut0 _23);
    _23 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 488 45 488 78] _21 <- ([#"../red_black_tree.rs" 488 45 488 78] unwrap0 _22);
    _22 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB4
  }
  BB4 {
    [#"../red_black_tree.rs" 488 40 488 84] _20 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_color ( * _21));
    [#"../red_black_tree.rs" 488 40 488 84] _21 <- { _21 with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * _21 in RedBlackTree_Node_Type.C_Node x0 ( ^ _20) x2 x3 x4) };
    [#"../red_black_tree.rs" 488 40 488 84] _19 <- Borrow.borrow_mut ( * _20);
    [#"../red_black_tree.rs" 488 40 488 84] _20 <- { _20 with current =  ^ _19 };
    [#"../red_black_tree.rs" 488 8 488 85] _16 <- ([#"../red_black_tree.rs" 488 8 488 85] swap0 _17 _19);
    _17 <- any borrowed (RedBlackTree_Color_Type.t_color);
    _19 <- any borrowed (RedBlackTree_Color_Type.t_color);
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] inv1 _21 };
    assume { resolve0 _21 };
    assume { resolve1 _20 };
    assume { resolve1 _18 };
    assert { [@expl:type invariant] inv2 self };
    assume { resolve2 self };
    [#"../red_black_tree.rs" 486 30 489 5] _0 <- ([#"../red_black_tree.rs" 486 30 489 5] ());
    return _0
  }
  
end
module RedBlackTree_Impl14_Balance
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant9 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant9 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv9 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv9 x = true
  type deep_model_ty0
  predicate invariant8 (self : deep_model_ty0)
  val invariant8 (self : deep_model_ty0) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : deep_model_ty0)
  val inv8 (_x : deep_model_ty0) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : deep_model_ty0 . inv8 x = true
  predicate invariant7 (self : v)
  val invariant7 (self : v) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : v)
  val inv7 (_x : v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : v . inv7 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant6 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant6 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv6 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv6 x = true
  predicate invariant5 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant5 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv5 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv5 x = true
  predicate invariant4 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant4 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv4 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv4 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv4 : forall x : RedBlackTree_Node_Type.t_node k v . inv4 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv8 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv8 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv8 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv8 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv8 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv8 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv8 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv8 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv8 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv8 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv8 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant3 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant3 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv3 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv3 x = true
  use prelude.Borrow
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant1 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant0 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant0 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv0 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Node_Type.t_node k v . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv4 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  predicate color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant0 (RedBlackTree_Node_Type.node_left self) /\ color_invariant0 (RedBlackTree_Node_Type.node_right self)
  val color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant1 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  use prelude.Int
  function height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height1 left
        | RedBlackTree_Color_Type.C_Black -> height1 left + 1
        end
      end
  val height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv9 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv9 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height1 self >= 0)
  function height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height1 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv0 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv0 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv4 node -> self = node -> height0 self = height1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping1 left k v \/ has_mapping1 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping1 self k v }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping1 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping1 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv0 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv8 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv7 v}
    ensures { result = has_mapping0 self k v }
    
  axiom has_mapping0_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv0 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv8 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv7 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv4 node -> self = node -> has_mapping0 self k v = has_mapping1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv7 v -> inv8 k -> has_mapping0 self k v = has_mapping0 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height1 (RedBlackTree_Node_Type.node_left self) = height1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant1 left /\ height_invariant1 right
      end
  val height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant1 (RedBlackTree_Node_Type.node_left self) /\ height_invariant1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv7 v -> inv8 k -> has_mapping1 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv7 v -> inv8 k -> has_mapping1 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant1 left /\ bst_invariant1 right
      end
  val bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant1 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant1 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant0 self }
    
  val flip_colors0 [#"../red_black_tree.rs" 486 4 486 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 472 15 472 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 473 15 473 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 474 15 474 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 475 15 475 60] color0 (RedBlackTree_Node_Type.node_left ( * self)) = color0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 486 24 486 28] inv2 self}
    ensures { [#"../red_black_tree.rs" 476 14 476 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 477 14 477 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 478 14 478 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 479 14 479 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 480 4 482 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . inv4 l2 /\ inv4 l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 483 4 485 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . inv4 r2 /\ inv4 r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  val rotate_right0 [#"../red_black_tree.rs" 412 4 412 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 400 15 400 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 401 15 401 42] color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 412 25 412 29] inv2 self}
    ensures { [#"../red_black_tree.rs" 402 14 402 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 403 14 403 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 14 404 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 405 14 405 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 406 14 406 42] color0 (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 407 14 407 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 408 4 411 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv4 r /\ inv4 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
  predicate resolve0 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve0 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve0 self }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv6 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv1 result }
    
  val as_ref0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv5 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 46 16 46 60] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 47 16 49 18] self = Core_Option_Option_Type.C_None \/ (exists r : RedBlackTree_Node_Type.t_node k v . inv1 r /\ result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    ensures { inv6 result }
    
  val rotate_left0 [#"../red_black_tree.rs" 462 4 462 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 450 15 450 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 451 15 451 43] color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 462 24 462 28] inv2 self}
    ensures { [#"../red_black_tree.rs" 452 14 452 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 453 14 453 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 454 14 454 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 455 14 455 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 456 14 456 41] color0 (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 457 14 457 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 458 4 461 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv4 r /\ inv4 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv3 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  let rec cfg balance [#"../red_black_tree.rs" 510 4 510 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 491 15 491 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 492 4 493 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 494 4 495 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 496 4 496 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    requires {[#"../red_black_tree.rs" 510 20 510 24] inv2 self}
    ensures { [#"../red_black_tree.rs" 497 14 497 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 14 498 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 14 499 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 34] color_invariant0 (RedBlackTree_Node_Type.node_left ( * self)) /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 505 63] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 4 507 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 508 4 509 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (RedBlackTree_Node_Type.t_node k v) = self;
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _19 : bool;
  var _21 : ();
  var _22 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _23 : ();
  var _24 : bool;
  var _25 : bool;
  var _27 : bool;
  var _29 : RedBlackTree_Node_Type.t_node k v;
  var _30 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _32 : ();
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : bool;
  var _35 : bool;
  var _37 : bool;
  var _39 : ();
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 511 11 511 30] _16 <- ([#"../red_black_tree.rs" 511 11 511 30] is_red0 ([#"../red_black_tree.rs" 511 11 511 30] RedBlackTree_Node_Type.node_right ( * self)));
    goto BB4
  }
  BB1 {
    [#"../red_black_tree.rs" 511 11 511 53] _15 <- ([#"../red_black_tree.rs" 511 11 511 53] [#"../red_black_tree.rs" 511 11 511 53] false);
    goto BB3
  }
  BB2 {
    [#"../red_black_tree.rs" 511 35 511 53] _19 <- ([#"../red_black_tree.rs" 511 35 511 53] is_red0 ([#"../red_black_tree.rs" 511 35 511 53] RedBlackTree_Node_Type.node_left ( * self)));
    goto BB5
  }
  BB3 {
    switch (_15)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB4 {
    switch (_16)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 511 11 511 53] _15 <- ([#"../red_black_tree.rs" 511 34 511 53] not _19);
    _19 <- any bool;
    goto BB3
  }
  BB6 {
    [#"../red_black_tree.rs" 512 12 512 30] _22 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 512 12 512 30] self <- { self with current =  ^ _22 };
    assume { inv0 ( ^ _22) };
    [#"../red_black_tree.rs" 512 12 512 30] _21 <- ([#"../red_black_tree.rs" 512 12 512 30] rotate_left0 _22);
    _22 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB7
  }
  BB7 {
    [#"../red_black_tree.rs" 511 54 513 9] _14 <- ([#"../red_black_tree.rs" 511 54 513 9] ());
    goto BB9
  }
  BB8 {
    [#"../red_black_tree.rs" 513 9 513 9] _14 <- ([#"../red_black_tree.rs" 513 9 513 9] ());
    goto BB9
  }
  BB9 {
    [#"../red_black_tree.rs" 515 11 515 29] _25 <- ([#"../red_black_tree.rs" 515 11 515 29] is_red0 ([#"../red_black_tree.rs" 515 11 515 29] RedBlackTree_Node_Type.node_left ( * self)));
    goto BB13
  }
  BB10 {
    [#"../red_black_tree.rs" 515 11 515 79] _24 <- ([#"../red_black_tree.rs" 515 11 515 79] [#"../red_black_tree.rs" 515 11 515 79] false);
    goto BB12
  }
  BB11 {
    [#"../red_black_tree.rs" 515 33 515 56] _30 <- ([#"../red_black_tree.rs" 515 33 515 56] as_ref0 ([#"../red_black_tree.rs" 515 33 515 56] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self))));
    goto BB14
  }
  BB12 {
    switch (_24)
      | False -> goto BB19
      | True -> goto BB17
      end
  }
  BB13 {
    switch (_25)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB14 {
    [#"../red_black_tree.rs" 515 33 515 65] _29 <- ([#"../red_black_tree.rs" 515 33 515 65] unwrap0 _30);
    _30 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB15
  }
  BB15 {
    assert { [@expl:type invariant] inv1 _29 };
    assume { resolve0 _29 };
    [#"../red_black_tree.rs" 515 33 515 79] _27 <- ([#"../red_black_tree.rs" 515 33 515 79] is_red0 ([#"../red_black_tree.rs" 515 33 515 79] RedBlackTree_Node_Type.node_left _29));
    goto BB16
  }
  BB16 {
    [#"../red_black_tree.rs" 515 11 515 79] _24 <- ([#"../red_black_tree.rs" 515 11 515 79] _27);
    [#"../red_black_tree.rs" 515 11 515 79] _27 <- any bool;
    goto BB12
  }
  BB17 {
    [#"../red_black_tree.rs" 516 12 516 31] _33 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 516 12 516 31] self <- { self with current =  ^ _33 };
    assume { inv0 ( ^ _33) };
    [#"../red_black_tree.rs" 516 12 516 31] _32 <- ([#"../red_black_tree.rs" 516 12 516 31] rotate_right0 _33);
    _33 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB18
  }
  BB18 {
    [#"../red_black_tree.rs" 515 80 517 9] _23 <- ([#"../red_black_tree.rs" 515 80 517 9] ());
    goto BB20
  }
  BB19 {
    [#"../red_black_tree.rs" 517 9 517 9] _23 <- ([#"../red_black_tree.rs" 517 9 517 9] ());
    goto BB20
  }
  BB20 {
    [#"../red_black_tree.rs" 519 11 519 29] _35 <- ([#"../red_black_tree.rs" 519 11 519 29] is_red0 ([#"../red_black_tree.rs" 519 11 519 29] RedBlackTree_Node_Type.node_left ( * self)));
    goto BB24
  }
  BB21 {
    [#"../red_black_tree.rs" 519 11 519 52] _34 <- ([#"../red_black_tree.rs" 519 11 519 52] [#"../red_black_tree.rs" 519 11 519 52] false);
    goto BB23
  }
  BB22 {
    [#"../red_black_tree.rs" 519 33 519 52] _37 <- ([#"../red_black_tree.rs" 519 33 519 52] is_red0 ([#"../red_black_tree.rs" 519 33 519 52] RedBlackTree_Node_Type.node_right ( * self)));
    goto BB25
  }
  BB23 {
    switch (_34)
      | False -> goto BB28
      | True -> goto BB26
      end
  }
  BB24 {
    switch (_35)
      | False -> goto BB21
      | True -> goto BB22
      end
  }
  BB25 {
    [#"../red_black_tree.rs" 519 11 519 52] _34 <- ([#"../red_black_tree.rs" 519 11 519 52] _37);
    [#"../red_black_tree.rs" 519 11 519 52] _37 <- any bool;
    goto BB23
  }
  BB26 {
    [#"../red_black_tree.rs" 520 12 520 30] _40 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 520 12 520 30] self <- { self with current =  ^ _40 };
    assume { inv0 ( ^ _40) };
    [#"../red_black_tree.rs" 520 12 520 30] _39 <- ([#"../red_black_tree.rs" 520 12 520 30] flip_colors0 _40);
    _40 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB27
  }
  BB27 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    [#"../red_black_tree.rs" 519 53 521 9] _0 <- ([#"../red_black_tree.rs" 519 53 521 9] ());
    goto BB29
  }
  BB28 {
    assert { [@expl:type invariant] inv2 self };
    assume { resolve1 self };
    [#"../red_black_tree.rs" 521 9 521 9] _0 <- ([#"../red_black_tree.rs" 521 9 521 9] ());
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl14_MoveRedLeft
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant10 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant10 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv10 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv10 x = true
  predicate invariant9 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant9 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv9 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv9 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant8 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant8 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv8 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv8 x = true
  predicate invariant7 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant7 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv7 x = true
  predicate invariant6 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv6 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv6 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv6 : forall x : RedBlackTree_Node_Type.t_node k v . inv6 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv5 (_x : deep_model_ty0)
  val inv5 (_x : deep_model_ty0) : bool
    ensures { result = inv5 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv5 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv5 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv5 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv5 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv5 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv5 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv5 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv5 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv5 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv5 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv5 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant5 (self : deep_model_ty0)
  val invariant5 (self : deep_model_ty0) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : deep_model_ty0 . inv5 x = true
  predicate invariant4 (self : v)
  val invariant4 (self : v) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : v)
  val inv4 (_x : v) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : v . inv4 x = true
  predicate invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv3 x = true
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  predicate invariant0 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant0 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv0 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Node_Type.t_node k v . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant1 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant1 left /\ color_invariant1 right
      end
  val color_invariant1 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant1 (RedBlackTree_Node_Type.node_left self) /\ color_invariant1 (RedBlackTree_Node_Type.node_right self)
  val color_invariant0 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant0 self }
    
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping1 left k v \/ has_mapping1 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping1 self k v }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping1 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping1 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv0 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv5 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv4 v}
    ensures { result = has_mapping0 self k v }
    
  axiom has_mapping0_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv0 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv5 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv4 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> has_mapping0 self k v = has_mapping1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  use prelude.Int
  function height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height1 left
        | RedBlackTree_Color_Type.C_Black -> height1 left + 1
        end
      end
  val height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv10 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv10 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height1 self >= 0)
  function height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height1 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv0 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv0 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> height0 self = height1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant1 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv6 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant0 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height1 (RedBlackTree_Node_Type.node_left self) = height1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant1 left /\ height_invariant1 right
      end
  val height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant1 (RedBlackTree_Node_Type.node_left self) /\ height_invariant1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping1 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping1 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant1 left /\ bst_invariant1 right
      end
  val bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant1 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant1 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 self k v = has_mapping0 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  val rotate_left0 [#"../red_black_tree.rs" 462 4 462 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 450 15 450 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 451 15 451 43] color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 462 24 462 28] inv3 self}
    ensures { [#"../red_black_tree.rs" 452 14 452 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 453 14 453 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 454 14 454 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 455 14 455 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 456 14 456 41] color0 (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 457 14 457 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 458 4 461 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv6 r /\ inv6 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
  val rotate_right0 [#"../red_black_tree.rs" 412 4 412 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 400 15 400 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 401 15 401 42] color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 412 25 412 29] inv3 self}
    ensures { [#"../red_black_tree.rs" 402 14 402 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 403 14 403 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 14 404 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 405 14 405 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 406 14 406 42] color0 (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 407 14 407 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 408 4 411 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv6 r /\ inv6 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv9 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv8 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv7 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv8 result }
    
  val flip_colors0 [#"../red_black_tree.rs" 486 4 486 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 472 15 472 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 473 15 473 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 474 15 474 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 475 15 475 60] color0 (RedBlackTree_Node_Type.node_left ( * self)) = color0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 486 24 486 28] inv3 self}
    ensures { [#"../red_black_tree.rs" 476 14 476 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 477 14 477 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 478 14 478 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 479 14 479 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 480 4 482 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . inv6 l2 /\ inv6 l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 483 4 485 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . inv6 r2 /\ inv6 r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
  let rec cfg move_red_left [#"../red_black_tree.rs" 542 4 542 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 524 15 524 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 525 15 525 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 526 15 526 86] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 542 26 542 30] inv3 self}
    ensures { [#"../red_black_tree.rs" 527 14 527 44] internal_invariant0 ( * result) }
    ensures { [#"../red_black_tree.rs" 528 4 530 48] internal_invariant0 ( ^ result) /\ height0 ( * result) = height0 ( ^ result) /\ (forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( ^ result) k v -> has_mapping0 ( * result) k v) -> internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 531 4 531 97] height0 ( * result) = height0 ( ^ result) -> height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 532 14 532 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 533 4 533 105] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( * result) k v -> has_mapping0 ( * self) k v }
    ensures { [#"../red_black_tree.rs" 534 4 535 47] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( * self) k v /\ le_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) -> has_mapping0 ( * result) k v }
    ensures { [#"../red_black_tree.rs" 536 4 537 108] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( ^ self) k v = (has_mapping0 ( ^ result) k v \/ has_mapping0 ( * self) k v /\ not has_mapping0 ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 538 14 539 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 540 4 541 45] color_invariant0 ( ^ result) /\ (color0 (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 542 35 542 44] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var self : borrowed (RedBlackTree_Node_Type.t_node k v) = self;
  var _15 : ();
  var _16 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _18 : bool;
  var _20 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _21 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _24 : ();
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _28 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _29 : ();
  var _30 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _31 : ();
  var _32 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _35 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 543 8 543 26] _16 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 543 8 543 26] self <- { self with current =  ^ _16 };
    assume { inv0 ( ^ _16) };
    [#"../red_black_tree.rs" 543 8 543 26] _15 <- ([#"../red_black_tree.rs" 543 8 543 26] flip_colors0 _16);
    _16 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 544 11 544 35] _22 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)));
    [#"../red_black_tree.rs" 544 11 544 35] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_right ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _22))) };
    assume { inv1 ( ^ _22) };
    [#"../red_black_tree.rs" 544 11 544 35] _21 <- ([#"../red_black_tree.rs" 544 11 544 35] as_mut0 _22);
    _22 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 544 11 544 44] _20 <- ([#"../red_black_tree.rs" 544 11 544 44] unwrap0 _21);
    _21 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 544 11 544 58] _18 <- ([#"../red_black_tree.rs" 544 11 544 58] is_red0 ([#"../red_black_tree.rs" 544 11 544 58] RedBlackTree_Node_Type.node_left ( * _20)));
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] inv2 _20 };
    assume { resolve0 _20 };
    switch (_18)
      | False -> goto BB13
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 545 12 545 36] _28 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)));
    [#"../red_black_tree.rs" 545 12 545 36] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_right ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _28))) };
    assume { inv1 ( ^ _28) };
    [#"../red_black_tree.rs" 545 12 545 36] _27 <- ([#"../red_black_tree.rs" 545 12 545 36] as_mut0 _28);
    _28 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB6
  }
  BB6 {
    [#"../red_black_tree.rs" 545 12 545 45] _26 <- ([#"../red_black_tree.rs" 545 12 545 45] unwrap0 _27);
    _27 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB7
  }
  BB7 {
    [#"../red_black_tree.rs" 545 12 545 60] _25 <- Borrow.borrow_mut ( * _26);
    [#"../red_black_tree.rs" 545 12 545 60] _26 <- { _26 with current =  ^ _25 };
    assume { inv0 ( ^ _25) };
    [#"../red_black_tree.rs" 545 12 545 60] _24 <- ([#"../red_black_tree.rs" 545 12 545 60] rotate_right0 _25);
    _25 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB8
  }
  BB8 {
    assert { [@expl:type invariant] inv2 _26 };
    assume { resolve0 _26 };
    [#"../red_black_tree.rs" 546 12 546 30] _30 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 546 12 546 30] self <- { self with current =  ^ _30 };
    assume { inv0 ( ^ _30) };
    [#"../red_black_tree.rs" 546 12 546 30] _29 <- ([#"../red_black_tree.rs" 546 12 546 30] rotate_left0 _30);
    _30 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB9
  }
  BB9 {
    [#"../red_black_tree.rs" 547 12 547 30] _32 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 547 12 547 30] self <- { self with current =  ^ _32 };
    assume { inv0 ( ^ _32) };
    [#"../red_black_tree.rs" 547 12 547 30] _31 <- ([#"../red_black_tree.rs" 547 12 547 30] flip_colors0 _32);
    _32 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB10
  }
  BB10 {
    [#"../red_black_tree.rs" 548 19 548 42] _35 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)));
    [#"../red_black_tree.rs" 548 19 548 42] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_left ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _35)) x1 x2 x3 x4) };
    assume { inv1 ( ^ _35) };
    [#"../red_black_tree.rs" 548 19 548 42] _34 <- ([#"../red_black_tree.rs" 548 19 548 42] as_mut0 _35);
    _35 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB11
  }
  BB11 {
    [#"../red_black_tree.rs" 548 19 548 51] _33 <- ([#"../red_black_tree.rs" 548 19 548 51] unwrap0 _34);
    _34 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB12
  }
  BB12 {
    [#"../red_black_tree.rs" 548 19 548 51] _0 <- Borrow.borrow_mut ( * _33);
    [#"../red_black_tree.rs" 548 19 548 51] _33 <- { _33 with current =  ^ _0 };
    assume { inv0 ( ^ _0) };
    assert { [@expl:type invariant] inv2 _33 };
    assume { resolve0 _33 };
    goto BB16
  }
  BB13 {
    [#"../red_black_tree.rs" 550 15 550 19] _0 <- ([#"../red_black_tree.rs" 550 15 550 19] self);
    [#"../red_black_tree.rs" 550 15 550 19] self <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB14
  }
  BB14 {
    return _0
  }
  BB16 {
    assert { [@expl:type invariant] inv3 self };
    assume { resolve1 self };
    goto BB14
  }
  
end
module RedBlackTree_Impl14_MoveRedRight
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant10 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant10 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv10 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv10 x = true
  predicate invariant9 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant9 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv9 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv9 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant8 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant8 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv8 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv8 x = true
  predicate invariant7 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant7 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv7 x = true
  predicate invariant6 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv6 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv6 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv6 : forall x : RedBlackTree_Node_Type.t_node k v . inv6 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv5 (_x : deep_model_ty0)
  val inv5 (_x : deep_model_ty0) : bool
    ensures { result = inv5 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv5 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv5 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv5 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv5 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv5 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv5 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv5 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv5 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv5 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv5 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv5 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv5 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv5 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv5 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant5 (self : deep_model_ty0)
  val invariant5 (self : deep_model_ty0) : bool
    ensures { result = invariant5 self }
    
  axiom inv5 : forall x : deep_model_ty0 . inv5 x = true
  predicate invariant4 (self : v)
  val invariant4 (self : v) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : v)
  val inv4 (_x : v) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : v . inv4 x = true
  predicate invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv3 x = true
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  predicate invariant0 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant0 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv0 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Node_Type.t_node k v . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant1 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant1 left /\ color_invariant1 right
      end
  val color_invariant1 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant1 (RedBlackTree_Node_Type.node_left self) /\ color_invariant1 (RedBlackTree_Node_Type.node_right self)
  val color_invariant0 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant0 self }
    
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping1 left k v \/ has_mapping1 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping1 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping1 self k v }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping1 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping1 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping0 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv0 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv5 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv4 v}
    ensures { result = has_mapping0 self k v }
    
  axiom has_mapping0_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv0 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv5 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv4 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> has_mapping0 self k v = has_mapping1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  use prelude.Int
  function height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height1 left
        | RedBlackTree_Color_Type.C_Black -> height1 left + 1
        end
      end
  val height1 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv10 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv10 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height1 self >= 0)
  function height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height1 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height1 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height0 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv0 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv0 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv6 node -> self = node -> height0 self = height1 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant1 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv6 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant0 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height1 (RedBlackTree_Node_Type.node_left self) = height1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant1 left /\ height_invariant1 right
      end
  val height_invariant1 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant1 (RedBlackTree_Node_Type.node_left self) /\ height_invariant1 (RedBlackTree_Node_Type.node_right self)
  val height_invariant0 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping1 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping1 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant1 left /\ bst_invariant1 right
      end
  val bst_invariant1 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant1 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant1 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant0 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 self k v = has_mapping0 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  val rotate_right0 [#"../red_black_tree.rs" 412 4 412 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 400 15 400 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 401 15 401 42] color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 412 25 412 29] inv3 self}
    ensures { [#"../red_black_tree.rs" 402 14 402 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 403 14 403 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 14 404 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 405 14 405 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 406 14 406 42] color0 (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 407 14 407 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 408 4 411 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv6 r /\ inv6 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv9 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv8 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv7 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv8 result }
    
  val flip_colors0 [#"../red_black_tree.rs" 486 4 486 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 472 15 472 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 473 15 473 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 474 15 474 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 475 15 475 60] color0 (RedBlackTree_Node_Type.node_left ( * self)) = color0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 486 24 486 28] inv3 self}
    ensures { [#"../red_black_tree.rs" 476 14 476 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 477 14 477 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 478 14 478 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 479 14 479 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 480 4 482 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . inv6 l2 /\ inv6 l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 483 4 485 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . inv6 r2 /\ inv6 r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
  let rec cfg move_red_right [#"../red_black_tree.rs" 571 4 571 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 553 15 553 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 554 15 554 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 555 15 555 86] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    requires {[#"../red_black_tree.rs" 571 27 571 31] inv3 self}
    ensures { [#"../red_black_tree.rs" 556 14 556 44] internal_invariant0 ( * result) }
    ensures { [#"../red_black_tree.rs" 557 4 559 48] internal_invariant0 ( ^ result) /\ height0 ( * result) = height0 ( ^ result) /\ (forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( ^ result) k v -> has_mapping0 ( * result) k v) -> internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 560 4 560 97] height0 ( * result) = height0 ( ^ result) -> height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 561 14 561 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 562 4 562 105] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( * result) k v -> has_mapping0 ( * self) k v }
    ensures { [#"../red_black_tree.rs" 563 4 564 47] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( * self) k v /\ le_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) k -> has_mapping0 ( * result) k v }
    ensures { [#"../red_black_tree.rs" 565 4 566 108] forall v : v . forall k : deep_model_ty0 . inv4 v -> inv5 k -> has_mapping0 ( ^ self) k v = (has_mapping0 ( ^ result) k v \/ has_mapping0 ( * self) k v /\ not has_mapping0 ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 567 14 568 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 569 4 570 45] color_invariant0 ( ^ result) /\ (color0 (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 571 36 571 45] inv3 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var self : borrowed (RedBlackTree_Node_Type.t_node k v) = self;
  var _15 : ();
  var _16 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _18 : bool;
  var _20 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _21 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _24 : ();
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : ();
  var _27 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _28 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _29 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _30 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 572 8 572 26] _16 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 572 8 572 26] self <- { self with current =  ^ _16 };
    assume { inv0 ( ^ _16) };
    [#"../red_black_tree.rs" 572 8 572 26] _15 <- ([#"../red_black_tree.rs" 572 8 572 26] flip_colors0 _16);
    _16 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 573 11 573 34] _22 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)));
    [#"../red_black_tree.rs" 573 11 573 34] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_left ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _22)) x1 x2 x3 x4) };
    assume { inv1 ( ^ _22) };
    [#"../red_black_tree.rs" 573 11 573 34] _21 <- ([#"../red_black_tree.rs" 573 11 573 34] as_mut0 _22);
    _22 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 573 11 573 43] _20 <- ([#"../red_black_tree.rs" 573 11 573 43] unwrap0 _21);
    _21 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 573 11 573 57] _18 <- ([#"../red_black_tree.rs" 573 11 573 57] is_red0 ([#"../red_black_tree.rs" 573 11 573 57] RedBlackTree_Node_Type.node_left ( * _20)));
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] inv2 _20 };
    assume { resolve0 _20 };
    switch (_18)
      | False -> goto BB10
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 574 12 574 31] _25 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 574 12 574 31] self <- { self with current =  ^ _25 };
    assume { inv0 ( ^ _25) };
    [#"../red_black_tree.rs" 574 12 574 31] _24 <- ([#"../red_black_tree.rs" 574 12 574 31] rotate_right0 _25);
    _25 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB6
  }
  BB6 {
    [#"../red_black_tree.rs" 575 12 575 30] _27 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 575 12 575 30] self <- { self with current =  ^ _27 };
    assume { inv0 ( ^ _27) };
    [#"../red_black_tree.rs" 575 12 575 30] _26 <- ([#"../red_black_tree.rs" 575 12 575 30] flip_colors0 _27);
    _27 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB7
  }
  BB7 {
    [#"../red_black_tree.rs" 576 19 576 43] _30 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)));
    [#"../red_black_tree.rs" 576 19 576 43] self <- { self with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * self in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 (let RedBlackTree_Tree_Type.C_Tree x0 = RedBlackTree_Node_Type.node_right ( * self) in RedBlackTree_Tree_Type.C_Tree ( ^ _30))) };
    assume { inv1 ( ^ _30) };
    [#"../red_black_tree.rs" 576 19 576 43] _29 <- ([#"../red_black_tree.rs" 576 19 576 43] as_mut0 _30);
    _30 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB8
  }
  BB8 {
    [#"../red_black_tree.rs" 576 19 576 52] _28 <- ([#"../red_black_tree.rs" 576 19 576 52] unwrap0 _29);
    _29 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB9
  }
  BB9 {
    [#"../red_black_tree.rs" 576 19 576 52] _0 <- Borrow.borrow_mut ( * _28);
    [#"../red_black_tree.rs" 576 19 576 52] _28 <- { _28 with current =  ^ _0 };
    assume { inv0 ( ^ _0) };
    assert { [@expl:type invariant] inv2 _28 };
    assume { resolve0 _28 };
    goto BB13
  }
  BB10 {
    [#"../red_black_tree.rs" 578 15 578 19] _0 <- ([#"../red_black_tree.rs" 578 15 578 19] self);
    [#"../red_black_tree.rs" 578 15 578 19] self <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB11
  }
  BB11 {
    return _0
  }
  BB13 {
    assert { [@expl:type invariant] inv3 self };
    assume { resolve1 self };
    goto BB11
  }
  
end
module RedBlackTree_Impl15_New
  type k
  type v
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv2 (_x : deep_model_ty0)
  val inv2 (_x : deep_model_ty0) : bool
    ensures { result = inv2 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant3 (self : deep_model_ty0)
  val invariant3 (self : deep_model_ty0) : bool
    ensures { result = invariant3 self }
    
  axiom inv2 : forall x : deep_model_ty0 . inv2 x = true
  predicate invariant2 (self : v)
  val invariant2 (self : v) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : v)
  val inv1 (_x : v) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : v . inv1 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant1 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant1 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv0 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv0 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv2 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv2 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  use map.Const
  use map.Map
  use map.Map
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  function shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  let rec cfg new [#"../red_black_tree.rs" 588 4 588 30] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : RedBlackTree_Tree_Type.t_tree k v
    ensures { [#"../red_black_tree.rs" 586 14 586 43] shallow_model0 result = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 587 14 587 32] invariant0 result }
    ensures { [#"../red_black_tree.rs" 588 20 588 30] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Tree_Type.t_tree k v;
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 589 8 589 27] _0 <- ([#"../red_black_tree.rs" 589 8 589 27] RedBlackTree_Tree_Type.C_Tree ([#"../red_black_tree.rs" 589 21 589 25] Core_Option_Option_Type.C_None));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module RedBlackTree_Impl15_InsertRec
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use prelude.Borrow
  predicate invariant11 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant11 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv11 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv11 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv10 (_x : deep_model_ty0)
  val inv10 (_x : deep_model_ty0) : bool
    ensures { result = inv10 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant10 (self : deep_model_ty0)
  val invariant10 (self : deep_model_ty0) : bool
    ensures { result = invariant10 self }
    
  axiom inv10 : forall x : deep_model_ty0 . inv10 x = true
  predicate invariant9 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant9 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv9 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : RedBlackTree_Node_Type.t_node k v . inv9 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant8 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant8 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv8 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv8 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant7 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant7 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv7 x = true
  predicate invariant6 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant6 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv6 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv6 x = true
  predicate invariant5 (self : v)
  val invariant5 (self : v) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : v)
  val inv5 (_x : v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : v . inv5 x = true
  predicate invariant4 (self : k)
  val invariant4 (self : k) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : k)
  val inv4 (_x : k) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : k . inv4 x = true
  predicate invariant3 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant3 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv3 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv3 x = true
  predicate invariant2 (self : k)
  val invariant2 (self : k) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : k)
  val inv2 (_x : k) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : k . inv2 x = true
  predicate invariant1 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant1 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv1 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv3 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv3 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv5 v -> inv10 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv5 v -> inv10 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate resolve6 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val resolve6 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve6 self }
    
  predicate color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant0 (RedBlackTree_Node_Type.node_left self) /\ color_invariant0 (RedBlackTree_Node_Type.node_right self)
  val color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant1 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height0 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv9 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv9 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> height1 self = height0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  predicate has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping0 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv9 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv10 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv5 v}
    ensures { result = has_mapping1 self k v }
    
  axiom has_mapping1_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv9 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv10 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv5 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> has_mapping1 self k v = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv5 v -> inv10 k -> has_mapping1 self k v = has_mapping1 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant0 (RedBlackTree_Node_Type.node_left self) /\ height_invariant0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant0 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant0 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant1 self /\ height_invariant1 self
  val internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant1 self }
    
  val balance0 [#"../red_black_tree.rs" 510 4 510 25] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 491 15 491 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 492 4 493 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 494 4 495 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 496 4 496 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    requires {[#"../red_black_tree.rs" 510 20 510 24] inv11 self}
    ensures { [#"../red_black_tree.rs" 497 14 497 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 14 498 42] internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 14 499 50] height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 34] color_invariant0 (RedBlackTree_Node_Type.node_left ( * self)) /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 505 63] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 4 507 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 508 4 509 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
  predicate resolve5 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve5 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve5 self }
    
  predicate resolve4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : v)
  val resolve2 (self : v) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : k)
  val resolve1 (self : k) : bool
    ensures { result = resolve1 self }
    
  val cmp0 (self : k) (other : k) : Core_Cmp_Ordering_Type.t_ordering
    requires {inv2 self}
    requires {inv2 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85] result = cmp_log0 (deep_model0 self) (deep_model0 other) }
    
  predicate resolve0 (self : k)
  val resolve0 (self : k) : bool
    ensures { result = resolve0 self }
    
  let rec cfg insert_rec [#"../red_black_tree.rs" 600 4 600 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 592 15 592 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 593 15 593 40] color_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 600 23 600 27] inv8 self}
    requires {[#"../red_black_tree.rs" 600 29 600 32] inv4 key}
    requires {[#"../red_black_tree.rs" 600 37 600 40] inv5 val'}
    ensures { [#"../red_black_tree.rs" 594 14 594 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 595 14 595 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 596 14 597 39] match_t0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) /\ color0 ( * self) = RedBlackTree_Color_Type.C_Red \/ color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 598 14 598 56] has_mapping0 ( ^ self) (deep_model0 key) val' }
    ensures { [#"../red_black_tree.rs" 599 4 599 127] forall v : v . forall k : deep_model_ty0 . inv5 v -> inv10 k -> k = deep_model0 key \/ has_mapping0 ( * self) k v = has_mapping0 ( ^ self) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var key : k = key;
  var val' : v = val';
  var _11 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : ();
  var _15 : Core_Cmp_Ordering_Type.t_ordering;
  var _18 : k;
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _25 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _28 : ();
  var _29 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 601 28 601 42] _11 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 601 28 601 42] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _11)) };
    assume { inv0 ( ^ _11) };
    switch ( * _11)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB19
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    [#"../red_black_tree.rs" 601 20 601 24] node <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * _11));
    [#"../red_black_tree.rs" 601 20 601 24] _11 <- { _11 with current = (let Core_Option_Option_Type.C_Some x0 =  * _11 in Core_Option_Option_Type.C_Some ( ^ node)) };
    assume { inv1 ( ^ node) };
    [#"../red_black_tree.rs" 602 26 602 35] _18 <- ([#"../red_black_tree.rs" 602 26 602 35] RedBlackTree_Node_Type.node_key ( * node));
    assert { [@expl:type invariant] inv2 _18 };
    assume { resolve0 _18 };
    [#"../red_black_tree.rs" 602 18 602 36] _15 <- ([#"../red_black_tree.rs" 602 18 602 36] cmp0 ([#"../red_black_tree.rs" 602 18 602 36] key) ([#"../red_black_tree.rs" 602 26 602 35] _18));
    goto BB5
  }
  BB5 {
    switch (_15)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB6
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB7
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB8
      end
  }
  BB6 {
    goto BB10
  }
  BB7 {
    goto BB12
  }
  BB8 {
    [#"../red_black_tree.rs" 608 27 608 58] _25 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * node));
    [#"../red_black_tree.rs" 608 27 608 58] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _25)) };
    assume { inv3 ( ^ _25) };
    [#"../red_black_tree.rs" 608 27 608 58] _14 <- ([#"../red_black_tree.rs" 608 27 608 58] insert_rec _25 ([#"../red_black_tree.rs" 608 49 608 52] key) ([#"../red_black_tree.rs" 608 54 608 57] val'));
    _25 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    [#"../red_black_tree.rs" 608 49 608 52] key <- any k;
    [#"../red_black_tree.rs" 608 54 608 57] val' <- any v;
    goto BB16
  }
  BB9 {
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    assert { [@expl:type invariant] inv5 val' };
    assume { resolve2 val' };
    assert { [@expl:type invariant] inv4 key };
    assume { resolve1 key };
    assert { [@expl:type invariant] inv7 _11 };
    assume { resolve4 _11 };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve5 self };
    assert { [#"../red_black_tree.rs" 602 18 602 36] false };
    absurd
  }
  BB10 {
    [#"../red_black_tree.rs" 603 24 603 54] _20 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_left ( * node));
    [#"../red_black_tree.rs" 603 24 603 54] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node ( ^ _20) x1 x2 x3 x4) };
    assume { inv3 ( ^ _20) };
    [#"../red_black_tree.rs" 603 24 603 54] _14 <- ([#"../red_black_tree.rs" 603 24 603 54] insert_rec _20 ([#"../red_black_tree.rs" 603 45 603 48] key) ([#"../red_black_tree.rs" 603 50 603 53] val'));
    _20 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    [#"../red_black_tree.rs" 603 45 603 48] key <- any k;
    [#"../red_black_tree.rs" 603 50 603 53] val' <- any v;
    goto BB11
  }
  BB11 {
    goto BB17
  }
  BB12 {
    assert { [@expl:type invariant] inv4 key };
    assume { resolve1 key };
    goto BB13
  }
  BB13 {
    [#"../red_black_tree.rs" 605 20 605 28] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 ([#"../red_black_tree.rs" 605 31 605 34] val') x4) };
    [#"../red_black_tree.rs" 605 31 605 34] val' <- any v;
    assert { [@expl:type invariant] inv5 (RedBlackTree_Node_Type.node_val ( * node)) };
    assume { resolve2 (RedBlackTree_Node_Type.node_val ( * node)) };
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    goto BB15
  }
  BB15 {
    assert { [@expl:type invariant] inv7 _11 };
    assume { resolve4 _11 };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve5 self };
    [#"../red_black_tree.rs" 606 20 606 26] _0 <- ([#"../red_black_tree.rs" 606 20 606 26] ());
    goto BB32
  }
  BB16 {
    goto BB17
  }
  BB17 {
    [#"../red_black_tree.rs" 610 12 610 26] _29 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 610 12 610 26] node <- { node with current =  ^ _29 };
    assume { inv9 ( ^ _29) };
    [#"../red_black_tree.rs" 610 12 610 26] _28 <- ([#"../red_black_tree.rs" 610 12 610 26] balance0 _29);
    _29 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB18
  }
  BB18 {
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    assert { [@expl:type invariant] inv7 _11 };
    assume { resolve4 _11 };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve5 self };
    [#"../red_black_tree.rs" 601 43 611 9] _0 <- ([#"../red_black_tree.rs" 601 43 611 9] ());
    goto BB31
  }
  BB19 {
    assert { [@expl:type invariant] inv7 _11 };
    assume { resolve4 _11 };
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    [#"../red_black_tree.rs" 612 12 612 21] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ([#"../red_black_tree.rs" 612 24 618 15] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 612 38 618 13] RedBlackTree_Node_Type.C_Node ([#"../red_black_tree.rs" 613 22 613 41] RedBlackTree_Tree_Type.C_Tree ([#"../red_black_tree.rs" 613 35 613 39] Core_Option_Option_Type.C_None)) ([#"../red_black_tree.rs" 614 23 614 26] RedBlackTree_Color_Type.C_Red) ([#"../red_black_tree.rs" 615 16 615 19] key) ([#"../red_black_tree.rs" 616 16 616 19] val') ([#"../red_black_tree.rs" 617 23 617 42] RedBlackTree_Tree_Type.C_Tree ([#"../red_black_tree.rs" 617 36 617 40] Core_Option_Option_Type.C_None))))) };
    [#"../red_black_tree.rs" 615 16 615 19] key <- any k;
    [#"../red_black_tree.rs" 616 16 616 19] val' <- any v;
    assert { [@expl:type invariant] inv0 (RedBlackTree_Tree_Type.tree_node ( * self)) };
    assume { resolve6 (RedBlackTree_Tree_Type.tree_node ( * self)) };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve5 self };
    goto BB30
  }
  BB30 {
    [#"../red_black_tree.rs" 619 12 619 18] _0 <- ([#"../red_black_tree.rs" 619 12 619 18] ());
    goto BB32
  }
  BB31 {
    goto BB34
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    return _0
  }
  
end
module RedBlackTree_Impl15_Insert
  type k
  type v
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv6 (_x : deep_model_ty0)
  val inv6 (_x : deep_model_ty0) : bool
    ensures { result = inv6 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv6 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv6 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv6 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv6 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv6 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv6 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv6 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv6 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv6 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv6 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv6 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  predicate invariant11 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant11 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant11 self }
    
  predicate inv10 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv10 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv10 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant10 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant10 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant10 self }
    
  predicate inv9 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv9 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv9 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv9 : forall x : RedBlackTree_Node_Type.t_node k v . inv9 x = true
  use prelude.Borrow
  predicate invariant9 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant9 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant9 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv8 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv8 x = true
  predicate invariant8 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant8 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant8 self }
    
  predicate inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv7 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv7 x = true
  predicate invariant7 (self : deep_model_ty0)
  val invariant7 (self : deep_model_ty0) : bool
    ensures { result = invariant7 self }
    
  axiom inv6 : forall x : deep_model_ty0 . inv6 x = true
  predicate invariant6 (self : v)
  val invariant6 (self : v) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : v)
  val inv5 (_x : v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : v . inv5 x = true
  predicate invariant5 (self : k)
  val invariant5 (self : k) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : k)
  val inv4 (_x : k) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : k . inv4 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv3 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv3 x = true
  predicate invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  predicate invariant1 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant1 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  use map.Const
  function shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  function shallow_model1 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model0 ( * self)
  val shallow_model1 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv0 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv0 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv5 v -> inv6 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv5 v -> inv6 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  use prelude.Ghost
  predicate resolve2 (self : Ghost.ghost_ty ())
  val resolve2 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve2 self }
    
  use prelude.Ghost
  use map.Map
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv0 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv10 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv6 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv0 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv10 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv6 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv5 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv0 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv10 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv6 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv0 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv10 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv6 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv5 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv0 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv6 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv0 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv6 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv5 v -> has_mapping0 self k v = (Map.get (shallow_model0 self) k = Core_Option_Option_Type.C_Some v))
  predicate resolve1 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv8 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv7 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv8 result }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv9 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  val insert_rec0 [#"../red_black_tree.rs" 600 4 600 44] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 592 15 592 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 593 15 593 40] color_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 600 23 600 27] inv3 self}
    requires {[#"../red_black_tree.rs" 600 29 600 32] inv4 key}
    requires {[#"../red_black_tree.rs" 600 37 600 40] inv5 val'}
    ensures { [#"../red_black_tree.rs" 594 14 594 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 595 14 595 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 596 14 597 39] match_t0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) /\ color0 ( * self) = RedBlackTree_Color_Type.C_Red \/ color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 598 14 598 56] has_mapping0 ( ^ self) (deep_model0 key) val' }
    ensures { [#"../red_black_tree.rs" 599 4 599 127] forall v : v . forall k : deep_model_ty0 . inv5 v -> inv6 k -> k = deep_model0 key \/ has_mapping0 ( * self) k v = has_mapping0 ( ^ self) k v }
    
  let rec cfg insert [#"../red_black_tree.rs" 626 4 626 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 623 15 623 34] invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 626 23 626 27] inv3 self}
    requires {[#"../red_black_tree.rs" 626 29 626 32] inv4 key}
    requires {[#"../red_black_tree.rs" 626 37 626 40] inv5 val'}
    ensures { [#"../red_black_tree.rs" 624 14 624 33] invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 625 14 625 64] shallow_model0 ( ^ self) = Map.set (shallow_model1 self) (deep_model0 key) (Core_Option_Option_Type.C_Some val') }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var key : k = key;
  var val' : v = val';
  var _7 : ();
  var _8 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _14 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _15 : Ghost.ghost_ty ();
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 627 8 627 33] _8 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 627 8 627 33] self <- { self with current =  ^ _8 };
    assume { inv0 ( ^ _8) };
    [#"../red_black_tree.rs" 627 8 627 33] _7 <- ([#"../red_black_tree.rs" 627 8 627 33] insert_rec0 _8 ([#"../red_black_tree.rs" 627 24 627 27] key) ([#"../red_black_tree.rs" 627 29 627 32] val'));
    _8 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    [#"../red_black_tree.rs" 627 24 627 27] key <- any k;
    [#"../red_black_tree.rs" 627 29 627 32] val' <- any v;
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 628 8 628 26] _14 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 628 8 628 26] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _14)) };
    assume { inv1 ( ^ _14) };
    [#"../red_black_tree.rs" 628 8 628 26] _13 <- ([#"../red_black_tree.rs" 628 8 628 26] as_mut0 _14);
    _14 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 628 8 628 35] _12 <- ([#"../red_black_tree.rs" 628 8 628 35] unwrap0 _13);
    _13 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB4
  }
  BB4 {
    [#"../red_black_tree.rs" 628 8 628 49] _12 <- { _12 with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * _12 in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 628 44 628 49] RedBlackTree_Color_Type.C_Black) x2 x3 x4) };
    assert { [@expl:type invariant] inv2 _12 };
    assume { resolve0 _12 };
    assert { [@expl:type invariant] inv3 self };
    assume { resolve1 self };
    [#"../red_black_tree.rs" 629 8 629 39] _15 <- ([#"../red_black_tree.rs" 629 8 629 39] Ghost.new ());
    goto BB5
  }
  BB5 {
    assume { resolve2 _15 };
    [#"../red_black_tree.rs" 626 45 630 5] _0 <- ([#"../red_black_tree.rs" 626 45 630 5] ());
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMaxRec
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant15 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant15 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv15 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv15 x = true
  predicate invariant14 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant14 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv14 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv14 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant13 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant13 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv13 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv13 x = true
  use prelude.Borrow
  predicate invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv12 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv12 x = true
  predicate invariant11 (self : (k, v))
  val invariant11 (self : (k, v)) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : (k, v))
  val inv11 (_x : (k, v)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : (k, v) . inv11 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv10 (_x : deep_model_ty0)
  val inv10 (_x : deep_model_ty0) : bool
    ensures { result = inv10 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant10 (self : deep_model_ty0)
  val invariant10 (self : deep_model_ty0) : bool
    ensures { result = invariant10 self }
    
  axiom inv10 : forall x : deep_model_ty0 . inv10 x = true
  predicate invariant9 (self : v)
  val invariant9 (self : v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : v)
  val inv9 (_x : v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : v . inv9 x = true
  predicate invariant8 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant8 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv8 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv8 x = true
  predicate invariant7 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant7 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv7 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : RedBlackTree_Node_Type.t_node k v . inv7 x = true
  predicate invariant6 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant6 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv6 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv6 x = true
  predicate invariant5 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant5 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv5 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv5 x = true
  predicate invariant4 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant4 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv4 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv4 x = true
  predicate invariant3 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant3 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv3 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : RedBlackTree_Node_Type.t_node k v . inv3 x = true
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant1 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv8 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv8 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv1 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant0 (RedBlackTree_Node_Type.node_left self) /\ color_invariant0 (RedBlackTree_Node_Type.node_right self)
  val color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant1 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height0 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv3 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv3 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> height1 self = height0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  predicate has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping0 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv3 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv10 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv9 v}
    ensures { result = has_mapping1 self k v }
    
  axiom has_mapping1_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv3 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv10 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv9 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> has_mapping1 self k v = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 self k v = has_mapping1 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant0 (RedBlackTree_Node_Type.node_left self) /\ height_invariant0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant0 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant0 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant1 self /\ height_invariant1 self
  val internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant1 self }
    
  val balance0 [#"../red_black_tree.rs" 510 4 510 25] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 491 15 491 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 492 4 493 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 494 4 495 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 496 4 496 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    requires {[#"../red_black_tree.rs" 510 20 510 24] inv4 self}
    ensures { [#"../red_black_tree.rs" 497 14 497 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 14 498 42] internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 14 499 50] height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 34] color_invariant0 (RedBlackTree_Node_Type.node_left ( * self)) /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 505 63] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 4 507 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 508 4 509 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
  val move_red_right0 [#"../red_black_tree.rs" 571 4 571 45] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 553 15 553 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 554 15 554 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 555 15 555 86] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    requires {[#"../red_black_tree.rs" 571 27 571 31] inv4 self}
    ensures { [#"../red_black_tree.rs" 556 14 556 44] internal_invariant1 ( * result) }
    ensures { [#"../red_black_tree.rs" 557 4 559 48] internal_invariant1 ( ^ result) /\ height1 ( * result) = height1 ( ^ result) /\ (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( ^ result) k v -> has_mapping1 ( * result) k v) -> internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 560 4 560 97] height1 ( * result) = height1 ( ^ result) -> height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 561 14 561 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 562 4 562 105] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( * result) k v -> has_mapping1 ( * self) k v }
    ensures { [#"../red_black_tree.rs" 563 4 564 47] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( * self) k v /\ le_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) k -> has_mapping1 ( * result) k v }
    ensures { [#"../red_black_tree.rs" 565 4 566 108] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( ^ self) k v = (has_mapping1 ( ^ result) k v \/ has_mapping1 ( * self) k v /\ not has_mapping1 ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 567 14 568 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 569 4 570 45] color_invariant1 ( ^ result) /\ (color0 (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> color_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 571 36 571 45] inv4 result }
    
  predicate resolve5 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve5 self }
    
  val unwrap2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv15 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv7 result }
    
  val as_ref0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv14 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 46 16 46 60] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 47 16 49 18] self = Core_Option_Option_Type.C_None \/ (exists r : RedBlackTree_Node_Type.t_node k v . inv7 r /\ result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    ensures { inv15 result }
    
  predicate resolve6 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve6 self }
    
  predicate resolve4 (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve6 self
  val resolve4 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve4 self }
    
  val unwrap1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv1 result }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve2 self }
    
  predicate is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/std/option.rs" 120 20 120 32] self = Core_Option_Option_Type.C_None
  val is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv5 dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv0 result }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  val rotate_right0 [#"../red_black_tree.rs" 412 4 412 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 400 15 400 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 401 15 401 42] color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 412 25 412 29] inv4 self}
    ensures { [#"../red_black_tree.rs" 402 14 402 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 403 14 403 42] internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 14 404 50] height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 405 14 405 65] lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key ( ^ self))) (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 406 14 406 42] color0 (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 407 14 407 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 408 4 411 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv1 r /\ inv1 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv13 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val as_mut1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 33 26 33 43]  * self =  * result }
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 34 26 34 43]  ^ self =  ^ result }
    ensures { inv4 result }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv12 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv5 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv12 result }
    
  let rec cfg delete_max_rec [#"../red_black_tree.rs" 643 4 643 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 632 15 632 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 633 15 634 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 643 27 643 31] inv6 self}
    ensures { [#"../red_black_tree.rs" 635 14 635 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 636 14 636 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 637 14 637 66] has_mapping0 ( * self) (deep_model0 (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 638 4 638 104] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 ( * self) k v -> le_log0 k (deep_model0 (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 639 4 640 73] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 ( ^ self) k v = (deep_model0 (let (a, _) = result in a) <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 641 14 641 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 642 4 642 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 643 36 643 42] inv11 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : bool;
  var _19 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var node1 : RedBlackTree_Node_Type.t_node k v;
  var _24 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _26 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _29 : ();
  var _30 : bool;
  var _32 : bool;
  var _35 : bool;
  var _37 : RedBlackTree_Node_Type.t_node k v;
  var _38 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _41 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _42 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var r : (k, v);
  var _44 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _45 : ();
  var _46 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 644 23 644 41] _15 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 644 23 644 41] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _15)) };
    assume { inv0 ( ^ _15) };
    [#"../red_black_tree.rs" 644 23 644 41] _14 <- ([#"../red_black_tree.rs" 644 23 644 41] as_mut0 _15);
    _15 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 644 23 644 50] _13 <- ([#"../red_black_tree.rs" 644 23 644 50] unwrap0 _14);
    _14 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 644 23 644 59] _12 <- Borrow.borrow_mut ( * _13);
    [#"../red_black_tree.rs" 644 23 644 59] _13 <- { _13 with current =  ^ _12 };
    assume { inv1 ( ^ _12) };
    [#"../red_black_tree.rs" 644 23 644 59] node <- ([#"../red_black_tree.rs" 644 23 644 59] as_mut1 _12);
    _12 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] inv2 _13 };
    assume { resolve0 _13 };
    [#"../red_black_tree.rs" 645 11 645 29] _17 <- ([#"../red_black_tree.rs" 645 11 645 29] is_red0 ([#"../red_black_tree.rs" 645 11 645 29] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB4
  }
  BB4 {
    switch (_17)
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 646 12 646 31] _19 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 646 12 646 31] node <- { node with current =  ^ _19 };
    assume { inv3 ( ^ _19) };
    [#"../red_black_tree.rs" 646 12 646 31] _16 <- ([#"../red_black_tree.rs" 646 12 646 31] rotate_right0 _19);
    _19 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    [#"../red_black_tree.rs" 647 9 647 9] _16 <- ([#"../red_black_tree.rs" 647 9 647 9] ());
    goto BB8
  }
  BB8 {
    switch (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node)))
      | Core_Option_Option_Type.C_None -> goto BB9
      | _ -> goto BB15
      end
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assert { [@expl:type invariant] inv4 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 649 38 649 52] _26 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 649 38 649 52] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _26)) };
    assume { inv0 ( ^ _26) };
    [#"../red_black_tree.rs" 649 38 649 52] _25 <- Borrow.borrow_mut ( * _26);
    [#"../red_black_tree.rs" 649 38 649 52] _26 <- { _26 with current =  ^ _25 };
    assume { inv0 ( ^ _25) };
    [#"../red_black_tree.rs" 649 23 649 53] _24 <- ([#"../red_black_tree.rs" 649 23 649 53] take0 _25);
    _25 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB11
  }
  BB11 {
    assert { [@expl:type invariant] inv5 _26 };
    assume { resolve2 _26 };
    assert { [@expl:type invariant] inv6 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 649 23 649 62] node1 <- ([#"../red_black_tree.rs" 649 23 649 62] unwrap1 _24);
    _24 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB12
  }
  BB12 {
    assert { [@expl:type invariant] inv1 node1 };
    assume { resolve4 node1 };
    [#"../red_black_tree.rs" 650 19 650 39] _0 <- ([#"../red_black_tree.rs" 650 19 650 39] (([#"../red_black_tree.rs" 650 20 650 28] RedBlackTree_Node_Type.node_key node1), ([#"../red_black_tree.rs" 650 30 650 38] RedBlackTree_Node_Type.node_val node1)));
    [#"../red_black_tree.rs" 650 20 650 28] node1 <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = node1 in RedBlackTree_Node_Type.C_Node x0 x1 (any k) x3 x4);
    [#"../red_black_tree.rs" 650 30 650 38] node1 <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = node1 in RedBlackTree_Node_Type.C_Node x0 x1 x2 (any v) x4);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB30
  }
  BB15 {
    [#"../red_black_tree.rs" 652 12 652 31] _32 <- ([#"../red_black_tree.rs" 652 12 652 31] is_red0 ([#"../red_black_tree.rs" 652 12 652 31] RedBlackTree_Node_Type.node_right ( * node)));
    goto BB19
  }
  BB16 {
    [#"../red_black_tree.rs" 652 11 652 83] _30 <- ([#"../red_black_tree.rs" 652 11 652 83] [#"../red_black_tree.rs" 652 11 652 83] false);
    goto BB18
  }
  BB17 {
    [#"../red_black_tree.rs" 652 36 652 60] _38 <- ([#"../red_black_tree.rs" 652 36 652 60] as_ref0 ([#"../red_black_tree.rs" 652 36 652 60] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node))));
    goto BB20
  }
  BB18 {
    switch (_30)
      | False -> goto BB25
      | True -> goto BB23
      end
  }
  BB19 {
    switch ([#"../red_black_tree.rs" 652 11 652 31] not _32)
      | False -> goto BB16
      | True -> goto BB17
      end
  }
  BB20 {
    [#"../red_black_tree.rs" 652 36 652 69] _37 <- ([#"../red_black_tree.rs" 652 36 652 69] unwrap2 _38);
    _38 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB21
  }
  BB21 {
    assert { [@expl:type invariant] inv7 _37 };
    assume { resolve5 _37 };
    [#"../red_black_tree.rs" 652 36 652 83] _35 <- ([#"../red_black_tree.rs" 652 36 652 83] is_red0 ([#"../red_black_tree.rs" 652 36 652 83] RedBlackTree_Node_Type.node_left _37));
    goto BB22
  }
  BB22 {
    [#"../red_black_tree.rs" 652 11 652 83] _30 <- ([#"../red_black_tree.rs" 652 35 652 83] not _35);
    _35 <- any bool;
    goto BB18
  }
  BB23 {
    [#"../red_black_tree.rs" 653 19 653 40] _42 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 653 19 653 40] node <- { node with current =  ^ _42 };
    assume { inv3 ( ^ _42) };
    [#"../red_black_tree.rs" 653 19 653 40] _41 <- ([#"../red_black_tree.rs" 653 19 653 40] move_red_right0 _42);
    _42 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB24
  }
  BB24 {
    [#"../red_black_tree.rs" 653 19 653 40] _40 <- Borrow.borrow_mut ( * _41);
    [#"../red_black_tree.rs" 653 19 653 40] _41 <- { _41 with current =  ^ _40 };
    assume { inv3 ( ^ _40) };
    assert { [@expl:type invariant] inv4 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 653 12 653 40] node <- ([#"../red_black_tree.rs" 653 12 653 40] _40);
    [#"../red_black_tree.rs" 653 12 653 40] _40 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assert { [@expl:type invariant] inv4 _41 };
    assume { resolve1 _41 };
    [#"../red_black_tree.rs" 652 84 654 9] _29 <- ([#"../red_black_tree.rs" 652 84 654 9] ());
    goto BB26
  }
  BB25 {
    [#"../red_black_tree.rs" 654 9 654 9] _29 <- ([#"../red_black_tree.rs" 654 9 654 9] ());
    goto BB26
  }
  BB26 {
    [#"../red_black_tree.rs" 655 16 655 43] _44 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * node));
    [#"../red_black_tree.rs" 655 16 655 43] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _44)) };
    assume { inv8 ( ^ _44) };
    [#"../red_black_tree.rs" 655 16 655 43] r <- ([#"../red_black_tree.rs" 655 16 655 43] delete_max_rec _44);
    _44 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB27
  }
  BB27 {
    [#"../red_black_tree.rs" 656 8 656 22] _46 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 656 8 656 22] node <- { node with current =  ^ _46 };
    assume { inv3 ( ^ _46) };
    [#"../red_black_tree.rs" 656 8 656 22] _45 <- ([#"../red_black_tree.rs" 656 8 656 22] balance0 _46);
    _46 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB28
  }
  BB28 {
    assert { [@expl:type invariant] inv4 node };
    assume { resolve1 node };
    assert { [@expl:type invariant] inv6 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 657 8 657 9] _0 <- ([#"../red_black_tree.rs" 657 8 657 9] r);
    [#"../red_black_tree.rs" 657 8 657 9] r <- any (k, v);
    goto BB29
  }
  BB29 {
    goto BB31
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMax
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  type deep_model_ty0
  use map.Map
  predicate invariant14 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant14 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant14 self }
    
  predicate inv13 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv13 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv13 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use prelude.Borrow
  predicate invariant13 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant13 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant13 self }
    
  predicate inv12 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv12 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv12 x = true
  predicate invariant12 (self : (k, v))
  val invariant12 (self : (k, v)) : bool
    ensures { result = invariant12 self }
    
  predicate inv11 (_x : (k, v))
  val inv11 (_x : (k, v)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : (k, v) . inv11 x = true
  predicate invariant11 (self : v)
  val invariant11 (self : v) : bool
    ensures { result = invariant11 self }
    
  predicate inv10 (_x : v)
  val inv10 (_x : v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : v . inv10 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant10 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant10 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant10 self }
    
  predicate inv9 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv9 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv9 x = true
  predicate invariant9 (self : Core_Option_Option_Type.t_option (k, v))
  val invariant9 (self : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = invariant9 self }
    
  predicate inv8 (_x : Core_Option_Option_Type.t_option (k, v))
  val inv8 (_x : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : Core_Option_Option_Type.t_option (k, v) . inv8 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv7 (_x : deep_model_ty0)
  val inv7 (_x : deep_model_ty0) : bool
    ensures { result = inv7 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv7 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv7 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv7 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv7 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv7 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv7 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv7 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv7 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv7 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv7 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv7 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv7 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv7 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv7 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant8 (self : deep_model_ty0)
  val invariant8 (self : deep_model_ty0) : bool
    ensures { result = invariant8 self }
    
  axiom inv7 : forall x : deep_model_ty0 . inv7 x = true
  predicate invariant7 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant7 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant7 self }
    
  predicate inv6 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv6 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv6 x = true
  predicate invariant6 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant6 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv5 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv5 x = true
  predicate invariant5 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant5 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv4 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv4 x = true
  predicate invariant4 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant4 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv3 x = true
  predicate invariant3 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant3 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv2 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv2 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv2 : forall x : RedBlackTree_Node_Type.t_node k v . inv2 x = true
  predicate invariant2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv1 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv1 x = true
  use prelude.Ghost
  predicate invariant1 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)))
  val invariant1 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)))
  val inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)) . inv0 x = true
  use map.Const
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  function shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  use map.Map
  function shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv5 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv5 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv10 v -> inv7 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv10 v -> inv7 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate resolve4 (self : Ghost.ghost_ty ())
  val resolve4 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve4 self }
    
  use prelude.Ghost
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv5 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv13 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv7 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv5 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv13 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv7 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv10 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv5 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv13 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv7 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv5 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv13 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv7 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv10 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv5 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv7 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv5 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv7 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv10 v -> has_mapping0 self k v = (Map.get (shallow_model1 self) k = Core_Option_Option_Type.C_Some v))
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv12 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv3 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv3 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv12 result }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve3 self }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv2 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  val delete_max_rec0 [#"../red_black_tree.rs" 643 4 643 42] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 632 15 632 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 633 15 634 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 643 27 643 31] inv6 self}
    ensures { [#"../red_black_tree.rs" 635 14 635 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 636 14 636 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 637 14 637 66] has_mapping0 ( * self) (deep_model0 (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 638 4 638 104] forall v : v . forall k : deep_model_ty0 . inv10 v -> inv7 k -> has_mapping0 ( * self) k v -> le_log0 k (deep_model0 (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 639 4 640 73] forall v : v . forall k : deep_model_ty0 . inv10 v -> inv7 k -> has_mapping0 ( ^ self) k v = (deep_model0 (let (a, _) = result in a) <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 641 14 641 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 642 4 642 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 643 36 643 42] inv11 result }
    
  predicate same_mappings0 [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Tree_Type.t_tree k v) (o : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 43 8 45 9] forall v : v . forall k : deep_model_ty0 . inv10 v -> inv7 k -> has_mapping0 self k v = has_mapping0 o k v
  val same_mappings0 [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Tree_Type.t_tree k v) (o : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = same_mappings0 self o }
    
  use prelude.Ghost
  predicate resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv9 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  predicate resolve0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)))
  val resolve0 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  let rec cfg delete_max [#"../red_black_tree.rs" 667 4 667 50] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 660 15 660 34] invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 667 27 667 31] inv6 self}
    ensures { [#"../red_black_tree.rs" 661 14 661 33] invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 662 14 666 65] match result with
      | Core_Option_Option_Type.C_Some (k, v) -> Map.get (shallow_model0 self) (deep_model0 k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : deep_model_ty0 . inv7 k2 -> Map.get (shallow_model0 self) k2 = Core_Option_Option_Type.C_None \/ le_log0 k2 (deep_model0 k)) /\ shallow_model1 ( ^ self) = Map.set (shallow_model0 self) (deep_model0 k) (Core_Option_Option_Type.C_None)
      | Core_Option_Option_Type.C_None -> shallow_model1 ( ^ self) = shallow_model0 self /\ shallow_model0 self = Const.const (Core_Option_Option_Type.C_None)
      end }
    ensures { [#"../red_black_tree.rs" 667 36 667 50] inv8 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var old_self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v));
  var _7 : ();
  var _8 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : bool;
  var r : (k, v);
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _20 : ();
  var _21 : bool;
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _26 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _27 : Ghost.ghost_ty ();
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 668 23 668 35] old_self <- ([#"../red_black_tree.rs" 668 23 668 35] Ghost.new self);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve0 old_self };
    [#"../red_black_tree.rs" 669 28 669 42] _8 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 669 28 669 42] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _8)) };
    assume { inv1 ( ^ _8) };
    switch ( * _8)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB8
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 669 20 669 24] node <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * _8));
    [#"../red_black_tree.rs" 669 20 669 24] _8 <- { _8 with current = (let Core_Option_Option_Type.C_Some x0 =  * _8 in Core_Option_Option_Type.C_Some ( ^ node)) };
    assume { inv2 ( ^ node) };
    [#"../red_black_tree.rs" 670 16 670 34] _12 <- ([#"../red_black_tree.rs" 670 16 670 34] is_red0 ([#"../red_black_tree.rs" 670 16 670 34] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB4
  }
  BB4 {
    switch ([#"../red_black_tree.rs" 670 15 670 34] not _12)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 671 16 671 32] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 671 29 671 32] RedBlackTree_Color_Type.C_Red) x2 x3 x4) };
    assert { [@expl:type invariant] inv3 node };
    assume { resolve1 node };
    assert { [@expl:type invariant] inv4 _8 };
    assume { resolve2 _8 };
    [#"../red_black_tree.rs" 670 35 672 13] _7 <- ([#"../red_black_tree.rs" 670 35 672 13] ());
    goto BB7
  }
  BB6 {
    assert { [@expl:type invariant] inv3 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 672 13 672 13] _7 <- ([#"../red_black_tree.rs" 672 13 672 13] ());
    assert { [@expl:type invariant] inv4 _8 };
    assume { resolve2 _8 };
    goto BB7
  }
  BB7 {
    assert { [@expl:assertion] [#"../red_black_tree.rs" 676 24 676 53] same_mappings0 ( * Ghost.inner old_self) ( * self) };
    [#"../red_black_tree.rs" 677 16 677 37] _19 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 677 16 677 37] self <- { self with current =  ^ _19 };
    assume { inv5 ( ^ _19) };
    [#"../red_black_tree.rs" 677 16 677 37] r <- ([#"../red_black_tree.rs" 677 16 677 37] delete_max_rec0 _19);
    _19 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB9
  }
  BB8 {
    assert { [@expl:type invariant] inv4 _8 };
    assume { resolve2 _8 };
    [#"../red_black_tree.rs" 674 19 674 23] _0 <- ([#"../red_black_tree.rs" 674 19 674 23] Core_Option_Option_Type.C_None);
    assert { [@expl:type invariant] inv6 self };
    assume { resolve3 self };
    goto BB19
  }
  BB9 {
    [#"../red_black_tree.rs" 678 11 678 24] _21 <- ([#"../red_black_tree.rs" 678 11 678 24] is_red0 ([#"../red_black_tree.rs" 678 11 678 24]  * self));
    goto BB10
  }
  BB10 {
    switch (_21)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    [#"../red_black_tree.rs" 679 12 679 30] _26 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 679 12 679 30] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _26)) };
    assume { inv1 ( ^ _26) };
    [#"../red_black_tree.rs" 679 12 679 30] _25 <- ([#"../red_black_tree.rs" 679 12 679 30] as_mut0 _26);
    _26 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB12
  }
  BB12 {
    [#"../red_black_tree.rs" 679 12 679 39] _24 <- ([#"../red_black_tree.rs" 679 12 679 39] unwrap0 _25);
    _25 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB13
  }
  BB13 {
    [#"../red_black_tree.rs" 679 12 679 53] _24 <- { _24 with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * _24 in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 679 48 679 53] RedBlackTree_Color_Type.C_Black) x2 x3 x4) };
    assert { [@expl:type invariant] inv3 _24 };
    assume { resolve1 _24 };
    assert { [@expl:type invariant] inv6 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 678 25 680 9] _20 <- ([#"../red_black_tree.rs" 678 25 680 9] ());
    goto BB15
  }
  BB14 {
    assert { [@expl:type invariant] inv6 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 680 9 680 9] _20 <- ([#"../red_black_tree.rs" 680 9 680 9] ());
    goto BB15
  }
  BB15 {
    [#"../red_black_tree.rs" 681 8 681 39] _27 <- ([#"../red_black_tree.rs" 681 8 681 39] Ghost.new ());
    goto BB16
  }
  BB16 {
    assume { resolve4 _27 };
    [#"../red_black_tree.rs" 682 8 682 15] _0 <- ([#"../red_black_tree.rs" 682 8 682 15] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 682 13 682 14] r));
    [#"../red_black_tree.rs" 682 13 682 14] r <- any (k, v);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMinRec
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant15 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant15 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv15 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv15 x = true
  predicate invariant14 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant14 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant14 self }
    
  predicate inv14 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv14 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv14 _x }
    
  axiom inv14 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv14 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant13 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant13 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv13 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv13 x = true
  use prelude.Borrow
  predicate invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv12 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv12 x = true
  predicate invariant11 (self : (k, v))
  val invariant11 (self : (k, v)) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : (k, v))
  val inv11 (_x : (k, v)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : (k, v) . inv11 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv10 (_x : deep_model_ty0)
  val inv10 (_x : deep_model_ty0) : bool
    ensures { result = inv10 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv10 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv10 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv10 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant10 (self : deep_model_ty0)
  val invariant10 (self : deep_model_ty0) : bool
    ensures { result = invariant10 self }
    
  axiom inv10 : forall x : deep_model_ty0 . inv10 x = true
  predicate invariant9 (self : v)
  val invariant9 (self : v) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : v)
  val inv9 (_x : v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : v . inv9 x = true
  predicate invariant8 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant8 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv8 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv8 x = true
  predicate invariant7 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant7 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv7 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : RedBlackTree_Node_Type.t_node k v . inv7 x = true
  predicate invariant6 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv6 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : RedBlackTree_Node_Type.t_node k v . inv6 x = true
  predicate invariant5 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant5 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv5 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv5 x = true
  predicate invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv4 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv4 x = true
  predicate invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv3 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv3 x = true
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant1 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv8 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv8 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv1 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant0 (RedBlackTree_Node_Type.node_left self) /\ color_invariant0 (RedBlackTree_Node_Type.node_right self)
  val color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant1 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height0 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv7 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv7 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> height1 self = height0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  predicate has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping0 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model0 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv7 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv10 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv9 v}
    ensures { result = has_mapping1 self k v }
    
  axiom has_mapping1_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv7 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv10 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv9 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> has_mapping1 self k v = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 self k v = has_mapping1 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant0 (RedBlackTree_Node_Type.node_left self) /\ height_invariant0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant0 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant0 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant1 self /\ height_invariant1 self
  val internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant1 self }
    
  val balance0 [#"../red_black_tree.rs" 510 4 510 25] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 491 15 491 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 492 4 493 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 494 4 495 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 496 4 496 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    requires {[#"../red_black_tree.rs" 510 20 510 24] inv3 self}
    ensures { [#"../red_black_tree.rs" 497 14 497 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 14 498 42] internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 14 499 50] height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 34] color_invariant0 (RedBlackTree_Node_Type.node_left ( * self)) /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 505 63] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 4 507 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 508 4 509 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
  val move_red_left0 [#"../red_black_tree.rs" 542 4 542 44] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 524 15 524 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 525 15 525 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 526 15 526 86] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 542 26 542 30] inv3 self}
    ensures { [#"../red_black_tree.rs" 527 14 527 44] internal_invariant1 ( * result) }
    ensures { [#"../red_black_tree.rs" 528 4 530 48] internal_invariant1 ( ^ result) /\ height1 ( * result) = height1 ( ^ result) /\ (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( ^ result) k v -> has_mapping1 ( * result) k v) -> internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 531 4 531 97] height1 ( * result) = height1 ( ^ result) -> height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 532 14 532 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 533 4 533 105] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( * result) k v -> has_mapping1 ( * self) k v }
    ensures { [#"../red_black_tree.rs" 534 4 535 47] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( * self) k v /\ le_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key ( * self))) -> has_mapping1 ( * result) k v }
    ensures { [#"../red_black_tree.rs" 536 4 537 108] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping1 ( ^ self) k v = (has_mapping1 ( ^ result) k v \/ has_mapping1 ( * self) k v /\ not has_mapping1 ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 538 14 539 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 540 4 541 45] color_invariant1 ( ^ result) /\ (color0 (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> color_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 542 35 542 44] inv3 result }
    
  predicate resolve5 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve5 self }
    
  val unwrap2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv15 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv6 result }
    
  val as_ref0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv14 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 46 16 46 60] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 47 16 49 18] self = Core_Option_Option_Type.C_None \/ (exists r : RedBlackTree_Node_Type.t_node k v . inv6 r /\ result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    ensures { inv15 result }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv13 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  predicate resolve6 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve6 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve6 self }
    
  predicate resolve4 (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve6 self
  val resolve4 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve4 self }
    
  val unwrap1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv1 result }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve2 self }
    
  predicate is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/std/option.rs" 120 20 120 32] self = Core_Option_Option_Type.C_None
  val is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv4 dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv0 result }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val as_mut1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 33 26 33 43]  * self =  * result }
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 34 26 34 43]  ^ self =  ^ result }
    ensures { inv3 result }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv12 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv4 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv12 result }
    
  let rec cfg delete_min_rec [#"../red_black_tree.rs" 696 4 696 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 685 15 685 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 686 15 687 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 696 27 696 31] inv5 self}
    ensures { [#"../red_black_tree.rs" 688 14 688 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 689 14 689 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 690 14 690 66] has_mapping0 ( * self) (deep_model0 (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 691 4 691 104] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 ( * self) k v -> le_log0 (deep_model0 (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 692 4 693 73] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv10 k -> has_mapping0 ( ^ self) k v = (deep_model0 (let (a, _) = result in a) <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 694 14 694 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 695 4 695 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 696 36 696 42] inv11 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var node1 : RedBlackTree_Node_Type.t_node k v;
  var _20 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _21 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _25 : ();
  var _26 : bool;
  var _28 : bool;
  var _31 : bool;
  var _33 : RedBlackTree_Node_Type.t_node k v;
  var _34 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _37 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _38 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var r : (k, v);
  var _40 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _41 : ();
  var _42 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 697 23 697 41] _15 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 697 23 697 41] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _15)) };
    assume { inv0 ( ^ _15) };
    [#"../red_black_tree.rs" 697 23 697 41] _14 <- ([#"../red_black_tree.rs" 697 23 697 41] as_mut0 _15);
    _15 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 697 23 697 50] _13 <- ([#"../red_black_tree.rs" 697 23 697 50] unwrap0 _14);
    _14 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 697 23 697 59] _12 <- Borrow.borrow_mut ( * _13);
    [#"../red_black_tree.rs" 697 23 697 59] _13 <- { _13 with current =  ^ _12 };
    assume { inv1 ( ^ _12) };
    [#"../red_black_tree.rs" 697 23 697 59] node <- ([#"../red_black_tree.rs" 697 23 697 59] as_mut1 _12);
    _12 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] inv2 _13 };
    assume { resolve0 _13 };
    switch (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node)))
      | Core_Option_Option_Type.C_None -> goto BB4
      | _ -> goto BB10
      end
  }
  BB4 {
    goto BB5
  }
  BB5 {
    assert { [@expl:type invariant] inv3 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 699 38 699 52] _22 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 699 38 699 52] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _22)) };
    assume { inv0 ( ^ _22) };
    [#"../red_black_tree.rs" 699 38 699 52] _21 <- Borrow.borrow_mut ( * _22);
    [#"../red_black_tree.rs" 699 38 699 52] _22 <- { _22 with current =  ^ _21 };
    assume { inv0 ( ^ _21) };
    [#"../red_black_tree.rs" 699 23 699 53] _20 <- ([#"../red_black_tree.rs" 699 23 699 53] take0 _21);
    _21 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB6
  }
  BB6 {
    assert { [@expl:type invariant] inv4 _22 };
    assume { resolve2 _22 };
    assert { [@expl:type invariant] inv5 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 699 23 699 62] node1 <- ([#"../red_black_tree.rs" 699 23 699 62] unwrap1 _20);
    _20 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] inv1 node1 };
    assume { resolve4 node1 };
    [#"../red_black_tree.rs" 700 19 700 39] _0 <- ([#"../red_black_tree.rs" 700 19 700 39] (([#"../red_black_tree.rs" 700 20 700 28] RedBlackTree_Node_Type.node_key node1), ([#"../red_black_tree.rs" 700 30 700 38] RedBlackTree_Node_Type.node_val node1)));
    [#"../red_black_tree.rs" 700 20 700 28] node1 <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = node1 in RedBlackTree_Node_Type.C_Node x0 x1 (any k) x3 x4);
    [#"../red_black_tree.rs" 700 30 700 38] node1 <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = node1 in RedBlackTree_Node_Type.C_Node x0 x1 x2 (any v) x4);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB25
  }
  BB10 {
    [#"../red_black_tree.rs" 702 12 702 30] _28 <- ([#"../red_black_tree.rs" 702 12 702 30] is_red0 ([#"../red_black_tree.rs" 702 12 702 30] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB14
  }
  BB11 {
    [#"../red_black_tree.rs" 702 11 702 81] _26 <- ([#"../red_black_tree.rs" 702 11 702 81] [#"../red_black_tree.rs" 702 11 702 81] false);
    goto BB13
  }
  BB12 {
    [#"../red_black_tree.rs" 702 35 702 58] _34 <- ([#"../red_black_tree.rs" 702 35 702 58] as_ref0 ([#"../red_black_tree.rs" 702 35 702 58] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node))));
    goto BB15
  }
  BB13 {
    switch (_26)
      | False -> goto BB20
      | True -> goto BB18
      end
  }
  BB14 {
    switch ([#"../red_black_tree.rs" 702 11 702 30] not _28)
      | False -> goto BB11
      | True -> goto BB12
      end
  }
  BB15 {
    [#"../red_black_tree.rs" 702 35 702 67] _33 <- ([#"../red_black_tree.rs" 702 35 702 67] unwrap2 _34);
    _34 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB16
  }
  BB16 {
    assert { [@expl:type invariant] inv6 _33 };
    assume { resolve5 _33 };
    [#"../red_black_tree.rs" 702 35 702 81] _31 <- ([#"../red_black_tree.rs" 702 35 702 81] is_red0 ([#"../red_black_tree.rs" 702 35 702 81] RedBlackTree_Node_Type.node_left _33));
    goto BB17
  }
  BB17 {
    [#"../red_black_tree.rs" 702 11 702 81] _26 <- ([#"../red_black_tree.rs" 702 34 702 81] not _31);
    _31 <- any bool;
    goto BB13
  }
  BB18 {
    [#"../red_black_tree.rs" 703 19 703 39] _38 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 703 19 703 39] node <- { node with current =  ^ _38 };
    assume { inv7 ( ^ _38) };
    [#"../red_black_tree.rs" 703 19 703 39] _37 <- ([#"../red_black_tree.rs" 703 19 703 39] move_red_left0 _38);
    _38 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB19
  }
  BB19 {
    [#"../red_black_tree.rs" 703 19 703 39] _36 <- Borrow.borrow_mut ( * _37);
    [#"../red_black_tree.rs" 703 19 703 39] _37 <- { _37 with current =  ^ _36 };
    assume { inv7 ( ^ _36) };
    assert { [@expl:type invariant] inv3 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 703 12 703 39] node <- ([#"../red_black_tree.rs" 703 12 703 39] _36);
    [#"../red_black_tree.rs" 703 12 703 39] _36 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assert { [@expl:type invariant] inv3 _37 };
    assume { resolve1 _37 };
    [#"../red_black_tree.rs" 702 82 704 9] _25 <- ([#"../red_black_tree.rs" 702 82 704 9] ());
    goto BB21
  }
  BB20 {
    [#"../red_black_tree.rs" 704 9 704 9] _25 <- ([#"../red_black_tree.rs" 704 9 704 9] ());
    goto BB21
  }
  BB21 {
    [#"../red_black_tree.rs" 705 16 705 42] _40 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_left ( * node));
    [#"../red_black_tree.rs" 705 16 705 42] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node ( ^ _40) x1 x2 x3 x4) };
    assume { inv8 ( ^ _40) };
    [#"../red_black_tree.rs" 705 16 705 42] r <- ([#"../red_black_tree.rs" 705 16 705 42] delete_min_rec _40);
    _40 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB22
  }
  BB22 {
    [#"../red_black_tree.rs" 706 8 706 22] _42 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 706 8 706 22] node <- { node with current =  ^ _42 };
    assume { inv7 ( ^ _42) };
    [#"../red_black_tree.rs" 706 8 706 22] _41 <- ([#"../red_black_tree.rs" 706 8 706 22] balance0 _42);
    _42 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB23
  }
  BB23 {
    assert { [@expl:type invariant] inv3 node };
    assume { resolve1 node };
    assert { [@expl:type invariant] inv5 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 707 8 707 9] _0 <- ([#"../red_black_tree.rs" 707 8 707 9] r);
    [#"../red_black_tree.rs" 707 8 707 9] r <- any (k, v);
    goto BB24
  }
  BB24 {
    goto BB26
  }
  BB25 {
    goto BB26
  }
  BB26 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMin
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  type deep_model_ty0
  use map.Map
  predicate invariant13 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant13 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant13 self }
    
  predicate inv12 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv12 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv12 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use prelude.Borrow
  predicate invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant12 self }
    
  predicate inv11 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv11 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv11 x = true
  predicate invariant11 (self : (k, v))
  val invariant11 (self : (k, v)) : bool
    ensures { result = invariant11 self }
    
  predicate inv10 (_x : (k, v))
  val inv10 (_x : (k, v)) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : (k, v) . inv10 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant10 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant10 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant10 self }
    
  predicate inv9 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv9 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv9 x = true
  predicate invariant9 (self : v)
  val invariant9 (self : v) : bool
    ensures { result = invariant9 self }
    
  predicate inv8 (_x : v)
  val inv8 (_x : v) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : v . inv8 x = true
  predicate invariant8 (self : Core_Option_Option_Type.t_option (k, v))
  val invariant8 (self : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv7 (_x : Core_Option_Option_Type.t_option (k, v))
  val inv7 (_x : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Core_Option_Option_Type.t_option (k, v) . inv7 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv6 (_x : deep_model_ty0)
  val inv6 (_x : deep_model_ty0) : bool
    ensures { result = inv6 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv6 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv6 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv6 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv6 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv6 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv6 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv6 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv6 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv6 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv6 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv6 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv6 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv6 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv6 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant7 (self : deep_model_ty0)
  val invariant7 (self : deep_model_ty0) : bool
    ensures { result = invariant7 self }
    
  axiom inv6 : forall x : deep_model_ty0 . inv6 x = true
  predicate invariant6 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant6 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv5 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv5 x = true
  predicate invariant5 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant5 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv4 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv4 x = true
  predicate invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv3 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv3 x = true
  predicate invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant2 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant2 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  use map.Const
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  function shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  use map.Map
  function shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv4 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv4 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv8 v -> inv6 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv8 v -> inv6 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  use prelude.Ghost
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv11 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv3 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv11 result }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve3 self }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv1 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  val delete_min_rec0 [#"../red_black_tree.rs" 696 4 696 42] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 685 15 685 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 686 15 687 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 696 27 696 31] inv5 self}
    ensures { [#"../red_black_tree.rs" 688 14 688 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 689 14 689 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 690 14 690 66] has_mapping0 ( * self) (deep_model0 (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 691 4 691 104] forall v : v . forall k : deep_model_ty0 . inv8 v -> inv6 k -> has_mapping0 ( * self) k v -> le_log0 (deep_model0 (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 692 4 693 73] forall v : v . forall k : deep_model_ty0 . inv8 v -> inv6 k -> has_mapping0 ( ^ self) k v = (deep_model0 (let (a, _) = result in a) <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 694 14 694 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 695 4 695 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 696 36 696 42] inv10 result }
    
  predicate resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv9 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  predicate resolve0 (self : Ghost.ghost_ty ())
  val resolve0 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv4 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv12 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv6 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv4 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv12 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv6 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv8 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv4 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv12 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv6 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv4 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv12 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv6 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv8 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv4 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv6 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv4 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv6 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv8 v -> has_mapping0 self k v = (Map.get (shallow_model1 self) k = Core_Option_Option_Type.C_Some v))
  let rec cfg delete_min [#"../red_black_tree.rs" 719 4 719 50] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 710 15 710 34] invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 719 27 719 31] inv5 self}
    ensures { [#"../red_black_tree.rs" 711 14 711 33] invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 712 14 718 5] match result with
      | Core_Option_Option_Type.C_Some (k, v) -> Map.get (shallow_model0 self) (deep_model0 k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : deep_model_ty0 . inv6 k2 -> Map.get (shallow_model0 self) k2 = Core_Option_Option_Type.C_None \/ le_log0 (deep_model0 k) k2) /\ shallow_model1 ( ^ self) = Map.set (shallow_model0 self) (deep_model0 k) (Core_Option_Option_Type.C_None)
      | Core_Option_Option_Type.C_None -> shallow_model1 ( ^ self) = shallow_model0 self /\ shallow_model0 self = Const.const (Core_Option_Option_Type.C_None)
      end }
    ensures { [#"../red_black_tree.rs" 719 36 719 50] inv7 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var _5 : Ghost.ghost_ty ();
  var _7 : ();
  var _8 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : bool;
  var r : (k, v);
  var _17 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _18 : ();
  var _19 : bool;
  var _22 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _23 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _24 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 720 8 720 39] _5 <- ([#"../red_black_tree.rs" 720 8 720 39] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { resolve0 _5 };
    [#"../red_black_tree.rs" 722 28 722 42] _8 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 722 28 722 42] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _8)) };
    assume { inv0 ( ^ _8) };
    switch ( * _8)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB8
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 722 20 722 24] node <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * _8));
    [#"../red_black_tree.rs" 722 20 722 24] _8 <- { _8 with current = (let Core_Option_Option_Type.C_Some x0 =  * _8 in Core_Option_Option_Type.C_Some ( ^ node)) };
    assume { inv1 ( ^ node) };
    [#"../red_black_tree.rs" 723 16 723 34] _12 <- ([#"../red_black_tree.rs" 723 16 723 34] is_red0 ([#"../red_black_tree.rs" 723 16 723 34] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB4
  }
  BB4 {
    switch ([#"../red_black_tree.rs" 723 15 723 34] not _12)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 724 16 724 32] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 724 29 724 32] RedBlackTree_Color_Type.C_Red) x2 x3 x4) };
    assert { [@expl:type invariant] inv2 node };
    assume { resolve1 node };
    assert { [@expl:type invariant] inv3 _8 };
    assume { resolve2 _8 };
    [#"../red_black_tree.rs" 723 35 725 13] _7 <- ([#"../red_black_tree.rs" 723 35 725 13] ());
    goto BB7
  }
  BB6 {
    assert { [@expl:type invariant] inv2 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 725 13 725 13] _7 <- ([#"../red_black_tree.rs" 725 13 725 13] ());
    assert { [@expl:type invariant] inv3 _8 };
    assume { resolve2 _8 };
    goto BB7
  }
  BB7 {
    [#"../red_black_tree.rs" 729 16 729 37] _17 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 729 16 729 37] self <- { self with current =  ^ _17 };
    assume { inv4 ( ^ _17) };
    [#"../red_black_tree.rs" 729 16 729 37] r <- ([#"../red_black_tree.rs" 729 16 729 37] delete_min_rec0 _17);
    _17 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB9
  }
  BB8 {
    assert { [@expl:type invariant] inv3 _8 };
    assume { resolve2 _8 };
    [#"../red_black_tree.rs" 727 19 727 23] _0 <- ([#"../red_black_tree.rs" 727 19 727 23] Core_Option_Option_Type.C_None);
    assert { [@expl:type invariant] inv5 self };
    assume { resolve3 self };
    goto BB18
  }
  BB9 {
    [#"../red_black_tree.rs" 730 11 730 24] _19 <- ([#"../red_black_tree.rs" 730 11 730 24] is_red0 ([#"../red_black_tree.rs" 730 11 730 24]  * self));
    goto BB10
  }
  BB10 {
    switch (_19)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    [#"../red_black_tree.rs" 731 12 731 30] _24 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 731 12 731 30] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _24)) };
    assume { inv0 ( ^ _24) };
    [#"../red_black_tree.rs" 731 12 731 30] _23 <- ([#"../red_black_tree.rs" 731 12 731 30] as_mut0 _24);
    _24 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB12
  }
  BB12 {
    [#"../red_black_tree.rs" 731 12 731 39] _22 <- ([#"../red_black_tree.rs" 731 12 731 39] unwrap0 _23);
    _23 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB13
  }
  BB13 {
    [#"../red_black_tree.rs" 731 12 731 53] _22 <- { _22 with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * _22 in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 731 48 731 53] RedBlackTree_Color_Type.C_Black) x2 x3 x4) };
    assert { [@expl:type invariant] inv2 _22 };
    assume { resolve1 _22 };
    assert { [@expl:type invariant] inv5 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 730 25 732 9] _18 <- ([#"../red_black_tree.rs" 730 25 732 9] ());
    goto BB15
  }
  BB14 {
    assert { [@expl:type invariant] inv5 self };
    assume { resolve3 self };
    [#"../red_black_tree.rs" 732 9 732 9] _18 <- ([#"../red_black_tree.rs" 732 9 732 9] ());
    goto BB15
  }
  BB15 {
    [#"../red_black_tree.rs" 733 8 733 15] _0 <- ([#"../red_black_tree.rs" 733 8 733 15] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 733 13 733 14] r));
    [#"../red_black_tree.rs" 733 13 733 14] r <- any (k, v);
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteRec
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  type deep_model_ty0
  use map.Map
  predicate invariant21 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant21 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant21 self }
    
  predicate inv21 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv21 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv21 _x }
    
  axiom inv21 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv21 x = true
  predicate invariant20 (self : (k, v))
  val invariant20 (self : (k, v)) : bool
    ensures { result = invariant20 self }
    
  predicate inv20 (_x : (k, v))
  val inv20 (_x : (k, v)) : bool
    ensures { result = inv20 _x }
    
  axiom inv20 : forall x : (k, v) . inv20 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant19 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant19 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant19 self }
    
  predicate inv19 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv19 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv19 _x }
    
  axiom inv19 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv19 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant18 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant18 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant18 self }
    
  predicate inv18 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv18 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv18 _x }
    
  axiom inv18 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv18 x = true
  predicate invariant17 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant17 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant17 self }
    
  predicate inv17 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv17 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv17 _x }
    
  axiom inv17 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv17 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv14 (_x : deep_model_ty0)
  val inv14 (_x : deep_model_ty0) : bool
    ensures { result = inv14 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv14 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv14 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv14 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv14 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv14 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv14 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv14 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv14 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv14 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv14 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv14 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv14 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv14 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv14 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use prelude.Borrow
  predicate invariant16 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant16 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant16 self }
    
  predicate inv16 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv16 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv16 _x }
    
  axiom inv16 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv16 x = true
  predicate invariant15 (self : Core_Option_Option_Type.t_option (k, v))
  val invariant15 (self : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = invariant15 self }
    
  predicate inv15 (_x : Core_Option_Option_Type.t_option (k, v))
  val inv15 (_x : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = inv15 _x }
    
  axiom inv15 : forall x : Core_Option_Option_Type.t_option (k, v) . inv15 x = true
  predicate invariant14 (self : deep_model_ty0)
  val invariant14 (self : deep_model_ty0) : bool
    ensures { result = invariant14 self }
    
  axiom inv14 : forall x : deep_model_ty0 . inv14 x = true
  predicate invariant13 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant13 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant13 self }
    
  predicate inv13 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv13 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv13 _x }
    
  axiom inv13 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv13 x = true
  predicate invariant12 (self : borrowed v)
  val invariant12 (self : borrowed v) : bool
    ensures { result = invariant12 self }
    
  predicate inv12 (_x : borrowed v)
  val inv12 (_x : borrowed v) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : borrowed v . inv12 x = true
  predicate invariant11 (self : v)
  val invariant11 (self : v) : bool
    ensures { result = invariant11 self }
    
  predicate inv11 (_x : v)
  val inv11 (_x : v) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : v . inv11 x = true
  predicate invariant10 (self : borrowed k)
  val invariant10 (self : borrowed k) : bool
    ensures { result = invariant10 self }
    
  predicate inv10 (_x : borrowed k)
  val inv10 (_x : borrowed k) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed k . inv10 x = true
  predicate invariant9 (self : k)
  val invariant9 (self : k) : bool
    ensures { result = invariant9 self }
    
  predicate inv9 (_x : k)
  val inv9 (_x : k) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : k . inv9 x = true
  predicate invariant8 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant8 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv8 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv8 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv8 x = true
  predicate invariant7 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant7 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv7 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv7 x = true
  predicate invariant6 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant6 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv6 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv6 x = true
  predicate invariant5 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv5 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : RedBlackTree_Node_Type.t_node k v . inv5 x = true
  predicate invariant4 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant4 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv4 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : RedBlackTree_Node_Type.t_node k v . inv4 x = true
  predicate invariant3 (self : k)
  val invariant3 (self : k) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : k)
  val inv3 (_x : k) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : k . inv3 x = true
  predicate invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant2 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant1 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant1 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  function deep_model1 (self : k) : deep_model_ty0
  val deep_model1 (self : k) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model1 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  function deep_model0 (self : k) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv7 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv7 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv1 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model1 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model1 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  use prelude.Ghost
  predicate color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 287 8 287 112] color_invariant_here0 self /\ color_invariant0 (RedBlackTree_Node_Type.node_left self) /\ color_invariant0 (RedBlackTree_Node_Type.node_right self)
  val color_invariant1 [#"../red_black_tree.rs" 286 4 286 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant1 self }
    
  predicate match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 246 12 249 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ color_invariant1 node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n0 [#"../red_black_tree.rs" 244 4 244 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n0 self node }
    
  function height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 330 12 333 13] match RedBlackTree_Node_Type.node_color self with
      | RedBlackTree_Color_Type.C_Red -> height0 (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> height0 (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height1 [#"../red_black_tree.rs" 328 4 328 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    requires {[#"../red_black_tree.rs" 328 14 328 18] inv5 self}
    ensures { result = height1 self }
    
  axiom height1_spec : forall self : RedBlackTree_Node_Type.t_node k v . ([#"../red_black_tree.rs" 328 14 328 18] inv5 self) -> ([#"../red_black_tree.rs" 326 4 327 77] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> height1 self = height0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)))
  predicate has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] has_mapping0 (RedBlackTree_Node_Type.node_left self) k v \/ has_mapping0 (RedBlackTree_Node_Type.node_right self) k v \/ k = deep_model1 (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping1 [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : deep_model_ty0) (v : v) : bool
    requires {[#"../red_black_tree.rs" 140 19 140 23] inv5 self}
    requires {[#"../red_black_tree.rs" 140 25 140 26] inv14 k}
    requires {[#"../red_black_tree.rs" 140 44 140 45] inv11 v}
    ensures { result = has_mapping1 self k v }
    
  axiom has_mapping1_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : deep_model_ty0, v : v . ([#"../red_black_tree.rs" 140 19 140 23] inv5 self) -> ([#"../red_black_tree.rs" 140 25 140 26] inv14 k) -> ([#"../red_black_tree.rs" 140 44 140 45] inv11 v) -> ([#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . inv1 node -> self = node -> has_mapping1 self k v = has_mapping0 (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v)
  predicate same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 self k v = has_mapping1 o k v
  val same_mappings0 [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings0 self o }
    
  predicate height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 344 8 344 115] height_invariant_here0 self /\ height_invariant0 (RedBlackTree_Node_Type.node_left self) /\ height_invariant0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant1 [#"../red_black_tree.rs" 343 4 343 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant1 self }
    
  predicate bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 193 8 195 9] bst_invariant_here0 self /\ bst_invariant0 (RedBlackTree_Node_Type.node_left self) /\ bst_invariant0 (RedBlackTree_Node_Type.node_right self)
  val bst_invariant1 [#"../red_black_tree.rs" 192 4 192 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant1 self }
    
  predicate internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 379 12 379 59] bst_invariant1 self /\ height_invariant1 self
  val internal_invariant1 [#"../red_black_tree.rs" 377 4 377 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant1 self }
    
  val balance0 [#"../red_black_tree.rs" 510 4 510 25] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 491 15 491 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 492 4 493 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 494 4 495 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> color_invariant0 (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 496 4 496 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    requires {[#"../red_black_tree.rs" 510 20 510 24] inv6 self}
    ensures { [#"../red_black_tree.rs" 497 14 497 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 14 498 42] internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 14 499 50] height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 34] color_invariant0 (RedBlackTree_Node_Type.node_left ( * self)) /\ color0 (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 505 63] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 4 507 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 508 4 509 39] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> match_n0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
  val rotate_right0 [#"../red_black_tree.rs" 412 4 412 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 400 15 400 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 401 15 401 42] color0 (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    requires {[#"../red_black_tree.rs" 412 25 412 29] inv6 self}
    ensures { [#"../red_black_tree.rs" 402 14 402 42] same_mappings0 ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 403 14 403 42] internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 14 404 50] height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 405 14 405 65] lt_log0 (deep_model1 (RedBlackTree_Node_Type.node_key ( ^ self))) (deep_model1 (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 406 14 406 42] color0 (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 407 14 407 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 408 4 411 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . inv1 r /\ inv1 l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
  predicate resolve10 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve10 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve10 self }
    
  predicate resolve9 (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../../../../creusot-contracts/src/resolve.rs" 34 8 34 31] resolve10 self
  val resolve9 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve9 self }
    
  val unwrap2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv1 result }
    
  predicate resolve8 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve8 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve8 self }
    
  predicate is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/std/option.rs" 120 20 120 32] self = Core_Option_Option_Type.C_None
  val is_default0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = is_default0 self }
    
  val take0 (dest : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv13 dest}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] is_default0 ( ^ dest) }
    ensures { inv0 result }
    
  predicate resolve7 (self : borrowed v) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve7 (self : borrowed v) : bool
    ensures { result = resolve7 self }
    
  val swap1 (x : borrowed v) (y : borrowed v) : ()
    requires {inv12 x}
    requires {inv12 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve6 (self : borrowed k) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve6 (self : borrowed k) : bool
    ensures { result = resolve6 self }
    
  val swap0 (x : borrowed k) (y : borrowed k) : ()
    requires {inv10 x}
    requires {inv10 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve5 (self : Ghost.ghost_ty ())
  val resolve5 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve5 self }
    
  use prelude.Ghost
  use map.Map
  use map.Map
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  use map.Const
  function shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model0 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv7 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv21 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv14 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv7 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv21 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv14 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv11 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv7 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv21 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv14 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv7 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv21 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv14 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv11 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv7 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv14 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv7 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv14 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv11 v -> has_mapping0 self k v = (Map.get (shallow_model0 self) k = Core_Option_Option_Type.C_Some v))
  function has_mapping_inj0 [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 130 12 130 37] let _ = has_mapping_model0 self k in match Map.get (shallow_model0 self) k with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _v -> ()
      end
  val has_mapping_inj0 [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 121 15 121 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 122 15 122 38] has_mapping0 self k v1}
    requires {[#"../red_black_tree.rs" 123 15 123 38] has_mapping0 self k v2}
    requires {[#"../red_black_tree.rs" 125 23 125 27] inv7 self}
    requires {[#"../red_black_tree.rs" 125 29 125 30] inv14 k}
    requires {[#"../red_black_tree.rs" 125 48 125 50] inv11 v1}
    requires {[#"../red_black_tree.rs" 125 55 125 57] inv11 v2}
    ensures { result = has_mapping_inj0 self k v1 v2 }
    
  axiom has_mapping_inj0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0, v1 : v, v2 : v . ([#"../red_black_tree.rs" 121 15 121 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 122 15 122 38] has_mapping0 self k v1) -> ([#"../red_black_tree.rs" 123 15 123 38] has_mapping0 self k v2) -> ([#"../red_black_tree.rs" 125 23 125 27] inv7 self) -> ([#"../red_black_tree.rs" 125 29 125 30] inv14 k) -> ([#"../red_black_tree.rs" 125 48 125 50] inv11 v1) -> ([#"../red_black_tree.rs" 125 55 125 57] inv11 v2) -> ([#"../red_black_tree.rs" 124 14 124 22] v1 = v2)
  val delete_min_rec0 [#"../red_black_tree.rs" 696 4 696 42] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 685 15 685 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 686 15 687 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 696 27 696 31] inv8 self}
    ensures { [#"../red_black_tree.rs" 688 14 688 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 689 14 689 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 690 14 690 66] has_mapping0 ( * self) (deep_model1 (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 691 4 691 104] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping0 ( * self) k v -> le_log0 (deep_model1 (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 692 4 693 73] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping0 ( ^ self) k v = (deep_model1 (let (a, _) = result in a) <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 694 14 694 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 695 4 695 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 696 36 696 42] inv20 result }
    
  val move_red_right0 [#"../red_black_tree.rs" 571 4 571 45] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 553 15 553 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 554 15 554 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 555 15 555 86] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    requires {[#"../red_black_tree.rs" 571 27 571 31] inv6 self}
    ensures { [#"../red_black_tree.rs" 556 14 556 44] internal_invariant1 ( * result) }
    ensures { [#"../red_black_tree.rs" 557 4 559 48] internal_invariant1 ( ^ result) /\ height1 ( * result) = height1 ( ^ result) /\ (forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( ^ result) k v -> has_mapping1 ( * result) k v) -> internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 560 4 560 97] height1 ( * result) = height1 ( ^ result) -> height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 561 14 561 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 562 4 562 105] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( * result) k v -> has_mapping1 ( * self) k v }
    ensures { [#"../red_black_tree.rs" 563 4 564 47] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( * self) k v /\ le_log0 (deep_model1 (RedBlackTree_Node_Type.node_key ( * self))) k -> has_mapping1 ( * result) k v }
    ensures { [#"../red_black_tree.rs" 565 4 566 108] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( ^ self) k v = (has_mapping1 ( ^ result) k v \/ has_mapping1 ( * self) k v /\ not has_mapping1 ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 567 14 568 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 569 4 570 45] color_invariant1 ( ^ result) /\ (color0 (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> color_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 571 36 571 45] inv6 result }
    
  predicate resolve4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve3 self }
    
  val move_red_left0 [#"../red_black_tree.rs" 542 4 542 44] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 524 15 524 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 525 15 525 43] internal_invariant1 ( * self)}
    requires {[#"../red_black_tree.rs" 526 15 526 86] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Red) (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 542 26 542 30] inv6 self}
    ensures { [#"../red_black_tree.rs" 527 14 527 44] internal_invariant1 ( * result) }
    ensures { [#"../red_black_tree.rs" 528 4 530 48] internal_invariant1 ( ^ result) /\ height1 ( * result) = height1 ( ^ result) /\ (forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( ^ result) k v -> has_mapping1 ( * result) k v) -> internal_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 531 4 531 97] height1 ( * result) = height1 ( ^ result) -> height1 ( * self) = height1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 532 14 532 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 533 4 533 105] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( * result) k v -> has_mapping1 ( * self) k v }
    ensures { [#"../red_black_tree.rs" 534 4 535 47] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( * self) k v /\ le_log0 k (deep_model1 (RedBlackTree_Node_Type.node_key ( * self))) -> has_mapping1 ( * result) k v }
    ensures { [#"../red_black_tree.rs" 536 4 537 108] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping1 ( ^ self) k v = (has_mapping1 ( ^ result) k v \/ has_mapping1 ( * self) k v /\ not has_mapping1 ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 538 14 539 61] match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ match_n0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 540 4 541 45] color_invariant1 ( ^ result) /\ (color0 (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> color_invariant1 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 542 35 542 44] inv6 result }
    
  predicate resolve2 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve2 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve2 self }
    
  val unwrap1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : RedBlackTree_Node_Type.t_node k v
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv19 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv4 result }
    
  val as_ref0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
    requires {inv17 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 46 16 46 60] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 47 16 49 18] self = Core_Option_Option_Type.C_None \/ (exists r : RedBlackTree_Node_Type.t_node k v . inv4 r /\ result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    ensures { inv19 result }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv18 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    requires {inv17 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 24 26 24 51] result = (self = Core_Option_Option_Type.C_None) }
    
  val cmp0 (self : k) (other : k) : Core_Cmp_Ordering_Type.t_ordering
    requires {inv3 self}
    requires {inv3 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85] result = cmp_log0 (deep_model1 self) (deep_model1 other) }
    
  predicate resolve1 (self : k)
  val resolve1 (self : k) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve0 self }
    
  val as_mut1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {inv2 self}
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 33 26 33 43]  * self =  * result }
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 34 26 34 43]  ^ self =  ^ result }
    ensures { inv6 result }
    
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv16 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv13 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv16 result }
    
  let rec cfg delete_rec [#"../red_black_tree.rs" 748 4 748 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 736 15 736 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 737 15 738 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 748 23 748 27] inv8 self}
    requires {[#"../red_black_tree.rs" 748 29 748 32] inv3 key}
    ensures { [#"../red_black_tree.rs" 739 14 739 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 740 14 740 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 741 14 744 5] match result with
      | Core_Option_Option_Type.C_None -> forall v : v . inv11 v -> not has_mapping0 ( * self) (deep_model0 key) v
      | Core_Option_Option_Type.C_Some (k, v) -> deep_model0 key = deep_model1 k /\ has_mapping0 ( * self) (deep_model1 k) v
      end }
    ensures { [#"../red_black_tree.rs" 745 4 745 129] forall v : v . forall k : deep_model_ty0 . inv11 v -> inv14 k -> has_mapping0 ( ^ self) k v = (deep_model0 key <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 746 14 746 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 747 4 747 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 748 41 748 55] inv15 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var key : k = key;
  var r : Core_Option_Option_Type.t_option (k, v);
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _15 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : ();
  var _18 : Core_Cmp_Ordering_Type.t_ordering;
  var _21 : k;
  var _24 : bool;
  var _27 : ();
  var _28 : bool;
  var _30 : bool;
  var _33 : bool;
  var _35 : RedBlackTree_Node_Type.t_node k v;
  var _36 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _38 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _39 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _41 : Core_Option_Option_Type.t_option (k, v);
  var _42 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var ord : Core_Cmp_Ordering_Type.t_ordering;
  var _45 : bool;
  var _47 : ();
  var _48 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _49 : Core_Option_Option_Type.t_option (k, v);
  var _50 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _53 : bool;
  var node1 : RedBlackTree_Node_Type.t_node k v;
  var _60 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _61 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _62 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _66 : ();
  var _68 : bool;
  var _70 : RedBlackTree_Node_Type.t_node k v;
  var _71 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _73 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _74 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _75 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var kv : (k, v);
  var _78 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _79 : Ghost.ghost_ty ();
  var _81 : ();
  var _82 : borrowed k;
  var _83 : borrowed k;
  var _84 : borrowed k;
  var _85 : borrowed k;
  var _86 : ();
  var _87 : borrowed v;
  var _88 : borrowed v;
  var _89 : borrowed v;
  var _90 : borrowed v;
  var _93 : Core_Option_Option_Type.t_option (k, v);
  var _94 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _96 : ();
  var _97 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 750 23 750 41] _16 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 750 23 750 41] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _16)) };
    assume { inv0 ( ^ _16) };
    [#"../red_black_tree.rs" 750 23 750 41] _15 <- ([#"../red_black_tree.rs" 750 23 750 41] as_mut0 _16);
    _16 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB1
  }
  BB1 {
    [#"../red_black_tree.rs" 750 23 750 50] _14 <- ([#"../red_black_tree.rs" 750 23 750 50] unwrap0 _15);
    _15 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB2
  }
  BB2 {
    [#"../red_black_tree.rs" 750 23 750 59] _13 <- Borrow.borrow_mut ( * _14);
    [#"../red_black_tree.rs" 750 23 750 59] _14 <- { _14 with current =  ^ _13 };
    assume { inv1 ( ^ _13) };
    [#"../red_black_tree.rs" 750 23 750 59] node <- ([#"../red_black_tree.rs" 750 23 750 59] as_mut1 _13);
    _13 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB3
  }
  BB3 {
    assert { [@expl:type invariant] inv2 _14 };
    assume { resolve0 _14 };
    [#"../red_black_tree.rs" 751 22 751 31] _21 <- ([#"../red_black_tree.rs" 751 22 751 31] RedBlackTree_Node_Type.node_key ( * node));
    assert { [@expl:type invariant] inv3 _21 };
    assume { resolve1 _21 };
    [#"../red_black_tree.rs" 751 14 751 32] _18 <- ([#"../red_black_tree.rs" 751 14 751 32] cmp0 ([#"../red_black_tree.rs" 751 14 751 32] key) ([#"../red_black_tree.rs" 751 22 751 31] _21));
    goto BB4
  }
  BB4 {
    switch (_18)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB5
      | _ -> goto BB6
      end
  }
  BB5 {
    goto BB7
  }
  BB6 {
    [#"../red_black_tree.rs" 761 12 761 15] ord <- ([#"../red_black_tree.rs" 761 12 761 15] _18);
    [#"../red_black_tree.rs" 762 19 762 37] _45 <- ([#"../red_black_tree.rs" 762 19 762 37] is_red0 ([#"../red_black_tree.rs" 762 19 762 37] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB26
  }
  BB7 {
    [#"../red_black_tree.rs" 753 19 753 43] _24 <- ([#"../red_black_tree.rs" 753 19 753 43] is_none0 ([#"../red_black_tree.rs" 753 19 753 43] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node))));
    goto BB8
  }
  BB8 {
    switch (_24)
      | False -> goto BB10
      | True -> goto BB9
      end
  }
  BB9 {
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve1 key };
    [#"../red_black_tree.rs" 754 27 754 31] _0 <- ([#"../red_black_tree.rs" 754 27 754 31] Core_Option_Option_Type.C_None);
    assert { [@expl:type invariant] inv8 self };
    assume { resolve4 self };
    goto BB74
  }
  BB10 {
    [#"../red_black_tree.rs" 756 20 756 38] _30 <- ([#"../red_black_tree.rs" 756 20 756 38] is_red0 ([#"../red_black_tree.rs" 756 20 756 38] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB14
  }
  BB11 {
    [#"../red_black_tree.rs" 756 19 756 89] _28 <- ([#"../red_black_tree.rs" 756 19 756 89] [#"../red_black_tree.rs" 756 19 756 89] false);
    goto BB13
  }
  BB12 {
    [#"../red_black_tree.rs" 756 43 756 66] _36 <- ([#"../red_black_tree.rs" 756 43 756 66] as_ref0 ([#"../red_black_tree.rs" 756 43 756 66] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node))));
    goto BB15
  }
  BB13 {
    switch (_28)
      | False -> goto BB20
      | True -> goto BB18
      end
  }
  BB14 {
    switch ([#"../red_black_tree.rs" 756 19 756 38] not _30)
      | False -> goto BB11
      | True -> goto BB12
      end
  }
  BB15 {
    [#"../red_black_tree.rs" 756 43 756 75] _35 <- ([#"../red_black_tree.rs" 756 43 756 75] unwrap1 _36);
    _36 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB16
  }
  BB16 {
    assert { [@expl:type invariant] inv4 _35 };
    assume { resolve2 _35 };
    [#"../red_black_tree.rs" 756 43 756 89] _33 <- ([#"../red_black_tree.rs" 756 43 756 89] is_red0 ([#"../red_black_tree.rs" 756 43 756 89] RedBlackTree_Node_Type.node_left _35));
    goto BB17
  }
  BB17 {
    [#"../red_black_tree.rs" 756 19 756 89] _28 <- ([#"../red_black_tree.rs" 756 42 756 89] not _33);
    _33 <- any bool;
    goto BB13
  }
  BB18 {
    [#"../red_black_tree.rs" 757 27 757 47] _40 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 757 27 757 47] node <- { node with current =  ^ _40 };
    assume { inv5 ( ^ _40) };
    [#"../red_black_tree.rs" 757 27 757 47] _39 <- ([#"../red_black_tree.rs" 757 27 757 47] move_red_left0 _40);
    _40 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB19
  }
  BB19 {
    [#"../red_black_tree.rs" 757 27 757 47] _38 <- Borrow.borrow_mut ( * _39);
    [#"../red_black_tree.rs" 757 27 757 47] _39 <- { _39 with current =  ^ _38 };
    assume { inv5 ( ^ _38) };
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    [#"../red_black_tree.rs" 757 20 757 47] node <- ([#"../red_black_tree.rs" 757 20 757 47] _38);
    [#"../red_black_tree.rs" 757 20 757 47] _38 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assert { [@expl:type invariant] inv6 _39 };
    assume { resolve3 _39 };
    [#"../red_black_tree.rs" 756 90 758 17] _27 <- ([#"../red_black_tree.rs" 756 90 758 17] ());
    goto BB21
  }
  BB20 {
    [#"../red_black_tree.rs" 758 17 758 17] _27 <- ([#"../red_black_tree.rs" 758 17 758 17] ());
    goto BB21
  }
  BB21 {
    [#"../red_black_tree.rs" 759 20 759 45] _42 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_left ( * node));
    [#"../red_black_tree.rs" 759 20 759 45] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node ( ^ _42) x1 x2 x3 x4) };
    assume { inv7 ( ^ _42) };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve1 key };
    [#"../red_black_tree.rs" 759 20 759 45] _41 <- ([#"../red_black_tree.rs" 759 20 759 45] delete_rec _42 ([#"../red_black_tree.rs" 759 41 759 44] key));
    _42 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    [#"../red_black_tree.rs" 759 16 759 17] r <- ([#"../red_black_tree.rs" 759 16 759 17] _41);
    [#"../red_black_tree.rs" 759 16 759 17] _41 <- any Core_Option_Option_Type.t_option (k, v);
    [#"../red_black_tree.rs" 759 16 759 45] _17 <- ([#"../red_black_tree.rs" 759 16 759 45] ());
    goto BB25
  }
  BB25 {
    goto BB69
  }
  BB26 {
    switch (_45)
      | False -> goto BB33
      | True -> goto BB27
      end
  }
  BB27 {
    [#"../red_black_tree.rs" 763 20 763 39] _48 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 763 20 763 39] node <- { node with current =  ^ _48 };
    assume { inv5 ( ^ _48) };
    [#"../red_black_tree.rs" 763 20 763 39] _47 <- ([#"../red_black_tree.rs" 763 20 763 39] rotate_right0 _48);
    _48 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB28
  }
  BB28 {
    [#"../red_black_tree.rs" 764 24 764 50] _50 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * node));
    [#"../red_black_tree.rs" 764 24 764 50] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _50)) };
    assume { inv7 ( ^ _50) };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve1 key };
    [#"../red_black_tree.rs" 764 24 764 50] _49 <- ([#"../red_black_tree.rs" 764 24 764 50] delete_rec _50 ([#"../red_black_tree.rs" 764 46 764 49] key));
    _50 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    [#"../red_black_tree.rs" 764 20 764 21] r <- ([#"../red_black_tree.rs" 764 20 764 21] _49);
    [#"../red_black_tree.rs" 764 20 764 21] _49 <- any Core_Option_Option_Type.t_option (k, v);
    [#"../red_black_tree.rs" 764 20 764 50] _17 <- ([#"../red_black_tree.rs" 764 20 764 50] ());
    goto BB32
  }
  BB32 {
    goto BB68
  }
  BB33 {
    [#"../red_black_tree.rs" 766 23 766 48] _53 <- ([#"../red_black_tree.rs" 766 23 766 48] is_none0 ([#"../red_black_tree.rs" 766 23 766 48] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node))));
    goto BB34
  }
  BB34 {
    switch (_53)
      | False -> goto BB44
      | True -> goto BB35
      end
  }
  BB35 {
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve1 key };
    switch (ord)
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB36
      | _ -> goto BB38
      end
  }
  BB36 {
    goto BB37
  }
  BB37 {
    assert { [@expl:type invariant] inv8 self };
    assume { resolve4 self };
    [#"../red_black_tree.rs" 768 35 768 39] _0 <- ([#"../red_black_tree.rs" 768 35 768 39] Core_Option_Option_Type.C_None);
    goto BB73
  }
  BB38 {
    [#"../red_black_tree.rs" 770 50 770 64] _62 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 770 50 770 64] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _62)) };
    assume { inv0 ( ^ _62) };
    [#"../red_black_tree.rs" 770 50 770 64] _61 <- Borrow.borrow_mut ( * _62);
    [#"../red_black_tree.rs" 770 50 770 64] _62 <- { _62 with current =  ^ _61 };
    assume { inv0 ( ^ _61) };
    [#"../red_black_tree.rs" 770 35 770 65] _60 <- ([#"../red_black_tree.rs" 770 35 770 65] take0 _61);
    _61 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB39
  }
  BB39 {
    assert { [@expl:type invariant] inv13 _62 };
    assume { resolve8 _62 };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve4 self };
    [#"../red_black_tree.rs" 770 35 770 74] node1 <- ([#"../red_black_tree.rs" 770 35 770 74] unwrap2 _60);
    _60 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB40
  }
  BB40 {
    assert { [@expl:type invariant] inv1 node1 };
    assume { resolve9 node1 };
    goto BB41
  }
  BB41 {
    goto BB42
  }
  BB42 {
    [#"../red_black_tree.rs" 771 31 771 57] _0 <- ([#"../red_black_tree.rs" 771 31 771 57] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 771 36 771 56] (([#"../red_black_tree.rs" 771 37 771 45] RedBlackTree_Node_Type.node_key node1), ([#"../red_black_tree.rs" 771 47 771 55] RedBlackTree_Node_Type.node_val node1))));
    [#"../red_black_tree.rs" 771 37 771 45] node1 <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = node1 in RedBlackTree_Node_Type.C_Node x0 x1 (any k) x3 x4);
    [#"../red_black_tree.rs" 771 47 771 55] node1 <- (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 = node1 in RedBlackTree_Node_Type.C_Node x0 x1 x2 (any v) x4);
    goto BB43
  }
  BB43 {
    goto BB72
  }
  BB44 {
    [#"../red_black_tree.rs" 773 24 773 48] _71 <- ([#"../red_black_tree.rs" 773 24 773 48] as_ref0 ([#"../red_black_tree.rs" 773 24 773 48] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node))));
    goto BB45
  }
  BB45 {
    [#"../red_black_tree.rs" 773 24 773 57] _70 <- ([#"../red_black_tree.rs" 773 24 773 57] unwrap1 _71);
    _71 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    goto BB46
  }
  BB46 {
    assert { [@expl:type invariant] inv4 _70 };
    assume { resolve2 _70 };
    [#"../red_black_tree.rs" 773 24 773 71] _68 <- ([#"../red_black_tree.rs" 773 24 773 71] is_red0 ([#"../red_black_tree.rs" 773 24 773 71] RedBlackTree_Node_Type.node_left _70));
    goto BB47
  }
  BB47 {
    switch ([#"../red_black_tree.rs" 773 23 773 71] not _68)
      | False -> goto BB50
      | True -> goto BB48
      end
  }
  BB48 {
    [#"../red_black_tree.rs" 774 31 774 52] _75 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 774 31 774 52] node <- { node with current =  ^ _75 };
    assume { inv5 ( ^ _75) };
    [#"../red_black_tree.rs" 774 31 774 52] _74 <- ([#"../red_black_tree.rs" 774 31 774 52] move_red_right0 _75);
    _75 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB49
  }
  BB49 {
    [#"../red_black_tree.rs" 774 31 774 52] _73 <- Borrow.borrow_mut ( * _74);
    [#"../red_black_tree.rs" 774 31 774 52] _74 <- { _74 with current =  ^ _73 };
    assume { inv5 ( ^ _73) };
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    [#"../red_black_tree.rs" 774 24 774 52] node <- ([#"../red_black_tree.rs" 774 24 774 52] _73);
    [#"../red_black_tree.rs" 774 24 774 52] _73 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assert { [@expl:type invariant] inv6 _74 };
    assume { resolve3 _74 };
    [#"../red_black_tree.rs" 773 72 775 21] _66 <- ([#"../red_black_tree.rs" 773 72 775 21] ());
    goto BB51
  }
  BB50 {
    [#"../red_black_tree.rs" 775 21 775 21] _66 <- ([#"../red_black_tree.rs" 775 21 775 21] ());
    goto BB51
  }
  BB51 {
    switch (ord)
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB52
      | _ -> goto BB63
      end
  }
  BB52 {
    goto BB53
  }
  BB53 {
    assert { [@expl:type invariant] inv3 key };
    assume { resolve1 key };
    [#"../red_black_tree.rs" 777 37 777 64] _78 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * node));
    [#"../red_black_tree.rs" 777 37 777 64] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _78)) };
    assume { inv7 ( ^ _78) };
    [#"../red_black_tree.rs" 777 37 777 64] kv <- ([#"../red_black_tree.rs" 777 37 777 64] delete_min_rec0 _78);
    _78 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB54
  }
  BB54 {
    [#"../red_black_tree.rs" 778 24 778 53] _79 <- ([#"../red_black_tree.rs" 778 24 778 53] Ghost.new ());
    goto BB55
  }
  BB55 {
    assume { resolve5 _79 };
    [#"../red_black_tree.rs" 779 39 779 52] _83 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_key ( * node));
    [#"../red_black_tree.rs" 779 39 779 52] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 ( ^ _83) x3 x4) };
    assume { inv9 ( ^ _83) };
    [#"../red_black_tree.rs" 779 39 779 52] _82 <- Borrow.borrow_mut ( * _83);
    [#"../red_black_tree.rs" 779 39 779 52] _83 <- { _83 with current =  ^ _82 };
    assume { inv9 ( ^ _82) };
    [#"../red_black_tree.rs" 779 54 779 63] _85 <- Borrow.borrow_mut (let (a, _) = kv in a);
    [#"../red_black_tree.rs" 779 54 779 63] kv <- (let (x0, x1) = kv in ( ^ _85, x1));
    assume { inv9 ( ^ _85) };
    [#"../red_black_tree.rs" 779 54 779 63] _84 <- Borrow.borrow_mut ( * _85);
    [#"../red_black_tree.rs" 779 54 779 63] _85 <- { _85 with current =  ^ _84 };
    assume { inv9 ( ^ _84) };
    [#"../red_black_tree.rs" 779 24 779 64] _81 <- ([#"../red_black_tree.rs" 779 24 779 64] swap0 _82 _84);
    _82 <- any borrowed k;
    _84 <- any borrowed k;
    goto BB56
  }
  BB56 {
    assert { [@expl:type invariant] inv10 _85 };
    assume { resolve6 _85 };
    assert { [@expl:type invariant] inv10 _83 };
    assume { resolve6 _83 };
    [#"../red_black_tree.rs" 780 39 780 52] _88 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_val ( * node));
    [#"../red_black_tree.rs" 780 39 780 52] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 ( ^ _88) x4) };
    assume { inv11 ( ^ _88) };
    [#"../red_black_tree.rs" 780 39 780 52] _87 <- Borrow.borrow_mut ( * _88);
    [#"../red_black_tree.rs" 780 39 780 52] _88 <- { _88 with current =  ^ _87 };
    assume { inv11 ( ^ _87) };
    [#"../red_black_tree.rs" 780 54 780 63] _90 <- Borrow.borrow_mut (let (_, a) = kv in a);
    [#"../red_black_tree.rs" 780 54 780 63] kv <- (let (x0, x1) = kv in (x0,  ^ _90));
    assume { inv11 ( ^ _90) };
    [#"../red_black_tree.rs" 780 54 780 63] _89 <- Borrow.borrow_mut ( * _90);
    [#"../red_black_tree.rs" 780 54 780 63] _90 <- { _90 with current =  ^ _89 };
    assume { inv11 ( ^ _89) };
    [#"../red_black_tree.rs" 780 24 780 64] _86 <- ([#"../red_black_tree.rs" 780 24 780 64] swap1 _87 _89);
    _87 <- any borrowed v;
    _89 <- any borrowed v;
    goto BB57
  }
  BB57 {
    assert { [@expl:type invariant] inv12 _90 };
    assume { resolve7 _90 };
    assert { [@expl:type invariant] inv12 _88 };
    assume { resolve7 _88 };
    goto BB58
  }
  BB58 {
    goto BB59
  }
  BB59 {
    [#"../red_black_tree.rs" 781 24 781 25] r <- ([#"../red_black_tree.rs" 781 28 781 36] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 781 33 781 35] kv));
    [#"../red_black_tree.rs" 781 33 781 35] kv <- any (k, v);
    [#"../red_black_tree.rs" 781 24 781 36] _17 <- ([#"../red_black_tree.rs" 781 24 781 36] ());
    goto BB61
  }
  BB61 {
    goto BB62
  }
  BB62 {
    goto BB68
  }
  BB63 {
    [#"../red_black_tree.rs" 783 28 783 54] _94 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * node));
    [#"../red_black_tree.rs" 783 28 783 54] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _94)) };
    assume { inv7 ( ^ _94) };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve1 key };
    [#"../red_black_tree.rs" 783 28 783 54] _93 <- ([#"../red_black_tree.rs" 783 28 783 54] delete_rec _94 ([#"../red_black_tree.rs" 783 50 783 53] key));
    _94 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB64
  }
  BB64 {
    goto BB65
  }
  BB65 {
    [#"../red_black_tree.rs" 783 24 783 25] r <- ([#"../red_black_tree.rs" 783 24 783 25] _93);
    [#"../red_black_tree.rs" 783 24 783 25] _93 <- any Core_Option_Option_Type.t_option (k, v);
    [#"../red_black_tree.rs" 783 24 783 54] _17 <- ([#"../red_black_tree.rs" 783 24 783 54] ());
    goto BB67
  }
  BB67 {
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    [#"../red_black_tree.rs" 788 8 788 22] _97 <- Borrow.borrow_mut ( * node);
    [#"../red_black_tree.rs" 788 8 788 22] node <- { node with current =  ^ _97 };
    assume { inv5 ( ^ _97) };
    [#"../red_black_tree.rs" 788 8 788 22] _96 <- ([#"../red_black_tree.rs" 788 8 788 22] balance0 _97);
    _97 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB70
  }
  BB70 {
    assert { [@expl:type invariant] inv6 node };
    assume { resolve3 node };
    assert { [@expl:type invariant] inv8 self };
    assume { resolve4 self };
    [#"../red_black_tree.rs" 789 8 789 9] _0 <- ([#"../red_black_tree.rs" 789 8 789 9] r);
    [#"../red_black_tree.rs" 789 8 789 9] r <- any Core_Option_Option_Type.t_option (k, v);
    goto BB71
  }
  BB71 {
    goto BB76
  }
  BB72 {
    goto BB73
  }
  BB73 {
    goto BB74
  }
  BB74 {
    goto BB75
  }
  BB75 {
    goto BB76
  }
  BB76 {
    return _0
  }
  
end
module RedBlackTree_Impl15_Delete
  type k
  type v
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  type deep_model_ty0
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv8 (_x : deep_model_ty0)
  val inv8 (_x : deep_model_ty0) : bool
    ensures { result = inv8 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv8 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv8 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv8 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv8 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv8 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv8 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv8 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv8 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv8 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv8 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv8 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  predicate invariant13 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant13 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant13 self }
    
  predicate inv12 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv12 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv12 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use prelude.Borrow
  predicate invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val invariant12 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant12 self }
    
  predicate inv11 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)))
  val inv11 (_x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v)) . inv11 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant11 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant11 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant11 self }
    
  predicate inv10 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv10 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv10 x = true
  predicate invariant10 (self : v)
  val invariant10 (self : v) : bool
    ensures { result = invariant10 self }
    
  predicate inv9 (_x : v)
  val inv9 (_x : v) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : v . inv9 x = true
  predicate invariant9 (self : deep_model_ty0)
  val invariant9 (self : deep_model_ty0) : bool
    ensures { result = invariant9 self }
    
  axiom inv8 : forall x : deep_model_ty0 . inv8 x = true
  predicate invariant8 (self : Core_Option_Option_Type.t_option (k, v))
  val invariant8 (self : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv7 (_x : Core_Option_Option_Type.t_option (k, v))
  val inv7 (_x : Core_Option_Option_Type.t_option (k, v)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Core_Option_Option_Type.t_option (k, v) . inv7 x = true
  predicate invariant7 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant7 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant7 self }
    
  predicate inv6 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv6 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv6 x = true
  predicate invariant6 (self : k)
  val invariant6 (self : k) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : k)
  val inv5 (_x : k) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : k . inv5 x = true
  predicate invariant5 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant5 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv4 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv4 x = true
  predicate invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant4 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv3 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv3 x = true
  predicate invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant2 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant2 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv1 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv1 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv1 : forall x : RedBlackTree_Node_Type.t_node k v . inv1 x = true
  predicate invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant1 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv0 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv0 x = true
  use map.Map
  function deep_model0 (self : k) : deep_model_ty0
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  use map.Const
  function shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  use map.Map
  function shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  function deep_model1 (self : k) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model0 self
  val deep_model1 (self : k) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv4 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv4 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model0 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv8 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model0 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv9 v -> inv8 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model0 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  use prelude.Ghost
  val unwrap0 (self : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {inv11 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { inv2 result }
    
  val as_mut0 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v))
    requires {inv3 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 39 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 40 16 43 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed (RedBlackTree_Node_Type.t_node k v) . inv2 r /\ result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    ensures { inv11 result }
    
  predicate resolve4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve4 self }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  function cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 227 16 227 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn0 [#"../red_black_tree.rs" 226 0 226 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn0 c l r }
    
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv1 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  val delete_rec0 [#"../red_black_tree.rs" 748 4 748 55] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 736 15 736 43] internal_invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 737 15 738 62] match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ match_t0 (cpn0 (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 748 23 748 27] inv6 self}
    requires {[#"../red_black_tree.rs" 748 29 748 32] inv5 key}
    ensures { [#"../red_black_tree.rs" 739 14 739 42] internal_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 740 14 740 50] height0 ( * self) = height0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 741 14 744 5] match result with
      | Core_Option_Option_Type.C_None -> forall v : v . inv9 v -> not has_mapping0 ( * self) (deep_model1 key) v
      | Core_Option_Option_Type.C_Some (k, v) -> deep_model1 key = deep_model0 k /\ has_mapping0 ( * self) (deep_model0 k) v
      end }
    ensures { [#"../red_black_tree.rs" 745 4 745 129] forall v : v . forall k : deep_model_ty0 . inv9 v -> inv8 k -> has_mapping0 ( ^ self) k v = (deep_model1 key <> k /\ has_mapping0 ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 746 14 746 39] color_invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 747 4 747 69] color0 ( * self) = RedBlackTree_Color_Type.C_Black -> color0 ( ^ self) = RedBlackTree_Color_Type.C_Black }
    ensures { [#"../red_black_tree.rs" 748 41 748 55] inv7 result }
    
  predicate resolve3 (self : k)
  val resolve3 (self : k) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve1 self }
    
  val is_red0 [#"../red_black_tree.rs" 388 4 388 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    requires {[#"../red_black_tree.rs" 388 15 388 19] inv10 self}
    ensures { [#"../red_black_tree.rs" 387 14 387 45] result = (color0 self = RedBlackTree_Color_Type.C_Red) }
    
  predicate resolve0 (self : Ghost.ghost_ty ())
  val resolve0 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv4 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv12 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv8 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv4 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv12 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv8 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv9 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model0 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv4 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv12 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv8 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv4 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv12 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv8 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv9 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv4 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv8 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv4 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv8 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv9 v -> has_mapping0 self k v = (Map.get (shallow_model1 self) k = Core_Option_Option_Type.C_Some v))
  let rec cfg delete [#"../red_black_tree.rs" 800 4 800 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 792 15 792 34] invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 800 23 800 27] inv6 self}
    requires {[#"../red_black_tree.rs" 800 29 800 32] inv5 key}
    ensures { [#"../red_black_tree.rs" 793 14 793 33] invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 794 14 798 5] match result with
      | Core_Option_Option_Type.C_Some (k, v) -> deep_model0 k = deep_model1 key /\ Map.get (shallow_model0 self) (deep_model1 key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (shallow_model0 self) (deep_model1 key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../red_black_tree.rs" 799 14 799 59] shallow_model1 ( ^ self) = Map.set (shallow_model0 self) (deep_model1 key) (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 800 41 800 55] inv7 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var key : k = key;
  var _7 : Ghost.ghost_ty ();
  var _9 : ();
  var _10 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : bool;
  var r : Core_Option_Option_Type.t_option (k, v);
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : ();
  var _22 : bool;
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _27 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 801 8 801 39] _7 <- ([#"../red_black_tree.rs" 801 8 801 39] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { resolve0 _7 };
    [#"../red_black_tree.rs" 803 28 803 42] _10 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 803 28 803 42] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _10)) };
    assume { inv0 ( ^ _10) };
    switch ( * _10)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB8
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 803 20 803 24] node <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * _10));
    [#"../red_black_tree.rs" 803 20 803 24] _10 <- { _10 with current = (let Core_Option_Option_Type.C_Some x0 =  * _10 in Core_Option_Option_Type.C_Some ( ^ node)) };
    assume { inv1 ( ^ node) };
    [#"../red_black_tree.rs" 804 16 804 34] _14 <- ([#"../red_black_tree.rs" 804 16 804 34] is_red0 ([#"../red_black_tree.rs" 804 16 804 34] RedBlackTree_Node_Type.node_left ( * node)));
    goto BB4
  }
  BB4 {
    switch ([#"../red_black_tree.rs" 804 15 804 34] not _14)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    [#"../red_black_tree.rs" 805 16 805 32] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 805 29 805 32] RedBlackTree_Color_Type.C_Red) x2 x3 x4) };
    assert { [@expl:type invariant] inv2 node };
    assume { resolve1 node };
    assert { [@expl:type invariant] inv3 _10 };
    assume { resolve2 _10 };
    [#"../red_black_tree.rs" 804 35 806 13] _9 <- ([#"../red_black_tree.rs" 804 35 806 13] ());
    goto BB7
  }
  BB6 {
    assert { [@expl:type invariant] inv2 node };
    assume { resolve1 node };
    [#"../red_black_tree.rs" 806 13 806 13] _9 <- ([#"../red_black_tree.rs" 806 13 806 13] ());
    assert { [@expl:type invariant] inv3 _10 };
    assume { resolve2 _10 };
    goto BB7
  }
  BB7 {
    [#"../red_black_tree.rs" 810 16 810 36] _19 <- Borrow.borrow_mut ( * self);
    [#"../red_black_tree.rs" 810 16 810 36] self <- { self with current =  ^ _19 };
    assume { inv4 ( ^ _19) };
    assert { [@expl:type invariant] inv5 key };
    assume { resolve3 key };
    [#"../red_black_tree.rs" 810 16 810 36] r <- ([#"../red_black_tree.rs" 810 16 810 36] delete_rec0 _19 ([#"../red_black_tree.rs" 810 32 810 35] key));
    _19 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB9
  }
  BB8 {
    assert { [@expl:type invariant] inv3 _10 };
    assume { resolve2 _10 };
    assert { [@expl:type invariant] inv5 key };
    assume { resolve3 key };
    [#"../red_black_tree.rs" 808 19 808 23] _0 <- ([#"../red_black_tree.rs" 808 19 808 23] Core_Option_Option_Type.C_None);
    assert { [@expl:type invariant] inv6 self };
    assume { resolve4 self };
    goto BB17
  }
  BB9 {
    [#"../red_black_tree.rs" 811 11 811 24] _22 <- ([#"../red_black_tree.rs" 811 11 811 24] is_red0 ([#"../red_black_tree.rs" 811 11 811 24]  * self));
    goto BB10
  }
  BB10 {
    switch (_22)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    [#"../red_black_tree.rs" 812 12 812 30] _27 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self));
    [#"../red_black_tree.rs" 812 12 812 30] self <- { self with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * self in RedBlackTree_Tree_Type.C_Tree ( ^ _27)) };
    assume { inv0 ( ^ _27) };
    [#"../red_black_tree.rs" 812 12 812 30] _26 <- ([#"../red_black_tree.rs" 812 12 812 30] as_mut0 _27);
    _27 <- any borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
    goto BB12
  }
  BB12 {
    [#"../red_black_tree.rs" 812 12 812 39] _25 <- ([#"../red_black_tree.rs" 812 12 812 39] unwrap0 _26);
    _26 <- any Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
    goto BB13
  }
  BB13 {
    [#"../red_black_tree.rs" 812 12 812 53] _25 <- { _25 with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * _25 in RedBlackTree_Node_Type.C_Node x0 ([#"../red_black_tree.rs" 812 48 812 53] RedBlackTree_Color_Type.C_Black) x2 x3 x4) };
    assert { [@expl:type invariant] inv2 _25 };
    assume { resolve1 _25 };
    assert { [@expl:type invariant] inv6 self };
    assume { resolve4 self };
    [#"../red_black_tree.rs" 811 25 813 9] _21 <- ([#"../red_black_tree.rs" 811 25 813 9] ());
    goto BB15
  }
  BB14 {
    assert { [@expl:type invariant] inv6 self };
    assume { resolve4 self };
    [#"../red_black_tree.rs" 813 9 813 9] _21 <- ([#"../red_black_tree.rs" 813 9 813 9] ());
    goto BB15
  }
  BB15 {
    [#"../red_black_tree.rs" 814 8 814 9] _0 <- ([#"../red_black_tree.rs" 814 8 814 9] r);
    [#"../red_black_tree.rs" 814 8 814 9] r <- any Core_Option_Option_Type.t_option (k, v);
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module RedBlackTree_Impl15_Get
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  type deep_model_ty0
  use map.Map
  predicate invariant10 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant10 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant10 self }
    
  predicate inv9 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv9 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv9 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv8 (_x : deep_model_ty0)
  val inv8 (_x : deep_model_ty0) : bool
    ensures { result = inv8 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv8 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv8 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv8 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv8 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv8 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv8 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv8 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv8 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv8 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv8 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv8 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv8 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv8 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv8 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  predicate invariant9 (self : deep_model_ty0)
  val invariant9 (self : deep_model_ty0) : bool
    ensures { result = invariant9 self }
    
  axiom inv8 : forall x : deep_model_ty0 . inv8 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant8 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant8 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant8 self }
    
  predicate inv7 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv7 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv7 x = true
  predicate invariant7 (self : Core_Option_Option_Type.t_option v)
  val invariant7 (self : Core_Option_Option_Type.t_option v) : bool
    ensures { result = invariant7 self }
    
  predicate inv6 (_x : Core_Option_Option_Type.t_option v)
  val inv6 (_x : Core_Option_Option_Type.t_option v) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Core_Option_Option_Type.t_option v . inv6 x = true
  predicate invariant6 (self : v)
  val invariant6 (self : v) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : v)
  val inv5 (_x : v) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : v . inv5 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant5 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv4 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : RedBlackTree_Node_Type.t_node k v . inv4 x = true
  predicate invariant4 (self : k)
  val invariant4 (self : k) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : k)
  val inv3 (_x : k) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : k . inv3 x = true
  predicate invariant3 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant3 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant3 self }
    
  predicate inv2 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv2 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv2 x = true
  predicate invariant2 (self : v)
  val invariant2 (self : v) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : v)
  val inv1 (_x : v) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : v . inv1 x = true
  predicate invariant1 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant1 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv0 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv0 x = true
  use map.Map
  use map.Map
  function deep_model1 (self : k) : deep_model_ty0
  val deep_model1 (self : k) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  use map.Const
  function shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  use prelude.Borrow
  function shallow_model0 (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model1 self
  val shallow_model0 (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv7 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv7 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model1 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv8 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model1 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv8 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model1 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  use prelude.Ghost
  predicate resolve5 (self : v)
  val resolve5 (self : v) : bool
    ensures { result = resolve5 self }
    
  predicate resolve4 (self : RedBlackTree_Node_Type.t_node k v)
  val resolve4 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = resolve4 self }
    
  val cmp0 (self : k) (other : k) : Core_Cmp_Ordering_Type.t_ordering
    requires {inv3 self}
    requires {inv3 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85] result = cmp_log0 (deep_model1 self) (deep_model1 other) }
    
  predicate resolve3 (self : k)
  val resolve3 (self : k) : bool
    ensures { result = resolve3 self }
    
  predicate resolve2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val resolve2 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve2 self }
    
  function deep_model0 (self : k) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate resolve1 (self : RedBlackTree_Tree_Type.t_tree k v)
  val resolve1 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : Ghost.ghost_ty ())
  val resolve0 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv7 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv9 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv8 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv7 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv9 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv8 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv1 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv7 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv9 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv8 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv7 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv9 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv8 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv1 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv7 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv8 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv7 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv8 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv1 v -> has_mapping0 self k v = (Map.get (shallow_model1 self) k = Core_Option_Option_Type.C_Some v))
  let rec cfg get [#"../red_black_tree.rs" 822 4 822 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : RedBlackTree_Tree_Type.t_tree k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../red_black_tree.rs" 817 15 817 34] invariant0 self}
    requires {[#"../red_black_tree.rs" 822 16 822 20] inv0 self}
    requires {[#"../red_black_tree.rs" 822 22 822 25] inv3 key}
    ensures { [#"../red_black_tree.rs" 818 14 821 5] match result with
      | Core_Option_Option_Type.C_Some v -> Map.get (shallow_model0 self) (deep_model0 key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (shallow_model0 self) (deep_model0 key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../red_black_tree.rs" 822 34 822 44] inv6 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self : RedBlackTree_Tree_Type.t_tree k v = self;
  var key : k = key;
  var _6 : Ghost.ghost_ty ();
  var tree : RedBlackTree_Tree_Type.t_tree k v;
  var _12 : ();
  var _13 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var node : RedBlackTree_Node_Type.t_node k v;
  var _16 : Core_Cmp_Ordering_Type.t_ordering;
  var _19 : k;
  var _22 : RedBlackTree_Tree_Type.t_tree k v;
  var _25 : v;
  var _27 : RedBlackTree_Tree_Type.t_tree k v;
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 823 8 823 39] _6 <- ([#"../red_black_tree.rs" 823 8 823 39] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { resolve0 _6 };
    [#"../red_black_tree.rs" 825 23 825 27] tree <- ([#"../red_black_tree.rs" 825 23 825 27] self);
    assert { [@expl:type invariant] inv0 self };
    assume { resolve1 self };
    goto BB2
  }
  BB2 {
    invariant { [#"../red_black_tree.rs" 826 20 826 43] bst_invariant0 tree };
    invariant { [#"../red_black_tree.rs" 826 8 826 45] forall v : v . inv1 v -> has_mapping0 self (deep_model0 key) v = has_mapping0 tree (deep_model0 key) v };
    goto BB3
  }
  BB3 {
    [#"../red_black_tree.rs" 828 31 828 41] _13 <- ([#"../red_black_tree.rs" 828 31 828 41] RedBlackTree_Tree_Type.tree_node tree);
    assert { [@expl:type invariant] inv0 tree };
    assume { resolve1 tree };
    switch (_13)
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      | _ -> goto BB14
      end
  }
  BB4 {
    goto BB5
  }
  BB5 {
    [#"../red_black_tree.rs" 828 23 828 27] node <- ([#"../red_black_tree.rs" 828 23 828 27] Core_Option_Option_Type.some_0 _13);
    assert { [@expl:type invariant] inv2 _13 };
    assume { resolve2 _13 };
    [#"../red_black_tree.rs" 829 26 829 35] _19 <- ([#"../red_black_tree.rs" 829 26 829 35] RedBlackTree_Node_Type.node_key node);
    assert { [@expl:type invariant] inv3 _19 };
    assume { resolve3 _19 };
    [#"../red_black_tree.rs" 829 18 829 36] _16 <- ([#"../red_black_tree.rs" 829 18 829 36] cmp0 ([#"../red_black_tree.rs" 829 18 829 36] key) ([#"../red_black_tree.rs" 829 26 829 35] _19));
    goto BB6
  }
  BB6 {
    switch (_16)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB7
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB8
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB9
      end
  }
  BB7 {
    goto BB11
  }
  BB8 {
    goto BB12
  }
  BB9 {
    [#"../red_black_tree.rs" 832 34 832 45] _27 <- ([#"../red_black_tree.rs" 832 34 832 45] RedBlackTree_Node_Type.node_right node);
    assert { [@expl:type invariant] inv4 node };
    assume { resolve4 node };
    assert { [@expl:type invariant] inv0 _27 };
    assume { resolve1 _27 };
    [#"../red_black_tree.rs" 832 27 832 45] tree <- ([#"../red_black_tree.rs" 832 34 832 45] _27);
    [#"../red_black_tree.rs" 832 27 832 45] _12 <- ([#"../red_black_tree.rs" 832 27 832 45] ());
    goto BB13
  }
  BB10 {
    assert { [@expl:type invariant] inv4 node };
    assume { resolve4 node };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve3 key };
    assert { [#"../red_black_tree.rs" 829 18 829 36] false };
    absurd
  }
  BB11 {
    [#"../red_black_tree.rs" 830 31 830 41] _22 <- ([#"../red_black_tree.rs" 830 31 830 41] RedBlackTree_Node_Type.node_left node);
    assert { [@expl:type invariant] inv4 node };
    assume { resolve4 node };
    assert { [@expl:type invariant] inv0 _22 };
    assume { resolve1 _22 };
    [#"../red_black_tree.rs" 830 24 830 41] tree <- ([#"../red_black_tree.rs" 830 31 830 41] _22);
    [#"../red_black_tree.rs" 830 24 830 41] _12 <- ([#"../red_black_tree.rs" 830 24 830 41] ());
    goto BB13
  }
  BB12 {
    assert { [@expl:type invariant] inv3 key };
    assume { resolve3 key };
    [#"../red_black_tree.rs" 831 37 831 46] _25 <- ([#"../red_black_tree.rs" 831 37 831 46] RedBlackTree_Node_Type.node_val node);
    assert { [@expl:type invariant] inv4 node };
    assume { resolve4 node };
    assert { [@expl:type invariant] inv5 _25 };
    assume { resolve5 _25 };
    [#"../red_black_tree.rs" 831 32 831 47] _0 <- ([#"../red_black_tree.rs" 831 32 831 47] Core_Option_Option_Type.C_Some ([#"../red_black_tree.rs" 831 37 831 46] _25));
    goto BB15
  }
  BB13 {
    goto BB2
  }
  BB14 {
    assert { [@expl:type invariant] inv2 _13 };
    assume { resolve2 _13 };
    assert { [@expl:type invariant] inv3 key };
    assume { resolve3 key };
    [#"../red_black_tree.rs" 835 15 835 19] _0 <- ([#"../red_black_tree.rs" 835 15 835 19] Core_Option_Option_Type.C_None);
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl15_GetMut
  type k
  type v
  use Core_Option_Option_Type as Core_Option_Option_Type
  type deep_model_ty0
  use map.Map
  predicate invariant13 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val invariant13 (self : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = invariant13 self }
    
  predicate inv12 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v))
  val inv12 (_x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : bool
    ensures { result = inv12 _x }
    
  axiom inv12 : forall x : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v) . inv12 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  predicate inv2 (_x : deep_model_ty0)
  val inv2 (_x : deep_model_ty0) : bool
    ensures { result = inv2 _x }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y}
    ensures { result = eq_cmp0 x y }
    
  axiom eq_cmp0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Equal))
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y}
    ensures { result = antisym20 x y }
    
  axiom antisym20_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Less)
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y}
    ensures { result = antisym10 x y }
    
  axiom antisym10_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47] cmp_log0 y x = Core_Cmp_Ordering_Type.C_Greater)
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z}
    ensures { result = trans0 x y z o }
    
  axiom trans0_spec : forall x : deep_model_ty0, y : deep_model_ty0, z : deep_model_ty0, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv2 z) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31] cmp_log0 x z = o)
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x}
    ensures { result = refl0 x }
    
  axiom refl0_spec : forall x : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45] cmp_log0 x x = Core_Cmp_Ordering_Type.C_Equal)
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y}
    ensures { result = cmp_gt_log0 x y }
    
  axiom cmp_gt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64] gt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater))
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y}
    ensures { result = cmp_ge_log0 x y }
    
  axiom cmp_ge_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61] ge_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Less))
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y}
    ensures { result = cmp_lt_log0 x y }
    
  axiom cmp_lt_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61] lt_log0 x y = (cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less))
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y}
    ensures { result = cmp_le_log0 x y }
    
  axiom cmp_le_log0_spec : forall x : deep_model_ty0, y : deep_model_ty0 . ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv2 x) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv2 y) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64] le_log0 x y = (cmp_log0 x y <> Core_Cmp_Ordering_Type.C_Greater))
  use prelude.Borrow
  predicate invariant12 (self : Core_Option_Option_Type.t_option (borrowed v))
  val invariant12 (self : Core_Option_Option_Type.t_option (borrowed v)) : bool
    ensures { result = invariant12 self }
    
  predicate inv11 (_x : Core_Option_Option_Type.t_option (borrowed v))
  val inv11 (_x : Core_Option_Option_Type.t_option (borrowed v)) : bool
    ensures { result = inv11 _x }
    
  axiom inv11 : forall x : Core_Option_Option_Type.t_option (borrowed v) . inv11 x = true
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant11 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val invariant11 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = invariant11 self }
    
  predicate inv10 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)))
  val inv10 (_x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = inv10 _x }
    
  axiom inv10 : forall x : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) . inv10 x = true
  predicate invariant10 (self : borrowed (RedBlackTree_Node_Type.t_node k v))
  val invariant10 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant10 self }
    
  predicate inv9 (_x : borrowed (RedBlackTree_Node_Type.t_node k v))
  val inv9 (_x : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv9 _x }
    
  axiom inv9 : forall x : borrowed (RedBlackTree_Node_Type.t_node k v) . inv9 x = true
  predicate invariant9 (self : borrowed v)
  val invariant9 (self : borrowed v) : bool
    ensures { result = invariant9 self }
    
  predicate inv8 (_x : borrowed v)
  val inv8 (_x : borrowed v) : bool
    ensures { result = inv8 _x }
    
  axiom inv8 : forall x : borrowed v . inv8 x = true
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant8 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val invariant8 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = invariant8 self }
    
  predicate inv7 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v))
  val inv7 (_x : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : borrowed (RedBlackTree_Tree_Type.t_tree k v) . inv7 x = true
  predicate invariant7 (self : RedBlackTree_Tree_Type.t_tree k v)
  val invariant7 (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant7 self }
    
  predicate inv6 (_x : RedBlackTree_Tree_Type.t_tree k v)
  val inv6 (_x : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : RedBlackTree_Tree_Type.t_tree k v . inv6 x = true
  predicate invariant6 (self : k)
  val invariant6 (self : k) : bool
    ensures { result = invariant6 self }
    
  predicate inv5 (_x : k)
  val inv5 (_x : k) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : k . inv5 x = true
  predicate invariant5 (self : RedBlackTree_Node_Type.t_node k v)
  val invariant5 (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = invariant5 self }
    
  predicate inv4 (_x : RedBlackTree_Node_Type.t_node k v)
  val inv4 (_x : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = inv4 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv4 : forall x : RedBlackTree_Node_Type.t_node k v . inv4 x = true
  predicate invariant4 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val invariant4 (self : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = invariant4 self }
    
  predicate inv3 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))
  val inv3 (_x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v) . inv3 x = true
  predicate invariant3 (self : deep_model_ty0)
  val invariant3 (self : deep_model_ty0) : bool
    ensures { result = invariant3 self }
    
  axiom inv2 : forall x : deep_model_ty0 . inv2 x = true
  predicate invariant2 (self : v)
  val invariant2 (self : v) : bool
    ensures { result = invariant2 self }
    
  predicate inv1 (_x : v)
  val inv1 (_x : v) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : v . inv1 x = true
  use prelude.Ghost
  predicate invariant1 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)))
  val invariant1 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))) : bool
    ensures { result = invariant1 self }
    
  predicate inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)))
  val inv0 (_x : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)) . inv0 x = true
  use map.Map
  function deep_model1 (self : k) : deep_model_ty0
  val deep_model1 (self : k) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  function model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in model_acc0 right accu2
      end
  val model_acc0 [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc0 self accu }
    
  use map.Const
  function shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 173 20 173 54] model_acc0 self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model1 [#"../red_black_tree.rs" 172 4 172 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model1 self }
    
  use map.Map
  function shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 101 8 101 31] shallow_model1 ( * self)
  val shallow_model0 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model0 self }
    
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 258 12 261 13] match RedBlackTree_Tree_Type.tree_node self with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color0 [#"../red_black_tree.rs" 256 4 256 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color0 self }
    
  predicate color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 282 20 282 102] color0 (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ color0 (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here0 [#"../red_black_tree.rs" 281 4 281 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here0 self }
    
  predicate color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 268 12 274 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in color_invariant_here0 node /\ color_invariant0 left /\ color_invariant0 right
      end
  val color_invariant0 [#"../red_black_tree.rs" 266 4 266 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant0 self }
    
  use prelude.Int
  function height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 298 12 306 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match color with
        | RedBlackTree_Color_Type.C_Red -> height0 left
        | RedBlackTree_Color_Type.C_Black -> height0 left + 1
        end
      end
  val height0 [#"../red_black_tree.rs" 296 4 296 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    requires {[#"../red_black_tree.rs" 296 14 296 18] inv6 self}
    ensures { result = height0 self }
    
  axiom height0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . ([#"../red_black_tree.rs" 296 14 296 18] inv6 self) -> ([#"../red_black_tree.rs" 295 14 295 25] height0 self >= 0)
  predicate height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 339 20 339 61] height0 (RedBlackTree_Node_Type.node_left self) = height0 (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here0 [#"../red_black_tree.rs" 338 4 338 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here0 self }
    
  predicate height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 313 12 319 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in height_invariant_here0 node /\ height_invariant0 left /\ height_invariant0 right
      end
  val height_invariant0 [#"../red_black_tree.rs" 311 4 311 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant0 self }
    
  predicate has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping0 left k v \/ has_mapping0 right k v \/ k = deep_model1 key /\ v = val'
      end
  val has_mapping0 [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) (v : v) : bool
    ensures { result = has_mapping0 self k v }
    
  predicate bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 186 12 187 104] (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv2 k -> has_mapping0 (RedBlackTree_Node_Type.node_left self) k v -> lt_log0 k (deep_model1 (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv2 k -> has_mapping0 (RedBlackTree_Node_Type.node_right self) k v -> lt_log0 (deep_model1 (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here0 [#"../red_black_tree.rs" 184 4 184 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here0 self }
    
  predicate bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 206 12 212 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in bst_invariant_here0 node /\ bst_invariant0 left /\ bst_invariant0 right
      end
  val bst_invariant0 [#"../red_black_tree.rs" 204 4 204 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant0 self }
    
  predicate internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 358 12 358 59] bst_invariant0 self /\ height_invariant0 self
  val internal_invariant0 [#"../red_black_tree.rs" 356 4 356 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant0 self }
    
  predicate invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 366 12 366 88] internal_invariant0 self /\ color_invariant0 self /\ color0 self = RedBlackTree_Color_Type.C_Black
  val invariant0 [#"../red_black_tree.rs" 364 4 364 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant0 self }
    
  predicate resolve6 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve6 (self : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v))) : bool
    ensures { result = resolve6 self }
    
  predicate resolve5 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve5 (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : bool
    ensures { result = resolve5 self }
    
  predicate resolve4 (self : borrowed v) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve4 (self : borrowed v) : bool
    ensures { result = resolve4 self }
    
  predicate resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve3 (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : bool
    ensures { result = resolve3 self }
    
  val cmp0 (self : k) (other : k) : Core_Cmp_Ordering_Type.t_ordering
    requires {inv5 self}
    requires {inv5 other}
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85] result = cmp_log0 (deep_model1 self) (deep_model1 other) }
    
  predicate resolve2 (self : k)
  val resolve2 (self : k) : bool
    ensures { result = resolve2 self }
    
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 234 12 239 13] match self with
      | RedBlackTree_Cp_Type.C_CPL color -> color0 tree = color /\ color_invariant0 tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . inv4 node /\ RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t0 l (RedBlackTree_Node_Type.node_left node) /\ match_t0 r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t0 [#"../red_black_tree.rs" 232 4 232 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t0 self tree }
    
  use prelude.Ghost
  function deep_model0 (self : k) : deep_model_ty0 =
    [#"../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model0 (self : k) : deep_model_ty0
    ensures { result = deep_model0 self }
    
  predicate resolve1 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v)))
  val resolve1 (self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))) : bool
    ensures { result = resolve1 self }
    
  use prelude.Ghost
  predicate resolve0 (self : Ghost.ghost_ty ())
  val resolve0 (self : Ghost.ghost_ty ()) : bool
    ensures { result = resolve0 self }
    
  use prelude.Ghost
  function model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping0 right accu2 k
      end
  val model_acc_has_mapping0 [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 69 8 69 12] inv6 self}
    requires {[#"../red_black_tree.rs" 70 8 70 12] inv12 accu}
    requires {[#"../red_black_tree.rs" 71 8 71 9] inv2 k}
    ensures { result = model_acc_has_mapping0 self accu k }
    
  axiom model_acc_has_mapping0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 69 8 69 12] inv6 self) -> ([#"../red_black_tree.rs" 70 8 70 12] inv12 accu) -> ([#"../red_black_tree.rs" 71 8 71 9] inv2 k) -> ([#"../red_black_tree.rs" 66 4 67 93] Map.get (model_acc0 self accu) k = Map.get accu k \/ (exists v : v . inv1 v /\ Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v /\ has_mapping0 self k v))
  function has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match self with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc0 left accu k in let accu1 = model_acc0 left accu in let accu2 = Map.set accu1 (deep_model1 key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc0 right accu2 k in model_acc_has_mapping0 right accu2 k
      end
  val has_mapping_model_acc0 [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v)) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 89 29 89 33] inv6 self}
    requires {[#"../red_black_tree.rs" 89 35 89 39] inv12 accu}
    requires {[#"../red_black_tree.rs" 89 81 89 82] inv2 k}
    ensures { result = has_mapping_model_acc0 self accu k }
    
  axiom has_mapping_model_acc0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map deep_model_ty0 (Core_Option_Option_Type.t_option v), k : deep_model_ty0 . ([#"../red_black_tree.rs" 87 15 87 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 89 29 89 33] inv6 self) -> ([#"../red_black_tree.rs" 89 35 89 39] inv12 accu) -> ([#"../red_black_tree.rs" 89 81 89 82] inv2 k) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . inv1 v -> has_mapping0 self k v -> Map.get (model_acc0 self accu) k = Core_Option_Option_Type.C_Some v)
  function has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = model_acc_has_mapping0 self (Const.const (Core_Option_Option_Type.C_None)) k in has_mapping_model_acc0 self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model0 [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : deep_model_ty0) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self}
    requires {[#"../red_black_tree.rs" 110 25 110 29] inv6 self}
    requires {[#"../red_black_tree.rs" 110 31 110 32] inv2 k}
    ensures { result = has_mapping_model0 self k }
    
  axiom has_mapping_model0_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : deep_model_ty0 . ([#"../red_black_tree.rs" 108 15 108 35] bst_invariant0 self) -> ([#"../red_black_tree.rs" 110 25 110 29] inv6 self) -> ([#"../red_black_tree.rs" 110 31 110 32] inv2 k) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . inv1 v -> has_mapping0 self k v = (Map.get (shallow_model1 self) k = Core_Option_Option_Type.C_Some v))
  let rec cfg get_mut [#"../red_black_tree.rs" 844 4 844 56] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (borrowed v)
    requires {[#"../red_black_tree.rs" 838 15 838 34] invariant0 ( * self)}
    requires {[#"../red_black_tree.rs" 844 24 844 28] inv7 self}
    requires {[#"../red_black_tree.rs" 844 30 844 33] inv5 key}
    ensures { [#"../red_black_tree.rs" 839 14 839 33] invariant0 ( ^ self) }
    ensures { [#"../red_black_tree.rs" 840 14 843 5] match result with
      | Core_Option_Option_Type.C_Some v -> Map.get (shallow_model0 self) (deep_model0 key) = Core_Option_Option_Type.C_Some ( * v) /\ shallow_model1 ( ^ self) = Map.set (shallow_model0 self) (deep_model0 key) (Core_Option_Option_Type.C_Some ( ^ v))
      | Core_Option_Option_Type.C_None -> Map.get (shallow_model0 self) (deep_model0 key) = Core_Option_Option_Type.C_None /\ shallow_model1 ( ^ self) = shallow_model0 self
      end }
    ensures { [#"../red_black_tree.rs" 844 42 844 56] inv11 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed v);
  var self : borrowed (RedBlackTree_Tree_Type.t_tree k v) = self;
  var key : k = key;
  var _7 : Ghost.ghost_ty ();
  var old_self : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v));
  var tree : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _22 : ();
  var _23 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var node : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : Core_Cmp_Ordering_Type.t_ordering;
  var _29 : k;
  var _31 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _32 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _34 : borrowed v;
  var _35 : borrowed v;
  var _36 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _37 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  {
    goto BB0
  }
  BB0 {
    [#"../red_black_tree.rs" 845 8 845 39] _7 <- ([#"../red_black_tree.rs" 845 8 845 39] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { resolve0 _7 };
    [#"../red_black_tree.rs" 847 23 847 35] old_self <- ([#"../red_black_tree.rs" 847 23 847 35] Ghost.new self);
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] inv0 old_self };
    assume { resolve1 old_self };
    [#"../red_black_tree.rs" 848 23 848 27] tree <- ([#"../red_black_tree.rs" 848 23 848 27] self);
    [#"../red_black_tree.rs" 848 23 848 27] self <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB3
  }
  BB3 {
    invariant { [#"../red_black_tree.rs" 850 20 850 43] bst_invariant0 ( * tree) };
    invariant { [#"../red_black_tree.rs" 851 20 851 46] height_invariant0 ( * tree) };
    invariant { [#"../red_black_tree.rs" 852 20 852 45] color_invariant0 ( * tree) };
    invariant { [#"../red_black_tree.rs" 850 8 850 45] forall v : v . inv1 v -> has_mapping0 ( ^ tree) (deep_model0 key) v = has_mapping0 ( ^ Ghost.inner old_self) (deep_model0 key) v };
    invariant { [#"../red_black_tree.rs" 850 8 850 45] forall v : v . inv1 v -> has_mapping0 ( * tree) (deep_model0 key) v = has_mapping0 ( * Ghost.inner old_self) (deep_model0 key) v };
    invariant { [#"../red_black_tree.rs" 850 8 850 45] (forall v : v . forall k : deep_model_ty0 . inv1 v -> inv2 k -> k = deep_model0 key \/ has_mapping0 ( * tree) k v = has_mapping0 ( ^ tree) k v) -> bst_invariant0 ( ^ tree) -> bst_invariant0 ( ^ Ghost.inner old_self) };
    invariant { [#"../red_black_tree.rs" 850 8 850 45] height0 ( * tree) = height0 ( ^ tree) /\ height_invariant0 ( ^ tree) -> height_invariant0 ( ^ Ghost.inner old_self) };
    invariant { [#"../red_black_tree.rs" 850 8 850 45] match_t0 (RedBlackTree_Cp_Type.C_CPL (color0 ( * tree))) ( ^ tree) -> match_t0 (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) ( ^ Ghost.inner old_self) };
    invariant { [#"../red_black_tree.rs" 850 8 850 45] forall v : v . forall k : deep_model_ty0 . inv1 v -> inv2 k -> has_mapping0 ( * tree) k v = has_mapping0 ( ^ tree) k v -> has_mapping0 ( * Ghost.inner old_self) k v = has_mapping0 ( ^ Ghost.inner old_self) k v };
    goto BB4
  }
  BB4 {
    [#"../red_black_tree.rs" 862 31 862 45] _23 <- Borrow.borrow_mut (RedBlackTree_Tree_Type.tree_node ( * tree));
    [#"../red_black_tree.rs" 862 31 862 45] tree <- { tree with current = (let RedBlackTree_Tree_Type.C_Tree x0 =  * tree in RedBlackTree_Tree_Type.C_Tree ( ^ _23)) };
    assume { inv3 ( ^ _23) };
    switch ( * _23)
      | Core_Option_Option_Type.C_Some _ -> goto BB5
      | _ -> goto BB15
      end
  }
  BB5 {
    goto BB6
  }
  BB6 {
    [#"../red_black_tree.rs" 862 23 862 27] node <- Borrow.borrow_mut (Core_Option_Option_Type.some_0 ( * _23));
    [#"../red_black_tree.rs" 862 23 862 27] _23 <- { _23 with current = (let Core_Option_Option_Type.C_Some x0 =  * _23 in Core_Option_Option_Type.C_Some ( ^ node)) };
    assume { inv4 ( ^ node) };
    [#"../red_black_tree.rs" 863 26 863 35] _29 <- ([#"../red_black_tree.rs" 863 26 863 35] RedBlackTree_Node_Type.node_key ( * node));
    assert { [@expl:type invariant] inv5 _29 };
    assume { resolve2 _29 };
    [#"../red_black_tree.rs" 863 18 863 36] _26 <- ([#"../red_black_tree.rs" 863 18 863 36] cmp0 ([#"../red_black_tree.rs" 863 18 863 36] key) ([#"../red_black_tree.rs" 863 26 863 35] _29));
    goto BB7
  }
  BB7 {
    switch (_26)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB8
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB9
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB10
      end
  }
  BB8 {
    goto BB12
  }
  BB9 {
    goto BB13
  }
  BB10 {
    [#"../red_black_tree.rs" 866 34 866 49] _37 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_right ( * node));
    [#"../red_black_tree.rs" 866 34 866 49] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 ( ^ _37)) };
    assume { inv6 ( ^ _37) };
    [#"../red_black_tree.rs" 866 34 866 49] _36 <- Borrow.borrow_mut ( * _37);
    [#"../red_black_tree.rs" 866 34 866 49] _37 <- { _37 with current =  ^ _36 };
    assume { inv6 ( ^ _36) };
    assert { [@expl:type invariant] inv7 tree };
    assume { resolve3 tree };
    [#"../red_black_tree.rs" 866 27 866 49] tree <- ([#"../red_black_tree.rs" 866 27 866 49] _36);
    [#"../red_black_tree.rs" 866 27 866 49] _36 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    [#"../red_black_tree.rs" 866 27 866 49] _22 <- ([#"../red_black_tree.rs" 866 27 866 49] ());
    assert { [@expl:type invariant] inv7 _37 };
    assume { resolve3 _37 };
    goto BB14
  }
  BB11 {
    assert { [@expl:type invariant] inv9 node };
    assume { resolve5 node };
    assert { [@expl:type invariant] inv5 key };
    assume { resolve2 key };
    assert { [@expl:type invariant] inv10 _23 };
    assume { resolve6 _23 };
    assert { [@expl:type invariant] inv7 tree };
    assume { resolve3 tree };
    assert { [#"../red_black_tree.rs" 863 18 863 36] false };
    absurd
  }
  BB12 {
    [#"../red_black_tree.rs" 864 31 864 45] _32 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_left ( * node));
    [#"../red_black_tree.rs" 864 31 864 45] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node ( ^ _32) x1 x2 x3 x4) };
    assume { inv6 ( ^ _32) };
    [#"../red_black_tree.rs" 864 31 864 45] _31 <- Borrow.borrow_mut ( * _32);
    [#"../red_black_tree.rs" 864 31 864 45] _32 <- { _32 with current =  ^ _31 };
    assume { inv6 ( ^ _31) };
    assert { [@expl:type invariant] inv7 tree };
    assume { resolve3 tree };
    [#"../red_black_tree.rs" 864 24 864 45] tree <- ([#"../red_black_tree.rs" 864 24 864 45] _31);
    [#"../red_black_tree.rs" 864 24 864 45] _31 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    [#"../red_black_tree.rs" 864 24 864 45] _22 <- ([#"../red_black_tree.rs" 864 24 864 45] ());
    assert { [@expl:type invariant] inv7 _32 };
    assume { resolve3 _32 };
    goto BB14
  }
  BB13 {
    assert { [@expl:type invariant] inv5 key };
    assume { resolve2 key };
    [#"../red_black_tree.rs" 865 37 865 50] _35 <- Borrow.borrow_mut (RedBlackTree_Node_Type.node_val ( * node));
    [#"../red_black_tree.rs" 865 37 865 50] node <- { node with current = (let RedBlackTree_Node_Type.C_Node x0 x1 x2 x3 x4 =  * node in RedBlackTree_Node_Type.C_Node x0 x1 x2 ( ^ _35) x4) };
    assume { inv1 ( ^ _35) };
    [#"../red_black_tree.rs" 865 37 865 50] _34 <- Borrow.borrow_mut ( * _35);
    [#"../red_black_tree.rs" 865 37 865 50] _35 <- { _35 with current =  ^ _34 };
    assume { inv1 ( ^ _34) };
    [#"../red_black_tree.rs" 865 32 865 51] _0 <- ([#"../red_black_tree.rs" 865 32 865 51] Core_Option_Option_Type.C_Some _34);
    _34 <- any borrowed v;
    assert { [@expl:type invariant] inv8 _35 };
    assume { resolve4 _35 };
    assert { [@expl:type invariant] inv9 node };
    assume { resolve5 node };
    assert { [@expl:type invariant] inv10 _23 };
    assume { resolve6 _23 };
    goto BB16
  }
  BB14 {
    assert { [@expl:type invariant] inv9 node };
    assume { resolve5 node };
    assert { [@expl:type invariant] inv10 _23 };
    assume { resolve6 _23 };
    goto BB3
  }
  BB15 {
    assert { [@expl:type invariant] inv10 _23 };
    assume { resolve6 _23 };
    assert { [@expl:type invariant] inv5 key };
    assume { resolve2 key };
    [#"../red_black_tree.rs" 869 15 869 19] _0 <- ([#"../red_black_tree.rs" 869 15 869 19] Core_Option_Option_Type.C_None);
    goto BB16
  }
  BB16 {
    assert { [@expl:type invariant] inv7 tree };
    assume { resolve3 tree };
    return _0
  }
  
end
module RedBlackTree_Impl16
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  predicate invariant1 (self : RedBlackTree_Color_Type.t_color) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : RedBlackTree_Color_Type.t_color) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : RedBlackTree_Color_Type.t_color)
  val inv1 (_x : RedBlackTree_Color_Type.t_color) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : RedBlackTree_Color_Type.t_color . inv1 x = true
  predicate invariant0 (self : RedBlackTree_Color_Type.t_color) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : RedBlackTree_Color_Type.t_color) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : RedBlackTree_Color_Type.t_color)
  val inv0 (_x : RedBlackTree_Color_Type.t_color) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : RedBlackTree_Color_Type.t_color . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../red_black_tree.rs" 8 9 8 14] forall self : RedBlackTree_Color_Type.t_color . inv0 self -> (forall result : RedBlackTree_Color_Type.t_color . result = self -> inv1 result /\ result = self)
end
module RedBlackTree_Impl17
  
end
module RedBlackTree_Impl2
  type k
  type v
end
module RedBlackTree_Impl3
  type k
  type v
end
