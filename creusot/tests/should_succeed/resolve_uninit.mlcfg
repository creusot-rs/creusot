
module ResolveUninit_MaybeUninit
  type t
  predicate invariant0 (self : t)
  val invariant0 (self : t) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : t . inv0 x = true
  predicate resolve0 (self : t)
  val resolve0 (self : t) : bool
    ensures { result = resolve0 self }
    
  predicate is_default0 (self : t)
  val is_default0 (self : t) : bool
    ensures { result = is_default0 self }
    
  val default0 (_1 : ()) : t
    ensures { [#"../../../../creusot-contracts/src/std/default.rs" 13 26 13 45] is_default0 result }
    ensures { inv0 result }
    
  let rec cfg maybe_uninit [#"../resolve_uninit.rs" 5 0 5 51] [@cfg:stackify] [@cfg:subregion_analysis] (b : bool) (y : t) : t
    requires {[#"../resolve_uninit.rs" 5 41 5 42] inv0 y}
    ensures { [#"../resolve_uninit.rs" 5 50 5 51] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var b : bool = b;
  var y : t = y;
  var x : t;
  var _4 : ();
  var _6 : t;
  {
    goto BB0
  }
  BB0 {
    switch (b)
      | False -> goto BB6
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../resolve_uninit.rs" 8 12 8 24] _6 <- ([#"../resolve_uninit.rs" 8 12 8 24] default0 ([#"../resolve_uninit.rs" 8 12 8 24] ()));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    [#"../resolve_uninit.rs" 8 8 8 9] x <- _6;
    _6 <- any t;
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    goto BB5
  }
  BB5 {
    [#"../resolve_uninit.rs" 7 9 9 5] _4 <- ([#"../resolve_uninit.rs" 7 9 9 5] ());
    goto BB7
  }
  BB6 {
    [#"../resolve_uninit.rs" 9 5 9 5] _4 <- ([#"../resolve_uninit.rs" 9 5 9 5] ());
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    [#"../resolve_uninit.rs" 11 4 11 5] x <- y;
    y <- any t;
    goto BB10
  }
  BB10 {
    [#"../resolve_uninit.rs" 12 4 12 5] _0 <- x;
    x <- any t;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module ResolveUninit_InitJoin
  use prelude.Borrow
  use prelude.Int32
  predicate resolve0 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve0 (self : borrowed int32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg init_join [#"../resolve_uninit.rs" 15 0 15 37] [@cfg:stackify] [@cfg:subregion_analysis] (b : bool) (x : int32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var b : bool = b;
  var x : int32 = x;
  var y : borrowed int32;
  var z : borrowed int32;
  var _5 : ();
  var _7 : borrowed int32;
  var _8 : borrowed int32;
  var _9 : borrowed int32;
  var _10 : borrowed int32;
  var _11 : borrowed int32;
  var _12 : borrowed int32;
  var _14 : bool;
  {
    goto BB0
  }
  BB0 {
    switch (b)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    [#"../resolve_uninit.rs" 20 12 20 18] _8 <- Borrow.borrow_mut x;
    [#"../resolve_uninit.rs" 20 12 20 18] x <-  ^ _8;
    [#"../resolve_uninit.rs" 20 12 20 18] _7 <- Borrow.borrow_final ( * _8) (Borrow.get_id _8);
    [#"../resolve_uninit.rs" 20 12 20 18] _8 <- { _8 with current = ( ^ _7) ; };
    [#"../resolve_uninit.rs" 20 8 20 18] z <- _7;
    _7 <- any borrowed int32;
    assume { resolve0 _8 };
    [#"../resolve_uninit.rs" 21 12 21 19] _10 <- Borrow.borrow_final ( * z) (Borrow.get_id z);
    [#"../resolve_uninit.rs" 21 12 21 19] z <- { z with current = ( ^ _10) ; };
    [#"../resolve_uninit.rs" 21 12 21 19] _9 <- Borrow.borrow_final ( * _10) (Borrow.get_id _10);
    [#"../resolve_uninit.rs" 21 12 21 19] _10 <- { _10 with current = ( ^ _9) ; };
    [#"../resolve_uninit.rs" 21 8 21 19] y <- _9;
    _9 <- any borrowed int32;
    assume { resolve0 _10 };
    [#"../resolve_uninit.rs" 19 9 23 5] _5 <- ([#"../resolve_uninit.rs" 19 9 23 5] ());
    goto BB7
  }
  BB2 {
    [#"../resolve_uninit.rs" 24 12 24 18] _12 <- Borrow.borrow_mut x;
    [#"../resolve_uninit.rs" 24 12 24 18] x <-  ^ _12;
    [#"../resolve_uninit.rs" 24 12 24 18] _11 <- Borrow.borrow_final ( * _12) (Borrow.get_id _12);
    [#"../resolve_uninit.rs" 24 12 24 18] _12 <- { _12 with current = ( ^ _11) ; };
    [#"../resolve_uninit.rs" 24 8 24 18] y <- _11;
    _11 <- any borrowed int32;
    assume { resolve0 _12 };
    [#"../resolve_uninit.rs" 23 11 25 5] _5 <- ([#"../resolve_uninit.rs" 23 11 25 5] ());
    goto BB3
  }
  BB3 {
    [#"../resolve_uninit.rs" 27 4 27 10] y <- { y with current = ([#"../resolve_uninit.rs" 27 9 27 10] (5 : int32)) ; };
    assume { resolve0 y };
    [#"../resolve_uninit.rs" 28 12 28 18] _14 <- x = ([#"../resolve_uninit.rs" 28 17 28 18] (5 : int32));
    switch (_14)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    [#"../resolve_uninit.rs" 15 38 29 1] _0 <- ([#"../resolve_uninit.rs" 15 38 29 1] ());
    return _0
  }
  BB5 {
    assert { [#"../resolve_uninit.rs" 28 4 28 19] false };
    absurd
  }
  BB7 {
    assume { resolve0 z };
    goto BB3
  }
  
end
