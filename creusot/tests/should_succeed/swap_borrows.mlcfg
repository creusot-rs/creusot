
module SwapBorrows_Swap
  type t
  predicate invariant0 (self : (t, t))
  val invariant0 (self : (t, t)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : (t, t))
  val inv0 (_x : (t, t)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : (t, t) . inv0 x = true
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (t, t)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve0 (self : (t, t)) : bool
    ensures { result = resolve0 self }
    
  let rec cfg swap [#"../swap_borrows.rs" 5 0 5 31] [@cfg:stackify] [@cfg:subregion_analysis] (x : (t, t)) : (t, t)
    requires {[#"../swap_borrows.rs" 5 11 5 12] inv0 x}
    ensures { [#"../swap_borrows.rs" 4 10 4 30] result = ((let (_, a) = x in a), (let (a, _) = x in a)) }
    ensures { [#"../swap_borrows.rs" 5 25 5 31] inv0 result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (t, t);
  var x : (t, t) = x;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 x };
    assume { resolve0 x };
    [#"../swap_borrows.rs" 6 4 6 14] _0 <- ((let (_, a) = x in a), (let (a, _) = x in a));
    x <- (let (x0, x1) = x in (x0, any t));
    x <- (let (x0, x1) = x in (any t, x1));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module SwapBorrows_F
  use prelude.UInt32
  use prelude.Borrow
  predicate invariant0 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : (borrowed uint32, borrowed uint32)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : (borrowed uint32, borrowed uint32))
  val inv0 (_x : (borrowed uint32, borrowed uint32)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : (borrowed uint32, borrowed uint32) . inv0 x = true
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 26 20 26 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve2 (self : (borrowed uint32, borrowed uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve1 (let (a, _) = self in a) /\ resolve1 (let (_, a) = self in a)
  val resolve2 (self : (borrowed uint32, borrowed uint32)) : bool
    ensures { result = resolve2 self }
    
  val swap0 [#"../swap_borrows.rs" 5 0 5 31] (x : (borrowed uint32, borrowed uint32)) : (borrowed uint32, borrowed uint32)
    requires {[#"../swap_borrows.rs" 5 11 5 12] inv0 x}
    ensures { [#"../swap_borrows.rs" 4 10 4 30] result = ((let (_, a) = x in a), (let (a, _) = x in a)) }
    ensures { [#"../swap_borrows.rs" 5 25 5 31] inv0 result }
    
  predicate resolve3 (self : uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 46 8 46 12] true
  val resolve3 (self : uint32) : bool
    ensures { result = resolve3 self }
    
  predicate resolve0 (self : (uint32, uint32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 17 8 17 60] resolve3 (let (a, _) = self in a) /\ resolve3 (let (_, a) = self in a)
  val resolve0 (self : (uint32, uint32)) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg f [#"../swap_borrows.rs" 10 0 10 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32;
  var b : uint32;
  var _3 : (uint32, uint32);
  var p : (borrowed uint32, borrowed uint32);
  var _5 : (borrowed uint32, borrowed uint32);
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../swap_borrows.rs" 11 25 11 31] _3 <- (([#"../swap_borrows.rs" 11 26 11 27] (0 : uint32)), ([#"../swap_borrows.rs" 11 29 11 30] (0 : uint32)));
    [#"../swap_borrows.rs" 11 9 11 14] a <- (let (a, _) = _3 in a);
    [#"../swap_borrows.rs" 11 16 11 21] b <- (let (_, a) = _3 in a);
    assume { resolve0 _3 };
    [#"../swap_borrows.rs" 12 18 12 24] _6 <- Borrow.borrow_mut a;
    [#"../swap_borrows.rs" 12 18 12 24] a <-  ^ _6;
    [#"../swap_borrows.rs" 12 26 12 32] _8 <- Borrow.borrow_mut b;
    [#"../swap_borrows.rs" 12 26 12 32] b <-  ^ _8;
    [#"../swap_borrows.rs" 12 26 12 32] _7 <- Borrow.borrow_final ( * _8) (Borrow.get_id _8);
    [#"../swap_borrows.rs" 12 26 12 32] _8 <- { _8 with current = ( ^ _7) ; };
    [#"../swap_borrows.rs" 12 17 12 33] _5 <- (_6, _7);
    _6 <- any borrowed uint32;
    _7 <- any borrowed uint32;
    [#"../swap_borrows.rs" 12 12 12 34] p <- ([#"../swap_borrows.rs" 12 12 12 34] swap0 _5);
    _5 <- any (borrowed uint32, borrowed uint32);
    goto BB1
  }
  BB1 {
    assume { resolve1 _8 };
    [#"../swap_borrows.rs" 13 4 13 13] p <- (let (x0, x1) = p in ({ (let (a, _) = p in a) with current = ([#"../swap_borrows.rs" 13 11 13 13] (10 : uint32)) ; }, x1));
    assume { resolve2 p };
    assert { [@expl:assertion] [#"../swap_borrows.rs" 15 20 15 30] b = (10 : uint32) };
    assert { [@expl:assertion] [#"../swap_borrows.rs" 16 20 16 29] a = (0 : uint32) };
    [#"../swap_borrows.rs" 10 11 17 1] _0 <- ([#"../swap_borrows.rs" 10 11 17 1] ());
    return _0
  }
  
end
