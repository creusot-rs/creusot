
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  val ghost predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  val ghost predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t1
  let rec ghost predicate resolve (self : (t1, t2)) = [@vc:do_not_keep_trace] [@vc:sp]
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module SwapBorrows_Swap_Interface
  type t
  val swap [@cfg:stackify] (x : (t, t)) : (t, t)
    ensures { [#"../swap_borrows.rs" 4 10 4 30] result = (let (_, a) = x in a, let (a, _) = x in a) }
    
end
module SwapBorrows_Swap
  type t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve1 with type t1 = t, type t2 = t,
    val Resolve0.resolve = Resolve0.resolve, val Resolve1.resolve = Resolve0.resolve
  let rec cfg swap [@cfg:stackify] [#"../swap_borrows.rs" 5 0 5 31] (x : (t, t)) : (t, t)
    ensures { [#"../swap_borrows.rs" 4 10 4 30] result = (let (_, a) = x in a, let (a, _) = x in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (t, t);
  var x_1 : (t, t);
  var _3 : t;
  var _4 : t;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _3 };
    _3 <- (let (_, a) = x_1 in a);
    x_1 <- (let (a, b) = x_1 in (a, any t));
    assume { Resolve0.resolve _4 };
    _4 <- (let (a, _) = x_1 in a);
    x_1 <- (let (a, b) = x_1 in (any t, b));
    _0 <- (_3, _4);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve x_1 };
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  val ghost predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  let rec ghost predicate resolve (self : borrowed t) = [@vc:do_not_keep_trace] [@vc:sp]
    pure { ^ self =  * self}
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  val ghost predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  let rec ghost predicate resolve (self : t) = [@vc:do_not_keep_trace] [@vc:sp]
    true
end
module SwapBorrows_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module SwapBorrows_F
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = borrowed uint32,
    type t2 = borrowed uint32, val Resolve0.resolve = Resolve1.resolve, val Resolve1.resolve = Resolve1.resolve
  clone SwapBorrows_Swap_Interface as Swap0 with type t = borrowed uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = uint32, type t2 = uint32,
    val Resolve0.resolve = Resolve3.resolve, val Resolve1.resolve = Resolve3.resolve
  let rec cfg f [@cfg:stackify] [#"../swap_borrows.rs" 10 0 10 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var _3 : (uint32, uint32);
  var p_4 : (borrowed uint32, borrowed uint32);
  var _5 : (borrowed uint32, borrowed uint32);
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : borrowed uint32;
  var _9 : ();
  var _11 : ();
  {
    goto BB0
  }
  BB0 {
    _3 <- ((0 : uint32), (0 : uint32));
    a_1 <- (let (a, _) = _3 in a);
    b_2 <- (let (_, a) = _3 in a);
    assume { Resolve0.resolve _3 };
    _6 <- borrow_mut a_1;
    a_1 <-  ^ _6;
    _8 <- borrow_mut b_2;
    b_2 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { Resolve1.resolve _8 };
    _5 <- (_6, _7);
    p_4 <- ([#"../swap_borrows.rs" 12 12 12 34] Swap0.swap _5);
    goto BB1
  }
  BB1 {
    p_4 <- (let (a, b) = p_4 in ({ (let (a, _) = p_4 in a) with current = (10 : uint32) }, b));
    assume { Resolve2.resolve p_4 };
    assert { [#"../swap_borrows.rs" 15 20 15 30] b_2 = (10 : uint32) };
    _9 <- ();
    assert { [#"../swap_borrows.rs" 16 20 16 29] a_1 = (0 : uint32) };
    _11 <- ();
    _0 <- ();
    return _0
  }
  
end
