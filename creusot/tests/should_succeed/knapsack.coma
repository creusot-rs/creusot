module M_knapsack__max [#"knapsack.rs" 16 0 16 35]
  let%span sknapsack0 = "knapsack.rs" 14 11 14 15
  let%span sknapsack1 = "knapsack.rs" 15 10 15 31
  
  use int.MinMax
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  meta "compute_max_steps" 1000000
  
  let rec max (a:usize) (b:usize) (return'  (ret:usize))= {[%#sknapsack0] true}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.lt {a} {b} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1)
      | s1 = any [ br0 -> {_5 = false} (! bb2) | br1 -> {_5} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : usize = any_l () | & a : usize = a | & b : usize = b | & _5 : bool = any_l () ] 
    [ return' (result:usize)-> {[@expl:postcondition] [%#sknapsack1] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
end
module T_knapsack__Item [#"knapsack.rs" 8 0 8 21]
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Item 'name =
    | C_Item 'name usize usize
  
  let rec t_Item < 'name > (input:t_Item 'name) (ret  (name:'name) (weight:usize) (value:usize))= any
    [ good (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value = input}
      (! ret {name} {weight} {value}) ]
    
  
  function t_Item__weight (self : t_Item 'name) : usize =
    match self with
      | C_Item _ a _ -> a
      end
  
  function t_Item__value (self : t_Item 'name) : usize =
    match self with
      | C_Item _ _ a -> a
      end
end
module M_knapsack__m [#"knapsack.rs" 35 0 35 57]
  type name
  
  let%span sknapsack0 = "knapsack.rs" 32 11 32 37
  let%span sknapsack1 = "knapsack.rs" 33 11 33 17
  let%span sknapsack2 = "knapsack.rs" 34 10 34 21
  let%span sknapsack3 = "knapsack.rs" 31 10 31 11
  let%span sknapsack4 = "knapsack.rs" 36 4 43 5
  
  use int.MinMax
  
  use T_knapsack__Item as T_knapsack__Item
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use T_knapsack__Item as T_knapsack__Item
  
  use T_knapsack__Item as Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant items  : Seq.seq (Item'0.t_Item name)
  
  constant i  : int
  
  constant w  : int
  
  function m [#"knapsack.rs" 35 0 35 57] (items : Seq.seq (Item'0.t_Item name)) (i : int) (w : int) : int
  
  goal vc_m : ([%#sknapsack1] 0 <= w)
   -> ([%#sknapsack0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    [%#sknapsack2] 0 >= 0
  else
    if UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))) > w then
      ((([%#sknapsack1] 0 <= w) && ([%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m items (i - 1) w >= 0)  -> ([%#sknapsack2] m items (i - 1) w >= 0))
    else
      ((([%#sknapsack1] 0 <= w) && ([%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m items (i - 1) w >= 0)
       -> ((([%#sknapsack1] 0 <= w - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      && ([%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m items (i - 1) (w
      - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      >= 0)
       -> ([%#sknapsack2] MinMax.max (m items (i - 1) w) (m items (i - 1) (w
      - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      + UIntSize.to_int (T_knapsack__Item.t_Item__value (Seq.get items (i - 1))))
      >= 0)))
    
  )
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_knapsack__knapsack01_dyn [#"knapsack.rs" 49 0 49 91]
  type name
  
  let%span sknapsack0 = "knapsack.rs" 50 51 50 52
  let%span sknapsack1 = "knapsack.rs" 50 35 50 36
  let%span sknapsack2 = "knapsack.rs" 50 69 50 70
  let%span sknapsack3 = "knapsack.rs" 51 16 51 17
  let%span sknapsack4 = "knapsack.rs" 53 16 53 53
  let%span sknapsack5 = "knapsack.rs" 53 4 53 55
  let%span sknapsack6 = "knapsack.rs" 65 20 65 21
  let%span sknapsack7 = "knapsack.rs" 67 20 67 57
  let%span sknapsack8 = "knapsack.rs" 67 8 67 59
  let%span sknapsack9 = "knapsack.rs" 78 27 78 28
  let%span sknapsack10 = "knapsack.rs" 83 17 83 18
  let%span sknapsack11 = "knapsack.rs" 85 13 85 14
  let%span sknapsack12 = "knapsack.rs" 92 16 92 27
  let%span sknapsack13 = "knapsack.rs" 93 16 93 34
  let%span sknapsack14 = "knapsack.rs" 94 16 94 43
  let%span sknapsack15 = "knapsack.rs" 95 10 95 11
  let%span sknapsack16 = "knapsack.rs" 96 13 96 14
  let%span sknapsack17 = "knapsack.rs" 98 26 98 27
  let%span sknapsack18 = "knapsack.rs" 46 11 46 34
  let%span sknapsack19 = "knapsack.rs" 47 11 47 33
  let%span sknapsack20 = "knapsack.rs" 48 0 48 86
  let%span sknapsack21 = "knapsack.rs" 49 28 49 33
  let%span sknapsack22 = "knapsack.rs" 49 75 49 91
  let%span svec23 = "../../../creusot-contracts/src/std/vec.rs" 183 22 183 41
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 184 12 184 78
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span smodel26 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sops28 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sknapsack29 = "knapsack.rs" 32 11 32 37
  let%span sknapsack30 = "knapsack.rs" 33 11 33 17
  let%span sknapsack31 = "knapsack.rs" 34 10 34 21
  let%span sknapsack32 = "knapsack.rs" 31 10 31 11
  let%span sknapsack33 = "knapsack.rs" 36 4 43 5
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span sknapsack36 = "knapsack.rs" 14 11 14 15
  let%span sknapsack37 = "knapsack.rs" 15 10 15 31
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span svec40 = "../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span svec41 = "../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span svec42 = "../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span svec43 = "../../../creusot-contracts/src/std/vec.rs" 81 26 81 44
  let%span svec44 = "../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span sslice45 = "../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice46 = "../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span smodel47 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice48 = "../../../creusot-contracts/src/std/slice.rs" 140 8 140 96
  let%span sresolve49 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec50 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sinvariant51 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sinvariant52 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq53 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed54 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use T_knapsack__Item as Item'0
  
  predicate inv'15 (_1 : Item'0.t_Item name)
  
  predicate invariant'8 (self : Item'0.t_Item name) =
    [%#sboxed54] inv'15 self
  
  predicate inv'19 (_1 : Item'0.t_Item name)
  
  axiom inv_axiom'18 [@rewrite] : forall x : Item'0.t_Item name [inv'19 x] . inv'19 x = invariant'8 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq (Item'0.t_Item name)) =
    [%#sseq53] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'19 (Seq.get self i)
  
  predicate inv'18 (_1 : Seq.seq (Item'0.t_Item name))
  
  axiom inv_axiom'17 [@rewrite] : forall x : Seq.seq (Item'0.t_Item name) [inv'18 x] . inv'18 x = invariant'7 x
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : Item'0.t_Item name)
  
  predicate invariant'6 (self : Item'0.t_Item name) =
    [%#sboxed54] inv'5 self
  
  predicate inv'17 (_1 : Item'0.t_Item name)
  
  axiom inv_axiom'16 [@rewrite] : forall x : Item'0.t_Item name [inv'17 x] . inv'17 x = invariant'6 x
  
  predicate inv'16 (_1 : name)
  
  axiom inv_axiom'15 [@rewrite] : forall x : Item'0.t_Item name [inv'15 x] . inv'15 x
  = match x with
    | Item'0.C_Item name weight value -> inv'16 name
    end
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'3 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
  
  axiom view'3_spec : forall self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . [%#svec27] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'5 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#svec50] inv'18 (view'3 self)
  
  predicate inv'14 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  axiom inv_axiom'14 [@rewrite] : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) [inv'14 x] . inv'14 x
  = invariant'5 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq (Item'0.t_Item name)) =
    [%#sseq53] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'17 (Seq.get self i)
  
  predicate inv'13 (_1 : Seq.seq (Item'0.t_Item name))
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq (Item'0.t_Item name) [inv'13 x] . inv'13 x = invariant'4 x
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  predicate invariant'3 (self : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) =
    [%#sinvariant52] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'12 (_1 : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))
  
  axiom inv_axiom'12 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) [inv'12 x] . inv'12 x
  = invariant'3 x
  
  predicate inv'11 (_1 : borrowed usize)
  
  axiom inv_axiom'11 [@rewrite] : forall x : borrowed usize [inv'11 x] . inv'11 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'10 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) [inv'10 x] . inv'10 x
  = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'9 (_1 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))
  
  axiom inv_axiom'9 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) [inv'9 x] . inv'9 x
  = true
  
  predicate inv'8 (_1 : usize)
  
  axiom inv_axiom'8 [@rewrite] : forall x : usize [inv'8 x] . inv'8 x = true
  
  predicate inv'7 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv_axiom'7 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv_axiom'6 [@rewrite] : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) [inv'6 x] . inv'6 x
  = true
  
  predicate invariant'2 (self : Item'0.t_Item name) =
    [%#sinvariant51] inv'15 self
  
  axiom inv_axiom'5 [@rewrite] : forall x : Item'0.t_Item name [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate inv'4 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv_axiom'4 [@rewrite] : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) [inv'4 x] . inv'4 x
  = true
  
  predicate inv'3 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : usize)
  
  axiom inv_axiom'2 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  predicate invariant'1 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#sinvariant51] inv'14 self
  
  predicate inv'1 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) [inv'1 x] . inv'1 x
  = invariant'1 x
  
  function view'8 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
  
  axiom view'8_spec : forall self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . [%#svec27] Seq.length (view'8 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#svec50] inv'13 (view'8 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) [inv'0 x] . inv'0 x
  = invariant'0 x
  
  use T_knapsack__Item as T_knapsack__Item
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (ix : int) : Item'0.t_Item name
    
   =
    [%#sops28] Seq.get (view'3 self) ix
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function view'9 (self : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) : Seq.seq (Item'0.t_Item name)
    
   =
    [%#smodel47] view'8 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) (value:Item'0.t_Item name) (return'  (ret:()))= {[@expl:precondition] inv'5 value}
    {[@expl:precondition] inv'12 self}
    any [ return' (result:())-> {[%#svec44] view'8 self.final = Seq.snoc (view'9 self) value} (! return' {result}) ] 
  
  let rec with_capacity'0 (capacity:usize) (return'  (ret:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))-> {inv'0 result}
      {[%#svec43] Seq.length (view'8 result) = 0}
      (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#sresolve49] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed usize) =
    [%#sresolve49] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed usize) =
    resolve'2 _1
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#sslice48] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  function view'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'2_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec27] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate has_value'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#sslice46] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#sslice45] UIntSize.to_int self < Seq.length seq
  
  function view'7 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#smodel47] view'2 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] inv'2 index}
    {[@expl:precondition] inv'10 self}
    {[@expl:precondition] [%#svec38] in_bounds'2 index (view'7 self)}
    any
    [ return' (result:borrowed usize)-> {inv'11 result}
      {[%#svec42] Seq.length (view'2 self.final) = Seq.length (view'7 self)}
      {[%#svec41] resolve_elswhere'1 index (view'7 self) (view'2 self.final)}
      {[%#svec40] has_value'2 index (view'2 self.final) result.final}
      {[%#svec39] has_value'2 index (view'7 self) result.current}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (fin : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
    
   =
    [%#sslice48] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  function view'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom view'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#svec27] Seq.length (view'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#sslice46] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#sslice45] UIntSize.to_int self < Seq.length seq
  
  function view'6 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#smodel47] view'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))))= {[@expl:precondition] inv'2 index}
    {[@expl:precondition] inv'9 self}
    {[@expl:precondition] [%#svec38] in_bounds'1 index (view'6 self)}
    any
    [ return' (result:borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))-> {inv'10 result}
      {[%#svec42] Seq.length (view'1 self.final) = Seq.length (view'6 self)}
      {[%#svec41] resolve_elswhere'0 index (view'6 self) (view'1 self.final)}
      {[%#svec40] has_value'1 index (view'1 self.final) result.final}
      {[%#svec39] has_value'1 index (view'6 self) result.current}
      (! return' {result}) ]
    
  
  use int.MinMax
  
  let rec max'0 (a:usize) (b:usize) (return'  (ret:usize))= {[@expl:precondition] [%#sknapsack36] true}
    any
    [ return' (result:usize)-> {[%#sknapsack37] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function view'5 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize =
    [%#smodel26] view'2 self
  
  let rec index'2 (self:Vec'0.t_Vec usize (Global'0.t_Global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] inv'2 index}
    {[@expl:precondition] inv'7 self}
    {[@expl:precondition] [%#svec34] in_bounds'2 index (view'5 self)}
    any
    [ return' (result:usize)-> {inv'8 result} {[%#svec35] has_value'2 index (view'5 self) result} (! return' {result}) ]
    
  
  function view'4 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#smodel26] view'1 self
  
  let rec index'1 (self:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (index:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] inv'2 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [%#svec34] in_bounds'1 index (view'4 self)}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {inv'7 result}
      {[%#svec35] has_value'1 index (view'4 self) result}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_Item name)) (out : Item'0.t_Item name)
   =
    [%#sslice46] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_Item name)) =
    [%#sslice45] UIntSize.to_int self < Seq.length seq
  
  function view'0 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name) =
    [%#smodel26] view'3 self
  
  let rec index'0 (self:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (index:usize) (return'  (ret:Item'0.t_Item name))= {[@expl:precondition] inv'2 index}
    {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#svec34] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:Item'0.t_Item name)-> {inv'5 result}
      {[%#svec35] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
    
  
  use T_knapsack__Item as T_knapsack__Item
  
  function m'0 [#"knapsack.rs" 35 0 35 57] (items : Seq.seq (Item'0.t_Item name)) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq (Item'0.t_Item name), i : int, w : int . m'0 items i w
  = ([%#sknapsack33] if i = 0 then
    0
  else
    if UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))) > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      + UIntSize.to_int (T_knapsack__Item.t_Item__value (Seq.get items (i - 1))))
    
  )
  
  axiom m'0_spec : forall items : Seq.seq (Item'0.t_Item name), i : int, w : int . ([%#sknapsack29] 0 <= i
  /\ i <= Seq.length items)  -> ([%#sknapsack30] 0 <= w)  -> ([%#sknapsack31] m'0 items i w >= 0)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#sops28] Seq.get (view'1 self) ix
  
  let rec from_elem'1 (elem:Vec'0.t_Vec usize (Global'0.t_Global)) (n:usize) (return'  (ret:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= {[@expl:precondition] inv'3 elem}
    any
    [ return' (result:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {inv'4 result}
      {[%#svec24] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#svec23] Seq.length (view'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'1 self}
    any
    [ return' (result:usize)-> {[%#svec25] UIntSize.to_int result = Seq.length (view'0 self)} (! return' {result}) ]
    
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#sops28] Seq.get (view'2 self) ix
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] inv'2 elem}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {inv'3 result}
      {[%#svec24] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'2 result i = elem}
      {[%#svec23] Seq.length (view'2 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec knapsack01_dyn (items:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (max_weight:usize) (return'  (ret:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))= {[%#sknapsack21] inv'1 items}
    {[%#sknapsack20] forall i : int . 0 <= i /\ i < Seq.length (view'0 items)
     -> UIntSize.to_int (T_knapsack__Item.t_Item__value (index_logic'1 items i)) <= 10000000}
    {[%#sknapsack19] UIntSize.to_int max_weight < 10000000}
    {[%#sknapsack18] Seq.length (view'0 items) < 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {max_weight} {[%#sknapsack0] (1 : usize)} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack1] (0 : usize)} {_8}
          (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.add {_11} {[%#sknapsack2] (1 : usize)} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1)
      | s1 = from_elem'1 {_7} {_10}
          (fun (_ret':Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
             [ &best_value <- _ret' ] 
            s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &i <- [%#sknapsack3] (0 : usize) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb8
      [ bb8 = {[@expl:loop invariant] [%#sknapsack5] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        {[@expl:loop invariant] [%#sknapsack5] forall ii : int, ww : int . 0 <= ii
        /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
        {[@expl:loop invariant] [%#sknapsack5] forall i : int . 0 <= i /\ i < Seq.length (view'1 best_value)
         -> UIntSize.to_int max_weight + 1 = Seq.length (view'2 (index_logic'0 best_value i))}
        {[@expl:loop invariant] [%#sknapsack4] Seq.length (view'0 items) + 1 = Seq.length (view'1 best_value)}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1) | s1 = bb10 ] 
        | bb10 = s0
          [ s0 = UIntSize.lt {i} {_22} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1)
          | s1 = any [ br0 -> {_20 = false} (! bb34) | br1 -> {_20} (! bb11) ]  ]
          
        | bb11 = s0 [ s0 = index'0 {items} {i} (fun (_ret':Item'0.t_Item name) ->  [ &_25 <- _ret' ] s1) | s1 = bb12 ] 
        | bb12 = s0 [ s0 =  [ &it <- _25 ] s1 | s1 =  [ &w <- [%#sknapsack6] (0 : usize) ] s2 | s2 = bb13 ] 
        | bb13 = bb14
        | bb14 = bb15
        | bb15 = bb16
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb18
          [ bb18 = {[@expl:loop invariant] [%#sknapsack8] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            {[@expl:loop invariant] [%#sknapsack8] forall ww : int . 0 <= ww /\ ww <= UIntSize.to_int w - 1
             -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value (UIntSize.to_int i + 1))) ww)
            = m'0 (view'0 items) (UIntSize.to_int i + 1) ww}
            {[@expl:loop invariant] [%#sknapsack8] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
            {[@expl:loop invariant] [%#sknapsack8] forall i : int . 0 <= i /\ i < Seq.length (view'1 best_value)
             -> UIntSize.to_int max_weight + 1 = Seq.length (view'2 (index_logic'0 best_value i))}
            {[@expl:loop invariant] [%#sknapsack7] Seq.length (view'0 items) + 1 = Seq.length (view'1 best_value)}
            (! s0) [ s0 = bb19 ] 
            [ bb19 = s0
              [ s0 = UIntSize.le {w} {max_weight} (fun (_ret':bool) ->  [ &_35 <- _ret' ] s1)
              | s1 = any [ br0 -> {_35 = false} (! bb33) | br1 -> {_35} (! bb20) ]  ]
              
            | bb20 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.gt {rweight'0} {w} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s1))
              | s1 = any [ br0 -> {_39 = false} (! bb24) | br1 -> {_39} (! bb21) ]  ]
              
            | bb21 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_44 <- _ret' ] s1)
              | s1 = bb22 ]
              
            | bb22 = s0 [ s0 = index'2 {_44} {w} (fun (_ret':usize) ->  [ &_42 <- _ret' ] s1) | s1 = bb23 ] 
            | bb23 = s0 [ s0 =  [ &_38 <- _42 ] s1 | s1 = bb30 ] 
            | bb24 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_51 <- _ret' ] s1)
              | s1 = bb25 ]
              
            | bb25 = s0 [ s0 = index'2 {_51} {w} (fun (_ret':usize) ->  [ &_49 <- _ret' ] s1) | s1 = bb26 ] 
            | bb26 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_59 <- _ret' ] s1)
              | s1 = bb27 ]
              
            | bb27 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.sub {w} {rweight'0} (fun (_ret':usize) ->  [ &_62 <- _ret' ] s1))
              | s1 = index'2 {_59} {_62} (fun (_ret':usize) ->  [ &_57 <- _ret' ] s2)
              | s2 = bb28 ]
              
            | bb28 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.add {_57} {rvalue'0} (fun (_ret':usize) ->  [ &_55 <- _ret' ] s1))
              | s1 = max'0 {_49} {_55} (fun (_ret':usize) ->  [ &_38 <- _ret' ] s2)
              | s2 = bb29 ]
              
            | bb29 = bb30
            | bb30 = s0
              [ s0 = Borrow.borrow_mut
                  <Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)>
                  {best_value}
                  (fun (_ret':borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) ->
                     [ &_69 <- _ret' ] 
                     [ &best_value <- _ret'.final ] 
                    s1)
              | s1 = UIntSize.add {i} {[%#sknapsack9] (1 : usize)} (fun (_ret':usize) ->  [ &_70 <- _ret' ] s2)
              | s2 = index_mut'0 {_69} {_70}
                  (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->  [ &_68 <- _ret' ] s3)
              | s3 = bb31 ]
              
            | bb31 = s0
              [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {_68.current} {Borrow.get_id _68}
                  (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
                     [ &_67 <- _ret' ] 
                     [ &_68 <- { _68 with current = _ret'.final ; } ] 
                    s1)
              | s1 = index_mut'1 {_67} {w} (fun (_ret':borrowed usize) ->  [ &_66 <- _ret' ] s2)
              | s2 = bb32 ]
              
            | bb32 = s0
              [ s0 =  [ &_66 <- { _66 with current = _38 ; } ] s1
              | s1 = -{resolve'0 _66}- s2
              | s2 = -{resolve'1 _68}- s3
              | s3 = UIntSize.add {w} {[%#sknapsack10] (1 : usize)} (fun (_ret':usize) ->  [ &w <- _ret' ] s4)
              | s4 = bb18 ]
               ]
             ]
          
        | bb33 = s0
          [ s0 = UIntSize.add {i} {[%#sknapsack11] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1) | s1 = bb8 ]
           ]
         ]
      
    | bb34 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_80 <- _ret' ] s1) | s1 = bb35 ] 
    | bb35 = s0
      [ s0 = with_capacity'0 {_80}
          (fun (_ret':Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) ->  [ &result <- _ret' ] s1)
      | s1 = bb36 ]
      
    | bb36 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':usize) ->  [ &j <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = bb38
    | bb38 = bb39
    | bb39 = bb39
      [ bb39 = {[@expl:loop invariant] [%#sknapsack14] UIntSize.to_int left_weight <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack13] UIntSize.to_int j <= Seq.length (view'0 items)}
        {[@expl:loop invariant] [%#sknapsack12] inv'0 result}
        (! s0) [ s0 = bb40 ] 
        [ bb40 = s0
          [ s0 = UIntSize.lt {[%#sknapsack15] (0 : usize)} {j} (fun (_ret':bool) ->  [ &_89 <- _ret' ] s1)
          | s1 = any [ br0 -> {_89 = false} (! bb51) | br1 -> {_89} (! bb41) ]  ]
          
        | bb41 = s0
          [ s0 = UIntSize.sub {j} {[%#sknapsack16] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':Item'0.t_Item name) ->  [ &_92 <- _ret' ] s2)
          | s2 = bb42 ]
          
        | bb42 = s0
          [ s0 =  [ &it1 <- _92 ] s1
          | s1 = UIntSize.add {j} {[%#sknapsack17] (1 : usize)} (fun (_ret':usize) ->  [ &_101 <- _ret' ] s2)
          | s2 = index'1 {best_value} {_101}
              (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_99 <- _ret' ] s3)
          | s3 = bb43 ]
          
        | bb43 = s0 [ s0 = index'2 {_99} {left_weight} (fun (_ret':usize) ->  [ &_97 <- _ret' ] s1) | s1 = bb44 ] 
        | bb44 = s0
          [ s0 = index'1 {best_value} {j} (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_107 <- _ret' ] s1)
          | s1 = bb45 ]
          
        | bb45 = s0 [ s0 = index'2 {_107} {left_weight} (fun (_ret':usize) ->  [ &_105 <- _ret' ] s1) | s1 = bb46 ] 
        | bb46 = s0
          [ s0 = UIntSize.ne {_97} {_105} (fun (_ret':bool) ->  [ &_95 <- _ret' ] s1)
          | s1 = any [ br0 -> {_95 = false} (! bb49) | br1 -> {_95} (! bb47) ]  ]
          
        | bb47 = s0
          [ s0 = {inv'0 result}
            Borrow.borrow_mut <Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)> {result}
              (fun (_ret':borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) ->
                 [ &_112 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &result <- _ret'.final ] 
                s1)
          | s1 = push'0 {_112} {it1} (fun (_ret':()) ->  [ &_111 <- _ret' ] s2)
          | s2 = bb48 ]
          
        | bb48 = s0
          [ s0 = Item'0.t_Item <name> {it1}
              (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                UIntSize.sub {left_weight} {rweight'0} (fun (_ret':usize) ->  [ &left_weight <- _ret' ] s1))
          | s1 = bb50 ]
          
        | bb49 = bb50
        | bb50 = bb39 ]
         ]
      
    | bb51 = s0 [ s0 =  [ &_0 <- result ] s1 | s1 = bb52 ] 
    | bb52 = bb53
    | bb53 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = any_l ()
    | & items : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = items
    | & max_weight : usize = max_weight
    | & best_value : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) = any_l ()
    | & _7 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _8 : usize = any_l ()
    | & _10 : usize = any_l ()
    | & _11 : usize = any_l ()
    | & i : usize = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : usize = any_l ()
    | & it : Item'0.t_Item name = any_l ()
    | & _25 : Item'0.t_Item name = any_l ()
    | & w : usize = any_l ()
    | & _35 : bool = any_l ()
    | & _38 : usize = any_l ()
    | & _39 : bool = any_l ()
    | & _42 : usize = any_l ()
    | & _44 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _49 : usize = any_l ()
    | & _51 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _55 : usize = any_l ()
    | & _57 : usize = any_l ()
    | & _59 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _62 : usize = any_l ()
    | & _66 : borrowed usize = any_l ()
    | & _67 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _68 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _69 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) = any_l ()
    | & _70 : usize = any_l ()
    | & result : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = any_l ()
    | & _80 : usize = any_l ()
    | & left_weight : usize = any_l ()
    | & j : usize = any_l ()
    | & _89 : bool = any_l ()
    | & it1 : Item'0.t_Item name = any_l ()
    | & _92 : Item'0.t_Item name = any_l ()
    | & _95 : bool = any_l ()
    | & _97 : usize = any_l ()
    | & _99 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _101 : usize = any_l ()
    | & _105 : usize = any_l ()
    | & _107 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _111 : () = any_l ()
    | & _112 : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))-> {[@expl:postcondition] [%#sknapsack22] inv'0 result}
      (! return' {result}) ]
    
end
