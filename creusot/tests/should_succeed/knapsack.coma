
module M_knapsack__max
  let%span sknapsack0 = "../knapsack.rs" 13 11 13 15
  
  let%span sknapsack1 = "../knapsack.rs" 14 10 14 31
  
  use int.MinMax
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  let rec max (a:usize) (b:usize) (return'  (ret:usize))= {[%#sknapsack0] true}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.lt {a} {b} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s1)
      | s1 = any [ br0 -> {_5 = false} (! bb2) | br1 -> {_5} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : usize = any_l () | & a : usize = a | & b : usize = b | & _5 : bool = any_l () ] 
    [ return' (result:usize)-> {[@expl:postcondition] [%#sknapsack1] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
end
module T_knapsack__Item
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Item 'name =
    | C_Item 'name usize usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Item < 'name > (input:t_Item 'name) (ret  (name:'name) (weight:usize) (value:usize))= any
    [ good (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value = input}
      (! ret {name} {weight} {value})
    | bad (name:'name) (weight:usize) (value:usize)-> {C_Item name weight value <> input} {false} any ]
    
  
  function t_Item__weight (self : t_Item 'name) : usize =
    match self with
      | C_Item _ a _ -> a
      end
  
  function t_Item__value (self : t_Item 'name) : usize =
    match self with
      | C_Item _ _ a -> a
      end
end
module M_knapsack__m__Impl
  type name
  
  let%span sknapsack0 = "../knapsack.rs" 31 11 31 37
  
  let%span sknapsack1 = "../knapsack.rs" 32 11 32 17
  
  let%span sknapsack2 = "../knapsack.rs" 33 10 33 21
  
  let%span sknapsack3 = "../knapsack.rs" 30 10 30 11
  
  use int.MinMax
  
  use T_knapsack__Item as T_knapsack__Item
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use seq.Seq
  
  use T_knapsack__Item as Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  constant items  : Seq.seq (Item'0.t_Item name)
  
  constant i  : int
  
  constant w  : int
  
  function m [#"../knapsack.rs" 34 0 34 57] (items : Seq.seq (Item'0.t_Item name)) (i : int) (w : int) : int
  
  goal vc_m : ([%#sknapsack1] 0 <= w)
   -> ([%#sknapsack0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    [%#sknapsack2] 0 >= 0
  else
    if UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))) > w then
      ((([%#sknapsack1] 0 <= w) && ([%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m items (i - 1) w >= 0)  -> ([%#sknapsack2] m items (i - 1) w >= 0))
    else
      ((([%#sknapsack1] 0 <= w) && ([%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m items (i - 1) w >= 0)
       -> ((([%#sknapsack1] 0 <= w - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      && ([%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m items (i - 1) (w
      - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      >= 0)
       -> ([%#sknapsack2] MinMax.max (m items (i - 1) w) (m items (i - 1) (w
      - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      + UIntSize.to_int (T_knapsack__Item.t_Item__value (Seq.get items (i - 1))))
      >= 0)))
    
  )
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_alloc__boxed__Box
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_Box 't 'a =
    | C_Box (Unique'0.t_Unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module M_knapsack__knapsack01_dyn
  type name
  
  let%span sknapsack0 = "../knapsack.rs" 49 51 49 52
  
  let%span sknapsack1 = "../knapsack.rs" 49 35 49 36
  
  let%span sknapsack2 = "../knapsack.rs" 49 69 49 70
  
  let%span sknapsack3 = "../knapsack.rs" 50 16 50 17
  
  let%span sknapsack4 = "../knapsack.rs" 52 16 52 53
  
  let%span sknapsack5 = "../knapsack.rs" 52 4 52 55
  
  let%span sknapsack6 = "../knapsack.rs" 64 20 64 21
  
  let%span sknapsack7 = "../knapsack.rs" 66 20 66 57
  
  let%span sknapsack8 = "../knapsack.rs" 66 8 66 59
  
  let%span sknapsack9 = "../knapsack.rs" 77 27 77 28
  
  let%span sknapsack10 = "../knapsack.rs" 82 17 82 18
  
  let%span sknapsack11 = "../knapsack.rs" 84 13 84 14
  
  let%span sknapsack12 = "../knapsack.rs" 91 16 91 34
  
  let%span sknapsack13 = "../knapsack.rs" 92 16 92 43
  
  let%span sknapsack14 = "../knapsack.rs" 93 10 93 11
  
  let%span sknapsack15 = "../knapsack.rs" 94 13 94 14
  
  let%span sknapsack16 = "../knapsack.rs" 96 26 96 27
  
  let%span sknapsack17 = "../knapsack.rs" 45 11 45 34
  
  let%span sknapsack18 = "../knapsack.rs" 46 11 46 33
  
  let%span sknapsack19 = "../knapsack.rs" 47 0 47 86
  
  let%span sknapsack20 = "../knapsack.rs" 48 28 48 33
  
  let%span sknapsack21 = "../knapsack.rs" 48 75 48 91
  
  let%span span22 = "../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span23 = "../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span24 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span25 = "" 0 0 0 0
  
  let%span span26 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span27 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span28 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span29 = "../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span31 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span32 = "" 0 0 0 0
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "../../../../creusot-contracts/src/std/vec.rs" 82 26 82 51
  
  let%span span35 = "../../../../creusot-contracts/src/std/vec.rs" 73 26 73 44
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span38 = "../../../../creusot-contracts/src/std/slice.rs" 138 8 138 96
  
  let%span span39 = "../../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  
  let%span span40 = "../../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  
  let%span span41 = "../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "" 0 0 0 0
  
  let%span span44 = "../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span45 = "../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span46 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span47 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../knapsack.rs" 13 11 13 15
  
  let%span span50 = "../knapsack.rs" 14 10 14 31
  
  let%span span51 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span52 = "../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span53 = "" 0 0 0 0
  
  let%span span54 = "" 0 0 0 0
  
  let%span span55 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span56 = "" 0 0 0 0
  
  let%span span57 = "../knapsack.rs" 31 11 31 37
  
  let%span span58 = "../knapsack.rs" 32 11 32 17
  
  let%span span59 = "../knapsack.rs" 33 10 33 21
  
  let%span span60 = "../knapsack.rs" 30 10 30 11
  
  let%span span61 = "../knapsack.rs" 35 4 42 5
  
  let%span span62 = "" 0 0 0 0
  
  let%span span63 = "../../../../creusot-contracts/src/std/vec.rs" 174 22 174 41
  
  let%span span64 = "../../../../creusot-contracts/src/std/vec.rs" 175 12 175 78
  
  let%span span65 = "" 0 0 0 0
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "../../../../creusot-contracts/src/std/vec.rs" 78 26 78 48
  
  use T_knapsack__Item as Item'0
  
  predicate inv'17 (_1 : Item'0.t_Item name)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'22 (self : Item'0.t_Item name) =
    [%#span22] inv'17 self
  
  predicate inv'22 (_1 : Item'0.t_Item name)
  
  axiom inv'22 : forall x : Item'0.t_Item name . inv'22 x = true
  
  use prelude.prelude.UIntSize
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'3 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  predicate invariant'21 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span22] inv'3 self
  
  predicate inv'21 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'21 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'21 x = true
  
  predicate inv'2 (_1 : usize)
  
  predicate invariant'20 (self : usize) =
    [%#span22] inv'2 self
  
  predicate inv'20 (_1 : usize)
  
  axiom inv'20 : forall x : usize . inv'20 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'19 (self : Seq.seq (Item'0.t_Item name)) =
    [%#span23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'22 (Seq.get self i)
  
  predicate inv'19 (_1 : Seq.seq (Item'0.t_Item name))
  
  axiom inv'19 : forall x : Seq.seq (Item'0.t_Item name) . inv'19 x = true
  
  predicate inv'5 (_1 : Item'0.t_Item name)
  
  predicate invariant'18 (self : Item'0.t_Item name) =
    [%#span22] inv'5 self
  
  predicate inv'18 (_1 : Item'0.t_Item name)
  
  axiom inv'18 : forall x : Item'0.t_Item name . inv'18 x = true
  
  predicate invariant'17 (self : Item'0.t_Item name) =
    [%#span24] true
  
  axiom inv'17 : forall x : Item'0.t_Item name . inv'17 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'16 (self : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'21 (Seq.get self i)
  
  predicate inv'16 (_1 : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'16 : forall x : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'16 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'15 (self : Seq.seq usize) =
    [%#span23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'20 (Seq.get self i)
  
  predicate inv'15 (_1 : Seq.seq usize)
  
  axiom inv'15 : forall x : Seq.seq usize . inv'15 x = true
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span25] (18446744073709551615 : usize)
  
  function shallow_model'3 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . [%#span26] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'14 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#span27] inv'19 (shallow_model'3 self)
  
  predicate inv'14 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  axiom inv'14 : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . inv'14 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'13 (self : Seq.seq (Item'0.t_Item name)) =
    [%#span23] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'18 (Seq.get self i)
  
  predicate inv'13 (_1 : Seq.seq (Item'0.t_Item name))
  
  axiom inv'13 : forall x : Seq.seq (Item'0.t_Item name) . inv'13 x = true
  
  predicate inv'0 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) =
    [%#span28] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'12 (_1 : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))
  
  axiom inv'12 : forall x : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) . inv'12 x = true
  
  predicate invariant'11 (self : borrowed usize) =
    [%#span28] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'11 (_1 : borrowed usize)
  
  axiom inv'11 : forall x : borrowed usize . inv'11 x = true
  
  predicate invariant'10 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span28] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'10 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'10 : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) . inv'10 x = true
  
  predicate inv'4 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  predicate invariant'9 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) =
    [%#span28] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'9 (_1 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))
  
  axiom inv'9 : forall x : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) . inv'9 x
  = true
  
  predicate invariant'8 (self : usize) =
    [%#span29] inv'2 self
  
  predicate inv'8 (_1 : usize)
  
  axiom inv'8 : forall x : usize . inv'8 x = true
  
  predicate invariant'7 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span29] inv'3 self
  
  predicate inv'7 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'7 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'7 x = true
  
  predicate invariant'6 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span29] inv'4 self
  
  predicate inv'6 (_1 : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))
  
  axiom inv'6 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'6 x = true
  
  predicate invariant'5 (self : Item'0.t_Item name) =
    [%#span29] inv'17 self
  
  axiom inv'5 : forall x : Item'0.t_Item name . inv'5 x = true
  
  function shallow_model'1 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . [%#span26] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'4 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) =
    [%#span27] inv'16 (shallow_model'1 self)
  
  axiom inv'4 : forall x : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) . inv'4 x = true
  
  function shallow_model'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span26] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span27] inv'15 (shallow_model'2 self)
  
  axiom inv'3 : forall x : Vec'0.t_Vec usize (Global'0.t_Global) . inv'3 x = true
  
  predicate invariant'2 (self : usize) =
    [%#span24] true
  
  axiom inv'2 : forall x : usize . inv'2 x = true
  
  predicate invariant'1 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#span29] inv'14 self
  
  predicate inv'1 (_1 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))
  
  axiom inv'1 : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . inv'1 x = true
  
  function shallow_model'8 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
  
  axiom shallow_model'8_spec : forall self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . [%#span26] Seq.length (shallow_model'8 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) =
    [%#span27] inv'13 (shallow_model'8 self)
  
  axiom inv'0 : forall x : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) . inv'0 x = true
  
  use T_knapsack__Item as T_knapsack__Item
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (ix : int) : Item'0.t_Item name
    
   =
    [%#span30] Seq.get (shallow_model'3 self) ix
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  function shallow_model'9 (self : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) : Seq.seq (Item'0.t_Item name)
    
   =
    [%#span31] shallow_model'8 self.current
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) (value:Item'0.t_Item name) (return'  (ret:()))= {[@expl:precondition] [%#span33] inv'5 value}
    {[@expl:precondition] [%#span32] inv'12 self}
    any
    [ return' (result:())-> {[%#span34] shallow_model'8 self.final = Seq.snoc (shallow_model'9 self) value}
      (! return' {result}) ]
    
  
  let rec with_capacity'0 (capacity:usize) (return'  (ret:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))-> {[%#span36] inv'0 result}
      {[%#span35] Seq.length (shallow_model'8 result) = 0}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span37] self.final = self.current
  
  predicate resolve'0 (self : borrowed usize) =
    [%#span37] self.final = self.current
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#span38] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#span39] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#span40] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'7 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#span31] shallow_model'2 self.current
  
  let rec index_mut'1 (self:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] [%#span43] inv'2 index}
    {[@expl:precondition] [%#span42] inv'10 self}
    {[@expl:precondition] [%#span41] in_bounds'2 index (shallow_model'7 self)}
    any
    [ return' (result:borrowed usize)-> {[%#span48] inv'11 result}
      {[%#span47] Seq.length (shallow_model'2 self.final) = Seq.length (shallow_model'7 self)}
      {[%#span46] resolve_elswhere'1 index (shallow_model'7 self) (shallow_model'2 self.final)}
      {[%#span45] has_value'2 index (shallow_model'2 self.final) result.final}
      {[%#span44] has_value'2 index (shallow_model'7 self) result.current}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (fin : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global)))
    
   =
    [%#span38] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) (out : Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span39] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span40] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'6 (self : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span31] shallow_model'1 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))))= {[@expl:precondition] [%#span43] inv'2 index}
    {[@expl:precondition] [%#span42] inv'9 self}
    {[@expl:precondition] [%#span41] in_bounds'1 index (shallow_model'6 self)}
    any
    [ return' (result:borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))-> {[%#span48] inv'10 result}
      {[%#span47] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'6 self)}
      {[%#span46] resolve_elswhere'0 index (shallow_model'6 self) (shallow_model'1 self.final)}
      {[%#span45] has_value'1 index (shallow_model'1 self.final) result.final}
      {[%#span44] has_value'1 index (shallow_model'6 self) result.current}
      (! return' {result}) ]
    
  
  use int.MinMax
  
  let rec max'0 (a:usize) (b:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span49] true}
    any
    [ return' (result:usize)-> {[%#span50] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'5 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize =
    [%#span51] shallow_model'2 self
  
  let rec index'2 (self:Vec'0.t_Vec usize (Global'0.t_Global)) (index:usize) (return'  (ret:usize))= {[@expl:precondition] [%#span54] inv'2 index}
    {[@expl:precondition] [%#span53] inv'7 self}
    {[@expl:precondition] [%#span52] in_bounds'2 index (shallow_model'5 self)}
    any
    [ return' (result:usize)-> {[%#span56] inv'8 result}
      {[%#span55] has_value'2 index (shallow_model'5 self) result}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) : Seq.seq (Vec'0.t_Vec usize (Global'0.t_Global))
    
   =
    [%#span51] shallow_model'1 self
  
  let rec index'1 (self:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (index:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] [%#span54] inv'2 index}
    {[@expl:precondition] [%#span53] inv'6 self}
    {[@expl:precondition] [%#span52] in_bounds'1 index (shallow_model'4 self)}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[%#span56] inv'7 result}
      {[%#span55] has_value'1 index (shallow_model'4 self) result}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_Item name)) (out : Item'0.t_Item name)
   =
    [%#span39] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (Item'0.t_Item name)) =
    [%#span40] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'0 (self : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) : Seq.seq (Item'0.t_Item name)
   =
    [%#span51] shallow_model'3 self
  
  let rec index'0 (self:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (index:usize) (return'  (ret:Item'0.t_Item name))= {[@expl:precondition] [%#span54] inv'2 index}
    {[@expl:precondition] [%#span53] inv'1 self}
    {[@expl:precondition] [%#span52] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:Item'0.t_Item name)-> {[%#span56] inv'5 result}
      {[%#span55] has_value'0 index (shallow_model'0 self) result}
      (! return' {result}) ]
    
  
  function m'0 [#"../knapsack.rs" 34 0 34 57] (items : Seq.seq (Item'0.t_Item name)) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq (Item'0.t_Item name), i : int, w : int . m'0 items i w
  = ([%#span61] if i = 0 then
    0
  else
    if UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))) > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UIntSize.to_int (T_knapsack__Item.t_Item__weight (Seq.get items (i - 1))))
      + UIntSize.to_int (T_knapsack__Item.t_Item__value (Seq.get items (i - 1))))
    
  )
  
  axiom m'0_spec : forall items : Seq.seq (Item'0.t_Item name), i : int, w : int . ([%#span57] 0 <= i
  /\ i <= Seq.length items)  -> ([%#span58] 0 <= w)  -> ([%#span59] m'0 items i w >= 0)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) (ix : int) : Vec'0.t_Vec usize (Global'0.t_Global)
    
   =
    [%#span30] Seq.get (shallow_model'1 self) ix
  
  let rec from_elem'1 (elem:Vec'0.t_Vec usize (Global'0.t_Global)) (n:usize) (return'  (ret:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)))= {[@expl:precondition] [%#span62] inv'3 elem}
    any
    [ return' (result:Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))-> {[%#span65] inv'4 result}
      {[%#span64] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span63] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span66] inv'1 self}
    any
    [ return' (result:usize)-> {[%#span67] UIntSize.to_int result = Seq.length (shallow_model'0 self)}
      (! return' {result}) ]
    
  
  function index_logic'2 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#span30] Seq.get (shallow_model'2 self) ix
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:Vec'0.t_Vec usize (Global'0.t_Global)))= {[@expl:precondition] [%#span62] inv'2 elem}
    any
    [ return' (result:Vec'0.t_Vec usize (Global'0.t_Global))-> {[%#span65] inv'3 result}
      {[%#span64] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'2 result i = elem}
      {[%#span63] Seq.length (shallow_model'2 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec knapsack01_dyn (items:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) (max_weight:usize) (return'  (ret:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)))= {[%#sknapsack20] inv'1 items}
    {[%#sknapsack19] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 items)
     -> UIntSize.to_int (T_knapsack__Item.t_Item__value (index_logic'1 items i)) <= 10000000}
    {[%#sknapsack18] UIntSize.to_int max_weight < 10000000}
    {[%#sknapsack17] Seq.length (shallow_model'0 items) < 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {max_weight} {[%#sknapsack0] (1 : usize)} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack1] (0 : usize)} {_8}
          (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.add {_11} {[%#sknapsack2] (1 : usize)} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1)
      | s1 = from_elem'1 {_7} {_10}
          (fun (_ret':Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) ->
             [ &best_value <- _ret' ] 
            s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &i <- [%#sknapsack3] (0 : usize) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = bb8
      [ bb8 = {[@expl:loop invariant] [%#sknapsack5] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (shallow_model'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        {[@expl:loop invariant] [%#sknapsack5] forall ii : int, ww : int . 0 <= ii
        /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww)
        = m'0 (shallow_model'0 items) ii ww}
        {[@expl:loop invariant] [%#sknapsack5] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 best_value)
         -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model'2 (index_logic'0 best_value i))}
        {[@expl:loop invariant] [%#sknapsack4] Seq.length (shallow_model'0 items) + 1
        = Seq.length (shallow_model'1 best_value)}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_22 <- _ret' ] s1) | s1 = bb10 ] 
        | bb10 = s0
          [ s0 = UIntSize.lt {i} {_22} (fun (_ret':bool) ->  [ &_20 <- _ret' ] s1)
          | s1 = any [ br0 -> {_20 = false} (! bb34) | br1 -> {_20} (! bb11) ]  ]
          
        | bb11 = s0 [ s0 = index'0 {items} {i} (fun (_ret':Item'0.t_Item name) ->  [ &_25 <- _ret' ] s1) | s1 = bb12 ] 
        | bb12 = s0 [ s0 =  [ &it <- _25 ] s1 | s1 =  [ &w <- [%#sknapsack6] (0 : usize) ] s2 | s2 = bb13 ] 
        | bb13 = bb14
        | bb14 = bb15
        | bb15 = bb16
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb18
          [ bb18 = {[@expl:loop invariant] [%#sknapsack8] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (shallow_model'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            {[@expl:loop invariant] [%#sknapsack8] forall ww : int . 0 <= ww /\ ww <= UIntSize.to_int w - 1
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value (UIntSize.to_int i + 1))) ww)
            = m'0 (shallow_model'0 items) (UIntSize.to_int i + 1) ww}
            {[@expl:loop invariant] [%#sknapsack8] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (shallow_model'2 (index_logic'0 best_value ii)) ww)
            = m'0 (shallow_model'0 items) ii ww}
            {[@expl:loop invariant] [%#sknapsack8] forall i : int . 0 <= i
            /\ i < Seq.length (shallow_model'1 best_value)
             -> UIntSize.to_int max_weight + 1 = Seq.length (shallow_model'2 (index_logic'0 best_value i))}
            {[@expl:loop invariant] [%#sknapsack7] Seq.length (shallow_model'0 items) + 1
            = Seq.length (shallow_model'1 best_value)}
            (! s0) [ s0 = bb19 ] 
            [ bb19 = s0
              [ s0 = UIntSize.le {w} {max_weight} (fun (_ret':bool) ->  [ &_35 <- _ret' ] s1)
              | s1 = any [ br0 -> {_35 = false} (! bb33) | br1 -> {_35} (! bb20) ]  ]
              
            | bb20 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.gt {rweight'0} {w} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s1))
              | s1 = any [ br0 -> {_39 = false} (! bb24) | br1 -> {_39} (! bb21) ]  ]
              
            | bb21 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_44 <- _ret' ] s1)
              | s1 = bb22 ]
              
            | bb22 = s0 [ s0 = index'2 {_44} {w} (fun (_ret':usize) ->  [ &_42 <- _ret' ] s1) | s1 = bb23 ] 
            | bb23 = s0 [ s0 =  [ &_38 <- _42 ] s1 | s1 = bb30 ] 
            | bb24 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_51 <- _ret' ] s1)
              | s1 = bb25 ]
              
            | bb25 = s0 [ s0 = index'2 {_51} {w} (fun (_ret':usize) ->  [ &_49 <- _ret' ] s1) | s1 = bb26 ] 
            | bb26 = s0
              [ s0 = index'1 {best_value} {i}
                  (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_59 <- _ret' ] s1)
              | s1 = bb27 ]
              
            | bb27 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.sub {w} {rweight'0} (fun (_ret':usize) ->  [ &_62 <- _ret' ] s1))
              | s1 = index'2 {_59} {_62} (fun (_ret':usize) ->  [ &_57 <- _ret' ] s2)
              | s2 = bb28 ]
              
            | bb28 = s0
              [ s0 = Item'0.t_Item <name> {it}
                  (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                    UIntSize.add {_57} {rvalue'0} (fun (_ret':usize) ->  [ &_55 <- _ret' ] s1))
              | s1 = max'0 {_49} {_55} (fun (_ret':usize) ->  [ &_38 <- _ret' ] s2)
              | s2 = bb29 ]
              
            | bb29 = bb30
            | bb30 = s0
              [ s0 = Borrow.borrow_mut
                  <Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)>
                  {best_value}
                  (fun (_ret':borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global))) ->
                     [ &_69 <- _ret' ] 
                     [ &best_value <- _69.final ] 
                    s1)
              | s1 = UIntSize.add {i} {[%#sknapsack9] (1 : usize)} (fun (_ret':usize) ->  [ &_70 <- _ret' ] s2)
              | s2 = index_mut'0 {_69} {_70}
                  (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->  [ &_68 <- _ret' ] s3)
              | s3 = bb31 ]
              
            | bb31 = s0
              [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {_68.current} {Borrow.get_id _68}
                  (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
                     [ &_67 <- _ret' ] 
                     [ &_68 <- { _68 with current = _67.final ; } ] 
                    s1)
              | s1 = index_mut'1 {_67} {w} (fun (_ret':borrowed usize) ->  [ &_66 <- _ret' ] s2)
              | s2 = bb32 ]
              
            | bb32 = s0
              [ s0 =  [ &_66 <- { _66 with current = _38 ; } ] s1
              | s1 = -{resolve'0 _66}- s2
              | s2 = -{resolve'1 _68}- s3
              | s3 = UIntSize.add {w} {[%#sknapsack10] (1 : usize)} (fun (_ret':usize) ->  [ &w <- _ret' ] s4)
              | s4 = bb18 ]
               ]
             ]
          
        | bb33 = s0
          [ s0 = UIntSize.add {i} {[%#sknapsack11] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1) | s1 = bb8 ]
           ]
         ]
      
    | bb34 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_80 <- _ret' ] s1) | s1 = bb35 ] 
    | bb35 = s0
      [ s0 = with_capacity'0 {_80}
          (fun (_ret':Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) ->  [ &result <- _ret' ] s1)
      | s1 = bb36 ]
      
    | bb36 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':usize) ->  [ &j <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = bb38
    | bb38 = bb38
      [ bb38 = {[@expl:loop invariant] [%#sknapsack13] UIntSize.to_int left_weight <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack12] UIntSize.to_int j <= Seq.length (shallow_model'0 items)}
        (! s0) [ s0 = bb39 ] 
        [ bb39 = s0
          [ s0 = UIntSize.lt {[%#sknapsack14] (0 : usize)} {j} (fun (_ret':bool) ->  [ &_88 <- _ret' ] s1)
          | s1 = any [ br0 -> {_88 = false} (! bb50) | br1 -> {_88} (! bb40) ]  ]
          
        | bb40 = s0
          [ s0 = UIntSize.sub {j} {[%#sknapsack15] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':Item'0.t_Item name) ->  [ &_91 <- _ret' ] s2)
          | s2 = bb41 ]
          
        | bb41 = s0
          [ s0 =  [ &it1 <- _91 ] s1
          | s1 = UIntSize.add {j} {[%#sknapsack16] (1 : usize)} (fun (_ret':usize) ->  [ &_100 <- _ret' ] s2)
          | s2 = index'1 {best_value} {_100}
              (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_98 <- _ret' ] s3)
          | s3 = bb42 ]
          
        | bb42 = s0 [ s0 = index'2 {_98} {left_weight} (fun (_ret':usize) ->  [ &_96 <- _ret' ] s1) | s1 = bb43 ] 
        | bb43 = s0
          [ s0 = index'1 {best_value} {j} (fun (_ret':Vec'0.t_Vec usize (Global'0.t_Global)) ->  [ &_106 <- _ret' ] s1)
          | s1 = bb44 ]
          
        | bb44 = s0 [ s0 = index'2 {_106} {left_weight} (fun (_ret':usize) ->  [ &_104 <- _ret' ] s1) | s1 = bb45 ] 
        | bb45 = s0
          [ s0 = UIntSize.ne {_96} {_104} (fun (_ret':bool) ->  [ &_94 <- _ret' ] s1)
          | s1 = any [ br0 -> {_94 = false} (! bb48) | br1 -> {_94} (! bb46) ]  ]
          
        | bb46 = s0
          [ s0 = Borrow.borrow_mut <Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)> {result}
              (fun (_ret':borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))) ->
                 [ &_111 <- _ret' ] 
                 [ &result <- _111.final ] 
                s1)
          | s1 = -{inv'0 _111.final}- s2
          | s2 = push'0 {_111} {it1} (fun (_ret':()) ->  [ &_110 <- _ret' ] s3)
          | s3 = bb47 ]
          
        | bb47 = s0
          [ s0 = Item'0.t_Item <name> {it1}
              (fun (rname'0:name) (rweight'0:usize) (rvalue'0:usize) ->
                UIntSize.sub {left_weight} {rweight'0} (fun (_ret':usize) ->  [ &left_weight <- _ret' ] s1))
          | s1 = bb49 ]
          
        | bb48 = bb49
        | bb49 = bb38 ]
         ]
      
    | bb50 = s0 [ s0 =  [ &_0 <- result ] s1 | s1 = bb51 ] 
    | bb51 = bb52
    | bb52 = return' {_0} ]
    )
    [ & _0 : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = any_l ()
    | & items : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = items
    | & max_weight : usize = max_weight
    | & best_value : Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global) = any_l ()
    | & _7 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _8 : usize = any_l ()
    | & _10 : usize = any_l ()
    | & _11 : usize = any_l ()
    | & i : usize = any_l ()
    | & _20 : bool = any_l ()
    | & _22 : usize = any_l ()
    | & it : Item'0.t_Item name = any_l ()
    | & _25 : Item'0.t_Item name = any_l ()
    | & w : usize = any_l ()
    | & _35 : bool = any_l ()
    | & _38 : usize = any_l ()
    | & _39 : bool = any_l ()
    | & _42 : usize = any_l ()
    | & _44 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _49 : usize = any_l ()
    | & _51 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _55 : usize = any_l ()
    | & _57 : usize = any_l ()
    | & _59 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _62 : usize = any_l ()
    | & _66 : borrowed usize = any_l ()
    | & _67 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _68 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _69 : borrowed (Vec'0.t_Vec (Vec'0.t_Vec usize (Global'0.t_Global)) (Global'0.t_Global)) = any_l ()
    | & _70 : usize = any_l ()
    | & result : Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global) = any_l ()
    | & _80 : usize = any_l ()
    | & left_weight : usize = any_l ()
    | & j : usize = any_l ()
    | & _88 : bool = any_l ()
    | & it1 : Item'0.t_Item name = any_l ()
    | & _91 : Item'0.t_Item name = any_l ()
    | & _94 : bool = any_l ()
    | & _96 : usize = any_l ()
    | & _98 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _100 : usize = any_l ()
    | & _104 : usize = any_l ()
    | & _106 : Vec'0.t_Vec usize (Global'0.t_Global) = any_l ()
    | & _110 : () = any_l ()
    | & _111 : borrowed (Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global)) = any_l () ]
    
    [ return' (result:Vec'0.t_Vec (Item'0.t_Item name) (Global'0.t_Global))-> {[@expl:postcondition] [%#sknapsack21] inv'0 result}
      (! return' {result}) ]
    
end
