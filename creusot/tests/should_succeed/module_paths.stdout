module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type modulepaths_a_t  = 
    | ModulePaths_A_T uint32
    
  type modulepaths_s  = 
    | ModulePaths_S (modulepaths_a_t)
    
  type modulepaths_b_o  = 
    | ModulePaths_B_O uint32
    
  type modulepaths_b_c_t  = 
    | ModulePaths_B_C_T (modulepaths_a_t)
    
end
module ModulePaths_Test_Interface
  use Type
  val test [@cfg:stackify] (a : Type.modulepaths_a_t) (b : Type.modulepaths_s) (c : Type.modulepaths_b_o) (d : Type.modulepaths_b_c_t) : ()
    
end
module ModulePaths_Test
  use Type
  let rec cfg test [@cfg:stackify] (a : Type.modulepaths_a_t) (b : Type.modulepaths_s) (c : Type.modulepaths_b_o) (d : Type.modulepaths_b_c_t) : ()
    
   = 
  var _0 : ();
  var a_1 : Type.modulepaths_a_t;
  var b_2 : Type.modulepaths_s;
  var c_3 : Type.modulepaths_b_o;
  var d_4 : Type.modulepaths_b_c_t;
  {
    a_1 <- a;
    b_2 <- b;
    c_3 <- c;
    d_4 <- d;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun x -> true) a_1 };
    assume { (fun x -> true) b_2 };
    assume { (fun x -> true) c_3 };
    assume { (fun x -> true) d_4 };
    return _0
  }
  
end
module ModulePaths_Main_Interface
  val main [@cfg:stackify] () : ()
end
module ModulePaths_Main
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
