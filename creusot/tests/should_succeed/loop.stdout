module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Loop_Main_Interface
  val main () : ()
end
module Loop_Main
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec cfg main () : () = 
  var _0 : ();
  var a_1 : int32;
  var b_2 : borrowed int32;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : ();
  var _7 : bool;
  var _8 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    b_2 <- { b_2 with current = (5 : int32) };
    assume { (fun x -> true) b_2 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _5 <- true;
    switch (_5)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _3 <- ();
    assume { (fun x -> true) _3 };
    assume { (fun x -> true) _8 };
    _8 <- a_1;
    assume { (fun x -> true) a_1 };
    _7 <- _8 = (15 : int32);
    assume { (fun x -> true) _7 };
    _0 <- ();
    return _0
  }
  BB4 {
    _4 <- ();
    assume { (fun x -> true) _4 };
    goto BB1
  }
  
end
