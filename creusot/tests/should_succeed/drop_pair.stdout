module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module DropPair_Main_Interface
  val main () : ()
end
module DropPair_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Builtins_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl11_Resolve_Interface
  type t1   
  type t2   
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Builtins_Impl11_Resolve
  type t1   
  type t2   
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = t2
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Builtins_Impl12_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Impl12_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Impl12
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Impl12_Resolve with type t = t
  clone CreusotContracts_Builtins_Resolve with type self = borrowed t, predicate resolve = resolve
end
module DropPair_DropPair2_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val drop_pair2 (x : (borrowed uint32, borrowed uint32)) : ()
end
module DropPair_DropPair2
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Impl12 as Resolve1 with type t = uint32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t1 = borrowed uint32, type t2 = borrowed uint32,
  predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg drop_pair2 (x : (borrowed uint32, borrowed uint32)) : () = 
  var _0 : ();
  var x_1 : (borrowed uint32, borrowed uint32);
  var _2 : (borrowed uint32, borrowed uint32);
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- x_1;
    assume { Resolve0.resolve _2 };
    _0 <- ();
    return _0
  }
  
end
module DropPair_Drop_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val drop (x : borrowed uint32) (y : borrowed uint32) : ()
end
module DropPair_Drop
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve0 with type t = uint32
  let rec cfg drop (x : borrowed uint32) (y : borrowed uint32) : () = 
  var _0 : ();
  var x_1 : borrowed uint32;
  var y_2 : borrowed uint32;
  var _3 : borrowed uint32;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve x_1 };
    _3 <- borrow_mut ( * y_2);
    y_2 <- { y_2 with current = ( ^ _3) };
    assume { Resolve0.resolve y_2 };
    assume { Resolve0.resolve x_1 };
    x_1 <- _3;
    assume { Resolve0.resolve _3 };
    _0 <- ();
    return _0
  }
  
end
module DropPair_DropPair_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Impl11_Resolve_Interface as Resolve0 with type t1 = borrowed uint32,
  type t2 = borrowed uint32
  val drop_pair (x : (borrowed uint32, borrowed uint32)) : ()
    ensures {  ^ (let (a, _) = x in a) =  * (let (a, _) = x in a) }
    ensures { Resolve0.resolve x }
    
end
module DropPair_DropPair
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Builtins_Impl12 as Resolve1 with type t = uint32
  clone CreusotContracts_Builtins_Impl11_Resolve as Resolve0 with type t1 = borrowed uint32, type t2 = borrowed uint32,
  predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg drop_pair (x : (borrowed uint32, borrowed uint32)) : ()
    ensures {  ^ (let (a, _) = x in a) =  * (let (a, _) = x in a) }
    ensures { Resolve0.resolve x }
    
   = 
  var _0 : ();
  var x_1 : (borrowed uint32, borrowed uint32);
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
