module M_two_modules__mod2__x [#"two_modules.rs" 15 4 15 33]
  let%span stwo_modules0 = "two_modules.rs" 16 8 16 12
  
  use prelude.prelude.Intrinsic
  
  type t_T'0  =
    | C_A'0
    | C_B'0
    | C_C'0
  
  meta "compute_max_steps" 1000000
  
  let rec x'0 (_t:t_T'0) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#stwo_modules0] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module M_two_modules__f [#"two_modules.rs" 22 0 22 10]
  type t_T'0  =
    | C_A'0
    | C_B'0
    | C_C'0
  
  let rec x'0 (_t:t_T'0) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_2 <- C_B'0 ] s1 | s1 = x'0 {_2} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s2) | s2 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : bool = any_l () | & _2 : t_T'0 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
