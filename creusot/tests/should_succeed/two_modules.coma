
module TwoModules_Mod1_T_Type
  type t_t  =
    | C_A
    | C_B
    | C_C
    
  function any_l (_ : 'b) : 'a
  let rec a (input:t_t) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  let rec b (input:t_t) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ] 
  let rec c (input:t_t) (ret  )= any [ good -> {C_C  = input} (! ret) | bad -> {C_C  <> input} {false} any ] 
end
module TwoModules_Mod2_X
  use TwoModules_Mod1_T_Type as TwoModules_Mod1_T_Type
  use prelude.Intrinsic
  let rec x (_t:TwoModules_Mod1_T_Type.t_t) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [#"../two_modules.rs" 16 8 16 12] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () : bool ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module TwoModules_F
  use prelude.Intrinsic
  use TwoModules_Mod1_T_Type as TwoModules_Mod1_T_Type
  let rec x'0 (_t:TwoModules_Mod1_T_Type.t_t) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- TwoModules_Mod1_T_Type.C_B ] s1
      | s1 = x'0 {_2} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- [#"../two_modules.rs" 22 11 24 1] () ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & _1 : bool = any_l () : bool
    | & _2 : TwoModules_Mod1_T_Type.t_t = any_l () : TwoModules_Mod1_T_Type.t_t ]
     [ return' (result:())-> (! return' {result}) ] 
end
