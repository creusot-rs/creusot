
module T_two_modules__mod1__T
  type t_T  =
    | C_A
    | C_B
    | C_C
  
  function any_l (_ : 'b) : 'a
  
  let rec v_A (input:t_T) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  
  let rec v_B (input:t_T) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ] 
  
  let rec v_C (input:t_T) (ret  )= any [ good -> {C_C  = input} (! ret) | bad -> {C_C  <> input} {false} any ] 
end
module M_two_modules__mod2__x
  let%span stwo_modules0 = "../two_modules.rs" 16 8 16 12
  
  use T_two_modules__mod1__T as T'0
  
  use prelude.prelude.Intrinsic
  
  let rec x (_t:T'0.t_T) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#stwo_modules0] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = any_l () ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module M_two_modules__f
  use prelude.prelude.Intrinsic
  
  use T_two_modules__mod1__T as T'0
  
  let rec x'0 (_t:T'0.t_T) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_2 <- T'0.C_B ] s1 | s1 = x'0 {_2} (fun (_ret':bool) ->  [ &_1 <- _ret' ] s2) | s2 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : bool = any_l () | & _2 : T'0.t_T = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
