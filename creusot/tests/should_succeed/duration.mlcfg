
module Core_Time_Nanoseconds_Type
  use prelude.UInt32
  use prelude.Int
  type t_nanoseconds  =
    | C_Nanoseconds uint32
    
end
module Core_Time_Duration_Type
  use Core_Time_Nanoseconds_Type as Core_Time_Nanoseconds_Type
  use prelude.UInt64
  use prelude.Int
  type t_duration  =
    | C_Duration uint64 (Core_Time_Nanoseconds_Type.t_nanoseconds)
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Duration_TestDuration
  use Core_Time_Duration_Type as Core_Time_Duration_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration))
  val inv0 (_x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : forall x : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration) . inv0 x = true
  use prelude.Int
  use prelude.UInt64
  function secs_to_nanos0 (secs : int) : int
  val secs_to_nanos0 (secs : int) : int
    ensures { result = secs_to_nanos0 secs }
    
  use prelude.UInt64
  let constant max0  : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : uint64)
  function shallow_model0 (self : Core_Time_Duration_Type.t_duration) : int
  val shallow_model0 (self : Core_Time_Duration_Type.t_duration) : int
    ensures { result = shallow_model0 self }
    
  axiom shallow_model0_spec : forall self : Core_Time_Duration_Type.t_duration . [#"../../../../creusot-contracts/src/std/time.rs" 13 14 13 77] shallow_model0 self >= 0 /\ shallow_model0 self <= secs_to_nanos0 (UInt64.to_int max0) + 999999999
  val sub0 (self : Core_Time_Duration_Type.t_duration) (rhs : Core_Time_Duration_Type.t_duration) : Core_Time_Duration_Type.t_duration
    requires {[#"../../../../creusot-contracts/src/std/time.rs" 173 0 203 1] shallow_model0 self - shallow_model0 rhs >= 0}
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 173 0 203 1] shallow_model0 self - shallow_model0 rhs = shallow_model0 result }
    
  val add0 (self : Core_Time_Duration_Type.t_duration) (rhs : Core_Time_Duration_Type.t_duration) : Core_Time_Duration_Type.t_duration
    requires {[#"../../../../creusot-contracts/src/std/time.rs" 173 0 203 1] shallow_model0 self + shallow_model0 rhs <= secs_to_nanos0 (UInt64.to_int max0) + 999999999}
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 173 0 203 1] shallow_model0 self + shallow_model0 rhs = shallow_model0 result }
    
  use prelude.Int
  use prelude.UInt32
  function deep_model1 (self : Core_Time_Duration_Type.t_duration) : int
  val deep_model1 (self : Core_Time_Duration_Type.t_duration) : int
    ensures { result = deep_model1 self }
    
  axiom deep_model1_spec : forall self : Core_Time_Duration_Type.t_duration . ([#"../../../../creusot-contracts/src/std/time.rs" 26 14 26 44] deep_model1 self = shallow_model0 self) && ([#"../../../../creusot-contracts/src/std/time.rs" 25 14 25 77] deep_model1 self >= 0 /\ deep_model1 self <= secs_to_nanos0 (UInt64.to_int max0) + 999999999)
  function deep_model0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : Core_Option_Option_Type.t_option int
    
   =
    [#"../../../../creusot-contracts/src/std/option.rs" 10 8 13 9] match self with
      | Core_Option_Option_Type.C_Some t -> Core_Option_Option_Type.C_Some (deep_model1 t)
      | Core_Option_Option_Type.C_None -> Core_Option_Option_Type.C_None
      end
  val deep_model0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : Core_Option_Option_Type.t_option int
    ensures { result = deep_model0 self }
    
  use prelude.UInt32
  val checked_div0 (self : Core_Time_Duration_Type.t_duration) (rhs : uint32) : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 137 16 137 58] rhs = (0 : uint32)
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 138 16 138 85] rhs <> (0 : uint32)
     -> deep_model0 result = Core_Option_Option_Type.C_Some (div (shallow_model0 self) (UInt32.to_int rhs)) }
    
  function nanos_to_secs0 (nanos : int) : int
  val nanos_to_secs0 (nanos : int) : int
    ensures { result = nanos_to_secs0 nanos }
    
  val checked_mul0 (self : Core_Time_Duration_Type.t_duration) (rhs : uint32) : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 133 16 133 86] nanos_to_secs0 (shallow_model0 self * UInt32.to_int rhs) > UInt64.to_int max0
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 134 16 134 114] nanos_to_secs0 (shallow_model0 self * UInt32.to_int rhs) <= UInt64.to_int max0
     -> deep_model0 result = Core_Option_Option_Type.C_Some (shallow_model0 self * UInt32.to_int rhs) }
    
  val checked_sub0 (self : Core_Time_Duration_Type.t_duration) (rhs : Core_Time_Duration_Type.t_duration) : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 129 16 129 63] shallow_model0 self - shallow_model0 rhs < 0
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 130 16 130 91] shallow_model0 self - shallow_model0 rhs >= 0
     -> deep_model0 result = Core_Option_Option_Type.C_Some (shallow_model0 self - shallow_model0 rhs) }
    
  use prelude.Borrow
  val is_some0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 33 26 33 51] result = (self <> Core_Option_Option_Type.C_None) }
    
  val is_none0 (self : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)) : bool
    requires {inv0 self}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 36 26 36 51] result = (self = Core_Option_Option_Type.C_None) }
    
  val checked_add0 (self : Core_Time_Duration_Type.t_duration) (rhs : Core_Time_Duration_Type.t_duration) : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration)
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 125 16 125 86] nanos_to_secs0 (shallow_model0 self + shallow_model0 rhs) > UInt64.to_int max0
     -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 126 16 126 114] nanos_to_secs0 (shallow_model0 self + shallow_model0 rhs) <= UInt64.to_int max0
     -> deep_model0 result = Core_Option_Option_Type.C_Some (shallow_model0 self + shallow_model0 rhs) }
    
  use prelude.UInt128
  function nanos_to_micros0 (nanos : int) : int
  val nanos_to_micros0 (nanos : int) : int
    ensures { result = nanos_to_micros0 nanos }
    
  function shallow_model4 (self : Core_Time_Duration_Type.t_duration) : int =
    [#"../../../../creusot-contracts/src/model.rs" 79 8 79 31] shallow_model0 self
  val shallow_model4 (self : Core_Time_Duration_Type.t_duration) : int
    ensures { result = shallow_model4 self }
    
  use prelude.UInt128
  val as_micros0 (self : Core_Time_Duration_Type.t_duration) : uint128
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 118 26 118 59] UInt128.to_int result = nanos_to_micros0 (shallow_model4 self) }
    
  function nanos_to_millis0 (nanos : int) : int
  val nanos_to_millis0 (nanos : int) : int
    ensures { result = nanos_to_millis0 nanos }
    
  val as_millis0 (self : Core_Time_Duration_Type.t_duration) : uint128
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 115 26 115 59] UInt128.to_int result = nanos_to_millis0 (shallow_model4 self) }
    
  val subsec_nanos0 (self : Core_Time_Duration_Type.t_duration) : uint32
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 111 26 111 60] UInt32.to_int result = mod (shallow_model4 self) 1000000000 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 112 26 112 52] result < (1000000000 : uint32) }
    
  val subsec_micros0 (self : Core_Time_Duration_Type.t_duration) : uint32
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 107 26 107 71] UInt32.to_int result = mod (nanos_to_micros0 (shallow_model4 self)) 1000000 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 108 26 108 48] result < (1000000 : uint32) }
    
  val subsec_millis0 (self : Core_Time_Duration_Type.t_duration) : uint32
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 103 26 103 67] UInt32.to_int result = mod (nanos_to_millis0 (shallow_model4 self)) 1000 }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 104 26 104 44] result < (1000 : uint32) }
    
  val as_secs0 (self : Core_Time_Duration_Type.t_duration) : uint64
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 100 26 100 57] UInt64.to_int result = nanos_to_secs0 (shallow_model4 self) }
    
  val is_zero0 (self : Core_Time_Duration_Type.t_duration) : bool
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 96 16 96 57] shallow_model4 self = 0  -> result = true }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 97 16 97 58] shallow_model4 self <> 0
     -> result = false }
    
  val from_nanos0 (nanos : uint64) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 93 26 93 43] shallow_model0 result = UInt64.to_int nanos }
    
  val from_micros0 (micros : uint64) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 90 26 90 54] shallow_model0 result = UInt64.to_int micros * 1000 }
    
  val from_millis0 (millis : uint64) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 87 26 87 58] shallow_model0 result = UInt64.to_int millis * 1000000 }
    
  val from_secs0 (secs : uint64) : Core_Time_Duration_Type.t_duration
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 84 26 84 57] shallow_model0 result = secs_to_nanos0 (UInt64.to_int secs) }
    
  val as_nanos0 (self : Core_Time_Duration_Type.t_duration) : uint128
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 121 26 121 42] UInt128.to_int result = shallow_model4 self }
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 122 26 122 75] UInt128.to_int result <= secs_to_nanos0 (UInt64.to_int max0) + 999999999 }
    
  val new0 (secs : uint64) (nanos : uint32) : Core_Time_Duration_Type.t_duration
    requires {[#"../../../../creusot-contracts/src/std/time.rs" 80 27 80 69] UInt64.to_int secs + nanos_to_secs0 (UInt32.to_int nanos) <= UInt64.to_int max0}
    ensures { [#"../../../../creusot-contracts/src/std/time.rs" 81 26 81 66] shallow_model0 result = secs_to_nanos0 (UInt64.to_int secs) + UInt32.to_int nanos }
    
  let rec cfg test_duration [#"../duration.rs" 7 0 7 22] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var zero : Core_Time_Duration_Type.t_duration;
  var _5 : bool;
  var _6 : uint128;
  var max : Core_Time_Duration_Type.t_duration;
  var d_secs : Core_Time_Duration_Type.t_duration;
  var d_millis : Core_Time_Duration_Type.t_duration;
  var d_micros : Core_Time_Duration_Type.t_duration;
  var d_nanos : Core_Time_Duration_Type.t_duration;
  var _23 : bool;
  var _27 : bool;
  var _31 : bool;
  var _32 : uint64;
  var _36 : bool;
  var _37 : uint32;
  var _41 : bool;
  var _42 : uint32;
  var _46 : bool;
  var _47 : uint32;
  var _51 : bool;
  var _52 : uint128;
  var _53 : uint32;
  var _55 : uint128;
  var _59 : bool;
  var _60 : uint128;
  var _61 : uint32;
  var _63 : uint128;
  var _67 : bool;
  var _68 : uint128;
  var _69 : uint32;
  var _71 : uint128;
  var _75 : bool;
  var _77 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _82 : bool;
  var _84 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _89 : bool;
  var _91 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _96 : bool;
  var _98 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _103 : bool;
  var _105 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _109 : bool;
  var _111 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _115 : bool;
  var _117 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var _121 : bool;
  var _123 : Core_Option_Option_Type.t_option (Core_Time_Duration_Type.t_duration);
  var sum : Core_Time_Duration_Type.t_duration;
  var difference : Core_Time_Duration_Type.t_duration;
  {
    goto BB0
  }
  BB0 {
    [#"../duration.rs" 8 15 8 34] zero <- ([#"../duration.rs" 8 15 8 34] new0 ([#"../duration.rs" 8 29 8 30] (0 : uint64)) ([#"../duration.rs" 8 32 8 33] (0 : uint32)));
    goto BB1
  }
  BB1 {
    assert { [@expl:assertion] [#"../duration.rs" 9 18 9 28] shallow_model0 zero = 0 };
    [#"../duration.rs" 10 12 10 27] _6 <- ([#"../duration.rs" 10 12 10 27] as_nanos0 zero);
    goto BB2
  }
  BB2 {
    [#"../duration.rs" 10 12 10 32] _5 <- _6 = ([#"../duration.rs" 10 31 10 32] (0 : uint128));
    _6 <- any uint128;
    switch (_5)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    [#"../duration.rs" 12 14 12 50] max <- ([#"../duration.rs" 12 14 12 50] new0 ([#"../duration.rs" 12 28 12 36] (18446744073709551615 : uint64)) ([#"../duration.rs" 12 38 12 49] (999999999 : uint32)));
    goto BB5
  }
  BB4 {
    assert { [#"../duration.rs" 10 4 10 33] false };
    absurd
  }
  BB5 {
    [#"../duration.rs" 14 17 14 39] d_secs <- ([#"../duration.rs" 14 17 14 39] from_secs0 ([#"../duration.rs" 14 37 14 38] (1 : uint64)));
    goto BB6
  }
  BB6 {
    assert { [@expl:assertion] [#"../duration.rs" 15 18 15 42] shallow_model0 d_secs = 1000000000 };
    [#"../duration.rs" 17 19 17 43] d_millis <- ([#"../duration.rs" 17 19 17 43] from_millis0 ([#"../duration.rs" 17 41 17 42] (1 : uint64)));
    goto BB7
  }
  BB7 {
    assert { [@expl:assertion] [#"../duration.rs" 18 18 18 40] shallow_model0 d_millis = 1000000 };
    [#"../duration.rs" 20 19 20 43] d_micros <- ([#"../duration.rs" 20 19 20 43] from_micros0 ([#"../duration.rs" 20 41 20 42] (1 : uint64)));
    goto BB8
  }
  BB8 {
    assert { [@expl:assertion] [#"../duration.rs" 21 18 21 36] shallow_model0 d_micros = 1000 };
    [#"../duration.rs" 23 18 23 41] d_nanos <- ([#"../duration.rs" 23 18 23 41] from_nanos0 ([#"../duration.rs" 23 39 23 40] (1 : uint64)));
    goto BB9
  }
  BB9 {
    assert { [@expl:assertion] [#"../duration.rs" 24 18 24 31] shallow_model0 d_nanos = 1 };
    [#"../duration.rs" 26 12 26 26] _23 <- ([#"../duration.rs" 26 12 26 26] is_zero0 zero);
    goto BB10
  }
  BB10 {
    switch (_23)
      | False -> goto BB12
      | True -> goto BB11
      end
  }
  BB11 {
    [#"../duration.rs" 27 13 27 29] _27 <- ([#"../duration.rs" 27 13 27 29] is_zero0 d_secs);
    goto BB13
  }
  BB12 {
    assert { [#"../duration.rs" 26 4 26 27] false };
    absurd
  }
  BB13 {
    switch (_27)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    assert { [#"../duration.rs" 27 4 27 30] false };
    absurd
  }
  BB15 {
    [#"../duration.rs" 29 17 29 33] _32 <- ([#"../duration.rs" 29 17 29 33] as_secs0 d_secs);
    goto BB16
  }
  BB16 {
    [#"../duration.rs" 29 12 29 33] _31 <- ([#"../duration.rs" 29 12 29 13] (1 : uint64)) = _32;
    _32 <- any uint64;
    switch (_31)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    [#"../duration.rs" 30 17 30 39] _37 <- ([#"../duration.rs" 30 17 30 39] subsec_millis0 d_secs);
    goto BB19
  }
  BB18 {
    assert { [#"../duration.rs" 29 4 29 34] false };
    absurd
  }
  BB19 {
    [#"../duration.rs" 30 12 30 39] _36 <- ([#"../duration.rs" 30 12 30 13] (0 : uint32)) = _37;
    _37 <- any uint32;
    switch (_36)
      | False -> goto BB21
      | True -> goto BB20
      end
  }
  BB20 {
    [#"../duration.rs" 31 17 31 39] _42 <- ([#"../duration.rs" 31 17 31 39] subsec_micros0 d_secs);
    goto BB22
  }
  BB21 {
    assert { [#"../duration.rs" 30 4 30 40] false };
    absurd
  }
  BB22 {
    [#"../duration.rs" 31 12 31 39] _41 <- ([#"../duration.rs" 31 12 31 13] (0 : uint32)) = _42;
    _42 <- any uint32;
    switch (_41)
      | False -> goto BB24
      | True -> goto BB23
      end
  }
  BB23 {
    [#"../duration.rs" 32 17 32 38] _47 <- ([#"../duration.rs" 32 17 32 38] subsec_nanos0 d_secs);
    goto BB25
  }
  BB24 {
    assert { [#"../duration.rs" 31 4 31 40] false };
    absurd
  }
  BB25 {
    [#"../duration.rs" 32 12 32 38] _46 <- ([#"../duration.rs" 32 12 32 13] (0 : uint32)) = _47;
    _47 <- any uint32;
    switch (_46)
      | False -> goto BB27
      | True -> goto BB26
      end
  }
  BB26 {
    [#"../duration.rs" 34 12 34 36] _53 <- ([#"../duration.rs" 34 12 34 36] subsec_millis0 d_millis);
    goto BB28
  }
  BB27 {
    assert { [#"../duration.rs" 32 4 32 39] false };
    absurd
  }
  BB28 {
    [#"../duration.rs" 34 12 34 44] _52 <- UInt128.of_int (UInt32.to_int _53);
    _53 <- any uint32;
    [#"../duration.rs" 34 48 34 68] _55 <- ([#"../duration.rs" 34 48 34 68] as_millis0 d_millis);
    goto BB29
  }
  BB29 {
    [#"../duration.rs" 34 12 34 68] _51 <- _52 = _55;
    _52 <- any uint128;
    _55 <- any uint128;
    switch (_51)
      | False -> goto BB31
      | True -> goto BB30
      end
  }
  BB30 {
    [#"../duration.rs" 35 12 35 36] _61 <- ([#"../duration.rs" 35 12 35 36] subsec_micros0 d_micros);
    goto BB32
  }
  BB31 {
    assert { [#"../duration.rs" 34 4 34 69] false };
    absurd
  }
  BB32 {
    [#"../duration.rs" 35 12 35 44] _60 <- UInt128.of_int (UInt32.to_int _61);
    _61 <- any uint32;
    [#"../duration.rs" 35 48 35 68] _63 <- ([#"../duration.rs" 35 48 35 68] as_micros0 d_micros);
    goto BB33
  }
  BB33 {
    [#"../duration.rs" 35 12 35 68] _59 <- _60 = _63;
    _60 <- any uint128;
    _63 <- any uint128;
    switch (_59)
      | False -> goto BB35
      | True -> goto BB34
      end
  }
  BB34 {
    [#"../duration.rs" 36 12 36 34] _69 <- ([#"../duration.rs" 36 12 36 34] subsec_nanos0 d_nanos);
    goto BB36
  }
  BB35 {
    assert { [#"../duration.rs" 35 4 35 69] false };
    absurd
  }
  BB36 {
    [#"../duration.rs" 36 12 36 42] _68 <- UInt128.of_int (UInt32.to_int _69);
    _69 <- any uint32;
    [#"../duration.rs" 36 46 36 64] _71 <- ([#"../duration.rs" 36 46 36 64] as_nanos0 d_nanos);
    goto BB37
  }
  BB37 {
    [#"../duration.rs" 36 12 36 64] _67 <- _68 = _71;
    _68 <- any uint128;
    _71 <- any uint128;
    switch (_67)
      | False -> goto BB39
      | True -> goto BB38
      end
  }
  BB38 {
    [#"../duration.rs" 38 12 38 35] _77 <- ([#"../duration.rs" 38 12 38 35] checked_add0 d_secs max);
    goto BB40
  }
  BB39 {
    assert { [#"../duration.rs" 36 4 36 65] false };
    absurd
  }
  BB40 {
    [#"../duration.rs" 38 12 38 45] _75 <- ([#"../duration.rs" 38 12 38 45] is_none0 _77);
    goto BB41
  }
  BB41 {
    switch (_75)
      | False -> goto BB43
      | True -> goto BB42
      end
  }
  BB42 {
    [#"../duration.rs" 39 12 39 38] _84 <- ([#"../duration.rs" 39 12 39 38] checked_add0 d_secs d_secs);
    goto BB44
  }
  BB43 {
    assert { [#"../duration.rs" 38 4 38 46] false };
    absurd
  }
  BB44 {
    [#"../duration.rs" 39 12 39 48] _82 <- ([#"../duration.rs" 39 12 39 48] is_some0 _84);
    goto BB45
  }
  BB45 {
    switch (_82)
      | False -> goto BB47
      | True -> goto BB46
      end
  }
  BB46 {
    [#"../duration.rs" 41 12 41 35] _91 <- ([#"../duration.rs" 41 12 41 35] checked_sub0 d_secs max);
    goto BB48
  }
  BB47 {
    assert { [#"../duration.rs" 39 4 39 49] false };
    absurd
  }
  BB48 {
    [#"../duration.rs" 41 12 41 45] _89 <- ([#"../duration.rs" 41 12 41 45] is_none0 _91);
    goto BB49
  }
  BB49 {
    switch (_89)
      | False -> goto BB51
      | True -> goto BB50
      end
  }
  BB50 {
    [#"../duration.rs" 42 12 42 40] _98 <- ([#"../duration.rs" 42 12 42 40] checked_sub0 d_secs d_millis);
    goto BB52
  }
  BB51 {
    assert { [#"../duration.rs" 41 4 41 46] false };
    absurd
  }
  BB52 {
    [#"../duration.rs" 42 12 42 50] _96 <- ([#"../duration.rs" 42 12 42 50] is_some0 _98);
    goto BB53
  }
  BB53 {
    switch (_96)
      | False -> goto BB55
      | True -> goto BB54
      end
  }
  BB54 {
    [#"../duration.rs" 44 12 44 30] _105 <- ([#"../duration.rs" 44 12 44 30] checked_mul0 max ([#"../duration.rs" 44 28 44 29] (2 : uint32)));
    goto BB56
  }
  BB55 {
    assert { [#"../duration.rs" 42 4 42 51] false };
    absurd
  }
  BB56 {
    [#"../duration.rs" 44 12 44 40] _103 <- ([#"../duration.rs" 44 12 44 40] is_none0 _105);
    goto BB57
  }
  BB57 {
    switch (_103)
      | False -> goto BB59
      | True -> goto BB58
      end
  }
  BB58 {
    [#"../duration.rs" 45 12 45 34] _111 <- ([#"../duration.rs" 45 12 45 34] checked_mul0 d_secs ([#"../duration.rs" 45 31 45 33] (10 : uint32)));
    goto BB60
  }
  BB59 {
    assert { [#"../duration.rs" 44 4 44 41] false };
    absurd
  }
  BB60 {
    [#"../duration.rs" 45 12 45 44] _109 <- ([#"../duration.rs" 45 12 45 44] is_some0 _111);
    goto BB61
  }
  BB61 {
    switch (_109)
      | False -> goto BB63
      | True -> goto BB62
      end
  }
  BB62 {
    [#"../duration.rs" 47 12 47 33] _117 <- ([#"../duration.rs" 47 12 47 33] checked_div0 d_secs ([#"../duration.rs" 47 31 47 32] (0 : uint32)));
    goto BB64
  }
  BB63 {
    assert { [#"../duration.rs" 45 4 45 45] false };
    absurd
  }
  BB64 {
    [#"../duration.rs" 47 12 47 43] _115 <- ([#"../duration.rs" 47 12 47 43] is_none0 _117);
    goto BB65
  }
  BB65 {
    switch (_115)
      | False -> goto BB67
      | True -> goto BB66
      end
  }
  BB66 {
    [#"../duration.rs" 48 12 48 34] _123 <- ([#"../duration.rs" 48 12 48 34] checked_div0 d_secs ([#"../duration.rs" 48 31 48 33] (10 : uint32)));
    goto BB68
  }
  BB67 {
    assert { [#"../duration.rs" 47 4 47 44] false };
    absurd
  }
  BB68 {
    [#"../duration.rs" 48 12 48 44] _121 <- ([#"../duration.rs" 48 12 48 44] is_some0 _123);
    goto BB69
  }
  BB69 {
    switch (_121)
      | False -> goto BB71
      | True -> goto BB70
      end
  }
  BB70 {
    [#"../duration.rs" 50 14 50 33] sum <- ([#"../duration.rs" 50 14 50 33] add0 d_millis d_micros);
    goto BB72
  }
  BB71 {
    assert { [#"../duration.rs" 48 4 48 45] false };
    absurd
  }
  BB72 {
    [#"../duration.rs" 51 21 51 40] difference <- ([#"../duration.rs" 51 21 51 40] sub0 d_millis d_micros);
    goto BB73
  }
  BB73 {
    assert { [@expl:assertion] [#"../duration.rs" 52 18 52 35] shallow_model0 sum = 1001000 };
    assert { [@expl:assertion] [#"../duration.rs" 53 18 53 39] shallow_model0 difference = 999000 };
    [#"../duration.rs" 7 23 54 1] _0 <- ([#"../duration.rs" 7 23 54 1] ());
    return _0
  }
  
end
