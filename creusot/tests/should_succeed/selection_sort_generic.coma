module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'}) ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} (! {false} any) ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} (! {false} any) ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} (! {false} any) ]
    
end
module M_selection_sort_generic__selection_sort [#"selection_sort_generic.rs" 30 0 32 29]
  type t
  
  let%span sselection_sort_generic0 = "selection_sort_generic.rs" 34 16 34 31
  let%span sselection_sort_generic1 = "selection_sort_generic.rs" 39 13 39 14
  let%span sselection_sort_generic2 = "selection_sort_generic.rs" 36 4 36 43
  let%span sselection_sort_generic3 = "selection_sort_generic.rs" 36 4 36 43
  let%span sselection_sort_generic4 = "selection_sort_generic.rs" 36 4 36 43
  let%span sselection_sort_generic5 = "selection_sort_generic.rs" 37 16 37 63
  let%span sselection_sort_generic6 = "selection_sort_generic.rs" 38 16 38 57
  let%span sselection_sort_generic7 = "selection_sort_generic.rs" 36 4 36 43
  let%span sselection_sort_generic8 = "selection_sort_generic.rs" 44 22 44 23
  let%span sselection_sort_generic9 = "selection_sort_generic.rs" 42 8 42 121
  let%span sselection_sort_generic10 = "selection_sort_generic.rs" 42 8 42 121
  let%span sselection_sort_generic11 = "selection_sort_generic.rs" 42 8 42 121
  let%span sselection_sort_generic12 = "selection_sort_generic.rs" 43 20 43 64
  let%span sselection_sort_generic13 = "selection_sort_generic.rs" 42 8 42 121
  let%span sselection_sort_generic14 = "selection_sort_generic.rs" 50 8 51 63
  let%span sselection_sort_generic15 = "selection_sort_generic.rs" 30 42 30 43
  let%span sselection_sort_generic16 = "selection_sort_generic.rs" 28 10 28 35
  let%span sselection_sort_generic17 = "selection_sort_generic.rs" 29 0 29 36
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span siter19 = "../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span srange20 = "../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span smodel21 = "../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span ssnapshot22 = "../../../creusot-contracts/src/snapshot.rs" 27 20 27 39
  let%span sseq23 = "../../../creusot-contracts/src/logic/seq.rs" 120 8 120 37
  let%span smodel24 = "../../../creusot-contracts/src/model.rs" 100 8 100 28
  let%span sselection_sort_generic25 = "selection_sort_generic.rs" 11 4 13 5
  let%span sselection_sort_generic26 = "selection_sort_generic.rs" 25 4 25 106
  let%span siter27 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec28 = "../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span svec29 = "../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span scmp30 = "../../../creusot-contracts/src/std/cmp.rs" 33 26 33 76
  let%span svec31 = "../../../creusot-contracts/src/std/vec.rs" 178 26 178 42
  let%span svec32 = "../../../creusot-contracts/src/std/vec.rs" 179 26 179 48
  let%span sslice33 = "../../../creusot-contracts/src/std/slice.rs" 261 19 261 35
  let%span sslice34 = "../../../creusot-contracts/src/std/slice.rs" 262 19 262 35
  let%span sslice35 = "../../../creusot-contracts/src/std/slice.rs" 263 8 263 52
  let%span svec36 = "../../../creusot-contracts/src/std/vec.rs" 31 14 31 47
  let%span svec37 = "../../../creusot-contracts/src/std/vec.rs" 32 4 33 53
  let%span sselection_sort_generic38 = "selection_sort_generic.rs" 19 8 19 35
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel40 = "../../../creusot-contracts/src/model.rs" 91 8 91 22
  let%span siter41 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter42 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange43 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange44 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange45 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange46 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange47 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange48 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange49 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange50 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum51 = "../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span srange52 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve53 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sord54 = "../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  let%span sord55 = "../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  let%span sord56 = "../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  let%span sord57 = "../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  let%span sord58 = "../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  let%span sord59 = "../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  let%span sord60 = "../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  let%span sord61 = "../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  let%span sord62 = "../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  let%span sord63 = "../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  let%span sord64 = "../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  let%span sord65 = "../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  let%span sord66 = "../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  let%span sslice67 = "../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span sslice68 = "../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span smodel69 = "../../../creusot-contracts/src/model.rs" 82 8 82 28
  let%span sslice70 = "../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice71 = "../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sops72 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span svec73 = "../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sslice74 = "../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sinvariant75 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant76 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq77 = "../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed78 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  predicate inv'12 (_1 : t)
  
  predicate invariant'7 (self : t) =
    [%#sboxed78] inv'12 self
  
  predicate inv'13 (_1 : t)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t [inv'13 x] . inv'13 x = invariant'7 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq t) =
    [%#sseq77] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq t)
  
  axiom inv_axiom'11 [@rewrite] : forall x : Seq.seq t [inv'11 x] . inv'11 x = invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : t) =
    [%#sinvariant76] inv'12 self
  
  predicate inv'10 (_1 : t)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t [inv'10 x] . inv'10 x = invariant'5 x
  
  use prelude.prelude.UIntSize
  
  predicate inv'9 (_1 : usize)
  
  axiom inv_axiom'9 [@rewrite] : forall x : usize [inv'9 x] . inv'9 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'8 (_1 : Option'0.t_Option usize)
  
  axiom inv_axiom'8 [@rewrite] : forall x : Option'0.t_Option usize [inv'8 x] . inv'8 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'7 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'7 x] . inv'7 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  predicate invariant'4 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#sinvariant76] inv'2 self
  
  predicate inv'6 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv_axiom'6 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate invariant'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sinvariant75] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'5 x] . inv'5 x
  = invariant'3 x
  
  use prelude.prelude.Slice
  
  predicate inv'3 (_1 : slice t)
  
  predicate invariant'2 (self : borrowed (slice t)) =
    [%#sinvariant75] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (slice t))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (slice t) [inv'4 x] . inv'4 x = invariant'2 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'6 (self : slice t) : Seq.seq t
  
  axiom view'6_spec : forall self : slice t . ([%#sslice71] view'6 self = Slice.id self)
  && ([%#sslice70] Seq.length (view'6 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'1 (self : slice t) =
    [%#sslice74] inv'11 (view'6 self)
  
  axiom inv_axiom'3 [@rewrite] : forall x : slice t [inv'3 x] . inv'3 x = invariant'1 x
  
  function view'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom view'2_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#svec39] Seq.length (view'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#svec73] inv'11 (view'2 self)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'2 x] . inv'2 x = invariant'0 x
  
  type t_DeepModelTy'0
  
  use T_core__cmp__Ordering as Ordering'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord66] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord64] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#sord65] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord62] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#sord63] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#sord59] cmp_log'0 x y
  = o)  -> ([%#sord60] cmp_log'0 y z = o)  -> ([%#sord61] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord58] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord57] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord56] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord55] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord54] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'2 (self : usize) : int =
    [%#snum51] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#srange20] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'2 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'2 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'2 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'2 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'2 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'2 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'2 (Seq.get visited i) = deep_model'2 (T_core__ops__range__Range.t_Range__start self) + i)
  
  predicate inv'1 (_1 : Range'0.t_Range usize)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#srange45] inv'1 a)
   -> ([%#srange46] inv'1 b)
   -> ([%#srange47] inv'1 c)
   -> ([%#srange48] produces'0 a ab b)
   -> ([%#srange49] produces'0 b bc c)  -> ([%#srange50] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#srange43] inv'1 self)
   -> ([%#srange44] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Range'0.t_Range usize [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate sorted_range'0 [#"selection_sort_generic.rs" 10 0 10 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#sselection_sort_generic25] forall i : int, j : int . l <= i /\ i < j /\ j < u
     -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  use seq.Seq
  
  predicate sorted'0 [#"selection_sort_generic.rs" 17 0 17 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#sselection_sort_generic38] sorted_range'0 s 0 (Seq.length s)
  
  function deep_model'4 (self : t) : t_DeepModelTy'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#sops72] Seq.get (view'2 self) ix
  
  function deep_model'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . ([%#svec37] forall i : int . 0 <= i
  /\ i < Seq.length (view'2 self)  -> Seq.get (deep_model'1 self) i = deep_model'4 (index_logic'0 self i))
  && ([%#svec36] Seq.length (view'2 self) = Seq.length (deep_model'1 self))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#sresolve53] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'5 _1
  
  predicate resolve'4 (self : borrowed (slice t)) =
    [%#sresolve53] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (slice t)) =
    resolve'4 _1
  
  use seq.Permut
  
  function view'5 (self : borrowed (slice t)) : Seq.seq t =
    [%#smodel21] view'6 self.current
  
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] inv'4 self}
    {[@expl:precondition] [%#sslice34] UIntSize.to_int b < Seq.length (view'5 self)}
    {[@expl:precondition] [%#sslice33] UIntSize.to_int a < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice35] Permut.exchange (view'6 self.final) (view'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function view'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel21] view'2 self.current
  
  let rec deref_mut'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:borrowed (slice t))-> {inv'4 result}
      {[%#svec32] view'6 result.final = view'2 self.final}
      {[%#svec31] view'5 result = view'0 self}
      (! return' {result}) ]
    
  
  function deep_model'3 (self : t) : t_DeepModelTy'0 =
    [%#smodel69] deep_model'4 self
  
  let rec lt'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] inv'10 other}
    {[@expl:precondition] inv'10 self}
    any
    [ return' (result:bool)-> {[%#scmp30] result = lt_log'0 (deep_model'3 self) (deep_model'3 other)}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#sslice68] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#sslice67] UIntSize.to_int self < Seq.length seq
  
  function view'3 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#smodel40] view'2 self
  
  let rec index'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] inv'9 index}
    {[@expl:precondition] inv'6 self}
    {[@expl:precondition] [%#svec28] in_bounds'0 index (view'3 self)}
    any
    [ return' (result:t)-> {inv'10 result} {[%#svec29] has_value'0 index (view'3 self) result} (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'3 (self : borrowed (Range'0.t_Range usize)) =
    [%#sresolve53] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Range'0.t_Range usize)) =
    resolve'3 _1
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#srange52] resolve'3 self
    /\ deep_model'2 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'2 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {inv'8 result}
      {[%#siter27] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  predicate partition'0 [#"selection_sort_generic.rs" 24 0 24 52] (v : Seq.seq t_DeepModelTy'0) (i : int) =
    [%#sselection_sort_generic26] forall k1 : int, k2 : int . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v
     -> le_log'0 (Seq.get v k1) (Seq.get v k2)
  
  function deep_model'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t_DeepModelTy'0 =
    [%#smodel24] deep_model'1 self.current
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t) (o : Seq.seq t) =
    [%#sseq23] Permut.permut self o 0 (Seq.length self)
  
  function view'4 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#smodel40] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global)))) : Seq.seq t =
    [%#ssnapshot22] view'4 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#siter42] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#siter41] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter19] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {inv'1 result}
      {[%#siter19] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] inv'6 self}
    any
    [ return' (result:usize)-> {[%#svec18] UIntSize.to_int result = Seq.length (view'3 self)} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec selection_sort (v:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:()))= {[%#sselection_sort_generic15] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sselection_sort_generic0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_8 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#sselection_sort_generic1] (0 : usize)) _8 ] s1
      | s1 = into_iter'0 {_7} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#sselection_sort_generic2] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#sselection_sort_generic3] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] (Snapshot.inner old_6_0).final = v.final}
        {[@expl:loop invariant] [%#sselection_sort_generic6] partition'0 (deep_model'0 v) (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [%#sselection_sort_generic5] sorted_range'0 (deep_model'0 v) 0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant] [%#sselection_sort_generic4] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant] [%#sselection_sort_generic4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sselection_sort_generic4] inv'1 iter}
        {[@expl:loop invariant] [%#sselection_sort_generic4] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_23 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_23.current} {Borrow.get_id _23}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_22 <- _ret' ] 
                 [ &_23 <- { _23 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_22} (fun (_ret':Option'0.t_Option usize) ->  [ &_21 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _23}- s1
          | s1 = any
            [ br0 -> {_21 = Option'0.C_None } (! bb11) | br1 (a:usize)-> {_21 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = Option'0.v_Some <usize> {_21} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_26 <- [%#sselection_sort_generic7] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _26 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &min <- i ] s3
          | s3 = UIntSize.add {i} {[%#sselection_sort_generic8] (1 : usize)}
              (fun (_ret':usize) ->  [ &_33 <- _ret' ] s4)
          | s4 = len'0 {v.current} (fun (_ret':usize) ->  [ &_35 <- _ret' ] s5)
          | s5 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &_32 <- Range'0.C_Range _33 _35 ] s1
          | s1 = into_iter'0 {_32} (fun (_ret':Range'0.t_Range usize) ->  [ &iter1 <- _ret' ] s2)
          | s2 = bb15 ]
          
        | bb15 = s0 [ s0 =  [ &iter_old1 <- [%#sselection_sort_generic9] Snapshot.new iter1 ] s1 | s1 = bb16 ] 
        | bb16 = s0
          [ s0 =  [ &produced1 <- [%#sselection_sort_generic10] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1
          | s1 = bb17 ]
          
        | bb17 = bb18
        | bb18 = bb18
          [ bb18 = {[@expl:loop invariant] [%#sselection_sort_generic12] UIntSize.to_int i <= UIntSize.to_int min
            /\ UIntSize.to_int min < Seq.length (Snapshot.inner produced1) + UIntSize.to_int i + 1}
            {[@expl:loop invariant] [%#sselection_sort_generic11] forall k : int . UIntSize.to_int i <= k
            /\ k < Seq.length (Snapshot.inner produced1) + UIntSize.to_int i + 1
             -> le_log'0 (Seq.get (deep_model'0 v) (UIntSize.to_int min)) (Seq.get (deep_model'0 v) k)}
            {[@expl:loop invariant] [%#sselection_sort_generic11] produces'0 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#sselection_sort_generic11] inv'1 iter1}
            {[@expl:loop invariant] [%#sselection_sort_generic11] inv'0 (Snapshot.inner produced1)}
            (! s0) [ s0 = bb19 ] 
            [ bb19 = s0
              [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter1}
                  (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_48 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_48.current} {Borrow.get_id _48}
                  (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                     [ &_47 <- _ret' ] 
                     [ &_48 <- { _48 with current = _ret'.final ; } ] 
                    s2)
              | s2 = next'0 {_47} (fun (_ret':Option'0.t_Option usize) ->  [ &_46 <- _ret' ] s3)
              | s3 = bb20 ]
              
            | bb20 = s0
              [ s0 = -{resolve'0 _48}- s1
              | s1 = any
                [ br0 -> {_46 = Option'0.C_None } (! bb23) | br1 (a:usize)-> {_46 = Option'0.C_Some a} (! bb22) ]
                 ]
              
            | bb22 = bb24
            | bb24 = s0
              [ s0 = Option'0.v_Some <usize> {_46} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_51 <- [%#sselection_sort_generic13] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb25 ]
              
            | bb25 = s0
              [ s0 =  [ &produced1 <- _51 ] s1
              | s1 =  [ &j <- __creusot_proc_iter_elem1 ] s2
              | s2 = index'0 {v.current} {j} (fun (_ret':t) ->  [ &_56 <- _ret' ] s3)
              | s3 = bb26 ]
              
            | bb26 = s0 [ s0 = index'0 {v.current} {min} (fun (_ret':t) ->  [ &_60 <- _ret' ] s1) | s1 = bb27 ] 
            | bb27 = s0 [ s0 = lt'0 {_56} {_60} (fun (_ret':bool) ->  [ &_54 <- _ret' ] s1) | s1 = bb28 ] 
            | bb28 = any [ br0 -> {_54 = false} (! bb30) | br1 -> {_54} (! bb29) ] 
            | bb29 = s0 [ s0 =  [ &min <- j ] s1 | s1 = bb31 ] 
            | bb30 = bb31
            | bb31 = bb18 ]
             ]
          
        | bb23 = s0
          [ s0 = {inv'2 v.current}
            Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_68 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &v <- { v with current = _ret'.final ; } ] 
                s1)
          | s1 = deref_mut'0 {_68} (fun (_ret':borrowed (slice t)) ->  [ &_67 <- _ret' ] s2)
          | s2 = bb32 ]
          
        | bb32 = s0
          [ s0 = {inv'3 _67.current}
            Borrow.borrow_final <slice t> {_67.current} {Borrow.get_id _67}
              (fun (_ret':borrowed (slice t)) ->
                 [ &_66 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_67 <- { _67 with current = _ret'.final ; } ] 
                s1)
          | s1 = swap'0 {_66} {i} {min} (fun (_ret':()) ->  [ &_65 <- _ret' ] s2)
          | s2 = bb33 ]
          
        | bb33 = s0
          [ s0 = {[@expl:type invariant] inv'4 _67} s1
          | s1 = -{resolve'1 _67}- s2
          | s2 = {[@expl:assertion] [%#sselection_sort_generic14] let i = Seq.length (Snapshot.inner produced) in forall k1 : int, k2 : int . 0
            <= k1
            /\ k1 < i /\ i <= k2 /\ k2 < Seq.length (deep_model'0 v)
             -> le_log'0 (Seq.get (deep_model'0 v) k1) (Seq.get (deep_model'0 v) k2)}
            s3
          | s3 = bb6 ]
           ]
         ]
      
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'5 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _7 : Range'0.t_Range usize = any_l ()
    | & _8 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _21 : Option'0.t_Option usize = any_l ()
    | & _22 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _23 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _26 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & min : usize = any_l ()
    | & iter1 : Range'0.t_Range usize = any_l ()
    | & _32 : Range'0.t_Range usize = any_l ()
    | & _33 : usize = any_l ()
    | & _35 : usize = any_l ()
    | & iter_old1 : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _46 : Option'0.t_Option usize = any_l ()
    | & _47 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _48 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _51 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & j : usize = any_l ()
    | & _54 : bool = any_l ()
    | & _56 : t = any_l ()
    | & _60 : t = any_l ()
    | & _65 : () = any_l ()
    | & _66 : borrowed (slice t) = any_l ()
    | & _67 : borrowed (slice t) = any_l ()
    | & _68 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & old_6_0 : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sselection_sort_generic17] permutation_of'0 (view'2 v.final) (view'0 v)}
      {[@expl:postcondition] [%#sselection_sort_generic16] sorted'0 (deep_model'1 v.final)}
      (! return' {result}) ]
    
end
