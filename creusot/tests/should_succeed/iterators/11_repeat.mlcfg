
module C11Repeat_Repeat_Type
  type t_repeat 'a =
    | C_Repeat 'a
    
  let function repeat_element (self : t_repeat 'a) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Repeat a -> a
      end
end
module C11Repeat_Impl0_Completed_Stub
  type a
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate completed [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a))
end
module C11Repeat_Impl0_Completed_Interface
  type a
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate completed [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a))
  val completed [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : bool
    ensures { result = completed self }
    
end
module C11Repeat_Impl0_Completed
  type a
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate completed [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) =
    [#"../11_repeat.rs" 18 20 18 25] false
  val completed [#"../11_repeat.rs" 17 4 17 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : bool
    ensures { result = completed self }
    
end
module C11Repeat_Impl0_Produces_Stub
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate produces [#"../11_repeat.rs" 23 4 23 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a)
    
end
module C11Repeat_Impl0_Produces_Interface
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate produces [#"../11_repeat.rs" 23 4 23 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a)
    
  val produces [#"../11_repeat.rs" 23 4 23 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a) : bool
    ensures { result = produces self visited o }
    
end
module C11Repeat_Impl0_Produces
  type a
  use seq.Seq
  use prelude.Int
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate produces [#"../11_repeat.rs" 23 4 23 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a)
    
   =
    [#"../11_repeat.rs" 24 8 27 9] self = o /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get visited i = C11Repeat_Repeat_Type.repeat_element self)
  val produces [#"../11_repeat.rs" 23 4 23 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a) : bool
    ensures { result = produces self visited o }
    
end
module C11Repeat_Impl0_ProducesRefl_Stub
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  function produces_refl [#"../11_repeat.rs" 33 4 33 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
end
module C11Repeat_Impl0_ProducesRefl_Interface
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  function produces_refl [#"../11_repeat.rs" 33 4 33 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
  val produces_refl [#"../11_repeat.rs" 33 4 33 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
    ensures { [#"../11_repeat.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C11Repeat_Repeat_Type.t_repeat a . [#"../11_repeat.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a
end
module C11Repeat_Impl0_ProducesRefl
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  function produces_refl [#"../11_repeat.rs" 33 4 33 29] (a : C11Repeat_Repeat_Type.t_repeat a) : () =
    [#"../11_repeat.rs" 30 4 30 10] ()
  val produces_refl [#"../11_repeat.rs" 33 4 33 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
    ensures { [#"../11_repeat.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C11Repeat_Repeat_Type.t_repeat a . [#"../11_repeat.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a
end
module C11Repeat_Impl0_ProducesRefl_Impl
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  let rec ghost function produces_refl [#"../11_repeat.rs" 33 4 33 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
    ensures { [#"../11_repeat.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../11_repeat.rs" 30 4 30 10] ()
end
module C11Repeat_Impl0_ProducesTrans_Stub
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    
end
module C11Repeat_Impl0_ProducesTrans_Interface
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    
  val produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C11Repeat_Repeat_Type.t_repeat a, ab : Seq.seq a, b : C11Repeat_Repeat_Type.t_repeat a, bc : Seq.seq a, c : C11Repeat_Repeat_Type.t_repeat a . ([#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C11Repeat_Impl0_ProducesTrans
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    
   =
    [#"../11_repeat.rs" 35 4 35 10] ()
  val produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C11Repeat_Repeat_Type.t_repeat a, ab : Seq.seq a, b : C11Repeat_Repeat_Type.t_repeat a, bc : Seq.seq a, c : C11Repeat_Repeat_Type.t_repeat a . ([#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C11Repeat_Impl0_ProducesTrans_Impl
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  let rec ghost function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../11_repeat.rs" 35 4 35 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' (self : self) : self
    ensures { [#"../../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module C11Repeat_Impl0_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Completed_Stub as Completed0 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [#"../11_repeat.rs" 46 4 46 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : Core_Option_Option_Type.t_option a
    ensures { [#"../11_repeat.rs" 42 14 45 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C11Repeat_Impl0_Next
  type a
  use prelude.Borrow
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C11Repeat_Repeat_Type.t_repeat a
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = a
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Completed as Completed0 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [#"../11_repeat.rs" 46 4 46 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : Core_Option_Option_Type.t_option a
    ensures { [#"../11_repeat.rs" 42 14 45 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option a;
  var self_1 : borrowed (C11Repeat_Repeat_Type.t_repeat a);
  var _3 : a;
  var _4 : a;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- C11Repeat_Repeat_Type.repeat_element ( * self_1);
    _3 <- ([#"../11_repeat.rs" 47 13 47 33] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_Some _3;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 9 8 9 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant_Stub
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant_Interface
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl1_Invariant
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  predicate invariant' (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 38 20 38 39] Invariant0.invariant' ( * self)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module C11Repeat_Common_Iterator_Item_Type
  type self
  type item
end
module C11Repeat_Impl0
  type a
  use seq.Seq
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = C11Repeat_Repeat_Type.t_repeat a
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C11Repeat_Impl0_Completed as Completed0 with
    type a = a
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = C11Repeat_Repeat_Type.t_repeat a
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = C11Repeat_Repeat_Type.t_repeat a,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  goal produces_trans_refn : [#"../11_repeat.rs" 40 4 40 90] forall a : C11Repeat_Repeat_Type.t_repeat a . forall ab : Seq.seq a . forall b : C11Repeat_Repeat_Type.t_repeat a . forall bc : Seq.seq a . forall c : C11Repeat_Repeat_Type.t_repeat a . Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../11_repeat.rs" 33 4 33 29] forall a : C11Repeat_Repeat_Type.t_repeat a . Invariant0.invariant' a -> (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../11_repeat.rs" 46 4 46 35] forall self : borrowed (C11Repeat_Repeat_Type.t_repeat a) . Invariant1.invariant' self -> (forall result : Core_Option_Option_Type.t_option a . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Invariant0.invariant' ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
end
module C11Repeat_Impl1
  type a
end
