
module C11Repeat_Common_Iterator_Invariant_Stub
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C11Repeat_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self)
end
module C11Repeat_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' [#"../common.rs" 28 4 28 30] (self : self) : bool
    ensures { result = invariant' self }
    
end
module C11Repeat_Repeat_Type
  type t_repeat 'a =
    | C_Repeat 'a
    
  let function repeat_element (self : t_repeat 'a) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Repeat a -> a
      end
end
module C11Repeat_Impl0_Completed_Stub
  type a
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate completed [#"../11_repeat.rs" 16 4 16 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a))
end
module C11Repeat_Impl0_Completed_Interface
  type a
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate completed [#"../11_repeat.rs" 16 4 16 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a))
end
module C11Repeat_Impl0_Completed
  type a
  use prelude.Borrow
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate completed [#"../11_repeat.rs" 16 4 16 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) =
    [#"../11_repeat.rs" 17 20 17 25] false
  val completed [#"../11_repeat.rs" 16 4 16 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : bool
    ensures { result = completed self }
    
end
module C11Repeat_Impl0_Produces_Stub
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate produces [#"../11_repeat.rs" 21 4 21 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a)
    
end
module C11Repeat_Impl0_Produces_Interface
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate produces [#"../11_repeat.rs" 21 4 21 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a)
    
end
module C11Repeat_Impl0_Produces
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  use mach.int.Int
  predicate produces [#"../11_repeat.rs" 21 4 21 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a)
    
   =
    [#"../11_repeat.rs" 22 8 25 9] self = o /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get visited i = C11Repeat_Repeat_Type.repeat_element self)
  val produces [#"../11_repeat.rs" 21 4 21 64] (self : C11Repeat_Repeat_Type.t_repeat a) (visited : Seq.seq a) (o : C11Repeat_Repeat_Type.t_repeat a) : bool
    ensures { result = produces self visited o }
    
end
module C11Repeat_Impl0_Invariant_Stub
  type a
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate invariant' [#"../11_repeat.rs" 43 4 43 30] (self : C11Repeat_Repeat_Type.t_repeat a)
end
module C11Repeat_Impl0_Invariant_Interface
  type a
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate invariant' [#"../11_repeat.rs" 43 4 43 30] (self : C11Repeat_Repeat_Type.t_repeat a)
end
module C11Repeat_Impl0_Invariant
  type a
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  predicate invariant' [#"../11_repeat.rs" 43 4 43 30] (self : C11Repeat_Repeat_Type.t_repeat a) =
    [#"../11_repeat.rs" 44 20 44 24] true
  val invariant' [#"../11_repeat.rs" 43 4 43 30] (self : C11Repeat_Repeat_Type.t_repeat a) : bool
    ensures { result = invariant' self }
    
end
module C11Repeat_Impl0_ProducesRefl_Stub
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  function produces_refl [#"../11_repeat.rs" 31 4 31 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
end
module C11Repeat_Impl0_ProducesRefl_Interface
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  function produces_refl [#"../11_repeat.rs" 31 4 31 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
  axiom produces_refl_spec : forall a : C11Repeat_Repeat_Type.t_repeat a . ([#"../11_repeat.rs" 29 15 29 28] Invariant0.invariant' a) -> ([#"../11_repeat.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a)
end
module C11Repeat_Impl0_ProducesRefl
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  function produces_refl [#"../11_repeat.rs" 31 4 31 29] (a : C11Repeat_Repeat_Type.t_repeat a) : () =
    [#"../11_repeat.rs" 28 4 28 10] ()
  val produces_refl [#"../11_repeat.rs" 31 4 31 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 29 15 29 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C11Repeat_Repeat_Type.t_repeat a . ([#"../11_repeat.rs" 29 15 29 28] Invariant0.invariant' a) -> ([#"../11_repeat.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a)
end
module C11Repeat_Impl0_ProducesRefl_Impl
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant as Invariant0 with
    type a = a
  let rec ghost function produces_refl [#"../11_repeat.rs" 31 4 31 29] (a : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 29 15 29 28] Invariant0.invariant' a}
    ensures { [#"../11_repeat.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../11_repeat.rs" 28 4 28 10] ()
end
module C11Repeat_Impl0_ProducesTrans_Stub
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    
end
module C11Repeat_Impl0_ProducesTrans_Interface
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    
  axiom produces_trans_spec : forall a : C11Repeat_Repeat_Type.t_repeat a, ab : Seq.seq a, b : C11Repeat_Repeat_Type.t_repeat a, bc : Seq.seq a, c : C11Repeat_Repeat_Type.t_repeat a . ([#"../11_repeat.rs" 34 15 34 28] Invariant0.invariant' a) -> ([#"../11_repeat.rs" 35 15 35 28] Invariant0.invariant' b) -> ([#"../11_repeat.rs" 36 15 36 28] Invariant0.invariant' c) -> ([#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C11Repeat_Impl0_ProducesTrans
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    
   =
    [#"../11_repeat.rs" 33 4 33 10] ()
  val produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 34 15 34 28] Invariant0.invariant' a}
    requires {[#"../11_repeat.rs" 35 15 35 28] Invariant0.invariant' b}
    requires {[#"../11_repeat.rs" 36 15 36 28] Invariant0.invariant' c}
    requires {[#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C11Repeat_Repeat_Type.t_repeat a, ab : Seq.seq a, b : C11Repeat_Repeat_Type.t_repeat a, bc : Seq.seq a, c : C11Repeat_Repeat_Type.t_repeat a . ([#"../11_repeat.rs" 34 15 34 28] Invariant0.invariant' a) -> ([#"../11_repeat.rs" 35 15 35 28] Invariant0.invariant' b) -> ([#"../11_repeat.rs" 36 15 36 28] Invariant0.invariant' c) -> ([#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C11Repeat_Impl0_ProducesTrans_Impl
  type a
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant as Invariant0 with
    type a = a
  let rec ghost function produces_trans [#"../11_repeat.rs" 40 4 40 90] (a : C11Repeat_Repeat_Type.t_repeat a) (ab : Seq.seq a) (b : C11Repeat_Repeat_Type.t_repeat a) (bc : Seq.seq a) (c : C11Repeat_Repeat_Type.t_repeat a) : ()
    requires {[#"../11_repeat.rs" 34 15 34 28] Invariant0.invariant' a}
    requires {[#"../11_repeat.rs" 35 15 35 28] Invariant0.invariant' b}
    requires {[#"../11_repeat.rs" 36 15 36 28] Invariant0.invariant' c}
    requires {[#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../11_repeat.rs" 33 4 33 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C11Repeat_Impl0_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Produces_Stub as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Completed_Stub as Completed0 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C11Repeat_Impl0_Invariant_Stub as Invariant0 with
    type a = a
  val next [@cfg:stackify] [#"../11_repeat.rs" 52 4 52 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : Core_Option_Option_Type.t_option a
    requires {[#"../11_repeat.rs" 47 4 47 40] Invariant0.invariant' ( * self)}
    ensures { [#"../11_repeat.rs" 47 4 47 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../11_repeat.rs" 48 14 51 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C11Repeat_Impl0_Next
  type a
  use prelude.Borrow
  use seq.Seq
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = a
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C11Repeat_Repeat_Type.t_repeat a
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Completed as Completed0 with
    type a = a
  clone C11Repeat_Impl0_Invariant as Invariant0 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [@cfg:stackify] [#"../11_repeat.rs" 52 4 52 35] (self : borrowed (C11Repeat_Repeat_Type.t_repeat a)) : Core_Option_Option_Type.t_option a
    requires {[#"../11_repeat.rs" 47 4 47 40] Invariant0.invariant' ( * self)}
    ensures { [#"../11_repeat.rs" 47 4 47 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../11_repeat.rs" 48 14 51 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option a;
  var self_1 : borrowed (C11Repeat_Repeat_Type.t_repeat a);
  var _5 : a;
  var _6 : a;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- C11Repeat_Repeat_Type.repeat_element ( * self_1);
    assume { Resolve0.resolve self_1 };
    _5 <- ([#"../11_repeat.rs" 53 13 53 33] Clone0.clone' _6);
    goto BB1
  }
  BB1 {
    _0 <- Core_Option_Option_Type.C_Some _5;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C11Repeat_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C11Repeat_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C11Repeat_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C11Repeat_Common_Iterator_Item_Type
  type self
  type item
end
module C11Repeat_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C11Repeat_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C11Repeat_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C11Repeat_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C11Repeat_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Interface as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Completed_Interface as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C11Repeat_Common_Iterator_Invariant_Interface as Invariant0 with
    type self = self
  val next [@cfg:stackify] [#"../common.rs" 37 4 37 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C11Repeat_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
end
module C11Repeat_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C11Repeat_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C11Repeat_Impl0_Item_Type
  type a
  type item  =
    a
end
module C11Repeat_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C11Repeat_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C11Repeat_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C11Repeat_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C11Repeat_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C11Repeat_Common_Iterator_Invariant_Stub as Invariant0 with
    type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C11Repeat_Impl0
  type a
  use seq.Seq
  clone C11Repeat_Impl0_Item_Type as Item0 with
    type a = a
  use C11Repeat_Repeat_Type as C11Repeat_Repeat_Type
  clone C11Repeat_Impl0_Completed as Completed0 with
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C11Repeat_Impl0_Produces as Produces0 with
    type a = a
  clone C11Repeat_Impl0_Invariant as Invariant0 with
    type a = a
  clone C11Repeat_Impl0_ProducesRefl as ProducesRefl0 with
    type a = a,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C11Repeat_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = C11Repeat_Repeat_Type.t_repeat a,
    function produces_refl = ProducesRefl0.produces_refl,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C11Repeat_Impl0_Next_Interface as Next0 with
    type a = a,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone C11Repeat_Common_Iterator_Next_Interface as Next1 with
    type self = C11Repeat_Repeat_Type.t_repeat a,
    val next = Next0.next,
    predicate Invariant0.invariant' = Invariant0.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  goal produces_refl_spec : forall a : C11Repeat_Repeat_Type.t_repeat a . (([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../11_repeat.rs" 29 15 29 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../11_repeat.rs" 30 14 30 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a))
  clone C11Repeat_Impl0_ProducesTrans as ProducesTrans0 with
    type a = a,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone C11Repeat_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = C11Repeat_Repeat_Type.t_repeat a,
    function produces_trans = ProducesTrans0.produces_trans,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  goal produces_trans_spec : forall a : C11Repeat_Repeat_Type.t_repeat a, ab : Seq.seq a, b : C11Repeat_Repeat_Type.t_repeat a, bc : Seq.seq a, c : C11Repeat_Repeat_Type.t_repeat a . (([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) && ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) && ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) && ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) && ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../11_repeat.rs" 38 15 38 32] Produces0.produces b bc c) && ([#"../11_repeat.rs" 37 15 37 32] Produces0.produces a ab b) && ([#"../11_repeat.rs" 36 15 36 28] Invariant0.invariant' c) && ([#"../11_repeat.rs" 35 15 35 28] Invariant0.invariant' b) && ([#"../11_repeat.rs" 34 15 34 28] Invariant0.invariant' a)) /\ (forall result : () . ([#"../11_repeat.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c))
end
