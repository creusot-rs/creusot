
module C13Cloned_Cloned_Type
  type t_cloned 'i =
    | C_Cloned 'i
    
  let function cloned_iter (self : t_cloned 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Cloned a -> a
      end
end
module C13Cloned_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C13Cloned_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C13Cloned_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C13Cloned_Impl0_Completed_Stub
  type i
  type t
  use prelude.Borrow
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate completed [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i))
end
module C13Cloned_Impl0_Completed_Interface
  type i
  type t
  use prelude.Borrow
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate completed [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i))
  val completed [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) : bool
    ensures { result = completed self }
    
end
module C13Cloned_Impl0_Completed
  type i
  type t
  use prelude.Borrow
  clone C13Cloned_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate completed [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) =
    [#"../13_cloned.rs" 23 8 23 43] Completed0.completed {current = C13Cloned_Cloned_Type.cloned_iter ( * self); final = C13Cloned_Cloned_Type.cloned_iter ( ^ self)}
  val completed [#"../13_cloned.rs" 22 4 22 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) : bool
    ensures { result = completed self }
    
end
module C13Cloned_Common_Iterator_Item_Type
  type self
  type item
end
module C13Cloned_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C13Cloned_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C13Cloned_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C13Cloned_Impl0_Produces_Stub
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate produces [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
end
module C13Cloned_Impl0_Produces_Interface
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate produces [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
  val produces [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i) : bool
    ensures { result = produces self visited o }
    
end
module C13Cloned_Impl0_Produces
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = t
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  predicate produces [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i)
    
   =
    [#"../13_cloned.rs" 29 8 33 9] exists s : Seq.seq t . Produces0.produces (C13Cloned_Cloned_Type.cloned_iter self) s (C13Cloned_Cloned_Type.cloned_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  val produces [#"../13_cloned.rs" 28 4 28 64] (self : C13Cloned_Cloned_Type.t_cloned i) (visited : Seq.seq t) (o : C13Cloned_Cloned_Type.t_cloned i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C13Cloned_Cloned_Type_Inv
  type i
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  axiom inv_t_cloned [@rewrite] : forall self : C13Cloned_Cloned_Type.t_cloned i . Inv0.inv self = Inv1.inv (C13Cloned_Cloned_Type.cloned_iter self)
end
module C13Cloned_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C13Cloned_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C13Cloned_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C13Cloned_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C13Cloned_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C13Cloned_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C13Cloned_Impl0_ProducesRefl_Stub
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  function produces_refl [#"../13_cloned.rs" 39 4 39 29] (a : C13Cloned_Cloned_Type.t_cloned i) : ()
end
module C13Cloned_Impl0_ProducesRefl_Interface
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  function produces_refl [#"../13_cloned.rs" 39 4 39 29] (a : C13Cloned_Cloned_Type.t_cloned i) : ()
  val produces_refl [#"../13_cloned.rs" 39 4 39 29] (a : C13Cloned_Cloned_Type.t_cloned i) : ()
    requires {[#"../13_cloned.rs" 39 21 39 22] Inv0.inv a}
    ensures { [#"../13_cloned.rs" 38 14 38 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C13Cloned_Cloned_Type.t_cloned i . ([#"../13_cloned.rs" 39 21 39 22] Inv0.inv a) -> ([#"../13_cloned.rs" 38 14 38 39] Produces0.produces a (Seq.empty ) a)
end
module C13Cloned_Impl0_ProducesRefl
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  function produces_refl [#"../13_cloned.rs" 39 4 39 29] (a : C13Cloned_Cloned_Type.t_cloned i) : () =
    [#"../13_cloned.rs" 36 4 36 10] ()
  val produces_refl [#"../13_cloned.rs" 39 4 39 29] (a : C13Cloned_Cloned_Type.t_cloned i) : ()
    requires {[#"../13_cloned.rs" 39 21 39 22] Inv0.inv a}
    ensures { [#"../13_cloned.rs" 38 14 38 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C13Cloned_Cloned_Type.t_cloned i . ([#"../13_cloned.rs" 39 21 39 22] Inv0.inv a) -> ([#"../13_cloned.rs" 38 14 38 39] Produces0.produces a (Seq.empty ) a)
end
module C13Cloned_Impl0_ProducesRefl_Impl
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone C13Cloned_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C13Cloned_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = t,
    axiom .
  clone C13Cloned_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = t,
    axiom .
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Cloned_Type_Inv as C13Cloned_Cloned_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C13Cloned_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_refl [#"../13_cloned.rs" 39 4 39 29] (a : C13Cloned_Cloned_Type.t_cloned i) : ()
    requires {[#"../13_cloned.rs" 39 21 39 22] Inv0.inv a}
    ensures { [#"../13_cloned.rs" 38 14 38 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../13_cloned.rs" 36 4 36 10] ()
end
module C13Cloned_Impl0_ProducesTrans_Stub
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  function produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    
end
module C13Cloned_Impl0_ProducesTrans_Interface
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  function produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    
  val produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    requires {[#"../13_cloned.rs" 43 15 43 32] Produces0.produces a ab b}
    requires {[#"../13_cloned.rs" 44 15 44 32] Produces0.produces b bc c}
    requires {[#"../13_cloned.rs" 46 22 46 23] Inv0.inv a}
    requires {[#"../13_cloned.rs" 46 52 46 53] Inv0.inv b}
    requires {[#"../13_cloned.rs" 46 82 46 83] Inv0.inv c}
    ensures { [#"../13_cloned.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C13Cloned_Cloned_Type.t_cloned i, ab : Seq.seq t, b : C13Cloned_Cloned_Type.t_cloned i, bc : Seq.seq t, c : C13Cloned_Cloned_Type.t_cloned i . ([#"../13_cloned.rs" 43 15 43 32] Produces0.produces a ab b) -> ([#"../13_cloned.rs" 44 15 44 32] Produces0.produces b bc c) -> ([#"../13_cloned.rs" 46 22 46 23] Inv0.inv a) -> ([#"../13_cloned.rs" 46 52 46 53] Inv0.inv b) -> ([#"../13_cloned.rs" 46 82 46 83] Inv0.inv c) -> ([#"../13_cloned.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C13Cloned_Impl0_ProducesTrans
  type i
  type t
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  function produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    
   =
    [#"../13_cloned.rs" 41 4 41 10] ()
  val produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    requires {[#"../13_cloned.rs" 43 15 43 32] Produces0.produces a ab b}
    requires {[#"../13_cloned.rs" 44 15 44 32] Produces0.produces b bc c}
    requires {[#"../13_cloned.rs" 46 22 46 23] Inv0.inv a}
    requires {[#"../13_cloned.rs" 46 52 46 53] Inv0.inv b}
    requires {[#"../13_cloned.rs" 46 82 46 83] Inv0.inv c}
    ensures { [#"../13_cloned.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C13Cloned_Cloned_Type.t_cloned i, ab : Seq.seq t, b : C13Cloned_Cloned_Type.t_cloned i, bc : Seq.seq t, c : C13Cloned_Cloned_Type.t_cloned i . ([#"../13_cloned.rs" 43 15 43 32] Produces0.produces a ab b) -> ([#"../13_cloned.rs" 44 15 44 32] Produces0.produces b bc c) -> ([#"../13_cloned.rs" 46 22 46 23] Inv0.inv a) -> ([#"../13_cloned.rs" 46 52 46 53] Inv0.inv b) -> ([#"../13_cloned.rs" 46 82 46 83] Inv0.inv c) -> ([#"../13_cloned.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C13Cloned_Impl0_ProducesTrans_Impl
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone C13Cloned_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C13Cloned_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = t,
    axiom .
  clone C13Cloned_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = t,
    axiom .
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Cloned_Type_Inv as C13Cloned_Cloned_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C13Cloned_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_trans [#"../13_cloned.rs" 46 4 46 90] (a : C13Cloned_Cloned_Type.t_cloned i) (ab : Seq.seq t) (b : C13Cloned_Cloned_Type.t_cloned i) (bc : Seq.seq t) (c : C13Cloned_Cloned_Type.t_cloned i) : ()
    requires {[#"../13_cloned.rs" 43 15 43 32] Produces0.produces a ab b}
    requires {[#"../13_cloned.rs" 44 15 44 32] Produces0.produces b bc c}
    requires {[#"../13_cloned.rs" 46 22 46 23] Inv0.inv a}
    requires {[#"../13_cloned.rs" 46 52 46 53] Inv0.inv b}
    requires {[#"../13_cloned.rs" 46 82 46 83] Inv0.inv c}
    ensures { [#"../13_cloned.rs" 45 14 45 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../13_cloned.rs" 41 4 41 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C13Cloned_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = self
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C13Cloned_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C13Cloned_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Inv0.inv self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 17 27 21] Inv1.inv ( ^ self) }
    
end
module Core_Option_Impl2_Cloned_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val cloned (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 80 16 80 59] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 17 0 114 1] self = Core_Option_Option_Type.C_None \/ (exists t : t . self = Core_Option_Option_Type.C_Some t /\ result = Core_Option_Option_Type.C_Some t) }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = Inv1.inv ( * self)
end
module C13Cloned_Impl0_Next_Interface
  type i
  type t
  use prelude.Borrow
  use seq.Seq
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone C13Cloned_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C13Cloned_Cloned_Type.t_cloned i)
  val next [#"../13_cloned.rs" 52 4 52 35] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) : Core_Option_Option_Type.t_option t
    requires {[#"../13_cloned.rs" 52 17 52 21] Inv0.inv self}
    ensures { [#"../13_cloned.rs" 48 14 51 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../13_cloned.rs" 52 17 52 21] Inv1.inv ( ^ self) }
    
end
module C13Cloned_Impl0_Next
  type i
  type t
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed i
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Cloned_Type_Inv as C13Cloned_Cloned_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C13Cloned_Cloned_Type.t_cloned i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C13Cloned_Cloned_Type.t_cloned i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C13Cloned_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C13Cloned_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C13Cloned_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    type Item0.item = t,
    axiom .
  clone C13Cloned_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = t,
    axiom .
  clone C13Cloned_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  clone C13Cloned_Impl0_Completed as Completed0 with
    type i = i,
    type t = t,
    predicate Completed0.completed = Completed1.completed
  clone Core_Option_Impl2_Cloned_Interface as Cloned0 with
    type t = t
  clone C13Cloned_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    type Item0.item = t,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv1.inv = Inv3.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  let rec cfg next [#"../13_cloned.rs" 52 4 52 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C13Cloned_Cloned_Type.t_cloned i)) : Core_Option_Option_Type.t_option t
    requires {[#"../13_cloned.rs" 52 17 52 21] Inv0.inv self}
    ensures { [#"../13_cloned.rs" 48 14 51 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../13_cloned.rs" 52 17 52 21] Inv1.inv ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self : borrowed (C13Cloned_Cloned_Type.t_cloned i) = self;
  var _4 : borrowed i;
  {
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut (C13Cloned_Cloned_Type.cloned_iter ( * self));
    self <- { self with current = (let C13Cloned_Cloned_Type.C_Cloned a =  * self in C13Cloned_Cloned_Type.C_Cloned ( ^ _4)) };
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self };
    _0 <- ([#"../13_cloned.rs" 53 8 53 33] Cloned0.cloned ([#"../13_cloned.rs" 53 8 53 24] Next0.next _4));
    _4 <- any borrowed i;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C13Cloned_Impl0
  type i
  type t
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone C13Cloned_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C13Cloned_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  use C13Cloned_Cloned_Type as C13Cloned_Cloned_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C13Cloned_Cloned_Type.t_cloned i
  clone C13Cloned_Cloned_Type_Inv as C13Cloned_Cloned_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C13Cloned_Cloned_Type.t_cloned i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C13Cloned_Cloned_Type.t_cloned i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C13Cloned_Common_Iterator_Item_Type as Item0 with
    type self = C13Cloned_Cloned_Type.t_cloned i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C13Cloned_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  clone C13Cloned_Impl0_Completed as Completed0 with
    type i = i,
    type t = t,
    predicate Completed0.completed = Completed1.completed
  goal next_refn : [#"../13_cloned.rs" 52 4 52 35] forall self : borrowed (C13Cloned_Cloned_Type.t_cloned i) . Inv0.inv self -> Inv0.inv self /\ (forall result : Core_Option_Option_Type.t_option t . Inv1.inv ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Inv1.inv ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../13_cloned.rs" 39 4 39 29] forall a : C13Cloned_Cloned_Type.t_cloned i . Inv1.inv a -> Inv1.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal produces_trans_refn : [#"../13_cloned.rs" 46 4 46 90] forall a : C13Cloned_Cloned_Type.t_cloned i . forall ab : Seq.seq t . forall b : C13Cloned_Cloned_Type.t_cloned i . forall bc : Seq.seq t . forall c : C13Cloned_Cloned_Type.t_cloned i . Inv1.inv c /\ Inv1.inv b /\ Inv1.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv1.inv c /\ Inv1.inv b /\ Inv1.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
end
module C13Cloned_Impl1
  type i
  type t
end
