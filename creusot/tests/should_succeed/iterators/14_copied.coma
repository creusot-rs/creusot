module M_14_copied__qyi9674708226815778747__resolve_coherence [#"14_copied.rs" 9 9 9 16] (* <Copied<I> as creusot_contracts::Resolve> *)
  let%span s14_copied0 = "14_copied.rs" 9 9 9 16
  let%span s14_copied1 = "14_copied.rs" 9 9 9 16
  let%span s14_copied2 = "14_copied.rs" 11 4 11 11
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  predicate resolve'1 (_1 : t_I'0)
  
  predicate structural_resolve'0 (_1 : t_Copied'0) =
    match _1 with
      | {t_Copied__iter'0 = x0} -> resolve'1 x0
      end
  
  predicate resolve'0 [#"14_copied.rs" 9 9 9 16] (self : t_Copied'0) =
    [%#s14_copied2] resolve'1 self.t_Copied__iter'0
  
  constant self  : t_Copied'0
  
  function resolve_coherence'0 [#"14_copied.rs" 9 9 9 16] (self : t_Copied'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s14_copied0] structural_resolve'0 self)  -> ([%#s14_copied0] resolve'0 self)
end
module M_14_copied__qyi6387100604932246480__produces_refl [#"14_copied.rs" 41 4 41 26] (* <Copied<I> as common::Iterator> *)
  let%span s14_copied0 = "14_copied.rs" 40 14 40 45
  let%span s14_copied1 = "14_copied.rs" 38 4 38 10
  let%span s14_copied2 = "14_copied.rs" 31 12 34 79
  let%span scommon3 = "common.rs" 14 14 14 45
  let%span scommon4 = "common.rs" 18 15 18 32
  let%span scommon5 = "common.rs" 19 15 19 32
  let%span scommon6 = "common.rs" 20 14 20 42
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#scommon4] produces'1 a ab b)
   -> ([%#scommon5] produces'1 b bc c)  -> ([%#scommon6] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon3] produces'1 self (Seq.empty  : Seq.seq t_T'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"14_copied.rs" 29 4 29 64] (self : t_Copied'0) (visited : Seq.seq t_T'0) (o : t_Copied'0) =
    [%#s14_copied2] exists s : Seq.seq t_T'0 . produces'1 self.t_Copied__iter'0 s o.t_Copied__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  constant self  : t_Copied'0
  
  function produces_refl'0 [#"14_copied.rs" 41 4 41 26] (self : t_Copied'0) : ()
  
  goal vc_produces_refl'0 : [%#s14_copied0] produces'0 self (Seq.empty  : Seq.seq t_T'0) self
end
module M_14_copied__qyi6387100604932246480__produces_trans [#"14_copied.rs" 48 4 48 90] (* <Copied<I> as common::Iterator> *)
  let%span s14_copied0 = "14_copied.rs" 45 15 45 32
  let%span s14_copied1 = "14_copied.rs" 46 15 46 32
  let%span s14_copied2 = "14_copied.rs" 47 14 47 42
  let%span s14_copied3 = "14_copied.rs" 43 4 43 10
  let%span s14_copied4 = "14_copied.rs" 31 12 34 79
  let%span scommon5 = "common.rs" 14 14 14 45
  let%span scommon6 = "common.rs" 18 15 18 32
  let%span scommon7 = "common.rs" 19 15 19 32
  let%span scommon8 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#scommon6] produces'1 a ab b)
   -> ([%#scommon7] produces'1 b bc c)  -> ([%#scommon8] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon5] produces'1 self (Seq.empty  : Seq.seq t_T'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"14_copied.rs" 29 4 29 64] (self : t_Copied'0) (visited : Seq.seq t_T'0) (o : t_Copied'0) =
    [%#s14_copied4] exists s : Seq.seq t_T'0 . produces'1 self.t_Copied__iter'0 s o.t_Copied__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  constant a  : t_Copied'0
  
  constant ab  : Seq.seq t_T'0
  
  constant b  : t_Copied'0
  
  constant bc  : Seq.seq t_T'0
  
  constant c  : t_Copied'0
  
  function produces_trans'0 [#"14_copied.rs" 48 4 48 90] (a : t_Copied'0) (ab : Seq.seq t_T'0) (b : t_Copied'0) (bc : Seq.seq t_T'0) (c : t_Copied'0) : ()
    
  
  goal vc_produces_trans'0 : ([%#s14_copied1] produces'0 b bc c)
   -> ([%#s14_copied0] produces'0 a ab b)  -> ([%#s14_copied2] produces'0 a (Seq.(++) ab bc) c)
end
module M_14_copied__qyi6387100604932246480__next [#"14_copied.rs" 54 4 54 35] (* <Copied<I> as common::Iterator> *)
  let%span s14_copied0 = "14_copied.rs" 54 17 54 21
  let%span s14_copied1 = "14_copied.rs" 54 26 54 35
  let%span s14_copied2 = "14_copied.rs" 50 14 53 5
  let%span scommon3 = "common.rs" 27 17 27 21
  let%span scommon4 = "common.rs" 27 26 27 44
  let%span scommon5 = "common.rs" 23 14 26 5
  let%span soption6 = "../../../../creusot-contracts/src/std/option.rs" 31 0 423 1
  let%span s14_copied7 = "14_copied.rs" 24 8 24 43
  let%span s14_copied8 = "14_copied.rs" 31 12 34 79
  let%span scommon9 = "common.rs" 14 14 14 45
  let%span scommon10 = "common.rs" 18 15 18 32
  let%span scommon11 = "common.rs" 19 15 19 32
  let%span scommon12 = "common.rs" 20 14 20 42
  let%span sresolve13 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant15 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  predicate inv'0 (_1 : t_I'0)
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  type t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#scommon10] produces'1 a ab b)
   -> ([%#scommon11] produces'1 b bc c)  -> ([%#scommon12] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon9] produces'1 self (Seq.empty  : Seq.seq t_T'0) self
  
  predicate invariant'1 (self : borrowed t_I'0) =
    [%#sinvariant14] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed t_I'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_I'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'2 (self : t_T'0) =
    [%#sinvariant15] inv'5 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'2 x
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x
  = match x with
    | C_None'1 -> true
    | C_Some'1 a_0 -> inv'6 a_0
    end
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  use seq.Seq
  
  let rec next'1 (self:borrowed t_I'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#scommon3] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {[%#scommon4] inv'4 result}
      {[%#scommon5] match result with
        | C_None'1 -> completed'1 self
        | C_Some'1 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate inv'7 (_1 : t_Copied'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Copied'0 [inv'7 x] . inv'7 x
  = match x with
    | {t_Copied__iter'0 = iter} -> inv'0 iter
    end
  
  predicate invariant'0 (self : borrowed (t_Copied'0)) =
    [%#sinvariant14] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'1 (_1 : borrowed (t_Copied'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Copied'0) [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate resolve'1 (self : borrowed (t_Copied'0)) =
    [%#sresolve13] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Copied'0)) =
    resolve'1 _1
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 t_T'0
  
  predicate inv'2 (_1 : t_Option'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'1 [inv'2 x] . inv'2 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'5 a_0
    end
  
  let rec copied'0 (self:t_Option'0) (return'  (ret:t_Option'1))= {[@expl:copied 'self' type invariant] inv'4 self}
    any
    [ return' (result:t_Option'1)-> {inv'2 result}
      {[%#soption6] self = C_None'1  -> result = C_None'0}
      {[%#soption6] self = C_None'1 \/ (exists t : t_T'0 . self = C_Some'1 t /\ result = C_Some'0 t)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate completed'0 [#"14_copied.rs" 23 4 23 35] (self : borrowed (t_Copied'0)) =
    [%#s14_copied7] completed'1 (Borrow.borrow_logic (self.current).t_Copied__iter'0 (self.final).t_Copied__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"14_copied.rs" 29 4 29 64] (self : t_Copied'0) (visited : Seq.seq t_T'0) (o : t_Copied'0) =
    [%#s14_copied8] exists s : Seq.seq t_T'0 . produces'1 self.t_Copied__iter'0 s o.t_Copied__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  meta "compute_max_steps" 1000000
  
  let rec next'0 (self:borrowed (t_Copied'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] [%#s14_copied0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Copied__iter'0}
        Borrow.borrow_final <t_I'0> {(self.current).t_Copied__iter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
          (fun (_ret':borrowed t_I'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { t_Copied__iter'0 = _ret'.final } } ] 
            s1)
      | s1 = next'1 {_4} (fun (_ret':t_Option'0) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = copied'0 {_3} (fun (_ret':t_Option'1) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    )
    [ & _0 : t_Option'1 = any_l ()
    | & self : borrowed (t_Copied'0) = self
    | & _3 : t_Option'0 = any_l ()
    | & _4 : borrowed t_I'0 = any_l () ]
    
    [ return' (result:t_Option'1)-> {[@expl:next result type invariant] [%#s14_copied1] inv'2 result}
      {[@expl:next ensures] [%#s14_copied2] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_14_copied__qyi9674708226815778747__resolve_coherence__refines [#"14_copied.rs" 9 9 9 16] (* <Copied<I> as creusot_contracts::Resolve> *)
  let%span s14_copied0 = "14_copied.rs" 9 9 9 16
  let%span s14_copied1 = "14_copied.rs" 11 4 11 11
  let%span sinvariant2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  predicate resolve'1 (_1 : t_I'0)
  
  predicate structural_resolve'0 (_1 : t_Copied'0) =
    match _1 with
      | {t_Copied__iter'0 = x0} -> resolve'1 x0
      end
  
  predicate inv'2 (_1 : t_I'0)
  
  predicate inv'1 (_1 : t_Copied'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Copied'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Copied__iter'0 = iter} -> inv'2 iter
    end
  
  predicate invariant'0 (self : t_Copied'0) =
    [%#sinvariant2] inv'1 self
  
  predicate inv'0 (_1 : t_Copied'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Copied'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"14_copied.rs" 9 9 9 16] (self : t_Copied'0) =
    [%#s14_copied1] resolve'1 self.t_Copied__iter'0
  
  goal refines : [%#s14_copied0] forall self : t_Copied'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_14_copied__qyi6387100604932246480__produces_trans__refines [#"14_copied.rs" 48 4 48 90] (* <Copied<I> as common::Iterator> *)
  let%span s14_copied0 = "14_copied.rs" 48 4 48 90
  let%span s14_copied1 = "14_copied.rs" 31 12 34 79
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'1 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_T'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"14_copied.rs" 29 4 29 64] (self : t_Copied'0) (visited : Seq.seq t_T'0) (o : t_Copied'0) =
    [%#s14_copied1] exists s : Seq.seq t_T'0 . produces'1 self.t_Copied__iter'0 s o.t_Copied__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  goal refines : [%#s14_copied0] forall a : t_Copied'0 . forall ab : Seq.seq t_T'0 . forall b : t_Copied'0 . forall bc : Seq.seq t_T'0 . forall c : t_Copied'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_14_copied__qyi6387100604932246480__next__refines [#"14_copied.rs" 54 4 54 35] (* <Copied<I> as common::Iterator> *)
  let%span s14_copied0 = "14_copied.rs" 54 4 54 35
  let%span s14_copied1 = "14_copied.rs" 24 8 24 43
  let%span s14_copied2 = "14_copied.rs" 31 12 34 79
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span scommon4 = "common.rs" 14 14 14 45
  let%span scommon5 = "common.rs" 18 15 18 32
  let%span scommon6 = "common.rs" 19 15 19 32
  let%span scommon7 = "common.rs" 20 14 20 42
  
  use prelude.prelude.Borrow
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  predicate inv'4 (_1 : t_I'0)
  
  predicate inv'3 (_1 : t_Copied'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Copied'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Copied__iter'0 = iter} -> inv'4 iter
    end
  
  predicate invariant'0 (self : borrowed (t_Copied'0)) =
    [%#sinvariant3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (t_Copied'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Copied'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#scommon5] produces'1 a ab b)
   -> ([%#scommon6] produces'1 b bc c)  -> ([%#scommon7] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_I'0 . [%#scommon4] produces'1 self (Seq.empty  : Seq.seq t_T'0) self
  
  predicate completed'1 [#"common.rs" 11 4 11 36] (self : borrowed t_I'0)
  
  predicate completed'0 [#"14_copied.rs" 23 4 23 35] (self : borrowed (t_Copied'0)) =
    [%#s14_copied1] completed'1 (Borrow.borrow_logic (self.current).t_Copied__iter'0 (self.final).t_Copied__iter'0 (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"14_copied.rs" 29 4 29 64] (self : t_Copied'0) (visited : Seq.seq t_T'0) (o : t_Copied'0) =
    [%#s14_copied2] exists s : Seq.seq t_T'0 . produces'1 self.t_Copied__iter'0 s o.t_Copied__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  goal refines : [%#s14_copied0] forall self : borrowed (t_Copied'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_14_copied__qyi6387100604932246480__produces_refl__refines [#"14_copied.rs" 41 4 41 26] (* <Copied<I> as common::Iterator> *)
  let%span s14_copied0 = "14_copied.rs" 41 4 41 26
  let%span s14_copied1 = "14_copied.rs" 31 12 34 79
  let%span scommon2 = "common.rs" 14 14 14 45
  let%span scommon3 = "common.rs" 18 15 18 32
  let%span scommon4 = "common.rs" 19 15 19 32
  let%span scommon5 = "common.rs" 20 14 20 42
  
  type t_I'0
  
  type t_Copied'0  =
    { t_Copied__iter'0: t_I'0 }
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"common.rs" 8 4 8 65] (self : t_I'0) (visited : Seq.seq t_T'0) (o : t_I'0)
  
  function produces_trans'0 [#"common.rs" 21 4 21 91] (a : t_I'0) (ab : Seq.seq t_T'0) (b : t_I'0) (bc : Seq.seq t_T'0) (c : t_I'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_I'0, ab : Seq.seq t_T'0, b : t_I'0, bc : Seq.seq t_T'0, c : t_I'0 . ([%#scommon3] produces'1 a ab b)
   -> ([%#scommon4] produces'1 b bc c)  -> ([%#scommon5] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 [#"common.rs" 15 4 15 27] (self : t_I'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_I'0 . [%#scommon2] produces'1 self (Seq.empty  : Seq.seq t_T'0) self
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"14_copied.rs" 29 4 29 64] (self : t_Copied'0) (visited : Seq.seq t_T'0) (o : t_Copied'0) =
    [%#s14_copied1] exists s : Seq.seq t_T'0 . produces'1 self.t_Copied__iter'0 s o.t_Copied__iter'0
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  goal refines : [%#s14_copied0] forall self : t_Copied'0 . forall result : () . produces'0 self (Seq.empty  : Seq.seq t_T'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_T'0) self
end
