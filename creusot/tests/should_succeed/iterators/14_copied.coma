
module C14Copied_Copied_Type
  type t_copied 'i =
    | C_Copied 'i
  
  function any_l (_ : 'b) : 'a
  
  let rec t_copied < 'i > (input:t_copied 'i) (ret  (iter:'i))= any
    [ good (iter:'i)-> {C_Copied iter = input} (! ret {iter}) | bad (iter:'i)-> {C_Copied iter <> input} {false} any ]
    
  
  function copied_iter (self : t_copied 'i) : 'i =
    match self with
      | C_Copied a -> a
      end
end
module C14Copied_Impl0_ProducesRefl_Impl
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 39 21 39 25
  
  let%span s14_copied1 = "../14_copied.rs" 38 14 38 45
  
  let%span span2 = "../common.rs" 18 15 18 32
  
  let%span span3 = "../common.rs" 19 15 19 32
  
  let%span span4 = "../common.rs" 21 22 21 23
  
  let%span span5 = "../common.rs" 21 31 21 33
  
  let%span span6 = "../common.rs" 21 52 21 53
  
  let%span span7 = "../common.rs" 21 61 21 63
  
  let%span span8 = "../common.rs" 21 82 21 83
  
  let%span span9 = "../common.rs" 20 14 20 42
  
  let%span span10 = "../common.rs" 15 21 15 25
  
  let%span span11 = "../common.rs" 14 14 14 45
  
  let%span span12 = "../14_copied.rs" 29 8 33 9
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq t)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span2] produces'1 a ab b)
   -> ([%#span3] produces'1 b bc c)
   -> ([%#span4] inv'2 a)
   -> ([%#span5] inv'1 ab)
   -> ([%#span6] inv'2 b)
   -> ([%#span7] inv'1 bc)  -> ([%#span8] inv'2 c)  -> ([%#span9] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span10] inv'2 self)
   -> ([%#span11] produces'1 self (Seq.empty  : Seq.seq t) self)
  
  predicate invariant'1 (self : Seq.seq t)
  
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  
  use C14Copied_Copied_Type as Copied'0
  
  predicate invariant'0 (self : Copied'0.t_copied i)
  
  predicate inv'0 (_x : Copied'0.t_copied i)
  
  axiom inv'0 : forall x : Copied'0.t_copied i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  
  use prelude.prelude.Borrow
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_copied i) (visited : Seq.seq t) (o : Copied'0.t_copied i)
    
   =
    [%#span12] exists s : Seq.seq t . inv'1 s
    /\ produces'1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  constant self  : Copied'0.t_copied i
  
  function produces_refl [#"../14_copied.rs" 39 4 39 26] (self : Copied'0.t_copied i) : ()
  
  goal vc_produces_refl : ([%#s14_copied0] inv'0 self)
   -> ([%#s14_copied1] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module C14Copied_Impl0_ProducesTrans_Impl
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 43 15 43 32
  
  let%span s14_copied1 = "../14_copied.rs" 44 15 44 32
  
  let%span s14_copied2 = "../14_copied.rs" 46 22 46 23
  
  let%span s14_copied3 = "../14_copied.rs" 46 31 46 33
  
  let%span s14_copied4 = "../14_copied.rs" 46 52 46 53
  
  let%span s14_copied5 = "../14_copied.rs" 46 61 46 63
  
  let%span s14_copied6 = "../14_copied.rs" 46 82 46 83
  
  let%span s14_copied7 = "../14_copied.rs" 45 14 45 42
  
  let%span span8 = "../common.rs" 18 15 18 32
  
  let%span span9 = "../common.rs" 19 15 19 32
  
  let%span span10 = "../common.rs" 21 22 21 23
  
  let%span span11 = "../common.rs" 21 31 21 33
  
  let%span span12 = "../common.rs" 21 52 21 53
  
  let%span span13 = "../common.rs" 21 61 21 63
  
  let%span span14 = "../common.rs" 21 82 21 83
  
  let%span span15 = "../common.rs" 20 14 20 42
  
  let%span span16 = "../common.rs" 15 21 15 25
  
  let%span span17 = "../common.rs" 14 14 14 45
  
  let%span span18 = "../14_copied.rs" 29 8 33 9
  
  predicate invariant'3 (self : i)
  
  predicate inv'3 (_x : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'2 (_x : Seq.seq t)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span8] produces'1 a ab b)
   -> ([%#span9] produces'1 b bc c)
   -> ([%#span10] inv'3 a)
   -> ([%#span11] inv'2 ab)
   -> ([%#span12] inv'3 b)
   -> ([%#span13] inv'2 bc)  -> ([%#span14] inv'3 c)  -> ([%#span15] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span16] inv'3 self)
   -> ([%#span17] produces'1 self (Seq.empty  : Seq.seq t) self)
  
  predicate invariant'2 (self : Seq.seq t)
  
  axiom inv'2 : forall x : Seq.seq t . inv'2 x = true
  
  predicate invariant'1 (self : Seq.seq t)
  
  predicate inv'1 (_x : Seq.seq t)
  
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  
  use C14Copied_Copied_Type as Copied'0
  
  predicate invariant'0 (self : Copied'0.t_copied i)
  
  predicate inv'0 (_x : Copied'0.t_copied i)
  
  axiom inv'0 : forall x : Copied'0.t_copied i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  
  use prelude.prelude.Borrow
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_copied i) (visited : Seq.seq t) (o : Copied'0.t_copied i)
    
   =
    [%#span18] exists s : Seq.seq t . inv'2 s
    /\ produces'1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  constant a  : Copied'0.t_copied i
  
  constant ab  : Seq.seq t
  
  constant b  : Copied'0.t_copied i
  
  constant bc  : Seq.seq t
  
  constant c  : Copied'0.t_copied i
  
  function produces_trans [#"../14_copied.rs" 46 4 46 90] (a : Copied'0.t_copied i) (ab : Seq.seq t) (b : Copied'0.t_copied i) (bc : Seq.seq t) (c : Copied'0.t_copied i) : ()
    
  
  goal vc_produces_trans : ([%#s14_copied6] inv'0 c)
   -> ([%#s14_copied5] inv'1 bc)
   -> ([%#s14_copied4] inv'0 b)
   -> ([%#s14_copied3] inv'1 ab)
   -> ([%#s14_copied2] inv'0 a)
   -> ([%#s14_copied1] produces'0 b bc c)
   -> ([%#s14_copied0] produces'0 a ab b)  -> ([%#s14_copied7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C14Copied_Impl0_Next
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 52 17 52 21
  
  let%span s14_copied1 = "../14_copied.rs" 48 14 51 5
  
  let%span s14_copied2 = "../14_copied.rs" 52 26 52 35
  
  let%span span3 = "../common.rs" 18 15 18 32
  
  let%span span4 = "../common.rs" 19 15 19 32
  
  let%span span5 = "../common.rs" 21 22 21 23
  
  let%span span6 = "../common.rs" 21 31 21 33
  
  let%span span7 = "../common.rs" 21 52 21 53
  
  let%span span8 = "../common.rs" 21 61 21 63
  
  let%span span9 = "../common.rs" 21 82 21 83
  
  let%span span10 = "../common.rs" 20 14 20 42
  
  let%span span11 = "../common.rs" 15 21 15 25
  
  let%span span12 = "../common.rs" 14 14 14 45
  
  let%span span13 = "../14_copied.rs" 29 8 33 9
  
  let%span span14 = "../14_copied.rs" 23 8 23 43
  
  let%span span15 = "" 0 0 0 0
  
  let%span span16 = "../../../../../creusot-contracts/src/std/option.rs" 98 16 98 59
  
  let%span span17 = "../../../../../creusot-contracts/src/std/option.rs" 29 0 140 1
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span20 = "../common.rs" 27 17 27 21
  
  let%span span21 = "../common.rs" 23 14 26 5
  
  let%span span22 = "../common.rs" 27 26 27 44
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq t)
  
  predicate inv'6 (_x : Seq.seq t)
  
  axiom inv'6 : forall x : Seq.seq t . inv'6 x = true
  
  predicate invariant'5 (self : t)
  
  predicate inv'5 (_x : t)
  
  axiom inv'5 : forall x : t . inv'5 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'4 (self : Option'0.t_option t)
  
  predicate inv'4 (_x : Option'0.t_option t)
  
  axiom inv'4 : forall x : Option'0.t_option t . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed i)
  
  predicate inv'3 (_x : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  predicate invariant'2 (self : Option'0.t_option t)
  
  predicate inv'2 (_x : Option'0.t_option t)
  
  axiom inv'2 : forall x : Option'0.t_option t . inv'2 x = true
  
  use C14Copied_Copied_Type as Copied'0
  
  predicate invariant'1 (self : borrowed (Copied'0.t_copied i))
  
  predicate inv'1 (_x : borrowed (Copied'0.t_copied i))
  
  axiom inv'1 : forall x : borrowed (Copied'0.t_copied i) . inv'1 x = true
  
  use seq.Seq
  
  predicate inv'0 (_x : i)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span3] produces'1 a ab b)
   -> ([%#span4] produces'1 b bc c)
   -> ([%#span5] inv'0 a)
   -> ([%#span6] inv'6 ab)
   -> ([%#span7] inv'0 b)
   -> ([%#span8] inv'6 bc)  -> ([%#span9] inv'0 c)  -> ([%#span10] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span11] inv'0 self)
   -> ([%#span12] produces'1 self (Seq.empty  : Seq.seq t) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_copied i) (visited : Seq.seq t) (o : Copied'0.t_copied i)
    
   =
    [%#span13] exists s : Seq.seq t . inv'6 s
    /\ produces'1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (Copied'0.t_copied i)) =
    [%#span14] completed'1 (Borrow.borrow_logic (C14Copied_Copied_Type.copied_iter ( * self)) (C14Copied_Copied_Type.copied_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  let rec copied'0 (self:Option'0.t_option t) (return'  (ret:Option'0.t_option t))= {[@expl:precondition] [%#span15] inv'4 self}
    any
    [ return' (result:Option'0.t_option t)-> {[%#span18] inv'2 result}
      {[%#span17] self = Option'0.C_None
      \/ (exists t : t . inv'5 t /\ self = Option'0.C_Some t /\ result = Option'0.C_Some t)}
      {[%#span16] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (Copied'0.t_copied i)) =
    [%#span19]  ^ self =  * self
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option t))= {[@expl:precondition] [%#span20] inv'3 self}
    any
    [ return' (result:Option'0.t_option t)-> {[%#span22] inv'4 result}
      {[%#span21] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Copied'0.t_copied i)) (return'  (ret:Option'0.t_option t))= {[%#s14_copied0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Copied'0.t_copied <i> { * self}
          (fun (riter'0:i) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                Copied'0.t_copied <i> { * self}
                  (fun (l_iter'0:i) ->  [ &self <- { self with current = Copied'0.C_Copied ( ^ _4) ; } ] s1)))
      | s1 = -{inv'0 ( ^ _4)}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_option t) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = copied'0 {_3} (fun (_ret':Option'0.t_option t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option t = any_l ()
    | & self : borrowed (Copied'0.t_copied i) = self
    | & _3 : Option'0.t_option t = any_l ()
    | & _4 : borrowed i = any_l () ]
    
    [ return' (result:Option'0.t_option t)-> {[@expl:postcondition] [%#s14_copied2] inv'2 result}
      {[@expl:postcondition] [%#s14_copied1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
end
module C14Copied_Impl0
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 46 4 46 90
  
  let%span s14_copied1 = "../14_copied.rs" 52 4 52 35
  
  let%span s14_copied2 = "../14_copied.rs" 39 4 39 26
  
  let%span span3 = "../14_copied.rs" 23 8 23 43
  
  let%span span4 = "../14_copied.rs" 29 8 33 9
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t)
  
  predicate inv'4 (_x : Seq.seq t)
  
  axiom inv'4 : forall x : Seq.seq t . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option t)
  
  predicate inv'3 (_x : Option'0.t_option t)
  
  axiom inv'3 : forall x : Option'0.t_option t . inv'3 x = true
  
  use C14Copied_Copied_Type as Copied'0
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Copied'0.t_copied i))
  
  predicate inv'2 (_x : borrowed (Copied'0.t_copied i))
  
  axiom inv'2 : forall x : borrowed (Copied'0.t_copied i) . inv'2 x = true
  
  predicate invariant'1 (self : Seq.seq t)
  
  predicate inv'1 (_x : Seq.seq t)
  
  axiom inv'1 : forall x : Seq.seq t . inv'1 x = true
  
  predicate invariant'0 (self : Copied'0.t_copied i)
  
  predicate inv'0 (_x : Copied'0.t_copied i)
  
  axiom inv'0 : forall x : Copied'0.t_copied i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  
  predicate completed'0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (Copied'0.t_copied i)) =
    [%#span3] completed'1 (Borrow.borrow_logic (C14Copied_Copied_Type.copied_iter ( * self)) (C14Copied_Copied_Type.copied_iter ( ^ self)) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_copied i) (visited : Seq.seq t) (o : Copied'0.t_copied i)
    
   =
    [%#span4] exists s : Seq.seq t . inv'4 s
    /\ produces'1 (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  goal produces_trans_refn : [%#s14_copied0] forall a : Copied'0.t_copied i . forall ab : Seq.seq t . forall b : Copied'0.t_copied i . forall bc : Seq.seq t . forall c : Copied'0.t_copied i . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s14_copied1] forall self : borrowed (Copied'0.t_copied i) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option t . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
    end)
  
  goal produces_refl_refn : [%#s14_copied2] forall self : Copied'0.t_copied i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
end
